
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00003a32  00003ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800194  00800194  00003b5a  2**0
                  ALLOC
  3 .stab         00007998  00000000  00000000  00003b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0001557a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000155bc  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000001c0  00000000  00000000  000155fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003414  00000000  00000000  000157bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000011c6  00000000  00000000  00018bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001fa5  00000000  00000000  00019d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000548  00000000  00000000  0001bd3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a04  00000000  00000000  0001c284  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000015a5  00000000  00000000  0001cc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001c0  00000000  00000000  0001e22d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 28 01 	jmp	0x250	; 0x250 <__dtors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      1c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      20:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      24:	0c 94 30 15 	jmp	0x2a60	; 0x2a60 <__vector_9>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      34:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_13>
      38:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      48:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__vector_18>
      4c:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__vector_19>
      50:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	5c 07       	cpc	r21, r28
      6a:	8a 07       	cpc	r24, r26
      6c:	f5 07       	cpc	r31, r21
      6e:	60 07       	cpc	r22, r16
      70:	6f 07       	cpc	r22, r31
      72:	7e 07       	cpc	r23, r30
      74:	60 07       	cpc	r22, r16
      76:	60 07       	cpc	r22, r16
      78:	60 07       	cpc	r22, r16

0000007a <__trampolines_end>:
      7a:	21 20       	and	r2, r1
      7c:	4f 35       	cpi	r20, 0x5F	; 95
      7e:	20 4c       	sbci	r18, 0xC0	; 192
      80:	31 36       	cpi	r19, 0x61	; 97
      82:	20 61       	ori	r18, 0x10	; 16
      84:	67 61       	ori	r22, 0x17	; 23
      86:	66 61       	ori	r22, 0x16	; 22
      88:	65 61       	ori	r22, 0x15	; 21
      8a:	20 64       	ori	r18, 0x40	; 64
      8c:	61 63       	ori	r22, 0x31	; 49
      8e:	2b 61       	ori	r18, 0x1B	; 27
      90:	64 61       	ori	r22, 0x14	; 20
      92:	65 61       	ori	r22, 0x15	; 21
      94:	20 66       	ori	r18, 0x60	; 96
      96:	61 3c       	cpi	r22, 0xC1	; 193
      98:	61 61       	ori	r22, 0x11	; 17
      9a:	3c 62       	ori	r19, 0x2C	; 44
      9c:	61 63       	ori	r22, 0x31	; 49
      9e:	23 61       	ori	r18, 0x13	; 19
      a0:	20 64       	ori	r18, 0x40	; 64
      a2:	61 63       	ori	r22, 0x31	; 49
      a4:	23 61       	ori	r18, 0x13	; 19
      a6:	64 61       	ori	r22, 0x14	; 20
      a8:	65 61       	ori	r22, 0x15	; 21
      aa:	20 66       	ori	r18, 0x60	; 96
      ac:	4f 36       	cpi	r20, 0x6F	; 111
      ae:	20 64       	ori	r18, 0x40	; 64
      b0:	63 64       	ori	r22, 0x43	; 67
      b2:	3c 62       	ori	r19, 0x2C	; 44
      b4:	2d 64       	ori	r18, 0x4D	; 77
      b6:	3c 61       	ori	r19, 0x1C	; 28
      b8:	64 3c       	cpi	r22, 0xC4	; 196
      ba:	67 20       	and	r6, r7
      bc:	64 3c       	cpi	r22, 0xC4	; 196
      be:	66 2b       	or	r22, r22
      c0:	64 3c       	cpi	r22, 0xC4	; 196
      c2:	67 64       	ori	r22, 0x47	; 71
      c4:	3c 61       	ori	r19, 0x1C	; 28
      c6:	64 3c       	cpi	r22, 0xC4	; 196
      c8:	62 2d       	mov	r22, r2
      ca:	20 64       	ori	r18, 0x40	; 64
      cc:	3c 64       	ori	r19, 0x4C	; 76
      ce:	64 3c       	cpi	r22, 0xC4	; 196
      d0:	65 64       	ori	r22, 0x45	; 69
      d2:	3c 66       	ori	r19, 0x6C	; 108
      d4:	2b 64       	ori	r18, 0x4B	; 75
      d6:	3c 67       	ori	r19, 0x7C	; 124
      d8:	20 64       	ori	r18, 0x40	; 64
      da:	3c 66       	ori	r19, 0x6C	; 108
      dc:	2b 64       	ori	r18, 0x4B	; 75
      de:	3c 67       	ori	r19, 0x7C	; 124
      e0:	64 3c       	cpi	r22, 0xC4	; 196
      e2:	61 64       	ori	r22, 0x41	; 65
      e4:	4c 38       	cpi	r20, 0x8C	; 140
      e6:	20 4d       	sbci	r18, 0xD0	; 208
      e8:	53 20       	and	r5, r3
      ea:	3c 62       	ori	r19, 0x2C	; 44
      ec:	2d 64       	ori	r18, 0x4D	; 77
      ee:	3c 62       	ori	r19, 0x2C	; 44
      f0:	2d 64       	ori	r18, 0x4D	; 77
      f2:	20 4d       	sbci	r18, 0xD0	; 208
      f4:	4c 65       	ori	r20, 0x5C	; 92
      f6:	2d 3c       	cpi	r18, 0xCD	; 205
      f8:	67 65       	ori	r22, 0x57	; 87
      fa:	2d 3c       	cpi	r18, 0xCD	; 205
      fc:	67 20       	and	r6, r7
      fe:	4d 53       	subi	r20, 0x3D	; 61
     100:	63 3c       	cpi	r22, 0xC3	; 195
     102:	61 63       	ori	r22, 0x31	; 49
     104:	3c 61       	ori	r19, 0x1C	; 28
     106:	20 4d       	sbci	r18, 0xD0	; 208
     108:	4c 20       	and	r4, r12
     10a:	64 3c       	cpi	r22, 0xC4	; 196
     10c:	66 64       	ori	r22, 0x46	; 70
     10e:	3c 66       	ori	r19, 0x6C	; 108
     110:	20 4f       	sbci	r18, 0xF0	; 240
     112:	35 20       	and	r3, r5
     114:	4d 53       	subi	r20, 0x3D	; 61
     116:	20 62       	ori	r18, 0x20	; 32
     118:	2d 67       	ori	r18, 0x7D	; 125
     11a:	62 2d       	mov	r22, r2
     11c:	67 4d       	sbci	r22, 0xD7	; 215
     11e:	4c 20       	and	r4, r12
     120:	3e 63       	ori	r19, 0x3E	; 62
     122:	23 65       	ori	r18, 0x53	; 83
     124:	3e 63       	ori	r19, 0x3E	; 62
     126:	23 65       	ori	r18, 0x53	; 83
     128:	20 4d       	sbci	r18, 0xD0	; 208
     12a:	53 20       	and	r5, r3
     12c:	61 66       	ori	r22, 0x61	; 97
     12e:	61 66       	ori	r22, 0x61	; 97
     130:	20 4d       	sbci	r18, 0xD0	; 208
     132:	4c 20       	and	r4, r12
     134:	67 63       	ori	r22, 0x37	; 55
     136:	23 67       	ori	r18, 0x73	; 115
     138:	63 23       	and	r22, r19
     13a:	20 4d       	sbci	r18, 0xD0	; 208
     13c:	53 20       	and	r5, r3
     13e:	66 64       	ori	r22, 0x46	; 70
     140:	66 64       	ori	r22, 0x46	; 70
     142:	20 4d       	sbci	r18, 0xD0	; 208
     144:	4c 20       	and	r4, r12
     146:	65 3c       	cpi	r22, 0xC5	; 197
     148:	62 2d       	mov	r22, r2
     14a:	65 3c       	cpi	r22, 0xC5	; 197
     14c:	62 2d       	mov	r22, r2
     14e:	4f 36       	cpi	r20, 0x6F	; 111
     150:	20 4c       	sbci	r18, 0xC0	; 192
     152:	31 36       	cpi	r19, 0x61	; 97
     154:	72 61       	ori	r23, 0x12	; 18
     156:	67 61       	ori	r22, 0x17	; 23
     158:	66 61       	ori	r22, 0x16	; 22
     15a:	65 61       	ori	r22, 0x15	; 21
     15c:	20 64       	ori	r18, 0x40	; 64
     15e:	61 63       	ori	r22, 0x31	; 49
     160:	23 61       	ori	r18, 0x13	; 19
     162:	64 61       	ori	r22, 0x14	; 20
     164:	65 61       	ori	r22, 0x15	; 21
     166:	20 66       	ori	r18, 0x60	; 96
     168:	61 3c       	cpi	r22, 0xC1	; 193
     16a:	61 61       	ori	r22, 0x11	; 17
     16c:	3c 62       	ori	r19, 0x2C	; 44
     16e:	61 63       	ori	r22, 0x31	; 49
     170:	23 61       	ori	r18, 0x13	; 19
     172:	20 64       	ori	r18, 0x40	; 64
     174:	61 63       	ori	r22, 0x31	; 49
     176:	23 61       	ori	r18, 0x13	; 19
     178:	64 61       	ori	r22, 0x14	; 20
     17a:	65 61       	ori	r22, 0x15	; 21
     17c:	20 66       	ori	r18, 0x60	; 96
     17e:	61 65       	ori	r22, 0x51	; 81
     180:	61 64       	ori	r22, 0x41	; 65
     182:	61 63       	ori	r22, 0x31	; 49
     184:	61 3c       	cpi	r22, 0xC1	; 193
     186:	62 2d       	mov	r22, r2
     188:	61 63       	ori	r22, 0x31	; 49
     18a:	61 64       	ori	r22, 0x41	; 65
     18c:	67 3c       	cpi	r22, 0xC7	; 199
     18e:	62 2d       	mov	r22, r2
     190:	67 20       	and	r6, r7
     192:	65 67       	ori	r22, 0x75	; 117
     194:	64 67       	ori	r22, 0x74	; 116
     196:	63 67       	ori	r22, 0x73	; 115
     198:	3c 62       	ori	r19, 0x2C	; 44
     19a:	2d 67       	ori	r18, 0x7D	; 125
     19c:	20 3c       	cpi	r18, 0xC0	; 192
     19e:	61 67       	ori	r22, 0x71	; 113
     1a0:	3c 62       	ori	r19, 0x2C	; 44
     1a2:	2d 67       	ori	r18, 0x7D	; 125
     1a4:	63 66       	ori	r22, 0x63	; 99
     1a6:	3c 61       	ori	r19, 0x1C	; 28
     1a8:	66 20       	and	r6, r6
     1aa:	64 66       	ori	r22, 0x64	; 100
     1ac:	63 66       	ori	r22, 0x63	; 99
     1ae:	3c 62       	ori	r19, 0x2C	; 44
     1b0:	2d 66       	ori	r18, 0x6D	; 109
     1b2:	3c 61       	ori	r19, 0x1C	; 28
     1b4:	66 3c       	cpi	r22, 0xC6	; 198
     1b6:	67 66       	ori	r22, 0x67	; 103
     1b8:	3c 61       	ori	r19, 0x1C	; 28
     1ba:	66 3c       	cpi	r22, 0xC6	; 198
     1bc:	62 2d       	mov	r22, r2
     1be:	65 3c       	cpi	r22, 0xC5	; 197
     1c0:	67 65       	ori	r22, 0x57	; 87
     1c2:	20 63       	ori	r18, 0x30	; 48
     1c4:	23 65       	ori	r18, 0x53	; 83
     1c6:	3c 62       	ori	r19, 0x2C	; 44
     1c8:	2d 65       	ori	r18, 0x5D	; 93
     1ca:	3c 61       	ori	r19, 0x1C	; 28
     1cc:	65 3c       	cpi	r22, 0xC5	; 197
     1ce:	67 65       	ori	r22, 0x57	; 87
     1d0:	20 3c       	cpi	r18, 0xC0	; 192
     1d2:	66 65       	ori	r22, 0x56	; 86
     1d4:	3c 67       	ori	r19, 0x7C	; 124
     1d6:	65 3c       	cpi	r22, 0xC5	; 197
     1d8:	61 64       	ori	r22, 0x41	; 65
     1da:	3c 66       	ori	r19, 0x6C	; 108
     1dc:	64 4f       	sbci	r22, 0xF4	; 244
     1de:	35 20       	and	r3, r5
     1e0:	65 3e       	cpi	r22, 0xE5	; 229
     1e2:	65 65       	ori	r22, 0x55	; 85
     1e4:	3e 65       	ori	r19, 0x5E	; 94
     1e6:	66 3e       	cpi	r22, 0xE6	; 230
     1e8:	64 66       	ori	r22, 0x64	; 100
     1ea:	3e 64       	ori	r19, 0x4E	; 78
     1ec:	20 62       	ori	r18, 0x20	; 32
     1ee:	2d 3e       	cpi	r18, 0xED	; 237
     1f0:	63 23       	and	r22, r19
     1f2:	62 2d       	mov	r22, r2
     1f4:	3e 63       	ori	r19, 0x3E	; 62
     1f6:	23 61       	ori	r18, 0x13	; 19
     1f8:	3e 64       	ori	r19, 0x4E	; 78
     1fa:	66 3e       	cpi	r22, 0xE6	; 230
     1fc:	64 20       	and	r6, r4
     1fe:	65 3e       	cpi	r22, 0xE5	; 229
     200:	65 65       	ori	r22, 0x55	; 85
     202:	3e 65       	ori	r19, 0x5E	; 94
     204:	66 3e       	cpi	r22, 0xE6	; 230
     206:	64 66       	ori	r22, 0x64	; 100
     208:	3e 64       	ori	r19, 0x4E	; 78
     20a:	65 3e       	cpi	r22, 0xE5	; 229
     20c:	64 3e       	cpi	r22, 0xE4	; 228
     20e:	63 23       	and	r22, r19
     210:	3e 64       	ori	r19, 0x4E	; 78
     212:	62 3e       	cpi	r22, 0xE2	; 226
     214:	64 3e       	cpi	r22, 0xE4	; 228
     216:	63 23       	and	r22, r19
     218:	62 20       	and	r6, r2
     21a:	3e 63       	ori	r19, 0x3E	; 62
     21c:	23 61       	ori	r18, 0x13	; 19
     21e:	67 61       	ori	r22, 0x17	; 23
     220:	65 67       	ori	r22, 0x75	; 117
     222:	66 65       	ori	r22, 0x56	; 86
     224:	20 66       	ori	r18, 0x60	; 96
     226:	20 4f       	sbci	r18, 0xF0	; 240
     228:	36 20       	and	r3, r6
     22a:	64 63       	ori	r22, 0x34	; 52
     22c:	23 64       	ori	r18, 0x43	; 67
     22e:	66 64       	ori	r22, 0x46	; 70
     230:	63 23       	and	r22, r19
     232:	3c 62       	ori	r19, 0x2C	; 44
     234:	20 63       	ori	r18, 0x30	; 48
     236:	23 34       	cpi	r18, 0x43	; 67
	...

00000239 <welcomed>:
     239:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

00000243 <welcome>:
     243:	3e 67 33 32 3e 3e 63 33 32 00 00                    >g32>>c32..

0000024e <__ctors_end>:
     24e:	fb 15       	cp	r31, r11

00000250 <__dtors_end>:
     250:	11 24       	eor	r1, r1
     252:	1f be       	out	0x3f, r1	; 63
     254:	cf ef       	ldi	r28, 0xFF	; 255
     256:	d8 e0       	ldi	r29, 0x08	; 8
     258:	de bf       	out	0x3e, r29	; 62
     25a:	cd bf       	out	0x3d, r28	; 61

0000025c <__do_copy_data>:
     25c:	11 e0       	ldi	r17, 0x01	; 1
     25e:	a0 e0       	ldi	r26, 0x00	; 0
     260:	b1 e0       	ldi	r27, 0x01	; 1
     262:	e2 e3       	ldi	r30, 0x32	; 50
     264:	fa e3       	ldi	r31, 0x3A	; 58
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x10>
     268:	05 90       	lpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a4 39       	cpi	r26, 0x94	; 148
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0xc>

00000272 <__do_clear_bss>:
     272:	22 e0       	ldi	r18, 0x02	; 2
     274:	a4 e9       	ldi	r26, 0x94	; 148
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	ab 31       	cpi	r26, 0x1B	; 27
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 34 04 	call	0x868	; 0x868 <main>
     286:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__do_global_dtors>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <filllocationarrays>:


#define START 010
#define STOP 101

void filllocationarrays(Communications *self){
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	e4 97       	sbiw	r28, 0x34	; 52
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
	char arrx[26];
	char arry[26];
	char set;
	int placement=0;
	if (self->Recieved[1]==1){
     2a2:	fc 01       	movw	r30, r24
     2a4:	24 8d       	ldd	r18, Z+28	; 0x1c
     2a6:	21 30       	cpi	r18, 0x01	; 1
     2a8:	29 f4       	brne	.+10     	; 0x2b4 <filllocationarrays+0x26>
		arrx[placement]=0;
     2aa:	19 82       	std	Y+1, r1	; 0x01
		arry[placement]=0;
     2ac:	1b 8e       	std	Y+27, r1	; 0x1b
		placement++;
     2ae:	41 e0       	ldi	r20, 0x01	; 1
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <filllocationarrays+0x2a>

void filllocationarrays(Communications *self){
	char arrx[26];
	char arry[26];
	char set;
	int placement=0;
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	38 c0       	rjmp	.+112    	; 0x32e <filllocationarrays+0xa0>
		arrx[placement]=0;
		arry[placement]=0;
		placement++;
	}
	for (int i=0;i<8;i++){
		set = ((self->Recieved[2] >> i)  & 0x01);
     2be:	fc 01       	movw	r30, r24
     2c0:	25 8d       	ldd	r18, Z+29	; 0x1d
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	06 2e       	mov	r0, r22
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <filllocationarrays+0x3e>
     2c8:	35 95       	asr	r19
     2ca:	27 95       	ror	r18
     2cc:	0a 94       	dec	r0
     2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <filllocationarrays+0x3a>
     2d0:	21 70       	andi	r18, 0x01	; 1
		if (i<5){
     2d2:	65 30       	cpi	r22, 0x05	; 5
     2d4:	71 05       	cpc	r23, r1
     2d6:	a4 f4       	brge	.+40     	; 0x300 <filllocationarrays+0x72>
			if (set == 1){
     2d8:	21 30       	cpi	r18, 0x01	; 1
     2da:	39 f5       	brne	.+78     	; 0x32a <filllocationarrays+0x9c>
			arrx[placement]=i+1;
     2dc:	e1 e0       	ldi	r30, 0x01	; 1
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	ec 0f       	add	r30, r28
     2e2:	fd 1f       	adc	r31, r29
     2e4:	e4 0f       	add	r30, r20
     2e6:	f5 1f       	adc	r31, r21
     2e8:	26 0f       	add	r18, r22
     2ea:	20 83       	st	Z, r18
			arry[placement]=0;
     2ec:	eb e1       	ldi	r30, 0x1B	; 27
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ec 0f       	add	r30, r28
     2f2:	fd 1f       	adc	r31, r29
     2f4:	e4 0f       	add	r30, r20
     2f6:	f5 1f       	adc	r31, r21
     2f8:	10 82       	st	Z, r1
			placement++;}
     2fa:	4f 5f       	subi	r20, 0xFF	; 255
     2fc:	5f 4f       	sbci	r21, 0xFF	; 255
     2fe:	15 c0       	rjmp	.+42     	; 0x32a <filllocationarrays+0x9c>
		}else{
			if (set == 1){
     300:	21 30       	cpi	r18, 0x01	; 1
     302:	99 f4       	brne	.+38     	; 0x32a <filllocationarrays+0x9c>
			arrx[placement]=i-5;
     304:	e1 e0       	ldi	r30, 0x01	; 1
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	e4 0f       	add	r30, r20
     30e:	f5 1f       	adc	r31, r21
     310:	2b ef       	ldi	r18, 0xFB	; 251
     312:	26 0f       	add	r18, r22
     314:	20 83       	st	Z, r18
			arry[placement]=1;
     316:	eb e1       	ldi	r30, 0x1B	; 27
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 0f       	add	r30, r28
     31c:	fd 1f       	adc	r31, r29
     31e:	e4 0f       	add	r30, r20
     320:	f5 1f       	adc	r31, r21
     322:	21 e0       	ldi	r18, 0x01	; 1
     324:	20 83       	st	Z, r18
			placement++;}
     326:	4f 5f       	subi	r20, 0xFF	; 255
     328:	5f 4f       	sbci	r21, 0xFF	; 255
	if (self->Recieved[1]==1){
		arrx[placement]=0;
		arry[placement]=0;
		placement++;
	}
	for (int i=0;i<8;i++){
     32a:	6f 5f       	subi	r22, 0xFF	; 255
     32c:	7f 4f       	sbci	r23, 0xFF	; 255
     32e:	68 30       	cpi	r22, 0x08	; 8
     330:	71 05       	cpc	r23, r1
     332:	2c f2       	brlt	.-118    	; 0x2be <filllocationarrays+0x30>
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	54 c0       	rjmp	.+168    	; 0x3e2 <filllocationarrays+0x154>
			arry[placement]=1;
			placement++;}
		}
	}
		for (int i=0;i<8;i++){
			set = ((self->Recieved[3] >> i)  & 0x01);
     33a:	fc 01       	movw	r30, r24
     33c:	26 8d       	ldd	r18, Z+30	; 0x1e
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	06 2e       	mov	r0, r22
     342:	02 c0       	rjmp	.+4      	; 0x348 <filllocationarrays+0xba>
     344:	35 95       	asr	r19
     346:	27 95       	ror	r18
     348:	0a 94       	dec	r0
     34a:	e2 f7       	brpl	.-8      	; 0x344 <filllocationarrays+0xb6>
     34c:	21 70       	andi	r18, 0x01	; 1
			if (i==0){
     34e:	61 15       	cp	r22, r1
     350:	71 05       	cpc	r23, r1
     352:	b9 f4       	brne	.+46     	; 0x382 <filllocationarrays+0xf4>
				if (set == 1){
     354:	21 30       	cpi	r18, 0x01	; 1
     356:	09 f0       	breq	.+2      	; 0x35a <filllocationarrays+0xcc>
     358:	42 c0       	rjmp	.+132    	; 0x3de <filllocationarrays+0x150>
				arrx[placement]=i+4;
     35a:	e1 e0       	ldi	r30, 0x01	; 1
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	ec 0f       	add	r30, r28
     360:	fd 1f       	adc	r31, r29
     362:	e4 0f       	add	r30, r20
     364:	f5 1f       	adc	r31, r21
     366:	24 e0       	ldi	r18, 0x04	; 4
     368:	26 0f       	add	r18, r22
     36a:	20 83       	st	Z, r18
				arry[placement]=1;
     36c:	eb e1       	ldi	r30, 0x1B	; 27
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	ec 0f       	add	r30, r28
     372:	fd 1f       	adc	r31, r29
     374:	e4 0f       	add	r30, r20
     376:	f5 1f       	adc	r31, r21
     378:	21 e0       	ldi	r18, 0x01	; 1
     37a:	20 83       	st	Z, r18
				placement++;}
     37c:	4f 5f       	subi	r20, 0xFF	; 255
     37e:	5f 4f       	sbci	r21, 0xFF	; 255
     380:	2e c0       	rjmp	.+92     	; 0x3de <filllocationarrays+0x150>
			}else if(i<6){
     382:	66 30       	cpi	r22, 0x06	; 6
     384:	71 05       	cpc	r23, r1
     386:	b4 f4       	brge	.+44     	; 0x3b4 <filllocationarrays+0x126>
				if (set == 1){
     388:	21 30       	cpi	r18, 0x01	; 1
     38a:	49 f5       	brne	.+82     	; 0x3de <filllocationarrays+0x150>
				arrx[placement]=i-1;
     38c:	e1 e0       	ldi	r30, 0x01	; 1
     38e:	f0 e0       	ldi	r31, 0x00	; 0
     390:	ec 0f       	add	r30, r28
     392:	fd 1f       	adc	r31, r29
     394:	e4 0f       	add	r30, r20
     396:	f5 1f       	adc	r31, r21
     398:	2f ef       	ldi	r18, 0xFF	; 255
     39a:	26 0f       	add	r18, r22
     39c:	20 83       	st	Z, r18
				arry[placement]=2;
     39e:	eb e1       	ldi	r30, 0x1B	; 27
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	ec 0f       	add	r30, r28
     3a4:	fd 1f       	adc	r31, r29
     3a6:	e4 0f       	add	r30, r20
     3a8:	f5 1f       	adc	r31, r21
     3aa:	22 e0       	ldi	r18, 0x02	; 2
     3ac:	20 83       	st	Z, r18
				placement++;}
     3ae:	4f 5f       	subi	r20, 0xFF	; 255
     3b0:	5f 4f       	sbci	r21, 0xFF	; 255
     3b2:	15 c0       	rjmp	.+42     	; 0x3de <filllocationarrays+0x150>
			}else{
				if (set == 1){
     3b4:	21 30       	cpi	r18, 0x01	; 1
     3b6:	99 f4       	brne	.+38     	; 0x3de <filllocationarrays+0x150>
				arrx[placement]=i-6;
     3b8:	e1 e0       	ldi	r30, 0x01	; 1
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	ec 0f       	add	r30, r28
     3be:	fd 1f       	adc	r31, r29
     3c0:	e4 0f       	add	r30, r20
     3c2:	f5 1f       	adc	r31, r21
     3c4:	2a ef       	ldi	r18, 0xFA	; 250
     3c6:	26 0f       	add	r18, r22
     3c8:	20 83       	st	Z, r18
				arry[placement]=3;
     3ca:	eb e1       	ldi	r30, 0x1B	; 27
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	ec 0f       	add	r30, r28
     3d0:	fd 1f       	adc	r31, r29
     3d2:	e4 0f       	add	r30, r20
     3d4:	f5 1f       	adc	r31, r21
     3d6:	23 e0       	ldi	r18, 0x03	; 3
     3d8:	20 83       	st	Z, r18
				placement++;}
     3da:	4f 5f       	subi	r20, 0xFF	; 255
     3dc:	5f 4f       	sbci	r21, 0xFF	; 255
			arrx[placement]=i-5;
			arry[placement]=1;
			placement++;}
		}
	}
		for (int i=0;i<8;i++){
     3de:	6f 5f       	subi	r22, 0xFF	; 255
     3e0:	7f 4f       	sbci	r23, 0xFF	; 255
     3e2:	68 30       	cpi	r22, 0x08	; 8
     3e4:	71 05       	cpc	r23, r1
     3e6:	0c f4       	brge	.+2      	; 0x3ea <filllocationarrays+0x15c>
     3e8:	a8 cf       	rjmp	.-176    	; 0x33a <filllocationarrays+0xac>
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	3a c0       	rjmp	.+116    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				arry[placement]=3;
				placement++;}
			}
		}
		for (int i=0;i<8;i++){
			set = ((self->Recieved[4] >> i)  & 0x01);
     3f0:	fc 01       	movw	r30, r24
     3f2:	27 8d       	ldd	r18, Z+31	; 0x1f
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	06 2e       	mov	r0, r22
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <filllocationarrays+0x170>
     3fa:	35 95       	asr	r19
     3fc:	27 95       	ror	r18
     3fe:	0a 94       	dec	r0
     400:	e2 f7       	brpl	.-8      	; 0x3fa <filllocationarrays+0x16c>
     402:	21 70       	andi	r18, 0x01	; 1
			if (i<3){
     404:	63 30       	cpi	r22, 0x03	; 3
     406:	71 05       	cpc	r23, r1
     408:	b4 f4       	brge	.+44     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
				if (set == 1){
     40a:	21 30       	cpi	r18, 0x01	; 1
     40c:	49 f5       	brne	.+82     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
				arrx[placement]=i+2;
     40e:	e1 e0       	ldi	r30, 0x01	; 1
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ec 0f       	add	r30, r28
     414:	fd 1f       	adc	r31, r29
     416:	e4 0f       	add	r30, r20
     418:	f5 1f       	adc	r31, r21
     41a:	22 e0       	ldi	r18, 0x02	; 2
     41c:	26 0f       	add	r18, r22
     41e:	20 83       	st	Z, r18
				arry[placement]=3;
     420:	eb e1       	ldi	r30, 0x1B	; 27
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	ec 0f       	add	r30, r28
     426:	fd 1f       	adc	r31, r29
     428:	e4 0f       	add	r30, r20
     42a:	f5 1f       	adc	r31, r21
     42c:	23 e0       	ldi	r18, 0x03	; 3
     42e:	20 83       	st	Z, r18
				placement++;}
     430:	4f 5f       	subi	r20, 0xFF	; 255
     432:	5f 4f       	sbci	r21, 0xFF	; 255
     434:	15 c0       	rjmp	.+42     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
			}else{
				if (set == 1){
     436:	21 30       	cpi	r18, 0x01	; 1
     438:	99 f4       	brne	.+38     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
				arrx[placement]=i-3;
     43a:	e1 e0       	ldi	r30, 0x01	; 1
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	ec 0f       	add	r30, r28
     440:	fd 1f       	adc	r31, r29
     442:	e4 0f       	add	r30, r20
     444:	f5 1f       	adc	r31, r21
     446:	2d ef       	ldi	r18, 0xFD	; 253
     448:	26 0f       	add	r18, r22
     44a:	20 83       	st	Z, r18
				arry[placement]=4;
     44c:	eb e1       	ldi	r30, 0x1B	; 27
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	ec 0f       	add	r30, r28
     452:	fd 1f       	adc	r31, r29
     454:	e4 0f       	add	r30, r20
     456:	f5 1f       	adc	r31, r21
     458:	24 e0       	ldi	r18, 0x04	; 4
     45a:	20 83       	st	Z, r18
				placement++;}
     45c:	4f 5f       	subi	r20, 0xFF	; 255
     45e:	5f 4f       	sbci	r21, 0xFF	; 255
				arrx[placement]=i-6;
				arry[placement]=3;
				placement++;}
			}
		}
		for (int i=0;i<8;i++){
     460:	6f 5f       	subi	r22, 0xFF	; 255
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	68 30       	cpi	r22, 0x08	; 8
     466:	71 05       	cpc	r23, r1
     468:	1c f2       	brlt	.-122    	; 0x3f0 <filllocationarrays+0x162>
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	19 c0       	rjmp	.+50     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
				arry[placement]=4;
				placement++;}
			}
		}
	for (int i=0;i<=placement;i++){
		self->Orderarx[i]=arrx[i];
     470:	e1 e0       	ldi	r30, 0x01	; 1
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	ec 0f       	add	r30, r28
     476:	fd 1f       	adc	r31, r29
     478:	e2 0f       	add	r30, r18
     47a:	f3 1f       	adc	r31, r19
     47c:	60 81       	ld	r22, Z
     47e:	dc 01       	movw	r26, r24
     480:	a2 0f       	add	r26, r18
     482:	b3 1f       	adc	r27, r19
     484:	fd 01       	movw	r30, r26
     486:	ee 5a       	subi	r30, 0xAE	; 174
     488:	ff 4f       	sbci	r31, 0xFF	; 255
     48a:	60 83       	st	Z, r22
		self->Orderary[i]=arry[i];
     48c:	eb e1       	ldi	r30, 0x1B	; 27
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	ec 0f       	add	r30, r28
     492:	fd 1f       	adc	r31, r29
     494:	e2 0f       	add	r30, r18
     496:	f3 1f       	adc	r31, r19
     498:	60 81       	ld	r22, Z
     49a:	d9 96       	adiw	r26, 0x39	; 57
     49c:	6c 93       	st	X, r22
				arrx[placement]=i-3;
				arry[placement]=4;
				placement++;}
			}
		}
	for (int i=0;i<=placement;i++){
     49e:	2f 5f       	subi	r18, 0xFF	; 255
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	42 17       	cp	r20, r18
     4a4:	53 07       	cpc	r21, r19
     4a6:	24 f7       	brge	.-56     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
		self->Orderarx[i]=arrx[i];
		self->Orderary[i]=arry[i];
	}
}
     4a8:	e4 96       	adiw	r28, 0x34	; 52
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <sendACK>:
			


void sendACK(Communications *self ){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <sendACK+0x6>
     4c0:	1f 92       	push	r1
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
						char tmp[3];
						tmp[0]=START;
     4c6:	28 e0       	ldi	r18, 0x08	; 8
     4c8:	29 83       	std	Y+1, r18	; 0x01
						tmp[1]=255;
     4ca:	2f ef       	ldi	r18, 0xFF	; 255
     4cc:	2a 83       	std	Y+2, r18	; 0x02
						tmp[2]=STOP;
     4ce:	25 e6       	ldi	r18, 0x65	; 101
     4d0:	2b 83       	std	Y+3, r18	; 0x03
						serial_send_blocking(tmp,self->val);
     4d2:	fc 01       	movw	r30, r24
     4d4:	60 81       	ld	r22, Z
     4d6:	ce 01       	movw	r24, r28
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	0e 94 08 15 	call	0x2a10	; 0x2a10 <serial_send_blocking>
}
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <Update>:

void Update(Communications *self){
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24
	char Flag =0;
			if (serial_receive_buffer_full()==1){
     4f2:	0e 94 b5 13 	call	0x276a	; 0x276a <serial_receive_buffer_full>
     4f6:	81 30       	cpi	r24, 0x01	; 1
     4f8:	09 f0       	breq	.+2      	; 0x4fc <Update+0x12>
     4fa:	62 c0       	rjmp	.+196    	; 0x5c0 <Update+0xd6>
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
     4fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4fe:	88 30       	cpi	r24, 0x08	; 8
     500:	09 f0       	breq	.+2      	; 0x504 <Update+0x1a>
     502:	60 c0       	rjmp	.+192    	; 0x5c4 <Update+0xda>
     504:	e8 81       	ld	r30, Y
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	31 97       	sbiw	r30, 0x01	; 1
     50a:	ec 0f       	add	r30, r28
     50c:	fd 1f       	adc	r31, r29
     50e:	83 8d       	ldd	r24, Z+27	; 0x1b
     510:	85 36       	cpi	r24, 0x65	; 101
     512:	09 f0       	breq	.+2      	; 0x516 <Update+0x2c>
     514:	59 c0       	rjmp	.+178    	; 0x5c8 <Update+0xde>
				Flag = 1;
				//play_from_program_space(fugue);
				
				sendACK(self); // stops here to send acknowledge
     516:	ce 01       	movw	r24, r28
     518:	0e 94 5d 02 	call	0x4ba	; 0x4ba <sendACK>
				if (self->Recieved[5]==254 || self->EmergencyStop==1){	//enter emergency stop
     51c:	88 a1       	ldd	r24, Y+32	; 0x20
     51e:	8e 3f       	cpi	r24, 0xFE	; 254
     520:	31 f0       	breq	.+12     	; 0x52e <Update+0x44>
     522:	fe 01       	movw	r30, r28
     524:	e5 59       	subi	r30, 0x95	; 149
     526:	ff 4f       	sbci	r31, 0xFF	; 255
     528:	80 81       	ld	r24, Z
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	49 f4       	brne	.+18     	; 0x540 <Update+0x56>
									play_from_program_space(fugue);
     52e:	8a e7       	ldi	r24, 0x7A	; 122
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 26 11 	call	0x224c	; 0x224c <play_from_program_space>
					self->EmergencyStop=1;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	fe 01       	movw	r30, r28
     53a:	e5 59       	subi	r30, 0x95	; 149
     53c:	ff 4f       	sbci	r31, 0xFF	; 255
     53e:	80 83       	st	Z, r24
				}
				
				if (self->Recieved[8]==250 && self->EmergencyStop==1){	// Leave emergency stop
     540:	8b a1       	ldd	r24, Y+35	; 0x23
     542:	8a 3f       	cpi	r24, 0xFA	; 250
     544:	39 f4       	brne	.+14     	; 0x554 <Update+0x6a>
     546:	fe 01       	movw	r30, r28
     548:	e5 59       	subi	r30, 0x95	; 149
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	90 81       	ld	r25, Z
     54e:	91 30       	cpi	r25, 0x01	; 1
     550:	09 f4       	brne	.+2      	; 0x554 <Update+0x6a>
					self->EmergencyStop=0;
     552:	10 82       	st	Z, r1
				}
				
				if (self->Recieved[8]==245){							// Enter Spin Mode
     554:	85 3f       	cpi	r24, 0xF5	; 245
     556:	29 f4       	brne	.+10     	; 0x562 <Update+0x78>
					self->EmergencyStop=3;
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	fe 01       	movw	r30, r28
     55c:	e5 59       	subi	r30, 0x95	; 149
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	90 83       	st	Z, r25
				}
				if (self->Recieved[8]==240){							// Enter Manual Mode
     562:	80 3f       	cpi	r24, 0xF0	; 240
     564:	a9 f4       	brne	.+42     	; 0x590 <Update+0xa6>
					self->EmergencyStop=4;
     566:	84 e0       	ldi	r24, 0x04	; 4
     568:	fe 01       	movw	r30, r28
     56a:	e5 59       	subi	r30, 0x95	; 149
     56c:	ff 4f       	sbci	r31, 0xFF	; 255
     56e:	80 83       	st	Z, r24
					for (int i = 0; i < 4; i++){
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0a c0       	rjmp	.+20     	; 0x58a <Update+0xa0>
						self->Direction[i]=self->Recieved[i+9];
     576:	fc 01       	movw	r30, r24
     578:	39 96       	adiw	r30, 0x09	; 9
     57a:	ec 0f       	add	r30, r28
     57c:	fd 1f       	adc	r31, r29
     57e:	23 8d       	ldd	r18, Z+27	; 0x1b
     580:	fe 01       	movw	r30, r28
     582:	e8 0f       	add	r30, r24
     584:	f9 1f       	adc	r31, r25
     586:	25 ab       	std	Z+53, r18	; 0x35
				if (self->Recieved[8]==245){							// Enter Spin Mode
					self->EmergencyStop=3;
				}
				if (self->Recieved[8]==240){							// Enter Manual Mode
					self->EmergencyStop=4;
					for (int i = 0; i < 4; i++){
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	91 05       	cpc	r25, r1
     58e:	9c f3       	brlt	.-26     	; 0x576 <Update+0x8c>
						self->Direction[i]=self->Recieved[i+9];
					}
				}
				
				if (self->locationx==255 && self->locationy==255){
     590:	fe 01       	movw	r30, r28
     592:	e2 59       	subi	r30, 0x92	; 146
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	8f 3f       	cpi	r24, 0xFF	; 255
     59a:	c1 f4       	brne	.+48     	; 0x5cc <Update+0xe2>
     59c:	31 96       	adiw	r30, 0x01	; 1
     59e:	80 81       	ld	r24, Z
     5a0:	8f 3f       	cpi	r24, 0xFF	; 255
     5a2:	b1 f4       	brne	.+44     	; 0x5d0 <Update+0xe6>
					filllocationarrays(self);
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 47 01 	call	0x28e	; 0x28e <filllocationarrays>
					self->flag = 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	fe 01       	movw	r30, r28
     5ae:	e0 59       	subi	r30, 0x90	; 144
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	80 83       	st	Z, r24
					play_from_program_space(welcomed);
     5b4:	89 e3       	ldi	r24, 0x39	; 57
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	0e 94 26 11 	call	0x224c	; 0x224c <play_from_program_space>

void Update(Communications *self){
	char Flag =0;
			if (serial_receive_buffer_full()==1){
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
				Flag = 1;
     5bc:	11 e0       	ldi	r17, 0x01	; 1
     5be:	09 c0       	rjmp	.+18     	; 0x5d2 <Update+0xe8>
						tmp[2]=STOP;
						serial_send_blocking(tmp,self->val);
}

void Update(Communications *self){
	char Flag =0;
     5c0:	10 e0       	ldi	r17, 0x00	; 0
     5c2:	07 c0       	rjmp	.+14     	; 0x5d2 <Update+0xe8>
     5c4:	10 e0       	ldi	r17, 0x00	; 0
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <Update+0xe8>
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <Update+0xe8>
			if (serial_receive_buffer_full()==1){
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
				Flag = 1;
     5cc:	11 e0       	ldi	r17, 0x01	; 1
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <Update+0xe8>
     5d0:	11 e0       	ldi	r17, 0x01	; 1
					play_from_program_space(welcomed);
				}
				}
			}
			
				for (char i=0;i<self->val;i++){
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <Update+0xf6>
					self->msgBuffer[i]=i;
     5d6:	fe 01       	movw	r30, r28
     5d8:	e8 0f       	add	r30, r24
     5da:	f1 1d       	adc	r31, r1
     5dc:	81 83       	std	Z+1, r24	; 0x01
					play_from_program_space(welcomed);
				}
				}
			}
			
				for (char i=0;i<self->val;i++){
     5de:	8f 5f       	subi	r24, 0xFF	; 255
     5e0:	68 81       	ld	r22, Y
     5e2:	86 17       	cp	r24, r22
     5e4:	c0 f3       	brcs	.-16     	; 0x5d6 <Update+0xec>
					self->msgBuffer[i]=i;
				}
				self->msgBuffer[0]=START;
     5e6:	88 e0       	ldi	r24, 0x08	; 8
     5e8:	89 83       	std	Y+1, r24	; 0x01
				self->msgBuffer[1]=self->batterylvl;
     5ea:	fe 01       	movw	r30, r28
     5ec:	e4 59       	subi	r30, 0x94	; 148
     5ee:	ff 4f       	sbci	r31, 0xFF	; 255
     5f0:	80 81       	ld	r24, Z
     5f2:	8a 83       	std	Y+2, r24	; 0x02
				self->msgBuffer[2]=self->magprocess;
     5f4:	31 96       	adiw	r30, 0x01	; 1
     5f6:	80 81       	ld	r24, Z
     5f8:	8b 83       	std	Y+3, r24	; 0x03
				self->msgBuffer[3]=self->locationx;
     5fa:	31 96       	adiw	r30, 0x01	; 1
     5fc:	80 81       	ld	r24, Z
     5fe:	8c 83       	std	Y+4, r24	; 0x04
				self->msgBuffer[4]=self->locationy;
     600:	31 96       	adiw	r30, 0x01	; 1
     602:	80 81       	ld	r24, Z
     604:	8d 83       	std	Y+5, r24	; 0x05
				self->msgBuffer[5]=self->EmergencyStop;
     606:	34 97       	sbiw	r30, 0x04	; 4
     608:	80 81       	ld	r24, Z
     60a:	8e 83       	std	Y+6, r24	; 0x06
				self->msgBuffer[self->val-1]=STOP;
     60c:	e6 2f       	mov	r30, r22
     60e:	f0 e0       	ldi	r31, 0x00	; 0
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	ec 0f       	add	r30, r28
     614:	fd 1f       	adc	r31, r29
     616:	85 e6       	ldi	r24, 0x65	; 101
     618:	81 83       	std	Z+1, r24	; 0x01
				serial_send(self->msgBuffer, self->val);
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	0e 94 c3 14 	call	0x2986	; 0x2986 <serial_send>

				//delay_ms(10000); // test
				if (Flag == 1){
     622:	11 30       	cpi	r17, 0x01	; 1
     624:	29 f4       	brne	.+10     	; 0x630 <Update+0x146>
					serial_receive(self->Recieved,self->val);
     626:	68 81       	ld	r22, Y
     628:	ce 01       	movw	r24, r28
     62a:	4b 96       	adiw	r24, 0x1b	; 27
     62c:	0e 94 3c 14 	call	0x2878	; 0x2878 <serial_receive>
				}		
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <fillarrays>:

void fillarrays(Communications *self){
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	60 97       	sbiw	r28, 0x10	; 16
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	ac 01       	movw	r20, r24
	//temp
		char arrx[]={2,5,4,2,1,6,1,5};
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	e8 e2       	ldi	r30, 0x28	; 40
     652:	f1 e0       	ldi	r31, 0x01	; 1
     654:	de 01       	movw	r26, r28
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	01 90       	ld	r0, Z+
     65a:	0d 92       	st	X+, r0
     65c:	8a 95       	dec	r24
     65e:	e1 f7       	brne	.-8      	; 0x658 <fillarrays+0x20>
		char arry[]={0,1,3,5,2,4,1,2};
     660:	88 e0       	ldi	r24, 0x08	; 8
     662:	e0 e3       	ldi	r30, 0x30	; 48
     664:	f1 e0       	ldi	r31, 0x01	; 1
     666:	de 01       	movw	r26, r28
     668:	19 96       	adiw	r26, 0x09	; 9
     66a:	01 90       	ld	r0, Z+
     66c:	0d 92       	st	X+, r0
     66e:	8a 95       	dec	r24
     670:	e1 f7       	brne	.-8      	; 0x66a <fillarrays+0x32>
		for (int i=0;i<8;i++){
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	19 c0       	rjmp	.+50     	; 0x6aa <fillarrays+0x72>
			self->Orderarx[i]=arrx[i];
     678:	e1 e0       	ldi	r30, 0x01	; 1
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	ec 0f       	add	r30, r28
     67e:	fd 1f       	adc	r31, r29
     680:	e2 0f       	add	r30, r18
     682:	f3 1f       	adc	r31, r19
     684:	90 81       	ld	r25, Z
     686:	da 01       	movw	r26, r20
     688:	a2 0f       	add	r26, r18
     68a:	b3 1f       	adc	r27, r19
     68c:	fd 01       	movw	r30, r26
     68e:	ee 5a       	subi	r30, 0xAE	; 174
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	90 83       	st	Z, r25
			self->Orderary[i]=arry[i];
     694:	e9 e0       	ldi	r30, 0x09	; 9
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ec 0f       	add	r30, r28
     69a:	fd 1f       	adc	r31, r29
     69c:	e2 0f       	add	r30, r18
     69e:	f3 1f       	adc	r31, r19
     6a0:	90 81       	ld	r25, Z
     6a2:	d9 96       	adiw	r26, 0x39	; 57
     6a4:	9c 93       	st	X, r25

void fillarrays(Communications *self){
	//temp
		char arrx[]={2,5,4,2,1,6,1,5};
		char arry[]={0,1,3,5,2,4,1,2};
		for (int i=0;i<8;i++){
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	28 30       	cpi	r18, 0x08	; 8
     6ac:	31 05       	cpc	r19, r1
     6ae:	24 f3       	brlt	.-56     	; 0x678 <fillarrays+0x40>
			self->Orderarx[i]=arrx[i];
			self->Orderary[i]=arry[i];
		}
}
     6b0:	60 96       	adiw	r28, 0x10	; 16
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	de bf       	out	0x3e, r29	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <Communications_INIT>:

void Communications_INIT(Communications * myCom){
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	ec 01       	movw	r28, r24
	myCom->val = Max_Bytes;	
     6c8:	8a e1       	ldi	r24, 0x1A	; 26
     6ca:	88 83       	st	Y, r24


	//Setup Communications
	serial_set_baud_rate(9600);
     6cc:	60 e8       	ldi	r22, 0x80	; 128
     6ce:	75 e2       	ldi	r23, 0x25	; 37
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 93 14 	call	0x2926	; 0x2926 <serial_set_baud_rate>
	serial_receive(myCom->Recieved,myCom->val);
     6d8:	68 81       	ld	r22, Y
     6da:	ce 01       	movw	r24, r28
     6dc:	4b 96       	adiw	r24, 0x1b	; 27
     6de:	0e 94 3c 14 	call	0x2878	; 0x2878 <serial_receive>

	//filling in functions
	myCom->Update		 = Update;
     6e2:	fe 01       	movw	r30, r28
     6e4:	ef 58       	subi	r30, 0x8F	; 143
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	85 e7       	ldi	r24, 0x75	; 117
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	80 83       	st	Z, r24
		
	//filling in default values
	myCom->EmergencyStop = 0;
     6f0:	36 97       	sbiw	r30, 0x06	; 6
     6f2:	10 82       	st	Z, r1
	myCom->batterylvl	 = 55;
     6f4:	31 96       	adiw	r30, 0x01	; 1
     6f6:	87 e3       	ldi	r24, 0x37	; 55
     6f8:	80 83       	st	Z, r24
	myCom->magprocess	 = 20;
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	84 e1       	ldi	r24, 0x14	; 20
     6fe:	80 83       	st	Z, r24
	myCom->locationx	 = 4;
     700:	31 96       	adiw	r30, 0x01	; 1
     702:	84 e0       	ldi	r24, 0x04	; 4
     704:	80 83       	st	Z, r24
	myCom->locationy	 = 5;
     706:	31 96       	adiw	r30, 0x01	; 1
     708:	85 e0       	ldi	r24, 0x05	; 5
     70a:	80 83       	st	Z, r24
	myCom->flag				 =0;	
     70c:	31 96       	adiw	r30, 0x01	; 1
     70e:	10 82       	st	Z, r1
	
	fillarrays(myCom);
     710:	ce 01       	movw	r24, r28
     712:	0e 94 1c 03 	call	0x638	; 0x638 <fillarrays>
}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <batteryPercentage>:
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     724:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <read_battery_millivolts_3pi>
     728:	bc 01       	movw	r22, r24
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 41 0c 	call	0x1882	; 0x1882 <__floatunsisf>
     732:	6b 01       	movw	r12, r22
     734:	7c 01       	movw	r14, r24
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3>
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	c7 01       	movw	r24, r14
     744:	b6 01       	movw	r22, r12
     746:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3>
     74a:	2c e0       	ldi	r18, 0x0C	; 12
     74c:	39 eb       	ldi	r19, 0xB9	; 185
     74e:	4d e2       	ldi	r20, 0x2D	; 45
     750:	50 e3       	ldi	r21, 0x30	; 48
     752:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3>
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	08 95       	ret

00000760 <updateDisplay>:
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	7c 01       	movw	r14, r24
     76c:	8b 01       	movw	r16, r22
     76e:	c4 2f       	mov	r28, r20
     770:	0e 94 32 12 	call	0x2464	; 0x2464 <clear>
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	0e 94 b9 12 	call	0x2572	; 0x2572 <lcd_goto_xy>
     77c:	85 e5       	ldi	r24, 0x55	; 85
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     784:	b7 01       	movw	r22, r14
     786:	ff 0c       	add	r15, r15
     788:	88 0b       	sbc	r24, r24
     78a:	99 0b       	sbc	r25, r25
     78c:	0e 94 96 12 	call	0x252c	; 0x252c <print_long>
     790:	8a e5       	ldi	r24, 0x5A	; 90
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 b9 12 	call	0x2572	; 0x2572 <lcd_goto_xy>
     7a0:	8c e5       	ldi	r24, 0x5C	; 92
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     7a8:	b8 01       	movw	r22, r16
     7aa:	11 0f       	add	r17, r17
     7ac:	88 0b       	sbc	r24, r24
     7ae:	99 0b       	sbc	r25, r25
     7b0:	0e 94 96 12 	call	0x252c	; 0x252c <print_long>
     7b4:	8a e5       	ldi	r24, 0x5A	; 90
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     7bc:	c2 30       	cpi	r28, 0x02	; 2
     7be:	a9 f0       	breq	.+42     	; 0x7ea <updateDisplay+0x8a>
     7c0:	28 f4       	brcc	.+10     	; 0x7cc <updateDisplay+0x6c>
     7c2:	cc 23       	and	r28, r28
     7c4:	41 f0       	breq	.+16     	; 0x7d6 <updateDisplay+0x76>
     7c6:	c1 30       	cpi	r28, 0x01	; 1
     7c8:	59 f0       	breq	.+22     	; 0x7e0 <updateDisplay+0x80>
     7ca:	1d c0       	rjmp	.+58     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7cc:	c3 30       	cpi	r28, 0x03	; 3
     7ce:	91 f0       	breq	.+36     	; 0x7f4 <updateDisplay+0x94>
     7d0:	c4 30       	cpi	r28, 0x04	; 4
     7d2:	a9 f0       	breq	.+42     	; 0x7fe <updateDisplay+0x9e>
     7d4:	18 c0       	rjmp	.+48     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7d6:	81 e6       	ldi	r24, 0x61	; 97
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     7de:	13 c0       	rjmp	.+38     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7e0:	83 e6       	ldi	r24, 0x63	; 99
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     7e8:	0e c0       	rjmp	.+28     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7ea:	85 e6       	ldi	r24, 0x65	; 101
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     7f2:	09 c0       	rjmp	.+18     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7f4:	87 e6       	ldi	r24, 0x67	; 103
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7fe:	89 e6       	ldi	r24, 0x69	; 105
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 41 12 	call	0x2482	; 0x2482 <print>
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	08 95       	ret

00000812 <whileBarcode>:
	whileBarcode();
	updateDisplay(0, batteryPercentage(), mazeSolver);
	parcours('B', communications);
	whileLineEnd();
	motorControl('L');
}
     812:	03 c0       	rjmp	.+6      	; 0x81a <whileBarcode+0x8>
     814:	83 e5       	ldi	r24, 0x53	; 83
     816:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
     81a:	0e 94 28 06 	call	0xc50	; 0xc50 <lineType>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	c9 f7       	brne	.-14     	; 0x814 <whileBarcode+0x2>
     822:	08 95       	ret

00000824 <whileLineEnd>:
     824:	03 c0       	rjmp	.+6      	; 0x82c <whileLineEnd+0x8>
     826:	83 e5       	ldi	r24, 0x53	; 83
     828:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
     82c:	0e 94 28 06 	call	0xc50	; 0xc50 <lineType>
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	c9 f7       	brne	.-14     	; 0x826 <whileLineEnd+0x2>
     834:	08 95       	ret

00000836 <pickOrder>:

void pickOrder(Communications *communications)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	ec 01       	movw	r28, r24
	whileBarcode();
     83c:	0e 94 09 04 	call	0x812	; 0x812 <whileBarcode>
	parcours('T', communications);
     840:	be 01       	movw	r22, r28
     842:	84 e5       	ldi	r24, 0x54	; 84
     844:	0e 94 48 08 	call	0x1090	; 0x1090 <parcours>
	warehouse(orderPicking, communications); 	
     848:	be 01       	movw	r22, r28
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <warehouse>
	parcours('B', communications);
     850:	be 01       	movw	r22, r28
     852:	82 e4       	ldi	r24, 0x42	; 66
     854:	0e 94 48 08 	call	0x1090	; 0x1090 <parcours>
	whileLineEnd();
     858:	0e 94 12 04 	call	0x824	; 0x824 <whileLineEnd>
	motorControl('L');
     85c:	8c e4       	ldi	r24, 0x4C	; 76
     85e:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <main>:

int main()
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	c3 57       	subi	r28, 0x73	; 115
     872:	d1 09       	sbc	r29, r1
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
	play_from_program_space(welcome);
     87e:	83 e4       	ldi	r24, 0x43	; 67
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	0e 94 26 11 	call	0x224c	; 0x224c <play_from_program_space>
	
	Communications communications;
	Communications_INIT(&communications);
     886:	ce 01       	movw	r24, r28
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <Communications_INIT>
	
	initialize(&communications);
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	0e 94 9f 04 	call	0x93e	; 0x93e <initialize>
	
	while(1) 
	{
		//updateDisplay(0, batteryPercentage(), homingMode);
		communications.Update(&communications);
     896:	e4 96       	adiw	r28, 0x34	; 52
     898:	ee ad       	ldd	r30, Y+62	; 0x3e
     89a:	ff ad       	ldd	r31, Y+63	; 0x3f
     89c:	e4 97       	sbiw	r28, 0x34	; 52
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	09 95       	icall
		
		communications.locationx = -1;
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
     8a6:	e0 96       	adiw	r28, 0x30	; 48
     8a8:	8f af       	std	Y+63, r24	; 0x3f
     8aa:	e0 97       	sbiw	r28, 0x30	; 48
		communications.locationy = -1;
     8ac:	e1 96       	adiw	r28, 0x31	; 49
     8ae:	8f af       	std	Y+63, r24	; 0x3f
     8b0:	e1 97       	sbiw	r28, 0x31	; 49
		
		lcd_goto_xy(0, 0);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 b9 12 	call	0x2572	; 0x2572 <lcd_goto_xy>
		print_long(communications.EmergencyStop);
     8ba:	ad 96       	adiw	r28, 0x2d	; 45
     8bc:	6f ad       	ldd	r22, Y+63	; 0x3f
     8be:	ad 97       	sbiw	r28, 0x2d	; 45
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 96 12 	call	0x252c	; 0x252c <print_long>
		
		switch (communications.EmergencyStop) {
     8ca:	ad 96       	adiw	r28, 0x2d	; 45
     8cc:	8f ad       	ldd	r24, Y+63	; 0x3f
     8ce:	ad 97       	sbiw	r28, 0x2d	; 45
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	79 f1       	breq	.+94     	; 0x932 <__stack+0x33>
     8d4:	83 30       	cpi	r24, 0x03	; 3
     8d6:	81 f1       	breq	.+96     	; 0x938 <__stack+0x39>
     8d8:	81 11       	cpse	r24, r1
     8da:	dd cf       	rjmp	.-70     	; 0x896 <main+0x2e>
				/*if (read_battery_millivolts_3pi() < 0.6 * 5200)
				{
					charge_3pi(&communications);
				}
				else*/
				print_long(communications.locationx);
     8dc:	e0 96       	adiw	r28, 0x30	; 48
     8de:	6f ad       	ldd	r22, Y+63	; 0x3f
     8e0:	e0 97       	sbiw	r28, 0x30	; 48
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 96 12 	call	0x252c	; 0x252c <print_long>
				print_long(communications.locationy);
     8ec:	e1 96       	adiw	r28, 0x31	; 49
     8ee:	6f ad       	ldd	r22, Y+63	; 0x3f
     8f0:	e1 97       	sbiw	r28, 0x31	; 49
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 96 12 	call	0x252c	; 0x252c <print_long>
				if (communications.flag==1)
     8fc:	e2 96       	adiw	r28, 0x32	; 50
     8fe:	8f ad       	ldd	r24, Y+63	; 0x3f
     900:	e2 97       	sbiw	r28, 0x32	; 50
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	41 f6       	brne	.-112    	; 0x896 <main+0x2e>
				{
					
					play_from_program_space(welcome);
     906:	83 e4       	ldi	r24, 0x43	; 67
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	0e 94 26 11 	call	0x224c	; 0x224c <play_from_program_space>
					communications.locationx = 0;
     90e:	e0 96       	adiw	r28, 0x30	; 48
     910:	1f ae       	std	Y+63, r1	; 0x3f
     912:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = 0;
     914:	e1 96       	adiw	r28, 0x31	; 49
     916:	1f ae       	std	Y+63, r1	; 0x3f
     918:	e1 97       	sbiw	r28, 0x31	; 49
					pickOrder(&communications);
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	0e 94 1b 04 	call	0x836	; 0x836 <pickOrder>
					communications.locationx = -1;
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	e0 96       	adiw	r28, 0x30	; 48
     926:	8f af       	std	Y+63, r24	; 0x3f
     928:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = -1;
     92a:	e1 96       	adiw	r28, 0x31	; 49
     92c:	8f af       	std	Y+63, r24	; 0x3f
     92e:	e1 97       	sbiw	r28, 0x31	; 49
     930:	b2 cf       	rjmp	.-156    	; 0x896 <main+0x2e>
				}
				break;
				delay(100);
			case 2:
				Spin();
     932:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Spin>
				break;
     936:	af cf       	rjmp	.-162    	; 0x896 <main+0x2e>
			case 3:
				manualControl();
     938:	0e 94 f6 06 	call	0xdec	; 0xdec <manualControl>
				break;
     93c:	ac cf       	rjmp	.-168    	; 0x896 <main+0x2e>

0000093e <initialize>:
void inch(){
	set_motors(50,50);
	delay(200);
	set_motors(0,0);
}
void println(int x){
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <myComs+0x1>
     946:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <myComs>
     94a:	80 ed       	ldi	r24, 0xD0	; 208
     94c:	97 e0       	ldi	r25, 0x07	; 7
     94e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <pololu_3pi_init>
     952:	0d c0       	rjmp	.+26     	; 0x96e <initialize+0x30>
     954:	0e 94 32 12 	call	0x2464	; 0x2464 <clear>
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	0e 94 b9 12 	call	0x2572	; 0x2572 <lcd_goto_xy>
     960:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <read_battery_millivolts_3pi>
     964:	bc 01       	movw	r22, r24
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 96 12 	call	0x252c	; 0x252c <print_long>
     96e:	80 e1       	ldi	r24, 0x10	; 16
     970:	0e 94 b2 13 	call	0x2764	; 0x2764 <button_is_pressed>
     974:	88 23       	and	r24, r24
     976:	71 f3       	breq	.-36     	; 0x954 <initialize+0x16>
     978:	80 e1       	ldi	r24, 0x10	; 16
     97a:	0e 94 9e 13 	call	0x273c	; 0x273c <wait_for_button_release>
     97e:	88 ee       	ldi	r24, 0xE8	; 232
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	d0 e0       	ldi	r29, 0x00	; 0
     98a:	19 c0       	rjmp	.+50     	; 0x9be <initialize+0x80>
     98c:	ce 01       	movw	r24, r28
     98e:	44 97       	sbiw	r24, 0x14	; 20
     990:	88 97       	sbiw	r24, 0x28	; 40
     992:	38 f0       	brcs	.+14     	; 0x9a2 <initialize+0x64>
     994:	68 ed       	ldi	r22, 0xD8	; 216
     996:	7f ef       	ldi	r23, 0xFF	; 255
     998:	88 e2       	ldi	r24, 0x28	; 40
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     9a0:	06 c0       	rjmp	.+12     	; 0x9ae <initialize+0x70>
     9a2:	68 e2       	ldi	r22, 0x28	; 40
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	88 ed       	ldi	r24, 0xD8	; 216
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <calibrate_line_sensors>
     9b4:	84 e1       	ldi	r24, 0x14	; 20
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
     9bc:	21 96       	adiw	r28, 0x01	; 1
     9be:	c0 35       	cpi	r28, 0x50	; 80
     9c0:	d1 05       	cpc	r29, r1
     9c2:	20 f3       	brcs	.-56     	; 0x98c <initialize+0x4e>
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     9d0:	80 e1       	ldi	r24, 0x10	; 16
     9d2:	0e 94 b2 13 	call	0x2764	; 0x2764 <button_is_pressed>
     9d6:	88 23       	and	r24, r24
     9d8:	d9 f3       	breq	.-10     	; 0x9d0 <initialize+0x92>
     9da:	80 e1       	ldi	r24, 0x10	; 16
     9dc:	0e 94 9e 13 	call	0x273c	; 0x273c <wait_for_button_release>
     9e0:	0e 94 32 12 	call	0x2464	; 0x2464 <clear>
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <inch>:
     9ea:	62 e3       	ldi	r22, 0x32	; 50
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	82 e3       	ldi	r24, 0x32	; 50
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     9f6:	88 ec       	ldi	r24, 0xC8	; 200
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     a0a:	08 95       	ret

00000a0c <wait>:
	lcd_goto_xy(0,0);
	print_long(x);	*/
}

void wait(){
	set_motors(0,0);
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
	
	while(!button_is_pressed(BUTTON_B)){}
     a18:	80 e1       	ldi	r24, 0x10	; 16
     a1a:	0e 94 b2 13 	call	0x2764	; 0x2764 <button_is_pressed>
     a1e:	88 23       	and	r24, r24
     a20:	d9 f3       	breq	.-10     	; 0xa18 <wait+0xc>
	wait_for_button_release(BUTTON_B);
     a22:	80 e1       	ldi	r24, 0x10	; 16
     a24:	0e 94 9e 13 	call	0x273c	; 0x273c <wait_for_button_release>
     a28:	08 95       	ret

00000a2a <motorControl>:
	
	}
}


void motorControl(char x){													// function that controlls the motor movement and the turns
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	c8 2f       	mov	r28, r24
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	8d e0       	ldi	r24, 0x0D	; 13
     a40:	92 e0       	ldi	r25, 0x02	; 2
     a42:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <read_line>
     a46:	8c 01       	movw	r16, r24
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	8d e0       	ldi	r24, 0x0D	; 13
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
	
	if(myComs->EmergencyStop == 1)															//Emergency Brake
     a52:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     a56:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     a5a:	e5 59       	subi	r30, 0x95	; 149
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	80 81       	ld	r24, Z
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	39 f4       	brne	.+14     	; 0xa72 <motorControl+0x48>
		set_motors(0,0);	
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     a70:	e6 c0       	rjmp	.+460    	; 0xc3e <motorControl+0x214>
	
	
	else if(x == 'L'){														//Turn Left
     a72:	cc 34       	cpi	r28, 0x4C	; 76
     a74:	39 f5       	brne	.+78     	; 0xac4 <motorControl+0x9a>
		set_motors(-turn_value,turn_value);
     a76:	6c e3       	ldi	r22, 0x3C	; 60
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	84 ec       	ldi	r24, 0xC4	; 196
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
		
		while (sensors[2] >=Refrence_value)
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <motorControl+0x64>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	8d e0       	ldi	r24, 0x0D	; 13
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
	
	
	else if(x == 'L'){														//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
     a8e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     a92:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     a96:	80 39       	cpi	r24, 0x90	; 144
     a98:	91 40       	sbci	r25, 0x01	; 1
     a9a:	a0 f7       	brcc	.-24     	; 0xa84 <motorControl+0x5a>
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <motorControl+0x7e>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	8d e0       	ldi	r24, 0x0D	; 13
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
	else if(x == 'L'){														//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     aa8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     aac:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     ab0:	81 39       	cpi	r24, 0x91	; 145
     ab2:	91 40       	sbci	r25, 0x01	; 1
     ab4:	a0 f3       	brcs	.-24     	; 0xa9e <motorControl+0x74>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     ac2:	bd c0       	rjmp	.+378    	; 0xc3e <motorControl+0x214>
	}
	
	
	else if(x == 'R'){														//Turn Right
     ac4:	c2 35       	cpi	r28, 0x52	; 82
     ac6:	39 f5       	brne	.+78     	; 0xb16 <motorControl+0xec>
		set_motors(turn_value,-turn_value);
     ac8:	64 ec       	ldi	r22, 0xC4	; 196
     aca:	7f ef       	ldi	r23, 0xFF	; 255
     acc:	8c e3       	ldi	r24, 0x3C	; 60
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
		
		while (sensors[2] >=Refrence_value)
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <motorControl+0xb6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	8d e0       	ldi	r24, 0x0D	; 13
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
	
	
	else if(x == 'R'){														//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
     ae0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     ae4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     ae8:	80 39       	cpi	r24, 0x90	; 144
     aea:	91 40       	sbci	r25, 0x01	; 1
     aec:	a0 f7       	brcc	.-24     	; 0xad6 <motorControl+0xac>
     aee:	05 c0       	rjmp	.+10     	; 0xafa <motorControl+0xd0>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	8d e0       	ldi	r24, 0x0D	; 13
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
	else if(x == 'R'){														//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     afa:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     afe:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     b02:	81 39       	cpi	r24, 0x91	; 145
     b04:	91 40       	sbci	r25, 0x01	; 1
     b06:	a0 f3       	brcs	.-24     	; 0xaf0 <motorControl+0xc6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     b14:	94 c0       	rjmp	.+296    	; 0xc3e <motorControl+0x214>
	}
		
			
	else if(x == 'S'){												//drive straight and adjusts the robot so it follows the line
     b16:	c3 35       	cpi	r28, 0x53	; 83
     b18:	09 f0       	breq	.+2      	; 0xb1c <motorControl+0xf2>
     b1a:	47 c0       	rjmp	.+142    	; 0xbaa <motorControl+0x180>
			int last_proportional;
			int integral;
		// are not interested in the individual sensor readings.
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     b1c:	00 5d       	subi	r16, 0xD0	; 208
     b1e:	17 40       	sbci	r17, 0x07	; 7

		// Remember the last position.
		 last_proportional = proportional;
 
 
		int power_difference = proportional/100 + integral/300 + derivative*0.10;						// derivative == stuur snelheid
     b20:	c8 01       	movw	r24, r16
     b22:	64 e6       	ldi	r22, 0x64	; 100
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	0e 94 27 1b 	call	0x364e	; 0x364e <__divmodhi4>
     b2a:	eb 01       	movw	r28, r22
     b2c:	c8 01       	movw	r24, r16
     b2e:	6c e2       	ldi	r22, 0x2C	; 44
     b30:	71 e0       	ldi	r23, 0x01	; 1
     b32:	0e 94 27 1b 	call	0x364e	; 0x364e <__divmodhi4>
     b36:	c6 0f       	add	r28, r22
     b38:	d7 1f       	adc	r29, r23
     b3a:	b8 01       	movw	r22, r16
     b3c:	11 0f       	add	r17, r17
     b3e:	88 0b       	sbc	r24, r24
     b40:	99 0b       	sbc	r25, r25
     b42:	0e 94 43 0c 	call	0x1886	; 0x1886 <__floatsisf>
     b46:	2d ec       	ldi	r18, 0xCD	; 205
     b48:	3c ec       	ldi	r19, 0xCC	; 204
     b4a:	4c ec       	ldi	r20, 0xCC	; 204
     b4c:	5d e3       	ldi	r21, 0x3D	; 61
     b4e:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3>
     b52:	6b 01       	movw	r12, r22
     b54:	7c 01       	movw	r14, r24
     b56:	be 01       	movw	r22, r28
     b58:	dd 0f       	add	r29, r29
     b5a:	88 0b       	sbc	r24, r24
     b5c:	99 0b       	sbc	r25, r25
     b5e:	0e 94 43 0c 	call	0x1886	; 0x1886 <__floatsisf>
     b62:	a7 01       	movw	r20, r14
     b64:	96 01       	movw	r18, r12
     b66:	0e 94 9f 0b 	call	0x173e	; 0x173e <__addsf3>
     b6a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fixsfsi>
     b6e:	cb 01       	movw	r24, r22

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 70;
		if(power_difference > max)
     b70:	67 34       	cpi	r22, 0x47	; 71
     b72:	71 05       	cpc	r23, r1
     b74:	14 f0       	brlt	.+4      	; 0xb7a <motorControl+0x150>
			power_difference = max;
     b76:	86 e4       	ldi	r24, 0x46	; 70
     b78:	90 e0       	ldi	r25, 0x00	; 0
		if(power_difference < -max)
     b7a:	8a 3b       	cpi	r24, 0xBA	; 186
     b7c:	2f ef       	ldi	r18, 0xFF	; 255
     b7e:	92 07       	cpc	r25, r18
     b80:	14 f4       	brge	.+4      	; 0xb86 <motorControl+0x15c>
			power_difference = -max;
     b82:	8a eb       	ldi	r24, 0xBA	; 186
     b84:	9f ef       	ldi	r25, 0xFF	; 255

		if(power_difference < 0)
     b86:	99 23       	and	r25, r25
     b88:	3c f4       	brge	.+14     	; 0xb98 <motorControl+0x16e>
			set_motors(max+power_difference, max);
     b8a:	66 e4       	ldi	r22, 0x46	; 70
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	8a 5b       	subi	r24, 0xBA	; 186
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     b96:	53 c0       	rjmp	.+166    	; 0xc3e <motorControl+0x214>
		else
			set_motors(max, max-power_difference);
     b98:	66 e4       	ldi	r22, 0x46	; 70
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	68 1b       	sub	r22, r24
     b9e:	79 0b       	sbc	r23, r25
     ba0:	86 e4       	ldi	r24, 0x46	; 70
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     ba8:	4a c0       	rjmp	.+148    	; 0xc3e <motorControl+0x214>
		
	}
	
	
	else if(x == 'B'){														//Reverse while following the line
     baa:	c2 34       	cpi	r28, 0x42	; 66
     bac:	09 f5       	brne	.+66     	; 0xbf0 <motorControl+0x1c6>
		set_motors(-50,-50);
     bae:	6e ec       	ldi	r22, 0xCE	; 206
     bb0:	7f ef       	ldi	r23, 0xFF	; 255
     bb2:	8e ec       	ldi	r24, 0xCE	; 206
     bb4:	9f ef       	ldi	r25, 0xFF	; 255
     bb6:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
		
		if (sensors[3] >=Refrence_value)
     bba:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x6>
     bbe:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x7>
     bc2:	80 39       	cpi	r24, 0x90	; 144
     bc4:	91 40       	sbci	r25, 0x01	; 1
     bc6:	30 f0       	brcs	.+12     	; 0xbd4 <motorControl+0x1aa>
			set_motors(-50,-55);
     bc8:	69 ec       	ldi	r22, 0xC9	; 201
     bca:	7f ef       	ldi	r23, 0xFF	; 255
     bcc:	8e ec       	ldi	r24, 0xCE	; 206
     bce:	9f ef       	ldi	r25, 0xFF	; 255
     bd0:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
		if (sensors[1] >=Refrence_value)
     bd4:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <sensors+0x2>
     bd8:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <sensors+0x3>
     bdc:	80 39       	cpi	r24, 0x90	; 144
     bde:	91 40       	sbci	r25, 0x01	; 1
     be0:	70 f1       	brcs	.+92     	; 0xc3e <motorControl+0x214>
			set_motors(-55,-50);
     be2:	6e ec       	ldi	r22, 0xCE	; 206
     be4:	7f ef       	ldi	r23, 0xFF	; 255
     be6:	89 ec       	ldi	r24, 0xC9	; 201
     be8:	9f ef       	ldi	r25, 0xFF	; 255
     bea:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
     bee:	27 c0       	rjmp	.+78     	; 0xc3e <motorControl+0x214>
	}
	
	
	else if(x == 'T'){														// Turn around
     bf0:	c4 35       	cpi	r28, 0x54	; 84
     bf2:	a1 f4       	brne	.+40     	; 0xc1c <motorControl+0x1f2>
		set_motors(-turn_value,turn_value);
     bf4:	6c e3       	ldi	r22, 0x3C	; 60
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	84 ec       	ldi	r24, 0xC4	; 196
     bfa:	9f ef       	ldi	r25, 0xFF	; 255
     bfc:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
		
		while (sensors[2] <=Refrence_value)
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <motorControl+0x1e2>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	8d e0       	ldi	r24, 0x0D	; 13
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
	
	
	else if(x == 'T'){														// Turn around
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] <=Refrence_value)
     c0c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     c10:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     c14:	81 39       	cpi	r24, 0x91	; 145
     c16:	91 40       	sbci	r25, 0x01	; 1
     c18:	a0 f3       	brcs	.-24     	; 0xc02 <motorControl+0x1d8>
     c1a:	11 c0       	rjmp	.+34     	; 0xc3e <motorControl+0x214>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
     c1c:	c0 35       	cpi	r28, 0x50	; 80
     c1e:	79 f4       	brne	.+30     	; 0xc3e <motorControl+0x214>
     c20:	0a c0       	rjmp	.+20     	; 0xc36 <motorControl+0x20c>
		for( int i=50;i>=0;i-=2)
		{
			set_motors(i,i);
     c22:	be 01       	movw	r22, r28
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     c2a:	85 e0       	ldi	r24, 0x05	; 5
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
		for( int i=50;i>=0;i-=2)
     c32:	22 97       	sbiw	r28, 0x02	; 2
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <motorControl+0x210>
     c36:	c2 e3       	ldi	r28, 0x32	; 50
     c38:	d0 e0       	ldi	r29, 0x00	; 0
     c3a:	dd 23       	and	r29, r29
     c3c:	94 f7       	brge	.-28     	; 0xc22 <motorControl+0x1f8>
			set_motors(i,i);
			delay(5);
		}
		
		
}
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	08 95       	ret

00000c50 <lineType>:
	wait_for_button_release(BUTTON_B);
}

char lineType(){																																	// function that returns the type of junction it detects
	while(1){																																		// >= 500 = black line		<=500 = white
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	8d e0       	ldi	r24, 0x0D	; 13
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
					
		if (sensors[0] >=Refrence_value && sensors[1] >= Refrence_value && sensors[4] <= Refrence_value ){																							//Checks if its a left corner or a straight with left corner
     c5a:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <sensors>
     c5e:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <sensors+0x1>
     c62:	20 39       	cpi	r18, 0x90	; 144
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	34 07       	cpc	r19, r20
     c68:	38 f1       	brcs	.+78     	; 0xcb8 <lineType+0x68>
     c6a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <sensors+0x2>
     c6e:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <sensors+0x3>
     c72:	80 39       	cpi	r24, 0x90	; 144
     c74:	91 40       	sbci	r25, 0x01	; 1
     c76:	00 f1       	brcs	.+64     	; 0xcb8 <lineType+0x68>
     c78:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x8>
     c7c:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x9>
     c80:	81 39       	cpi	r24, 0x91	; 145
     c82:	91 40       	sbci	r25, 0x01	; 1
     c84:	c8 f4       	brcc	.+50     	; 0xcb8 <lineType+0x68>
			inch();
     c86:	0e 94 f5 04 	call	0x9ea	; 0x9ea <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	8d e0       	ldi	r24, 0x0D	; 13
     c8e:	92 e0       	ldi	r25, 0x02	; 2
     c90:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
     c94:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     c98:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     c9c:	80 39       	cpi	r24, 0x90	; 144
     c9e:	91 40       	sbci	r25, 0x01	; 1
     ca0:	08 f0       	brcs	.+2      	; 0xca4 <lineType+0x54>
     ca2:	94 c0       	rjmp	.+296    	; 0xdcc <lineType+0x17c>
     ca4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x6>
     ca8:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x7>
     cac:	80 39       	cpi	r24, 0x90	; 144
     cae:	91 40       	sbci	r25, 0x01	; 1
     cb0:	08 f4       	brcc	.+2      	; 0xcb4 <lineType+0x64>
     cb2:	8e c0       	rjmp	.+284    	; 0xdd0 <lineType+0x180>
				println(Straight_left_junction);
				return Straight_left_junction;
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	08 95       	ret
				return Left_corner;
			}
		}
		
		
		else if (sensors[3] >=Refrence_value && sensors[4] >= Refrence_value && sensors[0] <= Refrence_value){																							//Checks if its a right corner or a straight with right corner
     cb8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x6>
     cbc:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x7>
     cc0:	80 39       	cpi	r24, 0x90	; 144
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	96 07       	cpc	r25, r22
     cc6:	20 f1       	brcs	.+72     	; 0xd10 <lineType+0xc0>
     cc8:	40 91 15 02 	lds	r20, 0x0215	; 0x800215 <sensors+0x8>
     ccc:	50 91 16 02 	lds	r21, 0x0216	; 0x800216 <sensors+0x9>
     cd0:	40 39       	cpi	r20, 0x90	; 144
     cd2:	51 40       	sbci	r21, 0x01	; 1
     cd4:	e8 f0       	brcs	.+58     	; 0xd10 <lineType+0xc0>
     cd6:	21 39       	cpi	r18, 0x91	; 145
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	34 07       	cpc	r19, r20
     cdc:	c8 f4       	brcc	.+50     	; 0xd10 <lineType+0xc0>
			inch();
     cde:	0e 94 f5 04 	call	0x9ea	; 0x9ea <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	8d e0       	ldi	r24, 0x0D	; 13
     ce6:	92 e0       	ldi	r25, 0x02	; 2
     ce8:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
     cec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     cf0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     cf4:	80 39       	cpi	r24, 0x90	; 144
     cf6:	91 40       	sbci	r25, 0x01	; 1
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <lineType+0xac>
     cfa:	6c c0       	rjmp	.+216    	; 0xdd4 <lineType+0x184>
     cfc:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <sensors+0x2>
     d00:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <sensors+0x3>
     d04:	80 39       	cpi	r24, 0x90	; 144
     d06:	91 40       	sbci	r25, 0x01	; 1
     d08:	08 f4       	brcc	.+2      	; 0xd0c <lineType+0xbc>
     d0a:	66 c0       	rjmp	.+204    	; 0xdd8 <lineType+0x188>
				println(Straight_right_junction);
				return Straight_right_junction;
     d0c:	85 e0       	ldi	r24, 0x05	; 5
     d0e:	08 95       	ret
				println(Straight_left_junction);
				return Right_corner;
			}
		}
		
				else if (sensors[1] >=Refrence_value && sensors[3] >= Refrence_value){																									//Checks if its a X junction or a T junction
     d10:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <sensors+0x2>
     d14:	50 91 10 02 	lds	r21, 0x0210	; 0x800210 <sensors+0x3>
     d18:	40 39       	cpi	r20, 0x90	; 144
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	56 07       	cpc	r21, r22
     d1e:	a8 f0       	brcs	.+42     	; 0xd4a <lineType+0xfa>
     d20:	80 39       	cpi	r24, 0x90	; 144
     d22:	e1 e0       	ldi	r30, 0x01	; 1
     d24:	9e 07       	cpc	r25, r30
     d26:	88 f0       	brcs	.+34     	; 0xd4a <lineType+0xfa>
					inch();
     d28:	0e 94 f5 04 	call	0x9ea	; 0x9ea <inch>
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	8d e0       	ldi	r24, 0x0D	; 13
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
					
					if (sensors[2] >=Refrence_value){
     d36:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     d3a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     d3e:	80 39       	cpi	r24, 0x90	; 144
     d40:	91 40       	sbci	r25, 0x01	; 1
     d42:	08 f4       	brcc	.+2      	; 0xd46 <lineType+0xf6>
     d44:	4b c0       	rjmp	.+150    	; 0xddc <lineType+0x18c>
						println(X_junction);
						return X_junction;
     d46:	88 e0       	ldi	r24, 0x08	; 8
     d48:	08 95       	ret
						println(T_junction);
						return T_junction;
					}
				}
				
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){
     d4a:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <sensors+0x4>
     d4e:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <sensors+0x5>
     d52:	69 3c       	cpi	r22, 0xC9	; 201
     d54:	71 05       	cpc	r23, r1
     d56:	30 f4       	brcc	.+12     	; 0xd64 <lineType+0x114>
     d58:	49 3c       	cpi	r20, 0xC9	; 201
     d5a:	51 05       	cpc	r21, r1
     d5c:	18 f4       	brcc	.+6      	; 0xd64 <lineType+0x114>
     d5e:	89 3c       	cpi	r24, 0xC9	; 201
     d60:	91 05       	cpc	r25, r1
     d62:	f0 f1       	brcs	.+124    	; 0xde0 <lineType+0x190>
					println(Line_end);																													// check if the line ends
					return Line_end;
				}
		else{
		//else if (sensors[2] >=Refrence_value){																													//Checks if the line is straight
			if ((sensors[3] <=Refrence_value && sensors[4] >=Refrence_value && sensors[1] <=Refrence_value) || (sensors[0] >=Refrence_value && sensors[1] <=Refrence_value && sensors[3] <=Refrence_value)){			//Checks the line for a "Barcode"
     d64:	81 39       	cpi	r24, 0x91	; 145
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	96 07       	cpc	r25, r22
     d6a:	58 f4       	brcc	.+22     	; 0xd82 <lineType+0x132>
     d6c:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <sensors+0x8>
     d70:	70 91 16 02 	lds	r23, 0x0216	; 0x800216 <sensors+0x9>
     d74:	60 39       	cpi	r22, 0x90	; 144
     d76:	71 40       	sbci	r23, 0x01	; 1
     d78:	20 f0       	brcs	.+8      	; 0xd82 <lineType+0x132>
     d7a:	41 39       	cpi	r20, 0x91	; 145
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	56 07       	cpc	r21, r22
     d80:	98 f0       	brcs	.+38     	; 0xda8 <lineType+0x158>
     d82:	20 39       	cpi	r18, 0x90	; 144
     d84:	31 40       	sbci	r19, 0x01	; 1
     d86:	70 f1       	brcs	.+92     	; 0xde4 <lineType+0x194>
     d88:	41 39       	cpi	r20, 0x91	; 145
     d8a:	51 40       	sbci	r21, 0x01	; 1
     d8c:	68 f5       	brcc	.+90     	; 0xde8 <lineType+0x198>
     d8e:	81 39       	cpi	r24, 0x91	; 145
     d90:	91 40       	sbci	r25, 0x01	; 1
     d92:	50 f0       	brcs	.+20     	; 0xda8 <lineType+0x158>
				println(Barcode);
				return Barcode;
			}
			else{
				println(Straight);
				return Straight;
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	08 95       	ret
			if ((sensors[3] <=Refrence_value && sensors[4] >=Refrence_value && sensors[1] <=Refrence_value) || (sensors[0] >=Refrence_value && sensors[1] <=Refrence_value && sensors[3] <=Refrence_value)){			//Checks the line for a "Barcode"
			//if((sensors[4] >=Refrence_value && sensors[0] >=Refrence_value) && (sensors[1] <=Refrence_value || sensors[3] <=Refrence_value)){
			
				while(sensors[4] >= Refrence_value || sensors[0] >=Refrence_value)
				{
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	8d e0       	ldi	r24, 0x0D	; 13
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <read_line_sensors_calibrated>
					motorControl('S');
     da2:	83 e5       	ldi	r24, 0x53	; 83
     da4:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
		else{
		//else if (sensors[2] >=Refrence_value){																													//Checks if the line is straight
			if ((sensors[3] <=Refrence_value && sensors[4] >=Refrence_value && sensors[1] <=Refrence_value) || (sensors[0] >=Refrence_value && sensors[1] <=Refrence_value && sensors[3] <=Refrence_value)){			//Checks the line for a "Barcode"
			//if((sensors[4] >=Refrence_value && sensors[0] >=Refrence_value) && (sensors[1] <=Refrence_value || sensors[3] <=Refrence_value)){
			
				while(sensors[4] >= Refrence_value || sensors[0] >=Refrence_value)
     da8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x8>
     dac:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x9>
     db0:	80 39       	cpi	r24, 0x90	; 144
     db2:	91 40       	sbci	r25, 0x01	; 1
     db4:	88 f7       	brcc	.-30     	; 0xd98 <lineType+0x148>
     db6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <sensors>
     dba:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <sensors+0x1>
     dbe:	80 39       	cpi	r24, 0x90	; 144
     dc0:	91 40       	sbci	r25, 0x01	; 1
     dc2:	50 f7       	brcc	.-44     	; 0xd98 <lineType+0x148>
				{
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
					motorControl('S');
				}
				wait();
     dc4:	0e 94 06 05 	call	0xa0c	; 0xa0c <wait>
				println(Barcode);
				return Barcode;
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	08 95       	ret
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
				println(Straight_left_junction);
				return Straight_left_junction;
     dcc:	86 e0       	ldi	r24, 0x06	; 6
     dce:	08 95       	ret
			}
			else{
				println(Left_corner);
				return Left_corner;
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	08 95       	ret
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
				println(Straight_right_junction);
				return Straight_right_junction;
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	08 95       	ret
			}
			else{
				println(Straight_left_junction);
				return Right_corner;
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	08 95       	ret
						println(X_junction);
						return X_junction;
					}
					else {
						println(T_junction);
						return T_junction;
     ddc:	87 e0       	ldi	r24, 0x07	; 7
     dde:	08 95       	ret
					}
				}
				
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){
					println(Line_end);																													// check if the line ends
					return Line_end;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	08 95       	ret
				println(Barcode);
				return Barcode;
			}
			else{
				println(Straight);
				return Straight;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	08 95       	ret
     de8:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		
	
	}
}
     dea:	08 95       	ret

00000dec <manualControl>:
}




void manualControl(){
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
int speed = 0;

	if(myComs->Direction[0] == 1){
     df0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     df4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     df8:	85 a9       	ldd	r24, Z+53	; 0x35
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	49 f4       	brne	.+18     	; 0xe10 <manualControl+0x24>
		set_motors(speed,speed);
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
		speed++;
     e0a:	c1 e0       	ldi	r28, 0x01	; 1
     e0c:	d0 e0       	ldi	r29, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <manualControl+0x28>




void manualControl(){
int speed = 0;
     e10:	c0 e0       	ldi	r28, 0x00	; 0
     e12:	d0 e0       	ldi	r29, 0x00	; 0
	if(myComs->Direction[0] == 1){
		set_motors(speed,speed);
		speed++;
	}
	
	if(myComs->Direction[1] == 1){
     e14:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     e18:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     e1c:	86 a9       	ldd	r24, Z+54	; 0x36
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	41 f4       	brne	.+16     	; 0xe32 <manualControl+0x46>
		set_motors(-speed,-speed);
     e22:	88 27       	eor	r24, r24
     e24:	99 27       	eor	r25, r25
     e26:	8c 1b       	sub	r24, r28
     e28:	9d 0b       	sbc	r25, r29
     e2a:	bc 01       	movw	r22, r24
     e2c:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
		speed--;
     e30:	21 97       	sbiw	r28, 0x01	; 1
	}
	
	if(myComs->Direction[2] == 1){
     e32:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     e36:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     e3a:	87 a9       	ldd	r24, Z+55	; 0x37
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	49 f4       	brne	.+18     	; 0xe52 <manualControl+0x66>
		set_motors(speed/2,speed);
     e40:	ce 01       	movw	r24, r28
     e42:	dd 23       	and	r29, r29
     e44:	0c f4       	brge	.+2      	; 0xe48 <manualControl+0x5c>
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	be 01       	movw	r22, r28
     e4a:	95 95       	asr	r25
     e4c:	87 95       	ror	r24
     e4e:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
	}
	
	if(myComs->Direction[3] == 1){
     e52:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     e56:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     e5a:	80 ad       	ldd	r24, Z+56	; 0x38
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	51 f4       	brne	.+20     	; 0xe74 <manualControl+0x88>
		set_motors(speed,speed/2);
     e60:	be 01       	movw	r22, r28
     e62:	dd 23       	and	r29, r29
     e64:	14 f4       	brge	.+4      	; 0xe6a <manualControl+0x7e>
     e66:	6f 5f       	subi	r22, 0xFF	; 255
     e68:	7f 4f       	sbci	r23, 0xFF	; 255
     e6a:	75 95       	asr	r23
     e6c:	67 95       	ror	r22
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 6f 13 	call	0x26de	; 0x26de <set_motors>
	}
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <Spin>:
void Spin(){
	
	for(int i = 0;i>=255;i++){
	set_motors(i,-i);	
	}
	while(myComs->EmergencyStop == 1){}
     e7a:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     e7e:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     e82:	e5 59       	subi	r30, 0x95	; 149
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	b9 f3       	breq	.-18     	; 0xe7a <Spin>
	for(int i = 255;i<=0;i--){
		set_motors(i,-i);
	}
     e8c:	08 95       	ret

00000e8e <parcoursSearch>:
char route[20] = "_"; // hardcode SLR
char routeBack[20];
int routea = 1;

int parcoursSearch(Communications *communications) 
{
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	00 d0       	rcall	.+0      	; 0xe98 <parcoursSearch+0xa>
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
	char richting;
	while(1) 
	{
		situatie = lineType();
     e9c:	0e 94 28 06 	call	0xc50	; 0xc50 <lineType>
     ea0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <situatie>
		
		switch (situatie) 
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	89 30       	cpi	r24, 0x09	; 9
     ea8:	91 05       	cpc	r25, r1
     eaa:	08 f0       	brcs	.+2      	; 0xeae <parcoursSearch+0x20>
     eac:	41 c0       	rjmp	.+130    	; 0xf30 <parcoursSearch+0xa2>
     eae:	fc 01       	movw	r30, r24
     eb0:	ec 5c       	subi	r30, 0xCC	; 204
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__tablejump2__>
		{
			case Straight:
				motorControl('S');
     eb8:	83 e5       	ldi	r24, 0x53	; 83
     eba:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
				break;
     ebe:	38 c0       	rjmp	.+112    	; 0xf30 <parcoursSearch+0xa2>
			
			case X_junction:
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
				motorControl('L');
     ec0:	8c e4       	ldi	r24, 0x4C	; 76
     ec2:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
				richting = 'L';
     ec6:	8c e4       	ldi	r24, 0x4C	; 76
     ec8:	89 83       	std	Y+1, r24	; 0x01
				////print_character('L');
				strncat(route, &richting, 1);
     eca:	41 e0       	ldi	r20, 0x01	; 1
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	be 01       	movw	r22, r28
     ed0:	6f 5f       	subi	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	84 e1       	ldi	r24, 0x14	; 20
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <strncat>
				break;
     edc:	29 c0       	rjmp	.+82     	; 0xf30 <parcoursSearch+0xa2>
			
			case Right_corner:
				motorControl('R');
     ede:	82 e5       	ldi	r24, 0x52	; 82
     ee0:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
				richting = 'R';
     ee4:	82 e5       	ldi	r24, 0x52	; 82
     ee6:	89 83       	std	Y+1, r24	; 0x01
				//print_character('R');
				strncat(route, &richting, 1);
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	be 01       	movw	r22, r28
     eee:	6f 5f       	subi	r22, 0xFF	; 255
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	84 e1       	ldi	r24, 0x14	; 20
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <strncat>
				break;
     efa:	1a c0       	rjmp	.+52     	; 0xf30 <parcoursSearch+0xa2>
			
			case Straight_right_junction:
				richting = 'S';
     efc:	83 e5       	ldi	r24, 0x53	; 83
     efe:	89 83       	std	Y+1, r24	; 0x01
				//print_character('S');
				strncat(route, &richting, 1);
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	be 01       	movw	r22, r28
     f06:	6f 5f       	subi	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	84 e1       	ldi	r24, 0x14	; 20
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <strncat>
				break;
     f12:	0e c0       	rjmp	.+28     	; 0xf30 <parcoursSearch+0xa2>
				
			case Line_end:
				motorControl('T');
     f14:	84 e5       	ldi	r24, 0x54	; 84
     f16:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
				richting = 'T';
     f1a:	84 e5       	ldi	r24, 0x54	; 84
     f1c:	89 83       	std	Y+1, r24	; 0x01
				//print_character('T');
				strncat(route, &richting, 1);
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	be 01       	movw	r22, r28
     f24:	6f 5f       	subi	r22, 0xFF	; 255
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	84 e1       	ldi	r24, 0x14	; 20
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <strncat>
				motorControl('P');
				//print_character('B');
				return 0;
		}
		
		clear();
     f30:	0e 94 32 12 	call	0x2464	; 0x2464 <clear>
		lcd_goto_xy(0,0);
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 b9 12 	call	0x2572	; 0x2572 <lcd_goto_xy>
		for (int i=0; i <= strlen(route);i++ ){
     f3c:	00 e0       	ldi	r16, 0x00	; 0
     f3e:	10 e0       	ldi	r17, 0x00	; 0
     f40:	08 c0       	rjmp	.+16     	; 0xf52 <parcoursSearch+0xc4>
		print_character(route[i]);
     f42:	f8 01       	movw	r30, r16
     f44:	ec 5e       	subi	r30, 0xEC	; 236
     f46:	fe 4f       	sbci	r31, 0xFE	; 254
     f48:	80 81       	ld	r24, Z
     f4a:	0e 94 c2 11 	call	0x2384	; 0x2384 <print_character>
				return 0;
		}
		
		clear();
		lcd_goto_xy(0,0);
		for (int i=0; i <= strlen(route);i++ ){
     f4e:	0f 5f       	subi	r16, 0xFF	; 255
     f50:	1f 4f       	sbci	r17, 0xFF	; 255
     f52:	e4 e1       	ldi	r30, 0x14	; 20
     f54:	f1 e0       	ldi	r31, 0x01	; 1
     f56:	01 90       	ld	r0, Z+
     f58:	00 20       	and	r0, r0
     f5a:	e9 f7       	brne	.-6      	; 0xf56 <parcoursSearch+0xc8>
     f5c:	31 97       	sbiw	r30, 0x01	; 1
     f5e:	e4 51       	subi	r30, 0x14	; 20
     f60:	f1 40       	sbci	r31, 0x01	; 1
     f62:	e0 17       	cp	r30, r16
     f64:	f1 07       	cpc	r31, r17
     f66:	68 f7       	brcc	.-38     	; 0xf42 <parcoursSearch+0xb4>
		print_character(route[i]);
		}
		
		char richting;	
		if (route[strlen(route)-2] == 'T') 
     f68:	df 01       	movw	r26, r30
     f6a:	ae 5e       	subi	r26, 0xEE	; 238
     f6c:	be 4f       	sbci	r27, 0xFE	; 254
     f6e:	8c 91       	ld	r24, X
     f70:	84 35       	cpi	r24, 0x54	; 84
     f72:	09 f0       	breq	.+2      	; 0xf76 <parcoursSearch+0xe8>
     f74:	93 cf       	rjmp	.-218    	; 0xe9c <parcoursSearch+0xe>
		{
			char char_1 = route[strlen(route)-3];
     f76:	df 01       	movw	r26, r30
     f78:	af 5e       	subi	r26, 0xEF	; 239
     f7a:	be 4f       	sbci	r27, 0xFE	; 254
     f7c:	8c 91       	ld	r24, X
			char char_2 = route[strlen(route)-1];
     f7e:	ed 5e       	subi	r30, 0xED	; 237
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	90 81       	ld	r25, Z

			if (char_1 == 'L' && char_2 == 'L') 
     f84:	8c 34       	cpi	r24, 0x4C	; 76
     f86:	29 f4       	brne	.+10     	; 0xf92 <parcoursSearch+0x104>
     f88:	9c 34       	cpi	r25, 0x4C	; 76
     f8a:	19 f4       	brne	.+6      	; 0xf92 <parcoursSearch+0x104>
			{
				richting = 'S';
     f8c:	83 e5       	ldi	r24, 0x53	; 83
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	1b c0       	rjmp	.+54     	; 0xfc8 <parcoursSearch+0x13a>
			}
			else if (char_1 == 'S' && char_2 == 'L')
     f92:	83 35       	cpi	r24, 0x53	; 83
     f94:	29 f4       	brne	.+10     	; 0xfa0 <parcoursSearch+0x112>
     f96:	9c 34       	cpi	r25, 0x4C	; 76
     f98:	19 f4       	brne	.+6      	; 0xfa0 <parcoursSearch+0x112>
			{
				richting = 'R';
     f9a:	82 e5       	ldi	r24, 0x52	; 82
     f9c:	8a 83       	std	Y+2, r24	; 0x02
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <parcoursSearch+0x13a>
			}
			else if (char_1 == 'R' && char_2 == 'L')
     fa0:	82 35       	cpi	r24, 0x52	; 82
     fa2:	29 f4       	brne	.+10     	; 0xfae <parcoursSearch+0x120>
     fa4:	9c 34       	cpi	r25, 0x4C	; 76
     fa6:	19 f4       	brne	.+6      	; 0xfae <parcoursSearch+0x120>
			{
				richting = 'T';
     fa8:	84 e5       	ldi	r24, 0x54	; 84
     faa:	8a 83       	std	Y+2, r24	; 0x02
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <parcoursSearch+0x13a>
			}
			else if (char_1 == 'L' && char_2 == 'R')
     fae:	8c 34       	cpi	r24, 0x4C	; 76
     fb0:	29 f4       	brne	.+10     	; 0xfbc <parcoursSearch+0x12e>
     fb2:	92 35       	cpi	r25, 0x52	; 82
     fb4:	19 f4       	brne	.+6      	; 0xfbc <parcoursSearch+0x12e>
			{
				richting = 'T';
     fb6:	84 e5       	ldi	r24, 0x54	; 84
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <parcoursSearch+0x13a>
			}
			else if (char_1 == 'L' && char_2 == 'S')
     fbc:	8c 34       	cpi	r24, 0x4C	; 76
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <parcoursSearch+0x13a>
     fc0:	93 35       	cpi	r25, 0x53	; 83
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <parcoursSearch+0x13a>
			{
				richting = 'R';
     fc4:	82 e5       	ldi	r24, 0x52	; 82
     fc6:	8a 83       	std	Y+2, r24	; 0x02
			}
			route[strlen(route)-3] = '\0';
     fc8:	e4 e1       	ldi	r30, 0x14	; 20
     fca:	f1 e0       	ldi	r31, 0x01	; 1
     fcc:	01 90       	ld	r0, Z+
     fce:	00 20       	and	r0, r0
     fd0:	e9 f7       	brne	.-6      	; 0xfcc <parcoursSearch+0x13e>
     fd2:	34 97       	sbiw	r30, 0x04	; 4
     fd4:	10 82       	st	Z, r1
			strncat(route, &richting, 1);
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	be 01       	movw	r22, r28
     fdc:	6e 5f       	subi	r22, 0xFE	; 254
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	84 e1       	ldi	r24, 0x14	; 20
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <strncat>
		}
	}
     fe8:	59 cf       	rjmp	.-334    	; 0xe9c <parcoursSearch+0xe>
				//print_character('T');
				strncat(route, &richting, 1);
				break;
				
			case Barcode: // end of parcour
				motorControl('P');
     fea:	80 e5       	ldi	r24, 0x50	; 80
     fec:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
			strncat(route, &richting, 1);
		}
	}
	routea = 0;	
	return 0;
}
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	08 95       	ret

00001002 <parcoursRun>:

int parcoursRun(char way, Communications *communications) 
{
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	18 2f       	mov	r17, r24
	char richting;
	for (int i = 0; i < strlen(route); i++) 
    100e:	c0 e0       	ldi	r28, 0x00	; 0
    1010:	d0 e0       	ldi	r29, 0x00	; 0
    1012:	2a c0       	rjmp	.+84     	; 0x1068 <parcoursRun+0x66>
	{
		while (lineType() == Straight)
		{
			motorControl('S');
    1014:	83 e5       	ldi	r24, 0x53	; 83
    1016:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
int parcoursRun(char way, Communications *communications) 
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
	{
		while (lineType() == Straight)
    101a:	0e 94 28 06 	call	0xc50	; 0xc50 <lineType>
    101e:	88 23       	and	r24, r24
    1020:	c9 f3       	breq	.-14     	; 0x1014 <parcoursRun+0x12>
		{
			motorControl('S');
		}
		if (way == 'T') {
    1022:	14 35       	cpi	r17, 0x54	; 84
    1024:	39 f4       	brne	.+14     	; 0x1034 <parcoursRun+0x32>
			motorControl(route[i]);
    1026:	fe 01       	movw	r30, r28
    1028:	ec 5e       	subi	r30, 0xEC	; 236
    102a:	fe 4f       	sbci	r31, 0xFE	; 254
    102c:	80 81       	ld	r24, Z
    102e:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
    1032:	19 c0       	rjmp	.+50     	; 0x1066 <parcoursRun+0x64>
		} 
		else if (way == 'B') 
    1034:	12 34       	cpi	r17, 0x42	; 66
    1036:	b9 f4       	brne	.+46     	; 0x1066 <parcoursRun+0x64>
		{
			richting = route[strlen(route)-i-1];
    1038:	e4 e1       	ldi	r30, 0x14	; 20
    103a:	f1 e0       	ldi	r31, 0x01	; 1
    103c:	01 90       	ld	r0, Z+
    103e:	00 20       	and	r0, r0
    1040:	e9 f7       	brne	.-6      	; 0x103c <parcoursRun+0x3a>
    1042:	31 97       	sbiw	r30, 0x01	; 1
    1044:	e4 51       	subi	r30, 0x14	; 20
    1046:	f1 40       	sbci	r31, 0x01	; 1
    1048:	ee 19       	sub	r30, r14
    104a:	ff 09       	sbc	r31, r15
    104c:	ed 5e       	subi	r30, 0xED	; 237
    104e:	fe 4f       	sbci	r31, 0xFE	; 254
    1050:	80 81       	ld	r24, Z
			switch (richting)
    1052:	8c 34       	cpi	r24, 0x4C	; 76
    1054:	19 f0       	breq	.+6      	; 0x105c <parcoursRun+0x5a>
    1056:	82 35       	cpi	r24, 0x52	; 82
    1058:	19 f0       	breq	.+6      	; 0x1060 <parcoursRun+0x5e>
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <parcoursRun+0x60>
			{
				case 'R':
					richting = 'L';
					break;
				case 'L':
					richting = 'R';
    105c:	82 e5       	ldi	r24, 0x52	; 82
					break;
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <parcoursRun+0x60>
		{
			richting = route[strlen(route)-i-1];
			switch (richting)
			{
				case 'R':
					richting = 'L';
    1060:	8c e4       	ldi	r24, 0x4C	; 76
					break;
				case 'L':
					richting = 'R';
					break;
			}
			motorControl(richting);
    1062:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
}

int parcoursRun(char way, Communications *communications) 
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
    1066:	21 96       	adiw	r28, 0x01	; 1
    1068:	e4 e1       	ldi	r30, 0x14	; 20
    106a:	f1 e0       	ldi	r31, 0x01	; 1
    106c:	01 90       	ld	r0, Z+
    106e:	00 20       	and	r0, r0
    1070:	e9 f7       	brne	.-6      	; 0x106c <parcoursRun+0x6a>
    1072:	31 97       	sbiw	r30, 0x01	; 1
    1074:	e4 51       	subi	r30, 0x14	; 20
    1076:	f1 40       	sbci	r31, 0x01	; 1
    1078:	7e 01       	movw	r14, r28
    107a:	ce 17       	cp	r28, r30
    107c:	df 07       	cpc	r29, r31
    107e:	68 f2       	brcs	.-102    	; 0x101a <parcoursRun+0x18>
			}
			motorControl(richting);
		}
	}
	return 0;
}
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	08 95       	ret

00001090 <parcours>:

int parcours(char way, Communications *communications) 
{
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	00 d0       	rcall	.+0      	; 0x1098 <parcours+0x8>
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	18 2f       	mov	r17, r24
    109e:	7a 83       	std	Y+2, r23	; 0x02
    10a0:	69 83       	std	Y+1, r22	; 0x01
	updateDisplay(0, batteryPercentage(), mazeSolver);
    10a2:	0e 94 8e 03 	call	0x71c	; 0x71c <batteryPercentage>
    10a6:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fixsfsi>
    10aa:	41 e0       	ldi	r20, 0x01	; 1
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 b0 03 	call	0x760	; 0x760 <updateDisplay>
	if (route[0] == '_'){
    10b4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <route>
    10b8:	8f 35       	cpi	r24, 0x5F	; 95
    10ba:	61 f4       	brne	.+24     	; 0x10d4 <parcours+0x44>
		memset(route,0,sizeof route);
    10bc:	84 e1       	ldi	r24, 0x14	; 20
    10be:	e4 e1       	ldi	r30, 0x14	; 20
    10c0:	f1 e0       	ldi	r31, 0x01	; 1
    10c2:	df 01       	movw	r26, r30
    10c4:	1d 92       	st	X+, r1
    10c6:	8a 95       	dec	r24
    10c8:	e9 f7       	brne	.-6      	; 0x10c4 <parcours+0x34>
		parcoursSearch(&communications);
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	0e 94 47 07 	call	0xe8e	; 0xe8e <parcoursSearch>
    10d2:	05 c0       	rjmp	.+10     	; 0x10de <parcours+0x4e>
	} 
	else 
	{
		parcoursRun(way, communications);
    10d4:	69 81       	ldd	r22, Y+1	; 0x01
    10d6:	7a 81       	ldd	r23, Y+2	; 0x02
    10d8:	81 2f       	mov	r24, r17
    10da:	0e 94 01 08 	call	0x1002	; 0x1002 <parcoursRun>
	} 
	return 0;
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	08 95       	ret

000010ee <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(char *a, char *b) {
    int temp = *a;
    10ee:	fc 01       	movw	r30, r24
    10f0:	20 81       	ld	r18, Z
    *a = *b;
    10f2:	fb 01       	movw	r30, r22
    10f4:	30 81       	ld	r19, Z
    10f6:	fc 01       	movw	r30, r24
    10f8:	30 83       	st	Z, r19
    *b = temp;
    10fa:	fb 01       	movw	r30, r22
    10fc:	20 83       	st	Z, r18
    10fe:	08 95       	ret

00001100 <bubbleSort>:
}

void bubbleSort(char arr[],char orderY[], int n) {
    1100:	8f 92       	push	r8
    1102:	9f 92       	push	r9
    1104:	af 92       	push	r10
    1106:	bf 92       	push	r11
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	8c 01       	movw	r16, r24
    111a:	5b 01       	movw	r10, r22
    111c:	6a 01       	movw	r12, r20
    for (int i = 0; i < n - 1; i++) {
    111e:	e1 2c       	mov	r14, r1
    1120:	f1 2c       	mov	r15, r1
    1122:	28 c0       	rjmp	.+80     	; 0x1174 <bubbleSort+0x74>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
    1124:	f8 01       	movw	r30, r16
    1126:	ec 0f       	add	r30, r28
    1128:	fd 1f       	adc	r31, r29
    112a:	90 81       	ld	r25, Z
    112c:	4e 01       	movw	r8, r28
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	88 1a       	sub	r8, r24
    1132:	98 0a       	sbc	r9, r24
    1134:	d8 01       	movw	r26, r16
    1136:	a8 0d       	add	r26, r8
    1138:	b9 1d       	adc	r27, r9
    113a:	8c 91       	ld	r24, X
    113c:	89 17       	cp	r24, r25
    113e:	60 f4       	brcc	.+24     	; 0x1158 <bubbleSort+0x58>
                swap(&arr[j], &arr[j + 1]);
    1140:	bd 01       	movw	r22, r26
    1142:	cf 01       	movw	r24, r30
    1144:	0e 94 77 08 	call	0x10ee	; 0x10ee <swap>
                swap(&orderY[j], &orderY[j + 1]);
    1148:	b5 01       	movw	r22, r10
    114a:	68 0d       	add	r22, r8
    114c:	79 1d       	adc	r23, r9
    114e:	c5 01       	movw	r24, r10
    1150:	8c 0f       	add	r24, r28
    1152:	9d 1f       	adc	r25, r29
    1154:	0e 94 77 08 	call	0x10ee	; 0x10ee <swap>
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
    1158:	21 96       	adiw	r28, 0x01	; 1
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <bubbleSort+0x60>
    115c:	c0 e0       	ldi	r28, 0x00	; 0
    115e:	d0 e0       	ldi	r29, 0x00	; 0
    1160:	c6 01       	movw	r24, r12
    1162:	8e 19       	sub	r24, r14
    1164:	9f 09       	sbc	r25, r15
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	c8 17       	cp	r28, r24
    116a:	d9 07       	cpc	r29, r25
    116c:	dc f2       	brlt	.-74     	; 0x1124 <bubbleSort+0x24>
    *a = *b;
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	e8 1a       	sub	r14, r24
    1172:	f8 0a       	sbc	r15, r24
    1174:	c6 01       	movw	r24, r12
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	e8 16       	cp	r14, r24
    117a:	f9 06       	cpc	r15, r25
    117c:	7c f3       	brlt	.-34     	; 0x115c <bubbleSort+0x5c>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	bf 90       	pop	r11
    1190:	af 90       	pop	r10
    1192:	9f 90       	pop	r9
    1194:	8f 90       	pop	r8
    1196:	08 95       	ret

00001198 <drive>:



void drive(int junctions, piRobot *robot, Communications *myCom)
{
    1198:	af 92       	push	r10
    119a:	bf 92       	push	r11
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	5c 01       	movw	r10, r24
    11ae:	6b 01       	movw	r12, r22
    11b0:	7a 01       	movw	r14, r20
	Junctions situatie;
	motorControl('S');
    11b2:	83 e5       	ldi	r24, 0x53	; 83
    11b4:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
	int driving = 1;
	int count = 0;
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	10 e0       	ldi	r17, 0x00	; 0

void drive(int junctions, piRobot *robot, Communications *myCom)
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
    11bc:	c1 e0       	ldi	r28, 0x01	; 1
    11be:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;
	while(driving) {
    11c0:	5a c0       	rjmp	.+180    	; 0x1276 <drive+0xde>
		situatie = lineType();
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lineType>
		//clear();
		switch (situatie) {
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	51 f0       	breq	.+20     	; 0x11de <drive+0x46>
    11ca:	28 f0       	brcs	.+10     	; 0x11d6 <drive+0x3e>
    11cc:	83 50       	subi	r24, 0x03	; 3
    11ce:	86 30       	cpi	r24, 0x06	; 6
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <drive+0x3c>
    11d2:	51 c0       	rjmp	.+162    	; 0x1276 <drive+0xde>
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <drive+0x46>
			case Barcode: // end of parcour
			//motorControl('N');
			break;
			
			case Straight:
			motorControl('S');
    11d6:	83 e5       	ldi	r24, 0x53	; 83
    11d8:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
			break;
    11dc:	4c c0       	rjmp	.+152    	; 0x1276 <drive+0xde>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
    11de:	0f 5f       	subi	r16, 0xFF	; 255
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
				switch(robot->direction)
    11e2:	f6 01       	movw	r30, r12
    11e4:	84 81       	ldd	r24, Z+4	; 0x04
    11e6:	8e 34       	cpi	r24, 0x4E	; 78
    11e8:	f1 f0       	breq	.+60     	; 0x1226 <drive+0x8e>
    11ea:	18 f4       	brcc	.+6      	; 0x11f2 <drive+0x5a>
    11ec:	85 34       	cpi	r24, 0x45	; 69
    11ee:	81 f0       	breq	.+32     	; 0x1210 <drive+0x78>
    11f0:	2f c0       	rjmp	.+94     	; 0x1250 <drive+0xb8>
    11f2:	83 35       	cpi	r24, 0x53	; 83
    11f4:	19 f1       	breq	.+70     	; 0x123c <drive+0xa4>
    11f6:	87 35       	cpi	r24, 0x57	; 87
    11f8:	59 f5       	brne	.+86     	; 0x1250 <drive+0xb8>
				{
					case 'W':
					robot->posX++;
    11fa:	f6 01       	movw	r30, r12
    11fc:	80 81       	ld	r24, Z
    11fe:	91 81       	ldd	r25, Z+1	; 0x01
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	91 83       	std	Z+1, r25	; 0x01
    1204:	80 83       	st	Z, r24
					myCom->locationx = robot->posX;
    1206:	f7 01       	movw	r30, r14
    1208:	e2 59       	subi	r30, 0x92	; 146
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 83       	st	Z, r24
					break;
    120e:	20 c0       	rjmp	.+64     	; 0x1250 <drive+0xb8>
					case 'E':
					robot->posX--;
    1210:	f6 01       	movw	r30, r12
    1212:	80 81       	ld	r24, Z
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	91 83       	std	Z+1, r25	; 0x01
    121a:	80 83       	st	Z, r24
					myCom->locationx = robot->posX;
    121c:	f7 01       	movw	r30, r14
    121e:	e2 59       	subi	r30, 0x92	; 146
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 83       	st	Z, r24
					break;
    1224:	15 c0       	rjmp	.+42     	; 0x1250 <drive+0xb8>
					case 'N':
					robot->posY++;
    1226:	f6 01       	movw	r30, r12
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	93 83       	std	Z+3, r25	; 0x03
    1230:	82 83       	std	Z+2, r24	; 0x02
					myCom->locationy = robot->posY;
    1232:	f7 01       	movw	r30, r14
    1234:	e1 59       	subi	r30, 0x91	; 145
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 83       	st	Z, r24
					break;
    123a:	0a c0       	rjmp	.+20     	; 0x1250 <drive+0xb8>
					case 'S':
					robot->posY--;
    123c:	f6 01       	movw	r30, r12
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	93 83       	std	Z+3, r25	; 0x03
    1246:	82 83       	std	Z+2, r24	; 0x02
					myCom->locationy = robot->posY;
    1248:	f7 01       	movw	r30, r14
    124a:	e1 59       	subi	r30, 0x91	; 145
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 83       	st	Z, r24
					break;
				}
				motorControl('S');
    1250:	83 e5       	ldi	r24, 0x53	; 83
    1252:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
				if(count == junctions)
    1256:	0a 15       	cp	r16, r10
    1258:	1b 05       	cpc	r17, r11
    125a:	29 f4       	brne	.+10     	; 0x1266 <drive+0xce>
				{
					motorControl('P');
    125c:	80 e5       	ldi	r24, 0x50	; 80
    125e:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					driving = 0;
    1262:	c0 e0       	ldi	r28, 0x00	; 0
    1264:	d0 e0       	ldi	r29, 0x00	; 0
				}
				myCom->Update(myCom);
    1266:	f7 01       	movw	r30, r14
    1268:	ef 58       	subi	r30, 0x8F	; 143
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	01 90       	ld	r0, Z+
    126e:	f0 81       	ld	r31, Z
    1270:	e0 2d       	mov	r30, r0
    1272:	c7 01       	movw	r24, r14
    1274:	09 95       	icall
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
	int count = 0;
	while(driving) {
    1276:	20 97       	sbiw	r28, 0x00	; 0
    1278:	09 f0       	breq	.+2      	; 0x127c <drive+0xe4>
    127a:	a3 cf       	rjmp	.-186    	; 0x11c2 <drive+0x2a>
			
			
		}
		
	}
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	08 95       	ret

00001292 <waitForTurn>:

void waitForTurn()
{
    1292:	cf 93       	push	r28
	Junctions line;
	line = lineType();
    1294:	0e 94 28 06 	call	0xc50	; 0xc50 <lineType>
    1298:	c8 2f       	mov	r28, r24
    129a:	8f e0       	ldi	r24, 0x0F	; 15
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <waitForTurn+0x18>
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
	{
		line  = lineType();
    12a4:	0e 94 28 06 	call	0xc50	; 0xc50 <lineType>
    12a8:	c8 2f       	mov	r28, r24
void waitForTurn()
{
	Junctions line;
	line = lineType();
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
    12aa:	c1 11       	cpse	r28, r1
    12ac:	fb cf       	rjmp	.-10     	; 0x12a4 <waitForTurn+0x12>
	{
		line  = lineType();
	}
	motorControl('N');
    12ae:	8e e4       	ldi	r24, 0x4E	; 78
    12b0:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
}
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <turnRobot>:

void turnRobot(char direction, piRobot *myRobot)
{
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	c8 2f       	mov	r28, r24
    12c4:	8b 01       	movw	r16, r22
    int changing = 1;
    12c6:	ee 24       	eor	r14, r14
    12c8:	e3 94       	inc	r14
    12ca:	f1 2c       	mov	r15, r1

    while(changing==1)
    12cc:	9a c0       	rjmp	.+308    	; 0x1402 <turnRobot+0x14a>
    {
		
        switch(myRobot->direction)
    12ce:	f8 01       	movw	r30, r16
    12d0:	84 81       	ldd	r24, Z+4	; 0x04
    12d2:	8e 34       	cpi	r24, 0x4E	; 78
    12d4:	59 f0       	breq	.+22     	; 0x12ec <turnRobot+0x34>
    12d6:	18 f4       	brcc	.+6      	; 0x12de <turnRobot+0x26>
    12d8:	85 34       	cpi	r24, 0x45	; 69
    12da:	51 f1       	breq	.+84     	; 0x1330 <turnRobot+0x78>
    12dc:	8c c0       	rjmp	.+280    	; 0x13f6 <turnRobot+0x13e>
    12de:	83 35       	cpi	r24, 0x53	; 83
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <turnRobot+0x2c>
    12e2:	48 c0       	rjmp	.+144    	; 0x1374 <turnRobot+0xbc>
    12e4:	87 35       	cpi	r24, 0x57	; 87
    12e6:	09 f4       	brne	.+2      	; 0x12ea <turnRobot+0x32>
    12e8:	66 c0       	rjmp	.+204    	; 0x13b6 <turnRobot+0xfe>
    12ea:	85 c0       	rjmp	.+266    	; 0x13f6 <turnRobot+0x13e>
        {
            case 'N':
                if(direction == 'E')
    12ec:	c5 34       	cpi	r28, 0x45	; 69
    12ee:	49 f4       	brne	.+18     	; 0x1302 <turnRobot+0x4a>
                {
                    motorControl('R');
    12f0:	82 e5       	ldi	r24, 0x52	; 82
    12f2:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    12f6:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'E';
    12fa:	85 e4       	ldi	r24, 0x45	; 69
    12fc:	f8 01       	movw	r30, r16
    12fe:	84 83       	std	Z+4, r24	; 0x04
    1300:	7a c0       	rjmp	.+244    	; 0x13f6 <turnRobot+0x13e>
                }
                else if(direction == 'W')
    1302:	c7 35       	cpi	r28, 0x57	; 87
    1304:	49 f4       	brne	.+18     	; 0x1318 <turnRobot+0x60>
                {
                    motorControl('L');
    1306:	8c e4       	ldi	r24, 0x4C	; 76
    1308:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    130c:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'W';
    1310:	87 e5       	ldi	r24, 0x57	; 87
    1312:	f8 01       	movw	r30, r16
    1314:	84 83       	std	Z+4, r24	; 0x04
    1316:	6f c0       	rjmp	.+222    	; 0x13f6 <turnRobot+0x13e>
                }
                else if(direction == 'S')
    1318:	c3 35       	cpi	r28, 0x53	; 83
    131a:	09 f0       	breq	.+2      	; 0x131e <turnRobot+0x66>
    131c:	6c c0       	rjmp	.+216    	; 0x13f6 <turnRobot+0x13e>
                {
                    motorControl('T');
    131e:	84 e5       	ldi	r24, 0x54	; 84
    1320:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    1324:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'S';
    1328:	83 e5       	ldi	r24, 0x53	; 83
    132a:	f8 01       	movw	r30, r16
    132c:	84 83       	std	Z+4, r24	; 0x04
    132e:	63 c0       	rjmp	.+198    	; 0x13f6 <turnRobot+0x13e>
                }
                break;
            case 'E':
                if(direction == 'S')
    1330:	c3 35       	cpi	r28, 0x53	; 83
    1332:	49 f4       	brne	.+18     	; 0x1346 <turnRobot+0x8e>
                {
                    motorControl('R');
    1334:	82 e5       	ldi	r24, 0x52	; 82
    1336:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    133a:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'S';
    133e:	83 e5       	ldi	r24, 0x53	; 83
    1340:	f8 01       	movw	r30, r16
    1342:	84 83       	std	Z+4, r24	; 0x04
    1344:	58 c0       	rjmp	.+176    	; 0x13f6 <turnRobot+0x13e>
                }
                else if(direction == 'W')
    1346:	c7 35       	cpi	r28, 0x57	; 87
    1348:	49 f4       	brne	.+18     	; 0x135c <turnRobot+0xa4>
                {
                    motorControl('L');
    134a:	8c e4       	ldi	r24, 0x4C	; 76
    134c:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    1350:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'W';
    1354:	87 e5       	ldi	r24, 0x57	; 87
    1356:	f8 01       	movw	r30, r16
    1358:	84 83       	std	Z+4, r24	; 0x04
    135a:	4d c0       	rjmp	.+154    	; 0x13f6 <turnRobot+0x13e>
                }
                else if(direction == 'S')
    135c:	c3 35       	cpi	r28, 0x53	; 83
    135e:	09 f0       	breq	.+2      	; 0x1362 <turnRobot+0xaa>
    1360:	4a c0       	rjmp	.+148    	; 0x13f6 <turnRobot+0x13e>
                {
                    motorControl('T');
    1362:	84 e5       	ldi	r24, 0x54	; 84
    1364:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    1368:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'S';
    136c:	83 e5       	ldi	r24, 0x53	; 83
    136e:	f8 01       	movw	r30, r16
    1370:	84 83       	std	Z+4, r24	; 0x04
    1372:	41 c0       	rjmp	.+130    	; 0x13f6 <turnRobot+0x13e>
                }
                break;
            case 'S':
                if(direction == 'W')
    1374:	c7 35       	cpi	r28, 0x57	; 87
    1376:	49 f4       	brne	.+18     	; 0x138a <turnRobot+0xd2>
                {
                    motorControl('R');
    1378:	82 e5       	ldi	r24, 0x52	; 82
    137a:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    137e:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'W';
    1382:	87 e5       	ldi	r24, 0x57	; 87
    1384:	f8 01       	movw	r30, r16
    1386:	84 83       	std	Z+4, r24	; 0x04
    1388:	36 c0       	rjmp	.+108    	; 0x13f6 <turnRobot+0x13e>
                }
                else if(direction == 'E')
    138a:	c5 34       	cpi	r28, 0x45	; 69
    138c:	49 f4       	brne	.+18     	; 0x13a0 <turnRobot+0xe8>
                {
                    motorControl('L');
    138e:	8c e4       	ldi	r24, 0x4C	; 76
    1390:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    1394:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'E';
    1398:	85 e4       	ldi	r24, 0x45	; 69
    139a:	f8 01       	movw	r30, r16
    139c:	84 83       	std	Z+4, r24	; 0x04
    139e:	2b c0       	rjmp	.+86     	; 0x13f6 <turnRobot+0x13e>
                }
                else if(direction == 'N')
    13a0:	ce 34       	cpi	r28, 0x4E	; 78
    13a2:	49 f5       	brne	.+82     	; 0x13f6 <turnRobot+0x13e>
                {
                    motorControl('T');
    13a4:	84 e5       	ldi	r24, 0x54	; 84
    13a6:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    13aa:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'N';
    13ae:	8e e4       	ldi	r24, 0x4E	; 78
    13b0:	f8 01       	movw	r30, r16
    13b2:	84 83       	std	Z+4, r24	; 0x04
    13b4:	20 c0       	rjmp	.+64     	; 0x13f6 <turnRobot+0x13e>
                }
                break;
            case 'W':
                if(direction == 'N')
    13b6:	ce 34       	cpi	r28, 0x4E	; 78
    13b8:	49 f4       	brne	.+18     	; 0x13cc <turnRobot+0x114>
                {
					
                    motorControl('R');
    13ba:	82 e5       	ldi	r24, 0x52	; 82
    13bc:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    13c0:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'N';
    13c4:	8e e4       	ldi	r24, 0x4E	; 78
    13c6:	f8 01       	movw	r30, r16
    13c8:	84 83       	std	Z+4, r24	; 0x04
    13ca:	15 c0       	rjmp	.+42     	; 0x13f6 <turnRobot+0x13e>
                }
                else if(direction == 'S')
    13cc:	c3 35       	cpi	r28, 0x53	; 83
    13ce:	49 f4       	brne	.+18     	; 0x13e2 <turnRobot+0x12a>
                {
                    motorControl('L');
    13d0:	8c e4       	ldi	r24, 0x4C	; 76
    13d2:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    13d6:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'S';
    13da:	83 e5       	ldi	r24, 0x53	; 83
    13dc:	f8 01       	movw	r30, r16
    13de:	84 83       	std	Z+4, r24	; 0x04
    13e0:	0a c0       	rjmp	.+20     	; 0x13f6 <turnRobot+0x13e>
                }
                else if(direction == 'E')
    13e2:	c5 34       	cpi	r28, 0x45	; 69
    13e4:	41 f4       	brne	.+16     	; 0x13f6 <turnRobot+0x13e>
                {
                    motorControl('T');
    13e6:	84 e5       	ldi	r24, 0x54	; 84
    13e8:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
					waitForTurn();
    13ec:	0e 94 49 09 	call	0x1292	; 0x1292 <waitForTurn>
                    myRobot->direction = 'E';
    13f0:	85 e4       	ldi	r24, 0x45	; 69
    13f2:	f8 01       	movw	r30, r16
    13f4:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
		
				if(myRobot->direction == direction)
    13f6:	f8 01       	movw	r30, r16
    13f8:	84 81       	ldd	r24, Z+4	; 0x04
    13fa:	c8 13       	cpse	r28, r24
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <turnRobot+0x14a>
				{
					changing = 0;
    13fe:	e1 2c       	mov	r14, r1
    1400:	f1 2c       	mov	r15, r1

void turnRobot(char direction, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
    1402:	f1 e0       	ldi	r31, 0x01	; 1
    1404:	ef 16       	cp	r14, r31
    1406:	f1 04       	cpc	r15, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <turnRobot+0x154>
    140a:	61 cf       	rjmp	.-318    	; 0x12ce <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	08 95       	ret

00001418 <moveX>:


void moveX(int orderPos, piRobot *robot, Communications *myCom)
{
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
	
    int junctions;
	
	
    if(robot->posX != orderPos)
    1424:	fb 01       	movw	r30, r22
    1426:	20 81       	ld	r18, Z
    1428:	31 81       	ldd	r19, Z+1	; 0x01
    142a:	28 17       	cp	r18, r24
    142c:	39 07       	cpc	r19, r25
    142e:	d9 f0       	breq	.+54     	; 0x1466 <moveX+0x4e>
    1430:	7a 01       	movw	r14, r20
    1432:	eb 01       	movw	r28, r22
    1434:	8c 01       	movw	r16, r24
    {
		
        if(robot->posX < orderPos)
    1436:	28 17       	cp	r18, r24
    1438:	39 07       	cpc	r19, r25
    143a:	54 f4       	brge	.+20     	; 0x1450 <moveX+0x38>
        {
            turnRobot('W', robot);
    143c:	87 e5       	ldi	r24, 0x57	; 87
    143e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <turnRobot>
            junctions = orderPos-robot->posX;
    1442:	88 81       	ld	r24, Y
    1444:	99 81       	ldd	r25, Y+1	; 0x01
    1446:	98 01       	movw	r18, r16
    1448:	28 1b       	sub	r18, r24
    144a:	39 0b       	sbc	r19, r25
    144c:	c9 01       	movw	r24, r18
    144e:	07 c0       	rjmp	.+14     	; 0x145e <moveX+0x46>
        }
        else{
            turnRobot('E', robot);
    1450:	85 e4       	ldi	r24, 0x45	; 69
    1452:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <turnRobot>
            junctions = robot->posX - orderPos;
    1456:	88 81       	ld	r24, Y
    1458:	99 81       	ldd	r25, Y+1	; 0x01
    145a:	80 1b       	sub	r24, r16
    145c:	91 0b       	sbc	r25, r17
        }
		drive(junctions, robot, myCom);
    145e:	a7 01       	movw	r20, r14
    1460:	be 01       	movw	r22, r28
    1462:	0e 94 cc 08 	call	0x1198	; 0x1198 <drive>
        
		
        

    }
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	08 95       	ret

00001474 <moveY>:

void moveY(int orderPos, piRobot *robot, Communications *myCom)
{
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
    1480:	fb 01       	movw	r30, r22
    1482:	22 81       	ldd	r18, Z+2	; 0x02
    1484:	33 81       	ldd	r19, Z+3	; 0x03
    1486:	28 17       	cp	r18, r24
    1488:	39 07       	cpc	r19, r25
    148a:	d9 f0       	breq	.+54     	; 0x14c2 <moveY+0x4e>
    148c:	7a 01       	movw	r14, r20
    148e:	eb 01       	movw	r28, r22
    1490:	8c 01       	movw	r16, r24
    {
        if(robot->posY < orderPos)
    1492:	28 17       	cp	r18, r24
    1494:	39 07       	cpc	r19, r25
    1496:	54 f4       	brge	.+20     	; 0x14ac <moveY+0x38>
        {
            turnRobot('N', robot);
    1498:	8e e4       	ldi	r24, 0x4E	; 78
    149a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <turnRobot>
            junctions = orderPos-robot->posY;
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	9b 81       	ldd	r25, Y+3	; 0x03
    14a2:	98 01       	movw	r18, r16
    14a4:	28 1b       	sub	r18, r24
    14a6:	39 0b       	sbc	r19, r25
    14a8:	c9 01       	movw	r24, r18
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <moveY+0x46>
        }
        else{
            turnRobot('S', robot);
    14ac:	83 e5       	ldi	r24, 0x53	; 83
    14ae:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <turnRobot>
            junctions = robot->posY - orderPos;
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	80 1b       	sub	r24, r16
    14b8:	91 0b       	sbc	r25, r17
        }

            drive(junctions, robot, myCom);
    14ba:	a7 01       	movw	r20, r14
    14bc:	be 01       	movw	r22, r28
    14be:	0e 94 cc 08 	call	0x1198	; 0x1198 <drive>
        

    }
}
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	08 95       	ret

000014d0 <warehouse>:


void warehouse(objective objective, Communications *myCom)
{
    14d0:	4f 92       	push	r4
    14d2:	5f 92       	push	r5
    14d4:	6f 92       	push	r6
    14d6:	7f 92       	push	r7
    14d8:	8f 92       	push	r8
    14da:	9f 92       	push	r9
    14dc:	af 92       	push	r10
    14de:	bf 92       	push	r11
    14e0:	cf 92       	push	r12
    14e2:	df 92       	push	r13
    14e4:	ef 92       	push	r14
    14e6:	ff 92       	push	r15
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	e7 97       	sbiw	r28, 0x37	; 55
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	f8 2e       	mov	r15, r24
    1502:	8b 01       	movw	r16, r22
 piRobot robot;
 robot.direction = 'W';
    1504:	87 e5       	ldi	r24, 0x57	; 87
    1506:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = -1;
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	9f ef       	ldi	r25, 0xFF	; 255
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
 robot.posY = 0;
    1510:	1c 82       	std	Y+4, r1	; 0x04
    1512:	1b 82       	std	Y+3, r1	; 0x03
 
 char orderX[25];
 char orderY[25];

int arraySize = sizeof(myCom->Orderarx) / sizeof(myCom->Orderary);
for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	18 c0       	rjmp	.+48     	; 0x154a <warehouse+0x7a>
{
	orderX[i] = myCom->Orderarx[i];
    151a:	d8 01       	movw	r26, r16
    151c:	a8 0f       	add	r26, r24
    151e:	b9 1f       	adc	r27, r25
    1520:	fd 01       	movw	r30, r26
    1522:	ee 5a       	subi	r30, 0xAE	; 174
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	20 81       	ld	r18, Z
    1528:	e6 e0       	ldi	r30, 0x06	; 6
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	ec 0f       	add	r30, r28
    152e:	fd 1f       	adc	r31, r29
    1530:	e8 0f       	add	r30, r24
    1532:	f9 1f       	adc	r31, r25
    1534:	20 83       	st	Z, r18
	orderY[i] = myCom->Orderary[i];
    1536:	d9 96       	adiw	r26, 0x39	; 57
    1538:	2c 91       	ld	r18, X
    153a:	ef e1       	ldi	r30, 0x1F	; 31
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	ec 0f       	add	r30, r28
    1540:	fd 1f       	adc	r31, r29
    1542:	e8 0f       	add	r30, r24
    1544:	f9 1f       	adc	r31, r25
    1546:	20 83       	st	Z, r18
 
 char orderX[25];
 char orderY[25];

int arraySize = sizeof(myCom->Orderarx) / sizeof(myCom->Orderary);
for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	18 16       	cp	r1, r24
    154c:	19 06       	cpc	r1, r25
    154e:	2c f7       	brge	.-54     	; 0x151a <warehouse+0x4a>
{
	orderX[i] = myCom->Orderarx[i];
	orderY[i] = myCom->Orderary[i];
}
    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
    1550:	41 e0       	ldi	r20, 0x01	; 1
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	be 01       	movw	r22, r28
    1556:	61 5e       	subi	r22, 0xE1	; 225
    1558:	7f 4f       	sbci	r23, 0xFF	; 255
    155a:	ce 01       	movw	r24, r28
    155c:	06 96       	adiw	r24, 0x06	; 6
    155e:	0e 94 80 08 	call	0x1100	; 0x1100 <bubbleSort>
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
    1562:	ff 20       	and	r15, r15
    1564:	09 f4       	brne	.+2      	; 0x1568 <warehouse+0x98>
    1566:	78 c0       	rjmp	.+240    	; 0x1658 <warehouse+0x188>
    1568:	8e c0       	rjmp	.+284    	; 0x1686 <warehouse+0x1b6>
	{
		for(int locations = 0; locations<arraySize;locations++)
		{
			float completed = locations;
    156a:	b7 01       	movw	r22, r14
    156c:	0f 2c       	mov	r0, r15
    156e:	00 0c       	add	r0, r0
    1570:	88 0b       	sbc	r24, r24
    1572:	99 0b       	sbc	r25, r25
    1574:	0e 94 43 0c 	call	0x1886	; 0x1886 <__floatsisf>
    1578:	4b 01       	movw	r8, r22
    157a:	5c 01       	movw	r10, r24
			float total = arraySize;
		
		
			moveX(orderX[locations], &robot, myCom);
    157c:	0f 2e       	mov	r0, r31
    157e:	f6 e0       	ldi	r31, 0x06	; 6
    1580:	cf 2e       	mov	r12, r31
    1582:	d1 2c       	mov	r13, r1
    1584:	f0 2d       	mov	r31, r0
    1586:	cc 0e       	add	r12, r28
    1588:	dd 1e       	adc	r13, r29
    158a:	ce 0c       	add	r12, r14
    158c:	df 1c       	adc	r13, r15
    158e:	f6 01       	movw	r30, r12
    1590:	80 81       	ld	r24, Z
    1592:	a8 01       	movw	r20, r16
    1594:	be 01       	movw	r22, r28
    1596:	6f 5f       	subi	r22, 0xFF	; 255
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <moveX>
			robot.posX = orderX[locations];
    15a0:	f6 01       	movw	r30, r12
    15a2:	80 81       	ld	r24, Z
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
			moveY(orderY[locations], &robot, myCom);
    15aa:	0f 2e       	mov	r0, r31
    15ac:	ff e1       	ldi	r31, 0x1F	; 31
    15ae:	cf 2e       	mov	r12, r31
    15b0:	d1 2c       	mov	r13, r1
    15b2:	f0 2d       	mov	r31, r0
    15b4:	cc 0e       	add	r12, r28
    15b6:	dd 1e       	adc	r13, r29
    15b8:	ce 0c       	add	r12, r14
    15ba:	df 1c       	adc	r13, r15
    15bc:	f6 01       	movw	r30, r12
    15be:	80 81       	ld	r24, Z
    15c0:	a8 01       	movw	r20, r16
    15c2:	be 01       	movw	r22, r28
    15c4:	6f 5f       	subi	r22, 0xFF	; 255
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 3a 0a 	call	0x1474	; 0x1474 <moveY>
			robot.posY = orderY[locations];
    15ce:	f6 01       	movw	r30, r12
    15d0:	80 81       	ld	r24, Z
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	9c 83       	std	Y+4, r25	; 0x04
    15d6:	8b 83       	std	Y+3, r24	; 0x03
    15d8:	88 ee       	ldi	r24, 0xE8	; 232
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
			delay(1000);//wait 1 second
			
			myCom->batterylvl = batteryPercentage();
    15e0:	0e 94 8e 03 	call	0x71c	; 0x71c <batteryPercentage>
    15e4:	68 01       	movw	r12, r16
    15e6:	fc e6       	ldi	r31, 0x6C	; 108
    15e8:	cf 0e       	add	r12, r31
    15ea:	d1 1c       	adc	r13, r1
    15ec:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fixunssfsi>
    15f0:	f6 01       	movw	r30, r12
    15f2:	60 83       	st	Z, r22
			myCom->magprocess = (((completed+1)/total)*100);
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	c5 01       	movw	r24, r10
    15fe:	b4 01       	movw	r22, r8
    1600:	0e 94 9f 0b 	call	0x173e	; 0x173e <__addsf3>
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	48 ec       	ldi	r20, 0xC8	; 200
    160a:	52 e4       	ldi	r21, 0x42	; 66
    160c:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3>
    1610:	4b 01       	movw	r8, r22
    1612:	5c 01       	movw	r10, r24
    1614:	68 01       	movw	r12, r16
    1616:	fd e6       	ldi	r31, 0x6D	; 109
    1618:	cf 0e       	add	r12, r31
    161a:	d1 1c       	adc	r13, r1
    161c:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fixunssfsi>
    1620:	f6 01       	movw	r30, r12
    1622:	60 83       	st	Z, r22
			myCom->Update(myCom);
    1624:	34 96       	adiw	r30, 0x04	; 4
    1626:	01 90       	ld	r0, Z+
    1628:	f0 81       	ld	r31, Z
    162a:	e0 2d       	mov	r30, r0
    162c:	c8 01       	movw	r24, r16
    162e:	09 95       	icall
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
    1630:	0e 94 8e 03 	call	0x71c	; 0x71c <batteryPercentage>
    1634:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fixsfsi>
    1638:	2b 01       	movw	r4, r22
    163a:	3c 01       	movw	r6, r24
    163c:	c5 01       	movw	r24, r10
    163e:	b4 01       	movw	r22, r8
    1640:	0e 94 0b 0c 	call	0x1816	; 0x1816 <__fixsfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	42 e0       	ldi	r20, 0x02	; 2
    164a:	b2 01       	movw	r22, r4
    164c:	0e 94 b0 03 	call	0x760	; 0x760 <updateDisplay>
}
    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
	{
		for(int locations = 0; locations<arraySize;locations++)
    1650:	ff ef       	ldi	r31, 0xFF	; 255
    1652:	ef 1a       	sub	r14, r31
    1654:	ff 0a       	sbc	r15, r31
    1656:	02 c0       	rjmp	.+4      	; 0x165c <warehouse+0x18c>
    1658:	e1 2c       	mov	r14, r1
    165a:	f1 2c       	mov	r15, r1
    165c:	1e 14       	cp	r1, r14
    165e:	1f 04       	cpc	r1, r15
    1660:	0c f0       	brlt	.+2      	; 0x1664 <warehouse+0x194>
    1662:	83 cf       	rjmp	.-250    	; 0x156a <warehouse+0x9a>
			myCom->batterylvl = batteryPercentage();
			myCom->magprocess = (((completed+1)/total)*100);
			myCom->Update(myCom);
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
		}
			moveY(0, &robot, myCom);
    1664:	a8 01       	movw	r20, r16
    1666:	be 01       	movw	r22, r28
    1668:	6f 5f       	subi	r22, 0xFF	; 255
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 3a 0a 	call	0x1474	; 0x1474 <moveY>
			moveX(0, &robot, myCom);
    1674:	a8 01       	movw	r20, r16
    1676:	be 01       	movw	r22, r28
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 0c 0a 	call	0x1418	; 0x1418 <moveX>
    1684:	44 c0       	rjmp	.+136    	; 0x170e <warehouse+0x23e>
	}
	else
	{
		static int charged = 0;
		if(charged == 0)
    1686:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <charged.2340>
    168a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <charged.2340+0x1>
    168e:	89 2b       	or	r24, r25
    1690:	29 f5       	brne	.+74     	; 0x16dc <warehouse+0x20c>
		{
			drive(1, &robot, myCom);
    1692:	a8 01       	movw	r20, r16
    1694:	be 01       	movw	r22, r28
    1696:	6f 5f       	subi	r22, 0xFF	; 255
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 cc 08 	call	0x1198	; 0x1198 <drive>
			motorControl('R');
    16a2:	82 e5       	ldi	r24, 0x52	; 82
    16a4:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
			drive(3, &robot, myCom);
    16a8:	a8 01       	movw	r20, r16
    16aa:	be 01       	movw	r22, r28
    16ac:	6f 5f       	subi	r22, 0xFF	; 255
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 cc 08 	call	0x1198	; 0x1198 <drive>
			motorControl('R');
    16b8:	82 e5       	ldi	r24, 0x52	; 82
    16ba:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
			drive(1, &robot, myCom);
    16be:	a8 01       	movw	r20, r16
    16c0:	be 01       	movw	r22, r28
    16c2:	6f 5f       	subi	r22, 0xFF	; 255
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 cc 08 	call	0x1198	; 0x1198 <drive>
			charged = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <charged.2340+0x1>
    16d6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <charged.2340>
    16da:	19 c0       	rjmp	.+50     	; 0x170e <warehouse+0x23e>
		}
		else
		{
			motorControl('T');
    16dc:	84 e5       	ldi	r24, 0x54	; 84
    16de:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
			drive(1, &robot, myCom);
    16e2:	a8 01       	movw	r20, r16
    16e4:	be 01       	movw	r22, r28
    16e6:	6f 5f       	subi	r22, 0xFF	; 255
    16e8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	0e 94 cc 08 	call	0x1198	; 0x1198 <drive>
			motorControl('L');
    16f2:	8c e4       	ldi	r24, 0x4C	; 76
    16f4:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
			drive(3, &robot, myCom);
    16f8:	a8 01       	movw	r20, r16
    16fa:	be 01       	movw	r22, r28
    16fc:	6f 5f       	subi	r22, 0xFF	; 255
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 cc 08 	call	0x1198	; 0x1198 <drive>
			motorControl('L');
    1708:	8c e4       	ldi	r24, 0x4C	; 76
    170a:	0e 94 15 05 	call	0xa2a	; 0xa2a <motorControl>
			
		}
		
	}
}
    170e:	e7 96       	adiw	r28, 0x37	; 55
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	bf 90       	pop	r11
    172c:	af 90       	pop	r10
    172e:	9f 90       	pop	r9
    1730:	8f 90       	pop	r8
    1732:	7f 90       	pop	r7
    1734:	6f 90       	pop	r6
    1736:	5f 90       	pop	r5
    1738:	4f 90       	pop	r4
    173a:	08 95       	ret

0000173c <__subsf3>:
    173c:	50 58       	subi	r21, 0x80	; 128

0000173e <__addsf3>:
    173e:	bb 27       	eor	r27, r27
    1740:	aa 27       	eor	r26, r26
    1742:	0e 94 b6 0b 	call	0x176c	; 0x176c <__addsf3x>
    1746:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__fp_round>
    174a:	0e 94 87 0c 	call	0x190e	; 0x190e <__fp_pscA>
    174e:	38 f0       	brcs	.+14     	; 0x175e <__addsf3+0x20>
    1750:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_pscB>
    1754:	20 f0       	brcs	.+8      	; 0x175e <__addsf3+0x20>
    1756:	39 f4       	brne	.+14     	; 0x1766 <__addsf3+0x28>
    1758:	9f 3f       	cpi	r25, 0xFF	; 255
    175a:	19 f4       	brne	.+6      	; 0x1762 <__addsf3+0x24>
    175c:	26 f4       	brtc	.+8      	; 0x1766 <__addsf3+0x28>
    175e:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__fp_nan>
    1762:	0e f4       	brtc	.+2      	; 0x1766 <__addsf3+0x28>
    1764:	e0 95       	com	r30
    1766:	e7 fb       	bst	r30, 7
    1768:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_inf>

0000176c <__addsf3x>:
    176c:	e9 2f       	mov	r30, r25
    176e:	0e 94 a6 0c 	call	0x194c	; 0x194c <__fp_split3>
    1772:	58 f3       	brcs	.-42     	; 0x174a <__addsf3+0xc>
    1774:	ba 17       	cp	r27, r26
    1776:	62 07       	cpc	r22, r18
    1778:	73 07       	cpc	r23, r19
    177a:	84 07       	cpc	r24, r20
    177c:	95 07       	cpc	r25, r21
    177e:	20 f0       	brcs	.+8      	; 0x1788 <__addsf3x+0x1c>
    1780:	79 f4       	brne	.+30     	; 0x17a0 <__addsf3x+0x34>
    1782:	a6 f5       	brtc	.+104    	; 0x17ec <__addsf3x+0x80>
    1784:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__fp_zero>
    1788:	0e f4       	brtc	.+2      	; 0x178c <__addsf3x+0x20>
    178a:	e0 95       	com	r30
    178c:	0b 2e       	mov	r0, r27
    178e:	ba 2f       	mov	r27, r26
    1790:	a0 2d       	mov	r26, r0
    1792:	0b 01       	movw	r0, r22
    1794:	b9 01       	movw	r22, r18
    1796:	90 01       	movw	r18, r0
    1798:	0c 01       	movw	r0, r24
    179a:	ca 01       	movw	r24, r20
    179c:	a0 01       	movw	r20, r0
    179e:	11 24       	eor	r1, r1
    17a0:	ff 27       	eor	r31, r31
    17a2:	59 1b       	sub	r21, r25
    17a4:	99 f0       	breq	.+38     	; 0x17cc <__addsf3x+0x60>
    17a6:	59 3f       	cpi	r21, 0xF9	; 249
    17a8:	50 f4       	brcc	.+20     	; 0x17be <__addsf3x+0x52>
    17aa:	50 3e       	cpi	r21, 0xE0	; 224
    17ac:	68 f1       	brcs	.+90     	; 0x1808 <__addsf3x+0x9c>
    17ae:	1a 16       	cp	r1, r26
    17b0:	f0 40       	sbci	r31, 0x00	; 0
    17b2:	a2 2f       	mov	r26, r18
    17b4:	23 2f       	mov	r18, r19
    17b6:	34 2f       	mov	r19, r20
    17b8:	44 27       	eor	r20, r20
    17ba:	58 5f       	subi	r21, 0xF8	; 248
    17bc:	f3 cf       	rjmp	.-26     	; 0x17a4 <__addsf3x+0x38>
    17be:	46 95       	lsr	r20
    17c0:	37 95       	ror	r19
    17c2:	27 95       	ror	r18
    17c4:	a7 95       	ror	r26
    17c6:	f0 40       	sbci	r31, 0x00	; 0
    17c8:	53 95       	inc	r21
    17ca:	c9 f7       	brne	.-14     	; 0x17be <__addsf3x+0x52>
    17cc:	7e f4       	brtc	.+30     	; 0x17ec <__addsf3x+0x80>
    17ce:	1f 16       	cp	r1, r31
    17d0:	ba 0b       	sbc	r27, r26
    17d2:	62 0b       	sbc	r22, r18
    17d4:	73 0b       	sbc	r23, r19
    17d6:	84 0b       	sbc	r24, r20
    17d8:	ba f0       	brmi	.+46     	; 0x1808 <__addsf3x+0x9c>
    17da:	91 50       	subi	r25, 0x01	; 1
    17dc:	a1 f0       	breq	.+40     	; 0x1806 <__addsf3x+0x9a>
    17de:	ff 0f       	add	r31, r31
    17e0:	bb 1f       	adc	r27, r27
    17e2:	66 1f       	adc	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	c2 f7       	brpl	.-16     	; 0x17da <__addsf3x+0x6e>
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <__addsf3x+0x9c>
    17ec:	ba 0f       	add	r27, r26
    17ee:	62 1f       	adc	r22, r18
    17f0:	73 1f       	adc	r23, r19
    17f2:	84 1f       	adc	r24, r20
    17f4:	48 f4       	brcc	.+18     	; 0x1808 <__addsf3x+0x9c>
    17f6:	87 95       	ror	r24
    17f8:	77 95       	ror	r23
    17fa:	67 95       	ror	r22
    17fc:	b7 95       	ror	r27
    17fe:	f7 95       	ror	r31
    1800:	9e 3f       	cpi	r25, 0xFE	; 254
    1802:	08 f0       	brcs	.+2      	; 0x1806 <__addsf3x+0x9a>
    1804:	b0 cf       	rjmp	.-160    	; 0x1766 <__addsf3+0x28>
    1806:	93 95       	inc	r25
    1808:	88 0f       	add	r24, r24
    180a:	08 f0       	brcs	.+2      	; 0x180e <__addsf3x+0xa2>
    180c:	99 27       	eor	r25, r25
    180e:	ee 0f       	add	r30, r30
    1810:	97 95       	ror	r25
    1812:	87 95       	ror	r24
    1814:	08 95       	ret

00001816 <__fixsfsi>:
    1816:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fixunssfsi>
    181a:	68 94       	set
    181c:	b1 11       	cpse	r27, r1
    181e:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__fp_szero>
    1822:	08 95       	ret

00001824 <__fixunssfsi>:
    1824:	0e 94 ae 0c 	call	0x195c	; 0x195c <__fp_splitA>
    1828:	88 f0       	brcs	.+34     	; 0x184c <__fixunssfsi+0x28>
    182a:	9f 57       	subi	r25, 0x7F	; 127
    182c:	98 f0       	brcs	.+38     	; 0x1854 <__fixunssfsi+0x30>
    182e:	b9 2f       	mov	r27, r25
    1830:	99 27       	eor	r25, r25
    1832:	b7 51       	subi	r27, 0x17	; 23
    1834:	b0 f0       	brcs	.+44     	; 0x1862 <__fixunssfsi+0x3e>
    1836:	e1 f0       	breq	.+56     	; 0x1870 <__fixunssfsi+0x4c>
    1838:	66 0f       	add	r22, r22
    183a:	77 1f       	adc	r23, r23
    183c:	88 1f       	adc	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	1a f0       	brmi	.+6      	; 0x1848 <__fixunssfsi+0x24>
    1842:	ba 95       	dec	r27
    1844:	c9 f7       	brne	.-14     	; 0x1838 <__fixunssfsi+0x14>
    1846:	14 c0       	rjmp	.+40     	; 0x1870 <__fixunssfsi+0x4c>
    1848:	b1 30       	cpi	r27, 0x01	; 1
    184a:	91 f0       	breq	.+36     	; 0x1870 <__fixunssfsi+0x4c>
    184c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__fp_zero>
    1850:	b1 e0       	ldi	r27, 0x01	; 1
    1852:	08 95       	ret
    1854:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__fp_zero>
    1858:	67 2f       	mov	r22, r23
    185a:	78 2f       	mov	r23, r24
    185c:	88 27       	eor	r24, r24
    185e:	b8 5f       	subi	r27, 0xF8	; 248
    1860:	39 f0       	breq	.+14     	; 0x1870 <__fixunssfsi+0x4c>
    1862:	b9 3f       	cpi	r27, 0xF9	; 249
    1864:	cc f3       	brlt	.-14     	; 0x1858 <__fixunssfsi+0x34>
    1866:	86 95       	lsr	r24
    1868:	77 95       	ror	r23
    186a:	67 95       	ror	r22
    186c:	b3 95       	inc	r27
    186e:	d9 f7       	brne	.-10     	; 0x1866 <__fixunssfsi+0x42>
    1870:	3e f4       	brtc	.+14     	; 0x1880 <__fixunssfsi+0x5c>
    1872:	90 95       	com	r25
    1874:	80 95       	com	r24
    1876:	70 95       	com	r23
    1878:	61 95       	neg	r22
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	08 95       	ret

00001882 <__floatunsisf>:
    1882:	e8 94       	clt
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <__floatsisf+0x12>

00001886 <__floatsisf>:
    1886:	97 fb       	bst	r25, 7
    1888:	3e f4       	brtc	.+14     	; 0x1898 <__floatsisf+0x12>
    188a:	90 95       	com	r25
    188c:	80 95       	com	r24
    188e:	70 95       	com	r23
    1890:	61 95       	neg	r22
    1892:	7f 4f       	sbci	r23, 0xFF	; 255
    1894:	8f 4f       	sbci	r24, 0xFF	; 255
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	99 23       	and	r25, r25
    189a:	a9 f0       	breq	.+42     	; 0x18c6 <__floatsisf+0x40>
    189c:	f9 2f       	mov	r31, r25
    189e:	96 e9       	ldi	r25, 0x96	; 150
    18a0:	bb 27       	eor	r27, r27
    18a2:	93 95       	inc	r25
    18a4:	f6 95       	lsr	r31
    18a6:	87 95       	ror	r24
    18a8:	77 95       	ror	r23
    18aa:	67 95       	ror	r22
    18ac:	b7 95       	ror	r27
    18ae:	f1 11       	cpse	r31, r1
    18b0:	f8 cf       	rjmp	.-16     	; 0x18a2 <__floatsisf+0x1c>
    18b2:	fa f4       	brpl	.+62     	; 0x18f2 <__floatsisf+0x6c>
    18b4:	bb 0f       	add	r27, r27
    18b6:	11 f4       	brne	.+4      	; 0x18bc <__floatsisf+0x36>
    18b8:	60 ff       	sbrs	r22, 0
    18ba:	1b c0       	rjmp	.+54     	; 0x18f2 <__floatsisf+0x6c>
    18bc:	6f 5f       	subi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	8f 4f       	sbci	r24, 0xFF	; 255
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	16 c0       	rjmp	.+44     	; 0x18f2 <__floatsisf+0x6c>
    18c6:	88 23       	and	r24, r24
    18c8:	11 f0       	breq	.+4      	; 0x18ce <__floatsisf+0x48>
    18ca:	96 e9       	ldi	r25, 0x96	; 150
    18cc:	11 c0       	rjmp	.+34     	; 0x18f0 <__floatsisf+0x6a>
    18ce:	77 23       	and	r23, r23
    18d0:	21 f0       	breq	.+8      	; 0x18da <__floatsisf+0x54>
    18d2:	9e e8       	ldi	r25, 0x8E	; 142
    18d4:	87 2f       	mov	r24, r23
    18d6:	76 2f       	mov	r23, r22
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <__floatsisf+0x5e>
    18da:	66 23       	and	r22, r22
    18dc:	71 f0       	breq	.+28     	; 0x18fa <__floatsisf+0x74>
    18de:	96 e8       	ldi	r25, 0x86	; 134
    18e0:	86 2f       	mov	r24, r22
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	2a f0       	brmi	.+10     	; 0x18f2 <__floatsisf+0x6c>
    18e8:	9a 95       	dec	r25
    18ea:	66 0f       	add	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	da f7       	brpl	.-10     	; 0x18e8 <__floatsisf+0x62>
    18f2:	88 0f       	add	r24, r24
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	97 f9       	bld	r25, 7
    18fa:	08 95       	ret

000018fc <__fp_inf>:
    18fc:	97 f9       	bld	r25, 7
    18fe:	9f 67       	ori	r25, 0x7F	; 127
    1900:	80 e8       	ldi	r24, 0x80	; 128
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	08 95       	ret

00001908 <__fp_nan>:
    1908:	9f ef       	ldi	r25, 0xFF	; 255
    190a:	80 ec       	ldi	r24, 0xC0	; 192
    190c:	08 95       	ret

0000190e <__fp_pscA>:
    190e:	00 24       	eor	r0, r0
    1910:	0a 94       	dec	r0
    1912:	16 16       	cp	r1, r22
    1914:	17 06       	cpc	r1, r23
    1916:	18 06       	cpc	r1, r24
    1918:	09 06       	cpc	r0, r25
    191a:	08 95       	ret

0000191c <__fp_pscB>:
    191c:	00 24       	eor	r0, r0
    191e:	0a 94       	dec	r0
    1920:	12 16       	cp	r1, r18
    1922:	13 06       	cpc	r1, r19
    1924:	14 06       	cpc	r1, r20
    1926:	05 06       	cpc	r0, r21
    1928:	08 95       	ret

0000192a <__fp_round>:
    192a:	09 2e       	mov	r0, r25
    192c:	03 94       	inc	r0
    192e:	00 0c       	add	r0, r0
    1930:	11 f4       	brne	.+4      	; 0x1936 <__fp_round+0xc>
    1932:	88 23       	and	r24, r24
    1934:	52 f0       	brmi	.+20     	; 0x194a <__fp_round+0x20>
    1936:	bb 0f       	add	r27, r27
    1938:	40 f4       	brcc	.+16     	; 0x194a <__fp_round+0x20>
    193a:	bf 2b       	or	r27, r31
    193c:	11 f4       	brne	.+4      	; 0x1942 <__fp_round+0x18>
    193e:	60 ff       	sbrs	r22, 0
    1940:	04 c0       	rjmp	.+8      	; 0x194a <__fp_round+0x20>
    1942:	6f 5f       	subi	r22, 0xFF	; 255
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	8f 4f       	sbci	r24, 0xFF	; 255
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	08 95       	ret

0000194c <__fp_split3>:
    194c:	57 fd       	sbrc	r21, 7
    194e:	90 58       	subi	r25, 0x80	; 128
    1950:	44 0f       	add	r20, r20
    1952:	55 1f       	adc	r21, r21
    1954:	59 f0       	breq	.+22     	; 0x196c <__fp_splitA+0x10>
    1956:	5f 3f       	cpi	r21, 0xFF	; 255
    1958:	71 f0       	breq	.+28     	; 0x1976 <__fp_splitA+0x1a>
    195a:	47 95       	ror	r20

0000195c <__fp_splitA>:
    195c:	88 0f       	add	r24, r24
    195e:	97 fb       	bst	r25, 7
    1960:	99 1f       	adc	r25, r25
    1962:	61 f0       	breq	.+24     	; 0x197c <__fp_splitA+0x20>
    1964:	9f 3f       	cpi	r25, 0xFF	; 255
    1966:	79 f0       	breq	.+30     	; 0x1986 <__fp_splitA+0x2a>
    1968:	87 95       	ror	r24
    196a:	08 95       	ret
    196c:	12 16       	cp	r1, r18
    196e:	13 06       	cpc	r1, r19
    1970:	14 06       	cpc	r1, r20
    1972:	55 1f       	adc	r21, r21
    1974:	f2 cf       	rjmp	.-28     	; 0x195a <__fp_split3+0xe>
    1976:	46 95       	lsr	r20
    1978:	f1 df       	rcall	.-30     	; 0x195c <__fp_splitA>
    197a:	08 c0       	rjmp	.+16     	; 0x198c <__fp_splitA+0x30>
    197c:	16 16       	cp	r1, r22
    197e:	17 06       	cpc	r1, r23
    1980:	18 06       	cpc	r1, r24
    1982:	99 1f       	adc	r25, r25
    1984:	f1 cf       	rjmp	.-30     	; 0x1968 <__fp_splitA+0xc>
    1986:	86 95       	lsr	r24
    1988:	71 05       	cpc	r23, r1
    198a:	61 05       	cpc	r22, r1
    198c:	08 94       	sec
    198e:	08 95       	ret

00001990 <__fp_zero>:
    1990:	e8 94       	clt

00001992 <__fp_szero>:
    1992:	bb 27       	eor	r27, r27
    1994:	66 27       	eor	r22, r22
    1996:	77 27       	eor	r23, r23
    1998:	cb 01       	movw	r24, r22
    199a:	97 f9       	bld	r25, 7
    199c:	08 95       	ret

0000199e <__mulsf3>:
    199e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__mulsf3x>
    19a2:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__fp_round>
    19a6:	0e 94 87 0c 	call	0x190e	; 0x190e <__fp_pscA>
    19aa:	38 f0       	brcs	.+14     	; 0x19ba <__mulsf3+0x1c>
    19ac:	0e 94 8e 0c 	call	0x191c	; 0x191c <__fp_pscB>
    19b0:	20 f0       	brcs	.+8      	; 0x19ba <__mulsf3+0x1c>
    19b2:	95 23       	and	r25, r21
    19b4:	11 f0       	breq	.+4      	; 0x19ba <__mulsf3+0x1c>
    19b6:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_inf>
    19ba:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__fp_nan>
    19be:	11 24       	eor	r1, r1
    19c0:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__fp_szero>

000019c4 <__mulsf3x>:
    19c4:	0e 94 a6 0c 	call	0x194c	; 0x194c <__fp_split3>
    19c8:	70 f3       	brcs	.-36     	; 0x19a6 <__mulsf3+0x8>

000019ca <__mulsf3_pse>:
    19ca:	95 9f       	mul	r25, r21
    19cc:	c1 f3       	breq	.-16     	; 0x19be <__mulsf3+0x20>
    19ce:	95 0f       	add	r25, r21
    19d0:	50 e0       	ldi	r21, 0x00	; 0
    19d2:	55 1f       	adc	r21, r21
    19d4:	62 9f       	mul	r22, r18
    19d6:	f0 01       	movw	r30, r0
    19d8:	72 9f       	mul	r23, r18
    19da:	bb 27       	eor	r27, r27
    19dc:	f0 0d       	add	r31, r0
    19de:	b1 1d       	adc	r27, r1
    19e0:	63 9f       	mul	r22, r19
    19e2:	aa 27       	eor	r26, r26
    19e4:	f0 0d       	add	r31, r0
    19e6:	b1 1d       	adc	r27, r1
    19e8:	aa 1f       	adc	r26, r26
    19ea:	64 9f       	mul	r22, r20
    19ec:	66 27       	eor	r22, r22
    19ee:	b0 0d       	add	r27, r0
    19f0:	a1 1d       	adc	r26, r1
    19f2:	66 1f       	adc	r22, r22
    19f4:	82 9f       	mul	r24, r18
    19f6:	22 27       	eor	r18, r18
    19f8:	b0 0d       	add	r27, r0
    19fa:	a1 1d       	adc	r26, r1
    19fc:	62 1f       	adc	r22, r18
    19fe:	73 9f       	mul	r23, r19
    1a00:	b0 0d       	add	r27, r0
    1a02:	a1 1d       	adc	r26, r1
    1a04:	62 1f       	adc	r22, r18
    1a06:	83 9f       	mul	r24, r19
    1a08:	a0 0d       	add	r26, r0
    1a0a:	61 1d       	adc	r22, r1
    1a0c:	22 1f       	adc	r18, r18
    1a0e:	74 9f       	mul	r23, r20
    1a10:	33 27       	eor	r19, r19
    1a12:	a0 0d       	add	r26, r0
    1a14:	61 1d       	adc	r22, r1
    1a16:	23 1f       	adc	r18, r19
    1a18:	84 9f       	mul	r24, r20
    1a1a:	60 0d       	add	r22, r0
    1a1c:	21 1d       	adc	r18, r1
    1a1e:	82 2f       	mov	r24, r18
    1a20:	76 2f       	mov	r23, r22
    1a22:	6a 2f       	mov	r22, r26
    1a24:	11 24       	eor	r1, r1
    1a26:	9f 57       	subi	r25, 0x7F	; 127
    1a28:	50 40       	sbci	r21, 0x00	; 0
    1a2a:	9a f0       	brmi	.+38     	; 0x1a52 <__mulsf3_pse+0x88>
    1a2c:	f1 f0       	breq	.+60     	; 0x1a6a <__mulsf3_pse+0xa0>
    1a2e:	88 23       	and	r24, r24
    1a30:	4a f0       	brmi	.+18     	; 0x1a44 <__mulsf3_pse+0x7a>
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	bb 1f       	adc	r27, r27
    1a38:	66 1f       	adc	r22, r22
    1a3a:	77 1f       	adc	r23, r23
    1a3c:	88 1f       	adc	r24, r24
    1a3e:	91 50       	subi	r25, 0x01	; 1
    1a40:	50 40       	sbci	r21, 0x00	; 0
    1a42:	a9 f7       	brne	.-22     	; 0x1a2e <__mulsf3_pse+0x64>
    1a44:	9e 3f       	cpi	r25, 0xFE	; 254
    1a46:	51 05       	cpc	r21, r1
    1a48:	80 f0       	brcs	.+32     	; 0x1a6a <__mulsf3_pse+0xa0>
    1a4a:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__fp_inf>
    1a4e:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__fp_szero>
    1a52:	5f 3f       	cpi	r21, 0xFF	; 255
    1a54:	e4 f3       	brlt	.-8      	; 0x1a4e <__mulsf3_pse+0x84>
    1a56:	98 3e       	cpi	r25, 0xE8	; 232
    1a58:	d4 f3       	brlt	.-12     	; 0x1a4e <__mulsf3_pse+0x84>
    1a5a:	86 95       	lsr	r24
    1a5c:	77 95       	ror	r23
    1a5e:	67 95       	ror	r22
    1a60:	b7 95       	ror	r27
    1a62:	f7 95       	ror	r31
    1a64:	e7 95       	ror	r30
    1a66:	9f 5f       	subi	r25, 0xFF	; 255
    1a68:	c1 f7       	brne	.-16     	; 0x1a5a <__mulsf3_pse+0x90>
    1a6a:	fe 2b       	or	r31, r30
    1a6c:	88 0f       	add	r24, r24
    1a6e:	91 1d       	adc	r25, r1
    1a70:	96 95       	lsr	r25
    1a72:	87 95       	ror	r24
    1a74:	97 f9       	bld	r25, 7
    1a76:	08 95       	ret

00001a78 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1a78:	ec e7       	ldi	r30, 0x7C	; 124
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 7d       	andi	r24, 0xDF	; 223
    1a80:	80 83       	st	Z, r24
    1a82:	08 95       	ret

00001a84 <_ZN15OrangutanAnalog7setModeEh>:
    1a84:	81 11       	cpse	r24, r1
    1a86:	03 c0       	rjmp	.+6      	; 0x1a8e <_ZN15OrangutanAnalog7setModeEh+0xa>
    1a88:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1a8c:	08 95       	ret
    1a8e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1a92:	80 62       	ori	r24, 0x20	; 32
    1a94:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1a98:	08 95       	ret

00001a9a <_ZN15OrangutanAnalog7getModeEv>:
    1a9a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1a9e:	85 fb       	bst	r24, 5
    1aa0:	88 27       	eor	r24, r24
    1aa2:	80 f9       	bld	r24, 0
    1aa4:	08 95       	ret

00001aa6 <_ZN15OrangutanAnalog16conversionResultEv>:
    1aa6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_ZN15OrangutanAnalog7getModeEv>
    1aaa:	88 23       	and	r24, r24
    1aac:	21 f0       	breq	.+8      	; 0x1ab6 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1aae:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	08 95       	ret
    1ab6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1aba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1abe:	08 95       	ret

00001ac0 <_ZN15OrangutanAnalog15startConversionEhh>:
    1ac0:	80 32       	cpi	r24, 0x20	; 32
    1ac2:	a0 f4       	brcc	.+40     	; 0x1aec <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1ac4:	97 e8       	ldi	r25, 0x87	; 135
    1ac6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1aca:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1ace:	66 23       	and	r22, r22
    1ad0:	11 f0       	breq	.+4      	; 0x1ad6 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1ad2:	90 6c       	ori	r25, 0xC0	; 192
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1ad6:	9f 77       	andi	r25, 0x7F	; 127
    1ad8:	90 64       	ori	r25, 0x40	; 64
    1ada:	90 7e       	andi	r25, 0xE0	; 224
    1adc:	98 2b       	or	r25, r24
    1ade:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1ae2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ae6:	80 64       	ori	r24, 0x40	; 64
    1ae8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1aec:	08 95       	ret

00001aee <_ZN15OrangutanAnalog11readAverageEhj>:
    1aee:	a0 e0       	ldi	r26, 0x00	; 0
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	ed e7       	ldi	r30, 0x7D	; 125
    1af4:	fd e0       	ldi	r31, 0x0D	; 13
    1af6:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__prologue_saves__+0x14>
    1afa:	eb 01       	movw	r28, r22
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_ZN15OrangutanAnalog15startConversionEhh>
    1b02:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b06:	86 fd       	sbrc	r24, 6
    1b08:	fc cf       	rjmp	.-8      	; 0x1b02 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1b0a:	8e 01       	movw	r16, r28
    1b0c:	c1 2c       	mov	r12, r1
    1b0e:	d1 2c       	mov	r13, r1
    1b10:	76 01       	movw	r14, r12
    1b12:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b16:	80 64       	ori	r24, 0x40	; 64
    1b18:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b1c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b20:	86 fd       	sbrc	r24, 6
    1b22:	fc cf       	rjmp	.-8      	; 0x1b1c <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1b24:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <_ZN15OrangutanAnalog16conversionResultEv>
    1b28:	c8 0e       	add	r12, r24
    1b2a:	d9 1e       	adc	r13, r25
    1b2c:	e1 1c       	adc	r14, r1
    1b2e:	f1 1c       	adc	r15, r1
    1b30:	01 50       	subi	r16, 0x01	; 1
    1b32:	11 09       	sbc	r17, r1
    1b34:	01 15       	cp	r16, r1
    1b36:	11 05       	cpc	r17, r1
    1b38:	61 f7       	brne	.-40     	; 0x1b12 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	96 95       	lsr	r25
    1b3e:	87 95       	ror	r24
    1b40:	c0 34       	cpi	r28, 0x40	; 64
    1b42:	d1 05       	cpc	r29, r1
    1b44:	38 f4       	brcc	.+14     	; 0x1b54 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1b46:	8c 0d       	add	r24, r12
    1b48:	9d 1d       	adc	r25, r13
    1b4a:	be 01       	movw	r22, r28
    1b4c:	0e 94 13 1b 	call	0x3626	; 0x3626 <__udivmodhi4>
    1b50:	cb 01       	movw	r24, r22
    1b52:	0e c0       	rjmp	.+28     	; 0x1b70 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1b54:	a7 01       	movw	r20, r14
    1b56:	96 01       	movw	r18, r12
    1b58:	28 0f       	add	r18, r24
    1b5a:	39 1f       	adc	r19, r25
    1b5c:	41 1d       	adc	r20, r1
    1b5e:	51 1d       	adc	r21, r1
    1b60:	ca 01       	movw	r24, r20
    1b62:	b9 01       	movw	r22, r18
    1b64:	9e 01       	movw	r18, r28
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__udivmodsi4>
    1b6e:	c9 01       	movw	r24, r18
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	e8 e0       	ldi	r30, 0x08	; 8
    1b76:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__epilogue_restores__+0x14>

00001b7a <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1b86:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	0e 94 82 1b 	call	0x3704	; 0x3704 <__umulhisi3>
    1b90:	6b 01       	movw	r12, r22
    1b92:	7c 01       	movw	r14, r24
    1b94:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_ZN15OrangutanAnalog7getModeEv>
    1b98:	88 23       	and	r24, r24
    1b9a:	59 f0       	breq	.+22     	; 0x1bb2 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1b9c:	c7 01       	movw	r24, r14
    1b9e:	b6 01       	movw	r22, r12
    1ba0:	61 58       	subi	r22, 0x81	; 129
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	2f ef       	ldi	r18, 0xFF	; 255
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	0a c0       	rjmp	.+20     	; 0x1bc6 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	61 50       	subi	r22, 0x01	; 1
    1bb8:	7e 4f       	sbci	r23, 0xFE	; 254
    1bba:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	2f ef       	ldi	r18, 0xFF	; 255
    1bc0:	33 e0       	ldi	r19, 0x03	; 3
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__udivmodsi4>
    1bca:	c9 01       	movw	r24, r18
    1bcc:	ff 90       	pop	r15
    1bce:	ef 90       	pop	r14
    1bd0:	df 90       	pop	r13
    1bd2:	cf 90       	pop	r12
    1bd4:	08 95       	ret

00001bd6 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1bd6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN15OrangutanAnalog11readAverageEhj>
    1bda:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN15OrangutanAnalog12toMillivoltsEj>
    1bde:	08 95       	ret

00001be0 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1be0:	1f 93       	push	r17
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_ZN15OrangutanAnalog7getModeEv>
    1bea:	18 2f       	mov	r17, r24
    1bec:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1bf0:	6a e0       	ldi	r22, 0x0A	; 10
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	86 e0       	ldi	r24, 0x06	; 6
    1bf6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1bfa:	ec 01       	movw	r28, r24
    1bfc:	81 2f       	mov	r24, r17
    1bfe:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <_ZN15OrangutanAnalog7setModeEh>
    1c02:	ce 01       	movw	r24, r28
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	8c 0f       	add	r24, r28
    1c0a:	9d 1f       	adc	r25, r29
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	96 95       	lsr	r25
    1c10:	87 95       	ror	r24
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	08 95       	ret

00001c1a <read_battery_millivolts_3pi>:
    1c1a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1c1e:	08 95       	ret

00001c20 <_ZL16currentCharacterv>:
    1c20:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <_ZL17use_program_space>
    1c24:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <__data_end>
    1c28:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <__data_end+0x1>
    1c2c:	99 23       	and	r25, r25
    1c2e:	11 f0       	breq	.+4      	; 0x1c34 <_ZL16currentCharacterv+0x14>
    1c30:	84 91       	lpm	r24, Z
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <_ZL16currentCharacterv+0x16>
    1c34:	80 81       	ld	r24, Z
    1c36:	2f eb       	ldi	r18, 0xBF	; 191
    1c38:	28 0f       	add	r18, r24
    1c3a:	2a 31       	cpi	r18, 0x1A	; 26
    1c3c:	10 f4       	brcc	.+4      	; 0x1c42 <_ZL16currentCharacterv+0x22>
    1c3e:	80 5e       	subi	r24, 0xE0	; 224
    1c40:	08 95       	ret
    1c42:	80 32       	cpi	r24, 0x20	; 32
    1c44:	49 f4       	brne	.+18     	; 0x1c58 <_ZL16currentCharacterv+0x38>
    1c46:	9f 01       	movw	r18, r30
    1c48:	2f 5f       	subi	r18, 0xFF	; 255
    1c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4c:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1c50:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1c54:	ef 2b       	or	r30, r31
    1c56:	31 f7       	brne	.-52     	; 0x1c24 <_ZL16currentCharacterv+0x4>
    1c58:	08 95       	ret

00001c5a <_ZL9getNumberv>:
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZL16currentCharacterv>
    1c64:	c0 e0       	ldi	r28, 0x00	; 0
    1c66:	d0 e0       	ldi	r29, 0x00	; 0
    1c68:	1a e0       	ldi	r17, 0x0A	; 10
    1c6a:	90 ed       	ldi	r25, 0xD0	; 208
    1c6c:	98 0f       	add	r25, r24
    1c6e:	9a 30       	cpi	r25, 0x0A	; 10
    1c70:	b8 f4       	brcc	.+46     	; 0x1ca0 <_ZL9getNumberv+0x46>
    1c72:	9e 01       	movw	r18, r28
    1c74:	12 9f       	mul	r17, r18
    1c76:	e0 01       	movw	r28, r0
    1c78:	13 9f       	mul	r17, r19
    1c7a:	d0 0d       	add	r29, r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	c8 0f       	add	r28, r24
    1c80:	d1 1d       	adc	r29, r1
    1c82:	87 fd       	sbrc	r24, 7
    1c84:	da 95       	dec	r29
    1c86:	e0 97       	sbiw	r28, 0x30	; 48
    1c88:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    1c8c:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    1c96:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    1c9a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZL16currentCharacterv>
    1c9e:	e5 cf       	rjmp	.-54     	; 0x1c6a <_ZL9getNumberv+0x10>
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	08 95       	ret

00001caa <_ZN15OrangutanBuzzer5init2Ev>:
    1caa:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1cae:	83 e2       	ldi	r24, 0x23	; 35
    1cb0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1cb4:	81 e1       	ldi	r24, 0x11	; 17
    1cb6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1cba:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    1cbe:	80 e1       	ldi	r24, 0x10	; 16
    1cc0:	97 e2       	ldi	r25, 0x27	; 39
    1cc2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1cc6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1cca:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1cce:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1cd2:	22 9a       	sbi	0x04, 2	; 4
    1cd4:	78 94       	sei
    1cd6:	08 95       	ret

00001cd8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1cd8:	8f 92       	push	r8
    1cda:	9f 92       	push	r9
    1cdc:	af 92       	push	r10
    1cde:	bf 92       	push	r11
    1ce0:	df 92       	push	r13
    1ce2:	ef 92       	push	r14
    1ce4:	ff 92       	push	r15
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	5c 01       	movw	r10, r24
    1cf0:	8b 01       	movw	r16, r22
    1cf2:	d4 2e       	mov	r13, r20
    1cf4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <buzzerInitialized>
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <buzzerInitialized>
    1d02:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN15OrangutanBuzzer5init2Ev>
    1d06:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1d0a:	b7 fe       	sbrs	r11, 7
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1d0e:	e8 94       	clt
    1d10:	b7 f8       	bld	r11, 7
    1d12:	2a e0       	ldi	r18, 0x0A	; 10
    1d14:	f2 2e       	mov	r15, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1d18:	ff 24       	eor	r15, r15
    1d1a:	f3 94       	inc	r15
    1d1c:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1d20:	2e 2d       	mov	r18, r14
    1d22:	28 7f       	andi	r18, 0xF8	; 248
    1d24:	e2 2e       	mov	r14, r18
    1d26:	48 ec       	ldi	r20, 0xC8	; 200
    1d28:	f4 9e       	mul	r15, r20
    1d2a:	c0 01       	movw	r24, r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	8a 15       	cp	r24, r10
    1d30:	9b 05       	cpc	r25, r11
    1d32:	e0 f4       	brcc	.+56     	; 0x1d6c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1d34:	e5 01       	movw	r28, r10
    1d36:	51 e1       	ldi	r21, 0x11	; 17
    1d38:	a5 16       	cp	r10, r21
    1d3a:	57 e2       	ldi	r21, 0x27	; 39
    1d3c:	b5 06       	cpc	r11, r21
    1d3e:	10 f0       	brcs	.+4      	; 0x1d44 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1d40:	c0 e1       	ldi	r28, 0x10	; 16
    1d42:	d7 e2       	ldi	r29, 0x27	; 39
    1d44:	be 01       	movw	r22, r28
    1d46:	76 95       	lsr	r23
    1d48:	67 95       	ror	r22
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	60 58       	subi	r22, 0x80	; 128
    1d50:	79 46       	sbci	r23, 0x69	; 105
    1d52:	87 46       	sbci	r24, 0x67	; 103
    1d54:	9f 4f       	sbci	r25, 0xFF	; 255
    1d56:	4e 01       	movw	r8, r28
    1d58:	a1 2c       	mov	r10, r1
    1d5a:	b1 2c       	mov	r11, r1
    1d5c:	a5 01       	movw	r20, r10
    1d5e:	94 01       	movw	r18, r8
    1d60:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__udivmodsi4>
    1d64:	59 01       	movw	r10, r18
    1d66:	8e 2d       	mov	r24, r14
    1d68:	81 60       	ori	r24, 0x01	; 1
    1d6a:	24 c0       	rjmp	.+72     	; 0x1db4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1d6c:	c8 e2       	ldi	r28, 0x28	; 40
    1d6e:	fc 9e       	mul	r15, r28
    1d70:	c0 2d       	mov	r28, r0
    1d72:	11 24       	eor	r1, r1
    1d74:	d0 e0       	ldi	r29, 0x00	; 0
    1d76:	ca 15       	cp	r28, r10
    1d78:	db 05       	cpc	r29, r11
    1d7a:	08 f4       	brcc	.+2      	; 0x1d7e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1d7c:	e5 01       	movw	r28, r10
    1d7e:	be 01       	movw	r22, r28
    1d80:	76 95       	lsr	r23
    1d82:	67 95       	ror	r22
    1d84:	9e 01       	movw	r18, r28
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	8a e0       	ldi	r24, 0x0A	; 10
    1d8c:	f8 12       	cpse	r15, r24
    1d8e:	07 c0       	rjmp	.+14     	; 0x1d9e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	60 5e       	subi	r22, 0xE0	; 224
    1d96:	73 44       	sbci	r23, 0x43	; 67
    1d98:	81 44       	sbci	r24, 0x41	; 65
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	06 c0       	rjmp	.+12     	; 0x1daa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	60 53       	subi	r22, 0x30	; 48
    1da4:	7d 4e       	sbci	r23, 0xED	; 237
    1da6:	8c 4e       	sbci	r24, 0xEC	; 236
    1da8:	9f 4f       	sbci	r25, 0xFF	; 255
    1daa:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__udivmodsi4>
    1dae:	59 01       	movw	r10, r18
    1db0:	8e 2d       	mov	r24, r14
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	88 2e       	mov	r8, r24
    1db6:	2a e0       	ldi	r18, 0x0A	; 10
    1db8:	f2 12       	cpse	r15, r18
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	05 96       	adiw	r24, 0x05	; 5
    1dc0:	6a e0       	ldi	r22, 0x0A	; 10
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	0e 94 13 1b 	call	0x3626	; 0x3626 <__udivmodhi4>
    1dc8:	eb 01       	movw	r28, r22
    1dca:	c8 3e       	cpi	r28, 0xE8	; 232
    1dcc:	43 e0       	ldi	r20, 0x03	; 3
    1dce:	d4 07       	cpc	r29, r20
    1dd0:	59 f0       	breq	.+22     	; 0x1de8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1dd2:	98 01       	movw	r18, r16
    1dd4:	de 01       	movw	r26, r28
    1dd6:	0e 94 82 1b 	call	0x3704	; 0x3704 <__umulhisi3>
    1dda:	28 ee       	ldi	r18, 0xE8	; 232
    1ddc:	33 e0       	ldi	r19, 0x03	; 3
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__divmodsi4>
    1de6:	89 01       	movw	r16, r18
    1de8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1dec:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1df0:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1df4:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1df8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1dfc:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1e00:	4d 2d       	mov	r20, r13
    1e02:	40 31       	cpi	r20, 0x10	; 16
    1e04:	08 f0       	brcs	.+2      	; 0x1e08 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1e06:	4f e0       	ldi	r20, 0x0F	; 15
    1e08:	80 e1       	ldi	r24, 0x10	; 16
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	84 1b       	sub	r24, r20
    1e0e:	91 09       	sbc	r25, r1
    1e10:	a9 01       	movw	r20, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1e14:	56 95       	lsr	r21
    1e16:	47 95       	ror	r20
    1e18:	8a 95       	dec	r24
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1e1c:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1e20:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1e24:	10 93 9c 01 	sts	0x019C, r17	; 0x80019c <_ZL13buzzerTimeout+0x1>
    1e28:	00 93 9b 01 	sts	0x019B, r16	; 0x80019b <_ZL13buzzerTimeout>
    1e2c:	86 b3       	in	r24, 0x16	; 22
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	86 bb       	out	0x16, r24	; 22
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	df 90       	pop	r13
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	8f 90       	pop	r8
    1e4e:	08 95       	ret

00001e50 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	eb 01       	movw	r28, r22
    1e56:	8f 3f       	cpi	r24, 0xFF	; 255
    1e58:	11 f0       	breq	.+4      	; 0x1e5e <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1e5a:	41 11       	cpse	r20, r1
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	be 01       	movw	r22, r28
    1e62:	88 ee       	ldi	r24, 0xE8	; 232
    1e64:	93 e0       	ldi	r25, 0x03	; 3
    1e66:	43 c0       	rjmp	.+134    	; 0x1eee <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1e68:	81 31       	cpi	r24, 0x11	; 17
    1e6a:	30 f0       	brcs	.+12     	; 0x1e78 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1e6c:	50 ef       	ldi	r21, 0xF0	; 240
    1e6e:	58 0f       	add	r21, r24
    1e70:	50 36       	cpi	r21, 0x60	; 96
    1e72:	18 f0       	brcs	.+6      	; 0x1e7a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1e74:	5f e5       	ldi	r21, 0x5F	; 95
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1e78:	50 e0       	ldi	r21, 0x00	; 0
    1e7a:	85 2f       	mov	r24, r21
    1e7c:	6c e0       	ldi	r22, 0x0C	; 12
    1e7e:	0e 94 07 1b 	call	0x360e	; 0x360e <__udivmodqi4>
    1e82:	68 2f       	mov	r22, r24
    1e84:	74 ef       	ldi	r23, 0xF4	; 244
    1e86:	76 03       	mulsu	r23, r22
    1e88:	90 01       	movw	r18, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	25 0f       	add	r18, r21
    1e8e:	31 1d       	adc	r19, r1
    1e90:	2c 30       	cpi	r18, 0x0C	; 12
    1e92:	31 05       	cpc	r19, r1
    1e94:	40 f4       	brcc	.+16     	; 0x1ea6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1e96:	f9 01       	movw	r30, r18
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	e8 5c       	subi	r30, 0xC8	; 200
    1e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea0:	20 81       	ld	r18, Z
    1ea2:	31 81       	ldd	r19, Z+1	; 0x01
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	87 30       	cpi	r24, 0x07	; 7
    1eac:	81 f0       	breq	.+32     	; 0x1ece <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1eae:	08 2e       	mov	r0, r24
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1eba:	82 30       	cpi	r24, 0x02	; 2
    1ebc:	28 f0       	brcs	.+10     	; 0x1ec8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1ebe:	c9 01       	movw	r24, r18
    1ec0:	05 96       	adiw	r24, 0x05	; 5
    1ec2:	6a e0       	ldi	r22, 0x0A	; 10
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	0c c0       	rjmp	.+24     	; 0x1ee0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1ec8:	c9 01       	movw	r24, r18
    1eca:	90 58       	subi	r25, 0x80	; 128
    1ecc:	0c c0       	rjmp	.+24     	; 0x1ee6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1ece:	c9 01       	movw	r24, r18
    1ed0:	36 e0       	ldi	r19, 0x06	; 6
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	3a 95       	dec	r19
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1eda:	02 96       	adiw	r24, 0x02	; 2
    1edc:	65 e0       	ldi	r22, 0x05	; 5
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	0e 94 13 1b 	call	0x3626	; 0x3626 <__udivmodhi4>
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	40 31       	cpi	r20, 0x10	; 16
    1ee8:	08 f0       	brcs	.+2      	; 0x1eec <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1eea:	4f e0       	ldi	r20, 0x0F	; 15
    1eec:	be 01       	movw	r22, r28
    1eee:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <_ZL8nextNotev>:
    1ef8:	a2 e0       	ldi	r26, 0x02	; 2
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e2 e8       	ldi	r30, 0x82	; 130
    1efe:	ff e0       	ldi	r31, 0x0F	; 15
    1f00:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__prologue_saves__+0x4>
    1f04:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1f08:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL8staccato>
    1f0c:	88 23       	and	r24, r24
    1f0e:	21 f0       	breq	.+8      	; 0x1f18 <_ZL8nextNotev+0x20>
    1f10:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <_ZL22staccato_rest_duration>
    1f14:	61 11       	cpse	r22, r1
    1f16:	17 c0       	rjmp	.+46     	; 0x1f46 <_ZL8nextNotev+0x4e>
    1f18:	77 24       	eor	r7, r7
    1f1a:	73 94       	inc	r7
    1f1c:	b0 ec       	ldi	r27, 0xC0	; 192
    1f1e:	ab 2e       	mov	r10, r27
    1f20:	bd e5       	ldi	r27, 0x5D	; 93
    1f22:	bb 2e       	mov	r11, r27
    1f24:	1a e0       	ldi	r17, 0x0A	; 10
    1f26:	61 2e       	mov	r6, r17
    1f28:	04 e0       	ldi	r16, 0x04	; 4
    1f2a:	80 2e       	mov	r8, r16
    1f2c:	80 ed       	ldi	r24, 0xD0	; 208
    1f2e:	c8 2e       	mov	r12, r24
    1f30:	87 e0       	ldi	r24, 0x07	; 7
    1f32:	d8 2e       	mov	r13, r24
    1f34:	94 e0       	ldi	r25, 0x04	; 4
    1f36:	e9 2e       	mov	r14, r25
    1f38:	f1 2c       	mov	r15, r1
    1f3a:	04 ef       	ldi	r16, 0xF4	; 244
    1f3c:	11 e0       	ldi	r17, 0x01	; 1
    1f3e:	2f e0       	ldi	r18, 0x0F	; 15
    1f40:	42 2e       	mov	r4, r18
    1f42:	51 2c       	mov	r5, r1
    1f44:	15 c0       	rjmp	.+42     	; 0x1f70 <_ZL8nextNotev+0x78>
    1f46:	70 e0       	ldi	r23, 0x00	; 0
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	88 ee       	ldi	r24, 0xE8	; 232
    1f4c:	93 e0       	ldi	r25, 0x03	; 3
    1f4e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1f52:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    1f56:	17 c1       	rjmp	.+558    	; 0x2186 <_ZL8nextNotev+0x28e>
    1f58:	86 36       	cpi	r24, 0x66	; 102
    1f5a:	d4 f5       	brge	.+116    	; 0x1fd0 <_ZL8nextNotev+0xd8>
    1f5c:	81 36       	cpi	r24, 0x61	; 97
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <_ZL8nextNotev+0x6a>
    1f60:	a9 c0       	rjmp	.+338    	; 0x20b4 <_ZL8nextNotev+0x1bc>
    1f62:	7c f5       	brge	.+94     	; 0x1fc2 <_ZL8nextNotev+0xca>
    1f64:	8c 33       	cpi	r24, 0x3C	; 60
    1f66:	09 f4       	brne	.+2      	; 0x1f6a <_ZL8nextNotev+0x72>
    1f68:	60 c0       	rjmp	.+192    	; 0x202a <_ZL8nextNotev+0x132>
    1f6a:	8e 33       	cpi	r24, 0x3E	; 62
    1f6c:	81 f4       	brne	.+32     	; 0x1f8e <_ZL8nextNotev+0x96>
    1f6e:	93 94       	inc	r9
    1f70:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZL16currentCharacterv>
    1f74:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1f78:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1f7c:	2f 5f       	subi	r18, 0xFF	; 255
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1f84:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1f88:	85 36       	cpi	r24, 0x65	; 101
    1f8a:	31 f7       	brne	.-52     	; 0x1f58 <_ZL8nextNotev+0x60>
    1f8c:	52 c0       	rjmp	.+164    	; 0x2032 <_ZL8nextNotev+0x13a>
    1f8e:	81 32       	cpi	r24, 0x21	; 33
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <_ZL8nextNotev+0x9c>
    1f92:	8b c0       	rjmp	.+278    	; 0x20aa <_ZL8nextNotev+0x1b2>
    1f94:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1f98:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1f9c:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1fa0:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1fa4:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1fa8:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1fac:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1fb0:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1fb4:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1fb8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_ZL8staccato>
    1fbc:	a4 e0       	ldi	r26, 0x04	; 4
    1fbe:	9a 2e       	mov	r9, r26
    1fc0:	d7 cf       	rjmp	.-82     	; 0x1f70 <_ZL8nextNotev+0x78>
    1fc2:	83 36       	cpi	r24, 0x63	; 99
    1fc4:	a1 f1       	breq	.+104    	; 0x202e <_ZL8nextNotev+0x136>
    1fc6:	0c f4       	brge	.+2      	; 0x1fca <_ZL8nextNotev+0xd2>
    1fc8:	78 c0       	rjmp	.+240    	; 0x20ba <_ZL8nextNotev+0x1c2>
    1fca:	10 e0       	ldi	r17, 0x00	; 0
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	77 c0       	rjmp	.+238    	; 0x20be <_ZL8nextNotev+0x1c6>
    1fd0:	8d 36       	cpi	r24, 0x6D	; 109
    1fd2:	c1 f1       	breq	.+112    	; 0x2044 <_ZL8nextNotev+0x14c>
    1fd4:	94 f4       	brge	.+36     	; 0x1ffa <_ZL8nextNotev+0x102>
    1fd6:	87 36       	cpi	r24, 0x67	; 103
    1fd8:	91 f1       	breq	.+100    	; 0x203e <_ZL8nextNotev+0x146>
    1fda:	74 f1       	brlt	.+92     	; 0x2038 <_ZL8nextNotev+0x140>
    1fdc:	8c 36       	cpi	r24, 0x6C	; 108
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <_ZL8nextNotev+0xea>
    1fe0:	64 c0       	rjmp	.+200    	; 0x20aa <_ZL8nextNotev+0x1b2>
    1fe2:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZL9getNumberv>
    1fe6:	bc 01       	movw	r22, r24
    1fe8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1fec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1ff0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1ff4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1ff8:	51 c0       	rjmp	.+162    	; 0x209c <_ZL8nextNotev+0x1a4>
    1ffa:	82 37       	cpi	r24, 0x72	; 114
    1ffc:	c9 f1       	breq	.+114    	; 0x2070 <_ZL8nextNotev+0x178>
    1ffe:	4c f4       	brge	.+18     	; 0x2012 <_ZL8nextNotev+0x11a>
    2000:	8f 36       	cpi	r24, 0x6F	; 111
    2002:	09 f0       	breq	.+2      	; 0x2006 <_ZL8nextNotev+0x10e>
    2004:	52 c0       	rjmp	.+164    	; 0x20aa <_ZL8nextNotev+0x1b2>
    2006:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZL9getNumberv>
    200a:	98 2e       	mov	r9, r24
    200c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    2010:	af cf       	rjmp	.-162    	; 0x1f70 <_ZL8nextNotev+0x78>
    2012:	84 37       	cpi	r24, 0x74	; 116
    2014:	81 f1       	breq	.+96     	; 0x2076 <_ZL8nextNotev+0x17e>
    2016:	86 37       	cpi	r24, 0x76	; 118
    2018:	09 f0       	breq	.+2      	; 0x201c <_ZL8nextNotev+0x124>
    201a:	47 c0       	rjmp	.+142    	; 0x20aa <_ZL8nextNotev+0x1b2>
    201c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZL9getNumberv>
    2020:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    2024:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    2028:	a3 cf       	rjmp	.-186    	; 0x1f70 <_ZL8nextNotev+0x78>
    202a:	9a 94       	dec	r9
    202c:	a1 cf       	rjmp	.-190    	; 0x1f70 <_ZL8nextNotev+0x78>
    202e:	10 e0       	ldi	r17, 0x00	; 0
    2030:	20 c0       	rjmp	.+64     	; 0x2072 <_ZL8nextNotev+0x17a>
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	84 e0       	ldi	r24, 0x04	; 4
    2036:	43 c0       	rjmp	.+134    	; 0x20be <_ZL8nextNotev+0x1c6>
    2038:	10 e0       	ldi	r17, 0x00	; 0
    203a:	85 e0       	ldi	r24, 0x05	; 5
    203c:	40 c0       	rjmp	.+128    	; 0x20be <_ZL8nextNotev+0x1c6>
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	87 e0       	ldi	r24, 0x07	; 7
    2042:	3d c0       	rjmp	.+122    	; 0x20be <_ZL8nextNotev+0x1c6>
    2044:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZL16currentCharacterv>
    2048:	8c 36       	cpi	r24, 0x6C	; 108
    204a:	19 f4       	brne	.+6      	; 0x2052 <_ZL8nextNotev+0x15a>
    204c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_ZL8staccato>
    2050:	04 c0       	rjmp	.+8      	; 0x205a <_ZL8nextNotev+0x162>
    2052:	70 92 98 01 	sts	0x0198, r7	; 0x800198 <_ZL8staccato>
    2056:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    205a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    205e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    2062:	2f 5f       	subi	r18, 0xFF	; 255
    2064:	3f 4f       	sbci	r19, 0xFF	; 255
    2066:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    206a:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    206e:	80 cf       	rjmp	.-256    	; 0x1f70 <_ZL8nextNotev+0x78>
    2070:	11 e0       	ldi	r17, 0x01	; 1
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	24 c0       	rjmp	.+72     	; 0x20be <_ZL8nextNotev+0x1c6>
    2076:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZL9getNumberv>
    207a:	bc 01       	movw	r22, r24
    207c:	c5 01       	movw	r24, r10
    207e:	0e 94 13 1b 	call	0x3626	; 0x3626 <__udivmodhi4>
    2082:	66 9e       	mul	r6, r22
    2084:	c0 01       	movw	r24, r0
    2086:	67 9e       	mul	r6, r23
    2088:	90 0d       	add	r25, r0
    208a:	11 24       	eor	r1, r1
    208c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    2090:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    2094:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    2098:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    209c:	0e 94 13 1b 	call	0x3626	; 0x3626 <__udivmodhi4>
    20a0:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    20a4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    20a8:	63 cf       	rjmp	.-314    	; 0x1f70 <_ZL8nextNotev+0x78>
    20aa:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
    20ae:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
    20b2:	69 c0       	rjmp	.+210    	; 0x2186 <_ZL8nextNotev+0x28e>
    20b4:	10 e0       	ldi	r17, 0x00	; 0
    20b6:	89 e0       	ldi	r24, 0x09	; 9
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <_ZL8nextNotev+0x1c6>
    20ba:	10 e0       	ldi	r17, 0x00	; 0
    20bc:	8b e0       	ldi	r24, 0x0B	; 11
    20be:	08 2f       	mov	r16, r24
    20c0:	9c e0       	ldi	r25, 0x0C	; 12
    20c2:	99 9e       	mul	r9, r25
    20c4:	00 0d       	add	r16, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZL16currentCharacterv>
    20cc:	98 2f       	mov	r25, r24
    20ce:	97 7f       	andi	r25, 0xF7	; 247
    20d0:	93 32       	cpi	r25, 0x23	; 35
    20d2:	61 f4       	brne	.+24     	; 0x20ec <_ZL8nextNotev+0x1f4>
    20d4:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    20d8:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    20dc:	2f 5f       	subi	r18, 0xFF	; 255
    20de:	3f 4f       	sbci	r19, 0xFF	; 255
    20e0:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    20e4:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    20e8:	0f 5f       	subi	r16, 0xFF	; 255
    20ea:	ee cf       	rjmp	.-36     	; 0x20c8 <_ZL8nextNotev+0x1d0>
    20ec:	8d 32       	cpi	r24, 0x2D	; 45
    20ee:	71 f4       	brne	.+28     	; 0x210c <_ZL8nextNotev+0x214>
    20f0:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    20f4:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    20f8:	2f 5f       	subi	r18, 0xFF	; 255
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
    20fc:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    2100:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    2104:	01 50       	subi	r16, 0x01	; 1
    2106:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZL16currentCharacterv>
    210a:	f0 cf       	rjmp	.-32     	; 0x20ec <_ZL8nextNotev+0x1f4>
    210c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    2110:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    2114:	81 53       	subi	r24, 0x31	; 49
    2116:	88 30       	cpi	r24, 0x08	; 8
    2118:	50 f4       	brcc	.+20     	; 0x212e <_ZL8nextNotev+0x236>
    211a:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    211e:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2122:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZL9getNumberv>
    2126:	bc 01       	movw	r22, r24
    2128:	c7 01       	movw	r24, r14
    212a:	0e 94 13 1b 	call	0x3626	; 0x3626 <__udivmodhi4>
    212e:	7b 01       	movw	r14, r22
    2130:	f6 94       	lsr	r15
    2132:	e7 94       	ror	r14
    2134:	69 83       	std	Y+1, r22	; 0x01
    2136:	7a 83       	std	Y+2, r23	; 0x02
    2138:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <_ZL16currentCharacterv>
    213c:	69 81       	ldd	r22, Y+1	; 0x01
    213e:	7a 81       	ldd	r23, Y+2	; 0x02
    2140:	8e 32       	cpi	r24, 0x2E	; 46
    2142:	69 f4       	brne	.+26     	; 0x215e <_ZL8nextNotev+0x266>
    2144:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    2148:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    214c:	2f 5f       	subi	r18, 0xFF	; 255
    214e:	3f 4f       	sbci	r19, 0xFF	; 255
    2150:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    2154:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    2158:	6e 0d       	add	r22, r14
    215a:	7f 1d       	adc	r23, r15
    215c:	e9 cf       	rjmp	.-46     	; 0x2130 <_ZL8nextNotev+0x238>
    215e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL8staccato>
    2162:	88 23       	and	r24, r24
    2164:	39 f0       	breq	.+14     	; 0x2174 <_ZL8nextNotev+0x27c>
    2166:	9b 01       	movw	r18, r22
    2168:	36 95       	lsr	r19
    216a:	27 95       	ror	r18
    216c:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <_ZL22staccato_rest_duration>
    2170:	62 1b       	sub	r22, r18
    2172:	71 09       	sbc	r23, r1
    2174:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    2178:	11 23       	and	r17, r17
    217a:	11 f0       	breq	.+4      	; 0x2180 <_ZL8nextNotev+0x288>
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <_ZL8nextNotev+0x28a>
    2180:	80 2f       	mov	r24, r16
    2182:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN15OrangutanBuzzer8playNoteEhjh>
    2186:	22 96       	adiw	r28, 0x02	; 2
    2188:	e0 e1       	ldi	r30, 0x10	; 16
    218a:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <__epilogue_restores__+0x4>

0000218e <__vector_13>:
    218e:	1f 92       	push	r1
    2190:	0f 92       	push	r0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	0f 92       	push	r0
    2196:	11 24       	eor	r1, r1
    2198:	2f 93       	push	r18
    219a:	3f 93       	push	r19
    219c:	4f 93       	push	r20
    219e:	5f 93       	push	r21
    21a0:	6f 93       	push	r22
    21a2:	7f 93       	push	r23
    21a4:	8f 93       	push	r24
    21a6:	9f 93       	push	r25
    21a8:	af 93       	push	r26
    21aa:	bf 93       	push	r27
    21ac:	ef 93       	push	r30
    21ae:	ff 93       	push	r31
    21b0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_ZL13buzzerTimeout>
    21b4:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <_ZL13buzzerTimeout+0x1>
    21b8:	9c 01       	movw	r18, r24
    21ba:	21 50       	subi	r18, 0x01	; 1
    21bc:	31 09       	sbc	r19, r1
    21be:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <_ZL13buzzerTimeout+0x1>
    21c2:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <_ZL13buzzerTimeout>
    21c6:	89 2b       	or	r24, r25
    21c8:	11 f5       	brne	.+68     	; 0x220e <__vector_13+0x80>
    21ca:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    21ce:	78 94       	sei
    21d0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    21d4:	88 7f       	andi	r24, 0xF8	; 248
    21d6:	81 60       	ori	r24, 0x01	; 1
    21d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    21dc:	80 e1       	ldi	r24, 0x10	; 16
    21de:	97 e2       	ldi	r25, 0x27	; 39
    21e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    21e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    21e8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    21ec:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    21f6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    21fa:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    21fe:	89 2b       	or	r24, r25
    2200:	31 f0       	breq	.+12     	; 0x220e <__vector_13+0x80>
    2202:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL17play_mode_setting>
    2206:	81 11       	cpse	r24, r1
    2208:	02 c0       	rjmp	.+4      	; 0x220e <__vector_13+0x80>
    220a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_ZL8nextNotev>
    220e:	ff 91       	pop	r31
    2210:	ef 91       	pop	r30
    2212:	bf 91       	pop	r27
    2214:	af 91       	pop	r26
    2216:	9f 91       	pop	r25
    2218:	8f 91       	pop	r24
    221a:	7f 91       	pop	r23
    221c:	6f 91       	pop	r22
    221e:	5f 91       	pop	r21
    2220:	4f 91       	pop	r20
    2222:	3f 91       	pop	r19
    2224:	2f 91       	pop	r18
    2226:	0f 90       	pop	r0
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	0f 90       	pop	r0
    222c:	1f 90       	pop	r1
    222e:	18 95       	reti

00002230 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    2230:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2234:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    2238:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_ZL17use_program_space>
    2242:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    2246:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <_ZL8nextNotev>
    224a:	08 95       	ret

0000224c <play_from_program_space>:
    224c:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    2250:	08 95       	ret

00002252 <delay_us.constprop.0>:
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	6f 93       	push	r22
    2258:	64 e0       	ldi	r22, 0x04	; 4
    225a:	6a 95       	dec	r22
    225c:	f1 f7       	brne	.-4      	; 0x225a <delay_us.constprop.0+0x8>
    225e:	6f 91       	pop	r22
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	c9 f7       	brne	.-14     	; 0x2256 <delay_us.constprop.0+0x4>
    2264:	08 95       	ret

00002266 <_ZN12OrangutanLCD8busyWaitEv>:
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	1a b1       	in	r17, 0x0a	; 10
    2270:	57 98       	cbi	0x0a, 7	; 10
    2272:	5a 98       	cbi	0x0b, 2	; 11
    2274:	28 9a       	sbi	0x05, 0	; 5
    2276:	c0 e0       	ldi	r28, 0x00	; 0
    2278:	d0 e0       	ldi	r29, 0x00	; 0
    227a:	0e 94 29 11 	call	0x2252	; 0x2252 <delay_us.constprop.0>
    227e:	5c 9a       	sbi	0x0b, 4	; 11
    2280:	0e 94 29 11 	call	0x2252	; 0x2252 <delay_us.constprop.0>
    2284:	09 b1       	in	r16, 0x09	; 9
    2286:	5c 98       	cbi	0x0b, 4	; 11
    2288:	0e 94 29 11 	call	0x2252	; 0x2252 <delay_us.constprop.0>
    228c:	5c 9a       	sbi	0x0b, 4	; 11
    228e:	0e 94 29 11 	call	0x2252	; 0x2252 <delay_us.constprop.0>
    2292:	5c 98       	cbi	0x0b, 4	; 11
    2294:	24 96       	adiw	r28, 0x04	; 4
    2296:	07 ff       	sbrs	r16, 7
    2298:	10 c0       	rjmp	.+32     	; 0x22ba <_ZN12OrangutanLCD8busyWaitEv+0x54>
    229a:	ae 01       	movw	r20, r28
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <lcdTimeout>
    22a4:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <lcdTimeout+0x1>
    22a8:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <lcdTimeout+0x2>
    22ac:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <lcdTimeout+0x3>
    22b0:	48 17       	cp	r20, r24
    22b2:	59 07       	cpc	r21, r25
    22b4:	6a 07       	cpc	r22, r26
    22b6:	7b 07       	cpc	r23, r27
    22b8:	00 f3       	brcs	.-64     	; 0x227a <_ZN12OrangutanLCD8busyWaitEv+0x14>
    22ba:	1a b9       	out	0x0a, r17	; 10
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <_ZN12OrangutanLCD8sendDataEh>:
    22c6:	95 b1       	in	r25, 0x05	; 5
    22c8:	28 2f       	mov	r18, r24
    22ca:	21 70       	andi	r18, 0x01	; 1
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	48 2f       	mov	r20, r24
    22d4:	46 70       	andi	r20, 0x06	; 6
    22d6:	68 e0       	ldi	r22, 0x08	; 8
    22d8:	46 9f       	mul	r20, r22
    22da:	a0 01       	movw	r20, r0
    22dc:	11 24       	eor	r1, r1
    22de:	24 2b       	or	r18, r20
    22e0:	9d 7c       	andi	r25, 0xCD	; 205
    22e2:	29 2b       	or	r18, r25
    22e4:	25 b9       	out	0x05, r18	; 5
    22e6:	9b b1       	in	r25, 0x0b	; 11
    22e8:	88 70       	andi	r24, 0x08	; 8
    22ea:	82 95       	swap	r24
    22ec:	80 7f       	andi	r24, 0xF0	; 240
    22ee:	9f 77       	andi	r25, 0x7F	; 127
    22f0:	89 2b       	or	r24, r25
    22f2:	8b b9       	out	0x0b, r24	; 11
    22f4:	5c 9a       	sbi	0x0b, 4	; 11
    22f6:	0e 94 29 11 	call	0x2252	; 0x2252 <delay_us.constprop.0>
    22fa:	5c 98       	cbi	0x0b, 4	; 11
    22fc:	0e 94 29 11 	call	0x2252	; 0x2252 <delay_us.constprop.0>
    2300:	08 95       	ret

00002302 <_ZN12OrangutanLCD4sendEhhh>:
    2302:	a0 e0       	ldi	r26, 0x00	; 0
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e7 e8       	ldi	r30, 0x87	; 135
    2308:	f1 e1       	ldi	r31, 0x11	; 17
    230a:	0c 94 af 1b 	jmp	0x375e	; 0x375e <__prologue_saves__+0x16>
    230e:	c8 2f       	mov	r28, r24
    2310:	d6 2e       	mov	r13, r22
    2312:	e4 2e       	mov	r14, r20
    2314:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    2318:	81 11       	cpse	r24, r1
    231a:	05 c0       	rjmp	.+10     	; 0x2326 <_ZN12OrangutanLCD4sendEhhh+0x24>
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    2322:	0e 94 ca 11 	call	0x2394	; 0x2394 <_ZN12OrangutanLCD5init2Ev>
    2326:	0e 94 33 11 	call	0x2266	; 0x2266 <_ZN12OrangutanLCD8busyWaitEv>
    232a:	14 b1       	in	r17, 0x04	; 4
    232c:	d5 b1       	in	r29, 0x05	; 5
    232e:	fa b0       	in	r15, 0x0a	; 10
    2330:	0b b1       	in	r16, 0x0b	; 11
    2332:	28 98       	cbi	0x05, 0	; 5
    2334:	dd 20       	and	r13, r13
    2336:	11 f0       	breq	.+4      	; 0x233c <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2338:	5a 9a       	sbi	0x0b, 2	; 11
    233a:	01 c0       	rjmp	.+2      	; 0x233e <_ZN12OrangutanLCD4sendEhhh+0x3c>
    233c:	5a 98       	cbi	0x0b, 2	; 11
    233e:	94 b1       	in	r25, 0x04	; 4
    2340:	92 63       	ori	r25, 0x32	; 50
    2342:	94 b9       	out	0x04, r25	; 4
    2344:	57 9a       	sbi	0x0a, 7	; 10
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	e8 16       	cp	r14, r24
    234a:	29 f0       	breq	.+10     	; 0x2356 <_ZN12OrangutanLCD4sendEhhh+0x54>
    234c:	8c 2f       	mov	r24, r28
    234e:	82 95       	swap	r24
    2350:	8f 70       	andi	r24, 0x0F	; 15
    2352:	0e 94 63 11 	call	0x22c6	; 0x22c6 <_ZN12OrangutanLCD8sendDataEh>
    2356:	8c 2f       	mov	r24, r28
    2358:	8f 70       	andi	r24, 0x0F	; 15
    235a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <_ZN12OrangutanLCD8sendDataEh>
    235e:	fa b8       	out	0x0a, r15	; 10
    2360:	0b b9       	out	0x0b, r16	; 11
    2362:	14 b9       	out	0x04, r17	; 4
    2364:	d5 b9       	out	0x05, r29	; 5
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	e7 e0       	ldi	r30, 0x07	; 7
    236c:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__epilogue_restores__+0x16>

00002370 <_ZN12OrangutanLCD8send_cmdEh>:
    2370:	42 e0       	ldi	r20, 0x02	; 2
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN12OrangutanLCD4sendEhhh>
    2378:	08 95       	ret

0000237a <_ZN12OrangutanLCD9send_dataEh>:
    237a:	42 e0       	ldi	r20, 0x02	; 2
    237c:	61 e0       	ldi	r22, 0x01	; 1
    237e:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN12OrangutanLCD4sendEhhh>
    2382:	08 95       	ret

00002384 <print_character>:
    2384:	0e 94 bd 11 	call	0x237a	; 0x237a <_ZN12OrangutanLCD9send_dataEh>
    2388:	08 95       	ret

0000238a <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	60 e0       	ldi	r22, 0x00	; 0
    238e:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN12OrangutanLCD4sendEhhh>
    2392:	08 95       	ret

00002394 <_ZN12OrangutanLCD5init2Ev>:
    2394:	80 e1       	ldi	r24, 0x10	; 16
    2396:	97 e2       	ldi	r25, 0x27	; 39
    2398:	a0 e0       	ldi	r26, 0x00	; 0
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <lcdTimeout>
    23a0:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <lcdTimeout+0x1>
    23a4:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <lcdTimeout+0x2>
    23a8:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <lcdTimeout+0x3>
    23ac:	52 9a       	sbi	0x0a, 2	; 10
    23ae:	20 9a       	sbi	0x04, 0	; 4
    23b0:	54 9a       	sbi	0x0a, 4	; 10
    23b2:	8e e1       	ldi	r24, 0x1E	; 30
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23c0:	86 e0       	ldi	r24, 0x06	; 6
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
    23d6:	83 e0       	ldi	r24, 0x03	; 3
    23d8:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
    23e4:	82 e0       	ldi	r24, 0x02	; 2
    23e6:	0e 94 c5 11 	call	0x238a	; 0x238a <_ZN12OrangutanLCD13send_4bit_cmdEh>
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
    23f2:	88 e2       	ldi	r24, 0x28	; 40
    23f4:	0e 94 b8 11 	call	0x2370	; 0x2370 <_ZN12OrangutanLCD8send_cmdEh>
    23f8:	88 e0       	ldi	r24, 0x08	; 8
    23fa:	0e 94 b8 11 	call	0x2370	; 0x2370 <_ZN12OrangutanLCD8send_cmdEh>
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	0e 94 b8 11 	call	0x2370	; 0x2370 <_ZN12OrangutanLCD8send_cmdEh>
    2404:	86 e0       	ldi	r24, 0x06	; 6
    2406:	0e 94 b8 11 	call	0x2370	; 0x2370 <_ZN12OrangutanLCD8send_cmdEh>
    240a:	8c e0       	ldi	r24, 0x0C	; 12
    240c:	0e 94 b8 11 	call	0x2370	; 0x2370 <_ZN12OrangutanLCD8send_cmdEh>
    2410:	08 95       	ret

00002412 <_ZN12OrangutanLCD5clearEv>:
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	0e 94 b8 11 	call	0x2370	; 0x2370 <_ZN12OrangutanLCD8send_cmdEh>
    2418:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <printf_chars>
    241c:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <printf_chars+0x1>
    2420:	89 2b       	or	r24, r25
    2422:	f9 f0       	breq	.+62     	; 0x2462 <_ZN12OrangutanLCD5clearEv+0x50>
    2424:	60 e0       	ldi	r22, 0x00	; 0
    2426:	a0 e2       	ldi	r26, 0x20	; 32
    2428:	26 2f       	mov	r18, r22
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2430:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	78 9f       	mul	r23, r24
    243a:	a0 01       	movw	r20, r0
    243c:	79 9f       	mul	r23, r25
    243e:	50 0d       	add	r21, r0
    2440:	11 24       	eor	r1, r1
    2442:	24 17       	cp	r18, r20
    2444:	35 07       	cpc	r19, r21
    2446:	4c f4       	brge	.+18     	; 0x245a <_ZN12OrangutanLCD5clearEv+0x48>
    2448:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <printf_chars>
    244c:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <printf_chars+0x1>
    2450:	e2 0f       	add	r30, r18
    2452:	f3 1f       	adc	r31, r19
    2454:	a0 83       	st	Z, r26
    2456:	6f 5f       	subi	r22, 0xFF	; 255
    2458:	e7 cf       	rjmp	.-50     	; 0x2428 <_ZN12OrangutanLCD5clearEv+0x16>
    245a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <col>
    245e:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <row>
    2462:	08 95       	ret

00002464 <clear>:
    2464:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZN12OrangutanLCD5clearEv>
    2468:	08 95       	ret

0000246a <_ZN12OrangutanLCD5printEPKc>:
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	ec 01       	movw	r28, r24
    2470:	89 91       	ld	r24, Y+
    2472:	88 23       	and	r24, r24
    2474:	19 f0       	breq	.+6      	; 0x247c <_ZN12OrangutanLCD5printEPKc+0x12>
    2476:	0e 94 bd 11 	call	0x237a	; 0x237a <_ZN12OrangutanLCD9send_dataEh>
    247a:	fa cf       	rjmp	.-12     	; 0x2470 <_ZN12OrangutanLCD5printEPKc+0x6>
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	08 95       	ret

00002482 <print>:
    2482:	0e 94 35 12 	call	0x246a	; 0x246a <_ZN12OrangutanLCD5printEPKc>
    2486:	08 95       	ret

00002488 <_ZN12OrangutanLCD5printEm>:
    2488:	aa e0       	ldi	r26, 0x0A	; 10
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	ea e4       	ldi	r30, 0x4A	; 74
    248e:	f2 e1       	ldi	r31, 0x12	; 18
    2490:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__prologue_saves__+0x14>
    2494:	1a e0       	ldi	r17, 0x0A	; 10
    2496:	5a e0       	ldi	r21, 0x0A	; 10
    2498:	c5 2e       	mov	r12, r21
    249a:	d1 2c       	mov	r13, r1
    249c:	e1 2c       	mov	r14, r1
    249e:	f1 2c       	mov	r15, r1
    24a0:	06 2f       	mov	r16, r22
    24a2:	a7 01       	movw	r20, r14
    24a4:	96 01       	movw	r18, r12
    24a6:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__udivmodsi4>
    24aa:	ca 01       	movw	r24, r20
    24ac:	b9 01       	movw	r22, r18
    24ae:	11 50       	subi	r17, 0x01	; 1
    24b0:	e1 e0       	ldi	r30, 0x01	; 1
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	ec 0f       	add	r30, r28
    24b6:	fd 1f       	adc	r31, r29
    24b8:	e1 0f       	add	r30, r17
    24ba:	f1 1d       	adc	r31, r1
    24bc:	00 5d       	subi	r16, 0xD0	; 208
    24be:	2a e0       	ldi	r18, 0x0A	; 10
    24c0:	62 9f       	mul	r22, r18
    24c2:	00 19       	sub	r16, r0
    24c4:	11 24       	eor	r1, r1
    24c6:	00 83       	st	Z, r16
    24c8:	61 15       	cp	r22, r1
    24ca:	71 05       	cpc	r23, r1
    24cc:	81 05       	cpc	r24, r1
    24ce:	91 05       	cpc	r25, r1
    24d0:	39 f7       	brne	.-50     	; 0x24a0 <_ZN12OrangutanLCD5printEm+0x18>
    24d2:	1a 30       	cpi	r17, 0x0A	; 10
    24d4:	58 f4       	brcc	.+22     	; 0x24ec <_ZN12OrangutanLCD5printEm+0x64>
    24d6:	e1 e0       	ldi	r30, 0x01	; 1
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	ec 0f       	add	r30, r28
    24dc:	fd 1f       	adc	r31, r29
    24de:	e1 0f       	add	r30, r17
    24e0:	f1 1d       	adc	r31, r1
    24e2:	80 81       	ld	r24, Z
    24e4:	0e 94 bd 11 	call	0x237a	; 0x237a <_ZN12OrangutanLCD9send_dataEh>
    24e8:	1f 5f       	subi	r17, 0xFF	; 255
    24ea:	f3 cf       	rjmp	.-26     	; 0x24d2 <_ZN12OrangutanLCD5printEm+0x4a>
    24ec:	2a 96       	adiw	r28, 0x0a	; 10
    24ee:	e8 e0       	ldi	r30, 0x08	; 8
    24f0:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__epilogue_restores__+0x14>

000024f4 <_ZN12OrangutanLCD5printEl>:
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	6b 01       	movw	r12, r22
    24fe:	7c 01       	movw	r14, r24
    2500:	97 ff       	sbrs	r25, 7
    2502:	0b c0       	rjmp	.+22     	; 0x251a <_ZN12OrangutanLCD5printEl+0x26>
    2504:	f0 94       	com	r15
    2506:	e0 94       	com	r14
    2508:	d0 94       	com	r13
    250a:	c0 94       	com	r12
    250c:	c1 1c       	adc	r12, r1
    250e:	d1 1c       	adc	r13, r1
    2510:	e1 1c       	adc	r14, r1
    2512:	f1 1c       	adc	r15, r1
    2514:	8d e2       	ldi	r24, 0x2D	; 45
    2516:	0e 94 bd 11 	call	0x237a	; 0x237a <_ZN12OrangutanLCD9send_dataEh>
    251a:	c7 01       	movw	r24, r14
    251c:	b6 01       	movw	r22, r12
    251e:	0e 94 44 12 	call	0x2488	; 0x2488 <_ZN12OrangutanLCD5printEm>
    2522:	ff 90       	pop	r15
    2524:	ef 90       	pop	r14
    2526:	df 90       	pop	r13
    2528:	cf 90       	pop	r12
    252a:	08 95       	ret

0000252c <print_long>:
    252c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <_ZN12OrangutanLCD5printEl>
    2530:	08 95       	ret

00002532 <_ZN12OrangutanLCD6gotoXYEhh>:
    2532:	a5 e0       	ldi	r26, 0x05	; 5
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	ef e9       	ldi	r30, 0x9F	; 159
    2538:	f2 e1       	ldi	r31, 0x12	; 18
    253a:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__prologue_saves__+0x1e>
    253e:	18 2f       	mov	r17, r24
    2540:	80 e8       	ldi	r24, 0x80	; 128
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	80 ec       	ldi	r24, 0xC0	; 192
    2546:	8a 83       	std	Y+2, r24	; 0x02
    2548:	84 e9       	ldi	r24, 0x94	; 148
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	84 ed       	ldi	r24, 0xD4	; 212
    254e:	8c 83       	std	Y+4, r24	; 0x04
    2550:	fe 01       	movw	r30, r28
    2552:	e6 0f       	add	r30, r22
    2554:	f1 1d       	adc	r31, r1
    2556:	81 81       	ldd	r24, Z+1	; 0x01
    2558:	81 0f       	add	r24, r17
    255a:	6d 83       	std	Y+5, r22	; 0x05
    255c:	0e 94 b8 11 	call	0x2370	; 0x2370 <_ZN12OrangutanLCD8send_cmdEh>
    2560:	10 93 a1 01 	sts	0x01A1, r17	; 0x8001a1 <col>
    2564:	6d 81       	ldd	r22, Y+5	; 0x05
    2566:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <row>
    256a:	25 96       	adiw	r28, 0x05	; 5
    256c:	e3 e0       	ldi	r30, 0x03	; 3
    256e:	0c 94 cf 1b 	jmp	0x379e	; 0x379e <__epilogue_restores__+0x1e>

00002572 <lcd_goto_xy>:
    2572:	0e 94 99 12 	call	0x2532	; 0x2532 <_ZN12OrangutanLCD6gotoXYEhh>
    2576:	08 95       	ret

00002578 <_ZN16OrangutanDigital9setOutputEhh>:
    2578:	88 30       	cpi	r24, 0x08	; 8
    257a:	58 f4       	brcc	.+22     	; 0x2592 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    257c:	91 e0       	ldi	r25, 0x01	; 1
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2580:	99 0f       	add	r25, r25
    2582:	8a 95       	dec	r24
    2584:	ea f7       	brpl	.-6      	; 0x2580 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2586:	89 2f       	mov	r24, r25
    2588:	aa e2       	ldi	r26, 0x2A	; 42
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	eb e2       	ldi	r30, 0x2B	; 43
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	21 c0       	rjmp	.+66     	; 0x25d4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2592:	8e 30       	cpi	r24, 0x0E	; 14
    2594:	60 f4       	brcc	.+24     	; 0x25ae <_ZN16OrangutanDigital9setOutputEhh+0x36>
    2596:	98 ef       	ldi	r25, 0xF8	; 248
    2598:	98 0f       	add	r25, r24
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    259e:	88 0f       	add	r24, r24
    25a0:	9a 95       	dec	r25
    25a2:	ea f7       	brpl	.-6      	; 0x259e <_ZN16OrangutanDigital9setOutputEhh+0x26>
    25a4:	a4 e2       	ldi	r26, 0x24	; 36
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e5 e2       	ldi	r30, 0x25	; 37
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	13 c0       	rjmp	.+38     	; 0x25d4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    25ae:	85 31       	cpi	r24, 0x15	; 21
    25b0:	60 f4       	brcc	.+24     	; 0x25ca <_ZN16OrangutanDigital9setOutputEhh+0x52>
    25b2:	92 ef       	ldi	r25, 0xF2	; 242
    25b4:	98 0f       	add	r25, r24
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <_ZN16OrangutanDigital9setOutputEhh+0x44>
    25ba:	88 0f       	add	r24, r24
    25bc:	9a 95       	dec	r25
    25be:	ea f7       	brpl	.-6      	; 0x25ba <_ZN16OrangutanDigital9setOutputEhh+0x42>
    25c0:	a7 e2       	ldi	r26, 0x27	; 39
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e8 e2       	ldi	r30, 0x28	; 40
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	05 c0       	rjmp	.+10     	; 0x25d4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	a0 e0       	ldi	r26, 0x00	; 0
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e0 e0       	ldi	r30, 0x00	; 0
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	6f 3f       	cpi	r22, 0xFF	; 255
    25d6:	19 f4       	brne	.+6      	; 0x25de <_ZN16OrangutanDigital9setOutputEhh+0x66>
    25d8:	90 81       	ld	r25, Z
    25da:	98 27       	eor	r25, r24
    25dc:	09 c0       	rjmp	.+18     	; 0x25f0 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    25de:	66 23       	and	r22, r22
    25e0:	19 f0       	breq	.+6      	; 0x25e8 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    25e2:	90 81       	ld	r25, Z
    25e4:	98 2b       	or	r25, r24
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    25e8:	20 81       	ld	r18, Z
    25ea:	98 2f       	mov	r25, r24
    25ec:	90 95       	com	r25
    25ee:	92 23       	and	r25, r18
    25f0:	90 83       	st	Z, r25
    25f2:	9c 91       	ld	r25, X
    25f4:	98 2b       	or	r25, r24
    25f6:	9c 93       	st	X, r25
    25f8:	08 95       	ret

000025fa <_ZN15OrangutanMotors5init2Ev>:
    25fa:	83 ef       	ldi	r24, 0xF3	; 243
    25fc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2600:	84 bd       	out	0x24, r24	; 36
    2602:	82 e0       	ldi	r24, 0x02	; 2
    2604:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2608:	85 bd       	out	0x25, r24	; 37
    260a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    260e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2612:	18 bc       	out	0x28, r1	; 40
    2614:	17 bc       	out	0x27, r1	; 39
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	86 e0       	ldi	r24, 0x06	; 6
    261a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN16OrangutanDigital9setOutputEhh>
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	85 e0       	ldi	r24, 0x05	; 5
    2622:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN16OrangutanDigital9setOutputEhh>
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	8b e0       	ldi	r24, 0x0B	; 11
    262a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN16OrangutanDigital9setOutputEhh>
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	83 e0       	ldi	r24, 0x03	; 3
    2632:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN16OrangutanDigital9setOutputEhh>
    2636:	08 95       	ret

00002638 <_ZN15OrangutanMotors4initEv>:
    2638:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    263c:	81 11       	cpse	r24, r1
    263e:	05 c0       	rjmp	.+10     	; 0x264a <_ZN15OrangutanMotors4initEv+0x12>
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    2646:	0e 94 fd 12 	call	0x25fa	; 0x25fa <_ZN15OrangutanMotors5init2Ev>
    264a:	08 95       	ret

0000264c <_ZN15OrangutanMotors10setM1SpeedEi>:
    264c:	cf 93       	push	r28
    264e:	df 93       	push	r29
    2650:	ec 01       	movw	r28, r24
    2652:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN15OrangutanMotors4initEv>
    2656:	d7 ff       	sbrs	r29, 7
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    265a:	d1 95       	neg	r29
    265c:	c1 95       	neg	r28
    265e:	d1 09       	sbc	r29, r1
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	01 c0       	rjmp	.+2      	; 0x2666 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	cf 3f       	cpi	r28, 0xFF	; 255
    2668:	d1 05       	cpc	r29, r1
    266a:	19 f0       	breq	.+6      	; 0x2672 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    266c:	14 f0       	brlt	.+4      	; 0x2672 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    266e:	cf ef       	ldi	r28, 0xFF	; 255
    2670:	d0 e0       	ldi	r29, 0x00	; 0
    2672:	88 23       	and	r24, r24
    2674:	19 f0       	breq	.+6      	; 0x267c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2676:	18 bc       	out	0x28, r1	; 40
    2678:	c7 bd       	out	0x27, r28	; 39
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    267c:	c8 bd       	out	0x28, r28	; 40
    267e:	17 bc       	out	0x27, r1	; 39
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	08 95       	ret

00002686 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	ec 01       	movw	r28, r24
    268c:	0e 94 1c 13 	call	0x2638	; 0x2638 <_ZN15OrangutanMotors4initEv>
    2690:	d7 ff       	sbrs	r29, 7
    2692:	05 c0       	rjmp	.+10     	; 0x269e <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2694:	d1 95       	neg	r29
    2696:	c1 95       	neg	r28
    2698:	d1 09       	sbc	r29, r1
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	01 c0       	rjmp	.+2      	; 0x26a0 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	cf 3f       	cpi	r28, 0xFF	; 255
    26a2:	d1 05       	cpc	r29, r1
    26a4:	19 f0       	breq	.+6      	; 0x26ac <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    26a6:	14 f0       	brlt	.+4      	; 0x26ac <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    26a8:	cf ef       	ldi	r28, 0xFF	; 255
    26aa:	d0 e0       	ldi	r29, 0x00	; 0
    26ac:	88 23       	and	r24, r24
    26ae:	29 f0       	breq	.+10     	; 0x26ba <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    26b0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    26b4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    26b8:	04 c0       	rjmp	.+8      	; 0x26c2 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    26ba:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    26be:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	08 95       	ret

000026c8 <_ZN15OrangutanMotors9setSpeedsEii>:
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	eb 01       	movw	r28, r22
    26ce:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN15OrangutanMotors10setM1SpeedEi>
    26d2:	ce 01       	movw	r24, r28
    26d4:	0e 94 43 13 	call	0x2686	; 0x2686 <_ZN15OrangutanMotors10setM2SpeedEi>
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	08 95       	ret

000026de <set_motors>:
    26de:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN15OrangutanMotors9setSpeedsEii>
    26e2:	08 95       	ret

000026e4 <_ZN20OrangutanPushbuttons5init2Ev>:
    26e4:	84 b1       	in	r24, 0x04	; 4
    26e6:	8d 7c       	andi	r24, 0xCD	; 205
    26e8:	84 b9       	out	0x04, r24	; 4
    26ea:	85 b1       	in	r24, 0x05	; 5
    26ec:	82 63       	ori	r24, 0x32	; 50
    26ee:	85 b9       	out	0x05, r24	; 5
    26f0:	85 e0       	ldi	r24, 0x05	; 5
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	6f 93       	push	r22
    26f6:	64 e0       	ldi	r22, 0x04	; 4
    26f8:	6a 95       	dec	r22
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    26fc:	6f 91       	pop	r22
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	c9 f7       	brne	.-14     	; 0x26f4 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2702:	08 95       	ret

00002704 <_ZN20OrangutanPushbuttons4initEv>:
    2704:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2708:	81 11       	cpse	r24, r1
    270a:	05 c0       	rjmp	.+10     	; 0x2716 <_ZN20OrangutanPushbuttons4initEv+0x12>
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2712:	0e 94 72 13 	call	0x26e4	; 0x26e4 <_ZN20OrangutanPushbuttons5init2Ev>
    2716:	08 95       	ret

00002718 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2718:	cf 93       	push	r28
    271a:	c8 2f       	mov	r28, r24
    271c:	0e 94 82 13 	call	0x2704	; 0x2704 <_ZN20OrangutanPushbuttons4initEv>
    2720:	83 b1       	in	r24, 0x03	; 3
    2722:	8c 23       	and	r24, r28
    2724:	e9 f3       	breq	.-6      	; 0x2720 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2726:	8a e0       	ldi	r24, 0x0A	; 10
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <delay_ms>
    272e:	83 b1       	in	r24, 0x03	; 3
    2730:	8c 23       	and	r24, r28
    2732:	b1 f3       	breq	.-20     	; 0x2720 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2734:	83 b1       	in	r24, 0x03	; 3
    2736:	8c 23       	and	r24, r28
    2738:	cf 91       	pop	r28
    273a:	08 95       	ret

0000273c <wait_for_button_release>:
    273c:	0e 94 8c 13 	call	0x2718	; 0x2718 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2740:	08 95       	ret

00002742 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2742:	a1 e0       	ldi	r26, 0x01	; 1
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e7 ea       	ldi	r30, 0xA7	; 167
    2748:	f3 e1       	ldi	r31, 0x13	; 19
    274a:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__prologue_saves__+0x20>
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	0e 94 82 13 	call	0x2704	; 0x2704 <_ZN20OrangutanPushbuttons4initEv>
    2754:	93 b1       	in	r25, 0x03	; 3
    2756:	90 95       	com	r25
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	89 23       	and	r24, r25
    275c:	21 96       	adiw	r28, 0x01	; 1
    275e:	e2 e0       	ldi	r30, 0x02	; 2
    2760:	0c 94 d0 1b 	jmp	0x37a0	; 0x37a0 <__epilogue_restores__+0x20>

00002764 <button_is_pressed>:
    2764:	0e 94 a1 13 	call	0x2742	; 0x2742 <_ZN20OrangutanPushbuttons9isPressedEh>
    2768:	08 95       	ret

0000276a <serial_receive_buffer_full>:
    276a:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <_ZN15OrangutanSerial5portsE+0x2>
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <_ZN15OrangutanSerial5portsE+0x4>
    2774:	29 13       	cpse	r18, r25
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	08 95       	ret

0000277a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	9a e0       	ldi	r25, 0x0A	; 10
    2780:	89 9f       	mul	r24, r25
    2782:	f0 01       	movw	r30, r0
    2784:	11 24       	eor	r1, r1
    2786:	eb 55       	subi	r30, 0x5B	; 91
    2788:	fe 4f       	sbci	r31, 0xFE	; 254
    278a:	80 85       	ldd	r24, Z+8	; 0x08
    278c:	91 85       	ldd	r25, Z+9	; 0x09
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	21 f0       	breq	.+8      	; 0x279a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2792:	52 81       	ldd	r21, Z+2	; 0x02
    2794:	44 81       	ldd	r20, Z+4	; 0x04
    2796:	54 17       	cp	r21, r20
    2798:	80 f0       	brcs	.+32     	; 0x27ba <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    279a:	8a e0       	ldi	r24, 0x0A	; 10
    279c:	82 9f       	mul	r24, r18
    279e:	f0 01       	movw	r30, r0
    27a0:	83 9f       	mul	r24, r19
    27a2:	f0 0d       	add	r31, r0
    27a4:	11 24       	eor	r1, r1
    27a6:	eb 55       	subi	r30, 0x5B	; 91
    27a8:	fe 4f       	sbci	r31, 0xFE	; 254
    27aa:	92 81       	ldd	r25, Z+2	; 0x02
    27ac:	84 81       	ldd	r24, Z+4	; 0x04
    27ae:	98 13       	cpse	r25, r24
    27b0:	0e c0       	rjmp	.+28     	; 0x27ce <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    27b2:	85 81       	ldd	r24, Z+5	; 0x05
    27b4:	81 11       	cpse	r24, r1
    27b6:	0a c0       	rjmp	.+20     	; 0x27cc <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    27b8:	08 95       	ret
    27ba:	42 81       	ldd	r20, Z+2	; 0x02
    27bc:	dc 01       	movw	r26, r24
    27be:	a4 0f       	add	r26, r20
    27c0:	b1 1d       	adc	r27, r1
    27c2:	6c 93       	st	X, r22
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	8f 5f       	subi	r24, 0xFF	; 255
    27c8:	82 83       	std	Z+2, r24	; 0x02
    27ca:	e7 cf       	rjmp	.-50     	; 0x279a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    27cc:	12 82       	std	Z+2, r1	; 0x02
    27ce:	08 95       	ret

000027d0 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    27d8:	9f 77       	andi	r25, 0x7F	; 127
    27da:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    27de:	c8 2f       	mov	r28, r24
    27e0:	d0 e0       	ldi	r29, 0x00	; 0
    27e2:	9a e0       	ldi	r25, 0x0A	; 10
    27e4:	89 9f       	mul	r24, r25
    27e6:	f0 01       	movw	r30, r0
    27e8:	11 24       	eor	r1, r1
    27ea:	eb 55       	subi	r30, 0x5B	; 91
    27ec:	fe 4f       	sbci	r31, 0xFE	; 254
    27ee:	20 85       	ldd	r18, Z+8	; 0x08
    27f0:	31 85       	ldd	r19, Z+9	; 0x09
    27f2:	23 2b       	or	r18, r19
    27f4:	41 f0       	breq	.+16     	; 0x2806 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    27f6:	22 81       	ldd	r18, Z+2	; 0x02
    27f8:	94 81       	ldd	r25, Z+4	; 0x04
    27fa:	29 17       	cp	r18, r25
    27fc:	20 f4       	brcc	.+8      	; 0x2806 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    27fe:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2802:	97 fd       	sbrc	r25, 7
    2804:	11 c0       	rjmp	.+34     	; 0x2828 <_ZN15OrangutanSerial15serial_rx_checkEh+0x58>
    2806:	8a e0       	ldi	r24, 0x0A	; 10
    2808:	8c 9f       	mul	r24, r28
    280a:	f0 01       	movw	r30, r0
    280c:	8d 9f       	mul	r24, r29
    280e:	f0 0d       	add	r31, r0
    2810:	11 24       	eor	r1, r1
    2812:	eb 55       	subi	r30, 0x5B	; 91
    2814:	fe 4f       	sbci	r31, 0xFE	; 254
    2816:	80 81       	ld	r24, Z
    2818:	81 11       	cpse	r24, r1
    281a:	0b c0       	rjmp	.+22     	; 0x2832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    281c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2820:	80 68       	ori	r24, 0x80	; 128
    2822:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2826:	05 c0       	rjmp	.+10     	; 0x2832 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2828:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    282c:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2830:	ea cf       	rjmp	.-44     	; 0x2806 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2832:	df 91       	pop	r29
    2834:	cf 91       	pop	r28
    2836:	08 95       	ret

00002838 <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    2838:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    283c:	9f 77       	andi	r25, 0x7F	; 127
    283e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2842:	9a e0       	ldi	r25, 0x0A	; 10
    2844:	89 9f       	mul	r24, r25
    2846:	f0 01       	movw	r30, r0
    2848:	11 24       	eor	r1, r1
    284a:	eb 55       	subi	r30, 0x5B	; 91
    284c:	fe 4f       	sbci	r31, 0xFE	; 254
    284e:	71 87       	std	Z+9, r23	; 0x09
    2850:	60 87       	std	Z+8, r22	; 0x08
    2852:	12 82       	std	Z+2, r1	; 0x02
    2854:	44 83       	std	Z+4, r20	; 0x04
    2856:	25 83       	std	Z+5, r18	; 0x05
    2858:	80 81       	ld	r24, Z
    285a:	81 11       	cpse	r24, r1
    285c:	05 c0       	rjmp	.+10     	; 0x2868 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x30>
    285e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2862:	80 68       	ori	r24, 0x80	; 128
    2864:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2868:	08 95       	ret

0000286a <_ZN15OrangutanSerial7receiveEPch>:
    286a:	46 2f       	mov	r20, r22
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	bc 01       	movw	r22, r24
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	0e 94 1c 14 	call	0x2838	; 0x2838 <_ZN15OrangutanSerial14receive_inlineEhPchh>
    2876:	08 95       	ret

00002878 <serial_receive>:
    2878:	0e 94 35 14 	call	0x286a	; 0x286a <_ZN15OrangutanSerial7receiveEPch>
    287c:	08 95       	ret

0000287e <__vector_18>:
    287e:	1f 92       	push	r1
    2880:	0f 92       	push	r0
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	0f 92       	push	r0
    2886:	11 24       	eor	r1, r1
    2888:	2f 93       	push	r18
    288a:	3f 93       	push	r19
    288c:	4f 93       	push	r20
    288e:	5f 93       	push	r21
    2890:	6f 93       	push	r22
    2892:	7f 93       	push	r23
    2894:	8f 93       	push	r24
    2896:	9f 93       	push	r25
    2898:	af 93       	push	r26
    289a:	bf 93       	push	r27
    289c:	ef 93       	push	r30
    289e:	ff 93       	push	r31
    28a0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    28aa:	ff 91       	pop	r31
    28ac:	ef 91       	pop	r30
    28ae:	bf 91       	pop	r27
    28b0:	af 91       	pop	r26
    28b2:	9f 91       	pop	r25
    28b4:	8f 91       	pop	r24
    28b6:	7f 91       	pop	r23
    28b8:	6f 91       	pop	r22
    28ba:	5f 91       	pop	r21
    28bc:	4f 91       	pop	r20
    28be:	3f 91       	pop	r19
    28c0:	2f 91       	pop	r18
    28c2:	0f 90       	pop	r0
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	0f 90       	pop	r0
    28c8:	1f 90       	pop	r1
    28ca:	18 95       	reti

000028cc <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    28cc:	9a e0       	ldi	r25, 0x0A	; 10
    28ce:	89 9f       	mul	r24, r25
    28d0:	f0 01       	movw	r30, r0
    28d2:	11 24       	eor	r1, r1
    28d4:	eb 55       	subi	r30, 0x5B	; 91
    28d6:	fe 4f       	sbci	r31, 0xFE	; 254
    28d8:	86 81       	ldd	r24, Z+6	; 0x06
    28da:	97 81       	ldd	r25, Z+7	; 0x07
    28dc:	89 2b       	or	r24, r25
    28de:	59 f0       	breq	.+22     	; 0x28f6 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	83 81       	ldd	r24, Z+3	; 0x03
    28e4:	98 17       	cp	r25, r24
    28e6:	38 f4       	brcc	.+14     	; 0x28f6 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    28e8:	80 81       	ld	r24, Z
    28ea:	81 11       	cpse	r24, r1
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    28ee:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    28f2:	80 62       	ori	r24, 0x20	; 32
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    28f6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    28fa:	8f 7d       	andi	r24, 0xDF	; 223
    28fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2900:	08 95       	ret

00002902 <_ZN15OrangutanSerial15initUART_inlineEh>:
    2902:	9a e0       	ldi	r25, 0x0A	; 10
    2904:	89 9f       	mul	r24, r25
    2906:	f0 01       	movw	r30, r0
    2908:	11 24       	eor	r1, r1
    290a:	eb 55       	subi	r30, 0x5B	; 91
    290c:	fe 4f       	sbci	r31, 0xFE	; 254
    290e:	90 81       	ld	r25, Z
    2910:	91 11       	cpse	r25, r1
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2914:	98 e9       	ldi	r25, 0x98	; 152
    2916:	01 c0       	rjmp	.+2      	; 0x291a <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    2918:	98 e1       	ldi	r25, 0x18	; 24
    291a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    291e:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2922:	78 94       	sei
    2924:	08 95       	ret

00002926 <serial_set_baud_rate>:
    2926:	cf 92       	push	r12
    2928:	df 92       	push	r13
    292a:	ef 92       	push	r14
    292c:	ff 92       	push	r15
    292e:	6b 01       	movw	r12, r22
    2930:	7c 01       	movw	r14, r24
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	0e 94 81 14 	call	0x2902	; 0x2902 <_ZN15OrangutanSerial15initUART_inlineEh>
    2938:	a8 ef       	ldi	r26, 0xF8	; 248
    293a:	bf ef       	ldi	r27, 0xFF	; 255
    293c:	a7 01       	movw	r20, r14
    293e:	96 01       	movw	r18, r12
    2940:	0e 94 9f 1b 	call	0x373e	; 0x373e <__mulohisi3>
    2944:	73 5d       	subi	r23, 0xD3	; 211
    2946:	8e 4c       	sbci	r24, 0xCE	; 206
    2948:	9e 4f       	sbci	r25, 0xFE	; 254
    294a:	e4 e0       	ldi	r30, 0x04	; 4
    294c:	22 0f       	add	r18, r18
    294e:	33 1f       	adc	r19, r19
    2950:	44 1f       	adc	r20, r20
    2952:	55 1f       	adc	r21, r21
    2954:	ea 95       	dec	r30
    2956:	d1 f7       	brne	.-12     	; 0x294c <serial_set_baud_rate+0x26>
    2958:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__udivmodsi4>
    295c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2960:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
    296c:	08 95       	ret

0000296e <_ZN15OrangutanSerial4sendEPch>:
    296e:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x7>
    2972:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_ZN15OrangutanSerial5portsE+0x6>
    2976:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    297a:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2984:	08 95       	ret

00002986 <serial_send>:
    2986:	0e 94 b7 14 	call	0x296e	; 0x296e <_ZN15OrangutanSerial4sendEPch>
    298a:	08 95       	ret

0000298c <_ZN15OrangutanSerial11uart_tx_isrEh>:
    298c:	9a e0       	ldi	r25, 0x0A	; 10
    298e:	89 9f       	mul	r24, r25
    2990:	f0 01       	movw	r30, r0
    2992:	11 24       	eor	r1, r1
    2994:	eb 55       	subi	r30, 0x5B	; 91
    2996:	fe 4f       	sbci	r31, 0xFE	; 254
    2998:	26 81       	ldd	r18, Z+6	; 0x06
    299a:	37 81       	ldd	r19, Z+7	; 0x07
    299c:	21 15       	cp	r18, r1
    299e:	31 05       	cpc	r19, r1
    29a0:	41 f0       	breq	.+16     	; 0x29b2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    29a2:	41 81       	ldd	r20, Z+1	; 0x01
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	49 17       	cp	r20, r25
    29a8:	20 f4       	brcc	.+8      	; 0x29b2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    29aa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    29ae:	95 fd       	sbrc	r25, 5
    29b0:	03 c0       	rjmp	.+6      	; 0x29b8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    29b2:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    29b6:	08 95       	ret
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	d9 01       	movw	r26, r18
    29bc:	a9 0f       	add	r26, r25
    29be:	b1 1d       	adc	r27, r1
    29c0:	9c 91       	ld	r25, X
    29c2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	9f 5f       	subi	r25, 0xFF	; 255
    29ca:	91 83       	std	Z+1, r25	; 0x01
    29cc:	f2 cf       	rjmp	.-28     	; 0x29b2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

000029ce <_ZN15OrangutanSerial5checkEv>:
    29ce:	e1 ec       	ldi	r30, 0xC1	; 193
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	8f 7d       	andi	r24, 0xDF	; 223
    29d6:	80 83       	st	Z, r24
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN15OrangutanSerial11uart_tx_isrEh>
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN15OrangutanSerial15serial_rx_checkEh>
    29e4:	08 95       	ret

000029e6 <_ZN15OrangutanSerial12sendBlockingEPch>:
    29e6:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x7>
    29ea:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_ZN15OrangutanSerial5portsE+0x6>
    29ee:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    29f2:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	0e 94 66 14 	call	0x28cc	; 0x28cc <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    29fc:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    2a00:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    2a04:	98 17       	cp	r25, r24
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <_ZN15OrangutanSerial12sendBlockingEPch+0x28>
    2a08:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN15OrangutanSerial5checkEv>
    2a0c:	f7 cf       	rjmp	.-18     	; 0x29fc <_ZN15OrangutanSerial12sendBlockingEPch+0x16>
    2a0e:	08 95       	ret

00002a10 <serial_send_blocking>:
    2a10:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN15OrangutanSerial12sendBlockingEPch>
    2a14:	08 95       	ret

00002a16 <__vector_19>:
    2a16:	1f 92       	push	r1
    2a18:	0f 92       	push	r0
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	0f 92       	push	r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	2f 93       	push	r18
    2a22:	3f 93       	push	r19
    2a24:	4f 93       	push	r20
    2a26:	5f 93       	push	r21
    2a28:	6f 93       	push	r22
    2a2a:	7f 93       	push	r23
    2a2c:	8f 93       	push	r24
    2a2e:	9f 93       	push	r25
    2a30:	af 93       	push	r26
    2a32:	bf 93       	push	r27
    2a34:	ef 93       	push	r30
    2a36:	ff 93       	push	r31
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	0e 94 c6 14 	call	0x298c	; 0x298c <_ZN15OrangutanSerial11uart_tx_isrEh>
    2a3e:	ff 91       	pop	r31
    2a40:	ef 91       	pop	r30
    2a42:	bf 91       	pop	r27
    2a44:	af 91       	pop	r26
    2a46:	9f 91       	pop	r25
    2a48:	8f 91       	pop	r24
    2a4a:	7f 91       	pop	r23
    2a4c:	6f 91       	pop	r22
    2a4e:	5f 91       	pop	r21
    2a50:	4f 91       	pop	r20
    2a52:	3f 91       	pop	r19
    2a54:	2f 91       	pop	r18
    2a56:	0f 90       	pop	r0
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	0f 90       	pop	r0
    2a5c:	1f 90       	pop	r1
    2a5e:	18 95       	reti

00002a60 <__vector_9>:
    2a60:	2f 92       	push	r2
    2a62:	8f 93       	push	r24
    2a64:	9f 93       	push	r25
    2a66:	2f b6       	in	r2, 0x3f	; 63
    2a68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <tickCount+0x1>
    2a6c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <tickCount+0x2>
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <tickCount+0x1>
    2a76:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <tickCount+0x2>
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <tickCount+0x3>
    2a80:	89 1f       	adc	r24, r25
    2a82:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <tickCount+0x3>
    2a86:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <us_over_10+0x1>
    2a8a:	9c 5f       	subi	r25, 0xFC	; 252
    2a8c:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <us_over_10+0x1>
    2a90:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <us_over_10>
    2a94:	80 51       	subi	r24, 0x10	; 16
    2a96:	97 42       	sbci	r25, 0x27	; 39
    2a98:	c0 f0       	brcs	.+48     	; 0x2aca <end>
    2a9a:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <us_over_10+0x1>
    2a9e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <us_over_10>
    2aa2:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <msCounter>
    2aa6:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <msCounter+0x1>
    2aaa:	01 96       	adiw	r24, 0x01	; 1
    2aac:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <msCounter>
    2ab0:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <msCounter+0x1>
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <msCounter+0x2>
    2aba:	89 1f       	adc	r24, r25
    2abc:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <msCounter+0x2>
    2ac0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <msCounter+0x3>
    2ac4:	89 1f       	adc	r24, r25
    2ac6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <msCounter+0x3>

00002aca <end>:
    2aca:	2f be       	out	0x3f, r2	; 63
    2acc:	9f 91       	pop	r25
    2ace:	8f 91       	pop	r24
    2ad0:	2f 90       	pop	r2
    2ad2:	18 95       	reti

00002ad4 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2ad4:	28 ee       	ldi	r18, 0xE8	; 232
    2ad6:	33 e0       	ldi	r19, 0x03	; 3
    2ad8:	01 97       	sbiw	r24, 0x01	; 1
    2ada:	48 f0       	brcs	.+18     	; 0x2aee <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2adc:	f9 01       	movw	r30, r18
    2ade:	6f 93       	push	r22
    2ae0:	64 e0       	ldi	r22, 0x04	; 4
    2ae2:	6a 95       	dec	r22
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2ae6:	6f 91       	pop	r22
    2ae8:	31 97       	sbiw	r30, 0x01	; 1
    2aea:	c9 f7       	brne	.-14     	; 0x2ade <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2aec:	f5 cf       	rjmp	.-22     	; 0x2ad8 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2aee:	08 95       	ret

00002af0 <delay_ms>:
    2af0:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <_ZN13OrangutanTime17delayMillisecondsEj>
    2af4:	08 95       	ret

00002af6 <_ZN13OrangutanTime5init2Ev>:
    2af6:	e0 e7       	ldi	r30, 0x70	; 112
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	8e 7f       	andi	r24, 0xFE	; 254
    2afe:	80 83       	st	Z, r24
    2b00:	a0 eb       	ldi	r26, 0xB0	; 176
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	8c 91       	ld	r24, X
    2b06:	83 60       	ori	r24, 0x03	; 3
    2b08:	8c 93       	st	X, r24
    2b0a:	a1 eb       	ldi	r26, 0xB1	; 177
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	8c 91       	ld	r24, X
    2b10:	80 7f       	andi	r24, 0xF0	; 240
    2b12:	8c 93       	st	X, r24
    2b14:	8c 91       	ld	r24, X
    2b16:	82 60       	ori	r24, 0x02	; 2
    2b18:	8c 93       	st	X, r24
    2b1a:	b8 9a       	sbi	0x17, 0	; 23
    2b1c:	80 81       	ld	r24, Z
    2b1e:	81 60       	ori	r24, 0x01	; 1
    2b20:	80 83       	st	Z, r24
    2b22:	78 94       	sei
    2b24:	08 95       	ret

00002b26 <_ZN13OrangutanTime4initEv>:
    2b26:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2b2a:	81 11       	cpse	r24, r1
    2b2c:	05 c0       	rjmp	.+10     	; 0x2b38 <_ZN13OrangutanTime4initEv+0x12>
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2b34:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <_ZN13OrangutanTime5init2Ev>
    2b38:	08 95       	ret

00002b3a <_ZN13OrangutanTime5resetEv>:
    2b3a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZN13OrangutanTime4initEv>
    2b3e:	e0 e7       	ldi	r30, 0x70	; 112
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	8e 7f       	andi	r24, 0xFE	; 254
    2b46:	80 83       	st	Z, r24
    2b48:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <msCounter>
    2b4c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <msCounter+0x1>
    2b50:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <msCounter+0x2>
    2b54:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <msCounter+0x3>
    2b58:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <us_over_10+0x1>
    2b5c:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <us_over_10>
    2b60:	80 81       	ld	r24, Z
    2b62:	81 60       	ori	r24, 0x01	; 1
    2b64:	80 83       	st	Z, r24
    2b66:	08 95       	ret

00002b68 <calibrate_line_sensors>:
    2b68:	68 2f       	mov	r22, r24
    2b6a:	89 eb       	ldi	r24, 0xB9	; 185
    2b6c:	91 e0       	ldi	r25, 0x01	; 1
    2b6e:	0e 94 a3 19 	call	0x3346	; 0x3346 <_ZN16PololuQTRSensors9calibrateEh>
    2b72:	08 95       	ret

00002b74 <read_line_sensors_calibrated>:
    2b74:	46 2f       	mov	r20, r22
    2b76:	bc 01       	movw	r22, r24
    2b78:	89 eb       	ldi	r24, 0xB9	; 185
    2b7a:	91 e0       	ldi	r25, 0x01	; 1
    2b7c:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2b80:	08 95       	ret

00002b82 <read_line>:
    2b82:	46 2f       	mov	r20, r22
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	bc 01       	movw	r22, r24
    2b88:	89 eb       	ldi	r24, 0xB9	; 185
    2b8a:	91 e0       	ldi	r25, 0x01	; 1
    2b8c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN16PololuQTRSensors8readLineEPjhh>
    2b90:	08 95       	ret

00002b92 <_ZN9Pololu3pi4initEjh>:
    2b92:	0f 93       	push	r16
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	00 d0       	rcall	.+0      	; 0x2b9a <_ZN9Pololu3pi4initEjh+0x8>
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <_ZN9Pololu3pi4initEjh+0xa>
    2b9c:	1f 92       	push	r1
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	9c 01       	movw	r18, r24
    2ba4:	85 e0       	ldi	r24, 0x05	; 5
    2ba6:	e0 e5       	ldi	r30, 0x50	; 80
    2ba8:	f1 e0       	ldi	r31, 0x01	; 1
    2baa:	de 01       	movw	r26, r28
    2bac:	11 96       	adiw	r26, 0x01	; 1
    2bae:	01 90       	ld	r0, Z+
    2bb0:	0d 92       	st	X+, r0
    2bb2:	8a 95       	dec	r24
    2bb4:	e1 f7       	brne	.-8      	; 0x2bae <_ZN9Pololu3pi4initEjh+0x1c>
    2bb6:	66 23       	and	r22, r22
    2bb8:	11 f0       	breq	.+4      	; 0x2bbe <_ZN9Pololu3pi4initEjh+0x2c>
    2bba:	0f ef       	ldi	r16, 0xFF	; 255
    2bbc:	01 c0       	rjmp	.+2      	; 0x2bc0 <_ZN9Pololu3pi4initEjh+0x2e>
    2bbe:	03 e1       	ldi	r16, 0x13	; 19
    2bc0:	45 e0       	ldi	r20, 0x05	; 5
    2bc2:	be 01       	movw	r22, r28
    2bc4:	6f 5f       	subi	r22, 0xFF	; 255
    2bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc8:	89 eb       	ldi	r24, 0xB9	; 185
    2bca:	91 e0       	ldi	r25, 0x01	; 1
    2bcc:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2bd0:	89 eb       	ldi	r24, 0xB9	; 185
    2bd2:	91 e0       	ldi	r25, 0x01	; 1
    2bd4:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN16PololuQTRSensors11emittersOffEv>
    2bd8:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <_ZN13OrangutanTime5resetEv>
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	0f 91       	pop	r16
    2bec:	08 95       	ret

00002bee <pololu_3pi_init>:
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <_ZN9Pololu3pi4initEjh>
    2bf4:	08 95       	ret

00002bf6 <_GLOBAL__sub_D_pololu_3pi_init>:
    2bf6:	89 eb       	ldi	r24, 0xB9	; 185
    2bf8:	91 e0       	ldi	r25, 0x01	; 1
    2bfa:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <_ZN16PololuQTRSensorsD1Ev>
    2bfe:	08 95       	ret

00002c00 <delay_us>:
    2c00:	6f 93       	push	r22
    2c02:	64 e0       	ldi	r22, 0x04	; 4
    2c04:	6a 95       	dec	r22
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <delay_us+0x4>
    2c08:	6f 91       	pop	r22
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	c9 f7       	brne	.-14     	; 0x2c00 <delay_us>
    2c0e:	08 95       	ret

00002c10 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2c10:	fc 01       	movw	r30, r24
    2c12:	11 82       	std	Z+1, r1	; 0x01
    2c14:	10 82       	st	Z, r1
    2c16:	13 82       	std	Z+3, r1	; 0x03
    2c18:	12 82       	std	Z+2, r1	; 0x02
    2c1a:	15 82       	std	Z+5, r1	; 0x05
    2c1c:	14 82       	std	Z+4, r1	; 0x04
    2c1e:	16 82       	std	Z+6, r1	; 0x06
    2c20:	68 30       	cpi	r22, 0x08	; 8
    2c22:	68 f4       	brcc	.+26     	; 0x2c3e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2c24:	89 e2       	ldi	r24, 0x29	; 41
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	80 83       	st	Z, r24
    2c2c:	8b e2       	ldi	r24, 0x2B	; 43
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	93 83       	std	Z+3, r25	; 0x03
    2c32:	82 83       	std	Z+2, r24	; 0x02
    2c34:	8a e2       	ldi	r24, 0x2A	; 42
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	95 83       	std	Z+5, r25	; 0x05
    2c3a:	84 83       	std	Z+4, r24	; 0x04
    2c3c:	1f c0       	rjmp	.+62     	; 0x2c7c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2c3e:	6e 30       	cpi	r22, 0x0E	; 14
    2c40:	70 f4       	brcc	.+28     	; 0x2c5e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2c42:	83 e2       	ldi	r24, 0x23	; 35
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	91 83       	std	Z+1, r25	; 0x01
    2c48:	80 83       	st	Z, r24
    2c4a:	85 e2       	ldi	r24, 0x25	; 37
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	93 83       	std	Z+3, r25	; 0x03
    2c50:	82 83       	std	Z+2, r24	; 0x02
    2c52:	84 e2       	ldi	r24, 0x24	; 36
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	95 83       	std	Z+5, r25	; 0x05
    2c58:	84 83       	std	Z+4, r24	; 0x04
    2c5a:	68 50       	subi	r22, 0x08	; 8
    2c5c:	0f c0       	rjmp	.+30     	; 0x2c7c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2c5e:	65 31       	cpi	r22, 0x15	; 21
    2c60:	98 f4       	brcc	.+38     	; 0x2c88 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2c62:	86 e2       	ldi	r24, 0x26	; 38
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	80 83       	st	Z, r24
    2c6a:	88 e2       	ldi	r24, 0x28	; 40
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	93 83       	std	Z+3, r25	; 0x03
    2c70:	82 83       	std	Z+2, r24	; 0x02
    2c72:	87 e2       	ldi	r24, 0x27	; 39
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	95 83       	std	Z+5, r25	; 0x05
    2c78:	84 83       	std	Z+4, r24	; 0x04
    2c7a:	6e 50       	subi	r22, 0x0E	; 14
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	01 c0       	rjmp	.+2      	; 0x2c82 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2c80:	88 0f       	add	r24, r24
    2c82:	6a 95       	dec	r22
    2c84:	ea f7       	brpl	.-6      	; 0x2c80 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2c86:	86 83       	std	Z+6, r24	; 0x06
    2c88:	08 95       	ret

00002c8a <_ZN16PololuQTRSensors4initEhhh>:
    2c8a:	a7 e0       	ldi	r26, 0x07	; 7
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	eb e4       	ldi	r30, 0x4B	; 75
    2c90:	f6 e1       	ldi	r31, 0x16	; 22
    2c92:	0c 94 b2 1b 	jmp	0x3764	; 0x3764 <__prologue_saves__+0x1c>
    2c96:	8c 01       	movw	r16, r24
    2c98:	fc 01       	movw	r30, r24
    2c9a:	11 82       	std	Z+1, r1	; 0x01
    2c9c:	10 82       	st	Z, r1
    2c9e:	13 82       	std	Z+3, r1	; 0x03
    2ca0:	12 82       	std	Z+2, r1	; 0x02
    2ca2:	15 82       	std	Z+5, r1	; 0x05
    2ca4:	14 82       	std	Z+4, r1	; 0x04
    2ca6:	17 82       	std	Z+7, r1	; 0x07
    2ca8:	16 82       	std	Z+6, r1	; 0x06
    2caa:	61 31       	cpi	r22, 0x11	; 17
    2cac:	18 f0       	brcs	.+6      	; 0x2cb4 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2cae:	80 e1       	ldi	r24, 0x10	; 16
    2cb0:	80 87       	std	Z+8, r24	; 0x08
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	60 87       	std	Z+8, r22	; 0x08
    2cb8:	f8 01       	movw	r30, r16
    2cba:	20 8b       	std	Z+16, r18	; 0x10
    2cbc:	64 2f       	mov	r22, r20
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	01 96       	adiw	r24, 0x01	; 1
    2cc2:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc8:	f8 01       	movw	r30, r16
    2cca:	81 87       	std	Z+9, r24	; 0x09
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd0:	93 87       	std	Z+11, r25	; 0x0b
    2cd2:	82 87       	std	Z+10, r24	; 0x0a
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	95 87       	std	Z+13, r25	; 0x0d
    2cda:	84 87       	std	Z+12, r24	; 0x0c
    2cdc:	27 96       	adiw	r28, 0x07	; 7
    2cde:	e4 e0       	ldi	r30, 0x04	; 4
    2ce0:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <__epilogue_restores__+0x1c>

00002ce4 <_ZN16PololuQTRSensors11emittersOffEv>:
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ce8:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cea:	10 97       	sbiw	r26, 0x00	; 0
    2cec:	79 f0       	breq	.+30     	; 0x2d0c <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2cee:	8c 91       	ld	r24, X
    2cf0:	91 85       	ldd	r25, Z+9	; 0x09
    2cf2:	89 2b       	or	r24, r25
    2cf4:	8c 93       	st	X, r24
    2cf6:	a2 85       	ldd	r26, Z+10	; 0x0a
    2cf8:	b3 85       	ldd	r27, Z+11	; 0x0b
    2cfa:	9c 91       	ld	r25, X
    2cfc:	81 85       	ldd	r24, Z+9	; 0x09
    2cfe:	80 95       	com	r24
    2d00:	89 23       	and	r24, r25
    2d02:	8c 93       	st	X, r24
    2d04:	88 ec       	ldi	r24, 0xC8	; 200
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 00 16 	call	0x2c00	; 0x2c00 <delay_us>
    2d0c:	08 95       	ret

00002d0e <_ZN16PololuQTRSensors10emittersOnEv>:
    2d0e:	fc 01       	movw	r30, r24
    2d10:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d12:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d14:	10 97       	sbiw	r26, 0x00	; 0
    2d16:	71 f0       	breq	.+28     	; 0x2d34 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2d18:	8c 91       	ld	r24, X
    2d1a:	91 85       	ldd	r25, Z+9	; 0x09
    2d1c:	89 2b       	or	r24, r25
    2d1e:	8c 93       	st	X, r24
    2d20:	a2 85       	ldd	r26, Z+10	; 0x0a
    2d22:	b3 85       	ldd	r27, Z+11	; 0x0b
    2d24:	8c 91       	ld	r24, X
    2d26:	91 85       	ldd	r25, Z+9	; 0x09
    2d28:	89 2b       	or	r24, r25
    2d2a:	8c 93       	st	X, r24
    2d2c:	88 ec       	ldi	r24, 0xC8	; 200
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 00 16 	call	0x2c00	; 0x2c00 <delay_us>
    2d34:	08 95       	ret

00002d36 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2d36:	a7 e0       	ldi	r26, 0x07	; 7
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e1 ea       	ldi	r30, 0xA1	; 161
    2d3c:	f6 e1       	ldi	r31, 0x16	; 22
    2d3e:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__prologue_saves__+0x6>
    2d42:	7c 01       	movw	r14, r24
    2d44:	4b 01       	movw	r8, r22
    2d46:	64 2f       	mov	r22, r20
    2d48:	39 01       	movw	r6, r18
    2d4a:	40 2f       	mov	r20, r16
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_ZN16PololuQTRSensors4initEhhh>
    2d52:	87 01       	movw	r16, r14
    2d54:	0f 5b       	subi	r16, 0xBF	; 191
    2d56:	1f 4f       	sbci	r17, 0xFF	; 255
    2d58:	f8 01       	movw	r30, r16
    2d5a:	10 82       	st	Z, r1
    2d5c:	67 01       	movw	r12, r14
    2d5e:	f2 e4       	ldi	r31, 0x42	; 66
    2d60:	cf 0e       	add	r12, r31
    2d62:	d1 1c       	adc	r13, r1
    2d64:	f6 01       	movw	r30, r12
    2d66:	10 82       	st	Z, r1
    2d68:	57 01       	movw	r10, r14
    2d6a:	f3 e4       	ldi	r31, 0x43	; 67
    2d6c:	af 0e       	add	r10, r31
    2d6e:	b1 1c       	adc	r11, r1
    2d70:	f5 01       	movw	r30, r10
    2d72:	10 82       	st	Z, r1
    2d74:	f7 01       	movw	r30, r14
    2d76:	77 86       	std	Z+15, r7	; 0x0f
    2d78:	66 86       	std	Z+14, r6	; 0x0e
    2d7a:	51 2c       	mov	r5, r1
    2d7c:	f7 01       	movw	r30, r14
    2d7e:	80 85       	ldd	r24, Z+8	; 0x08
    2d80:	58 16       	cp	r5, r24
    2d82:	50 f5       	brcc	.+84     	; 0x2dd8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2d84:	65 2c       	mov	r6, r5
    2d86:	71 2c       	mov	r7, r1
    2d88:	f4 01       	movw	r30, r8
    2d8a:	e6 0d       	add	r30, r6
    2d8c:	f7 1d       	adc	r31, r7
    2d8e:	60 81       	ld	r22, Z
    2d90:	ce 01       	movw	r24, r28
    2d92:	01 96       	adiw	r24, 0x01	; 1
    2d94:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2d98:	2f 81       	ldd	r18, Y+7	; 0x07
    2d9a:	f7 01       	movw	r30, r14
    2d9c:	e6 0d       	add	r30, r6
    2d9e:	f7 1d       	adc	r31, r7
    2da0:	21 8b       	std	Z+17, r18	; 0x11
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	f3 01       	movw	r30, r6
    2da8:	ee 0f       	add	r30, r30
    2daa:	ff 1f       	adc	r31, r31
    2dac:	ee 0d       	add	r30, r14
    2dae:	ff 1d       	adc	r31, r15
    2db0:	92 a3       	std	Z+34, r25	; 0x22
    2db2:	81 a3       	std	Z+33, r24	; 0x21
    2db4:	83 32       	cpi	r24, 0x23	; 35
    2db6:	91 05       	cpc	r25, r1
    2db8:	11 f4       	brne	.+4      	; 0x2dbe <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2dba:	f8 01       	movw	r30, r16
    2dbc:	08 c0       	rjmp	.+16     	; 0x2dce <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2dbe:	86 32       	cpi	r24, 0x26	; 38
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	11 f4       	brne	.+4      	; 0x2dc8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2dc4:	f6 01       	movw	r30, r12
    2dc6:	03 c0       	rjmp	.+6      	; 0x2dce <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2dc8:	89 97       	sbiw	r24, 0x29	; 41
    2dca:	21 f4       	brne	.+8      	; 0x2dd4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2dcc:	f5 01       	movw	r30, r10
    2dce:	80 81       	ld	r24, Z
    2dd0:	82 2b       	or	r24, r18
    2dd2:	80 83       	st	Z, r24
    2dd4:	53 94       	inc	r5
    2dd6:	d2 cf       	rjmp	.-92     	; 0x2d7c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2dd8:	27 96       	adiw	r28, 0x07	; 7
    2dda:	ef e0       	ldi	r30, 0x0F	; 15
    2ddc:	0c 94 c3 1b 	jmp	0x3786	; 0x3786 <__epilogue_restores__+0x6>

00002de0 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2de0:	a0 e0       	ldi	r26, 0x00	; 0
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e6 ef       	ldi	r30, 0xF6	; 246
    2de6:	f6 e1       	ldi	r31, 0x16	; 22
    2de8:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__prologue_saves__+0xa>
    2dec:	ec 01       	movw	r28, r24
    2dee:	5b 01       	movw	r10, r22
    2df0:	6c 01       	movw	r12, r24
    2df2:	81 e4       	ldi	r24, 0x41	; 65
    2df4:	c8 0e       	add	r12, r24
    2df6:	d1 1c       	adc	r13, r1
    2df8:	f6 01       	movw	r30, r12
    2dfa:	80 80       	ld	r8, Z
    2dfc:	7e 01       	movw	r14, r28
    2dfe:	f2 e4       	ldi	r31, 0x42	; 66
    2e00:	ef 0e       	add	r14, r31
    2e02:	f1 1c       	adc	r15, r1
    2e04:	f7 01       	movw	r30, r14
    2e06:	70 80       	ld	r7, Z
    2e08:	8e 01       	movw	r16, r28
    2e0a:	0d 5b       	subi	r16, 0xBD	; 189
    2e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0e:	f8 01       	movw	r30, r16
    2e10:	90 80       	ld	r9, Z
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	98 85       	ldd	r25, Y+8	; 0x08
    2e16:	89 17       	cp	r24, r25
    2e18:	48 f4       	brcc	.+18     	; 0x2e2c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2e1a:	f5 01       	movw	r30, r10
    2e1c:	e8 0f       	add	r30, r24
    2e1e:	f1 1d       	adc	r31, r1
    2e20:	e8 0f       	add	r30, r24
    2e22:	f1 1d       	adc	r31, r1
    2e24:	11 82       	std	Z+1, r1	; 0x01
    2e26:	10 82       	st	Z, r1
    2e28:	8f 5f       	subi	r24, 0xFF	; 255
    2e2a:	f4 cf       	rjmp	.-24     	; 0x2e14 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2e2c:	84 b1       	in	r24, 0x04	; 4
    2e2e:	f6 01       	movw	r30, r12
    2e30:	90 81       	ld	r25, Z
    2e32:	89 2b       	or	r24, r25
    2e34:	84 b9       	out	0x04, r24	; 4
    2e36:	87 b1       	in	r24, 0x07	; 7
    2e38:	f7 01       	movw	r30, r14
    2e3a:	90 81       	ld	r25, Z
    2e3c:	89 2b       	or	r24, r25
    2e3e:	87 b9       	out	0x07, r24	; 7
    2e40:	8a b1       	in	r24, 0x0a	; 10
    2e42:	f8 01       	movw	r30, r16
    2e44:	90 81       	ld	r25, Z
    2e46:	89 2b       	or	r24, r25
    2e48:	8a b9       	out	0x0a, r24	; 10
    2e4a:	85 b1       	in	r24, 0x05	; 5
    2e4c:	f6 01       	movw	r30, r12
    2e4e:	90 81       	ld	r25, Z
    2e50:	89 2b       	or	r24, r25
    2e52:	85 b9       	out	0x05, r24	; 5
    2e54:	88 b1       	in	r24, 0x08	; 8
    2e56:	f7 01       	movw	r30, r14
    2e58:	90 81       	ld	r25, Z
    2e5a:	89 2b       	or	r24, r25
    2e5c:	88 b9       	out	0x08, r24	; 8
    2e5e:	8b b1       	in	r24, 0x0b	; 11
    2e60:	f8 01       	movw	r30, r16
    2e62:	90 81       	ld	r25, Z
    2e64:	89 2b       	or	r24, r25
    2e66:	8b b9       	out	0x0b, r24	; 11
    2e68:	8a e0       	ldi	r24, 0x0A	; 10
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	0e 94 00 16 	call	0x2c00	; 0x2c00 <delay_us>
    2e70:	94 b1       	in	r25, 0x04	; 4
    2e72:	f6 01       	movw	r30, r12
    2e74:	80 81       	ld	r24, Z
    2e76:	80 95       	com	r24
    2e78:	89 23       	and	r24, r25
    2e7a:	84 b9       	out	0x04, r24	; 4
    2e7c:	97 b1       	in	r25, 0x07	; 7
    2e7e:	f7 01       	movw	r30, r14
    2e80:	80 81       	ld	r24, Z
    2e82:	80 95       	com	r24
    2e84:	89 23       	and	r24, r25
    2e86:	87 b9       	out	0x07, r24	; 7
    2e88:	9a b1       	in	r25, 0x0a	; 10
    2e8a:	f8 01       	movw	r30, r16
    2e8c:	80 81       	ld	r24, Z
    2e8e:	80 95       	com	r24
    2e90:	89 23       	and	r24, r25
    2e92:	8a b9       	out	0x0a, r24	; 10
    2e94:	95 b1       	in	r25, 0x05	; 5
    2e96:	f6 01       	movw	r30, r12
    2e98:	80 81       	ld	r24, Z
    2e9a:	80 95       	com	r24
    2e9c:	89 23       	and	r24, r25
    2e9e:	85 b9       	out	0x05, r24	; 5
    2ea0:	98 b1       	in	r25, 0x08	; 8
    2ea2:	f7 01       	movw	r30, r14
    2ea4:	80 81       	ld	r24, Z
    2ea6:	80 95       	com	r24
    2ea8:	89 23       	and	r24, r25
    2eaa:	88 b9       	out	0x08, r24	; 8
    2eac:	9b b1       	in	r25, 0x0b	; 11
    2eae:	f8 01       	movw	r30, r16
    2eb0:	80 81       	ld	r24, Z
    2eb2:	80 95       	com	r24
    2eb4:	89 23       	and	r24, r25
    2eb6:	8b b9       	out	0x0b, r24	; 11
    2eb8:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2ebc:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2ec0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2ec4:	83 60       	ori	r24, 0x03	; 3
    2ec6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2ed0:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	2e 85       	ldd	r18, Y+14	; 0x0e
    2eda:	3f 85       	ldd	r19, Y+15	; 0x0f
    2edc:	82 17       	cp	r24, r18
    2ede:	93 07       	cpc	r25, r19
    2ee0:	20 f5       	brcc	.+72     	; 0x2f2a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2ee2:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    2ee6:	2c 2d       	mov	r18, r12
    2ee8:	24 1b       	sub	r18, r20
    2eea:	82 0f       	add	r24, r18
    2eec:	91 1d       	adc	r25, r1
    2eee:	03 b1       	in	r16, 0x03	; 3
    2ef0:	08 11       	cpse	r16, r8
    2ef2:	32 c0       	rjmp	.+100    	; 0x2f58 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2ef4:	f6 b0       	in	r15, 0x06	; 6
    2ef6:	f7 10       	cpse	r15, r7
    2ef8:	2f c0       	rjmp	.+94     	; 0x2f58 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2efa:	29 b1       	in	r18, 0x09	; 9
    2efc:	29 11       	cpse	r18, r9
    2efe:	2c c0       	rjmp	.+88     	; 0x2f58 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2f00:	10 c0       	rjmp	.+32     	; 0x2f22 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2f02:	21 2f       	mov	r18, r17
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	a9 01       	movw	r20, r18
    2f08:	44 0f       	add	r20, r20
    2f0a:	55 1f       	adc	r21, r21
    2f0c:	f5 01       	movw	r30, r10
    2f0e:	e4 0f       	add	r30, r20
    2f10:	f5 1f       	adc	r31, r21
    2f12:	60 81       	ld	r22, Z
    2f14:	71 81       	ldd	r23, Z+1	; 0x01
    2f16:	67 2b       	or	r22, r23
    2f18:	21 f1       	breq	.+72     	; 0x2f62 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2f1a:	1f 5f       	subi	r17, 0xFF	; 255
    2f1c:	28 85       	ldd	r18, Y+8	; 0x08
    2f1e:	12 17       	cp	r17, r18
    2f20:	80 f3       	brcs	.-32     	; 0x2f02 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2f22:	7f 2c       	mov	r7, r15
    2f24:	80 2e       	mov	r8, r16
    2f26:	4c 2d       	mov	r20, r12
    2f28:	d7 cf       	rjmp	.-82     	; 0x2ed8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2f2a:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2f2e:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	88 85       	ldd	r24, Y+8	; 0x08
    2f36:	28 17       	cp	r18, r24
    2f38:	30 f5       	brcc	.+76     	; 0x2f86 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2f3a:	f5 01       	movw	r30, r10
    2f3c:	e2 0f       	add	r30, r18
    2f3e:	f1 1d       	adc	r31, r1
    2f40:	e2 0f       	add	r30, r18
    2f42:	f1 1d       	adc	r31, r1
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	89 2b       	or	r24, r25
    2f4a:	21 f4       	brne	.+8      	; 0x2f54 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2f4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f50:	91 83       	std	Z+1, r25	; 0x01
    2f52:	80 83       	st	Z, r24
    2f54:	2f 5f       	subi	r18, 0xFF	; 255
    2f56:	ee cf       	rjmp	.-36     	; 0x2f34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2f58:	03 b1       	in	r16, 0x03	; 3
    2f5a:	f6 b0       	in	r15, 0x06	; 6
    2f5c:	99 b0       	in	r9, 0x09	; 9
    2f5e:	10 e0       	ldi	r17, 0x00	; 0
    2f60:	dd cf       	rjmp	.-70     	; 0x2f1c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2f62:	de 01       	movw	r26, r28
    2f64:	a4 0f       	add	r26, r20
    2f66:	b5 1f       	adc	r27, r21
    2f68:	91 96       	adiw	r26, 0x21	; 33
    2f6a:	0d 90       	ld	r0, X+
    2f6c:	bc 91       	ld	r27, X
    2f6e:	a0 2d       	mov	r26, r0
    2f70:	4c 91       	ld	r20, X
    2f72:	de 01       	movw	r26, r28
    2f74:	a2 0f       	add	r26, r18
    2f76:	b3 1f       	adc	r27, r19
    2f78:	51 96       	adiw	r26, 0x11	; 17
    2f7a:	2c 91       	ld	r18, X
    2f7c:	42 23       	and	r20, r18
    2f7e:	69 f6       	brne	.-102    	; 0x2f1a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
    2f84:	ca cf       	rjmp	.-108    	; 0x2f1a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	ed e0       	ldi	r30, 0x0D	; 13
    2f8c:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__epilogue_restores__+0xa>

00002f90 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	9b 01       	movw	r18, r22
    2fa0:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    2fa4:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2fa8:	47 b1       	in	r20, 0x07	; 7
    2faa:	18 b1       	in	r17, 0x08	; 8
    2fac:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2fb0:	86 fd       	sbrc	r24, 6
    2fb2:	fc cf       	rjmp	.-8      	; 0x2fac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 85       	ldd	r25, Z+8	; 0x08
    2fb8:	89 17       	cp	r24, r25
    2fba:	48 f4       	brcc	.+18     	; 0x2fce <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2fbc:	d9 01       	movw	r26, r18
    2fbe:	a8 0f       	add	r26, r24
    2fc0:	b1 1d       	adc	r27, r1
    2fc2:	a8 0f       	add	r26, r24
    2fc4:	b1 1d       	adc	r27, r1
    2fc6:	1d 92       	st	X+, r1
    2fc8:	1c 92       	st	X, r1
    2fca:	8f 5f       	subi	r24, 0xFF	; 255
    2fcc:	f4 cf       	rjmp	.-24     	; 0x2fb6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2fce:	97 b1       	in	r25, 0x07	; 7
    2fd0:	82 a1       	ldd	r24, Z+34	; 0x22
    2fd2:	80 95       	com	r24
    2fd4:	89 23       	and	r24, r25
    2fd6:	87 b9       	out	0x07, r24	; 7
    2fd8:	98 b1       	in	r25, 0x08	; 8
    2fda:	82 a1       	ldd	r24, Z+34	; 0x22
    2fdc:	80 95       	com	r24
    2fde:	89 23       	and	r24, r25
    2fe0:	88 b9       	out	0x08, r24	; 8
    2fe2:	87 e8       	ldi	r24, 0x87	; 135
    2fe4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2fe8:	e1 2c       	mov	r14, r1
    2fea:	81 a1       	ldd	r24, Z+33	; 0x21
    2fec:	e8 16       	cp	r14, r24
    2fee:	10 f0       	brcs	.+4      	; 0x2ff4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2ff0:	e1 2c       	mov	r14, r1
    2ff2:	29 c0       	rjmp	.+82     	; 0x3046 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2ff4:	50 e0       	ldi	r21, 0x00	; 0
    2ff6:	80 85       	ldd	r24, Z+8	; 0x08
    2ff8:	58 17       	cp	r21, r24
    2ffa:	18 f5       	brcc	.+70     	; 0x3042 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2ffc:	a5 2f       	mov	r26, r21
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	ef 01       	movw	r28, r30
    3002:	ca 0f       	add	r28, r26
    3004:	db 1f       	adc	r29, r27
    3006:	89 89       	ldd	r24, Y+17	; 0x11
    3008:	80 64       	ori	r24, 0x40	; 64
    300a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    300e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3012:	80 64       	ori	r24, 0x40	; 64
    3014:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3018:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    301c:	86 fd       	sbrc	r24, 6
    301e:	fc cf       	rjmp	.-8      	; 0x3018 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    3020:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    3024:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    3028:	aa 0f       	add	r26, r26
    302a:	bb 1f       	adc	r27, r27
    302c:	a2 0f       	add	r26, r18
    302e:	b3 1f       	adc	r27, r19
    3030:	8d 91       	ld	r24, X+
    3032:	9c 91       	ld	r25, X
    3034:	11 97       	sbiw	r26, 0x01	; 1
    3036:	86 0f       	add	r24, r22
    3038:	97 1f       	adc	r25, r23
    303a:	8d 93       	st	X+, r24
    303c:	9c 93       	st	X, r25
    303e:	5f 5f       	subi	r21, 0xFF	; 255
    3040:	da cf       	rjmp	.-76     	; 0x2ff6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    3042:	e3 94       	inc	r14
    3044:	d2 cf       	rjmp	.-92     	; 0x2fea <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    3046:	80 85       	ldd	r24, Z+8	; 0x08
    3048:	e8 16       	cp	r14, r24
    304a:	a0 f4       	brcc	.+40     	; 0x3074 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    304c:	e9 01       	movw	r28, r18
    304e:	ce 0d       	add	r28, r14
    3050:	d1 1d       	adc	r29, r1
    3052:	ce 0d       	add	r28, r14
    3054:	d1 1d       	adc	r29, r1
    3056:	61 a1       	ldd	r22, Z+33	; 0x21
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	cb 01       	movw	r24, r22
    305c:	95 95       	asr	r25
    305e:	87 95       	ror	r24
    3060:	a8 81       	ld	r26, Y
    3062:	b9 81       	ldd	r27, Y+1	; 0x01
    3064:	8a 0f       	add	r24, r26
    3066:	9b 1f       	adc	r25, r27
    3068:	0e 94 13 1b 	call	0x3626	; 0x3626 <__udivmodhi4>
    306c:	79 83       	std	Y+1, r23	; 0x01
    306e:	68 83       	st	Y, r22
    3070:	e3 94       	inc	r14
    3072:	e9 cf       	rjmp	.-46     	; 0x3046 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    3074:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    3078:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    307c:	18 b9       	out	0x08, r17	; 8
    307e:	47 b9       	out	0x07, r20	; 7
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	e6 e0       	ldi	r30, 0x06	; 6
    3086:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <__epilogue_restores__+0x18>

0000308a <_ZN16PololuQTRSensors4readEPjh>:
    308a:	a0 e2       	ldi	r26, 0x20	; 32
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	eb e4       	ldi	r30, 0x4B	; 75
    3090:	f8 e1       	ldi	r31, 0x18	; 24
    3092:	0c 94 af 1b 	jmp	0x375e	; 0x375e <__prologue_saves__+0x16>
    3096:	8c 01       	movw	r16, r24
    3098:	7b 01       	movw	r14, r22
    309a:	d4 2e       	mov	r13, r20
    309c:	8f ef       	ldi	r24, 0xFF	; 255
    309e:	84 0f       	add	r24, r20
    30a0:	82 30       	cpi	r24, 0x02	; 2
    30a2:	18 f4       	brcc	.+6      	; 0x30aa <_ZN16PololuQTRSensors4readEPjh+0x20>
    30a4:	c8 01       	movw	r24, r16
    30a6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <_ZN16PololuQTRSensors10emittersOnEv>
    30aa:	d8 01       	movw	r26, r16
    30ac:	50 96       	adiw	r26, 0x10	; 16
    30ae:	8c 91       	ld	r24, X
    30b0:	b7 01       	movw	r22, r14
    30b2:	81 11       	cpse	r24, r1
    30b4:	10 c0       	rjmp	.+32     	; 0x30d6 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    30b6:	c8 01       	movw	r24, r16
    30b8:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    30bc:	c8 01       	movw	r24, r16
    30be:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN16PololuQTRSensors11emittersOffEv>
    30c2:	b2 e0       	ldi	r27, 0x02	; 2
    30c4:	db 12       	cpse	r13, r27
    30c6:	3a c0       	rjmp	.+116    	; 0x313c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    30c8:	be 01       	movw	r22, r28
    30ca:	6f 5f       	subi	r22, 0xFF	; 255
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	c8 01       	movw	r24, r16
    30d0:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    30d4:	0f c0       	rjmp	.+30     	; 0x30f4 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    30d6:	c8 01       	movw	r24, r16
    30d8:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    30dc:	c8 01       	movw	r24, r16
    30de:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <_ZN16PololuQTRSensors11emittersOffEv>
    30e2:	e2 e0       	ldi	r30, 0x02	; 2
    30e4:	de 12       	cpse	r13, r30
    30e6:	2a c0       	rjmp	.+84     	; 0x313c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    30e8:	be 01       	movw	r22, r28
    30ea:	6f 5f       	subi	r22, 0xFF	; 255
    30ec:	7f 4f       	sbci	r23, 0xFF	; 255
    30ee:	c8 01       	movw	r24, r16
    30f0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    30f4:	40 e0       	ldi	r20, 0x00	; 0
    30f6:	f8 01       	movw	r30, r16
    30f8:	80 85       	ldd	r24, Z+8	; 0x08
    30fa:	48 17       	cp	r20, r24
    30fc:	f8 f4       	brcc	.+62     	; 0x313c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    30fe:	84 2f       	mov	r24, r20
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	88 0f       	add	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	f7 01       	movw	r30, r14
    3108:	e8 0f       	add	r30, r24
    310a:	f9 1f       	adc	r31, r25
    310c:	21 e0       	ldi	r18, 0x01	; 1
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	2c 0f       	add	r18, r28
    3112:	3d 1f       	adc	r19, r29
    3114:	82 0f       	add	r24, r18
    3116:	93 1f       	adc	r25, r19
    3118:	d8 01       	movw	r26, r16
    311a:	1e 96       	adiw	r26, 0x0e	; 14
    311c:	2d 91       	ld	r18, X+
    311e:	3c 91       	ld	r19, X
    3120:	1f 97       	sbiw	r26, 0x0f	; 15
    3122:	dc 01       	movw	r26, r24
    3124:	8d 91       	ld	r24, X+
    3126:	9c 91       	ld	r25, X
    3128:	28 1b       	sub	r18, r24
    312a:	39 0b       	sbc	r19, r25
    312c:	80 81       	ld	r24, Z
    312e:	91 81       	ldd	r25, Z+1	; 0x01
    3130:	82 0f       	add	r24, r18
    3132:	93 1f       	adc	r25, r19
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
    3138:	4f 5f       	subi	r20, 0xFF	; 255
    313a:	dd cf       	rjmp	.-70     	; 0x30f6 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    313c:	a0 96       	adiw	r28, 0x20	; 32
    313e:	e7 e0       	ldi	r30, 0x07	; 7
    3140:	0c 94 cb 1b 	jmp	0x3796	; 0x3796 <__epilogue_restores__+0x16>

00003144 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    3144:	2f 92       	push	r2
    3146:	3f 92       	push	r3
    3148:	5f 92       	push	r5
    314a:	6f 92       	push	r6
    314c:	7f 92       	push	r7
    314e:	8f 92       	push	r8
    3150:	9f 92       	push	r9
    3152:	af 92       	push	r10
    3154:	bf 92       	push	r11
    3156:	cf 92       	push	r12
    3158:	df 92       	push	r13
    315a:	ef 92       	push	r14
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	c0 56       	subi	r28, 0x60	; 96
    316c:	d1 09       	sbc	r29, r1
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	8c 01       	movw	r16, r24
    317a:	4b 01       	movw	r8, r22
    317c:	5a 01       	movw	r10, r20
    317e:	52 2e       	mov	r5, r18
    3180:	da 01       	movw	r26, r20
    3182:	8d 91       	ld	r24, X+
    3184:	9c 91       	ld	r25, X
    3186:	89 2b       	or	r24, r25
    3188:	31 f0       	breq	.+12     	; 0x3196 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    318a:	f4 01       	movw	r30, r8
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	89 2b       	or	r24, r25
    3192:	f1 f4       	brne	.+60     	; 0x31d0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    3194:	24 c0       	rjmp	.+72     	; 0x31de <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    3196:	d8 01       	movw	r26, r16
    3198:	18 96       	adiw	r26, 0x08	; 8
    319a:	8c 91       	ld	r24, X
    319c:	90 e0       	ldi	r25, 0x00	; 0
    319e:	88 0f       	add	r24, r24
    31a0:	99 1f       	adc	r25, r25
    31a2:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <malloc>
    31a6:	f5 01       	movw	r30, r10
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24
    31ac:	00 97       	sbiw	r24, 0x00	; 0
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    31b0:	b1 c0       	rjmp	.+354    	; 0x3314 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    31b2:	fc 01       	movw	r30, r24
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	d8 01       	movw	r26, r16
    31ba:	18 96       	adiw	r26, 0x08	; 8
    31bc:	8c 91       	ld	r24, X
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	28 17       	cp	r18, r24
    31c2:	39 07       	cpc	r19, r25
    31c4:	14 f7       	brge	.-60     	; 0x318a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    31c6:	11 92       	st	Z+, r1
    31c8:	11 92       	st	Z+, r1
    31ca:	2f 5f       	subi	r18, 0xFF	; 255
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	f4 cf       	rjmp	.-24     	; 0x31b8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    31d0:	e1 2c       	mov	r14, r1
    31d2:	f1 2c       	mov	r15, r1
    31d4:	6e 01       	movw	r12, r28
    31d6:	b1 e2       	ldi	r27, 0x21	; 33
    31d8:	cb 0e       	add	r12, r27
    31da:	d1 1c       	adc	r13, r1
    31dc:	21 c0       	rjmp	.+66     	; 0x3220 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    31de:	f8 01       	movw	r30, r16
    31e0:	80 85       	ldd	r24, Z+8	; 0x08
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <malloc>
    31ec:	d4 01       	movw	r26, r8
    31ee:	8d 93       	st	X+, r24
    31f0:	9c 93       	st	X, r25
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    31f6:	8e c0       	rjmp	.+284    	; 0x3314 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    31f8:	fc 01       	movw	r30, r24
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	d8 01       	movw	r26, r16
    3200:	18 96       	adiw	r26, 0x08	; 8
    3202:	8c 91       	ld	r24, X
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	28 17       	cp	r18, r24
    3208:	39 07       	cpc	r19, r25
    320a:	14 f7       	brge	.-60     	; 0x31d0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    320c:	d8 01       	movw	r26, r16
    320e:	1e 96       	adiw	r26, 0x0e	; 14
    3210:	8d 91       	ld	r24, X+
    3212:	9c 91       	ld	r25, X
    3214:	1f 97       	sbiw	r26, 0x0f	; 15
    3216:	81 93       	st	Z+, r24
    3218:	91 93       	st	Z+, r25
    321a:	2f 5f       	subi	r18, 0xFF	; 255
    321c:	3f 4f       	sbci	r19, 0xFF	; 255
    321e:	ef cf       	rjmp	.-34     	; 0x31fe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    3220:	45 2d       	mov	r20, r5
    3222:	be 01       	movw	r22, r28
    3224:	6f 5b       	subi	r22, 0xBF	; 191
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	c8 01       	movw	r24, r16
    322a:	0e 94 45 18 	call	0x308a	; 0x308a <_ZN16PololuQTRSensors4readEPjh>
    322e:	f8 01       	movw	r30, r16
    3230:	60 84       	ldd	r6, Z+8	; 0x08
    3232:	71 2c       	mov	r7, r1
    3234:	fe 01       	movw	r30, r28
    3236:	ef 5b       	subi	r30, 0xBF	; 191
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	c6 01       	movw	r24, r12
    323c:	9e 01       	movw	r18, r28
    323e:	2f 5f       	subi	r18, 0xFF	; 255
    3240:	3f 4f       	sbci	r19, 0xFF	; 255
    3242:	19 01       	movw	r2, r18
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	26 15       	cp	r18, r6
    324a:	37 05       	cpc	r19, r7
    324c:	4c f5       	brge	.+82     	; 0x32a0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    324e:	e1 14       	cp	r14, r1
    3250:	f1 04       	cpc	r15, r1
    3252:	89 f0       	breq	.+34     	; 0x3276 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    3254:	dc 01       	movw	r26, r24
    3256:	6d 91       	ld	r22, X+
    3258:	7c 91       	ld	r23, X
    325a:	40 81       	ld	r20, Z
    325c:	51 81       	ldd	r21, Z+1	; 0x01
    325e:	64 17       	cp	r22, r20
    3260:	75 07       	cpc	r23, r21
    3262:	48 f0       	brcs	.+18     	; 0x3276 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    3264:	d1 01       	movw	r26, r2
    3266:	6d 91       	ld	r22, X+
    3268:	7c 91       	ld	r23, X
    326a:	40 81       	ld	r20, Z
    326c:	51 81       	ldd	r21, Z+1	; 0x01
    326e:	46 17       	cp	r20, r22
    3270:	57 07       	cpc	r21, r23
    3272:	48 f0       	brcs	.+18     	; 0x3286 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    3274:	0d c0       	rjmp	.+26     	; 0x3290 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    3276:	40 81       	ld	r20, Z
    3278:	51 81       	ldd	r21, Z+1	; 0x01
    327a:	dc 01       	movw	r26, r24
    327c:	4d 93       	st	X+, r20
    327e:	5c 93       	st	X, r21
    3280:	e1 14       	cp	r14, r1
    3282:	f1 04       	cpc	r15, r1
    3284:	79 f7       	brne	.-34     	; 0x3264 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    3286:	40 81       	ld	r20, Z
    3288:	51 81       	ldd	r21, Z+1	; 0x01
    328a:	d1 01       	movw	r26, r2
    328c:	4d 93       	st	X+, r20
    328e:	5c 93       	st	X, r21
    3290:	2f 5f       	subi	r18, 0xFF	; 255
    3292:	3f 4f       	sbci	r19, 0xFF	; 255
    3294:	b2 e0       	ldi	r27, 0x02	; 2
    3296:	2b 0e       	add	r2, r27
    3298:	31 1c       	adc	r3, r1
    329a:	32 96       	adiw	r30, 0x02	; 2
    329c:	02 96       	adiw	r24, 0x02	; 2
    329e:	d4 cf       	rjmp	.-88     	; 0x3248 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    32a0:	ef ef       	ldi	r30, 0xFF	; 255
    32a2:	ee 1a       	sub	r14, r30
    32a4:	fe 0a       	sbc	r15, r30
    32a6:	fa e0       	ldi	r31, 0x0A	; 10
    32a8:	ef 16       	cp	r14, r31
    32aa:	f1 04       	cpc	r15, r1
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    32ae:	b8 cf       	rjmp	.-144    	; 0x3220 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    32b0:	9e 01       	movw	r18, r28
    32b2:	2f 5f       	subi	r18, 0xFF	; 255
    32b4:	3f 4f       	sbci	r19, 0xFF	; 255
    32b6:	79 01       	movw	r14, r18
    32b8:	36 01       	movw	r6, r12
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	f8 01       	movw	r30, r16
    32c0:	20 85       	ldd	r18, Z+8	; 0x08
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	82 17       	cp	r24, r18
    32c6:	93 07       	cpc	r25, r19
    32c8:	2c f5       	brge	.+74     	; 0x3314 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    32ca:	d7 01       	movw	r26, r14
    32cc:	2d 91       	ld	r18, X+
    32ce:	3d 91       	ld	r19, X+
    32d0:	7d 01       	movw	r14, r26
    32d2:	b3 01       	movw	r22, r6
    32d4:	6c 19       	sub	r22, r12
    32d6:	7d 09       	sbc	r23, r13
    32d8:	d5 01       	movw	r26, r10
    32da:	ed 91       	ld	r30, X+
    32dc:	fc 91       	ld	r31, X
    32de:	e6 0f       	add	r30, r22
    32e0:	f7 1f       	adc	r31, r23
    32e2:	40 81       	ld	r20, Z
    32e4:	51 81       	ldd	r21, Z+1	; 0x01
    32e6:	42 17       	cp	r20, r18
    32e8:	53 07       	cpc	r21, r19
    32ea:	10 f4       	brcc	.+4      	; 0x32f0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    32ec:	31 83       	std	Z+1, r19	; 0x01
    32ee:	20 83       	st	Z, r18
    32f0:	f3 01       	movw	r30, r6
    32f2:	21 91       	ld	r18, Z+
    32f4:	31 91       	ld	r19, Z+
    32f6:	3f 01       	movw	r6, r30
    32f8:	d4 01       	movw	r26, r8
    32fa:	ed 91       	ld	r30, X+
    32fc:	fc 91       	ld	r31, X
    32fe:	e6 0f       	add	r30, r22
    3300:	f7 1f       	adc	r31, r23
    3302:	40 81       	ld	r20, Z
    3304:	51 81       	ldd	r21, Z+1	; 0x01
    3306:	24 17       	cp	r18, r20
    3308:	35 07       	cpc	r19, r21
    330a:	10 f4       	brcc	.+4      	; 0x3310 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    330c:	31 83       	std	Z+1, r19	; 0x01
    330e:	20 83       	st	Z, r18
    3310:	01 96       	adiw	r24, 0x01	; 1
    3312:	d5 cf       	rjmp	.-86     	; 0x32be <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    3314:	c0 5a       	subi	r28, 0xA0	; 160
    3316:	df 4f       	sbci	r29, 0xFF	; 255
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	1f 91       	pop	r17
    3328:	0f 91       	pop	r16
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	df 90       	pop	r13
    3330:	cf 90       	pop	r12
    3332:	bf 90       	pop	r11
    3334:	af 90       	pop	r10
    3336:	9f 90       	pop	r9
    3338:	8f 90       	pop	r8
    333a:	7f 90       	pop	r7
    333c:	6f 90       	pop	r6
    333e:	5f 90       	pop	r5
    3340:	3f 90       	pop	r3
    3342:	2f 90       	pop	r2
    3344:	08 95       	ret

00003346 <_ZN16PololuQTRSensors9calibrateEh>:
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	ec 01       	movw	r28, r24
    334e:	16 2f       	mov	r17, r22
    3350:	8f ef       	ldi	r24, 0xFF	; 255
    3352:	86 0f       	add	r24, r22
    3354:	82 30       	cpi	r24, 0x02	; 2
    3356:	18 f0       	brcs	.+6      	; 0x335e <_ZN16PololuQTRSensors9calibrateEh+0x18>
    3358:	66 23       	and	r22, r22
    335a:	59 f0       	breq	.+22     	; 0x3372 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    335c:	14 c0       	rjmp	.+40     	; 0x3386 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    335e:	21 e0       	ldi	r18, 0x01	; 1
    3360:	ae 01       	movw	r20, r28
    3362:	4e 5f       	subi	r20, 0xFE	; 254
    3364:	5f 4f       	sbci	r21, 0xFF	; 255
    3366:	be 01       	movw	r22, r28
    3368:	ce 01       	movw	r24, r28
    336a:	0e 94 a2 18 	call	0x3144	; 0x3144 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    336e:	12 30       	cpi	r17, 0x02	; 2
    3370:	51 f4       	brne	.+20     	; 0x3386 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    3372:	ae 01       	movw	r20, r28
    3374:	4a 5f       	subi	r20, 0xFA	; 250
    3376:	5f 4f       	sbci	r21, 0xFF	; 255
    3378:	be 01       	movw	r22, r28
    337a:	6c 5f       	subi	r22, 0xFC	; 252
    337c:	7f 4f       	sbci	r23, 0xFF	; 255
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	ce 01       	movw	r24, r28
    3382:	0e 94 a2 18 	call	0x3144	; 0x3144 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	1f 91       	pop	r17
    338c:	08 95       	ret

0000338e <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    338e:	a0 e0       	ldi	r26, 0x00	; 0
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	ed ec       	ldi	r30, 0xCD	; 205
    3394:	f9 e1       	ldi	r31, 0x19	; 25
    3396:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__prologue_saves__+0x12>
    339a:	ec 01       	movw	r28, r24
    339c:	8b 01       	movw	r16, r22
    339e:	b4 2e       	mov	r11, r20
    33a0:	84 2f       	mov	r24, r20
    33a2:	8d 7f       	andi	r24, 0xFD	; 253
    33a4:	51 f4       	brne	.+20     	; 0x33ba <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    33a6:	8c 81       	ldd	r24, Y+4	; 0x04
    33a8:	9d 81       	ldd	r25, Y+5	; 0x05
    33aa:	89 2b       	or	r24, r25
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    33ae:	97 c0       	rjmp	.+302    	; 0x34de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33b0:	8e 81       	ldd	r24, Y+6	; 0x06
    33b2:	9f 81       	ldd	r25, Y+7	; 0x07
    33b4:	89 2b       	or	r24, r25
    33b6:	09 f4       	brne	.+2      	; 0x33ba <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    33b8:	92 c0       	rjmp	.+292    	; 0x34de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33ba:	8f ef       	ldi	r24, 0xFF	; 255
    33bc:	8b 0d       	add	r24, r11
    33be:	82 30       	cpi	r24, 0x02	; 2
    33c0:	50 f4       	brcc	.+20     	; 0x33d6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    33c2:	88 81       	ld	r24, Y
    33c4:	99 81       	ldd	r25, Y+1	; 0x01
    33c6:	89 2b       	or	r24, r25
    33c8:	09 f4       	brne	.+2      	; 0x33cc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    33ca:	89 c0       	rjmp	.+274    	; 0x34de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	9b 81       	ldd	r25, Y+3	; 0x03
    33d0:	89 2b       	or	r24, r25
    33d2:	09 f4       	brne	.+2      	; 0x33d6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    33d4:	84 c0       	rjmp	.+264    	; 0x34de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33d6:	4b 2d       	mov	r20, r11
    33d8:	b8 01       	movw	r22, r16
    33da:	ce 01       	movw	r24, r28
    33dc:	0e 94 45 18 	call	0x308a	; 0x308a <_ZN16PololuQTRSensors4readEPjh>
    33e0:	78 01       	movw	r14, r16
    33e2:	00 e0       	ldi	r16, 0x00	; 0
    33e4:	10 e0       	ldi	r17, 0x00	; 0
    33e6:	c1 2c       	mov	r12, r1
    33e8:	d1 2c       	mov	r13, r1
    33ea:	88 85       	ldd	r24, Y+8	; 0x08
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	c8 16       	cp	r12, r24
    33f0:	d9 06       	cpc	r13, r25
    33f2:	0c f0       	brlt	.+2      	; 0x33f6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    33f4:	74 c0       	rjmp	.+232    	; 0x34de <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	b8 12       	cpse	r11, r24
    33fa:	0a c0       	rjmp	.+20     	; 0x3410 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    33fc:	ea 81       	ldd	r30, Y+2	; 0x02
    33fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3400:	e0 0f       	add	r30, r16
    3402:	f1 1f       	adc	r31, r17
    3404:	01 90       	ld	r0, Z+
    3406:	f0 81       	ld	r31, Z
    3408:	e0 2d       	mov	r30, r0
    340a:	a8 81       	ld	r26, Y
    340c:	b9 81       	ldd	r27, Y+1	; 0x01
    340e:	0d c0       	rjmp	.+26     	; 0x342a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3410:	8c 81       	ldd	r24, Y+4	; 0x04
    3412:	9d 81       	ldd	r25, Y+5	; 0x05
    3414:	2e 81       	ldd	r18, Y+6	; 0x06
    3416:	3f 81       	ldd	r19, Y+7	; 0x07
    3418:	b1 10       	cpse	r11, r1
    341a:	0c c0       	rjmp	.+24     	; 0x3434 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    341c:	f9 01       	movw	r30, r18
    341e:	e0 0f       	add	r30, r16
    3420:	f1 1f       	adc	r31, r17
    3422:	01 90       	ld	r0, Z+
    3424:	f0 81       	ld	r31, Z
    3426:	e0 2d       	mov	r30, r0
    3428:	dc 01       	movw	r26, r24
    342a:	a0 0f       	add	r26, r16
    342c:	b1 1f       	adc	r27, r17
    342e:	8d 91       	ld	r24, X+
    3430:	9c 91       	ld	r25, X
    3432:	28 c0       	rjmp	.+80     	; 0x3484 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    3434:	fc 01       	movw	r30, r24
    3436:	e0 0f       	add	r30, r16
    3438:	f1 1f       	adc	r31, r17
    343a:	40 81       	ld	r20, Z
    343c:	51 81       	ldd	r21, Z+1	; 0x01
    343e:	e8 81       	ld	r30, Y
    3440:	f9 81       	ldd	r31, Y+1	; 0x01
    3442:	e0 0f       	add	r30, r16
    3444:	f1 1f       	adc	r31, r17
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	ee 85       	ldd	r30, Y+14	; 0x0e
    344c:	ff 85       	ldd	r31, Y+15	; 0x0f
    344e:	48 17       	cp	r20, r24
    3450:	59 07       	cpc	r21, r25
    3452:	10 f4       	brcc	.+4      	; 0x3458 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    3454:	cf 01       	movw	r24, r30
    3456:	04 c0       	rjmp	.+8      	; 0x3460 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    3458:	8e 0f       	add	r24, r30
    345a:	9f 1f       	adc	r25, r31
    345c:	84 1b       	sub	r24, r20
    345e:	95 0b       	sbc	r25, r21
    3460:	d9 01       	movw	r26, r18
    3462:	a0 0f       	add	r26, r16
    3464:	b1 1f       	adc	r27, r17
    3466:	2d 91       	ld	r18, X+
    3468:	3c 91       	ld	r19, X
    346a:	aa 81       	ldd	r26, Y+2	; 0x02
    346c:	bb 81       	ldd	r27, Y+3	; 0x03
    346e:	a0 0f       	add	r26, r16
    3470:	b1 1f       	adc	r27, r17
    3472:	4d 91       	ld	r20, X+
    3474:	5c 91       	ld	r21, X
    3476:	24 17       	cp	r18, r20
    3478:	35 07       	cpc	r19, r21
    347a:	20 f0       	brcs	.+8      	; 0x3484 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    347c:	e4 0f       	add	r30, r20
    347e:	f5 1f       	adc	r31, r21
    3480:	e2 1b       	sub	r30, r18
    3482:	f3 0b       	sbc	r31, r19
    3484:	e8 1b       	sub	r30, r24
    3486:	f9 0b       	sbc	r31, r25
    3488:	a9 f0       	breq	.+42     	; 0x34b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    348a:	d7 01       	movw	r26, r14
    348c:	2d 91       	ld	r18, X+
    348e:	3c 91       	ld	r19, X
    3490:	40 e0       	ldi	r20, 0x00	; 0
    3492:	50 e0       	ldi	r21, 0x00	; 0
    3494:	28 1b       	sub	r18, r24
    3496:	39 0b       	sbc	r19, r25
    3498:	41 09       	sbc	r20, r1
    349a:	51 09       	sbc	r21, r1
    349c:	a8 ee       	ldi	r26, 0xE8	; 232
    349e:	b3 e0       	ldi	r27, 0x03	; 3
    34a0:	0e 94 91 1b 	call	0x3722	; 0x3722 <__muluhisi3>
    34a4:	9f 01       	movw	r18, r30
    34a6:	40 e0       	ldi	r20, 0x00	; 0
    34a8:	50 e0       	ldi	r21, 0x00	; 0
    34aa:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <__divmodsi4>
    34ae:	37 fd       	sbrc	r19, 7
    34b0:	0a c0       	rjmp	.+20     	; 0x34c6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    34b2:	02 c0       	rjmp	.+4      	; 0x34b8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	29 3e       	cpi	r18, 0xE9	; 233
    34ba:	b3 e0       	ldi	r27, 0x03	; 3
    34bc:	3b 07       	cpc	r19, r27
    34be:	2c f0       	brlt	.+10     	; 0x34ca <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    34c0:	28 ee       	ldi	r18, 0xE8	; 232
    34c2:	33 e0       	ldi	r19, 0x03	; 3
    34c4:	02 c0       	rjmp	.+4      	; 0x34ca <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	f7 01       	movw	r30, r14
    34cc:	21 93       	st	Z+, r18
    34ce:	31 93       	st	Z+, r19
    34d0:	7f 01       	movw	r14, r30
    34d2:	ff ef       	ldi	r31, 0xFF	; 255
    34d4:	cf 1a       	sub	r12, r31
    34d6:	df 0a       	sbc	r13, r31
    34d8:	0e 5f       	subi	r16, 0xFE	; 254
    34da:	1f 4f       	sbci	r17, 0xFF	; 255
    34dc:	86 cf       	rjmp	.-244    	; 0x33ea <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	e9 e0       	ldi	r30, 0x09	; 9
    34e4:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__epilogue_restores__+0x12>

000034e8 <_ZN16PololuQTRSensors8readLineEPjhh>:
    34e8:	a0 e0       	ldi	r26, 0x00	; 0
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	ea e7       	ldi	r30, 0x7A	; 122
    34ee:	fa e1       	ldi	r31, 0x1A	; 26
    34f0:	0c 94 a4 1b 	jmp	0x3748	; 0x3748 <__prologue_saves__>
    34f4:	ec 01       	movw	r28, r24
    34f6:	8b 01       	movw	r16, r22
    34f8:	82 2e       	mov	r8, r18
    34fa:	0e 94 c7 19 	call	0x338e	; 0x338e <_ZN16PololuQTRSensors14readCalibratedEPjh>
    34fe:	28 84       	ldd	r2, Y+8	; 0x08
    3500:	e8 01       	movw	r28, r16
    3502:	41 2c       	mov	r4, r1
    3504:	51 2c       	mov	r5, r1
    3506:	32 01       	movw	r6, r4
    3508:	00 e0       	ldi	r16, 0x00	; 0
    350a:	10 e0       	ldi	r17, 0x00	; 0
    350c:	c1 2c       	mov	r12, r1
    350e:	d1 2c       	mov	r13, r1
    3510:	76 01       	movw	r14, r12
    3512:	31 2c       	mov	r3, r1
    3514:	91 2c       	mov	r9, r1
    3516:	58 ee       	ldi	r21, 0xE8	; 232
    3518:	a5 2e       	mov	r10, r21
    351a:	53 e0       	ldi	r21, 0x03	; 3
    351c:	b5 2e       	mov	r11, r21
    351e:	92 14       	cp	r9, r2
    3520:	21 f1       	breq	.+72     	; 0x356a <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3522:	e9 91       	ld	r30, Y+
    3524:	f9 91       	ld	r31, Y+
    3526:	88 20       	and	r8, r8
    3528:	21 f0       	breq	.+8      	; 0x3532 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    352a:	c5 01       	movw	r24, r10
    352c:	8e 1b       	sub	r24, r30
    352e:	9f 0b       	sbc	r25, r31
    3530:	fc 01       	movw	r30, r24
    3532:	e9 3c       	cpi	r30, 0xC9	; 201
    3534:	f1 05       	cpc	r31, r1
    3536:	24 f4       	brge	.+8      	; 0x3540 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    3538:	e3 33       	cpi	r30, 0x33	; 51
    353a:	f1 05       	cpc	r31, r1
    353c:	74 f0       	brlt	.+28     	; 0x355a <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    353e:	02 c0       	rjmp	.+4      	; 0x3544 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    3540:	33 24       	eor	r3, r3
    3542:	33 94       	inc	r3
    3544:	df 01       	movw	r26, r30
    3546:	a3 01       	movw	r20, r6
    3548:	92 01       	movw	r18, r4
    354a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <__mulshisi3>
    354e:	c6 0e       	add	r12, r22
    3550:	d7 1e       	adc	r13, r23
    3552:	e8 1e       	adc	r14, r24
    3554:	f9 1e       	adc	r15, r25
    3556:	0e 0f       	add	r16, r30
    3558:	1f 1f       	adc	r17, r31
    355a:	93 94       	inc	r9
    355c:	98 ee       	ldi	r25, 0xE8	; 232
    355e:	49 0e       	add	r4, r25
    3560:	93 e0       	ldi	r25, 0x03	; 3
    3562:	59 1e       	adc	r5, r25
    3564:	61 1c       	adc	r6, r1
    3566:	71 1c       	adc	r7, r1
    3568:	da cf       	rjmp	.-76     	; 0x351e <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    356a:	31 10       	cpse	r3, r1
    356c:	1e c0       	rjmp	.+60     	; 0x35aa <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    356e:	49 2d       	mov	r20, r9
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	41 50       	subi	r20, 0x01	; 1
    3574:	51 09       	sbc	r21, r1
    3576:	24 ef       	ldi	r18, 0xF4	; 244
    3578:	31 e0       	ldi	r19, 0x01	; 1
    357a:	42 9f       	mul	r20, r18
    357c:	c0 01       	movw	r24, r0
    357e:	43 9f       	mul	r20, r19
    3580:	90 0d       	add	r25, r0
    3582:	52 9f       	mul	r21, r18
    3584:	90 0d       	add	r25, r0
    3586:	11 24       	eor	r1, r1
    3588:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    358c:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3590:	28 17       	cp	r18, r24
    3592:	39 07       	cpc	r19, r25
    3594:	b4 f0       	brlt	.+44     	; 0x35c2 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    3596:	88 ee       	ldi	r24, 0xE8	; 232
    3598:	93 e0       	ldi	r25, 0x03	; 3
    359a:	48 9f       	mul	r20, r24
    359c:	90 01       	movw	r18, r0
    359e:	49 9f       	mul	r20, r25
    35a0:	30 0d       	add	r19, r0
    35a2:	58 9f       	mul	r21, r24
    35a4:	30 0d       	add	r19, r0
    35a6:	11 24       	eor	r1, r1
    35a8:	0e c0       	rjmp	.+28     	; 0x35c6 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    35aa:	98 01       	movw	r18, r16
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	c7 01       	movw	r24, r14
    35b2:	b6 01       	movw	r22, r12
    35b4:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__udivmodsi4>
    35b8:	30 93 fe 01 	sts	0x01FE, r19	; 0x8001fe <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    35bc:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	c9 01       	movw	r24, r18
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	e2 e1       	ldi	r30, 0x12	; 18
    35ce:	0c 94 c0 1b 	jmp	0x3780	; 0x3780 <__epilogue_restores__>

000035d2 <_ZN16PololuQTRSensorsD1Ev>:
    35d2:	cf 93       	push	r28
    35d4:	df 93       	push	r29
    35d6:	ec 01       	movw	r28, r24
    35d8:	8a 81       	ldd	r24, Y+2	; 0x02
    35da:	9b 81       	ldd	r25, Y+3	; 0x03
    35dc:	00 97       	sbiw	r24, 0x00	; 0
    35de:	11 f0       	breq	.+4      	; 0x35e4 <_ZN16PololuQTRSensorsD1Ev+0x12>
    35e0:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <free>
    35e4:	8e 81       	ldd	r24, Y+6	; 0x06
    35e6:	9f 81       	ldd	r25, Y+7	; 0x07
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	11 f0       	breq	.+4      	; 0x35f0 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    35ec:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <free>
    35f0:	88 81       	ld	r24, Y
    35f2:	99 81       	ldd	r25, Y+1	; 0x01
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	11 f0       	breq	.+4      	; 0x35fc <_ZN16PololuQTRSensorsD1Ev+0x2a>
    35f8:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <free>
    35fc:	8c 81       	ldd	r24, Y+4	; 0x04
    35fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	11 f0       	breq	.+4      	; 0x3608 <_ZN16PololuQTRSensorsD1Ev+0x36>
    3604:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <free>
    3608:	df 91       	pop	r29
    360a:	cf 91       	pop	r28
    360c:	08 95       	ret

0000360e <__udivmodqi4>:
    360e:	99 1b       	sub	r25, r25
    3610:	79 e0       	ldi	r23, 0x09	; 9
    3612:	04 c0       	rjmp	.+8      	; 0x361c <__udivmodqi4_ep>

00003614 <__udivmodqi4_loop>:
    3614:	99 1f       	adc	r25, r25
    3616:	96 17       	cp	r25, r22
    3618:	08 f0       	brcs	.+2      	; 0x361c <__udivmodqi4_ep>
    361a:	96 1b       	sub	r25, r22

0000361c <__udivmodqi4_ep>:
    361c:	88 1f       	adc	r24, r24
    361e:	7a 95       	dec	r23
    3620:	c9 f7       	brne	.-14     	; 0x3614 <__udivmodqi4_loop>
    3622:	80 95       	com	r24
    3624:	08 95       	ret

00003626 <__udivmodhi4>:
    3626:	aa 1b       	sub	r26, r26
    3628:	bb 1b       	sub	r27, r27
    362a:	51 e1       	ldi	r21, 0x11	; 17
    362c:	07 c0       	rjmp	.+14     	; 0x363c <__udivmodhi4_ep>

0000362e <__udivmodhi4_loop>:
    362e:	aa 1f       	adc	r26, r26
    3630:	bb 1f       	adc	r27, r27
    3632:	a6 17       	cp	r26, r22
    3634:	b7 07       	cpc	r27, r23
    3636:	10 f0       	brcs	.+4      	; 0x363c <__udivmodhi4_ep>
    3638:	a6 1b       	sub	r26, r22
    363a:	b7 0b       	sbc	r27, r23

0000363c <__udivmodhi4_ep>:
    363c:	88 1f       	adc	r24, r24
    363e:	99 1f       	adc	r25, r25
    3640:	5a 95       	dec	r21
    3642:	a9 f7       	brne	.-22     	; 0x362e <__udivmodhi4_loop>
    3644:	80 95       	com	r24
    3646:	90 95       	com	r25
    3648:	bc 01       	movw	r22, r24
    364a:	cd 01       	movw	r24, r26
    364c:	08 95       	ret

0000364e <__divmodhi4>:
    364e:	97 fb       	bst	r25, 7
    3650:	07 2e       	mov	r0, r23
    3652:	16 f4       	brtc	.+4      	; 0x3658 <__divmodhi4+0xa>
    3654:	00 94       	com	r0
    3656:	07 d0       	rcall	.+14     	; 0x3666 <__divmodhi4_neg1>
    3658:	77 fd       	sbrc	r23, 7
    365a:	09 d0       	rcall	.+18     	; 0x366e <__divmodhi4_neg2>
    365c:	0e 94 13 1b 	call	0x3626	; 0x3626 <__udivmodhi4>
    3660:	07 fc       	sbrc	r0, 7
    3662:	05 d0       	rcall	.+10     	; 0x366e <__divmodhi4_neg2>
    3664:	3e f4       	brtc	.+14     	; 0x3674 <__divmodhi4_exit>

00003666 <__divmodhi4_neg1>:
    3666:	90 95       	com	r25
    3668:	81 95       	neg	r24
    366a:	9f 4f       	sbci	r25, 0xFF	; 255
    366c:	08 95       	ret

0000366e <__divmodhi4_neg2>:
    366e:	70 95       	com	r23
    3670:	61 95       	neg	r22
    3672:	7f 4f       	sbci	r23, 0xFF	; 255

00003674 <__divmodhi4_exit>:
    3674:	08 95       	ret

00003676 <__udivmodsi4>:
    3676:	a1 e2       	ldi	r26, 0x21	; 33
    3678:	1a 2e       	mov	r1, r26
    367a:	aa 1b       	sub	r26, r26
    367c:	bb 1b       	sub	r27, r27
    367e:	fd 01       	movw	r30, r26
    3680:	0d c0       	rjmp	.+26     	; 0x369c <__udivmodsi4_ep>

00003682 <__udivmodsi4_loop>:
    3682:	aa 1f       	adc	r26, r26
    3684:	bb 1f       	adc	r27, r27
    3686:	ee 1f       	adc	r30, r30
    3688:	ff 1f       	adc	r31, r31
    368a:	a2 17       	cp	r26, r18
    368c:	b3 07       	cpc	r27, r19
    368e:	e4 07       	cpc	r30, r20
    3690:	f5 07       	cpc	r31, r21
    3692:	20 f0       	brcs	.+8      	; 0x369c <__udivmodsi4_ep>
    3694:	a2 1b       	sub	r26, r18
    3696:	b3 0b       	sbc	r27, r19
    3698:	e4 0b       	sbc	r30, r20
    369a:	f5 0b       	sbc	r31, r21

0000369c <__udivmodsi4_ep>:
    369c:	66 1f       	adc	r22, r22
    369e:	77 1f       	adc	r23, r23
    36a0:	88 1f       	adc	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	1a 94       	dec	r1
    36a6:	69 f7       	brne	.-38     	; 0x3682 <__udivmodsi4_loop>
    36a8:	60 95       	com	r22
    36aa:	70 95       	com	r23
    36ac:	80 95       	com	r24
    36ae:	90 95       	com	r25
    36b0:	9b 01       	movw	r18, r22
    36b2:	ac 01       	movw	r20, r24
    36b4:	bd 01       	movw	r22, r26
    36b6:	cf 01       	movw	r24, r30
    36b8:	08 95       	ret

000036ba <__divmodsi4>:
    36ba:	05 2e       	mov	r0, r21
    36bc:	97 fb       	bst	r25, 7
    36be:	1e f4       	brtc	.+6      	; 0x36c6 <__divmodsi4+0xc>
    36c0:	00 94       	com	r0
    36c2:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__negsi2>
    36c6:	57 fd       	sbrc	r21, 7
    36c8:	07 d0       	rcall	.+14     	; 0x36d8 <__divmodsi4_neg2>
    36ca:	0e 94 3b 1b 	call	0x3676	; 0x3676 <__udivmodsi4>
    36ce:	07 fc       	sbrc	r0, 7
    36d0:	03 d0       	rcall	.+6      	; 0x36d8 <__divmodsi4_neg2>
    36d2:	4e f4       	brtc	.+18     	; 0x36e6 <__divmodsi4_exit>
    36d4:	0c 94 74 1b 	jmp	0x36e8	; 0x36e8 <__negsi2>

000036d8 <__divmodsi4_neg2>:
    36d8:	50 95       	com	r21
    36da:	40 95       	com	r20
    36dc:	30 95       	com	r19
    36de:	21 95       	neg	r18
    36e0:	3f 4f       	sbci	r19, 0xFF	; 255
    36e2:	4f 4f       	sbci	r20, 0xFF	; 255
    36e4:	5f 4f       	sbci	r21, 0xFF	; 255

000036e6 <__divmodsi4_exit>:
    36e6:	08 95       	ret

000036e8 <__negsi2>:
    36e8:	90 95       	com	r25
    36ea:	80 95       	com	r24
    36ec:	70 95       	com	r23
    36ee:	61 95       	neg	r22
    36f0:	7f 4f       	sbci	r23, 0xFF	; 255
    36f2:	8f 4f       	sbci	r24, 0xFF	; 255
    36f4:	9f 4f       	sbci	r25, 0xFF	; 255
    36f6:	08 95       	ret

000036f8 <__tablejump2__>:
    36f8:	ee 0f       	add	r30, r30
    36fa:	ff 1f       	adc	r31, r31
    36fc:	05 90       	lpm	r0, Z+
    36fe:	f4 91       	lpm	r31, Z
    3700:	e0 2d       	mov	r30, r0
    3702:	09 94       	ijmp

00003704 <__umulhisi3>:
    3704:	a2 9f       	mul	r26, r18
    3706:	b0 01       	movw	r22, r0
    3708:	b3 9f       	mul	r27, r19
    370a:	c0 01       	movw	r24, r0
    370c:	a3 9f       	mul	r26, r19
    370e:	70 0d       	add	r23, r0
    3710:	81 1d       	adc	r24, r1
    3712:	11 24       	eor	r1, r1
    3714:	91 1d       	adc	r25, r1
    3716:	b2 9f       	mul	r27, r18
    3718:	70 0d       	add	r23, r0
    371a:	81 1d       	adc	r24, r1
    371c:	11 24       	eor	r1, r1
    371e:	91 1d       	adc	r25, r1
    3720:	08 95       	ret

00003722 <__muluhisi3>:
    3722:	0e 94 82 1b 	call	0x3704	; 0x3704 <__umulhisi3>
    3726:	a5 9f       	mul	r26, r21
    3728:	90 0d       	add	r25, r0
    372a:	b4 9f       	mul	r27, r20
    372c:	90 0d       	add	r25, r0
    372e:	a4 9f       	mul	r26, r20
    3730:	80 0d       	add	r24, r0
    3732:	91 1d       	adc	r25, r1
    3734:	11 24       	eor	r1, r1
    3736:	08 95       	ret

00003738 <__mulshisi3>:
    3738:	b7 ff       	sbrs	r27, 7
    373a:	0c 94 91 1b 	jmp	0x3722	; 0x3722 <__muluhisi3>

0000373e <__mulohisi3>:
    373e:	0e 94 91 1b 	call	0x3722	; 0x3722 <__muluhisi3>
    3742:	82 1b       	sub	r24, r18
    3744:	93 0b       	sbc	r25, r19
    3746:	08 95       	ret

00003748 <__prologue_saves__>:
    3748:	2f 92       	push	r2
    374a:	3f 92       	push	r3
    374c:	4f 92       	push	r4
    374e:	5f 92       	push	r5
    3750:	6f 92       	push	r6
    3752:	7f 92       	push	r7
    3754:	8f 92       	push	r8
    3756:	9f 92       	push	r9
    3758:	af 92       	push	r10
    375a:	bf 92       	push	r11
    375c:	cf 92       	push	r12
    375e:	df 92       	push	r13
    3760:	ef 92       	push	r14
    3762:	ff 92       	push	r15
    3764:	0f 93       	push	r16
    3766:	1f 93       	push	r17
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	ca 1b       	sub	r28, r26
    3772:	db 0b       	sbc	r29, r27
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	09 94       	ijmp

00003780 <__epilogue_restores__>:
    3780:	2a 88       	ldd	r2, Y+18	; 0x12
    3782:	39 88       	ldd	r3, Y+17	; 0x11
    3784:	48 88       	ldd	r4, Y+16	; 0x10
    3786:	5f 84       	ldd	r5, Y+15	; 0x0f
    3788:	6e 84       	ldd	r6, Y+14	; 0x0e
    378a:	7d 84       	ldd	r7, Y+13	; 0x0d
    378c:	8c 84       	ldd	r8, Y+12	; 0x0c
    378e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3790:	aa 84       	ldd	r10, Y+10	; 0x0a
    3792:	b9 84       	ldd	r11, Y+9	; 0x09
    3794:	c8 84       	ldd	r12, Y+8	; 0x08
    3796:	df 80       	ldd	r13, Y+7	; 0x07
    3798:	ee 80       	ldd	r14, Y+6	; 0x06
    379a:	fd 80       	ldd	r15, Y+5	; 0x05
    379c:	0c 81       	ldd	r16, Y+4	; 0x04
    379e:	1b 81       	ldd	r17, Y+3	; 0x03
    37a0:	aa 81       	ldd	r26, Y+2	; 0x02
    37a2:	b9 81       	ldd	r27, Y+1	; 0x01
    37a4:	ce 0f       	add	r28, r30
    37a6:	d1 1d       	adc	r29, r1
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	f8 94       	cli
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	cd bf       	out	0x3d, r28	; 61
    37b2:	ed 01       	movw	r28, r26
    37b4:	08 95       	ret

000037b6 <malloc>:
    37b6:	0f 93       	push	r16
    37b8:	1f 93       	push	r17
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
    37be:	82 30       	cpi	r24, 0x02	; 2
    37c0:	91 05       	cpc	r25, r1
    37c2:	10 f4       	brcc	.+4      	; 0x37c8 <malloc+0x12>
    37c4:	82 e0       	ldi	r24, 0x02	; 2
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <__flp>
    37cc:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <__flp+0x1>
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	a0 e0       	ldi	r26, 0x00	; 0
    37d6:	b0 e0       	ldi	r27, 0x00	; 0
    37d8:	30 97       	sbiw	r30, 0x00	; 0
    37da:	19 f1       	breq	.+70     	; 0x3822 <malloc+0x6c>
    37dc:	40 81       	ld	r20, Z
    37de:	51 81       	ldd	r21, Z+1	; 0x01
    37e0:	02 81       	ldd	r16, Z+2	; 0x02
    37e2:	13 81       	ldd	r17, Z+3	; 0x03
    37e4:	48 17       	cp	r20, r24
    37e6:	59 07       	cpc	r21, r25
    37e8:	c8 f0       	brcs	.+50     	; 0x381c <malloc+0x66>
    37ea:	84 17       	cp	r24, r20
    37ec:	95 07       	cpc	r25, r21
    37ee:	69 f4       	brne	.+26     	; 0x380a <malloc+0x54>
    37f0:	10 97       	sbiw	r26, 0x00	; 0
    37f2:	31 f0       	breq	.+12     	; 0x3800 <malloc+0x4a>
    37f4:	12 96       	adiw	r26, 0x02	; 2
    37f6:	0c 93       	st	X, r16
    37f8:	12 97       	sbiw	r26, 0x02	; 2
    37fa:	13 96       	adiw	r26, 0x03	; 3
    37fc:	1c 93       	st	X, r17
    37fe:	27 c0       	rjmp	.+78     	; 0x384e <malloc+0x98>
    3800:	00 93 19 02 	sts	0x0219, r16	; 0x800219 <__flp>
    3804:	10 93 1a 02 	sts	0x021A, r17	; 0x80021a <__flp+0x1>
    3808:	22 c0       	rjmp	.+68     	; 0x384e <malloc+0x98>
    380a:	21 15       	cp	r18, r1
    380c:	31 05       	cpc	r19, r1
    380e:	19 f0       	breq	.+6      	; 0x3816 <malloc+0x60>
    3810:	42 17       	cp	r20, r18
    3812:	53 07       	cpc	r21, r19
    3814:	18 f4       	brcc	.+6      	; 0x381c <malloc+0x66>
    3816:	9a 01       	movw	r18, r20
    3818:	bd 01       	movw	r22, r26
    381a:	ef 01       	movw	r28, r30
    381c:	df 01       	movw	r26, r30
    381e:	f8 01       	movw	r30, r16
    3820:	db cf       	rjmp	.-74     	; 0x37d8 <malloc+0x22>
    3822:	21 15       	cp	r18, r1
    3824:	31 05       	cpc	r19, r1
    3826:	f9 f0       	breq	.+62     	; 0x3866 <malloc+0xb0>
    3828:	28 1b       	sub	r18, r24
    382a:	39 0b       	sbc	r19, r25
    382c:	24 30       	cpi	r18, 0x04	; 4
    382e:	31 05       	cpc	r19, r1
    3830:	80 f4       	brcc	.+32     	; 0x3852 <malloc+0x9c>
    3832:	8a 81       	ldd	r24, Y+2	; 0x02
    3834:	9b 81       	ldd	r25, Y+3	; 0x03
    3836:	61 15       	cp	r22, r1
    3838:	71 05       	cpc	r23, r1
    383a:	21 f0       	breq	.+8      	; 0x3844 <malloc+0x8e>
    383c:	fb 01       	movw	r30, r22
    383e:	93 83       	std	Z+3, r25	; 0x03
    3840:	82 83       	std	Z+2, r24	; 0x02
    3842:	04 c0       	rjmp	.+8      	; 0x384c <malloc+0x96>
    3844:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <__flp+0x1>
    3848:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <__flp>
    384c:	fe 01       	movw	r30, r28
    384e:	32 96       	adiw	r30, 0x02	; 2
    3850:	44 c0       	rjmp	.+136    	; 0x38da <malloc+0x124>
    3852:	fe 01       	movw	r30, r28
    3854:	e2 0f       	add	r30, r18
    3856:	f3 1f       	adc	r31, r19
    3858:	81 93       	st	Z+, r24
    385a:	91 93       	st	Z+, r25
    385c:	22 50       	subi	r18, 0x02	; 2
    385e:	31 09       	sbc	r19, r1
    3860:	39 83       	std	Y+1, r19	; 0x01
    3862:	28 83       	st	Y, r18
    3864:	3a c0       	rjmp	.+116    	; 0x38da <malloc+0x124>
    3866:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <__brkval>
    386a:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <__brkval+0x1>
    386e:	23 2b       	or	r18, r19
    3870:	41 f4       	brne	.+16     	; 0x3882 <malloc+0xcc>
    3872:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3876:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    387a:	30 93 18 02 	sts	0x0218, r19	; 0x800218 <__brkval+0x1>
    387e:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <__brkval>
    3882:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3886:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    388a:	21 15       	cp	r18, r1
    388c:	31 05       	cpc	r19, r1
    388e:	41 f4       	brne	.+16     	; 0x38a0 <malloc+0xea>
    3890:	2d b7       	in	r18, 0x3d	; 61
    3892:	3e b7       	in	r19, 0x3e	; 62
    3894:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3898:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    389c:	24 1b       	sub	r18, r20
    389e:	35 0b       	sbc	r19, r21
    38a0:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <__brkval>
    38a4:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <__brkval+0x1>
    38a8:	e2 17       	cp	r30, r18
    38aa:	f3 07       	cpc	r31, r19
    38ac:	a0 f4       	brcc	.+40     	; 0x38d6 <malloc+0x120>
    38ae:	2e 1b       	sub	r18, r30
    38b0:	3f 0b       	sbc	r19, r31
    38b2:	28 17       	cp	r18, r24
    38b4:	39 07       	cpc	r19, r25
    38b6:	78 f0       	brcs	.+30     	; 0x38d6 <malloc+0x120>
    38b8:	ac 01       	movw	r20, r24
    38ba:	4e 5f       	subi	r20, 0xFE	; 254
    38bc:	5f 4f       	sbci	r21, 0xFF	; 255
    38be:	24 17       	cp	r18, r20
    38c0:	35 07       	cpc	r19, r21
    38c2:	48 f0       	brcs	.+18     	; 0x38d6 <malloc+0x120>
    38c4:	4e 0f       	add	r20, r30
    38c6:	5f 1f       	adc	r21, r31
    38c8:	50 93 18 02 	sts	0x0218, r21	; 0x800218 <__brkval+0x1>
    38cc:	40 93 17 02 	sts	0x0217, r20	; 0x800217 <__brkval>
    38d0:	81 93       	st	Z+, r24
    38d2:	91 93       	st	Z+, r25
    38d4:	02 c0       	rjmp	.+4      	; 0x38da <malloc+0x124>
    38d6:	e0 e0       	ldi	r30, 0x00	; 0
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	cf 01       	movw	r24, r30
    38dc:	df 91       	pop	r29
    38de:	cf 91       	pop	r28
    38e0:	1f 91       	pop	r17
    38e2:	0f 91       	pop	r16
    38e4:	08 95       	ret

000038e6 <free>:
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <free+0xa>
    38ee:	81 c0       	rjmp	.+258    	; 0x39f2 <free+0x10c>
    38f0:	fc 01       	movw	r30, r24
    38f2:	32 97       	sbiw	r30, 0x02	; 2
    38f4:	13 82       	std	Z+3, r1	; 0x03
    38f6:	12 82       	std	Z+2, r1	; 0x02
    38f8:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <__flp>
    38fc:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <__flp+0x1>
    3900:	10 97       	sbiw	r26, 0x00	; 0
    3902:	81 f4       	brne	.+32     	; 0x3924 <free+0x3e>
    3904:	20 81       	ld	r18, Z
    3906:	31 81       	ldd	r19, Z+1	; 0x01
    3908:	82 0f       	add	r24, r18
    390a:	93 1f       	adc	r25, r19
    390c:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <__brkval>
    3910:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <__brkval+0x1>
    3914:	28 17       	cp	r18, r24
    3916:	39 07       	cpc	r19, r25
    3918:	51 f5       	brne	.+84     	; 0x396e <free+0x88>
    391a:	f0 93 18 02 	sts	0x0218, r31	; 0x800218 <__brkval+0x1>
    391e:	e0 93 17 02 	sts	0x0217, r30	; 0x800217 <__brkval>
    3922:	67 c0       	rjmp	.+206    	; 0x39f2 <free+0x10c>
    3924:	ed 01       	movw	r28, r26
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	ce 17       	cp	r28, r30
    392c:	df 07       	cpc	r29, r31
    392e:	40 f4       	brcc	.+16     	; 0x3940 <free+0x5a>
    3930:	4a 81       	ldd	r20, Y+2	; 0x02
    3932:	5b 81       	ldd	r21, Y+3	; 0x03
    3934:	9e 01       	movw	r18, r28
    3936:	41 15       	cp	r20, r1
    3938:	51 05       	cpc	r21, r1
    393a:	f1 f0       	breq	.+60     	; 0x3978 <free+0x92>
    393c:	ea 01       	movw	r28, r20
    393e:	f5 cf       	rjmp	.-22     	; 0x392a <free+0x44>
    3940:	d3 83       	std	Z+3, r29	; 0x03
    3942:	c2 83       	std	Z+2, r28	; 0x02
    3944:	40 81       	ld	r20, Z
    3946:	51 81       	ldd	r21, Z+1	; 0x01
    3948:	84 0f       	add	r24, r20
    394a:	95 1f       	adc	r25, r21
    394c:	c8 17       	cp	r28, r24
    394e:	d9 07       	cpc	r29, r25
    3950:	59 f4       	brne	.+22     	; 0x3968 <free+0x82>
    3952:	88 81       	ld	r24, Y
    3954:	99 81       	ldd	r25, Y+1	; 0x01
    3956:	84 0f       	add	r24, r20
    3958:	95 1f       	adc	r25, r21
    395a:	02 96       	adiw	r24, 0x02	; 2
    395c:	91 83       	std	Z+1, r25	; 0x01
    395e:	80 83       	st	Z, r24
    3960:	8a 81       	ldd	r24, Y+2	; 0x02
    3962:	9b 81       	ldd	r25, Y+3	; 0x03
    3964:	93 83       	std	Z+3, r25	; 0x03
    3966:	82 83       	std	Z+2, r24	; 0x02
    3968:	21 15       	cp	r18, r1
    396a:	31 05       	cpc	r19, r1
    396c:	29 f4       	brne	.+10     	; 0x3978 <free+0x92>
    396e:	f0 93 1a 02 	sts	0x021A, r31	; 0x80021a <__flp+0x1>
    3972:	e0 93 19 02 	sts	0x0219, r30	; 0x800219 <__flp>
    3976:	3d c0       	rjmp	.+122    	; 0x39f2 <free+0x10c>
    3978:	e9 01       	movw	r28, r18
    397a:	fb 83       	std	Y+3, r31	; 0x03
    397c:	ea 83       	std	Y+2, r30	; 0x02
    397e:	49 91       	ld	r20, Y+
    3980:	59 91       	ld	r21, Y+
    3982:	c4 0f       	add	r28, r20
    3984:	d5 1f       	adc	r29, r21
    3986:	ec 17       	cp	r30, r28
    3988:	fd 07       	cpc	r31, r29
    398a:	61 f4       	brne	.+24     	; 0x39a4 <free+0xbe>
    398c:	80 81       	ld	r24, Z
    398e:	91 81       	ldd	r25, Z+1	; 0x01
    3990:	84 0f       	add	r24, r20
    3992:	95 1f       	adc	r25, r21
    3994:	02 96       	adiw	r24, 0x02	; 2
    3996:	e9 01       	movw	r28, r18
    3998:	99 83       	std	Y+1, r25	; 0x01
    399a:	88 83       	st	Y, r24
    399c:	82 81       	ldd	r24, Z+2	; 0x02
    399e:	93 81       	ldd	r25, Z+3	; 0x03
    39a0:	9b 83       	std	Y+3, r25	; 0x03
    39a2:	8a 83       	std	Y+2, r24	; 0x02
    39a4:	e0 e0       	ldi	r30, 0x00	; 0
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	12 96       	adiw	r26, 0x02	; 2
    39aa:	8d 91       	ld	r24, X+
    39ac:	9c 91       	ld	r25, X
    39ae:	13 97       	sbiw	r26, 0x03	; 3
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	19 f0       	breq	.+6      	; 0x39ba <free+0xd4>
    39b4:	fd 01       	movw	r30, r26
    39b6:	dc 01       	movw	r26, r24
    39b8:	f7 cf       	rjmp	.-18     	; 0x39a8 <free+0xc2>
    39ba:	8d 91       	ld	r24, X+
    39bc:	9c 91       	ld	r25, X
    39be:	11 97       	sbiw	r26, 0x01	; 1
    39c0:	9d 01       	movw	r18, r26
    39c2:	2e 5f       	subi	r18, 0xFE	; 254
    39c4:	3f 4f       	sbci	r19, 0xFF	; 255
    39c6:	82 0f       	add	r24, r18
    39c8:	93 1f       	adc	r25, r19
    39ca:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <__brkval>
    39ce:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <__brkval+0x1>
    39d2:	28 17       	cp	r18, r24
    39d4:	39 07       	cpc	r19, r25
    39d6:	69 f4       	brne	.+26     	; 0x39f2 <free+0x10c>
    39d8:	30 97       	sbiw	r30, 0x00	; 0
    39da:	29 f4       	brne	.+10     	; 0x39e6 <free+0x100>
    39dc:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__flp+0x1>
    39e0:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <__flp>
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <free+0x104>
    39e6:	13 82       	std	Z+3, r1	; 0x03
    39e8:	12 82       	std	Z+2, r1	; 0x02
    39ea:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <__brkval+0x1>
    39ee:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <__brkval>
    39f2:	df 91       	pop	r29
    39f4:	cf 91       	pop	r28
    39f6:	08 95       	ret

000039f8 <strncat>:
    39f8:	fb 01       	movw	r30, r22
    39fa:	dc 01       	movw	r26, r24
    39fc:	0d 90       	ld	r0, X+
    39fe:	00 20       	and	r0, r0
    3a00:	e9 f7       	brne	.-6      	; 0x39fc <strncat+0x4>
    3a02:	11 97       	sbiw	r26, 0x01	; 1
    3a04:	41 50       	subi	r20, 0x01	; 1
    3a06:	50 40       	sbci	r21, 0x00	; 0
    3a08:	28 f0       	brcs	.+10     	; 0x3a14 <strncat+0x1c>
    3a0a:	01 90       	ld	r0, Z+
    3a0c:	00 20       	and	r0, r0
    3a0e:	0d 92       	st	X+, r0
    3a10:	c9 f7       	brne	.-14     	; 0x3a04 <strncat+0xc>
    3a12:	08 95       	ret
    3a14:	1c 92       	st	X, r1
    3a16:	08 95       	ret

00003a18 <__do_global_dtors>:
    3a18:	11 e0       	ldi	r17, 0x01	; 1
    3a1a:	c7 e2       	ldi	r28, 0x27	; 39
    3a1c:	d1 e0       	ldi	r29, 0x01	; 1
    3a1e:	04 c0       	rjmp	.+8      	; 0x3a28 <__do_global_dtors+0x10>
    3a20:	fe 01       	movw	r30, r28
    3a22:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <__tablejump2__>
    3a26:	21 96       	adiw	r28, 0x01	; 1
    3a28:	c8 32       	cpi	r28, 0x28	; 40
    3a2a:	d1 07       	cpc	r29, r17
    3a2c:	c9 f7       	brne	.-14     	; 0x3a20 <__do_global_dtors+0x8>
    3a2e:	f8 94       	cli

00003a30 <__stop_program>:
    3a30:	ff cf       	rjmp	.-2      	; 0x3a30 <__stop_program>
