
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001fa2  00002036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800142  00800142  00002078  2**0
                  ALLOC
  3 .stab         000059c4  00000000  00000000  00002078  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000084be  00000000  00000000  00007a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0000fefa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000ff3c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000f8  00000000  00000000  0000ff7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000189e  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000b86  00000000  00000000  00011912  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000fbb  00000000  00000000  00012498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002b8  00000000  00000000  00013454  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000720  00000000  00000000  0001370c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000008be  00000000  00000000  00013e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000100  00000000  00000000  000146ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__dtors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_9>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	cf 08       	sbc	r12, r15

0000006a <__dtors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	e2 ea       	ldi	r30, 0xA2	; 162
      7e:	ff e1       	ldi	r31, 0x1F	; 31
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a2 34       	cpi	r26, 0x42	; 66
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a2 e4       	ldi	r26, 0x42	; 66
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a1 3b       	cpi	r26, 0xB1	; 177
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
      9c:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
      a0:	0c 94 c4 0f 	jmp	0x1f88	; 0x1f88 <__do_global_dtors>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <batteryPercentage>:
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
      a8:	0e 94 7f 05 	call	0xafe	; 0xafe <read_battery_millivolts_3pi>

int batteryPercentage()//Should this function be in main or in display.c or something else?
{
	
	int milliVolts = read_battery_millivolts();
	int batteryPercent = milliVolts/50;
      ac:	62 e3       	ldi	r22, 0x32	; 50
      ae:	70 e0       	ldi	r23, 0x00	; 0
      b0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__divmodhi4>
      b4:	cb 01       	movw	r24, r22
	return batteryPercent;
}
      b6:	08 95       	ret

000000b8 <updateDisplay>:

void updateDisplay(int orderPercent, int batteryPercent, robotStates currentState)
{
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	cf 93       	push	r28
      c2:	7c 01       	movw	r14, r24
      c4:	8b 01       	movw	r16, r22
      c6:	c4 2f       	mov	r28, r20
	clear();
      c8:	0e 94 88 06 	call	0xd10	; 0xd10 <clear>
	lcd_goto_xy(0,0);
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <lcd_goto_xy>
	print("Task:");
      d4:	8b e2       	ldi	r24, 0x2B	; 43
      d6:	91 e0       	ldi	r25, 0x01	; 1
      d8:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
	print_long(orderPercent);
      dc:	b7 01       	movw	r22, r14
      de:	ff 0c       	add	r15, r15
      e0:	88 0b       	sbc	r24, r24
      e2:	99 0b       	sbc	r25, r25
      e4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <print_long>
	print("%");
      e8:	81 e3       	ldi	r24, 0x31	; 49
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
	
	lcd_goto_xy(0,1);
      f0:	61 e0       	ldi	r22, 0x01	; 1
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <lcd_goto_xy>
	print("Bat:");
      f8:	83 e3       	ldi	r24, 0x33	; 51
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
	print_long(batteryPercent);
     100:	b8 01       	movw	r22, r16
     102:	11 0f       	add	r17, r17
     104:	88 0b       	sbc	r24, r24
     106:	99 0b       	sbc	r25, r25
     108:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <print_long>
	print("%");
     10c:	81 e3       	ldi	r24, 0x31	; 49
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
	switch(currentState)
     114:	c2 30       	cpi	r28, 0x02	; 2
     116:	a9 f0       	breq	.+42     	; 0x142 <updateDisplay+0x8a>
     118:	28 f4       	brcc	.+10     	; 0x124 <updateDisplay+0x6c>
     11a:	cc 23       	and	r28, r28
     11c:	41 f0       	breq	.+16     	; 0x12e <updateDisplay+0x76>
     11e:	c1 30       	cpi	r28, 0x01	; 1
     120:	59 f0       	breq	.+22     	; 0x138 <updateDisplay+0x80>
     122:	1d c0       	rjmp	.+58     	; 0x15e <updateDisplay+0xa6>
     124:	c3 30       	cpi	r28, 0x03	; 3
     126:	91 f0       	breq	.+36     	; 0x14c <updateDisplay+0x94>
     128:	c4 30       	cpi	r28, 0x04	; 4
     12a:	a9 f0       	breq	.+42     	; 0x156 <updateDisplay+0x9e>
     12c:	18 c0       	rjmp	.+48     	; 0x15e <updateDisplay+0xa6>
	{
		case manualControl:
		print("M");//M for Manual
     12e:	88 e3       	ldi	r24, 0x38	; 56
     130:	91 e0       	ldi	r25, 0x01	; 1
     132:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
		break;
     136:	13 c0       	rjmp	.+38     	; 0x15e <updateDisplay+0xa6>
		case mazeSolver:
		print("P");//P for Parcours
     138:	8a e3       	ldi	r24, 0x3A	; 58
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
		break;
     140:	0e c0       	rjmp	.+28     	; 0x15e <updateDisplay+0xa6>
		case logicsBot:
		print("O");//O for Order
     142:	8c e3       	ldi	r24, 0x3C	; 60
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
		break;
     14a:	09 c0       	rjmp	.+18     	; 0x15e <updateDisplay+0xa6>
		case chargeMode:
		print("C");//C for Charge
     14c:	8e e3       	ldi	r24, 0x3E	; 62
     14e:	91 e0       	ldi	r25, 0x01	; 1
     150:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
		break;
     154:	04 c0       	rjmp	.+8      	; 0x15e <updateDisplay+0xa6>
		case homingMode:
		print("H");//H for Homing
     156:	80 e4       	ldi	r24, 0x40	; 64
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	0e 94 97 06 	call	0xd2e	; 0xd2e <print>
		break;
	}
}
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	ff 90       	pop	r15
     166:	ef 90       	pop	r14
     168:	08 95       	ret

0000016a <main>:
#include <avr/pgmspace.h>


int main()
{
	initialize();
     16a:	0e 94 bc 00 	call	0x178	; 0x178 <initialize>
	//parcour();
	warehouse();
     16e:	0e 94 3d 04 	call	0x87a	; 0x87a <warehouse>
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	08 95       	ret

00000178 <initialize>:
		print_character(c);
	}
}

void initialize()
{
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
	unsigned int counter; // used as a simple timer
	
	pololu_3pi_init(2000);
     17c:	80 ed       	ldi	r24, 0xD0	; 208
     17e:	97 e0       	ldi	r25, 0x07	; 7
     180:	0e 94 cb 08 	call	0x1196	; 0x1196 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B)){}	
     184:	80 e1       	ldi	r24, 0x10	; 16
     186:	0e 94 08 08 	call	0x1010	; 0x1010 <button_is_pressed>
     18a:	88 23       	and	r24, r24
     18c:	d9 f3       	breq	.-10     	; 0x184 <initialize+0xc>
	wait_for_button_release(BUTTON_B);
     18e:	80 e1       	ldi	r24, 0x10	; 16
     190:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <wait_for_button_release>
	delay_ms(1000);
     194:	88 ee       	ldi	r24, 0xE8	; 232
     196:	93 e0       	ldi	r25, 0x03	; 3
     198:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>

	for(counter=0;counter<80;counter++)
     19c:	c0 e0       	ldi	r28, 0x00	; 0
     19e:	d0 e0       	ldi	r29, 0x00	; 0
     1a0:	19 c0       	rjmp	.+50     	; 0x1d4 <initialize+0x5c>
	{
		if(counter < 20 || counter >= 60)
     1a2:	ce 01       	movw	r24, r28
     1a4:	44 97       	sbiw	r24, 0x14	; 20
     1a6:	88 97       	sbiw	r24, 0x28	; 40
     1a8:	38 f0       	brcs	.+14     	; 0x1b8 <initialize+0x40>
		set_motors(40,-40);
     1aa:	68 ed       	ldi	r22, 0xD8	; 216
     1ac:	7f ef       	ldi	r23, 0xFF	; 255
     1ae:	88 e2       	ldi	r24, 0x28	; 40
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
     1b6:	06 c0       	rjmp	.+12     	; 0x1c4 <initialize+0x4c>
		else
		set_motors(-40,40);
     1b8:	68 e2       	ldi	r22, 0x28	; 40
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	88 ed       	ldi	r24, 0xD8	; 216
     1be:	9f ef       	ldi	r25, 0xFF	; 255
     1c0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	0e 94 8f 08 	call	0x111e	; 0x111e <calibrate_line_sensors>
		
		delay_ms(20);
     1ca:	84 e1       	ldi	r24, 0x14	; 20
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
	
	while(!button_is_pressed(BUTTON_B)){}	
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     1d2:	21 96       	adiw	r28, 0x01	; 1
     1d4:	c0 35       	cpi	r28, 0x50	; 80
     1d6:	d1 05       	cpc	r29, r1
     1d8:	20 f3       	brcs	.-56     	; 0x1a2 <initialize+0x2a>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		
		delay_ms(20);
	}
	set_motors(0,0);
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
	
	while(!button_is_pressed(BUTTON_B)){}
     1e6:	80 e1       	ldi	r24, 0x10	; 16
     1e8:	0e 94 08 08 	call	0x1010	; 0x1010 <button_is_pressed>
     1ec:	88 23       	and	r24, r24
     1ee:	d9 f3       	breq	.-10     	; 0x1e6 <initialize+0x6e>
	wait_for_button_release(BUTTON_B);
     1f0:	80 e1       	ldi	r24, 0x10	; 16
     1f2:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <wait_for_button_release>
	
	clear();
     1f6:	0e 94 88 06 	call	0xd10	; 0xd10 <clear>
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <inch>:

void inch(){
	set_motors(50,50);
     200:	62 e3       	ldi	r22, 0x32	; 50
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	82 e3       	ldi	r24, 0x32	; 50
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     20c:	88 ec       	ldi	r24, 0xC8	; 200
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
	delay(200);
	set_motors(0,0);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	80 e0       	ldi	r24, 0x00	; 0
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
     220:	08 95       	ret

00000222 <motorControl>:
		
	}
}


void motorControl(char x){
     222:	cf 93       	push	r28
     224:	c8 2f       	mov	r28, r24
	read_line(sensors,IR_EMITTERS_ON);
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	83 ea       	ldi	r24, 0xA3	; 163
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
	
	if(x == 'N')
     230:	ce 34       	cpi	r28, 0x4E	; 78
     232:	39 f4       	brne	.+14     	; 0x242 <motorControl+0x20>
	set_motors(0,0);
     234:	60 e0       	ldi	r22, 0x00	; 0
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
     240:	b1 c0       	rjmp	.+354    	; 0x3a4 <motorControl+0x182>
	
	
	else if(x == 'L'){										//turn left
     242:	cc 34       	cpi	r28, 0x4C	; 76
     244:	09 f5       	brne	.+66     	; 0x288 <motorControl+0x66>
		set_motors(-50,50);
     246:	62 e3       	ldi	r22, 0x32	; 50
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	8e ec       	ldi	r24, 0xCE	; 206
     24c:	9f ef       	ldi	r25, 0xFF	; 255
     24e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		while (sensors[2] >=500){
     252:	05 c0       	rjmp	.+10     	; 0x25e <motorControl+0x3c>
			read_line(sensors,IR_EMITTERS_ON);
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	83 ea       	ldi	r24, 0xA3	; 163
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
	set_motors(0,0);
	
	
	else if(x == 'L'){										//turn left
		set_motors(-50,50);
		while (sensors[2] >=500){
     25e:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <sensors+0x4>
     262:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <sensors+0x5>
     266:	84 3f       	cpi	r24, 0xF4	; 244
     268:	91 40       	sbci	r25, 0x01	; 1
     26a:	a0 f7       	brcc	.-24     	; 0x254 <motorControl+0x32>
     26c:	05 c0       	rjmp	.+10     	; 0x278 <motorControl+0x56>
			read_line(sensors,IR_EMITTERS_ON);
		}
		while (sensors[2] <=500){
			read_line(sensors,IR_EMITTERS_ON);
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	83 ea       	ldi	r24, 0xA3	; 163
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
	else if(x == 'L'){										//turn left
		set_motors(-50,50);
		while (sensors[2] >=500){
			read_line(sensors,IR_EMITTERS_ON);
		}
		while (sensors[2] <=500){
     278:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <sensors+0x4>
     27c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <sensors+0x5>
     280:	85 3f       	cpi	r24, 0xF5	; 245
     282:	91 40       	sbci	r25, 0x01	; 1
     284:	a0 f3       	brcs	.-24     	; 0x26e <motorControl+0x4c>
     286:	8e c0       	rjmp	.+284    	; 0x3a4 <motorControl+0x182>
			read_line(sensors,IR_EMITTERS_ON);
		}
	}
	
	else if(x == 'R'){									//turn right
     288:	c2 35       	cpi	r28, 0x52	; 82
     28a:	09 f5       	brne	.+66     	; 0x2ce <motorControl+0xac>
		set_motors(50,-50);
     28c:	6e ec       	ldi	r22, 0xCE	; 206
     28e:	7f ef       	ldi	r23, 0xFF	; 255
     290:	82 e3       	ldi	r24, 0x32	; 50
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		while (sensors[2] >=500){
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <motorControl+0x82>
			read_line(sensors,IR_EMITTERS_ON);
     29a:	61 e0       	ldi	r22, 0x01	; 1
     29c:	83 ea       	ldi	r24, 0xA3	; 163
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
		}
	}
	
	else if(x == 'R'){									//turn right
		set_motors(50,-50);
		while (sensors[2] >=500){
     2a4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <sensors+0x4>
     2a8:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <sensors+0x5>
     2ac:	84 3f       	cpi	r24, 0xF4	; 244
     2ae:	91 40       	sbci	r25, 0x01	; 1
     2b0:	a0 f7       	brcc	.-24     	; 0x29a <motorControl+0x78>
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <motorControl+0x9c>
			read_line(sensors,IR_EMITTERS_ON);
		}
		while (sensors[2] <=500){
			read_line(sensors,IR_EMITTERS_ON);
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	83 ea       	ldi	r24, 0xA3	; 163
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
	else if(x == 'R'){									//turn right
		set_motors(50,-50);
		while (sensors[2] >=500){
			read_line(sensors,IR_EMITTERS_ON);
		}
		while (sensors[2] <=500){
     2be:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <sensors+0x4>
     2c2:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <sensors+0x5>
     2c6:	85 3f       	cpi	r24, 0xF5	; 245
     2c8:	91 40       	sbci	r25, 0x01	; 1
     2ca:	a0 f3       	brcs	.-24     	; 0x2b4 <motorControl+0x92>
     2cc:	6b c0       	rjmp	.+214    	; 0x3a4 <motorControl+0x182>
			read_line(sensors,IR_EMITTERS_ON);
		}
	}
	
	else if(x == 'S'){									//drive straight and corrects the adjusment of the robot if it aint straight
     2ce:	c3 35       	cpi	r28, 0x53	; 83
     2d0:	89 f5       	brne	.+98     	; 0x334 <motorControl+0x112>
		set_motors(50,50);
     2d2:	62 e3       	ldi	r22, 0x32	; 50
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	82 e3       	ldi	r24, 0x32	; 50
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		
		if (sensors[3] >=400  && sensors[4] <=400 )
     2de:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <sensors+0x6>
     2e2:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <sensors+0x7>
     2e6:	80 39       	cpi	r24, 0x90	; 144
     2e8:	91 40       	sbci	r25, 0x01	; 1
     2ea:	68 f0       	brcs	.+26     	; 0x306 <motorControl+0xe4>
     2ec:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <sensors+0x8>
     2f0:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <sensors+0x9>
     2f4:	81 39       	cpi	r24, 0x91	; 145
     2f6:	91 40       	sbci	r25, 0x01	; 1
     2f8:	30 f4       	brcc	.+12     	; 0x306 <motorControl+0xe4>
		set_motors(100,40);
     2fa:	68 e2       	ldi	r22, 0x28	; 40
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	84 e6       	ldi	r24, 0x64	; 100
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		if (sensors[1] >=400 && sensors[0] <=400  )
     306:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <sensors+0x2>
     30a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <sensors+0x3>
     30e:	80 39       	cpi	r24, 0x90	; 144
     310:	91 40       	sbci	r25, 0x01	; 1
     312:	08 f4       	brcc	.+2      	; 0x316 <motorControl+0xf4>
     314:	47 c0       	rjmp	.+142    	; 0x3a4 <motorControl+0x182>
     316:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <sensors>
     31a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <sensors+0x1>
     31e:	81 39       	cpi	r24, 0x91	; 145
     320:	91 40       	sbci	r25, 0x01	; 1
     322:	08 f0       	brcs	.+2      	; 0x326 <motorControl+0x104>
     324:	3f c0       	rjmp	.+126    	; 0x3a4 <motorControl+0x182>
		set_motors(40,100);
     326:	64 e6       	ldi	r22, 0x64	; 100
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	88 e2       	ldi	r24, 0x28	; 40
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
     332:	38 c0       	rjmp	.+112    	; 0x3a4 <motorControl+0x182>
	}
	
	else if(x == 'B'){									// reverse
     334:	c2 34       	cpi	r28, 0x42	; 66
     336:	09 f5       	brne	.+66     	; 0x37a <motorControl+0x158>
		set_motors(-50,-50);
     338:	6e ec       	ldi	r22, 0xCE	; 206
     33a:	7f ef       	ldi	r23, 0xFF	; 255
     33c:	8e ec       	ldi	r24, 0xCE	; 206
     33e:	9f ef       	ldi	r25, 0xFF	; 255
     340:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		if (sensors[3] >=400)
     344:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <sensors+0x6>
     348:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <sensors+0x7>
     34c:	80 39       	cpi	r24, 0x90	; 144
     34e:	91 40       	sbci	r25, 0x01	; 1
     350:	30 f0       	brcs	.+12     	; 0x35e <motorControl+0x13c>
		set_motors(-50,-55);
     352:	69 ec       	ldi	r22, 0xC9	; 201
     354:	7f ef       	ldi	r23, 0xFF	; 255
     356:	8e ec       	ldi	r24, 0xCE	; 206
     358:	9f ef       	ldi	r25, 0xFF	; 255
     35a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		if (sensors[1] >=400)
     35e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <sensors+0x2>
     362:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <sensors+0x3>
     366:	80 39       	cpi	r24, 0x90	; 144
     368:	91 40       	sbci	r25, 0x01	; 1
     36a:	e0 f0       	brcs	.+56     	; 0x3a4 <motorControl+0x182>
		set_motors(-55,-50);
     36c:	6e ec       	ldi	r22, 0xCE	; 206
     36e:	7f ef       	ldi	r23, 0xFF	; 255
     370:	89 ec       	ldi	r24, 0xC9	; 201
     372:	9f ef       	ldi	r25, 0xFF	; 255
     374:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
     378:	15 c0       	rjmp	.+42     	; 0x3a4 <motorControl+0x182>
	}
	else if(x == 'T'){									// Turn around
     37a:	c4 35       	cpi	r28, 0x54	; 84
     37c:	99 f4       	brne	.+38     	; 0x3a4 <motorControl+0x182>
		set_motors(-75,75);
     37e:	6b e4       	ldi	r22, 0x4B	; 75
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	85 eb       	ldi	r24, 0xB5	; 181
     384:	9f ef       	ldi	r25, 0xFF	; 255
     386:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_motors>
		while (sensors[2] >=500){
     38a:	05 c0       	rjmp	.+10     	; 0x396 <motorControl+0x174>
			read_line(sensors,IR_EMITTERS_ON);
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	83 ea       	ldi	r24, 0xA3	; 163
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
		if (sensors[1] >=400)
		set_motors(-55,-50);
	}
	else if(x == 'T'){									// Turn around
		set_motors(-75,75);
		while (sensors[2] >=500){
     396:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <sensors+0x4>
     39a:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <sensors+0x5>
     39e:	84 3f       	cpi	r24, 0xF4	; 244
     3a0:	91 40       	sbci	r25, 0x01	; 1
     3a2:	a0 f7       	brcc	.-24     	; 0x38c <motorControl+0x16a>
			read_line(sensors,IR_EMITTERS_ON);
		}
	}
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <direction>:
	set_motors(0,0);
}

char direction(){																											// function that returns the type of junction it detects
	while(1){																												// >= 500 = black line		<=500 = white
		read_line(sensors,IR_EMITTERS_ON);
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	83 ea       	ldi	r24, 0xA3	; 163
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
		
		if (sensors[1] >=500 && sensors[3] >= 500){																			// this checks if its a X junction or a T junction
     3b2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <sensors+0x2>
     3b6:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <sensors+0x3>
     3ba:	84 3f       	cpi	r24, 0xF4	; 244
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	92 07       	cpc	r25, r18
     3c0:	c0 f0       	brcs	.+48     	; 0x3f2 <direction+0x4a>
     3c2:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <sensors+0x6>
     3c6:	30 91 aa 01 	lds	r19, 0x01AA	; 0x8001aa <sensors+0x7>
     3ca:	24 3f       	cpi	r18, 0xF4	; 244
     3cc:	31 40       	sbci	r19, 0x01	; 1
     3ce:	88 f0       	brcs	.+34     	; 0x3f2 <direction+0x4a>
			inch();
     3d0:	0e 94 00 01 	call	0x200	; 0x200 <inch>
			read_line(sensors,IR_EMITTERS_ON);
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	83 ea       	ldi	r24, 0xA3	; 163
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
			
			if (sensors[2] >=500)
     3de:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <sensors+0x4>
     3e2:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <sensors+0x5>
     3e6:	84 3f       	cpi	r24, 0xF4	; 244
     3e8:	91 40       	sbci	r25, 0x01	; 1
     3ea:	08 f4       	brcc	.+2      	; 0x3ee <direction+0x46>
     3ec:	90 c0       	rjmp	.+288    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
			return X_junction;
     3ee:	88 e0       	ldi	r24, 0x08	; 8
     3f0:	08 95       	ret
			else
			return T_junction;
		}
		
		else if (sensors[1] >=500 && sensors[0] >= 500){																// this function checks if its a left corner or a straight with left corner
     3f2:	84 3f       	cpi	r24, 0xF4	; 244
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	92 07       	cpc	r25, r18
     3f8:	00 f1       	brcs	.+64     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     3fa:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <sensors>
     3fe:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <sensors+0x1>
     402:	24 3f       	cpi	r18, 0xF4	; 244
     404:	31 40       	sbci	r19, 0x01	; 1
     406:	c8 f0       	brcs	.+50     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			inch();
     408:	0e 94 00 01 	call	0x200	; 0x200 <inch>
			read_line(sensors,IR_EMITTERS_ON);
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	83 ea       	ldi	r24, 0xA3	; 163
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
			
			if (sensors[2] >= 500 || sensors[3] >=500)
     416:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <sensors+0x4>
     41a:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <sensors+0x5>
     41e:	84 3f       	cpi	r24, 0xF4	; 244
     420:	91 40       	sbci	r25, 0x01	; 1
     422:	08 f0       	brcs	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     424:	76 c0       	rjmp	.+236    	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     426:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <sensors+0x6>
     42a:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <sensors+0x7>
     42e:	84 3f       	cpi	r24, 0xF4	; 244
     430:	91 40       	sbci	r25, 0x01	; 1
     432:	08 f4       	brcc	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     434:	70 c0       	rjmp	.+224    	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
			return Straight_left_junction;
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	08 95       	ret
			else
			return Left_corner;
		}
		
		else if (sensors[3] >=500 && sensors[4] >= 500){																	// this function checks if its a right corner or a straight with right corner
     43a:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <sensors+0x6>
     43e:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <sensors+0x7>
     442:	44 3f       	cpi	r20, 0xF4	; 244
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	56 07       	cpc	r21, r22
     448:	00 f1       	brcs	.+64     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     44a:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <sensors+0x8>
     44e:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <sensors+0x9>
     452:	24 3f       	cpi	r18, 0xF4	; 244
     454:	31 40       	sbci	r19, 0x01	; 1
     456:	c8 f0       	brcs	.+50     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			inch();
     458:	0e 94 00 01 	call	0x200	; 0x200 <inch>
			read_line(sensors,IR_EMITTERS_ON);
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	83 ea       	ldi	r24, 0xA3	; 163
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
			
			if (sensors[2] >= 500 || sensors[1] >=500)
     466:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <sensors+0x4>
     46a:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <sensors+0x5>
     46e:	84 3f       	cpi	r24, 0xF4	; 244
     470:	91 40       	sbci	r25, 0x01	; 1
     472:	08 f0       	brcs	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     474:	52 c0       	rjmp	.+164    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     476:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <sensors+0x2>
     47a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <sensors+0x3>
     47e:	84 3f       	cpi	r24, 0xF4	; 244
     480:	91 40       	sbci	r25, 0x01	; 1
     482:	08 f4       	brcc	.+2      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     484:	4c c0       	rjmp	.+152    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
			return Straight_right_junction;
     486:	85 e0       	ldi	r24, 0x05	; 5
     488:	08 95       	ret
			else
			return Right_corner;
		}
		
		else if(sensors[2] <=200){																						// check if the line ends
     48a:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <sensors+0x4>
     48e:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <sensors+0x5>
     492:	29 3c       	cpi	r18, 0xC9	; 201
     494:	31 05       	cpc	r19, r1
     496:	08 f4       	brcc	.+2      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     498:	44 c0       	rjmp	.+136    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
			return Line_end;
		}

		
		else if (sensors[2] >=500){
     49a:	24 3f       	cpi	r18, 0xF4	; 244
     49c:	61 e0       	ldi	r22, 0x01	; 1
     49e:	36 07       	cpc	r19, r22
     4a0:	08 f4       	brcc	.+2      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4a2:	82 cf       	rjmp	.-252    	; 0x3a8 <direction>
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500)){
     4a4:	24 3f       	cpi	r18, 0xF4	; 244
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	36 07       	cpc	r19, r22
     4aa:	e8 f1       	brcs	.+122    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     4ac:	45 3f       	cpi	r20, 0xF5	; 245
     4ae:	51 40       	sbci	r21, 0x01	; 1
     4b0:	e0 f5       	brcc	.+120    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     4b2:	40 91 ab 01 	lds	r20, 0x01AB	; 0x8001ab <sensors+0x8>
     4b6:	50 91 ac 01 	lds	r21, 0x01AC	; 0x8001ac <sensors+0x9>
     4ba:	44 3f       	cpi	r20, 0xF4	; 244
     4bc:	51 40       	sbci	r21, 0x01	; 1
     4be:	b8 f1       	brcs	.+110    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     4c0:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <sensors>
     4c4:	50 91 a4 01 	lds	r21, 0x01A4	; 0x8001a4 <sensors+0x1>
     4c8:	44 3f       	cpi	r20, 0xF4	; 244
     4ca:	51 40       	sbci	r21, 0x01	; 1
     4cc:	90 f1       	brcs	.+100    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
     4ce:	85 3f       	cpi	r24, 0xF5	; 245
     4d0:	91 40       	sbci	r25, 0x01	; 1
     4d2:	88 f5       	brcc	.+98     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
     4d4:	24 3f       	cpi	r18, 0xF4	; 244
     4d6:	31 40       	sbci	r19, 0x01	; 1
     4d8:	50 f4       	brcc	.+20     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
					motorControl('S');
				}		// checks if it detects the "barcode"
				return Barcode;
			}
			else
			return Straight;																						// check if its straight without any corners
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 95       	ret

		
		else if (sensors[2] >=500){
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500)){
				while(sensors[4] >= 400 || sensors[0] >=400){
					read_line(sensors,IR_EMITTERS_ON);
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	83 ea       	ldi	r24, 0xA3	; 163
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 95 08 	call	0x112a	; 0x112a <read_line>
					motorControl('S');
     4e8:	83 e5       	ldi	r24, 0x53	; 83
     4ea:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
		}

		
		else if (sensors[2] >=500){
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500)){
				while(sensors[4] >= 400 || sensors[0] >=400){
     4ee:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <sensors+0x8>
     4f2:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <sensors+0x9>
     4f6:	80 39       	cpi	r24, 0x90	; 144
     4f8:	91 40       	sbci	r25, 0x01	; 1
     4fa:	88 f7       	brcc	.-30     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4fc:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <sensors>
     500:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <sensors+0x1>
     504:	80 39       	cpi	r24, 0x90	; 144
     506:	91 40       	sbci	r25, 0x01	; 1
     508:	50 f7       	brcc	.-44     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					read_line(sensors,IR_EMITTERS_ON);
					motorControl('S');
				}		// checks if it detects the "barcode"
				return Barcode;
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	08 95       	ret
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >=500)
			return X_junction;
			else
			return T_junction;
     50e:	87 e0       	ldi	r24, 0x07	; 7
     510:	08 95       	ret
		else if (sensors[1] >=500 && sensors[0] >= 500){																// this function checks if its a left corner or a straight with left corner
			inch();
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= 500 || sensors[3] >=500)
			return Straight_left_junction;
     512:	86 e0       	ldi	r24, 0x06	; 6
     514:	08 95       	ret
			else
			return Left_corner;
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	08 95       	ret
		else if (sensors[3] >=500 && sensors[4] >= 500){																	// this function checks if its a right corner or a straight with right corner
			inch();
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= 500 || sensors[1] >=500)
			return Straight_right_junction;
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	08 95       	ret
			else
			return Right_corner;
     51e:	84 e0       	ldi	r24, 0x04	; 4
     520:	08 95       	ret
		}
		
		else if(sensors[2] <=200){																						// check if the line ends
			return Line_end;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	08 95       	ret
					motorControl('S');
				}		// checks if it detects the "barcode"
				return Barcode;
			}
			else
			return Straight;																						// check if its straight without any corners
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	08 95       	ret
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	08 95       	ret
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	08 95       	ret
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	08 95       	ret
     536:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		
	}
}
     538:	08 95       	ret

0000053a <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(int *a, int *b) {
    int temp = *a;
     53a:	fc 01       	movw	r30, r24
     53c:	20 81       	ld	r18, Z
     53e:	31 81       	ldd	r19, Z+1	; 0x01
    *a = *b;
     540:	fb 01       	movw	r30, r22
     542:	40 81       	ld	r20, Z
     544:	51 81       	ldd	r21, Z+1	; 0x01
     546:	fc 01       	movw	r30, r24
     548:	51 83       	std	Z+1, r21	; 0x01
     54a:	40 83       	st	Z, r20
    *b = temp;
     54c:	fb 01       	movw	r30, r22
     54e:	31 83       	std	Z+1, r19	; 0x01
     550:	20 83       	st	Z, r18
     552:	08 95       	ret

00000554 <bubbleSort>:
}

void bubbleSort(int arr[],int orderY[], int n) {
     554:	6f 92       	push	r6
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	6c 01       	movw	r12, r24
     572:	3b 01       	movw	r6, r22
     574:	4a 01       	movw	r8, r20
    for (int i = 0; i < n - 1; i++) {
     576:	a1 2c       	mov	r10, r1
     578:	b1 2c       	mov	r11, r1
     57a:	30 c0       	rjmp	.+96     	; 0x5dc <bubbleSort+0x88>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
     57c:	7e 01       	movw	r14, r28
     57e:	ee 0c       	add	r14, r14
     580:	ff 1c       	adc	r15, r15
     582:	f6 01       	movw	r30, r12
     584:	ee 0d       	add	r30, r14
     586:	ff 1d       	adc	r31, r15
     588:	20 81       	ld	r18, Z
     58a:	31 81       	ldd	r19, Z+1	; 0x01
     58c:	8e 01       	movw	r16, r28
     58e:	0f 5f       	subi	r16, 0xFF	; 255
     590:	1f 4f       	sbci	r17, 0xFF	; 255
     592:	00 0f       	add	r16, r16
     594:	11 1f       	adc	r17, r17
     596:	d6 01       	movw	r26, r12
     598:	a0 0f       	add	r26, r16
     59a:	b1 1f       	adc	r27, r17
     59c:	8d 91       	ld	r24, X+
     59e:	9c 91       	ld	r25, X
     5a0:	11 97       	sbiw	r26, 0x01	; 1
     5a2:	82 17       	cp	r24, r18
     5a4:	93 07       	cpc	r25, r19
     5a6:	64 f4       	brge	.+24     	; 0x5c0 <bubbleSort+0x6c>
                swap(&arr[j], &arr[j + 1]);
     5a8:	bd 01       	movw	r22, r26
     5aa:	cf 01       	movw	r24, r30
     5ac:	0e 94 9d 02 	call	0x53a	; 0x53a <swap>
                swap(&orderY[j], &orderY[j + 1]);
     5b0:	b3 01       	movw	r22, r6
     5b2:	60 0f       	add	r22, r16
     5b4:	71 1f       	adc	r23, r17
     5b6:	c3 01       	movw	r24, r6
     5b8:	8e 0d       	add	r24, r14
     5ba:	9f 1d       	adc	r25, r15
     5bc:	0e 94 9d 02 	call	0x53a	; 0x53a <swap>
    *b = temp;
}

void bubbleSort(int arr[],int orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
     5c0:	21 96       	adiw	r28, 0x01	; 1
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <bubbleSort+0x74>
     5c4:	c0 e0       	ldi	r28, 0x00	; 0
     5c6:	d0 e0       	ldi	r29, 0x00	; 0
     5c8:	c4 01       	movw	r24, r8
     5ca:	8a 19       	sub	r24, r10
     5cc:	9b 09       	sbc	r25, r11
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	c8 17       	cp	r28, r24
     5d2:	d9 07       	cpc	r29, r25
     5d4:	9c f2       	brlt	.-90     	; 0x57c <bubbleSort+0x28>
    *a = *b;
    *b = temp;
}

void bubbleSort(int arr[],int orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	a8 1a       	sub	r10, r24
     5da:	b8 0a       	sbc	r11, r24
     5dc:	c4 01       	movw	r24, r8
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	a8 16       	cp	r10, r24
     5e2:	b9 06       	cpc	r11, r25
     5e4:	7c f3       	brlt	.-34     	; 0x5c4 <bubbleSort+0x70>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	bf 90       	pop	r11
     5f8:	af 90       	pop	r10
     5fa:	9f 90       	pop	r9
     5fc:	8f 90       	pop	r8
     5fe:	7f 90       	pop	r7
     600:	6f 90       	pop	r6
     602:	08 95       	ret

00000604 <turnRobot>:


void turnRobot(char direction, piRobot *myRobot)
{
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	c8 2f       	mov	r28, r24
     610:	8b 01       	movw	r16, r22
    int changing = 1;
     612:	ee 24       	eor	r14, r14
     614:	e3 94       	inc	r14
     616:	f1 2c       	mov	r15, r1
    while(changing)
     618:	80 c0       	rjmp	.+256    	; 0x71a <turnRobot+0x116>
    {
        switch(myRobot->direction)
     61a:	f8 01       	movw	r30, r16
     61c:	84 81       	ldd	r24, Z+4	; 0x04
     61e:	8e 34       	cpi	r24, 0x4E	; 78
     620:	51 f0       	breq	.+20     	; 0x636 <turnRobot+0x32>
     622:	18 f4       	brcc	.+6      	; 0x62a <turnRobot+0x26>
     624:	85 34       	cpi	r24, 0x45	; 69
     626:	19 f1       	breq	.+70     	; 0x66e <turnRobot+0x6a>
     628:	72 c0       	rjmp	.+228    	; 0x70e <turnRobot+0x10a>
     62a:	83 35       	cpi	r24, 0x53	; 83
     62c:	d9 f1       	breq	.+118    	; 0x6a4 <turnRobot+0xa0>
     62e:	87 35       	cpi	r24, 0x57	; 87
     630:	09 f4       	brne	.+2      	; 0x634 <turnRobot+0x30>
     632:	53 c0       	rjmp	.+166    	; 0x6da <turnRobot+0xd6>
     634:	6c c0       	rjmp	.+216    	; 0x70e <turnRobot+0x10a>
        {
            case 'N':
                if(direction == 'E')
     636:	c5 34       	cpi	r28, 0x45	; 69
     638:	39 f4       	brne	.+14     	; 0x648 <turnRobot+0x44>
                {
                    motorControl('R');
     63a:	82 e5       	ldi	r24, 0x52	; 82
     63c:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'E';
     640:	85 e4       	ldi	r24, 0x45	; 69
     642:	f8 01       	movw	r30, r16
     644:	84 83       	std	Z+4, r24	; 0x04
     646:	63 c0       	rjmp	.+198    	; 0x70e <turnRobot+0x10a>
                }
                else if(direction == 'W')
     648:	c7 35       	cpi	r28, 0x57	; 87
     64a:	39 f4       	brne	.+14     	; 0x65a <turnRobot+0x56>
                {
                    motorControl('L');
     64c:	8c e4       	ldi	r24, 0x4C	; 76
     64e:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'W';
     652:	87 e5       	ldi	r24, 0x57	; 87
     654:	f8 01       	movw	r30, r16
     656:	84 83       	std	Z+4, r24	; 0x04
     658:	5a c0       	rjmp	.+180    	; 0x70e <turnRobot+0x10a>
                }
                else if(direction == 'S')
     65a:	c3 35       	cpi	r28, 0x53	; 83
     65c:	09 f0       	breq	.+2      	; 0x660 <turnRobot+0x5c>
     65e:	57 c0       	rjmp	.+174    	; 0x70e <turnRobot+0x10a>
                {
                    motorControl('T');
     660:	84 e5       	ldi	r24, 0x54	; 84
     662:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'S';
     666:	83 e5       	ldi	r24, 0x53	; 83
     668:	f8 01       	movw	r30, r16
     66a:	84 83       	std	Z+4, r24	; 0x04
     66c:	50 c0       	rjmp	.+160    	; 0x70e <turnRobot+0x10a>
                }
                break;
            case 'E':
                if(direction == 'S')
     66e:	c3 35       	cpi	r28, 0x53	; 83
     670:	39 f4       	brne	.+14     	; 0x680 <turnRobot+0x7c>
                {
                    motorControl('R');
     672:	82 e5       	ldi	r24, 0x52	; 82
     674:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'S';
     678:	83 e5       	ldi	r24, 0x53	; 83
     67a:	f8 01       	movw	r30, r16
     67c:	84 83       	std	Z+4, r24	; 0x04
     67e:	47 c0       	rjmp	.+142    	; 0x70e <turnRobot+0x10a>
                }
                else if(direction == 'W')
     680:	c7 35       	cpi	r28, 0x57	; 87
     682:	39 f4       	brne	.+14     	; 0x692 <turnRobot+0x8e>
                {
                    motorControl('L');
     684:	8c e4       	ldi	r24, 0x4C	; 76
     686:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'W';
     68a:	87 e5       	ldi	r24, 0x57	; 87
     68c:	f8 01       	movw	r30, r16
     68e:	84 83       	std	Z+4, r24	; 0x04
     690:	3e c0       	rjmp	.+124    	; 0x70e <turnRobot+0x10a>
                }
                else if(direction == 'S')
     692:	c3 35       	cpi	r28, 0x53	; 83
     694:	e1 f5       	brne	.+120    	; 0x70e <turnRobot+0x10a>
                {
                    motorControl('T');
     696:	84 e5       	ldi	r24, 0x54	; 84
     698:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'S';
     69c:	83 e5       	ldi	r24, 0x53	; 83
     69e:	f8 01       	movw	r30, r16
     6a0:	84 83       	std	Z+4, r24	; 0x04
     6a2:	35 c0       	rjmp	.+106    	; 0x70e <turnRobot+0x10a>
                }
                break;
            case 'S':
                if(direction == 'W')
     6a4:	c7 35       	cpi	r28, 0x57	; 87
     6a6:	39 f4       	brne	.+14     	; 0x6b6 <turnRobot+0xb2>
                {
                    motorControl('R');
     6a8:	82 e5       	ldi	r24, 0x52	; 82
     6aa:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'W';
     6ae:	87 e5       	ldi	r24, 0x57	; 87
     6b0:	f8 01       	movw	r30, r16
     6b2:	84 83       	std	Z+4, r24	; 0x04
     6b4:	2c c0       	rjmp	.+88     	; 0x70e <turnRobot+0x10a>
                }
                else if(direction == 'E')
     6b6:	c5 34       	cpi	r28, 0x45	; 69
     6b8:	39 f4       	brne	.+14     	; 0x6c8 <turnRobot+0xc4>
                {
                    motorControl('L');
     6ba:	8c e4       	ldi	r24, 0x4C	; 76
     6bc:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'E';
     6c0:	85 e4       	ldi	r24, 0x45	; 69
     6c2:	f8 01       	movw	r30, r16
     6c4:	84 83       	std	Z+4, r24	; 0x04
     6c6:	23 c0       	rjmp	.+70     	; 0x70e <turnRobot+0x10a>
                }
                else if(direction == 'N')
     6c8:	ce 34       	cpi	r28, 0x4E	; 78
     6ca:	09 f5       	brne	.+66     	; 0x70e <turnRobot+0x10a>
                {
                    motorControl('T');
     6cc:	84 e5       	ldi	r24, 0x54	; 84
     6ce:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'N';
     6d2:	8e e4       	ldi	r24, 0x4E	; 78
     6d4:	f8 01       	movw	r30, r16
     6d6:	84 83       	std	Z+4, r24	; 0x04
     6d8:	1a c0       	rjmp	.+52     	; 0x70e <turnRobot+0x10a>
                }
                break;
            case 'W':
                if(direction == 'N')
     6da:	ce 34       	cpi	r28, 0x4E	; 78
     6dc:	39 f4       	brne	.+14     	; 0x6ec <turnRobot+0xe8>
                {
                    motorControl('R');
     6de:	82 e5       	ldi	r24, 0x52	; 82
     6e0:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'N';
     6e4:	8e e4       	ldi	r24, 0x4E	; 78
     6e6:	f8 01       	movw	r30, r16
     6e8:	84 83       	std	Z+4, r24	; 0x04
     6ea:	11 c0       	rjmp	.+34     	; 0x70e <turnRobot+0x10a>
                }
                else if(direction == 'S')
     6ec:	c3 35       	cpi	r28, 0x53	; 83
     6ee:	39 f4       	brne	.+14     	; 0x6fe <turnRobot+0xfa>
                {
                    motorControl('L');
     6f0:	8c e4       	ldi	r24, 0x4C	; 76
     6f2:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'S';
     6f6:	83 e5       	ldi	r24, 0x53	; 83
     6f8:	f8 01       	movw	r30, r16
     6fa:	84 83       	std	Z+4, r24	; 0x04
     6fc:	08 c0       	rjmp	.+16     	; 0x70e <turnRobot+0x10a>
                }
                else if(direction == 'E')
     6fe:	c5 34       	cpi	r28, 0x45	; 69
     700:	31 f4       	brne	.+12     	; 0x70e <turnRobot+0x10a>
                {
                    motorControl('T');
     702:	84 e5       	ldi	r24, 0x54	; 84
     704:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
                    myRobot->direction = 'E';
     708:	85 e4       	ldi	r24, 0x45	; 69
     70a:	f8 01       	movw	r30, r16
     70c:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
		
				if(myRobot->direction == direction)
     70e:	f8 01       	movw	r30, r16
     710:	84 81       	ldd	r24, Z+4	; 0x04
     712:	c8 13       	cpse	r28, r24
     714:	02 c0       	rjmp	.+4      	; 0x71a <turnRobot+0x116>
				{
					changing = 0;
     716:	e1 2c       	mov	r14, r1
     718:	f1 2c       	mov	r15, r1


void turnRobot(char direction, piRobot *myRobot)
{
    int changing = 1;
    while(changing)
     71a:	e1 14       	cp	r14, r1
     71c:	f1 04       	cpc	r15, r1
     71e:	09 f0       	breq	.+2      	; 0x722 <turnRobot+0x11e>
     720:	7c cf       	rjmp	.-264    	; 0x61a <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	08 95       	ret

0000072e <moveX>:


void moveX(int orderPos)
{
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	00 d0       	rcall	.+0      	; 0x740 <moveX+0x12>
     740:	00 d0       	rcall	.+0      	; 0x742 <moveX+0x14>
     742:	1f 92       	push	r1
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
	piRobot robot;
    int junctions;
    if(robot.posX != orderPos)
     748:	29 81       	ldd	r18, Y+1	; 0x01
     74a:	3a 81       	ldd	r19, Y+2	; 0x02
     74c:	28 17       	cp	r18, r24
     74e:	39 07       	cpc	r19, r25
     750:	99 f1       	breq	.+102    	; 0x7b8 <moveX+0x8a>
     752:	6c 01       	movw	r12, r24
    {
        if(robot.posX < orderPos)
     754:	28 17       	cp	r18, r24
     756:	39 07       	cpc	r19, r25
     758:	5c f4       	brge	.+22     	; 0x770 <moveX+0x42>
        {
            turnRobot('W', &robot);
     75a:	be 01       	movw	r22, r28
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	87 e5       	ldi	r24, 0x57	; 87
     762:	0e 94 02 03 	call	0x604	; 0x604 <turnRobot>
            junctions = orderPos-robot.posX;
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	c8 1a       	sub	r12, r24
     76c:	d9 0a       	sbc	r13, r25
     76e:	0c c0       	rjmp	.+24     	; 0x788 <moveX+0x5a>
        }
        else{
            turnRobot('E', &robot);
     770:	be 01       	movw	r22, r28
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	85 e4       	ldi	r24, 0x45	; 69
     778:	0e 94 02 03 	call	0x604	; 0x604 <turnRobot>
            junctions = robot.posX - orderPos;
     77c:	29 81       	ldd	r18, Y+1	; 0x01
     77e:	3a 81       	ldd	r19, Y+2	; 0x02
     780:	c9 01       	movw	r24, r18
     782:	8c 19       	sub	r24, r12
     784:	9d 09       	sbc	r25, r13
     786:	6c 01       	movw	r12, r24
        }

        for(int i = 0; i < junctions; i++)
     788:	e1 2c       	mov	r14, r1
     78a:	f1 2c       	mov	r15, r1
     78c:	12 c0       	rjmp	.+36     	; 0x7b2 <moveX+0x84>
        {
			int driving = 1;
			while(driving)
			{
				motorControl('S');
     78e:	83 e5       	ldi	r24, 0x53	; 83
     790:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
				Junctions situation;
				situation = direction();
     794:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <direction>
				if(situation != Straight)
     798:	88 23       	and	r24, r24
     79a:	29 f0       	breq	.+10     	; 0x7a6 <moveX+0x78>
				{
					driving = 0;
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <moveX+0x78>
     7a2:	01 e0       	ldi	r16, 0x01	; 1
     7a4:	10 e0       	ldi	r17, 0x00	; 0
        }

        for(int i = 0; i < junctions; i++)
        {
			int driving = 1;
			while(driving)
     7a6:	01 15       	cp	r16, r1
     7a8:	11 05       	cpc	r17, r1
     7aa:	89 f7       	brne	.-30     	; 0x78e <moveX+0x60>
        else{
            turnRobot('E', &robot);
            junctions = robot.posX - orderPos;
        }

        for(int i = 0; i < junctions; i++)
     7ac:	9f ef       	ldi	r25, 0xFF	; 255
     7ae:	e9 1a       	sub	r14, r25
     7b0:	f9 0a       	sbc	r15, r25
     7b2:	ec 14       	cp	r14, r12
     7b4:	fd 04       	cpc	r15, r13
     7b6:	ac f3       	brlt	.-22     	; 0x7a2 <moveX+0x74>
			}
            
        }

    }
}
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	08 95       	ret

000007d4 <moveY>:

void moveY(int orderPos)
{
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <moveY+0x12>
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <moveY+0x14>
     7e8:	1f 92       	push	r1
     7ea:	cd b7       	in	r28, 0x3d	; 61
     7ec:	de b7       	in	r29, 0x3e	; 62
	piRobot robot;
    int junctions;
    if(robot.posY != orderPos)
     7ee:	2b 81       	ldd	r18, Y+3	; 0x03
     7f0:	3c 81       	ldd	r19, Y+4	; 0x04
     7f2:	28 17       	cp	r18, r24
     7f4:	39 07       	cpc	r19, r25
     7f6:	99 f1       	breq	.+102    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     7f8:	6c 01       	movw	r12, r24
    {
        if(robot.posY < orderPos)
     7fa:	28 17       	cp	r18, r24
     7fc:	39 07       	cpc	r19, r25
     7fe:	5c f4       	brge	.+22     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
        {
            turnRobot('N', &robot);
     800:	be 01       	movw	r22, r28
     802:	6f 5f       	subi	r22, 0xFF	; 255
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	8e e4       	ldi	r24, 0x4E	; 78
     808:	0e 94 02 03 	call	0x604	; 0x604 <turnRobot>
            junctions = orderPos-robot.posY;
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	9c 81       	ldd	r25, Y+4	; 0x04
     810:	c8 1a       	sub	r12, r24
     812:	d9 0a       	sbc	r13, r25
     814:	0c c0       	rjmp	.+24     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
        }
        else{
            turnRobot('S', &robot);
     816:	be 01       	movw	r22, r28
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	83 e5       	ldi	r24, 0x53	; 83
     81e:	0e 94 02 03 	call	0x604	; 0x604 <turnRobot>
            junctions = robot.posY - orderPos;
     822:	2b 81       	ldd	r18, Y+3	; 0x03
     824:	3c 81       	ldd	r19, Y+4	; 0x04
     826:	c9 01       	movw	r24, r18
     828:	8c 19       	sub	r24, r12
     82a:	9d 09       	sbc	r25, r13
     82c:	6c 01       	movw	r12, r24
        }

        for(int i = 0; i < junctions; i++)
     82e:	e1 2c       	mov	r14, r1
     830:	f1 2c       	mov	r15, r1
     832:	12 c0       	rjmp	.+36     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
        {
            int driving = 1;
            while(driving)
            {
	            motorControl('S');
     834:	83 e5       	ldi	r24, 0x53	; 83
     836:	0e 94 11 01 	call	0x222	; 0x222 <motorControl>
	            Junctions situation;
	            situation = direction();
     83a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <direction>
	            if(situation != Straight)
     83e:	88 23       	and	r24, r24
     840:	29 f0       	breq	.+10     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
	            {
		            driving = 0;
     842:	00 e0       	ldi	r16, 0x00	; 0
     844:	10 e0       	ldi	r17, 0x00	; 0
     846:	02 c0       	rjmp	.+4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     848:	01 e0       	ldi	r16, 0x01	; 1
     84a:	10 e0       	ldi	r17, 0x00	; 0
        }

        for(int i = 0; i < junctions; i++)
        {
            int driving = 1;
            while(driving)
     84c:	01 15       	cp	r16, r1
     84e:	11 05       	cpc	r17, r1
     850:	89 f7       	brne	.-30     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
        else{
            turnRobot('S', &robot);
            junctions = robot.posY - orderPos;
        }

        for(int i = 0; i < junctions; i++)
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	e9 1a       	sub	r14, r25
     856:	f9 0a       	sbc	r15, r25
     858:	ec 14       	cp	r14, r12
     85a:	fd 04       	cpc	r15, r13
     85c:	ac f3       	brlt	.-22     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
				}
            }
        }

    }
}
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	08 95       	ret

0000087a <warehouse>:


void warehouse(void)
{
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	6c 97       	sbiw	r28, 0x1c	; 28
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
 robot.posX = 0;
 robot.posY = 0;
//int orderX[] = getWixel("posX");
//int orderY[] = getWixel("posY");

    int orderX[] = {8,5,2,9,7,1,3};
     896:	8e e0       	ldi	r24, 0x0E	; 14
     898:	ea e0       	ldi	r30, 0x0A	; 10
     89a:	f1 e0       	ldi	r31, 0x01	; 1
     89c:	de 01       	movw	r26, r28
     89e:	11 96       	adiw	r26, 0x01	; 1
     8a0:	01 90       	ld	r0, Z+
     8a2:	0d 92       	st	X+, r0
     8a4:	8a 95       	dec	r24
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <warehouse+0x26>
    int orderY[] = {8,6,3,5,2,0,8};
     8a8:	8e e0       	ldi	r24, 0x0E	; 14
     8aa:	e8 e1       	ldi	r30, 0x18	; 24
     8ac:	f1 e0       	ldi	r31, 0x01	; 1
     8ae:	de 01       	movw	r26, r28
     8b0:	1f 96       	adiw	r26, 0x0f	; 15
     8b2:	01 90       	ld	r0, Z+
     8b4:	0d 92       	st	X+, r0
     8b6:	8a 95       	dec	r24
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <warehouse+0x38>

    int arrayGrootte = sizeof(orderX) / sizeof(orderX[0]);
    bubbleSort(orderX, orderY, arrayGrootte);
     8ba:	47 e0       	ldi	r20, 0x07	; 7
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	be 01       	movw	r22, r28
     8c0:	61 5f       	subi	r22, 0xF1	; 241
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	0e 94 aa 02 	call	0x554	; 0x554 <bubbleSort>
	
	
	 //motorControl('S');

    for(int locaties = 0; locaties<arrayGrootte;locaties++)
     8cc:	00 e0       	ldi	r16, 0x00	; 0
     8ce:	10 e0       	ldi	r17, 0x00	; 0
     8d0:	2d c0       	rjmp	.+90     	; 0x92c <__stack+0x2d>
    {
        moveX(orderX[locaties]);
     8d2:	78 01       	movw	r14, r16
     8d4:	ee 0c       	add	r14, r14
     8d6:	ff 1c       	adc	r15, r15
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	8c 0f       	add	r24, r28
     8de:	9d 1f       	adc	r25, r29
     8e0:	e8 0e       	add	r14, r24
     8e2:	f9 1e       	adc	r15, r25
     8e4:	f7 01       	movw	r30, r14
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	0e 94 97 03 	call	0x72e	; 0x72e <moveX>
        moveY(orderY[locaties]);
     8ee:	f7 01       	movw	r30, r14
     8f0:	86 85       	ldd	r24, Z+14	; 0x0e
     8f2:	97 85       	ldd	r25, Z+15	; 0x0f
     8f4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <moveY>
     8f8:	88 ee       	ldi	r24, 0xE8	; 232
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
        delay(1000);//wait 1 second
        updateDisplay(((locaties/arrayGrootte)*100),batteryPercentage(),logicsBot);
     900:	0e 94 54 00 	call	0xa8	; 0xa8 <batteryPercentage>
     904:	9c 01       	movw	r18, r24
     906:	c8 01       	movw	r24, r16
     908:	67 e0       	ldi	r22, 0x07	; 7
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__divmodhi4>
     910:	cb 01       	movw	r24, r22
     912:	42 e0       	ldi	r20, 0x02	; 2
     914:	b9 01       	movw	r22, r18
     916:	24 e6       	ldi	r18, 0x64	; 100
     918:	fc 01       	movw	r30, r24
     91a:	2e 9f       	mul	r18, r30
     91c:	c0 01       	movw	r24, r0
     91e:	2f 9f       	mul	r18, r31
     920:	90 0d       	add	r25, r0
     922:	11 24       	eor	r1, r1
     924:	0e 94 5c 00 	call	0xb8	; 0xb8 <updateDisplay>
    bubbleSort(orderX, orderY, arrayGrootte);
	
	
	 //motorControl('S');

    for(int locaties = 0; locaties<arrayGrootte;locaties++)
     928:	0f 5f       	subi	r16, 0xFF	; 255
     92a:	1f 4f       	sbci	r17, 0xFF	; 255
     92c:	07 30       	cpi	r16, 0x07	; 7
     92e:	11 05       	cpc	r17, r1
     930:	84 f2       	brlt	.-96     	; 0x8d2 <warehouse+0x58>
        moveX(orderX[locaties]);
        moveY(orderY[locaties]);
        delay(1000);//wait 1 second
        updateDisplay(((locaties/arrayGrootte)*100),batteryPercentage(),logicsBot);
    }
    moveY(0);
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <moveY>
    moveX(0);
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 97 03 	call	0x72e	; 0x72e <moveX>
    //goHome();
}
     942:	6c 96       	adiw	r28, 0x1c	; 28
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	ff 90       	pop	r15
     958:	ef 90       	pop	r14
     95a:	08 95       	ret

0000095c <_ZN15OrangutanAnalog7setModeEh.part.0>:
     95c:	ec e7       	ldi	r30, 0x7C	; 124
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	8f 7d       	andi	r24, 0xDF	; 223
     964:	80 83       	st	Z, r24
     966:	08 95       	ret

00000968 <_ZN15OrangutanAnalog7setModeEh>:
     968:	81 11       	cpse	r24, r1
     96a:	03 c0       	rjmp	.+6      	; 0x972 <_ZN15OrangutanAnalog7setModeEh+0xa>
     96c:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN15OrangutanAnalog7setModeEh.part.0>
     970:	08 95       	ret
     972:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     976:	80 62       	ori	r24, 0x20	; 32
     978:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     97c:	08 95       	ret

0000097e <_ZN15OrangutanAnalog7getModeEv>:
     97e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     982:	85 fb       	bst	r24, 5
     984:	88 27       	eor	r24, r24
     986:	80 f9       	bld	r24, 0
     988:	08 95       	ret

0000098a <_ZN15OrangutanAnalog16conversionResultEv>:
     98a:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN15OrangutanAnalog7getModeEv>
     98e:	88 23       	and	r24, r24
     990:	21 f0       	breq	.+8      	; 0x99a <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     992:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	08 95       	ret
     99a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     99e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     9a2:	08 95       	ret

000009a4 <_ZN15OrangutanAnalog15startConversionEhh>:
     9a4:	80 32       	cpi	r24, 0x20	; 32
     9a6:	a0 f4       	brcc	.+40     	; 0x9d0 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     9a8:	97 e8       	ldi	r25, 0x87	; 135
     9aa:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9ae:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     9b2:	66 23       	and	r22, r22
     9b4:	11 f0       	breq	.+4      	; 0x9ba <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     9b6:	90 6c       	ori	r25, 0xC0	; 192
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     9ba:	9f 77       	andi	r25, 0x7F	; 127
     9bc:	90 64       	ori	r25, 0x40	; 64
     9be:	90 7e       	andi	r25, 0xE0	; 224
     9c0:	98 2b       	or	r25, r24
     9c2:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     9c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9ca:	80 64       	ori	r24, 0x40	; 64
     9cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9d0:	08 95       	ret

000009d2 <_ZN15OrangutanAnalog11readAverageEhj>:
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	ef ee       	ldi	r30, 0xEF	; 239
     9d8:	f4 e0       	ldi	r31, 0x04	; 4
     9da:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__prologue_saves__+0x14>
     9de:	eb 01       	movw	r28, r22
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <_ZN15OrangutanAnalog15startConversionEhh>
     9e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9ea:	86 fd       	sbrc	r24, 6
     9ec:	fc cf       	rjmp	.-8      	; 0x9e6 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     9ee:	8e 01       	movw	r16, r28
     9f0:	c1 2c       	mov	r12, r1
     9f2:	d1 2c       	mov	r13, r1
     9f4:	76 01       	movw	r14, r12
     9f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9fa:	80 64       	ori	r24, 0x40	; 64
     9fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a00:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a04:	86 fd       	sbrc	r24, 6
     a06:	fc cf       	rjmp	.-8      	; 0xa00 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     a08:	0e 94 c5 04 	call	0x98a	; 0x98a <_ZN15OrangutanAnalog16conversionResultEv>
     a0c:	c8 0e       	add	r12, r24
     a0e:	d9 1e       	adc	r13, r25
     a10:	e1 1c       	adc	r14, r1
     a12:	f1 1c       	adc	r15, r1
     a14:	01 50       	subi	r16, 0x01	; 1
     a16:	11 09       	sbc	r17, r1
     a18:	01 15       	cp	r16, r1
     a1a:	11 05       	cpc	r17, r1
     a1c:	61 f7       	brne	.-40     	; 0x9f6 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     a1e:	ce 01       	movw	r24, r28
     a20:	96 95       	lsr	r25
     a22:	87 95       	ror	r24
     a24:	c0 34       	cpi	r28, 0x40	; 64
     a26:	d1 05       	cpc	r29, r1
     a28:	38 f4       	brcc	.+14     	; 0xa38 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     a2a:	8c 0d       	add	r24, r12
     a2c:	9d 1d       	adc	r25, r13
     a2e:	be 01       	movw	r22, r28
     a30:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__udivmodhi4>
     a34:	cb 01       	movw	r24, r22
     a36:	0e c0       	rjmp	.+28     	; 0xa54 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     a38:	a7 01       	movw	r20, r14
     a3a:	96 01       	movw	r18, r12
     a3c:	28 0f       	add	r18, r24
     a3e:	39 1f       	adc	r19, r25
     a40:	41 1d       	adc	r20, r1
     a42:	51 1d       	adc	r21, r1
     a44:	ca 01       	movw	r24, r20
     a46:	b9 01       	movw	r22, r18
     a48:	9e 01       	movw	r18, r28
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
     a52:	c9 01       	movw	r24, r18
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	e8 e0       	ldi	r30, 0x08	; 8
     a5a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__epilogue_restores__+0x14>

00000a5e <_ZN15OrangutanAnalog12toMillivoltsEj>:
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a6a:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a6e:	9c 01       	movw	r18, r24
     a70:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__umulhisi3>
     a74:	6b 01       	movw	r12, r22
     a76:	7c 01       	movw	r14, r24
     a78:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN15OrangutanAnalog7getModeEv>
     a7c:	88 23       	and	r24, r24
     a7e:	59 f0       	breq	.+22     	; 0xa96 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     a80:	c7 01       	movw	r24, r14
     a82:	b6 01       	movw	r22, r12
     a84:	61 58       	subi	r22, 0x81	; 129
     a86:	7f 4f       	sbci	r23, 0xFF	; 255
     a88:	8f 4f       	sbci	r24, 0xFF	; 255
     a8a:	9f 4f       	sbci	r25, 0xFF	; 255
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	0a c0       	rjmp	.+20     	; 0xaaa <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
     a96:	c7 01       	movw	r24, r14
     a98:	b6 01       	movw	r22, r12
     a9a:	61 50       	subi	r22, 0x01	; 1
     a9c:	7e 4f       	sbci	r23, 0xFE	; 254
     a9e:	8f 4f       	sbci	r24, 0xFF	; 255
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	2f ef       	ldi	r18, 0xFF	; 255
     aa4:	33 e0       	ldi	r19, 0x03	; 3
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
     aae:	c9 01       	movw	r24, r18
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	08 95       	ret

00000aba <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     aba:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_ZN15OrangutanAnalog11readAverageEhj>
     abe:	0e 94 2f 05 	call	0xa5e	; 0xa5e <_ZN15OrangutanAnalog12toMillivoltsEj>
     ac2:	08 95       	ret

00000ac4 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	0e 94 bf 04 	call	0x97e	; 0x97e <_ZN15OrangutanAnalog7getModeEv>
     ace:	18 2f       	mov	r17, r24
     ad0:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN15OrangutanAnalog7setModeEh.part.0>
     ad4:	6a e0       	ldi	r22, 0x0A	; 10
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     ade:	ec 01       	movw	r28, r24
     ae0:	81 2f       	mov	r24, r17
     ae2:	0e 94 b4 04 	call	0x968	; 0x968 <_ZN15OrangutanAnalog7setModeEh>
     ae6:	ce 01       	movw	r24, r28
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	8c 0f       	add	r24, r28
     aee:	9d 1f       	adc	r25, r29
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	96 95       	lsr	r25
     af4:	87 95       	ror	r24
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	08 95       	ret

00000afe <read_battery_millivolts_3pi>:
     afe:	0e 94 62 05 	call	0xac4	; 0xac4 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     b02:	08 95       	ret

00000b04 <delay_us.constprop.0>:
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	6f 93       	push	r22
     b0a:	64 e0       	ldi	r22, 0x04	; 4
     b0c:	6a 95       	dec	r22
     b0e:	f1 f7       	brne	.-4      	; 0xb0c <delay_us.constprop.0+0x8>
     b10:	6f 91       	pop	r22
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	c9 f7       	brne	.-14     	; 0xb08 <delay_us.constprop.0+0x4>
     b16:	08 95       	ret

00000b18 <_ZN12OrangutanLCD8busyWaitEv>:
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	1a b1       	in	r17, 0x0a	; 10
     b22:	57 98       	cbi	0x0a, 7	; 10
     b24:	5a 98       	cbi	0x0b, 2	; 11
     b26:	28 9a       	sbi	0x05, 0	; 5
     b28:	c0 e0       	ldi	r28, 0x00	; 0
     b2a:	d0 e0       	ldi	r29, 0x00	; 0
     b2c:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
     b30:	5c 9a       	sbi	0x0b, 4	; 11
     b32:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
     b36:	09 b1       	in	r16, 0x09	; 9
     b38:	5c 98       	cbi	0x0b, 4	; 11
     b3a:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
     b3e:	5c 9a       	sbi	0x0b, 4	; 11
     b40:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
     b44:	5c 98       	cbi	0x0b, 4	; 11
     b46:	24 96       	adiw	r28, 0x04	; 4
     b48:	07 ff       	sbrs	r16, 7
     b4a:	10 c0       	rjmp	.+32     	; 0xb6c <_ZN12OrangutanLCD8busyWaitEv+0x54>
     b4c:	ae 01       	movw	r20, r28
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     b56:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     b5a:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <__data_end+0x2>
     b5e:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <__data_end+0x3>
     b62:	48 17       	cp	r20, r24
     b64:	59 07       	cpc	r21, r25
     b66:	6a 07       	cpc	r22, r26
     b68:	7b 07       	cpc	r23, r27
     b6a:	00 f3       	brcs	.-64     	; 0xb2c <_ZN12OrangutanLCD8busyWaitEv+0x14>
     b6c:	1a b9       	out	0x0a, r17	; 10
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	08 95       	ret

00000b78 <_ZN12OrangutanLCD8sendDataEh>:
     b78:	95 b1       	in	r25, 0x05	; 5
     b7a:	28 2f       	mov	r18, r24
     b7c:	21 70       	andi	r18, 0x01	; 1
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	48 2f       	mov	r20, r24
     b86:	46 70       	andi	r20, 0x06	; 6
     b88:	68 e0       	ldi	r22, 0x08	; 8
     b8a:	46 9f       	mul	r20, r22
     b8c:	a0 01       	movw	r20, r0
     b8e:	11 24       	eor	r1, r1
     b90:	24 2b       	or	r18, r20
     b92:	9d 7c       	andi	r25, 0xCD	; 205
     b94:	29 2b       	or	r18, r25
     b96:	25 b9       	out	0x05, r18	; 5
     b98:	9b b1       	in	r25, 0x0b	; 11
     b9a:	88 70       	andi	r24, 0x08	; 8
     b9c:	82 95       	swap	r24
     b9e:	80 7f       	andi	r24, 0xF0	; 240
     ba0:	9f 77       	andi	r25, 0x7F	; 127
     ba2:	89 2b       	or	r24, r25
     ba4:	8b b9       	out	0x0b, r24	; 11
     ba6:	5c 9a       	sbi	0x0b, 4	; 11
     ba8:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
     bac:	5c 98       	cbi	0x0b, 4	; 11
     bae:	0e 94 82 05 	call	0xb04	; 0xb04 <delay_us.constprop.0>
     bb2:	08 95       	ret

00000bb4 <_ZN12OrangutanLCD4sendEhhh>:
     bb4:	a0 e0       	ldi	r26, 0x00	; 0
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 ee       	ldi	r30, 0xE0	; 224
     bba:	f5 e0       	ldi	r31, 0x05	; 5
     bbc:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__prologue_saves__+0x16>
     bc0:	c8 2f       	mov	r28, r24
     bc2:	d6 2e       	mov	r13, r22
     bc4:	e4 2e       	mov	r14, r20
     bc6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <_ZZN12OrangutanLCD4initEvE11initialized>
     bca:	81 11       	cpse	r24, r1
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <_ZN12OrangutanLCD4sendEhhh+0x24>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <_ZZN12OrangutanLCD4initEvE11initialized>
     bd4:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZN12OrangutanLCD5init2Ev>
     bd8:	0e 94 8c 05 	call	0xb18	; 0xb18 <_ZN12OrangutanLCD8busyWaitEv>
     bdc:	14 b1       	in	r17, 0x04	; 4
     bde:	d5 b1       	in	r29, 0x05	; 5
     be0:	fa b0       	in	r15, 0x0a	; 10
     be2:	0b b1       	in	r16, 0x0b	; 11
     be4:	28 98       	cbi	0x05, 0	; 5
     be6:	dd 20       	and	r13, r13
     be8:	11 f0       	breq	.+4      	; 0xbee <_ZN12OrangutanLCD4sendEhhh+0x3a>
     bea:	5a 9a       	sbi	0x0b, 2	; 11
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <_ZN12OrangutanLCD4sendEhhh+0x3c>
     bee:	5a 98       	cbi	0x0b, 2	; 11
     bf0:	94 b1       	in	r25, 0x04	; 4
     bf2:	92 63       	ori	r25, 0x32	; 50
     bf4:	94 b9       	out	0x04, r25	; 4
     bf6:	57 9a       	sbi	0x0a, 7	; 10
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	e8 16       	cp	r14, r24
     bfc:	29 f0       	breq	.+10     	; 0xc08 <_ZN12OrangutanLCD4sendEhhh+0x54>
     bfe:	8c 2f       	mov	r24, r28
     c00:	82 95       	swap	r24
     c02:	8f 70       	andi	r24, 0x0F	; 15
     c04:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN12OrangutanLCD8sendDataEh>
     c08:	8c 2f       	mov	r24, r28
     c0a:	8f 70       	andi	r24, 0x0F	; 15
     c0c:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN12OrangutanLCD8sendDataEh>
     c10:	fa b8       	out	0x0a, r15	; 10
     c12:	0b b9       	out	0x0b, r16	; 11
     c14:	14 b9       	out	0x04, r17	; 4
     c16:	d5 b9       	out	0x05, r29	; 5
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	e7 e0       	ldi	r30, 0x07	; 7
     c1e:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__epilogue_restores__+0x16>

00000c22 <_ZN12OrangutanLCD8send_cmdEh>:
     c22:	42 e0       	ldi	r20, 0x02	; 2
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN12OrangutanLCD4sendEhhh>
     c2a:	08 95       	ret

00000c2c <_ZN12OrangutanLCD9send_dataEh>:
     c2c:	42 e0       	ldi	r20, 0x02	; 2
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN12OrangutanLCD4sendEhhh>
     c34:	08 95       	ret

00000c36 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
     c36:	41 e0       	ldi	r20, 0x01	; 1
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <_ZN12OrangutanLCD4sendEhhh>
     c3e:	08 95       	ret

00000c40 <_ZN12OrangutanLCD5init2Ev>:
     c40:	80 e1       	ldi	r24, 0x10	; 16
     c42:	97 e2       	ldi	r25, 0x27	; 39
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
     c4c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
     c50:	a0 93 44 01 	sts	0x0144, r26	; 0x800144 <__data_end+0x2>
     c54:	b0 93 45 01 	sts	0x0145, r27	; 0x800145 <__data_end+0x3>
     c58:	52 9a       	sbi	0x0a, 2	; 10
     c5a:	20 9a       	sbi	0x04, 0	; 4
     c5c:	54 9a       	sbi	0x0a, 4	; 10
     c5e:	8e e1       	ldi	r24, 0x1E	; 30
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     c6c:	86 e0       	ldi	r24, 0x06	; 6
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
     c9e:	88 e2       	ldi	r24, 0x28	; 40
     ca0:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
     ca4:	88 e0       	ldi	r24, 0x08	; 8
     ca6:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
     cb0:	86 e0       	ldi	r24, 0x06	; 6
     cb2:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
     cb6:	8c e0       	ldi	r24, 0x0C	; 12
     cb8:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
     cbc:	08 95       	ret

00000cbe <_ZN12OrangutanLCD5clearEv>:
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
     cc4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <printf_chars>
     cc8:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <printf_chars+0x1>
     ccc:	89 2b       	or	r24, r25
     cce:	f9 f0       	breq	.+62     	; 0xd0e <_ZN12OrangutanLCD5clearEv+0x50>
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	a0 e2       	ldi	r26, 0x20	; 32
     cd4:	26 2f       	mov	r18, r22
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <numLCDCols>
     cdc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <numLCDRows>
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	78 9f       	mul	r23, r24
     ce6:	a0 01       	movw	r20, r0
     ce8:	79 9f       	mul	r23, r25
     cea:	50 0d       	add	r21, r0
     cec:	11 24       	eor	r1, r1
     cee:	24 17       	cp	r18, r20
     cf0:	35 07       	cpc	r19, r21
     cf2:	4c f4       	brge	.+18     	; 0xd06 <_ZN12OrangutanLCD5clearEv+0x48>
     cf4:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <printf_chars>
     cf8:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <printf_chars+0x1>
     cfc:	e2 0f       	add	r30, r18
     cfe:	f3 1f       	adc	r31, r19
     d00:	a0 83       	st	Z, r26
     d02:	6f 5f       	subi	r22, 0xFF	; 255
     d04:	e7 cf       	rjmp	.-50     	; 0xcd4 <_ZN12OrangutanLCD5clearEv+0x16>
     d06:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <col>
     d0a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <row>
     d0e:	08 95       	ret

00000d10 <clear>:
     d10:	0e 94 5f 06 	call	0xcbe	; 0xcbe <_ZN12OrangutanLCD5clearEv>
     d14:	08 95       	ret

00000d16 <_ZN12OrangutanLCD5printEPKc>:
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	ec 01       	movw	r28, r24
     d1c:	89 91       	ld	r24, Y+
     d1e:	88 23       	and	r24, r24
     d20:	19 f0       	breq	.+6      	; 0xd28 <_ZN12OrangutanLCD5printEPKc+0x12>
     d22:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN12OrangutanLCD9send_dataEh>
     d26:	fa cf       	rjmp	.-12     	; 0xd1c <_ZN12OrangutanLCD5printEPKc+0x6>
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	08 95       	ret

00000d2e <print>:
     d2e:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN12OrangutanLCD5printEPKc>
     d32:	08 95       	ret

00000d34 <_ZN12OrangutanLCD5printEm>:
     d34:	aa e0       	ldi	r26, 0x0A	; 10
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e0 ea       	ldi	r30, 0xA0	; 160
     d3a:	f6 e0       	ldi	r31, 0x06	; 6
     d3c:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__prologue_saves__+0x14>
     d40:	1a e0       	ldi	r17, 0x0A	; 10
     d42:	5a e0       	ldi	r21, 0x0A	; 10
     d44:	c5 2e       	mov	r12, r21
     d46:	d1 2c       	mov	r13, r1
     d48:	e1 2c       	mov	r14, r1
     d4a:	f1 2c       	mov	r15, r1
     d4c:	06 2f       	mov	r16, r22
     d4e:	a7 01       	movw	r20, r14
     d50:	96 01       	movw	r18, r12
     d52:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
     d56:	ca 01       	movw	r24, r20
     d58:	b9 01       	movw	r22, r18
     d5a:	11 50       	subi	r17, 0x01	; 1
     d5c:	e1 e0       	ldi	r30, 0x01	; 1
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	ec 0f       	add	r30, r28
     d62:	fd 1f       	adc	r31, r29
     d64:	e1 0f       	add	r30, r17
     d66:	f1 1d       	adc	r31, r1
     d68:	00 5d       	subi	r16, 0xD0	; 208
     d6a:	2a e0       	ldi	r18, 0x0A	; 10
     d6c:	62 9f       	mul	r22, r18
     d6e:	00 19       	sub	r16, r0
     d70:	11 24       	eor	r1, r1
     d72:	00 83       	st	Z, r16
     d74:	61 15       	cp	r22, r1
     d76:	71 05       	cpc	r23, r1
     d78:	81 05       	cpc	r24, r1
     d7a:	91 05       	cpc	r25, r1
     d7c:	39 f7       	brne	.-50     	; 0xd4c <_ZN12OrangutanLCD5printEm+0x18>
     d7e:	1a 30       	cpi	r17, 0x0A	; 10
     d80:	58 f4       	brcc	.+22     	; 0xd98 <_ZN12OrangutanLCD5printEm+0x64>
     d82:	e1 e0       	ldi	r30, 0x01	; 1
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ec 0f       	add	r30, r28
     d88:	fd 1f       	adc	r31, r29
     d8a:	e1 0f       	add	r30, r17
     d8c:	f1 1d       	adc	r31, r1
     d8e:	80 81       	ld	r24, Z
     d90:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN12OrangutanLCD9send_dataEh>
     d94:	1f 5f       	subi	r17, 0xFF	; 255
     d96:	f3 cf       	rjmp	.-26     	; 0xd7e <_ZN12OrangutanLCD5printEm+0x4a>
     d98:	2a 96       	adiw	r28, 0x0a	; 10
     d9a:	e8 e0       	ldi	r30, 0x08	; 8
     d9c:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__epilogue_restores__+0x14>

00000da0 <_ZN12OrangutanLCD5printEl>:
     da0:	cf 92       	push	r12
     da2:	df 92       	push	r13
     da4:	ef 92       	push	r14
     da6:	ff 92       	push	r15
     da8:	6b 01       	movw	r12, r22
     daa:	7c 01       	movw	r14, r24
     dac:	97 ff       	sbrs	r25, 7
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <_ZN12OrangutanLCD5printEl+0x26>
     db0:	f0 94       	com	r15
     db2:	e0 94       	com	r14
     db4:	d0 94       	com	r13
     db6:	c0 94       	com	r12
     db8:	c1 1c       	adc	r12, r1
     dba:	d1 1c       	adc	r13, r1
     dbc:	e1 1c       	adc	r14, r1
     dbe:	f1 1c       	adc	r15, r1
     dc0:	8d e2       	ldi	r24, 0x2D	; 45
     dc2:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN12OrangutanLCD9send_dataEh>
     dc6:	c7 01       	movw	r24, r14
     dc8:	b6 01       	movw	r22, r12
     dca:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN12OrangutanLCD5printEm>
     dce:	ff 90       	pop	r15
     dd0:	ef 90       	pop	r14
     dd2:	df 90       	pop	r13
     dd4:	cf 90       	pop	r12
     dd6:	08 95       	ret

00000dd8 <print_long>:
     dd8:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN12OrangutanLCD5printEl>
     ddc:	08 95       	ret

00000dde <_ZN12OrangutanLCD6gotoXYEhh>:
     dde:	a5 e0       	ldi	r26, 0x05	; 5
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 ef       	ldi	r30, 0xF5	; 245
     de4:	f6 e0       	ldi	r31, 0x06	; 6
     de6:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <__prologue_saves__+0x1e>
     dea:	18 2f       	mov	r17, r24
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	80 ec       	ldi	r24, 0xC0	; 192
     df2:	8a 83       	std	Y+2, r24	; 0x02
     df4:	84 e9       	ldi	r24, 0x94	; 148
     df6:	8b 83       	std	Y+3, r24	; 0x03
     df8:	84 ed       	ldi	r24, 0xD4	; 212
     dfa:	8c 83       	std	Y+4, r24	; 0x04
     dfc:	fe 01       	movw	r30, r28
     dfe:	e6 0f       	add	r30, r22
     e00:	f1 1d       	adc	r31, r1
     e02:	81 81       	ldd	r24, Z+1	; 0x01
     e04:	81 0f       	add	r24, r17
     e06:	6d 83       	std	Y+5, r22	; 0x05
     e08:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN12OrangutanLCD8send_cmdEh>
     e0c:	10 93 46 01 	sts	0x0146, r17	; 0x800146 <col>
     e10:	6d 81       	ldd	r22, Y+5	; 0x05
     e12:	60 93 47 01 	sts	0x0147, r22	; 0x800147 <row>
     e16:	25 96       	adiw	r28, 0x05	; 5
     e18:	e3 e0       	ldi	r30, 0x03	; 3
     e1a:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__epilogue_restores__+0x1e>

00000e1e <lcd_goto_xy>:
     e1e:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN12OrangutanLCD6gotoXYEhh>
     e22:	08 95       	ret

00000e24 <_ZN16OrangutanDigital9setOutputEhh>:
     e24:	88 30       	cpi	r24, 0x08	; 8
     e26:	58 f4       	brcc	.+22     	; 0xe3e <_ZN16OrangutanDigital9setOutputEhh+0x1a>
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <_ZN16OrangutanDigital9setOutputEhh+0xa>
     e2c:	99 0f       	add	r25, r25
     e2e:	8a 95       	dec	r24
     e30:	ea f7       	brpl	.-6      	; 0xe2c <_ZN16OrangutanDigital9setOutputEhh+0x8>
     e32:	89 2f       	mov	r24, r25
     e34:	aa e2       	ldi	r26, 0x2A	; 42
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	eb e2       	ldi	r30, 0x2B	; 43
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	21 c0       	rjmp	.+66     	; 0xe80 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     e3e:	8e 30       	cpi	r24, 0x0E	; 14
     e40:	60 f4       	brcc	.+24     	; 0xe5a <_ZN16OrangutanDigital9setOutputEhh+0x36>
     e42:	98 ef       	ldi	r25, 0xF8	; 248
     e44:	98 0f       	add	r25, r24
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <_ZN16OrangutanDigital9setOutputEhh+0x28>
     e4a:	88 0f       	add	r24, r24
     e4c:	9a 95       	dec	r25
     e4e:	ea f7       	brpl	.-6      	; 0xe4a <_ZN16OrangutanDigital9setOutputEhh+0x26>
     e50:	a4 e2       	ldi	r26, 0x24	; 36
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e5 e2       	ldi	r30, 0x25	; 37
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	13 c0       	rjmp	.+38     	; 0xe80 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     e5a:	85 31       	cpi	r24, 0x15	; 21
     e5c:	60 f4       	brcc	.+24     	; 0xe76 <_ZN16OrangutanDigital9setOutputEhh+0x52>
     e5e:	92 ef       	ldi	r25, 0xF2	; 242
     e60:	98 0f       	add	r25, r24
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <_ZN16OrangutanDigital9setOutputEhh+0x44>
     e66:	88 0f       	add	r24, r24
     e68:	9a 95       	dec	r25
     e6a:	ea f7       	brpl	.-6      	; 0xe66 <_ZN16OrangutanDigital9setOutputEhh+0x42>
     e6c:	a7 e2       	ldi	r26, 0x27	; 39
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e8 e2       	ldi	r30, 0x28	; 40
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	a0 e0       	ldi	r26, 0x00	; 0
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e0 e0       	ldi	r30, 0x00	; 0
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	6f 3f       	cpi	r22, 0xFF	; 255
     e82:	19 f4       	brne	.+6      	; 0xe8a <_ZN16OrangutanDigital9setOutputEhh+0x66>
     e84:	90 81       	ld	r25, Z
     e86:	98 27       	eor	r25, r24
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <_ZN16OrangutanDigital9setOutputEhh+0x78>
     e8a:	66 23       	and	r22, r22
     e8c:	19 f0       	breq	.+6      	; 0xe94 <_ZN16OrangutanDigital9setOutputEhh+0x70>
     e8e:	90 81       	ld	r25, Z
     e90:	98 2b       	or	r25, r24
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <_ZN16OrangutanDigital9setOutputEhh+0x78>
     e94:	20 81       	ld	r18, Z
     e96:	98 2f       	mov	r25, r24
     e98:	90 95       	com	r25
     e9a:	92 23       	and	r25, r18
     e9c:	90 83       	st	Z, r25
     e9e:	9c 91       	ld	r25, X
     ea0:	98 2b       	or	r25, r24
     ea2:	9c 93       	st	X, r25
     ea4:	08 95       	ret

00000ea6 <_ZN15OrangutanMotors5init2Ev>:
     ea6:	83 ef       	ldi	r24, 0xF3	; 243
     ea8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     eac:	84 bd       	out	0x24, r24	; 36
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     eb4:	85 bd       	out	0x25, r24	; 37
     eb6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     eba:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     ebe:	18 bc       	out	0x28, r1	; 40
     ec0:	17 bc       	out	0x27, r1	; 39
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	86 e0       	ldi	r24, 0x06	; 6
     ec6:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN16OrangutanDigital9setOutputEhh>
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	85 e0       	ldi	r24, 0x05	; 5
     ece:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN16OrangutanDigital9setOutputEhh>
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	8b e0       	ldi	r24, 0x0B	; 11
     ed6:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN16OrangutanDigital9setOutputEhh>
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN16OrangutanDigital9setOutputEhh>
     ee2:	08 95       	ret

00000ee4 <_ZN15OrangutanMotors4initEv>:
     ee4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_ZZN15OrangutanMotors4initEvE11initialized>
     ee8:	81 11       	cpse	r24, r1
     eea:	05 c0       	rjmp	.+10     	; 0xef6 <_ZN15OrangutanMotors4initEv+0x12>
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_ZZN15OrangutanMotors4initEvE11initialized>
     ef2:	0e 94 53 07 	call	0xea6	; 0xea6 <_ZN15OrangutanMotors5init2Ev>
     ef6:	08 95       	ret

00000ef8 <_ZN15OrangutanMotors10setM1SpeedEi>:
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	ec 01       	movw	r28, r24
     efe:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZN15OrangutanMotors4initEv>
     f02:	d7 ff       	sbrs	r29, 7
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
     f06:	d1 95       	neg	r29
     f08:	c1 95       	neg	r28
     f0a:	d1 09       	sbc	r29, r1
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	cf 3f       	cpi	r28, 0xFF	; 255
     f14:	d1 05       	cpc	r29, r1
     f16:	19 f0       	breq	.+6      	; 0xf1e <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
     f18:	14 f0       	brlt	.+4      	; 0xf1e <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
     f1a:	cf ef       	ldi	r28, 0xFF	; 255
     f1c:	d0 e0       	ldi	r29, 0x00	; 0
     f1e:	88 23       	and	r24, r24
     f20:	19 f0       	breq	.+6      	; 0xf28 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
     f22:	18 bc       	out	0x28, r1	; 40
     f24:	c7 bd       	out	0x27, r28	; 39
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
     f28:	c8 bd       	out	0x28, r28	; 40
     f2a:	17 bc       	out	0x27, r1	; 39
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	08 95       	ret

00000f32 <_ZN15OrangutanMotors10setM2SpeedEi>:
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	ec 01       	movw	r28, r24
     f38:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZN15OrangutanMotors4initEv>
     f3c:	d7 ff       	sbrs	r29, 7
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
     f40:	d1 95       	neg	r29
     f42:	c1 95       	neg	r28
     f44:	d1 09       	sbc	r29, r1
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	cf 3f       	cpi	r28, 0xFF	; 255
     f4e:	d1 05       	cpc	r29, r1
     f50:	19 f0       	breq	.+6      	; 0xf58 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
     f52:	14 f0       	brlt	.+4      	; 0xf58 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
     f54:	cf ef       	ldi	r28, 0xFF	; 255
     f56:	d0 e0       	ldi	r29, 0x00	; 0
     f58:	88 23       	and	r24, r24
     f5a:	29 f0       	breq	.+10     	; 0xf66 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
     f5c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f60:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
     f66:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f6a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <_ZN15OrangutanMotors9setSpeedsEii>:
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	eb 01       	movw	r28, r22
     f7a:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN15OrangutanMotors10setM1SpeedEi>
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 99 07 	call	0xf32	; 0xf32 <_ZN15OrangutanMotors10setM2SpeedEi>
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <set_motors>:
     f8a:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN15OrangutanMotors9setSpeedsEii>
     f8e:	08 95       	ret

00000f90 <_ZN20OrangutanPushbuttons5init2Ev>:
     f90:	84 b1       	in	r24, 0x04	; 4
     f92:	8d 7c       	andi	r24, 0xCD	; 205
     f94:	84 b9       	out	0x04, r24	; 4
     f96:	85 b1       	in	r24, 0x05	; 5
     f98:	82 63       	ori	r24, 0x32	; 50
     f9a:	85 b9       	out	0x05, r24	; 5
     f9c:	85 e0       	ldi	r24, 0x05	; 5
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	6f 93       	push	r22
     fa2:	64 e0       	ldi	r22, 0x04	; 4
     fa4:	6a 95       	dec	r22
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
     fa8:	6f 91       	pop	r22
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	c9 f7       	brne	.-14     	; 0xfa0 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
     fae:	08 95       	ret

00000fb0 <_ZN20OrangutanPushbuttons4initEv>:
     fb0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZZN20OrangutanPushbuttons4initEvE11initialized>
     fb4:	81 11       	cpse	r24, r1
     fb6:	05 c0       	rjmp	.+10     	; 0xfc2 <_ZN20OrangutanPushbuttons4initEv+0x12>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_ZZN20OrangutanPushbuttons4initEvE11initialized>
     fbe:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN20OrangutanPushbuttons5init2Ev>
     fc2:	08 95       	ret

00000fc4 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
     fc4:	cf 93       	push	r28
     fc6:	c8 2f       	mov	r28, r24
     fc8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN20OrangutanPushbuttons4initEv>
     fcc:	83 b1       	in	r24, 0x03	; 3
     fce:	8c 23       	and	r24, r28
     fd0:	e9 f3       	breq	.-6      	; 0xfcc <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
     fd2:	8a e0       	ldi	r24, 0x0A	; 10
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <delay_ms>
     fda:	83 b1       	in	r24, 0x03	; 3
     fdc:	8c 23       	and	r24, r28
     fde:	b1 f3       	breq	.-20     	; 0xfcc <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
     fe0:	83 b1       	in	r24, 0x03	; 3
     fe2:	8c 23       	and	r24, r28
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <wait_for_button_release>:
     fe8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
     fec:	08 95       	ret

00000fee <_ZN20OrangutanPushbuttons9isPressedEh>:
     fee:	a1 e0       	ldi	r26, 0x01	; 1
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ed ef       	ldi	r30, 0xFD	; 253
     ff4:	f7 e0       	ldi	r31, 0x07	; 7
     ff6:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__prologue_saves__+0x20>
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN20OrangutanPushbuttons4initEv>
    1000:	93 b1       	in	r25, 0x03	; 3
    1002:	90 95       	com	r25
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	89 23       	and	r24, r25
    1008:	21 96       	adiw	r28, 0x01	; 1
    100a:	e2 e0       	ldi	r30, 0x02	; 2
    100c:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__epilogue_restores__+0x20>

00001010 <button_is_pressed>:
    1010:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN20OrangutanPushbuttons9isPressedEh>
    1014:	08 95       	ret

00001016 <__vector_9>:
    1016:	2f 92       	push	r2
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	2f b6       	in	r2, 0x3f	; 63
    101e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <tickCount+0x1>
    1022:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <tickCount+0x2>
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <tickCount+0x1>
    102c:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <tickCount+0x2>
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <tickCount+0x3>
    1036:	89 1f       	adc	r24, r25
    1038:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <tickCount+0x3>
    103c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <us_over_10+0x1>
    1040:	9c 5f       	subi	r25, 0xFC	; 252
    1042:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <us_over_10+0x1>
    1046:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <us_over_10>
    104a:	80 51       	subi	r24, 0x10	; 16
    104c:	97 42       	sbci	r25, 0x27	; 39
    104e:	c0 f0       	brcs	.+48     	; 0x1080 <end>
    1050:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <us_over_10+0x1>
    1054:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <us_over_10>
    1058:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <msCounter>
    105c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <msCounter+0x1>
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <msCounter>
    1066:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <msCounter+0x1>
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <msCounter+0x2>
    1070:	89 1f       	adc	r24, r25
    1072:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <msCounter+0x2>
    1076:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <msCounter+0x3>
    107a:	89 1f       	adc	r24, r25
    107c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <msCounter+0x3>

00001080 <end>:
    1080:	2f be       	out	0x3f, r2	; 63
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	2f 90       	pop	r2
    1088:	18 95       	reti

0000108a <_ZN13OrangutanTime17delayMillisecondsEj>:
    108a:	28 ee       	ldi	r18, 0xE8	; 232
    108c:	33 e0       	ldi	r19, 0x03	; 3
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	48 f0       	brcs	.+18     	; 0x10a4 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1092:	f9 01       	movw	r30, r18
    1094:	6f 93       	push	r22
    1096:	64 e0       	ldi	r22, 0x04	; 4
    1098:	6a 95       	dec	r22
    109a:	f1 f7       	brne	.-4      	; 0x1098 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    109c:	6f 91       	pop	r22
    109e:	31 97       	sbiw	r30, 0x01	; 1
    10a0:	c9 f7       	brne	.-14     	; 0x1094 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    10a2:	f5 cf       	rjmp	.-22     	; 0x108e <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    10a4:	08 95       	ret

000010a6 <delay_ms>:
    10a6:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN13OrangutanTime17delayMillisecondsEj>
    10aa:	08 95       	ret

000010ac <_ZN13OrangutanTime5init2Ev>:
    10ac:	e0 e7       	ldi	r30, 0x70	; 112
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8e 7f       	andi	r24, 0xFE	; 254
    10b4:	80 83       	st	Z, r24
    10b6:	a0 eb       	ldi	r26, 0xB0	; 176
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	8c 91       	ld	r24, X
    10bc:	83 60       	ori	r24, 0x03	; 3
    10be:	8c 93       	st	X, r24
    10c0:	a1 eb       	ldi	r26, 0xB1	; 177
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	8c 91       	ld	r24, X
    10c6:	80 7f       	andi	r24, 0xF0	; 240
    10c8:	8c 93       	st	X, r24
    10ca:	8c 91       	ld	r24, X
    10cc:	82 60       	ori	r24, 0x02	; 2
    10ce:	8c 93       	st	X, r24
    10d0:	b8 9a       	sbi	0x17, 0	; 23
    10d2:	80 81       	ld	r24, Z
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	80 83       	st	Z, r24
    10d8:	78 94       	sei
    10da:	08 95       	ret

000010dc <_ZN13OrangutanTime4initEv>:
    10dc:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <_ZZN13OrangutanTime4initEvE11initialized>
    10e0:	81 11       	cpse	r24, r1
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <_ZN13OrangutanTime4initEv+0x12>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_ZZN13OrangutanTime4initEvE11initialized>
    10ea:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN13OrangutanTime5init2Ev>
    10ee:	08 95       	ret

000010f0 <_ZN13OrangutanTime5resetEv>:
    10f0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN13OrangutanTime4initEv>
    10f4:	e0 e7       	ldi	r30, 0x70	; 112
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8e 7f       	andi	r24, 0xFE	; 254
    10fc:	80 83       	st	Z, r24
    10fe:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <msCounter>
    1102:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <msCounter+0x1>
    1106:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <msCounter+0x2>
    110a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <msCounter+0x3>
    110e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <us_over_10+0x1>
    1112:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <us_over_10>
    1116:	80 81       	ld	r24, Z
    1118:	81 60       	ori	r24, 0x01	; 1
    111a:	80 83       	st	Z, r24
    111c:	08 95       	ret

0000111e <calibrate_line_sensors>:
    111e:	68 2f       	mov	r22, r24
    1120:	84 e5       	ldi	r24, 0x54	; 84
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	0e 94 77 0c 	call	0x18ee	; 0x18ee <_ZN16PololuQTRSensors9calibrateEh>
    1128:	08 95       	ret

0000112a <read_line>:
    112a:	46 2f       	mov	r20, r22
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	bc 01       	movw	r22, r24
    1130:	84 e5       	ldi	r24, 0x54	; 84
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN16PololuQTRSensors8readLineEPjhh>
    1138:	08 95       	ret

0000113a <_ZN9Pololu3pi4initEjh>:
    113a:	0f 93       	push	r16
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	00 d0       	rcall	.+0      	; 0x1142 <_ZN9Pololu3pi4initEjh+0x8>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <_ZN9Pololu3pi4initEjh+0xa>
    1144:	1f 92       	push	r1
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	9c 01       	movw	r18, r24
    114c:	85 e0       	ldi	r24, 0x05	; 5
    114e:	e6 e2       	ldi	r30, 0x26	; 38
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	de 01       	movw	r26, r28
    1154:	11 96       	adiw	r26, 0x01	; 1
    1156:	01 90       	ld	r0, Z+
    1158:	0d 92       	st	X+, r0
    115a:	8a 95       	dec	r24
    115c:	e1 f7       	brne	.-8      	; 0x1156 <_ZN9Pololu3pi4initEjh+0x1c>
    115e:	66 23       	and	r22, r22
    1160:	11 f0       	breq	.+4      	; 0x1166 <_ZN9Pololu3pi4initEjh+0x2c>
    1162:	0f ef       	ldi	r16, 0xFF	; 255
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <_ZN9Pololu3pi4initEjh+0x2e>
    1166:	03 e1       	ldi	r16, 0x13	; 19
    1168:	45 e0       	ldi	r20, 0x05	; 5
    116a:	be 01       	movw	r22, r28
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	84 e5       	ldi	r24, 0x54	; 84
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1178:	84 e5       	ldi	r24, 0x54	; 84
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN16PololuQTRSensors11emittersOffEv>
    1180:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN13OrangutanTime5resetEv>
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	0f 91       	pop	r16
    1194:	08 95       	ret

00001196 <pololu_3pi_init>:
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZN9Pololu3pi4initEjh>
    119c:	08 95       	ret

0000119e <_GLOBAL__sub_D_pololu_3pi_init>:
    119e:	84 e5       	ldi	r24, 0x54	; 84
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN16PololuQTRSensorsD1Ev>
    11a6:	08 95       	ret

000011a8 <delay_us>:
    11a8:	6f 93       	push	r22
    11aa:	64 e0       	ldi	r22, 0x04	; 4
    11ac:	6a 95       	dec	r22
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <delay_us+0x4>
    11b0:	6f 91       	pop	r22
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <delay_us>
    11b6:	08 95       	ret

000011b8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    11b8:	fc 01       	movw	r30, r24
    11ba:	11 82       	std	Z+1, r1	; 0x01
    11bc:	10 82       	st	Z, r1
    11be:	13 82       	std	Z+3, r1	; 0x03
    11c0:	12 82       	std	Z+2, r1	; 0x02
    11c2:	15 82       	std	Z+5, r1	; 0x05
    11c4:	14 82       	std	Z+4, r1	; 0x04
    11c6:	16 82       	std	Z+6, r1	; 0x06
    11c8:	68 30       	cpi	r22, 0x08	; 8
    11ca:	68 f4       	brcc	.+26     	; 0x11e6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    11cc:	89 e2       	ldi	r24, 0x29	; 41
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	91 83       	std	Z+1, r25	; 0x01
    11d2:	80 83       	st	Z, r24
    11d4:	8b e2       	ldi	r24, 0x2B	; 43
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	93 83       	std	Z+3, r25	; 0x03
    11da:	82 83       	std	Z+2, r24	; 0x02
    11dc:	8a e2       	ldi	r24, 0x2A	; 42
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	95 83       	std	Z+5, r25	; 0x05
    11e2:	84 83       	std	Z+4, r24	; 0x04
    11e4:	1f c0       	rjmp	.+62     	; 0x1224 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    11e6:	6e 30       	cpi	r22, 0x0E	; 14
    11e8:	70 f4       	brcc	.+28     	; 0x1206 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    11ea:	83 e2       	ldi	r24, 0x23	; 35
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	80 83       	st	Z, r24
    11f2:	85 e2       	ldi	r24, 0x25	; 37
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	93 83       	std	Z+3, r25	; 0x03
    11f8:	82 83       	std	Z+2, r24	; 0x02
    11fa:	84 e2       	ldi	r24, 0x24	; 36
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	95 83       	std	Z+5, r25	; 0x05
    1200:	84 83       	std	Z+4, r24	; 0x04
    1202:	68 50       	subi	r22, 0x08	; 8
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1206:	65 31       	cpi	r22, 0x15	; 21
    1208:	98 f4       	brcc	.+38     	; 0x1230 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    120a:	86 e2       	ldi	r24, 0x26	; 38
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	80 83       	st	Z, r24
    1212:	88 e2       	ldi	r24, 0x28	; 40
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	93 83       	std	Z+3, r25	; 0x03
    1218:	82 83       	std	Z+2, r24	; 0x02
    121a:	87 e2       	ldi	r24, 0x27	; 39
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	95 83       	std	Z+5, r25	; 0x05
    1220:	84 83       	std	Z+4, r24	; 0x04
    1222:	6e 50       	subi	r22, 0x0E	; 14
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	01 c0       	rjmp	.+2      	; 0x122a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    1228:	88 0f       	add	r24, r24
    122a:	6a 95       	dec	r22
    122c:	ea f7       	brpl	.-6      	; 0x1228 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    122e:	86 83       	std	Z+6, r24	; 0x06
    1230:	08 95       	ret

00001232 <_ZN16PololuQTRSensors4initEhhh>:
    1232:	a7 e0       	ldi	r26, 0x07	; 7
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ef e1       	ldi	r30, 0x1F	; 31
    1238:	f9 e0       	ldi	r31, 0x09	; 9
    123a:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__prologue_saves__+0x1c>
    123e:	8c 01       	movw	r16, r24
    1240:	fc 01       	movw	r30, r24
    1242:	11 82       	std	Z+1, r1	; 0x01
    1244:	10 82       	st	Z, r1
    1246:	13 82       	std	Z+3, r1	; 0x03
    1248:	12 82       	std	Z+2, r1	; 0x02
    124a:	15 82       	std	Z+5, r1	; 0x05
    124c:	14 82       	std	Z+4, r1	; 0x04
    124e:	17 82       	std	Z+7, r1	; 0x07
    1250:	16 82       	std	Z+6, r1	; 0x06
    1252:	61 31       	cpi	r22, 0x11	; 17
    1254:	18 f0       	brcs	.+6      	; 0x125c <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1256:	80 e1       	ldi	r24, 0x10	; 16
    1258:	80 87       	std	Z+8, r24	; 0x08
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    125c:	fc 01       	movw	r30, r24
    125e:	60 87       	std	Z+8, r22	; 0x08
    1260:	f8 01       	movw	r30, r16
    1262:	20 8b       	std	Z+16, r18	; 0x10
    1264:	64 2f       	mov	r22, r20
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    126e:	8f 81       	ldd	r24, Y+7	; 0x07
    1270:	f8 01       	movw	r30, r16
    1272:	81 87       	std	Z+9, r24	; 0x09
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	93 87       	std	Z+11, r25	; 0x0b
    127a:	82 87       	std	Z+10, r24	; 0x0a
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	9e 81       	ldd	r25, Y+6	; 0x06
    1280:	95 87       	std	Z+13, r25	; 0x0d
    1282:	84 87       	std	Z+12, r24	; 0x0c
    1284:	27 96       	adiw	r28, 0x07	; 7
    1286:	e4 e0       	ldi	r30, 0x04	; 4
    1288:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__epilogue_restores__+0x1c>

0000128c <_ZN16PololuQTRSensors11emittersOffEv>:
    128c:	fc 01       	movw	r30, r24
    128e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1290:	b5 85       	ldd	r27, Z+13	; 0x0d
    1292:	10 97       	sbiw	r26, 0x00	; 0
    1294:	79 f0       	breq	.+30     	; 0x12b4 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1296:	8c 91       	ld	r24, X
    1298:	91 85       	ldd	r25, Z+9	; 0x09
    129a:	89 2b       	or	r24, r25
    129c:	8c 93       	st	X, r24
    129e:	a2 85       	ldd	r26, Z+10	; 0x0a
    12a0:	b3 85       	ldd	r27, Z+11	; 0x0b
    12a2:	9c 91       	ld	r25, X
    12a4:	81 85       	ldd	r24, Z+9	; 0x09
    12a6:	80 95       	com	r24
    12a8:	89 23       	and	r24, r25
    12aa:	8c 93       	st	X, r24
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <delay_us>
    12b4:	08 95       	ret

000012b6 <_ZN16PololuQTRSensors10emittersOnEv>:
    12b6:	fc 01       	movw	r30, r24
    12b8:	a4 85       	ldd	r26, Z+12	; 0x0c
    12ba:	b5 85       	ldd	r27, Z+13	; 0x0d
    12bc:	10 97       	sbiw	r26, 0x00	; 0
    12be:	71 f0       	breq	.+28     	; 0x12dc <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    12c0:	8c 91       	ld	r24, X
    12c2:	91 85       	ldd	r25, Z+9	; 0x09
    12c4:	89 2b       	or	r24, r25
    12c6:	8c 93       	st	X, r24
    12c8:	a2 85       	ldd	r26, Z+10	; 0x0a
    12ca:	b3 85       	ldd	r27, Z+11	; 0x0b
    12cc:	8c 91       	ld	r24, X
    12ce:	91 85       	ldd	r25, Z+9	; 0x09
    12d0:	89 2b       	or	r24, r25
    12d2:	8c 93       	st	X, r24
    12d4:	88 ec       	ldi	r24, 0xC8	; 200
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <delay_us>
    12dc:	08 95       	ret

000012de <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    12de:	a7 e0       	ldi	r26, 0x07	; 7
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e7       	ldi	r30, 0x75	; 117
    12e4:	f9 e0       	ldi	r31, 0x09	; 9
    12e6:	0c 94 6f 0e 	jmp	0x1cde	; 0x1cde <__prologue_saves__+0x6>
    12ea:	7c 01       	movw	r14, r24
    12ec:	4b 01       	movw	r8, r22
    12ee:	64 2f       	mov	r22, r20
    12f0:	39 01       	movw	r6, r18
    12f2:	40 2f       	mov	r20, r16
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN16PololuQTRSensors4initEhhh>
    12fa:	87 01       	movw	r16, r14
    12fc:	0f 5b       	subi	r16, 0xBF	; 191
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	f8 01       	movw	r30, r16
    1302:	10 82       	st	Z, r1
    1304:	67 01       	movw	r12, r14
    1306:	f2 e4       	ldi	r31, 0x42	; 66
    1308:	cf 0e       	add	r12, r31
    130a:	d1 1c       	adc	r13, r1
    130c:	f6 01       	movw	r30, r12
    130e:	10 82       	st	Z, r1
    1310:	57 01       	movw	r10, r14
    1312:	f3 e4       	ldi	r31, 0x43	; 67
    1314:	af 0e       	add	r10, r31
    1316:	b1 1c       	adc	r11, r1
    1318:	f5 01       	movw	r30, r10
    131a:	10 82       	st	Z, r1
    131c:	f7 01       	movw	r30, r14
    131e:	77 86       	std	Z+15, r7	; 0x0f
    1320:	66 86       	std	Z+14, r6	; 0x0e
    1322:	51 2c       	mov	r5, r1
    1324:	f7 01       	movw	r30, r14
    1326:	80 85       	ldd	r24, Z+8	; 0x08
    1328:	58 16       	cp	r5, r24
    132a:	50 f5       	brcc	.+84     	; 0x1380 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    132c:	65 2c       	mov	r6, r5
    132e:	71 2c       	mov	r7, r1
    1330:	f4 01       	movw	r30, r8
    1332:	e6 0d       	add	r30, r6
    1334:	f7 1d       	adc	r31, r7
    1336:	60 81       	ld	r22, Z
    1338:	ce 01       	movw	r24, r28
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1340:	2f 81       	ldd	r18, Y+7	; 0x07
    1342:	f7 01       	movw	r30, r14
    1344:	e6 0d       	add	r30, r6
    1346:	f7 1d       	adc	r31, r7
    1348:	21 8b       	std	Z+17, r18	; 0x11
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	f3 01       	movw	r30, r6
    1350:	ee 0f       	add	r30, r30
    1352:	ff 1f       	adc	r31, r31
    1354:	ee 0d       	add	r30, r14
    1356:	ff 1d       	adc	r31, r15
    1358:	92 a3       	std	Z+34, r25	; 0x22
    135a:	81 a3       	std	Z+33, r24	; 0x21
    135c:	83 32       	cpi	r24, 0x23	; 35
    135e:	91 05       	cpc	r25, r1
    1360:	11 f4       	brne	.+4      	; 0x1366 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    1362:	f8 01       	movw	r30, r16
    1364:	08 c0       	rjmp	.+16     	; 0x1376 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1366:	86 32       	cpi	r24, 0x26	; 38
    1368:	91 05       	cpc	r25, r1
    136a:	11 f4       	brne	.+4      	; 0x1370 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    136c:	f6 01       	movw	r30, r12
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1370:	89 97       	sbiw	r24, 0x29	; 41
    1372:	21 f4       	brne	.+8      	; 0x137c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    1374:	f5 01       	movw	r30, r10
    1376:	80 81       	ld	r24, Z
    1378:	82 2b       	or	r24, r18
    137a:	80 83       	st	Z, r24
    137c:	53 94       	inc	r5
    137e:	d2 cf       	rjmp	.-92     	; 0x1324 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    1380:	27 96       	adiw	r28, 0x07	; 7
    1382:	ef e0       	ldi	r30, 0x0F	; 15
    1384:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <__epilogue_restores__+0x6>

00001388 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1388:	a0 e0       	ldi	r26, 0x00	; 0
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea ec       	ldi	r30, 0xCA	; 202
    138e:	f9 e0       	ldi	r31, 0x09	; 9
    1390:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__prologue_saves__+0xa>
    1394:	ec 01       	movw	r28, r24
    1396:	5b 01       	movw	r10, r22
    1398:	6c 01       	movw	r12, r24
    139a:	81 e4       	ldi	r24, 0x41	; 65
    139c:	c8 0e       	add	r12, r24
    139e:	d1 1c       	adc	r13, r1
    13a0:	f6 01       	movw	r30, r12
    13a2:	80 80       	ld	r8, Z
    13a4:	7e 01       	movw	r14, r28
    13a6:	f2 e4       	ldi	r31, 0x42	; 66
    13a8:	ef 0e       	add	r14, r31
    13aa:	f1 1c       	adc	r15, r1
    13ac:	f7 01       	movw	r30, r14
    13ae:	70 80       	ld	r7, Z
    13b0:	8e 01       	movw	r16, r28
    13b2:	0d 5b       	subi	r16, 0xBD	; 189
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	f8 01       	movw	r30, r16
    13b8:	90 80       	ld	r9, Z
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	98 85       	ldd	r25, Y+8	; 0x08
    13be:	89 17       	cp	r24, r25
    13c0:	48 f4       	brcc	.+18     	; 0x13d4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    13c2:	f5 01       	movw	r30, r10
    13c4:	e8 0f       	add	r30, r24
    13c6:	f1 1d       	adc	r31, r1
    13c8:	e8 0f       	add	r30, r24
    13ca:	f1 1d       	adc	r31, r1
    13cc:	11 82       	std	Z+1, r1	; 0x01
    13ce:	10 82       	st	Z, r1
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	f4 cf       	rjmp	.-24     	; 0x13bc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    13d4:	84 b1       	in	r24, 0x04	; 4
    13d6:	f6 01       	movw	r30, r12
    13d8:	90 81       	ld	r25, Z
    13da:	89 2b       	or	r24, r25
    13dc:	84 b9       	out	0x04, r24	; 4
    13de:	87 b1       	in	r24, 0x07	; 7
    13e0:	f7 01       	movw	r30, r14
    13e2:	90 81       	ld	r25, Z
    13e4:	89 2b       	or	r24, r25
    13e6:	87 b9       	out	0x07, r24	; 7
    13e8:	8a b1       	in	r24, 0x0a	; 10
    13ea:	f8 01       	movw	r30, r16
    13ec:	90 81       	ld	r25, Z
    13ee:	89 2b       	or	r24, r25
    13f0:	8a b9       	out	0x0a, r24	; 10
    13f2:	85 b1       	in	r24, 0x05	; 5
    13f4:	f6 01       	movw	r30, r12
    13f6:	90 81       	ld	r25, Z
    13f8:	89 2b       	or	r24, r25
    13fa:	85 b9       	out	0x05, r24	; 5
    13fc:	88 b1       	in	r24, 0x08	; 8
    13fe:	f7 01       	movw	r30, r14
    1400:	90 81       	ld	r25, Z
    1402:	89 2b       	or	r24, r25
    1404:	88 b9       	out	0x08, r24	; 8
    1406:	8b b1       	in	r24, 0x0b	; 11
    1408:	f8 01       	movw	r30, r16
    140a:	90 81       	ld	r25, Z
    140c:	89 2b       	or	r24, r25
    140e:	8b b9       	out	0x0b, r24	; 11
    1410:	8a e0       	ldi	r24, 0x0A	; 10
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <delay_us>
    1418:	94 b1       	in	r25, 0x04	; 4
    141a:	f6 01       	movw	r30, r12
    141c:	80 81       	ld	r24, Z
    141e:	80 95       	com	r24
    1420:	89 23       	and	r24, r25
    1422:	84 b9       	out	0x04, r24	; 4
    1424:	97 b1       	in	r25, 0x07	; 7
    1426:	f7 01       	movw	r30, r14
    1428:	80 81       	ld	r24, Z
    142a:	80 95       	com	r24
    142c:	89 23       	and	r24, r25
    142e:	87 b9       	out	0x07, r24	; 7
    1430:	9a b1       	in	r25, 0x0a	; 10
    1432:	f8 01       	movw	r30, r16
    1434:	80 81       	ld	r24, Z
    1436:	80 95       	com	r24
    1438:	89 23       	and	r24, r25
    143a:	8a b9       	out	0x0a, r24	; 10
    143c:	95 b1       	in	r25, 0x05	; 5
    143e:	f6 01       	movw	r30, r12
    1440:	80 81       	ld	r24, Z
    1442:	80 95       	com	r24
    1444:	89 23       	and	r24, r25
    1446:	85 b9       	out	0x05, r24	; 5
    1448:	98 b1       	in	r25, 0x08	; 8
    144a:	f7 01       	movw	r30, r14
    144c:	80 81       	ld	r24, Z
    144e:	80 95       	com	r24
    1450:	89 23       	and	r24, r25
    1452:	88 b9       	out	0x08, r24	; 8
    1454:	9b b1       	in	r25, 0x0b	; 11
    1456:	f8 01       	movw	r30, r16
    1458:	80 81       	ld	r24, Z
    145a:	80 95       	com	r24
    145c:	89 23       	and	r24, r25
    145e:	8b b9       	out	0x0b, r24	; 11
    1460:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1464:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1468:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    146c:	83 60       	ori	r24, 0x03	; 3
    146e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1478:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	2e 85       	ldd	r18, Y+14	; 0x0e
    1482:	3f 85       	ldd	r19, Y+15	; 0x0f
    1484:	82 17       	cp	r24, r18
    1486:	93 07       	cpc	r25, r19
    1488:	20 f5       	brcc	.+72     	; 0x14d2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    148a:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    148e:	2c 2d       	mov	r18, r12
    1490:	24 1b       	sub	r18, r20
    1492:	82 0f       	add	r24, r18
    1494:	91 1d       	adc	r25, r1
    1496:	03 b1       	in	r16, 0x03	; 3
    1498:	08 11       	cpse	r16, r8
    149a:	32 c0       	rjmp	.+100    	; 0x1500 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    149c:	f6 b0       	in	r15, 0x06	; 6
    149e:	f7 10       	cpse	r15, r7
    14a0:	2f c0       	rjmp	.+94     	; 0x1500 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    14a2:	29 b1       	in	r18, 0x09	; 9
    14a4:	29 11       	cpse	r18, r9
    14a6:	2c c0       	rjmp	.+88     	; 0x1500 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    14a8:	10 c0       	rjmp	.+32     	; 0x14ca <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    14aa:	21 2f       	mov	r18, r17
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	a9 01       	movw	r20, r18
    14b0:	44 0f       	add	r20, r20
    14b2:	55 1f       	adc	r21, r21
    14b4:	f5 01       	movw	r30, r10
    14b6:	e4 0f       	add	r30, r20
    14b8:	f5 1f       	adc	r31, r21
    14ba:	60 81       	ld	r22, Z
    14bc:	71 81       	ldd	r23, Z+1	; 0x01
    14be:	67 2b       	or	r22, r23
    14c0:	21 f1       	breq	.+72     	; 0x150a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    14c2:	1f 5f       	subi	r17, 0xFF	; 255
    14c4:	28 85       	ldd	r18, Y+8	; 0x08
    14c6:	12 17       	cp	r17, r18
    14c8:	80 f3       	brcs	.-32     	; 0x14aa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    14ca:	7f 2c       	mov	r7, r15
    14cc:	80 2e       	mov	r8, r16
    14ce:	4c 2d       	mov	r20, r12
    14d0:	d7 cf       	rjmp	.-82     	; 0x1480 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    14d2:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    14d6:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	88 85       	ldd	r24, Y+8	; 0x08
    14de:	28 17       	cp	r18, r24
    14e0:	30 f5       	brcc	.+76     	; 0x152e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    14e2:	f5 01       	movw	r30, r10
    14e4:	e2 0f       	add	r30, r18
    14e6:	f1 1d       	adc	r31, r1
    14e8:	e2 0f       	add	r30, r18
    14ea:	f1 1d       	adc	r31, r1
    14ec:	80 81       	ld	r24, Z
    14ee:	91 81       	ldd	r25, Z+1	; 0x01
    14f0:	89 2b       	or	r24, r25
    14f2:	21 f4       	brne	.+8      	; 0x14fc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    14f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    14f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    14f8:	91 83       	std	Z+1, r25	; 0x01
    14fa:	80 83       	st	Z, r24
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	ee cf       	rjmp	.-36     	; 0x14dc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1500:	03 b1       	in	r16, 0x03	; 3
    1502:	f6 b0       	in	r15, 0x06	; 6
    1504:	99 b0       	in	r9, 0x09	; 9
    1506:	10 e0       	ldi	r17, 0x00	; 0
    1508:	dd cf       	rjmp	.-70     	; 0x14c4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    150a:	de 01       	movw	r26, r28
    150c:	a4 0f       	add	r26, r20
    150e:	b5 1f       	adc	r27, r21
    1510:	91 96       	adiw	r26, 0x21	; 33
    1512:	0d 90       	ld	r0, X+
    1514:	bc 91       	ld	r27, X
    1516:	a0 2d       	mov	r26, r0
    1518:	4c 91       	ld	r20, X
    151a:	de 01       	movw	r26, r28
    151c:	a2 0f       	add	r26, r18
    151e:	b3 1f       	adc	r27, r19
    1520:	51 96       	adiw	r26, 0x11	; 17
    1522:	2c 91       	ld	r18, X
    1524:	42 23       	and	r20, r18
    1526:	69 f6       	brne	.-102    	; 0x14c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1528:	91 83       	std	Z+1, r25	; 0x01
    152a:	80 83       	st	Z, r24
    152c:	ca cf       	rjmp	.-108    	; 0x14c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	ed e0       	ldi	r30, 0x0D	; 13
    1534:	0c 94 8d 0e 	jmp	0x1d1a	; 0x1d1a <__epilogue_restores__+0xa>

00001538 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	fc 01       	movw	r30, r24
    1546:	9b 01       	movw	r18, r22
    1548:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    154c:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1550:	47 b1       	in	r20, 0x07	; 7
    1552:	18 b1       	in	r17, 0x08	; 8
    1554:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1558:	86 fd       	sbrc	r24, 6
    155a:	fc cf       	rjmp	.-8      	; 0x1554 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 85       	ldd	r25, Z+8	; 0x08
    1560:	89 17       	cp	r24, r25
    1562:	48 f4       	brcc	.+18     	; 0x1576 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1564:	d9 01       	movw	r26, r18
    1566:	a8 0f       	add	r26, r24
    1568:	b1 1d       	adc	r27, r1
    156a:	a8 0f       	add	r26, r24
    156c:	b1 1d       	adc	r27, r1
    156e:	1d 92       	st	X+, r1
    1570:	1c 92       	st	X, r1
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	f4 cf       	rjmp	.-24     	; 0x155e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1576:	97 b1       	in	r25, 0x07	; 7
    1578:	82 a1       	ldd	r24, Z+34	; 0x22
    157a:	80 95       	com	r24
    157c:	89 23       	and	r24, r25
    157e:	87 b9       	out	0x07, r24	; 7
    1580:	98 b1       	in	r25, 0x08	; 8
    1582:	82 a1       	ldd	r24, Z+34	; 0x22
    1584:	80 95       	com	r24
    1586:	89 23       	and	r24, r25
    1588:	88 b9       	out	0x08, r24	; 8
    158a:	87 e8       	ldi	r24, 0x87	; 135
    158c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1590:	e1 2c       	mov	r14, r1
    1592:	81 a1       	ldd	r24, Z+33	; 0x21
    1594:	e8 16       	cp	r14, r24
    1596:	10 f0       	brcs	.+4      	; 0x159c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1598:	e1 2c       	mov	r14, r1
    159a:	29 c0       	rjmp	.+82     	; 0x15ee <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	80 85       	ldd	r24, Z+8	; 0x08
    15a0:	58 17       	cp	r21, r24
    15a2:	18 f5       	brcc	.+70     	; 0x15ea <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    15a4:	a5 2f       	mov	r26, r21
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef 01       	movw	r28, r30
    15aa:	ca 0f       	add	r28, r26
    15ac:	db 1f       	adc	r29, r27
    15ae:	89 89       	ldd	r24, Y+17	; 0x11
    15b0:	80 64       	ori	r24, 0x40	; 64
    15b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    15b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    15ba:	80 64       	ori	r24, 0x40	; 64
    15bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    15c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    15c4:	86 fd       	sbrc	r24, 6
    15c6:	fc cf       	rjmp	.-8      	; 0x15c0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    15c8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    15cc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    15d0:	aa 0f       	add	r26, r26
    15d2:	bb 1f       	adc	r27, r27
    15d4:	a2 0f       	add	r26, r18
    15d6:	b3 1f       	adc	r27, r19
    15d8:	8d 91       	ld	r24, X+
    15da:	9c 91       	ld	r25, X
    15dc:	11 97       	sbiw	r26, 0x01	; 1
    15de:	86 0f       	add	r24, r22
    15e0:	97 1f       	adc	r25, r23
    15e2:	8d 93       	st	X+, r24
    15e4:	9c 93       	st	X, r25
    15e6:	5f 5f       	subi	r21, 0xFF	; 255
    15e8:	da cf       	rjmp	.-76     	; 0x159e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    15ea:	e3 94       	inc	r14
    15ec:	d2 cf       	rjmp	.-92     	; 0x1592 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    15ee:	80 85       	ldd	r24, Z+8	; 0x08
    15f0:	e8 16       	cp	r14, r24
    15f2:	a0 f4       	brcc	.+40     	; 0x161c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    15f4:	e9 01       	movw	r28, r18
    15f6:	ce 0d       	add	r28, r14
    15f8:	d1 1d       	adc	r29, r1
    15fa:	ce 0d       	add	r28, r14
    15fc:	d1 1d       	adc	r29, r1
    15fe:	61 a1       	ldd	r22, Z+33	; 0x21
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	cb 01       	movw	r24, r22
    1604:	95 95       	asr	r25
    1606:	87 95       	ror	r24
    1608:	a8 81       	ld	r26, Y
    160a:	b9 81       	ldd	r27, Y+1	; 0x01
    160c:	8a 0f       	add	r24, r26
    160e:	9b 1f       	adc	r25, r27
    1610:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__udivmodhi4>
    1614:	79 83       	std	Y+1, r23	; 0x01
    1616:	68 83       	st	Y, r22
    1618:	e3 94       	inc	r14
    161a:	e9 cf       	rjmp	.-46     	; 0x15ee <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    161c:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1620:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1624:	18 b9       	out	0x08, r17	; 8
    1626:	47 b9       	out	0x07, r20	; 7
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	e6 e0       	ldi	r30, 0x06	; 6
    162e:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__epilogue_restores__+0x18>

00001632 <_ZN16PololuQTRSensors4readEPjh>:
    1632:	a0 e2       	ldi	r26, 0x20	; 32
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e1       	ldi	r30, 0x1F	; 31
    1638:	fb e0       	ldi	r31, 0x0B	; 11
    163a:	0c 94 77 0e 	jmp	0x1cee	; 0x1cee <__prologue_saves__+0x16>
    163e:	8c 01       	movw	r16, r24
    1640:	7b 01       	movw	r14, r22
    1642:	d4 2e       	mov	r13, r20
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	84 0f       	add	r24, r20
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	18 f4       	brcc	.+6      	; 0x1652 <_ZN16PololuQTRSensors4readEPjh+0x20>
    164c:	c8 01       	movw	r24, r16
    164e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <_ZN16PololuQTRSensors10emittersOnEv>
    1652:	d8 01       	movw	r26, r16
    1654:	50 96       	adiw	r26, 0x10	; 16
    1656:	8c 91       	ld	r24, X
    1658:	b7 01       	movw	r22, r14
    165a:	81 11       	cpse	r24, r1
    165c:	10 c0       	rjmp	.+32     	; 0x167e <_ZN16PololuQTRSensors4readEPjh+0x4c>
    165e:	c8 01       	movw	r24, r16
    1660:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1664:	c8 01       	movw	r24, r16
    1666:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN16PololuQTRSensors11emittersOffEv>
    166a:	b2 e0       	ldi	r27, 0x02	; 2
    166c:	db 12       	cpse	r13, r27
    166e:	3a c0       	rjmp	.+116    	; 0x16e4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1670:	be 01       	movw	r22, r28
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	c8 01       	movw	r24, r16
    1678:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    167c:	0f c0       	rjmp	.+30     	; 0x169c <_ZN16PololuQTRSensors4readEPjh+0x6a>
    167e:	c8 01       	movw	r24, r16
    1680:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1684:	c8 01       	movw	r24, r16
    1686:	0e 94 46 09 	call	0x128c	; 0x128c <_ZN16PololuQTRSensors11emittersOffEv>
    168a:	e2 e0       	ldi	r30, 0x02	; 2
    168c:	de 12       	cpse	r13, r30
    168e:	2a c0       	rjmp	.+84     	; 0x16e4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1690:	be 01       	movw	r22, r28
    1692:	6f 5f       	subi	r22, 0xFF	; 255
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	c8 01       	movw	r24, r16
    1698:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	f8 01       	movw	r30, r16
    16a0:	80 85       	ldd	r24, Z+8	; 0x08
    16a2:	48 17       	cp	r20, r24
    16a4:	f8 f4       	brcc	.+62     	; 0x16e4 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    16a6:	84 2f       	mov	r24, r20
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	f7 01       	movw	r30, r14
    16b0:	e8 0f       	add	r30, r24
    16b2:	f9 1f       	adc	r31, r25
    16b4:	21 e0       	ldi	r18, 0x01	; 1
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	2c 0f       	add	r18, r28
    16ba:	3d 1f       	adc	r19, r29
    16bc:	82 0f       	add	r24, r18
    16be:	93 1f       	adc	r25, r19
    16c0:	d8 01       	movw	r26, r16
    16c2:	1e 96       	adiw	r26, 0x0e	; 14
    16c4:	2d 91       	ld	r18, X+
    16c6:	3c 91       	ld	r19, X
    16c8:	1f 97       	sbiw	r26, 0x0f	; 15
    16ca:	dc 01       	movw	r26, r24
    16cc:	8d 91       	ld	r24, X+
    16ce:	9c 91       	ld	r25, X
    16d0:	28 1b       	sub	r18, r24
    16d2:	39 0b       	sbc	r19, r25
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	82 0f       	add	r24, r18
    16da:	93 1f       	adc	r25, r19
    16dc:	91 83       	std	Z+1, r25	; 0x01
    16de:	80 83       	st	Z, r24
    16e0:	4f 5f       	subi	r20, 0xFF	; 255
    16e2:	dd cf       	rjmp	.-70     	; 0x169e <_ZN16PololuQTRSensors4readEPjh+0x6c>
    16e4:	a0 96       	adiw	r28, 0x20	; 32
    16e6:	e7 e0       	ldi	r30, 0x07	; 7
    16e8:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__epilogue_restores__+0x16>

000016ec <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    16ec:	2f 92       	push	r2
    16ee:	3f 92       	push	r3
    16f0:	5f 92       	push	r5
    16f2:	6f 92       	push	r6
    16f4:	7f 92       	push	r7
    16f6:	8f 92       	push	r8
    16f8:	9f 92       	push	r9
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	c0 56       	subi	r28, 0x60	; 96
    1714:	d1 09       	sbc	r29, r1
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	8c 01       	movw	r16, r24
    1722:	4b 01       	movw	r8, r22
    1724:	5a 01       	movw	r10, r20
    1726:	52 2e       	mov	r5, r18
    1728:	da 01       	movw	r26, r20
    172a:	8d 91       	ld	r24, X+
    172c:	9c 91       	ld	r25, X
    172e:	89 2b       	or	r24, r25
    1730:	31 f0       	breq	.+12     	; 0x173e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1732:	f4 01       	movw	r30, r8
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	89 2b       	or	r24, r25
    173a:	f1 f4       	brne	.+60     	; 0x1778 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    173c:	24 c0       	rjmp	.+72     	; 0x1786 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    173e:	d8 01       	movw	r26, r16
    1740:	18 96       	adiw	r26, 0x08	; 8
    1742:	8c 91       	ld	r24, X
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <malloc>
    174e:	f5 01       	movw	r30, r10
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	09 f4       	brne	.+2      	; 0x175a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1758:	b1 c0       	rjmp	.+354    	; 0x18bc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    175a:	fc 01       	movw	r30, r24
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	d8 01       	movw	r26, r16
    1762:	18 96       	adiw	r26, 0x08	; 8
    1764:	8c 91       	ld	r24, X
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	28 17       	cp	r18, r24
    176a:	39 07       	cpc	r19, r25
    176c:	14 f7       	brge	.-60     	; 0x1732 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    176e:	11 92       	st	Z+, r1
    1770:	11 92       	st	Z+, r1
    1772:	2f 5f       	subi	r18, 0xFF	; 255
    1774:	3f 4f       	sbci	r19, 0xFF	; 255
    1776:	f4 cf       	rjmp	.-24     	; 0x1760 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1778:	e1 2c       	mov	r14, r1
    177a:	f1 2c       	mov	r15, r1
    177c:	6e 01       	movw	r12, r28
    177e:	b1 e2       	ldi	r27, 0x21	; 33
    1780:	cb 0e       	add	r12, r27
    1782:	d1 1c       	adc	r13, r1
    1784:	21 c0       	rjmp	.+66     	; 0x17c8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1786:	f8 01       	movw	r30, r16
    1788:	80 85       	ldd	r24, Z+8	; 0x08
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <malloc>
    1794:	d4 01       	movw	r26, r8
    1796:	8d 93       	st	X+, r24
    1798:	9c 93       	st	X, r25
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	09 f4       	brne	.+2      	; 0x17a0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    179e:	8e c0       	rjmp	.+284    	; 0x18bc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    17a0:	fc 01       	movw	r30, r24
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	d8 01       	movw	r26, r16
    17a8:	18 96       	adiw	r26, 0x08	; 8
    17aa:	8c 91       	ld	r24, X
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	28 17       	cp	r18, r24
    17b0:	39 07       	cpc	r19, r25
    17b2:	14 f7       	brge	.-60     	; 0x1778 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    17b4:	d8 01       	movw	r26, r16
    17b6:	1e 96       	adiw	r26, 0x0e	; 14
    17b8:	8d 91       	ld	r24, X+
    17ba:	9c 91       	ld	r25, X
    17bc:	1f 97       	sbiw	r26, 0x0f	; 15
    17be:	81 93       	st	Z+, r24
    17c0:	91 93       	st	Z+, r25
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	ef cf       	rjmp	.-34     	; 0x17a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    17c8:	45 2d       	mov	r20, r5
    17ca:	be 01       	movw	r22, r28
    17cc:	6f 5b       	subi	r22, 0xBF	; 191
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	c8 01       	movw	r24, r16
    17d2:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN16PololuQTRSensors4readEPjh>
    17d6:	f8 01       	movw	r30, r16
    17d8:	60 84       	ldd	r6, Z+8	; 0x08
    17da:	71 2c       	mov	r7, r1
    17dc:	fe 01       	movw	r30, r28
    17de:	ef 5b       	subi	r30, 0xBF	; 191
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	c6 01       	movw	r24, r12
    17e4:	9e 01       	movw	r18, r28
    17e6:	2f 5f       	subi	r18, 0xFF	; 255
    17e8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ea:	19 01       	movw	r2, r18
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	26 15       	cp	r18, r6
    17f2:	37 05       	cpc	r19, r7
    17f4:	4c f5       	brge	.+82     	; 0x1848 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    17f6:	e1 14       	cp	r14, r1
    17f8:	f1 04       	cpc	r15, r1
    17fa:	89 f0       	breq	.+34     	; 0x181e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    17fc:	dc 01       	movw	r26, r24
    17fe:	6d 91       	ld	r22, X+
    1800:	7c 91       	ld	r23, X
    1802:	40 81       	ld	r20, Z
    1804:	51 81       	ldd	r21, Z+1	; 0x01
    1806:	64 17       	cp	r22, r20
    1808:	75 07       	cpc	r23, r21
    180a:	48 f0       	brcs	.+18     	; 0x181e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    180c:	d1 01       	movw	r26, r2
    180e:	6d 91       	ld	r22, X+
    1810:	7c 91       	ld	r23, X
    1812:	40 81       	ld	r20, Z
    1814:	51 81       	ldd	r21, Z+1	; 0x01
    1816:	46 17       	cp	r20, r22
    1818:	57 07       	cpc	r21, r23
    181a:	48 f0       	brcs	.+18     	; 0x182e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    181c:	0d c0       	rjmp	.+26     	; 0x1838 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    181e:	40 81       	ld	r20, Z
    1820:	51 81       	ldd	r21, Z+1	; 0x01
    1822:	dc 01       	movw	r26, r24
    1824:	4d 93       	st	X+, r20
    1826:	5c 93       	st	X, r21
    1828:	e1 14       	cp	r14, r1
    182a:	f1 04       	cpc	r15, r1
    182c:	79 f7       	brne	.-34     	; 0x180c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    182e:	40 81       	ld	r20, Z
    1830:	51 81       	ldd	r21, Z+1	; 0x01
    1832:	d1 01       	movw	r26, r2
    1834:	4d 93       	st	X+, r20
    1836:	5c 93       	st	X, r21
    1838:	2f 5f       	subi	r18, 0xFF	; 255
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	b2 e0       	ldi	r27, 0x02	; 2
    183e:	2b 0e       	add	r2, r27
    1840:	31 1c       	adc	r3, r1
    1842:	32 96       	adiw	r30, 0x02	; 2
    1844:	02 96       	adiw	r24, 0x02	; 2
    1846:	d4 cf       	rjmp	.-88     	; 0x17f0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1848:	ef ef       	ldi	r30, 0xFF	; 255
    184a:	ee 1a       	sub	r14, r30
    184c:	fe 0a       	sbc	r15, r30
    184e:	fa e0       	ldi	r31, 0x0A	; 10
    1850:	ef 16       	cp	r14, r31
    1852:	f1 04       	cpc	r15, r1
    1854:	09 f0       	breq	.+2      	; 0x1858 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1856:	b8 cf       	rjmp	.-144    	; 0x17c8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1858:	9e 01       	movw	r18, r28
    185a:	2f 5f       	subi	r18, 0xFF	; 255
    185c:	3f 4f       	sbci	r19, 0xFF	; 255
    185e:	79 01       	movw	r14, r18
    1860:	36 01       	movw	r6, r12
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	f8 01       	movw	r30, r16
    1868:	20 85       	ldd	r18, Z+8	; 0x08
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	82 17       	cp	r24, r18
    186e:	93 07       	cpc	r25, r19
    1870:	2c f5       	brge	.+74     	; 0x18bc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1872:	d7 01       	movw	r26, r14
    1874:	2d 91       	ld	r18, X+
    1876:	3d 91       	ld	r19, X+
    1878:	7d 01       	movw	r14, r26
    187a:	b3 01       	movw	r22, r6
    187c:	6c 19       	sub	r22, r12
    187e:	7d 09       	sbc	r23, r13
    1880:	d5 01       	movw	r26, r10
    1882:	ed 91       	ld	r30, X+
    1884:	fc 91       	ld	r31, X
    1886:	e6 0f       	add	r30, r22
    1888:	f7 1f       	adc	r31, r23
    188a:	40 81       	ld	r20, Z
    188c:	51 81       	ldd	r21, Z+1	; 0x01
    188e:	42 17       	cp	r20, r18
    1890:	53 07       	cpc	r21, r19
    1892:	10 f4       	brcc	.+4      	; 0x1898 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1894:	31 83       	std	Z+1, r19	; 0x01
    1896:	20 83       	st	Z, r18
    1898:	f3 01       	movw	r30, r6
    189a:	21 91       	ld	r18, Z+
    189c:	31 91       	ld	r19, Z+
    189e:	3f 01       	movw	r6, r30
    18a0:	d4 01       	movw	r26, r8
    18a2:	ed 91       	ld	r30, X+
    18a4:	fc 91       	ld	r31, X
    18a6:	e6 0f       	add	r30, r22
    18a8:	f7 1f       	adc	r31, r23
    18aa:	40 81       	ld	r20, Z
    18ac:	51 81       	ldd	r21, Z+1	; 0x01
    18ae:	24 17       	cp	r18, r20
    18b0:	35 07       	cpc	r19, r21
    18b2:	10 f4       	brcc	.+4      	; 0x18b8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    18b4:	31 83       	std	Z+1, r19	; 0x01
    18b6:	20 83       	st	Z, r18
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	d5 cf       	rjmp	.-86     	; 0x1866 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    18bc:	c0 5a       	subi	r28, 0xA0	; 160
    18be:	df 4f       	sbci	r29, 0xFF	; 255
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	7f 90       	pop	r7
    18e4:	6f 90       	pop	r6
    18e6:	5f 90       	pop	r5
    18e8:	3f 90       	pop	r3
    18ea:	2f 90       	pop	r2
    18ec:	08 95       	ret

000018ee <_ZN16PololuQTRSensors9calibrateEh>:
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	ec 01       	movw	r28, r24
    18f6:	16 2f       	mov	r17, r22
    18f8:	8f ef       	ldi	r24, 0xFF	; 255
    18fa:	86 0f       	add	r24, r22
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	18 f0       	brcs	.+6      	; 0x1906 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1900:	66 23       	and	r22, r22
    1902:	59 f0       	breq	.+22     	; 0x191a <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1904:	14 c0       	rjmp	.+40     	; 0x192e <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1906:	21 e0       	ldi	r18, 0x01	; 1
    1908:	ae 01       	movw	r20, r28
    190a:	4e 5f       	subi	r20, 0xFE	; 254
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	be 01       	movw	r22, r28
    1910:	ce 01       	movw	r24, r28
    1912:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1916:	12 30       	cpi	r17, 0x02	; 2
    1918:	51 f4       	brne	.+20     	; 0x192e <_ZN16PololuQTRSensors9calibrateEh+0x40>
    191a:	ae 01       	movw	r20, r28
    191c:	4a 5f       	subi	r20, 0xFA	; 250
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	be 01       	movw	r22, r28
    1922:	6c 5f       	subi	r22, 0xFC	; 252
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	ce 01       	movw	r24, r28
    192a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	08 95       	ret

00001936 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e1 ea       	ldi	r30, 0xA1	; 161
    193c:	fc e0       	ldi	r31, 0x0C	; 12
    193e:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__prologue_saves__+0x12>
    1942:	ec 01       	movw	r28, r24
    1944:	8b 01       	movw	r16, r22
    1946:	b4 2e       	mov	r11, r20
    1948:	84 2f       	mov	r24, r20
    194a:	8d 7f       	andi	r24, 0xFD	; 253
    194c:	51 f4       	brne	.+20     	; 0x1962 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	89 2b       	or	r24, r25
    1954:	09 f4       	brne	.+2      	; 0x1958 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    1956:	97 c0       	rjmp	.+302    	; 0x1a86 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1958:	8e 81       	ldd	r24, Y+6	; 0x06
    195a:	9f 81       	ldd	r25, Y+7	; 0x07
    195c:	89 2b       	or	r24, r25
    195e:	09 f4       	brne	.+2      	; 0x1962 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1960:	92 c0       	rjmp	.+292    	; 0x1a86 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	8b 0d       	add	r24, r11
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	50 f4       	brcc	.+20     	; 0x197e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    196a:	88 81       	ld	r24, Y
    196c:	99 81       	ldd	r25, Y+1	; 0x01
    196e:	89 2b       	or	r24, r25
    1970:	09 f4       	brne	.+2      	; 0x1974 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    1972:	89 c0       	rjmp	.+274    	; 0x1a86 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	9b 81       	ldd	r25, Y+3	; 0x03
    1978:	89 2b       	or	r24, r25
    197a:	09 f4       	brne	.+2      	; 0x197e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    197c:	84 c0       	rjmp	.+264    	; 0x1a86 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    197e:	4b 2d       	mov	r20, r11
    1980:	b8 01       	movw	r22, r16
    1982:	ce 01       	movw	r24, r28
    1984:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN16PololuQTRSensors4readEPjh>
    1988:	78 01       	movw	r14, r16
    198a:	00 e0       	ldi	r16, 0x00	; 0
    198c:	10 e0       	ldi	r17, 0x00	; 0
    198e:	c1 2c       	mov	r12, r1
    1990:	d1 2c       	mov	r13, r1
    1992:	88 85       	ldd	r24, Y+8	; 0x08
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	c8 16       	cp	r12, r24
    1998:	d9 06       	cpc	r13, r25
    199a:	0c f0       	brlt	.+2      	; 0x199e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    199c:	74 c0       	rjmp	.+232    	; 0x1a86 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	b8 12       	cpse	r11, r24
    19a2:	0a c0       	rjmp	.+20     	; 0x19b8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    19a4:	ea 81       	ldd	r30, Y+2	; 0x02
    19a6:	fb 81       	ldd	r31, Y+3	; 0x03
    19a8:	e0 0f       	add	r30, r16
    19aa:	f1 1f       	adc	r31, r17
    19ac:	01 90       	ld	r0, Z+
    19ae:	f0 81       	ld	r31, Z
    19b0:	e0 2d       	mov	r30, r0
    19b2:	a8 81       	ld	r26, Y
    19b4:	b9 81       	ldd	r27, Y+1	; 0x01
    19b6:	0d c0       	rjmp	.+26     	; 0x19d2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	2e 81       	ldd	r18, Y+6	; 0x06
    19be:	3f 81       	ldd	r19, Y+7	; 0x07
    19c0:	b1 10       	cpse	r11, r1
    19c2:	0c c0       	rjmp	.+24     	; 0x19dc <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    19c4:	f9 01       	movw	r30, r18
    19c6:	e0 0f       	add	r30, r16
    19c8:	f1 1f       	adc	r31, r17
    19ca:	01 90       	ld	r0, Z+
    19cc:	f0 81       	ld	r31, Z
    19ce:	e0 2d       	mov	r30, r0
    19d0:	dc 01       	movw	r26, r24
    19d2:	a0 0f       	add	r26, r16
    19d4:	b1 1f       	adc	r27, r17
    19d6:	8d 91       	ld	r24, X+
    19d8:	9c 91       	ld	r25, X
    19da:	28 c0       	rjmp	.+80     	; 0x1a2c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    19dc:	fc 01       	movw	r30, r24
    19de:	e0 0f       	add	r30, r16
    19e0:	f1 1f       	adc	r31, r17
    19e2:	40 81       	ld	r20, Z
    19e4:	51 81       	ldd	r21, Z+1	; 0x01
    19e6:	e8 81       	ld	r30, Y
    19e8:	f9 81       	ldd	r31, Y+1	; 0x01
    19ea:	e0 0f       	add	r30, r16
    19ec:	f1 1f       	adc	r31, r17
    19ee:	80 81       	ld	r24, Z
    19f0:	91 81       	ldd	r25, Z+1	; 0x01
    19f2:	ee 85       	ldd	r30, Y+14	; 0x0e
    19f4:	ff 85       	ldd	r31, Y+15	; 0x0f
    19f6:	48 17       	cp	r20, r24
    19f8:	59 07       	cpc	r21, r25
    19fa:	10 f4       	brcc	.+4      	; 0x1a00 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    19fc:	cf 01       	movw	r24, r30
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    1a00:	8e 0f       	add	r24, r30
    1a02:	9f 1f       	adc	r25, r31
    1a04:	84 1b       	sub	r24, r20
    1a06:	95 0b       	sbc	r25, r21
    1a08:	d9 01       	movw	r26, r18
    1a0a:	a0 0f       	add	r26, r16
    1a0c:	b1 1f       	adc	r27, r17
    1a0e:	2d 91       	ld	r18, X+
    1a10:	3c 91       	ld	r19, X
    1a12:	aa 81       	ldd	r26, Y+2	; 0x02
    1a14:	bb 81       	ldd	r27, Y+3	; 0x03
    1a16:	a0 0f       	add	r26, r16
    1a18:	b1 1f       	adc	r27, r17
    1a1a:	4d 91       	ld	r20, X+
    1a1c:	5c 91       	ld	r21, X
    1a1e:	24 17       	cp	r18, r20
    1a20:	35 07       	cpc	r19, r21
    1a22:	20 f0       	brcs	.+8      	; 0x1a2c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1a24:	e4 0f       	add	r30, r20
    1a26:	f5 1f       	adc	r31, r21
    1a28:	e2 1b       	sub	r30, r18
    1a2a:	f3 0b       	sbc	r31, r19
    1a2c:	e8 1b       	sub	r30, r24
    1a2e:	f9 0b       	sbc	r31, r25
    1a30:	a9 f0       	breq	.+42     	; 0x1a5c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    1a32:	d7 01       	movw	r26, r14
    1a34:	2d 91       	ld	r18, X+
    1a36:	3c 91       	ld	r19, X
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	28 1b       	sub	r18, r24
    1a3e:	39 0b       	sbc	r19, r25
    1a40:	41 09       	sbc	r20, r1
    1a42:	51 09       	sbc	r21, r1
    1a44:	a8 ee       	ldi	r26, 0xE8	; 232
    1a46:	b3 e0       	ldi	r27, 0x03	; 3
    1a48:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__muluhisi3>
    1a4c:	9f 01       	movw	r18, r30
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <__divmodsi4>
    1a56:	37 fd       	sbrc	r19, 7
    1a58:	0a c0       	rjmp	.+20     	; 0x1a6e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	29 3e       	cpi	r18, 0xE9	; 233
    1a62:	b3 e0       	ldi	r27, 0x03	; 3
    1a64:	3b 07       	cpc	r19, r27
    1a66:	2c f0       	brlt	.+10     	; 0x1a72 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1a68:	28 ee       	ldi	r18, 0xE8	; 232
    1a6a:	33 e0       	ldi	r19, 0x03	; 3
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	f7 01       	movw	r30, r14
    1a74:	21 93       	st	Z+, r18
    1a76:	31 93       	st	Z+, r19
    1a78:	7f 01       	movw	r14, r30
    1a7a:	ff ef       	ldi	r31, 0xFF	; 255
    1a7c:	cf 1a       	sub	r12, r31
    1a7e:	df 0a       	sbc	r13, r31
    1a80:	0e 5f       	subi	r16, 0xFE	; 254
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	86 cf       	rjmp	.-244    	; 0x1992 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	e9 e0       	ldi	r30, 0x09	; 9
    1a8c:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__epilogue_restores__+0x12>

00001a90 <_ZN16PololuQTRSensors8readLineEPjhh>:
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	ee e4       	ldi	r30, 0x4E	; 78
    1a96:	fd e0       	ldi	r31, 0x0D	; 13
    1a98:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__prologue_saves__>
    1a9c:	ec 01       	movw	r28, r24
    1a9e:	8b 01       	movw	r16, r22
    1aa0:	82 2e       	mov	r8, r18
    1aa2:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    1aa6:	28 84       	ldd	r2, Y+8	; 0x08
    1aa8:	e8 01       	movw	r28, r16
    1aaa:	41 2c       	mov	r4, r1
    1aac:	51 2c       	mov	r5, r1
    1aae:	32 01       	movw	r6, r4
    1ab0:	00 e0       	ldi	r16, 0x00	; 0
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	c1 2c       	mov	r12, r1
    1ab6:	d1 2c       	mov	r13, r1
    1ab8:	76 01       	movw	r14, r12
    1aba:	31 2c       	mov	r3, r1
    1abc:	91 2c       	mov	r9, r1
    1abe:	58 ee       	ldi	r21, 0xE8	; 232
    1ac0:	a5 2e       	mov	r10, r21
    1ac2:	53 e0       	ldi	r21, 0x03	; 3
    1ac4:	b5 2e       	mov	r11, r21
    1ac6:	92 14       	cp	r9, r2
    1ac8:	21 f1       	breq	.+72     	; 0x1b12 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    1aca:	e9 91       	ld	r30, Y+
    1acc:	f9 91       	ld	r31, Y+
    1ace:	88 20       	and	r8, r8
    1ad0:	21 f0       	breq	.+8      	; 0x1ada <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    1ad2:	c5 01       	movw	r24, r10
    1ad4:	8e 1b       	sub	r24, r30
    1ad6:	9f 0b       	sbc	r25, r31
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e9 3c       	cpi	r30, 0xC9	; 201
    1adc:	f1 05       	cpc	r31, r1
    1ade:	24 f4       	brge	.+8      	; 0x1ae8 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    1ae0:	e3 33       	cpi	r30, 0x33	; 51
    1ae2:	f1 05       	cpc	r31, r1
    1ae4:	74 f0       	brlt	.+28     	; 0x1b02 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    1ae8:	33 24       	eor	r3, r3
    1aea:	33 94       	inc	r3
    1aec:	df 01       	movw	r26, r30
    1aee:	a3 01       	movw	r20, r6
    1af0:	92 01       	movw	r18, r4
    1af2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__mulshisi3>
    1af6:	c6 0e       	add	r12, r22
    1af8:	d7 1e       	adc	r13, r23
    1afa:	e8 1e       	adc	r14, r24
    1afc:	f9 1e       	adc	r15, r25
    1afe:	0e 0f       	add	r16, r30
    1b00:	1f 1f       	adc	r17, r31
    1b02:	93 94       	inc	r9
    1b04:	98 ee       	ldi	r25, 0xE8	; 232
    1b06:	49 0e       	add	r4, r25
    1b08:	93 e0       	ldi	r25, 0x03	; 3
    1b0a:	59 1e       	adc	r5, r25
    1b0c:	61 1c       	adc	r6, r1
    1b0e:	71 1c       	adc	r7, r1
    1b10:	da cf       	rjmp	.-76     	; 0x1ac6 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    1b12:	31 10       	cpse	r3, r1
    1b14:	1e c0       	rjmp	.+60     	; 0x1b52 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    1b16:	49 2d       	mov	r20, r9
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	41 50       	subi	r20, 0x01	; 1
    1b1c:	51 09       	sbc	r21, r1
    1b1e:	24 ef       	ldi	r18, 0xF4	; 244
    1b20:	31 e0       	ldi	r19, 0x01	; 1
    1b22:	42 9f       	mul	r20, r18
    1b24:	c0 01       	movw	r24, r0
    1b26:	43 9f       	mul	r20, r19
    1b28:	90 0d       	add	r25, r0
    1b2a:	52 9f       	mul	r21, r18
    1b2c:	90 0d       	add	r25, r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    1b34:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    1b38:	28 17       	cp	r18, r24
    1b3a:	39 07       	cpc	r19, r25
    1b3c:	b4 f0       	brlt	.+44     	; 0x1b6a <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    1b3e:	88 ee       	ldi	r24, 0xE8	; 232
    1b40:	93 e0       	ldi	r25, 0x03	; 3
    1b42:	48 9f       	mul	r20, r24
    1b44:	90 01       	movw	r18, r0
    1b46:	49 9f       	mul	r20, r25
    1b48:	30 0d       	add	r19, r0
    1b4a:	58 9f       	mul	r21, r24
    1b4c:	30 0d       	add	r19, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    1b52:	98 01       	movw	r18, r16
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	c7 01       	movw	r24, r14
    1b5a:	b6 01       	movw	r22, r12
    1b5c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
    1b60:	30 93 99 01 	sts	0x0199, r19	; 0x800199 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    1b64:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	c9 01       	movw	r24, r18
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	e2 e1       	ldi	r30, 0x12	; 18
    1b76:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__epilogue_restores__>

00001b7a <_ZN16PololuQTRSensorsD1Ev>:
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	ec 01       	movw	r28, r24
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	9b 81       	ldd	r25, Y+3	; 0x03
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <_ZN16PololuQTRSensorsD1Ev+0x12>
    1b88:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <free>
    1b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    1b94:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <free>
    1b98:	88 81       	ld	r24, Y
    1b9a:	99 81       	ldd	r25, Y+1	; 0x01
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    1ba0:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <free>
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	11 f0       	breq	.+4      	; 0x1bb0 <_ZN16PololuQTRSensorsD1Ev+0x36>
    1bac:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <free>
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <__udivmodhi4>:
    1bb6:	aa 1b       	sub	r26, r26
    1bb8:	bb 1b       	sub	r27, r27
    1bba:	51 e1       	ldi	r21, 0x11	; 17
    1bbc:	07 c0       	rjmp	.+14     	; 0x1bcc <__udivmodhi4_ep>

00001bbe <__udivmodhi4_loop>:
    1bbe:	aa 1f       	adc	r26, r26
    1bc0:	bb 1f       	adc	r27, r27
    1bc2:	a6 17       	cp	r26, r22
    1bc4:	b7 07       	cpc	r27, r23
    1bc6:	10 f0       	brcs	.+4      	; 0x1bcc <__udivmodhi4_ep>
    1bc8:	a6 1b       	sub	r26, r22
    1bca:	b7 0b       	sbc	r27, r23

00001bcc <__udivmodhi4_ep>:
    1bcc:	88 1f       	adc	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	5a 95       	dec	r21
    1bd2:	a9 f7       	brne	.-22     	; 0x1bbe <__udivmodhi4_loop>
    1bd4:	80 95       	com	r24
    1bd6:	90 95       	com	r25
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	08 95       	ret

00001bde <__divmodhi4>:
    1bde:	97 fb       	bst	r25, 7
    1be0:	07 2e       	mov	r0, r23
    1be2:	16 f4       	brtc	.+4      	; 0x1be8 <__divmodhi4+0xa>
    1be4:	00 94       	com	r0
    1be6:	07 d0       	rcall	.+14     	; 0x1bf6 <__divmodhi4_neg1>
    1be8:	77 fd       	sbrc	r23, 7
    1bea:	09 d0       	rcall	.+18     	; 0x1bfe <__divmodhi4_neg2>
    1bec:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__udivmodhi4>
    1bf0:	07 fc       	sbrc	r0, 7
    1bf2:	05 d0       	rcall	.+10     	; 0x1bfe <__divmodhi4_neg2>
    1bf4:	3e f4       	brtc	.+14     	; 0x1c04 <__divmodhi4_exit>

00001bf6 <__divmodhi4_neg1>:
    1bf6:	90 95       	com	r25
    1bf8:	81 95       	neg	r24
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	08 95       	ret

00001bfe <__divmodhi4_neg2>:
    1bfe:	70 95       	com	r23
    1c00:	61 95       	neg	r22
    1c02:	7f 4f       	sbci	r23, 0xFF	; 255

00001c04 <__divmodhi4_exit>:
    1c04:	08 95       	ret

00001c06 <__udivmodsi4>:
    1c06:	a1 e2       	ldi	r26, 0x21	; 33
    1c08:	1a 2e       	mov	r1, r26
    1c0a:	aa 1b       	sub	r26, r26
    1c0c:	bb 1b       	sub	r27, r27
    1c0e:	fd 01       	movw	r30, r26
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <__udivmodsi4_ep>

00001c12 <__udivmodsi4_loop>:
    1c12:	aa 1f       	adc	r26, r26
    1c14:	bb 1f       	adc	r27, r27
    1c16:	ee 1f       	adc	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	a2 17       	cp	r26, r18
    1c1c:	b3 07       	cpc	r27, r19
    1c1e:	e4 07       	cpc	r30, r20
    1c20:	f5 07       	cpc	r31, r21
    1c22:	20 f0       	brcs	.+8      	; 0x1c2c <__udivmodsi4_ep>
    1c24:	a2 1b       	sub	r26, r18
    1c26:	b3 0b       	sbc	r27, r19
    1c28:	e4 0b       	sbc	r30, r20
    1c2a:	f5 0b       	sbc	r31, r21

00001c2c <__udivmodsi4_ep>:
    1c2c:	66 1f       	adc	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	88 1f       	adc	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	1a 94       	dec	r1
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <__udivmodsi4_loop>
    1c38:	60 95       	com	r22
    1c3a:	70 95       	com	r23
    1c3c:	80 95       	com	r24
    1c3e:	90 95       	com	r25
    1c40:	9b 01       	movw	r18, r22
    1c42:	ac 01       	movw	r20, r24
    1c44:	bd 01       	movw	r22, r26
    1c46:	cf 01       	movw	r24, r30
    1c48:	08 95       	ret

00001c4a <__divmodsi4>:
    1c4a:	05 2e       	mov	r0, r21
    1c4c:	97 fb       	bst	r25, 7
    1c4e:	1e f4       	brtc	.+6      	; 0x1c56 <__divmodsi4+0xc>
    1c50:	00 94       	com	r0
    1c52:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <__negsi2>
    1c56:	57 fd       	sbrc	r21, 7
    1c58:	07 d0       	rcall	.+14     	; 0x1c68 <__divmodsi4_neg2>
    1c5a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__udivmodsi4>
    1c5e:	07 fc       	sbrc	r0, 7
    1c60:	03 d0       	rcall	.+6      	; 0x1c68 <__divmodsi4_neg2>
    1c62:	4e f4       	brtc	.+18     	; 0x1c76 <__divmodsi4_exit>
    1c64:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__negsi2>

00001c68 <__divmodsi4_neg2>:
    1c68:	50 95       	com	r21
    1c6a:	40 95       	com	r20
    1c6c:	30 95       	com	r19
    1c6e:	21 95       	neg	r18
    1c70:	3f 4f       	sbci	r19, 0xFF	; 255
    1c72:	4f 4f       	sbci	r20, 0xFF	; 255
    1c74:	5f 4f       	sbci	r21, 0xFF	; 255

00001c76 <__divmodsi4_exit>:
    1c76:	08 95       	ret

00001c78 <__negsi2>:
    1c78:	90 95       	com	r25
    1c7a:	80 95       	com	r24
    1c7c:	70 95       	com	r23
    1c7e:	61 95       	neg	r22
    1c80:	7f 4f       	sbci	r23, 0xFF	; 255
    1c82:	8f 4f       	sbci	r24, 0xFF	; 255
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	08 95       	ret

00001c88 <__tablejump2__>:
    1c88:	ee 0f       	add	r30, r30
    1c8a:	ff 1f       	adc	r31, r31
    1c8c:	05 90       	lpm	r0, Z+
    1c8e:	f4 91       	lpm	r31, Z
    1c90:	e0 2d       	mov	r30, r0
    1c92:	09 94       	ijmp

00001c94 <__umulhisi3>:
    1c94:	a2 9f       	mul	r26, r18
    1c96:	b0 01       	movw	r22, r0
    1c98:	b3 9f       	mul	r27, r19
    1c9a:	c0 01       	movw	r24, r0
    1c9c:	a3 9f       	mul	r26, r19
    1c9e:	70 0d       	add	r23, r0
    1ca0:	81 1d       	adc	r24, r1
    1ca2:	11 24       	eor	r1, r1
    1ca4:	91 1d       	adc	r25, r1
    1ca6:	b2 9f       	mul	r27, r18
    1ca8:	70 0d       	add	r23, r0
    1caa:	81 1d       	adc	r24, r1
    1cac:	11 24       	eor	r1, r1
    1cae:	91 1d       	adc	r25, r1
    1cb0:	08 95       	ret

00001cb2 <__muluhisi3>:
    1cb2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__umulhisi3>
    1cb6:	a5 9f       	mul	r26, r21
    1cb8:	90 0d       	add	r25, r0
    1cba:	b4 9f       	mul	r27, r20
    1cbc:	90 0d       	add	r25, r0
    1cbe:	a4 9f       	mul	r26, r20
    1cc0:	80 0d       	add	r24, r0
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	11 24       	eor	r1, r1
    1cc6:	08 95       	ret

00001cc8 <__mulshisi3>:
    1cc8:	b7 ff       	sbrs	r27, 7
    1cca:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__muluhisi3>

00001cce <__mulohisi3>:
    1cce:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__muluhisi3>
    1cd2:	82 1b       	sub	r24, r18
    1cd4:	93 0b       	sbc	r25, r19
    1cd6:	08 95       	ret

00001cd8 <__prologue_saves__>:
    1cd8:	2f 92       	push	r2
    1cda:	3f 92       	push	r3
    1cdc:	4f 92       	push	r4
    1cde:	5f 92       	push	r5
    1ce0:	6f 92       	push	r6
    1ce2:	7f 92       	push	r7
    1ce4:	8f 92       	push	r8
    1ce6:	9f 92       	push	r9
    1ce8:	af 92       	push	r10
    1cea:	bf 92       	push	r11
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	ca 1b       	sub	r28, r26
    1d02:	db 0b       	sbc	r29, r27
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	09 94       	ijmp

00001d10 <__epilogue_restores__>:
    1d10:	2a 88       	ldd	r2, Y+18	; 0x12
    1d12:	39 88       	ldd	r3, Y+17	; 0x11
    1d14:	48 88       	ldd	r4, Y+16	; 0x10
    1d16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d22:	b9 84       	ldd	r11, Y+9	; 0x09
    1d24:	c8 84       	ldd	r12, Y+8	; 0x08
    1d26:	df 80       	ldd	r13, Y+7	; 0x07
    1d28:	ee 80       	ldd	r14, Y+6	; 0x06
    1d2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1d2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1d2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1d30:	aa 81       	ldd	r26, Y+2	; 0x02
    1d32:	b9 81       	ldd	r27, Y+1	; 0x01
    1d34:	ce 0f       	add	r28, r30
    1d36:	d1 1d       	adc	r29, r1
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	ed 01       	movw	r28, r26
    1d44:	08 95       	ret

00001d46 <malloc>:
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	91 05       	cpc	r25, r1
    1d52:	10 f4       	brcc	.+4      	; 0x1d58 <malloc+0x12>
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	e0 91 af 01 	lds	r30, 0x01AF	; 0x8001af <__flp>
    1d5c:	f0 91 b0 01 	lds	r31, 0x01B0	; 0x8001b0 <__flp+0x1>
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	30 97       	sbiw	r30, 0x00	; 0
    1d6a:	19 f1       	breq	.+70     	; 0x1db2 <malloc+0x6c>
    1d6c:	40 81       	ld	r20, Z
    1d6e:	51 81       	ldd	r21, Z+1	; 0x01
    1d70:	02 81       	ldd	r16, Z+2	; 0x02
    1d72:	13 81       	ldd	r17, Z+3	; 0x03
    1d74:	48 17       	cp	r20, r24
    1d76:	59 07       	cpc	r21, r25
    1d78:	c8 f0       	brcs	.+50     	; 0x1dac <malloc+0x66>
    1d7a:	84 17       	cp	r24, r20
    1d7c:	95 07       	cpc	r25, r21
    1d7e:	69 f4       	brne	.+26     	; 0x1d9a <malloc+0x54>
    1d80:	10 97       	sbiw	r26, 0x00	; 0
    1d82:	31 f0       	breq	.+12     	; 0x1d90 <malloc+0x4a>
    1d84:	12 96       	adiw	r26, 0x02	; 2
    1d86:	0c 93       	st	X, r16
    1d88:	12 97       	sbiw	r26, 0x02	; 2
    1d8a:	13 96       	adiw	r26, 0x03	; 3
    1d8c:	1c 93       	st	X, r17
    1d8e:	27 c0       	rjmp	.+78     	; 0x1dde <malloc+0x98>
    1d90:	00 93 af 01 	sts	0x01AF, r16	; 0x8001af <__flp>
    1d94:	10 93 b0 01 	sts	0x01B0, r17	; 0x8001b0 <__flp+0x1>
    1d98:	22 c0       	rjmp	.+68     	; 0x1dde <malloc+0x98>
    1d9a:	21 15       	cp	r18, r1
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	19 f0       	breq	.+6      	; 0x1da6 <malloc+0x60>
    1da0:	42 17       	cp	r20, r18
    1da2:	53 07       	cpc	r21, r19
    1da4:	18 f4       	brcc	.+6      	; 0x1dac <malloc+0x66>
    1da6:	9a 01       	movw	r18, r20
    1da8:	bd 01       	movw	r22, r26
    1daa:	ef 01       	movw	r28, r30
    1dac:	df 01       	movw	r26, r30
    1dae:	f8 01       	movw	r30, r16
    1db0:	db cf       	rjmp	.-74     	; 0x1d68 <malloc+0x22>
    1db2:	21 15       	cp	r18, r1
    1db4:	31 05       	cpc	r19, r1
    1db6:	f9 f0       	breq	.+62     	; 0x1df6 <malloc+0xb0>
    1db8:	28 1b       	sub	r18, r24
    1dba:	39 0b       	sbc	r19, r25
    1dbc:	24 30       	cpi	r18, 0x04	; 4
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	80 f4       	brcc	.+32     	; 0x1de2 <malloc+0x9c>
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	61 15       	cp	r22, r1
    1dc8:	71 05       	cpc	r23, r1
    1dca:	21 f0       	breq	.+8      	; 0x1dd4 <malloc+0x8e>
    1dcc:	fb 01       	movw	r30, r22
    1dce:	93 83       	std	Z+3, r25	; 0x03
    1dd0:	82 83       	std	Z+2, r24	; 0x02
    1dd2:	04 c0       	rjmp	.+8      	; 0x1ddc <malloc+0x96>
    1dd4:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <__flp+0x1>
    1dd8:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <__flp>
    1ddc:	fe 01       	movw	r30, r28
    1dde:	32 96       	adiw	r30, 0x02	; 2
    1de0:	44 c0       	rjmp	.+136    	; 0x1e6a <malloc+0x124>
    1de2:	fe 01       	movw	r30, r28
    1de4:	e2 0f       	add	r30, r18
    1de6:	f3 1f       	adc	r31, r19
    1de8:	81 93       	st	Z+, r24
    1dea:	91 93       	st	Z+, r25
    1dec:	22 50       	subi	r18, 0x02	; 2
    1dee:	31 09       	sbc	r19, r1
    1df0:	39 83       	std	Y+1, r19	; 0x01
    1df2:	28 83       	st	Y, r18
    1df4:	3a c0       	rjmp	.+116    	; 0x1e6a <malloc+0x124>
    1df6:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <__brkval>
    1dfa:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <__brkval+0x1>
    1dfe:	23 2b       	or	r18, r19
    1e00:	41 f4       	brne	.+16     	; 0x1e12 <malloc+0xcc>
    1e02:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    1e06:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    1e0a:	30 93 ae 01 	sts	0x01AE, r19	; 0x8001ae <__brkval+0x1>
    1e0e:	20 93 ad 01 	sts	0x01AD, r18	; 0x8001ad <__brkval>
    1e12:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    1e16:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    1e1a:	21 15       	cp	r18, r1
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	41 f4       	brne	.+16     	; 0x1e30 <malloc+0xea>
    1e20:	2d b7       	in	r18, 0x3d	; 61
    1e22:	3e b7       	in	r19, 0x3e	; 62
    1e24:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    1e28:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    1e2c:	24 1b       	sub	r18, r20
    1e2e:	35 0b       	sbc	r19, r21
    1e30:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <__brkval>
    1e34:	f0 91 ae 01 	lds	r31, 0x01AE	; 0x8001ae <__brkval+0x1>
    1e38:	e2 17       	cp	r30, r18
    1e3a:	f3 07       	cpc	r31, r19
    1e3c:	a0 f4       	brcc	.+40     	; 0x1e66 <malloc+0x120>
    1e3e:	2e 1b       	sub	r18, r30
    1e40:	3f 0b       	sbc	r19, r31
    1e42:	28 17       	cp	r18, r24
    1e44:	39 07       	cpc	r19, r25
    1e46:	78 f0       	brcs	.+30     	; 0x1e66 <malloc+0x120>
    1e48:	ac 01       	movw	r20, r24
    1e4a:	4e 5f       	subi	r20, 0xFE	; 254
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	24 17       	cp	r18, r20
    1e50:	35 07       	cpc	r19, r21
    1e52:	48 f0       	brcs	.+18     	; 0x1e66 <malloc+0x120>
    1e54:	4e 0f       	add	r20, r30
    1e56:	5f 1f       	adc	r21, r31
    1e58:	50 93 ae 01 	sts	0x01AE, r21	; 0x8001ae <__brkval+0x1>
    1e5c:	40 93 ad 01 	sts	0x01AD, r20	; 0x8001ad <__brkval>
    1e60:	81 93       	st	Z+, r24
    1e62:	91 93       	st	Z+, r25
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <malloc+0x124>
    1e66:	e0 e0       	ldi	r30, 0x00	; 0
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	cf 01       	movw	r24, r30
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <free>:
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <free+0xa>
    1e7e:	81 c0       	rjmp	.+258    	; 0x1f82 <free+0x10c>
    1e80:	fc 01       	movw	r30, r24
    1e82:	32 97       	sbiw	r30, 0x02	; 2
    1e84:	13 82       	std	Z+3, r1	; 0x03
    1e86:	12 82       	std	Z+2, r1	; 0x02
    1e88:	a0 91 af 01 	lds	r26, 0x01AF	; 0x8001af <__flp>
    1e8c:	b0 91 b0 01 	lds	r27, 0x01B0	; 0x8001b0 <__flp+0x1>
    1e90:	10 97       	sbiw	r26, 0x00	; 0
    1e92:	81 f4       	brne	.+32     	; 0x1eb4 <free+0x3e>
    1e94:	20 81       	ld	r18, Z
    1e96:	31 81       	ldd	r19, Z+1	; 0x01
    1e98:	82 0f       	add	r24, r18
    1e9a:	93 1f       	adc	r25, r19
    1e9c:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <__brkval>
    1ea0:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <__brkval+0x1>
    1ea4:	28 17       	cp	r18, r24
    1ea6:	39 07       	cpc	r19, r25
    1ea8:	51 f5       	brne	.+84     	; 0x1efe <free+0x88>
    1eaa:	f0 93 ae 01 	sts	0x01AE, r31	; 0x8001ae <__brkval+0x1>
    1eae:	e0 93 ad 01 	sts	0x01AD, r30	; 0x8001ad <__brkval>
    1eb2:	67 c0       	rjmp	.+206    	; 0x1f82 <free+0x10c>
    1eb4:	ed 01       	movw	r28, r26
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	ce 17       	cp	r28, r30
    1ebc:	df 07       	cpc	r29, r31
    1ebe:	40 f4       	brcc	.+16     	; 0x1ed0 <free+0x5a>
    1ec0:	4a 81       	ldd	r20, Y+2	; 0x02
    1ec2:	5b 81       	ldd	r21, Y+3	; 0x03
    1ec4:	9e 01       	movw	r18, r28
    1ec6:	41 15       	cp	r20, r1
    1ec8:	51 05       	cpc	r21, r1
    1eca:	f1 f0       	breq	.+60     	; 0x1f08 <free+0x92>
    1ecc:	ea 01       	movw	r28, r20
    1ece:	f5 cf       	rjmp	.-22     	; 0x1eba <free+0x44>
    1ed0:	d3 83       	std	Z+3, r29	; 0x03
    1ed2:	c2 83       	std	Z+2, r28	; 0x02
    1ed4:	40 81       	ld	r20, Z
    1ed6:	51 81       	ldd	r21, Z+1	; 0x01
    1ed8:	84 0f       	add	r24, r20
    1eda:	95 1f       	adc	r25, r21
    1edc:	c8 17       	cp	r28, r24
    1ede:	d9 07       	cpc	r29, r25
    1ee0:	59 f4       	brne	.+22     	; 0x1ef8 <free+0x82>
    1ee2:	88 81       	ld	r24, Y
    1ee4:	99 81       	ldd	r25, Y+1	; 0x01
    1ee6:	84 0f       	add	r24, r20
    1ee8:	95 1f       	adc	r25, r21
    1eea:	02 96       	adiw	r24, 0x02	; 2
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	80 83       	st	Z, r24
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	93 83       	std	Z+3, r25	; 0x03
    1ef6:	82 83       	std	Z+2, r24	; 0x02
    1ef8:	21 15       	cp	r18, r1
    1efa:	31 05       	cpc	r19, r1
    1efc:	29 f4       	brne	.+10     	; 0x1f08 <free+0x92>
    1efe:	f0 93 b0 01 	sts	0x01B0, r31	; 0x8001b0 <__flp+0x1>
    1f02:	e0 93 af 01 	sts	0x01AF, r30	; 0x8001af <__flp>
    1f06:	3d c0       	rjmp	.+122    	; 0x1f82 <free+0x10c>
    1f08:	e9 01       	movw	r28, r18
    1f0a:	fb 83       	std	Y+3, r31	; 0x03
    1f0c:	ea 83       	std	Y+2, r30	; 0x02
    1f0e:	49 91       	ld	r20, Y+
    1f10:	59 91       	ld	r21, Y+
    1f12:	c4 0f       	add	r28, r20
    1f14:	d5 1f       	adc	r29, r21
    1f16:	ec 17       	cp	r30, r28
    1f18:	fd 07       	cpc	r31, r29
    1f1a:	61 f4       	brne	.+24     	; 0x1f34 <free+0xbe>
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	84 0f       	add	r24, r20
    1f22:	95 1f       	adc	r25, r21
    1f24:	02 96       	adiw	r24, 0x02	; 2
    1f26:	e9 01       	movw	r28, r18
    1f28:	99 83       	std	Y+1, r25	; 0x01
    1f2a:	88 83       	st	Y, r24
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	9b 83       	std	Y+3, r25	; 0x03
    1f32:	8a 83       	std	Y+2, r24	; 0x02
    1f34:	e0 e0       	ldi	r30, 0x00	; 0
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	12 96       	adiw	r26, 0x02	; 2
    1f3a:	8d 91       	ld	r24, X+
    1f3c:	9c 91       	ld	r25, X
    1f3e:	13 97       	sbiw	r26, 0x03	; 3
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	19 f0       	breq	.+6      	; 0x1f4a <free+0xd4>
    1f44:	fd 01       	movw	r30, r26
    1f46:	dc 01       	movw	r26, r24
    1f48:	f7 cf       	rjmp	.-18     	; 0x1f38 <free+0xc2>
    1f4a:	8d 91       	ld	r24, X+
    1f4c:	9c 91       	ld	r25, X
    1f4e:	11 97       	sbiw	r26, 0x01	; 1
    1f50:	9d 01       	movw	r18, r26
    1f52:	2e 5f       	subi	r18, 0xFE	; 254
    1f54:	3f 4f       	sbci	r19, 0xFF	; 255
    1f56:	82 0f       	add	r24, r18
    1f58:	93 1f       	adc	r25, r19
    1f5a:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <__brkval>
    1f5e:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <__brkval+0x1>
    1f62:	28 17       	cp	r18, r24
    1f64:	39 07       	cpc	r19, r25
    1f66:	69 f4       	brne	.+26     	; 0x1f82 <free+0x10c>
    1f68:	30 97       	sbiw	r30, 0x00	; 0
    1f6a:	29 f4       	brne	.+10     	; 0x1f76 <free+0x100>
    1f6c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <__flp+0x1>
    1f70:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <__flp>
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <free+0x104>
    1f76:	13 82       	std	Z+3, r1	; 0x03
    1f78:	12 82       	std	Z+2, r1	; 0x02
    1f7a:	b0 93 ae 01 	sts	0x01AE, r27	; 0x8001ae <__brkval+0x1>
    1f7e:	a0 93 ad 01 	sts	0x01AD, r26	; 0x8001ad <__brkval>
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	08 95       	ret

00001f88 <__do_global_dtors>:
    1f88:	10 e0       	ldi	r17, 0x00	; 0
    1f8a:	c4 e3       	ldi	r28, 0x34	; 52
    1f8c:	d0 e0       	ldi	r29, 0x00	; 0
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <__do_global_dtors+0x10>
    1f90:	fe 01       	movw	r30, r28
    1f92:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__tablejump2__>
    1f96:	21 96       	adiw	r28, 0x01	; 1
    1f98:	c5 33       	cpi	r28, 0x35	; 53
    1f9a:	d1 07       	cpc	r29, r17
    1f9c:	c9 f7       	brne	.-14     	; 0x1f90 <__do_global_dtors+0x8>
    1f9e:	f8 94       	cli

00001fa0 <__stop_program>:
    1fa0:	ff cf       	rjmp	.-2      	; 0x1fa0 <__stop_program>
