
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00002534  000025c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080013a  0080013a  00002602  2**0
                  ALLOC
  3 .stab         000059c4  00000000  00000000  00002604  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000084be  00000000  00000000  00007fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00010486  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000104c8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000130  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001e19  00000000  00000000  00010638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d56  00000000  00000000  00012451  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000013ea  00000000  00000000  000131a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000320  00000000  00000000  00014594  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000715  00000000  00000000  000148b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000a80  00000000  00000000  00014fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  00015a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__dtors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_9>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0e 03       	fmul	r16, r22
      6a:	12 03       	mulsu	r17, r18
      6c:	70 03       	mulsu	r23, r16
      6e:	e8 02       	muls	r30, r24
      70:	f6 02       	muls	r31, r22
      72:	04 03       	mulsu	r16, r20
      74:	e8 02       	muls	r30, r24
      76:	e8 02       	muls	r30, r24
      78:	e8 02       	muls	r30, r24

0000007a <__ctors_end>:
      7a:	88 0b       	sbc	r24, r24

0000007c <__dtors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e4 e3       	ldi	r30, 0x34	; 52
      90:	f5 e2       	ldi	r31, 0x25	; 37
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 33       	cpi	r26, 0x3A	; 58
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	aa e3       	ldi	r26, 0x3A	; 58
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ab 3a       	cpi	r26, 0xAB	; 171
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 be 00 	call	0x17c	; 0x17c <main>
      b2:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__do_global_dtors>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <batteryPercentage>:
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
      ba:	0e 94 38 08 	call	0x1070	; 0x1070 <read_battery_millivolts_3pi>

int batteryPercentage()//Should this function be in main or in display.c or something else?
{
	
	int milliVolts = read_battery_millivolts();
	int batteryPercent = milliVolts/50;
      be:	62 e3       	ldi	r22, 0x32	; 50
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	0e 94 a8 10 	call	0x2150	; 0x2150 <__divmodhi4>
      c6:	cb 01       	movw	r24, r22
	return batteryPercent;
}
      c8:	08 95       	ret

000000ca <updateDisplay>:

void updateDisplay(int orderPercent, int batteryPercent, robotStates currentState)
{
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	7c 01       	movw	r14, r24
      d6:	8b 01       	movw	r16, r22
      d8:	c4 2f       	mov	r28, r20
	clear();
      da:	0e 94 41 09 	call	0x1282	; 0x1282 <clear>
	lcd_goto_xy(0,0);
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	0e 94 c8 09 	call	0x1390	; 0x1390 <lcd_goto_xy>
	print("Task:");
      e6:	83 e2       	ldi	r24, 0x23	; 35
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
	print_long(orderPercent);
      ee:	b7 01       	movw	r22, r14
      f0:	ff 0c       	add	r15, r15
      f2:	88 0b       	sbc	r24, r24
      f4:	99 0b       	sbc	r25, r25
      f6:	0e 94 a5 09 	call	0x134a	; 0x134a <print_long>
	print("%");
      fa:	89 e2       	ldi	r24, 0x29	; 41
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
	
	lcd_goto_xy(0,1);
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 c8 09 	call	0x1390	; 0x1390 <lcd_goto_xy>
	print("Bat:");
     10a:	8b e2       	ldi	r24, 0x2B	; 43
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
	print_long(batteryPercent);
     112:	b8 01       	movw	r22, r16
     114:	11 0f       	add	r17, r17
     116:	88 0b       	sbc	r24, r24
     118:	99 0b       	sbc	r25, r25
     11a:	0e 94 a5 09 	call	0x134a	; 0x134a <print_long>
	print("%");
     11e:	89 e2       	ldi	r24, 0x29	; 41
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
	switch(currentState)
     126:	c2 30       	cpi	r28, 0x02	; 2
     128:	a9 f0       	breq	.+42     	; 0x154 <updateDisplay+0x8a>
     12a:	28 f4       	brcc	.+10     	; 0x136 <updateDisplay+0x6c>
     12c:	cc 23       	and	r28, r28
     12e:	41 f0       	breq	.+16     	; 0x140 <updateDisplay+0x76>
     130:	c1 30       	cpi	r28, 0x01	; 1
     132:	59 f0       	breq	.+22     	; 0x14a <updateDisplay+0x80>
     134:	1d c0       	rjmp	.+58     	; 0x170 <updateDisplay+0xa6>
     136:	c3 30       	cpi	r28, 0x03	; 3
     138:	91 f0       	breq	.+36     	; 0x15e <updateDisplay+0x94>
     13a:	c4 30       	cpi	r28, 0x04	; 4
     13c:	a9 f0       	breq	.+42     	; 0x168 <updateDisplay+0x9e>
     13e:	18 c0       	rjmp	.+48     	; 0x170 <updateDisplay+0xa6>
	{
		case manual:
		print("M");//M for Manual
     140:	80 e3       	ldi	r24, 0x30	; 48
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
		break;
     148:	13 c0       	rjmp	.+38     	; 0x170 <updateDisplay+0xa6>
		case mazeSolver:
		print("P");//P for Parcours
     14a:	82 e3       	ldi	r24, 0x32	; 50
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
		break;
     152:	0e c0       	rjmp	.+28     	; 0x170 <updateDisplay+0xa6>
		case logicsBot:
		print("O");//O for Order
     154:	84 e3       	ldi	r24, 0x34	; 52
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
		break;
     15c:	09 c0       	rjmp	.+18     	; 0x170 <updateDisplay+0xa6>
		case chargeMode:
		print("C");//C for Charge
     15e:	86 e3       	ldi	r24, 0x36	; 54
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
		break;
     166:	04 c0       	rjmp	.+8      	; 0x170 <updateDisplay+0xa6>
		case homingMode:
		print("H");//H for Homing
     168:	88 e3       	ldi	r24, 0x38	; 56
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
		break;
	}
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	08 95       	ret

0000017c <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


int main()
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	64 97       	sbiw	r28, 0x14	; 20
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
	clear();
     190:	0e 94 41 09 	call	0x1282	; 0x1282 <clear>
	pololu_3pi_init(2000);
     194:	80 ed       	ldi	r24, 0xD0	; 208
     196:	97 e0       	ldi	r25, 0x07	; 7
     198:	0e 94 84 0b 	call	0x1708	; 0x1708 <pololu_3pi_init>
	initialize();
     19c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <initialize>
	
	
	
	char parecour[20];
	parcour(parecour);
     1a0:	ce 01       	movw	r24, r28
     1a2:	01 96       	adiw	r24, 0x01	; 1
     1a4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <parcour>
	print(parecour);
     1a8:	ce 01       	movw	r24, r28
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	0e 94 50 09 	call	0x12a0	; 0x12a0 <print>
	
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	64 96       	adiw	r28, 0x14	; 20
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <initialize>:
#include <avr/pgmspace.h>

	Junctions junction;	

void initialize()
{
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
	unsigned int counter; // used as a simple timer
	
	pololu_3pi_init(2000);
     1ca:	80 ed       	ldi	r24, 0xD0	; 208
     1cc:	97 e0       	ldi	r25, 0x07	; 7
     1ce:	0e 94 84 0b 	call	0x1708	; 0x1708 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B)){}	
     1d2:	80 e1       	ldi	r24, 0x10	; 16
     1d4:	0e 94 c1 0a 	call	0x1582	; 0x1582 <button_is_pressed>
     1d8:	88 23       	and	r24, r24
     1da:	d9 f3       	breq	.-10     	; 0x1d2 <initialize+0xc>
	wait_for_button_release(BUTTON_B);
     1dc:	80 e1       	ldi	r24, 0x10	; 16
     1de:	0e 94 ad 0a 	call	0x155a	; 0x155a <wait_for_button_release>
	delay_ms(1000);
     1e2:	88 ee       	ldi	r24, 0xE8	; 232
     1e4:	93 e0       	ldi	r25, 0x03	; 3
     1e6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>

	for(counter=0;counter<80;counter++)
     1ea:	c0 e0       	ldi	r28, 0x00	; 0
     1ec:	d0 e0       	ldi	r29, 0x00	; 0
     1ee:	19 c0       	rjmp	.+50     	; 0x222 <initialize+0x5c>
	{
		if(counter < 20 || counter >= 60)
     1f0:	ce 01       	movw	r24, r28
     1f2:	44 97       	sbiw	r24, 0x14	; 20
     1f4:	88 97       	sbiw	r24, 0x28	; 40
     1f6:	38 f0       	brcs	.+14     	; 0x206 <initialize+0x40>
		set_motors(40,-40);
     1f8:	68 ed       	ldi	r22, 0xD8	; 216
     1fa:	7f ef       	ldi	r23, 0xFF	; 255
     1fc:	88 e2       	ldi	r24, 0x28	; 40
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
     204:	06 c0       	rjmp	.+12     	; 0x212 <initialize+0x4c>
		else
		set_motors(-40,40);
     206:	68 e2       	ldi	r22, 0x28	; 40
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	88 ed       	ldi	r24, 0xD8	; 216
     20c:	9f ef       	ldi	r25, 0xFF	; 255
     20e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 48 0b 	call	0x1690	; 0x1690 <calibrate_line_sensors>
		
		delay_ms(20);
     218:	84 e1       	ldi	r24, 0x14	; 20
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
	
	while(!button_is_pressed(BUTTON_B)){}	
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     220:	21 96       	adiw	r28, 0x01	; 1
     222:	c0 35       	cpi	r28, 0x50	; 80
     224:	d1 05       	cpc	r29, r1
     226:	20 f3       	brcs	.-56     	; 0x1f0 <initialize+0x2a>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		
		delay_ms(20);
	}
	set_motors(0,0);
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
	
	while(!button_is_pressed(BUTTON_B)){}
     234:	80 e1       	ldi	r24, 0x10	; 16
     236:	0e 94 c1 0a 	call	0x1582	; 0x1582 <button_is_pressed>
     23a:	88 23       	and	r24, r24
     23c:	d9 f3       	breq	.-10     	; 0x234 <initialize+0x6e>
	wait_for_button_release(BUTTON_B);
     23e:	80 e1       	ldi	r24, 0x10	; 16
     240:	0e 94 ad 0a 	call	0x155a	; 0x155a <wait_for_button_release>
	
	clear();
     244:	0e 94 41 09 	call	0x1282	; 0x1282 <clear>
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <inch>:

void inch(){
	set_motors(50,50);
     24e:	62 e3       	ldi	r22, 0x32	; 50
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	82 e3       	ldi	r24, 0x32	; 50
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     25a:	88 ec       	ldi	r24, 0xC8	; 200
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
	delay(200);
	set_motors(0,0);
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
     26e:	08 95       	ret

00000270 <motorControl>:
		}	
	}
}


void motorControl(char x){													// function that controlls the motor movement and the turns
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	c8 2f       	mov	r28, r24
	read_line(sensors,IR_EMITTERS_ON);
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	8c e9       	ldi	r24, 0x9C	; 156
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
	
	if(x == 'N')															//Emergency Brake
     280:	ce 34       	cpi	r28, 0x4E	; 78
     282:	39 f4       	brne	.+14     	; 0x292 <motorControl+0x22>
		set_motors(0,0);	
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
     290:	c3 c0       	rjmp	.+390    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	
	
	else if(x == 'L'){														//Turn Left
     292:	cc 34       	cpi	r28, 0x4C	; 76
     294:	09 f5       	brne	.+66     	; 0x2d8 <motorControl+0x68>
		set_motors(-50,50);
     296:	62 e3       	ldi	r22, 0x32	; 50
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	8e ec       	ldi	r24, 0xCE	; 206
     29c:	9f ef       	ldi	r25, 0xFF	; 255
     29e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		
		while (sensors[2] >=500)
     2a2:	05 c0       	rjmp	.+10     	; 0x2ae <motorControl+0x3e>
			read_line(sensors,IR_EMITTERS_ON);
     2a4:	61 e0       	ldi	r22, 0x01	; 1
     2a6:	8c e9       	ldi	r24, 0x9C	; 156
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
	
	
	else if(x == 'L'){														//Turn Left
		set_motors(-50,50);
		
		while (sensors[2] >=500)
     2ae:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     2b2:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     2b6:	84 3f       	cpi	r24, 0xF4	; 244
     2b8:	91 40       	sbci	r25, 0x01	; 1
     2ba:	a0 f7       	brcc	.-24     	; 0x2a4 <motorControl+0x34>
     2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <motorControl+0x58>
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
			read_line(sensors,IR_EMITTERS_ON);
     2be:	61 e0       	ldi	r22, 0x01	; 1
     2c0:	8c e9       	ldi	r24, 0x9C	; 156
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
	else if(x == 'L'){														//Turn Left
		set_motors(-50,50);
		
		while (sensors[2] >=500)
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
     2c8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     2cc:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     2d0:	85 3f       	cpi	r24, 0xF5	; 245
     2d2:	91 40       	sbci	r25, 0x01	; 1
     2d4:	a0 f3       	brcs	.-24     	; 0x2be <motorControl+0x4e>
     2d6:	a0 c0       	rjmp	.+320    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			read_line(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'R'){														//Turn Right
     2d8:	c2 35       	cpi	r28, 0x52	; 82
     2da:	09 f5       	brne	.+66     	; 0x31e <motorControl+0xae>
		set_motors(50,-50);
     2dc:	6e ec       	ldi	r22, 0xCE	; 206
     2de:	7f ef       	ldi	r23, 0xFF	; 255
     2e0:	82 e3       	ldi	r24, 0x32	; 50
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		
		while (sensors[2] >=500)
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <motorControl+0x84>
			read_line(sensors,IR_EMITTERS_ON);
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	8c e9       	ldi	r24, 0x9C	; 156
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
	
	
	else if(x == 'R'){														//Turn Right
		set_motors(50,-50);
		
		while (sensors[2] >=500)
     2f4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     2f8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     2fc:	84 3f       	cpi	r24, 0xF4	; 244
     2fe:	91 40       	sbci	r25, 0x01	; 1
     300:	a0 f7       	brcc	.-24     	; 0x2ea <motorControl+0x7a>
     302:	05 c0       	rjmp	.+10     	; 0x30e <motorControl+0x9e>
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
			read_line(sensors,IR_EMITTERS_ON);
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	8c e9       	ldi	r24, 0x9C	; 156
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
	else if(x == 'R'){														//Turn Right
		set_motors(50,-50);
		
		while (sensors[2] >=500)
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
     30e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     312:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     316:	85 3f       	cpi	r24, 0xF5	; 245
     318:	91 40       	sbci	r25, 0x01	; 1
     31a:	a0 f3       	brcs	.-24     	; 0x304 <motorControl+0x94>
     31c:	7d c0       	rjmp	.+250    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			read_line(sensors,IR_EMITTERS_ON);
	}
		
			
	else if(x == 'S'){														//drive straight and adjusts the robot so it follows the line
     31e:	c3 35       	cpi	r28, 0x53	; 83
     320:	89 f5       	brne	.+98     	; 0x384 <motorControl+0x114>
		set_motors(50,50);
     322:	62 e3       	ldi	r22, 0x32	; 50
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	82 e3       	ldi	r24, 0x32	; 50
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		
		if (sensors[3] >= 500 && sensors[4] <= 300 )
     32e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sensors+0x6>
     332:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sensors+0x7>
     336:	84 3f       	cpi	r24, 0xF4	; 244
     338:	91 40       	sbci	r25, 0x01	; 1
     33a:	68 f0       	brcs	.+26     	; 0x356 <motorControl+0xe6>
     33c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <sensors+0x8>
     340:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <sensors+0x9>
     344:	8d 32       	cpi	r24, 0x2D	; 45
     346:	91 40       	sbci	r25, 0x01	; 1
     348:	30 f4       	brcc	.+12     	; 0x356 <motorControl+0xe6>
			set_motors(50,30);
     34a:	6e e1       	ldi	r22, 0x1E	; 30
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	82 e3       	ldi	r24, 0x32	; 50
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		if (sensors[1] >= 500 && sensors[0] <= 300 )
     356:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensors+0x2>
     35a:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensors+0x3>
     35e:	84 3f       	cpi	r24, 0xF4	; 244
     360:	91 40       	sbci	r25, 0x01	; 1
     362:	08 f4       	brcc	.+2      	; 0x366 <motorControl+0xf6>
     364:	59 c0       	rjmp	.+178    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     366:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <sensors>
     36a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <sensors+0x1>
     36e:	8d 32       	cpi	r24, 0x2D	; 45
     370:	91 40       	sbci	r25, 0x01	; 1
     372:	08 f0       	brcs	.+2      	; 0x376 <motorControl+0x106>
     374:	51 c0       	rjmp	.+162    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			set_motors(30,50);
     376:	62 e3       	ldi	r22, 0x32	; 50
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	8e e1       	ldi	r24, 0x1E	; 30
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
     382:	4a c0       	rjmp	.+148    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	}
	
	
	else if(x == 'B'){														//Reverse while following the line
     384:	c2 34       	cpi	r28, 0x42	; 66
     386:	09 f5       	brne	.+66     	; 0x3ca <motorControl+0x15a>
		set_motors(-50,-50);
     388:	6e ec       	ldi	r22, 0xCE	; 206
     38a:	7f ef       	ldi	r23, 0xFF	; 255
     38c:	8e ec       	ldi	r24, 0xCE	; 206
     38e:	9f ef       	ldi	r25, 0xFF	; 255
     390:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		
		if (sensors[3] >=400)
     394:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sensors+0x6>
     398:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sensors+0x7>
     39c:	80 39       	cpi	r24, 0x90	; 144
     39e:	91 40       	sbci	r25, 0x01	; 1
     3a0:	30 f0       	brcs	.+12     	; 0x3ae <motorControl+0x13e>
			set_motors(-50,-55);
     3a2:	69 ec       	ldi	r22, 0xC9	; 201
     3a4:	7f ef       	ldi	r23, 0xFF	; 255
     3a6:	8e ec       	ldi	r24, 0xCE	; 206
     3a8:	9f ef       	ldi	r25, 0xFF	; 255
     3aa:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		if (sensors[1] >=400)
     3ae:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensors+0x2>
     3b2:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensors+0x3>
     3b6:	80 39       	cpi	r24, 0x90	; 144
     3b8:	91 40       	sbci	r25, 0x01	; 1
     3ba:	70 f1       	brcs	.+92     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			set_motors(-55,-50);
     3bc:	6e ec       	ldi	r22, 0xCE	; 206
     3be:	7f ef       	ldi	r23, 0xFF	; 255
     3c0:	89 ec       	ldi	r24, 0xC9	; 201
     3c2:	9f ef       	ldi	r25, 0xFF	; 255
     3c4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
     3c8:	27 c0       	rjmp	.+78     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	}
	
	
	else if(x == 'T'){														// Turn around
     3ca:	c4 35       	cpi	r28, 0x54	; 84
     3cc:	a1 f4       	brne	.+40     	; 0x3f6 <motorControl+0x186>
		set_motors(-75,75);
     3ce:	6b e4       	ldi	r22, 0x4B	; 75
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	85 eb       	ldi	r24, 0xB5	; 181
     3d4:	9f ef       	ldi	r25, 0xFF	; 255
     3d6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
		
		while (sensors[2] >=500)
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <motorControl+0x176>
			read_line(sensors,IR_EMITTERS_ON);
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	8c e9       	ldi	r24, 0x9C	; 156
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
	
	
	else if(x == 'T'){														// Turn around
		set_motors(-75,75);
		
		while (sensors[2] >=500)
     3e6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     3ea:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     3ee:	84 3f       	cpi	r24, 0xF4	; 244
     3f0:	91 40       	sbci	r25, 0x01	; 1
     3f2:	a0 f7       	brcc	.-24     	; 0x3dc <motorControl+0x16c>
     3f4:	11 c0       	rjmp	.+34     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			read_line(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
     3f6:	c0 35       	cpi	r28, 0x50	; 80
     3f8:	79 f4       	brne	.+30     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     3fa:	0a c0       	rjmp	.+20     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		for( int i=50;i>=0;i-=2)
		{
			set_motors(i,i);
     3fc:	be 01       	movw	r22, r28
     3fe:	ce 01       	movw	r24, r28
     400:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <set_motors>
     404:	85 e0       	ldi	r24, 0x05	; 5
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
			read_line(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
		for( int i=50;i>=0;i-=2)
     40c:	22 97       	sbiw	r28, 0x02	; 2
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     410:	c2 e3       	ldi	r28, 0x32	; 50
     412:	d0 e0       	ldi	r29, 0x00	; 0
     414:	dd 23       	and	r29, r29
     416:	94 f7       	brge	.-28     	; 0x3fc <motorControl+0x18c>
			set_motors(i,i);
			delay(5);
		}
		
		
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <lineType>:
	set_motors(0,0);
}

char lineType(){																																	// function that returns the type of junction it detects
	while(1){																																		// >= 500 = black line		<=500 = white
		read_line(sensors,IR_EMITTERS_ON);
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	8c e9       	ldi	r24, 0x9C	; 156
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
		
		if (sensors[1] >=500 && sensors[3] >= 500){																									//Checks if its a X junction or a T junction
     428:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensors+0x2>
     42c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensors+0x3>
     430:	84 3f       	cpi	r24, 0xF4	; 244
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	92 07       	cpc	r25, r18
     436:	c0 f0       	brcs	.+48     	; 0x468 <lineType+0x4a>
     438:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <sensors+0x6>
     43c:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <sensors+0x7>
     440:	24 3f       	cpi	r18, 0xF4	; 244
     442:	31 40       	sbci	r19, 0x01	; 1
     444:	88 f0       	brcs	.+34     	; 0x468 <lineType+0x4a>
			inch();
     446:	0e 94 27 01 	call	0x24e	; 0x24e <inch>
			read_line(sensors,IR_EMITTERS_ON);
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	8c e9       	ldi	r24, 0x9C	; 156
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
			
			if (sensors[2] >=500)
     454:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     458:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     45c:	84 3f       	cpi	r24, 0xF4	; 244
     45e:	91 40       	sbci	r25, 0x01	; 1
     460:	08 f4       	brcc	.+2      	; 0x464 <lineType+0x46>
     462:	90 c0       	rjmp	.+288    	; 0x584 <lineType+0x166>
				return X_junction;
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	08 95       	ret
			else
				return T_junction;
		}
			
			
		else if (sensors[1] >=500 && sensors[0] >= 500){																							//Checks if its a left corner or a straight with left corner
     468:	84 3f       	cpi	r24, 0xF4	; 244
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	92 07       	cpc	r25, r18
     46e:	00 f1       	brcs	.+64     	; 0x4b0 <lineType+0x92>
     470:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <sensors>
     474:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <sensors+0x1>
     478:	24 3f       	cpi	r18, 0xF4	; 244
     47a:	31 40       	sbci	r19, 0x01	; 1
     47c:	c8 f0       	brcs	.+50     	; 0x4b0 <lineType+0x92>
			inch();
     47e:	0e 94 27 01 	call	0x24e	; 0x24e <inch>
			read_line(sensors,IR_EMITTERS_ON);
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	8c e9       	ldi	r24, 0x9C	; 156
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
			
			if (sensors[2] >= 500 || sensors[3] >=500)
     48c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     490:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     494:	84 3f       	cpi	r24, 0xF4	; 244
     496:	91 40       	sbci	r25, 0x01	; 1
     498:	08 f0       	brcs	.+2      	; 0x49c <lineType+0x7e>
     49a:	76 c0       	rjmp	.+236    	; 0x588 <lineType+0x16a>
     49c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sensors+0x6>
     4a0:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sensors+0x7>
     4a4:	84 3f       	cpi	r24, 0xF4	; 244
     4a6:	91 40       	sbci	r25, 0x01	; 1
     4a8:	08 f4       	brcc	.+2      	; 0x4ac <lineType+0x8e>
     4aa:	70 c0       	rjmp	.+224    	; 0x58c <lineType+0x16e>
				return Straight_left_junction;
     4ac:	86 e0       	ldi	r24, 0x06	; 6
     4ae:	08 95       	ret
			else
				return Left_corner;
		}
		
		
		else if (sensors[3] >=500 && sensors[4] >= 500){																							//Checks if its a right corner or a straight with right corner
     4b0:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <sensors+0x6>
     4b4:	50 91 a3 01 	lds	r21, 0x01A3	; 0x8001a3 <sensors+0x7>
     4b8:	44 3f       	cpi	r20, 0xF4	; 244
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	56 07       	cpc	r21, r22
     4be:	00 f1       	brcs	.+64     	; 0x500 <lineType+0xe2>
     4c0:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <sensors+0x8>
     4c4:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <sensors+0x9>
     4c8:	24 3f       	cpi	r18, 0xF4	; 244
     4ca:	31 40       	sbci	r19, 0x01	; 1
     4cc:	c8 f0       	brcs	.+50     	; 0x500 <lineType+0xe2>
			inch();
     4ce:	0e 94 27 01 	call	0x24e	; 0x24e <inch>
			read_line(sensors,IR_EMITTERS_ON);
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	8c e9       	ldi	r24, 0x9C	; 156
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
			
			if (sensors[2] >= 500 || sensors[1] >=500)
     4dc:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     4e0:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     4e4:	84 3f       	cpi	r24, 0xF4	; 244
     4e6:	91 40       	sbci	r25, 0x01	; 1
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <lineType+0xce>
     4ea:	52 c0       	rjmp	.+164    	; 0x590 <lineType+0x172>
     4ec:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensors+0x2>
     4f0:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensors+0x3>
     4f4:	84 3f       	cpi	r24, 0xF4	; 244
     4f6:	91 40       	sbci	r25, 0x01	; 1
     4f8:	08 f4       	brcc	.+2      	; 0x4fc <lineType+0xde>
     4fa:	4c c0       	rjmp	.+152    	; 0x594 <lineType+0x176>
				return Straight_right_junction;
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	08 95       	ret
			else
				return Right_corner;
		}
		
		
		else if(sensors[2] <=200){																													// check if the line ends	
     500:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <sensors+0x4>
     504:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <sensors+0x5>
     508:	29 3c       	cpi	r18, 0xC9	; 201
     50a:	31 05       	cpc	r19, r1
     50c:	08 f4       	brcc	.+2      	; 0x510 <lineType+0xf2>
     50e:	44 c0       	rjmp	.+136    	; 0x598 <lineType+0x17a>
			return Line_end;
		}

		
		else if (sensors[2] >=500){																													//Checks if the line is straight
     510:	24 3f       	cpi	r18, 0xF4	; 244
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	36 07       	cpc	r19, r22
     516:	08 f4       	brcc	.+2      	; 0x51a <lineType+0xfc>
     518:	82 cf       	rjmp	.-252    	; 0x41e <lineType>
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500))			//Checks the line for a "Barcode"
     51a:	24 3f       	cpi	r18, 0xF4	; 244
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	36 07       	cpc	r19, r22
     520:	e8 f1       	brcs	.+122    	; 0x59c <lineType+0x17e>
     522:	45 3f       	cpi	r20, 0xF5	; 245
     524:	51 40       	sbci	r21, 0x01	; 1
     526:	e0 f5       	brcc	.+120    	; 0x5a0 <lineType+0x182>
     528:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <sensors+0x8>
     52c:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <sensors+0x9>
     530:	44 3f       	cpi	r20, 0xF4	; 244
     532:	51 40       	sbci	r21, 0x01	; 1
     534:	b8 f1       	brcs	.+110    	; 0x5a4 <lineType+0x186>
     536:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <sensors>
     53a:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <sensors+0x1>
     53e:	44 3f       	cpi	r20, 0xF4	; 244
     540:	51 40       	sbci	r21, 0x01	; 1
     542:	90 f1       	brcs	.+100    	; 0x5a8 <lineType+0x18a>
     544:	85 3f       	cpi	r24, 0xF5	; 245
     546:	91 40       	sbci	r25, 0x01	; 1
     548:	88 f5       	brcc	.+98     	; 0x5ac <lineType+0x18e>
     54a:	24 3f       	cpi	r18, 0xF4	; 244
     54c:	31 40       	sbci	r19, 0x01	; 1
     54e:	50 f4       	brcc	.+20     	; 0x564 <lineType+0x146>
					motorControl('S');
				}
				return Barcode;
			}
			else
				return Straight;																									// check if its straight without any corners
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	08 95       	ret
		else if (sensors[2] >=500){																													//Checks if the line is straight
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500))			//Checks the line for a "Barcode"
			{
				while(sensors[4] >= 400 || sensors[0] >=400)
				{
					read_line(sensors,IR_EMITTERS_ON);
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	8c e9       	ldi	r24, 0x9C	; 156
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 4e 0b 	call	0x169c	; 0x169c <read_line>
					motorControl('S');
     55e:	83 e5       	ldi	r24, 0x53	; 83
     560:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>

		
		else if (sensors[2] >=500){																													//Checks if the line is straight
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500))			//Checks the line for a "Barcode"
			{
				while(sensors[4] >= 400 || sensors[0] >=400)
     564:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <sensors+0x8>
     568:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <sensors+0x9>
     56c:	80 39       	cpi	r24, 0x90	; 144
     56e:	91 40       	sbci	r25, 0x01	; 1
     570:	88 f7       	brcc	.-30     	; 0x554 <lineType+0x136>
     572:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <sensors>
     576:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <sensors+0x1>
     57a:	80 39       	cpi	r24, 0x90	; 144
     57c:	91 40       	sbci	r25, 0x01	; 1
     57e:	50 f7       	brcc	.-44     	; 0x554 <lineType+0x136>
				{
					read_line(sensors,IR_EMITTERS_ON);
					motorControl('S');
				}
				return Barcode;
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	08 95       	ret
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >=500)
				return X_junction;
			else
				return T_junction;
     584:	87 e0       	ldi	r24, 0x07	; 7
     586:	08 95       	ret
		else if (sensors[1] >=500 && sensors[0] >= 500){																							//Checks if its a left corner or a straight with left corner
			inch();
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= 500 || sensors[3] >=500)
				return Straight_left_junction;
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	08 95       	ret
			else
				return Left_corner;
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	08 95       	ret
		else if (sensors[3] >=500 && sensors[4] >= 500){																							//Checks if its a right corner or a straight with right corner
			inch();
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= 500 || sensors[1] >=500)
				return Straight_right_junction;
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	08 95       	ret
			else
				return Right_corner;
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	08 95       	ret
		}
		
		
		else if(sensors[2] <=200){																													// check if the line ends	
			return Line_end;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	08 95       	ret
					motorControl('S');
				}
				return Barcode;
			}
			else
				return Straight;																									// check if its straight without any corners
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	08 95       	ret
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	08 95       	ret
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	08 95       	ret
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	08 95       	ret
     5ac:	80 e0       	ldi	r24, 0x00	; 0
			
		}	
	}
}
     5ae:	08 95       	ret

000005b0 <parcour>:

char richting;

Junctions situatie = Straight;

char parcour(char *route) {
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	ec 01       	movw	r28, r24
	while(1) {
		situatie = lineType();
     5b6:	0e 94 0f 02 	call	0x41e	; 0x41e <lineType>
     5ba:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <situatie>
		
		switch (situatie) {
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	89 30       	cpi	r24, 0x09	; 9
     5c2:	91 05       	cpc	r25, r1
     5c4:	e0 f5       	brcc	.+120    	; 0x63e <parcour+0x8e>
     5c6:	fc 01       	movw	r30, r24
     5c8:	ec 5c       	subi	r30, 0xCC	; 204
     5ca:	ff 4f       	sbci	r31, 0xFF	; 255
     5cc:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__tablejump2__>
			
			case X_junction:
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
				motorControl('L');
     5d0:	8c e4       	ldi	r24, 0x4C	; 76
     5d2:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
				richting = 'L';
     5d6:	8c e4       	ldi	r24, 0x4C	; 76
     5d8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
				strncat(route, &richting, 1);
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	66 ea       	ldi	r22, 0xA6	; 166
     5e2:	71 e0       	ldi	r23, 0x01	; 1
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <strncat>
				break;
     5ea:	29 c0       	rjmp	.+82     	; 0x63e <parcour+0x8e>
			
			case Right_corner:
				motorControl('R');
     5ec:	82 e5       	ldi	r24, 0x52	; 82
     5ee:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
				richting = 'R';
     5f2:	82 e5       	ldi	r24, 0x52	; 82
     5f4:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
				strncat(route, &richting, 1);
     5f8:	41 e0       	ldi	r20, 0x01	; 1
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	66 ea       	ldi	r22, 0xA6	; 166
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	ce 01       	movw	r24, r28
     602:	0e 94 7d 12 	call	0x24fa	; 0x24fa <strncat>
				break;
     606:	1b c0       	rjmp	.+54     	; 0x63e <parcour+0x8e>
			
			case Straight_right_junction:
				richting = 'S';
     608:	83 e5       	ldi	r24, 0x53	; 83
     60a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
				strncat(route, &richting, 1);
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	66 ea       	ldi	r22, 0xA6	; 166
     614:	71 e0       	ldi	r23, 0x01	; 1
     616:	ce 01       	movw	r24, r28
     618:	0e 94 7d 12 	call	0x24fa	; 0x24fa <strncat>
			case Straight:
				motorControl('S');
     61c:	83 e5       	ldi	r24, 0x53	; 83
     61e:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
				break;
     622:	0d c0       	rjmp	.+26     	; 0x63e <parcour+0x8e>
			
			case Line_end:
				motorControl('T');
     624:	84 e5       	ldi	r24, 0x54	; 84
     626:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
				richting = 'T';
     62a:	84 e5       	ldi	r24, 0x54	; 84
     62c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
				strncat(route, &richting, 1);
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	66 ea       	ldi	r22, 0xA6	; 166
     636:	71 e0       	ldi	r23, 0x01	; 1
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <strncat>
				break;
		}
		
		
		if (route[-2] == 'T') {
     63e:	fe 01       	movw	r30, r28
     640:	32 97       	sbiw	r30, 0x02	; 2
     642:	80 81       	ld	r24, Z
     644:	84 35       	cpi	r24, 0x54	; 84
     646:	09 f0       	breq	.+2      	; 0x64a <parcour+0x9a>
     648:	b6 cf       	rjmp	.-148    	; 0x5b6 <parcour+0x6>
			route[strlen(route)-3] = '\0';
     64a:	fe 01       	movw	r30, r28
     64c:	01 90       	ld	r0, Z+
     64e:	00 20       	and	r0, r0
     650:	e9 f7       	brne	.-6      	; 0x64c <parcour+0x9c>
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	ec 1b       	sub	r30, r28
     656:	fd 0b       	sbc	r31, r29
     658:	33 97       	sbiw	r30, 0x03	; 3
     65a:	ec 0f       	add	r30, r28
     65c:	fd 1f       	adc	r31, r29
     65e:	10 82       	st	Z, r1
			if (route[-3] == 'L' && route[-1] == 'L') {
     660:	fe 01       	movw	r30, r28
     662:	33 97       	sbiw	r30, 0x03	; 3
     664:	80 81       	ld	r24, Z
     666:	8c 34       	cpi	r24, 0x4C	; 76
     668:	41 f4       	brne	.+16     	; 0x67a <parcour+0xca>
     66a:	32 96       	adiw	r30, 0x02	; 2
     66c:	90 81       	ld	r25, Z
     66e:	9c 34       	cpi	r25, 0x4C	; 76
     670:	21 f4       	brne	.+8      	; 0x67a <parcour+0xca>
				richting = 'S';
     672:	83 e5       	ldi	r24, 0x53	; 83
     674:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
     678:	2b c0       	rjmp	.+86     	; 0x6d0 <parcour+0x120>
			} else if (route[-3] == 'S' && route[-1] == 'L'){
     67a:	83 35       	cpi	r24, 0x53	; 83
     67c:	49 f4       	brne	.+18     	; 0x690 <parcour+0xe0>
     67e:	fe 01       	movw	r30, r28
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	90 81       	ld	r25, Z
     684:	9c 34       	cpi	r25, 0x4C	; 76
     686:	21 f4       	brne	.+8      	; 0x690 <parcour+0xe0>
				richting = 'R';			
     688:	82 e5       	ldi	r24, 0x52	; 82
     68a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
     68e:	20 c0       	rjmp	.+64     	; 0x6d0 <parcour+0x120>
			} else if (route[-3] == 'R' && route[-1] == 'L'){
     690:	82 35       	cpi	r24, 0x52	; 82
     692:	49 f4       	brne	.+18     	; 0x6a6 <parcour+0xf6>
     694:	fe 01       	movw	r30, r28
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	90 81       	ld	r25, Z
     69a:	9c 34       	cpi	r25, 0x4C	; 76
     69c:	21 f4       	brne	.+8      	; 0x6a6 <parcour+0xf6>
				richting = 'T';			
     69e:	84 e5       	ldi	r24, 0x54	; 84
     6a0:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
     6a4:	15 c0       	rjmp	.+42     	; 0x6d0 <parcour+0x120>
			} else if (route[-3] == 'L' && route[-1] == 'R'){
     6a6:	8c 34       	cpi	r24, 0x4C	; 76
     6a8:	49 f4       	brne	.+18     	; 0x6bc <parcour+0x10c>
     6aa:	fe 01       	movw	r30, r28
     6ac:	31 97       	sbiw	r30, 0x01	; 1
     6ae:	90 81       	ld	r25, Z
     6b0:	92 35       	cpi	r25, 0x52	; 82
     6b2:	21 f4       	brne	.+8      	; 0x6bc <parcour+0x10c>
				richting = 'T';			
     6b4:	84 e5       	ldi	r24, 0x54	; 84
     6b6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
     6ba:	0a c0       	rjmp	.+20     	; 0x6d0 <parcour+0x120>
			} else if (route[-3] == 'L' && route[-1] == 'S'){
     6bc:	8c 34       	cpi	r24, 0x4C	; 76
     6be:	41 f4       	brne	.+16     	; 0x6d0 <parcour+0x120>
     6c0:	fe 01       	movw	r30, r28
     6c2:	31 97       	sbiw	r30, 0x01	; 1
     6c4:	80 81       	ld	r24, Z
     6c6:	83 35       	cpi	r24, 0x53	; 83
     6c8:	19 f4       	brne	.+6      	; 0x6d0 <parcour+0x120>
				richting = 'R';			
     6ca:	82 e5       	ldi	r24, 0x52	; 82
     6cc:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
			}
			strncat(route, &richting, 1);				
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	66 ea       	ldi	r22, 0xA6	; 166
     6d6:	71 e0       	ldi	r23, 0x01	; 1
     6d8:	ce 01       	movw	r24, r28
     6da:	0e 94 7d 12 	call	0x24fa	; 0x24fa <strncat>
     6de:	6b cf       	rjmp	.-298    	; 0x5b6 <parcour+0x6>
	while(1) {
		situatie = lineType();
		
		switch (situatie) {
			case Barcode: // end of parcour
				warehouse();
     6e0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <warehouse>
			}
			strncat(route, &richting, 1);				
		}
	}
	return 0;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(int *a, int *b) {
    int temp = *a;
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 81       	ld	r18, Z
     6f0:	31 81       	ldd	r19, Z+1	; 0x01
    *a = *b;
     6f2:	fb 01       	movw	r30, r22
     6f4:	40 81       	ld	r20, Z
     6f6:	51 81       	ldd	r21, Z+1	; 0x01
     6f8:	fc 01       	movw	r30, r24
     6fa:	51 83       	std	Z+1, r21	; 0x01
     6fc:	40 83       	st	Z, r20
    *b = temp;
     6fe:	fb 01       	movw	r30, r22
     700:	31 83       	std	Z+1, r19	; 0x01
     702:	20 83       	st	Z, r18
     704:	08 95       	ret

00000706 <bubbleSort>:
}

void bubbleSort(int arr[],int orderY[], int n) {
     706:	6f 92       	push	r6
     708:	7f 92       	push	r7
     70a:	8f 92       	push	r8
     70c:	9f 92       	push	r9
     70e:	af 92       	push	r10
     710:	bf 92       	push	r11
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	6c 01       	movw	r12, r24
     724:	3b 01       	movw	r6, r22
     726:	4a 01       	movw	r8, r20
    for (int i = 0; i < n - 1; i++) {
     728:	a1 2c       	mov	r10, r1
     72a:	b1 2c       	mov	r11, r1
     72c:	30 c0       	rjmp	.+96     	; 0x78e <bubbleSort+0x88>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
     72e:	7e 01       	movw	r14, r28
     730:	ee 0c       	add	r14, r14
     732:	ff 1c       	adc	r15, r15
     734:	f6 01       	movw	r30, r12
     736:	ee 0d       	add	r30, r14
     738:	ff 1d       	adc	r31, r15
     73a:	20 81       	ld	r18, Z
     73c:	31 81       	ldd	r19, Z+1	; 0x01
     73e:	8e 01       	movw	r16, r28
     740:	0f 5f       	subi	r16, 0xFF	; 255
     742:	1f 4f       	sbci	r17, 0xFF	; 255
     744:	00 0f       	add	r16, r16
     746:	11 1f       	adc	r17, r17
     748:	d6 01       	movw	r26, r12
     74a:	a0 0f       	add	r26, r16
     74c:	b1 1f       	adc	r27, r17
     74e:	8d 91       	ld	r24, X+
     750:	9c 91       	ld	r25, X
     752:	11 97       	sbiw	r26, 0x01	; 1
     754:	82 17       	cp	r24, r18
     756:	93 07       	cpc	r25, r19
     758:	64 f4       	brge	.+24     	; 0x772 <bubbleSort+0x6c>
                swap(&arr[j], &arr[j + 1]);
     75a:	bd 01       	movw	r22, r26
     75c:	cf 01       	movw	r24, r30
     75e:	0e 94 76 03 	call	0x6ec	; 0x6ec <swap>
                swap(&orderY[j], &orderY[j + 1]);
     762:	b3 01       	movw	r22, r6
     764:	60 0f       	add	r22, r16
     766:	71 1f       	adc	r23, r17
     768:	c3 01       	movw	r24, r6
     76a:	8e 0d       	add	r24, r14
     76c:	9f 1d       	adc	r25, r15
     76e:	0e 94 76 03 	call	0x6ec	; 0x6ec <swap>
    *b = temp;
}

void bubbleSort(int arr[],int orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
     772:	21 96       	adiw	r28, 0x01	; 1
     774:	02 c0       	rjmp	.+4      	; 0x77a <bubbleSort+0x74>
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	d0 e0       	ldi	r29, 0x00	; 0
     77a:	c4 01       	movw	r24, r8
     77c:	8a 19       	sub	r24, r10
     77e:	9b 09       	sbc	r25, r11
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	c8 17       	cp	r28, r24
     784:	d9 07       	cpc	r29, r25
     786:	9c f2       	brlt	.-90     	; 0x72e <bubbleSort+0x28>
    *a = *b;
    *b = temp;
}

void bubbleSort(int arr[],int orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	a8 1a       	sub	r10, r24
     78c:	b8 0a       	sbc	r11, r24
     78e:	c4 01       	movw	r24, r8
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	a8 16       	cp	r10, r24
     794:	b9 06       	cpc	r11, r25
     796:	7c f3       	brlt	.-34     	; 0x776 <bubbleSort+0x70>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	bf 90       	pop	r11
     7aa:	af 90       	pop	r10
     7ac:	9f 90       	pop	r9
     7ae:	8f 90       	pop	r8
     7b0:	7f 90       	pop	r7
     7b2:	6f 90       	pop	r6
     7b4:	08 95       	ret

000007b6 <drive>:



void drive(int junctions)
{
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	7c 01       	movw	r14, r24
	Junctions situatie;
	motorControl('S');
     7c4:	83 e5       	ldi	r24, 0x53	; 83
     7c6:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
	int driving = 1;
	int count = 0;
     7ca:	00 e0       	ldi	r16, 0x00	; 0
     7cc:	10 e0       	ldi	r17, 0x00	; 0

void drive(int junctions)
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
     7ce:	c1 e0       	ldi	r28, 0x01	; 1
     7d0:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;
	while(driving) {
     7d2:	1a c0       	rjmp	.+52     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		situatie = lineType();
     7d4:	0e 94 0f 02 	call	0x41e	; 0x41e <lineType>
		//clear();
		switch (situatie) {
     7d8:	99 27       	eor	r25, r25
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	21 f0       	breq	.+8      	; 0x7e6 <drive+0x30>
     7de:	03 97       	sbiw	r24, 0x03	; 3
     7e0:	06 97       	sbiw	r24, 0x06	; 6
     7e2:	28 f0       	brcs	.+10     	; 0x7ee <drive+0x38>
     7e4:	11 c0       	rjmp	.+34     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
			case Barcode: // end of parcour
			//motorControl('N');
			break;
			
			case Straight:
			motorControl('S');
     7e6:	83 e5       	ldi	r24, 0x53	; 83
     7e8:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
			break;
     7ec:	0d c0       	rjmp	.+26     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
     7ee:	0f 5f       	subi	r16, 0xFF	; 255
     7f0:	1f 4f       	sbci	r17, 0xFF	; 255
				motorControl('S');
     7f2:	83 e5       	ldi	r24, 0x53	; 83
     7f4:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
				if(count == junctions)
     7f8:	0e 15       	cp	r16, r14
     7fa:	1f 05       	cpc	r17, r15
     7fc:	29 f4       	brne	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
				{
					motorControl('N');
     7fe:	8e e4       	ldi	r24, 0x4E	; 78
     800:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					driving = 0;
     804:	c0 e0       	ldi	r28, 0x00	; 0
     806:	d0 e0       	ldi	r29, 0x00	; 0
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
	int count = 0;
	while(driving) {
     808:	20 97       	sbiw	r28, 0x00	; 0
     80a:	21 f7       	brne	.-56     	; 0x7d4 <drive+0x1e>
			
			
		}
		
	}
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	08 95       	ret

0000081a <waitForTurn>:

void waitForTurn()
{
     81a:	cf 93       	push	r28
     81c:	8f e0       	ldi	r24, 0x0F	; 15
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
     824:	03 c0       	rjmp	.+6      	; 0x82c <waitForTurn+0x12>
	Junctions lijn;
	delay(15);
	while(lijn != Straight)
	{
		lijn  = lineType();
     826:	0e 94 0f 02 	call	0x41e	; 0x41e <lineType>
     82a:	c8 2f       	mov	r28, r24

void waitForTurn()
{
	Junctions lijn;
	delay(15);
	while(lijn != Straight)
     82c:	c1 11       	cpse	r28, r1
     82e:	fb cf       	rjmp	.-10     	; 0x826 <waitForTurn+0xc>
	{
		lijn  = lineType();
	}
	motorControl('N');
     830:	8e e4       	ldi	r24, 0x4E	; 78
     832:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
}
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <turnRobot>:

void turnRobot(char direction, piRobot *myRobot)
{
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	c8 2f       	mov	r28, r24
     846:	8b 01       	movw	r16, r22
    int changing = 1;
     848:	ee 24       	eor	r14, r14
     84a:	e3 94       	inc	r14
     84c:	f1 2c       	mov	r15, r1

    while(changing==1)
     84e:	9a c0       	rjmp	.+308    	; 0x984 <__stack+0x85>
    {
		
        switch(myRobot->direction)
     850:	f8 01       	movw	r30, r16
     852:	84 81       	ldd	r24, Z+4	; 0x04
     854:	8e 34       	cpi	r24, 0x4E	; 78
     856:	59 f0       	breq	.+22     	; 0x86e <turnRobot+0x34>
     858:	18 f4       	brcc	.+6      	; 0x860 <turnRobot+0x26>
     85a:	85 34       	cpi	r24, 0x45	; 69
     85c:	51 f1       	breq	.+84     	; 0x8b2 <turnRobot+0x78>
     85e:	8c c0       	rjmp	.+280    	; 0x978 <__stack+0x79>
     860:	83 35       	cpi	r24, 0x53	; 83
     862:	09 f4       	brne	.+2      	; 0x866 <turnRobot+0x2c>
     864:	48 c0       	rjmp	.+144    	; 0x8f6 <turnRobot+0xbc>
     866:	87 35       	cpi	r24, 0x57	; 87
     868:	09 f4       	brne	.+2      	; 0x86c <turnRobot+0x32>
     86a:	66 c0       	rjmp	.+204    	; 0x938 <__stack+0x39>
     86c:	85 c0       	rjmp	.+266    	; 0x978 <__stack+0x79>
        {
            case 'N':
                if(direction == 'E')
     86e:	c5 34       	cpi	r28, 0x45	; 69
     870:	49 f4       	brne	.+18     	; 0x884 <turnRobot+0x4a>
                {
                    motorControl('R');
     872:	82 e5       	ldi	r24, 0x52	; 82
     874:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     878:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'E';
     87c:	85 e4       	ldi	r24, 0x45	; 69
     87e:	f8 01       	movw	r30, r16
     880:	84 83       	std	Z+4, r24	; 0x04
     882:	7a c0       	rjmp	.+244    	; 0x978 <__stack+0x79>
                }
                else if(direction == 'W')
     884:	c7 35       	cpi	r28, 0x57	; 87
     886:	49 f4       	brne	.+18     	; 0x89a <turnRobot+0x60>
                {
                    motorControl('L');
     888:	8c e4       	ldi	r24, 0x4C	; 76
     88a:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     88e:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'W';
     892:	87 e5       	ldi	r24, 0x57	; 87
     894:	f8 01       	movw	r30, r16
     896:	84 83       	std	Z+4, r24	; 0x04
     898:	6f c0       	rjmp	.+222    	; 0x978 <__stack+0x79>
                }
                else if(direction == 'S')
     89a:	c3 35       	cpi	r28, 0x53	; 83
     89c:	09 f0       	breq	.+2      	; 0x8a0 <turnRobot+0x66>
     89e:	6c c0       	rjmp	.+216    	; 0x978 <__stack+0x79>
                {
                    motorControl('T');
     8a0:	84 e5       	ldi	r24, 0x54	; 84
     8a2:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     8a6:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'S';
     8aa:	83 e5       	ldi	r24, 0x53	; 83
     8ac:	f8 01       	movw	r30, r16
     8ae:	84 83       	std	Z+4, r24	; 0x04
     8b0:	63 c0       	rjmp	.+198    	; 0x978 <__stack+0x79>
                }
                break;
            case 'E':
                if(direction == 'S')
     8b2:	c3 35       	cpi	r28, 0x53	; 83
     8b4:	49 f4       	brne	.+18     	; 0x8c8 <turnRobot+0x8e>
                {
                    motorControl('R');
     8b6:	82 e5       	ldi	r24, 0x52	; 82
     8b8:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     8bc:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'S';
     8c0:	83 e5       	ldi	r24, 0x53	; 83
     8c2:	f8 01       	movw	r30, r16
     8c4:	84 83       	std	Z+4, r24	; 0x04
     8c6:	58 c0       	rjmp	.+176    	; 0x978 <__stack+0x79>
                }
                else if(direction == 'W')
     8c8:	c7 35       	cpi	r28, 0x57	; 87
     8ca:	49 f4       	brne	.+18     	; 0x8de <turnRobot+0xa4>
                {
                    motorControl('L');
     8cc:	8c e4       	ldi	r24, 0x4C	; 76
     8ce:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     8d2:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'W';
     8d6:	87 e5       	ldi	r24, 0x57	; 87
     8d8:	f8 01       	movw	r30, r16
     8da:	84 83       	std	Z+4, r24	; 0x04
     8dc:	4d c0       	rjmp	.+154    	; 0x978 <__stack+0x79>
                }
                else if(direction == 'S')
     8de:	c3 35       	cpi	r28, 0x53	; 83
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <turnRobot+0xaa>
     8e2:	4a c0       	rjmp	.+148    	; 0x978 <__stack+0x79>
                {
                    motorControl('T');
     8e4:	84 e5       	ldi	r24, 0x54	; 84
     8e6:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     8ea:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'S';
     8ee:	83 e5       	ldi	r24, 0x53	; 83
     8f0:	f8 01       	movw	r30, r16
     8f2:	84 83       	std	Z+4, r24	; 0x04
     8f4:	41 c0       	rjmp	.+130    	; 0x978 <__stack+0x79>
                }
                break;
            case 'S':
                if(direction == 'W')
     8f6:	c7 35       	cpi	r28, 0x57	; 87
     8f8:	49 f4       	brne	.+18     	; 0x90c <__stack+0xd>
                {
                    motorControl('R');
     8fa:	82 e5       	ldi	r24, 0x52	; 82
     8fc:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     900:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'W';
     904:	87 e5       	ldi	r24, 0x57	; 87
     906:	f8 01       	movw	r30, r16
     908:	84 83       	std	Z+4, r24	; 0x04
     90a:	36 c0       	rjmp	.+108    	; 0x978 <__stack+0x79>
                }
                else if(direction == 'E')
     90c:	c5 34       	cpi	r28, 0x45	; 69
     90e:	49 f4       	brne	.+18     	; 0x922 <__stack+0x23>
                {
                    motorControl('L');
     910:	8c e4       	ldi	r24, 0x4C	; 76
     912:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     916:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'E';
     91a:	85 e4       	ldi	r24, 0x45	; 69
     91c:	f8 01       	movw	r30, r16
     91e:	84 83       	std	Z+4, r24	; 0x04
     920:	2b c0       	rjmp	.+86     	; 0x978 <__stack+0x79>
                }
                else if(direction == 'N')
     922:	ce 34       	cpi	r28, 0x4E	; 78
     924:	49 f5       	brne	.+82     	; 0x978 <__stack+0x79>
                {
                    motorControl('T');
     926:	84 e5       	ldi	r24, 0x54	; 84
     928:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     92c:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'N';
     930:	8e e4       	ldi	r24, 0x4E	; 78
     932:	f8 01       	movw	r30, r16
     934:	84 83       	std	Z+4, r24	; 0x04
     936:	20 c0       	rjmp	.+64     	; 0x978 <__stack+0x79>
                }
                break;
            case 'W':
                if(direction == 'N')
     938:	ce 34       	cpi	r28, 0x4E	; 78
     93a:	49 f4       	brne	.+18     	; 0x94e <__stack+0x4f>
                {
					
                    motorControl('R');
     93c:	82 e5       	ldi	r24, 0x52	; 82
     93e:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     942:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'N';
     946:	8e e4       	ldi	r24, 0x4E	; 78
     948:	f8 01       	movw	r30, r16
     94a:	84 83       	std	Z+4, r24	; 0x04
     94c:	15 c0       	rjmp	.+42     	; 0x978 <__stack+0x79>
                }
                else if(direction == 'S')
     94e:	c3 35       	cpi	r28, 0x53	; 83
     950:	49 f4       	brne	.+18     	; 0x964 <__stack+0x65>
                {
                    motorControl('L');
     952:	8c e4       	ldi	r24, 0x4C	; 76
     954:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     958:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'S';
     95c:	83 e5       	ldi	r24, 0x53	; 83
     95e:	f8 01       	movw	r30, r16
     960:	84 83       	std	Z+4, r24	; 0x04
     962:	0a c0       	rjmp	.+20     	; 0x978 <__stack+0x79>
                }
                else if(direction == 'E')
     964:	c5 34       	cpi	r28, 0x45	; 69
     966:	41 f4       	brne	.+16     	; 0x978 <__stack+0x79>
                {
                    motorControl('T');
     968:	84 e5       	ldi	r24, 0x54	; 84
     96a:	0e 94 38 01 	call	0x270	; 0x270 <motorControl>
					waitForTurn();
     96e:	0e 94 0d 04 	call	0x81a	; 0x81a <waitForTurn>
                    myRobot->direction = 'E';
     972:	85 e4       	ldi	r24, 0x45	; 69
     974:	f8 01       	movw	r30, r16
     976:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
		
				if(myRobot->direction == direction)
     978:	f8 01       	movw	r30, r16
     97a:	84 81       	ldd	r24, Z+4	; 0x04
     97c:	c8 13       	cpse	r28, r24
     97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x85>
				{
					changing = 0;
     980:	e1 2c       	mov	r14, r1
     982:	f1 2c       	mov	r15, r1

void turnRobot(char direction, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
     984:	f1 e0       	ldi	r31, 0x01	; 1
     986:	ef 16       	cp	r14, r31
     988:	f1 04       	cpc	r15, r1
     98a:	09 f4       	brne	.+2      	; 0x98e <__stack+0x8f>
     98c:	61 cf       	rjmp	.-318    	; 0x850 <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	08 95       	ret

0000099a <moveX>:


void moveX(int orderPos, piRobot *robot)
{
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
	
    int junctions;
	
	
    if(robot->posX != orderPos)
     9a2:	fb 01       	movw	r30, r22
     9a4:	20 81       	ld	r18, Z
     9a6:	31 81       	ldd	r19, Z+1	; 0x01
     9a8:	28 17       	cp	r18, r24
     9aa:	39 07       	cpc	r19, r25
     9ac:	d1 f0       	breq	.+52     	; 0x9e2 <moveX+0x48>
     9ae:	8b 01       	movw	r16, r22
     9b0:	ec 01       	movw	r28, r24
    {
		
        if(robot->posX < orderPos)
     9b2:	28 17       	cp	r18, r24
     9b4:	39 07       	cpc	r19, r25
     9b6:	5c f4       	brge	.+22     	; 0x9ce <moveX+0x34>
        {
            turnRobot('W', robot);
     9b8:	87 e5       	ldi	r24, 0x57	; 87
     9ba:	0e 94 1d 04 	call	0x83a	; 0x83a <turnRobot>
            junctions = orderPos-robot->posX;
     9be:	f8 01       	movw	r30, r16
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	9e 01       	movw	r18, r28
     9c6:	28 1b       	sub	r18, r24
     9c8:	39 0b       	sbc	r19, r25
     9ca:	c9 01       	movw	r24, r18
     9cc:	08 c0       	rjmp	.+16     	; 0x9de <moveX+0x44>
        }
        else{
            turnRobot('E', robot);
     9ce:	85 e4       	ldi	r24, 0x45	; 69
     9d0:	0e 94 1d 04 	call	0x83a	; 0x83a <turnRobot>
            junctions = robot->posX - orderPos;
     9d4:	f8 01       	movw	r30, r16
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	8c 1b       	sub	r24, r28
     9dc:	9d 0b       	sbc	r25, r29
        }

        
		drive(junctions);
     9de:	0e 94 db 03 	call	0x7b6	; 0x7b6 <drive>
        

    }
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <moveY>:

void moveY(int orderPos, piRobot *robot)
{
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
     9f4:	fb 01       	movw	r30, r22
     9f6:	22 81       	ldd	r18, Z+2	; 0x02
     9f8:	33 81       	ldd	r19, Z+3	; 0x03
     9fa:	28 17       	cp	r18, r24
     9fc:	39 07       	cpc	r19, r25
     9fe:	d1 f0       	breq	.+52     	; 0xa34 <moveY+0x48>
     a00:	8b 01       	movw	r16, r22
     a02:	ec 01       	movw	r28, r24
    {
        if(robot->posY < orderPos)
     a04:	28 17       	cp	r18, r24
     a06:	39 07       	cpc	r19, r25
     a08:	5c f4       	brge	.+22     	; 0xa20 <moveY+0x34>
        {
            turnRobot('N', robot);
     a0a:	8e e4       	ldi	r24, 0x4E	; 78
     a0c:	0e 94 1d 04 	call	0x83a	; 0x83a <turnRobot>
            junctions = orderPos-robot->posY;
     a10:	f8 01       	movw	r30, r16
     a12:	82 81       	ldd	r24, Z+2	; 0x02
     a14:	93 81       	ldd	r25, Z+3	; 0x03
     a16:	9e 01       	movw	r18, r28
     a18:	28 1b       	sub	r18, r24
     a1a:	39 0b       	sbc	r19, r25
     a1c:	c9 01       	movw	r24, r18
     a1e:	08 c0       	rjmp	.+16     	; 0xa30 <moveY+0x44>
        }
        else{
            turnRobot('S', robot);
     a20:	83 e5       	ldi	r24, 0x53	; 83
     a22:	0e 94 1d 04 	call	0x83a	; 0x83a <turnRobot>
            junctions = robot->posY - orderPos;
     a26:	f8 01       	movw	r30, r16
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	8c 1b       	sub	r24, r28
     a2e:	9d 0b       	sbc	r25, r29
        }

            drive(junctions);
     a30:	0e 94 db 03 	call	0x7b6	; 0x7b6 <drive>
        

    }
}
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <warehouse>:


void warehouse(void)
{
     a3e:	8f 92       	push	r8
     a40:	9f 92       	push	r9
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	69 97       	sbiw	r28, 0x19	; 25
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
 piRobot robot;
 robot.direction = 'W';
     a62:	87 e5       	ldi	r24, 0x57	; 87
     a64:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = -1;
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	9f ef       	ldi	r25, 0xFF	; 255
     a6a:	9a 83       	std	Y+2, r25	; 0x02
     a6c:	89 83       	std	Y+1, r24	; 0x01
 robot.posY = 0;
     a6e:	1c 82       	std	Y+4, r1	; 0x04
     a70:	1b 82       	std	Y+3, r1	; 0x03
//int orderX[] = getWixel("posX");
//int orderY[] = getWixel("posY");

    int orderX[] = {0,3,1,2,4};
     a72:	8a e0       	ldi	r24, 0x0A	; 10
     a74:	ea e0       	ldi	r30, 0x0A	; 10
     a76:	f1 e0       	ldi	r31, 0x01	; 1
     a78:	de 01       	movw	r26, r28
     a7a:	16 96       	adiw	r26, 0x06	; 6
     a7c:	01 90       	ld	r0, Z+
     a7e:	0d 92       	st	X+, r0
     a80:	8a 95       	dec	r24
     a82:	e1 f7       	brne	.-8      	; 0xa7c <warehouse+0x3e>
    int orderY[] = {1,2,3,3,4};
     a84:	8a e0       	ldi	r24, 0x0A	; 10
     a86:	e4 e1       	ldi	r30, 0x14	; 20
     a88:	f1 e0       	ldi	r31, 0x01	; 1
     a8a:	de 01       	movw	r26, r28
     a8c:	50 96       	adiw	r26, 0x10	; 16
     a8e:	01 90       	ld	r0, Z+
     a90:	0d 92       	st	X+, r0
     a92:	8a 95       	dec	r24
     a94:	e1 f7       	brne	.-8      	; 0xa8e <warehouse+0x50>

    int arrayGrootte = sizeof(orderX) / sizeof(orderX[0]);
    bubbleSort(orderX, orderY, arrayGrootte);
     a96:	45 e0       	ldi	r20, 0x05	; 5
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	be 01       	movw	r22, r28
     a9c:	60 5f       	subi	r22, 0xF0	; 240
     a9e:	7f 4f       	sbci	r23, 0xFF	; 255
     aa0:	ce 01       	movw	r24, r28
     aa2:	06 96       	adiw	r24, 0x06	; 6
     aa4:	0e 94 83 03 	call	0x706	; 0x706 <bubbleSort>
	
	
	 //motorControl('S');
	//drive();
	
    for(int locaties = 0; locaties<arrayGrootte;locaties++)
     aa8:	e1 2c       	mov	r14, r1
     aaa:	f1 2c       	mov	r15, r1
     aac:	49 c0       	rjmp	.+146    	; 0xb40 <warehouse+0x102>
    {
		float completed = locaties;
     aae:	b7 01       	movw	r22, r14
     ab0:	0f 2c       	mov	r0, r15
     ab2:	00 0c       	add	r0, r0
     ab4:	88 0b       	sbc	r24, r24
     ab6:	99 0b       	sbc	r25, r25
     ab8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__floatsisf>
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24
		float total = arrayGrootte;
		
		
        moveX(orderX[locaties], &robot);
     ac0:	87 01       	movw	r16, r14
     ac2:	00 0f       	add	r16, r16
     ac4:	11 1f       	adc	r17, r17
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	8c 0f       	add	r24, r28
     acc:	9d 1f       	adc	r25, r29
     ace:	08 0f       	add	r16, r24
     ad0:	19 1f       	adc	r17, r25
     ad2:	bc 01       	movw	r22, r24
     ad4:	f8 01       	movw	r30, r16
     ad6:	85 81       	ldd	r24, Z+5	; 0x05
     ad8:	96 81       	ldd	r25, Z+6	; 0x06
     ada:	0e 94 cd 04 	call	0x99a	; 0x99a <moveX>
		robot.posX = orderX[locaties];
     ade:	f8 01       	movw	r30, r16
     ae0:	85 81       	ldd	r24, Z+5	; 0x05
     ae2:	96 81       	ldd	r25, Z+6	; 0x06
     ae4:	9a 83       	std	Y+2, r25	; 0x02
     ae6:	89 83       	std	Y+1, r24	; 0x01
        moveY(orderY[locaties], &robot);
     ae8:	be 01       	movw	r22, r28
     aea:	6f 5f       	subi	r22, 0xFF	; 255
     aec:	7f 4f       	sbci	r23, 0xFF	; 255
     aee:	87 85       	ldd	r24, Z+15	; 0x0f
     af0:	90 89       	ldd	r25, Z+16	; 0x10
     af2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <moveY>
		robot.posY = orderY[locaties];
     af6:	f8 01       	movw	r30, r16
     af8:	87 85       	ldd	r24, Z+15	; 0x0f
     afa:	90 89       	ldd	r25, Z+16	; 0x10
     afc:	9c 83       	std	Y+4, r25	; 0x04
     afe:	8b 83       	std	Y+3, r24	; 0x03
     b00:	88 ee       	ldi	r24, 0xE8	; 232
     b02:	93 e0       	ldi	r25, 0x03	; 3
     b04:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
        delay(1000);//wait 1 second
		
        updateDisplay(((completed/total)*100),batteryPercentage(),logicsBot);
     b08:	0e 94 5d 00 	call	0xba	; 0xba <batteryPercentage>
     b0c:	8c 01       	movw	r16, r24
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 ea       	ldi	r20, 0xA0	; 160
     b14:	50 e4       	ldi	r21, 0x40	; 64
     b16:	c5 01       	movw	r24, r10
     b18:	b4 01       	movw	r22, r8
     b1a:	0e 94 c4 05 	call	0xb88	; 0xb88 <__divsf3>
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	48 ec       	ldi	r20, 0xC8	; 200
     b24:	52 e4       	ldi	r21, 0x42	; 66
     b26:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__mulsf3>
     b2a:	0e 94 36 06 	call	0xc6c	; 0xc6c <__fixsfsi>
     b2e:	dc 01       	movw	r26, r24
     b30:	cb 01       	movw	r24, r22
     b32:	42 e0       	ldi	r20, 0x02	; 2
     b34:	b8 01       	movw	r22, r16
     b36:	0e 94 65 00 	call	0xca	; 0xca <updateDisplay>
	
	
	 //motorControl('S');
	//drive();
	
    for(int locaties = 0; locaties<arrayGrootte;locaties++)
     b3a:	ff ef       	ldi	r31, 0xFF	; 255
     b3c:	ef 1a       	sub	r14, r31
     b3e:	ff 0a       	sbc	r15, r31
     b40:	85 e0       	ldi	r24, 0x05	; 5
     b42:	e8 16       	cp	r14, r24
     b44:	f1 04       	cpc	r15, r1
     b46:	0c f4       	brge	.+2      	; 0xb4a <warehouse+0x10c>
     b48:	b2 cf       	rjmp	.-156    	; 0xaae <warehouse+0x70>
		robot.posY = orderY[locaties];
        delay(1000);//wait 1 second
		
        updateDisplay(((completed/total)*100),batteryPercentage(),logicsBot);
    }
    moveY(0, &robot);
     b4a:	be 01       	movw	r22, r28
     b4c:	6f 5f       	subi	r22, 0xFF	; 255
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 f6 04 	call	0x9ec	; 0x9ec <moveY>
    moveX(0, &robot);
     b58:	be 01       	movw	r22, r28
     b5a:	6f 5f       	subi	r22, 0xFF	; 255
     b5c:	7f 4f       	sbci	r23, 0xFF	; 255
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 cd 04 	call	0x99a	; 0x99a <moveX>
    //goHome();
}
     b66:	69 96       	adiw	r28, 0x19	; 25
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	bf 90       	pop	r11
     b80:	af 90       	pop	r10
     b82:	9f 90       	pop	r9
     b84:	8f 90       	pop	r8
     b86:	08 95       	ret

00000b88 <__divsf3>:
     b88:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__divsf3x>
     b8c:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_round>
     b90:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_pscB>
     b94:	58 f0       	brcs	.+22     	; 0xbac <__divsf3+0x24>
     b96:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_pscA>
     b9a:	40 f0       	brcs	.+16     	; 0xbac <__divsf3+0x24>
     b9c:	29 f4       	brne	.+10     	; 0xba8 <__divsf3+0x20>
     b9e:	5f 3f       	cpi	r21, 0xFF	; 255
     ba0:	29 f0       	breq	.+10     	; 0xbac <__divsf3+0x24>
     ba2:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
     ba6:	51 11       	cpse	r21, r1
     ba8:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>
     bac:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_nan>

00000bb0 <__divsf3x>:
     bb0:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_split3>
     bb4:	68 f3       	brcs	.-38     	; 0xb90 <__divsf3+0x8>

00000bb6 <__divsf3_pse>:
     bb6:	99 23       	and	r25, r25
     bb8:	b1 f3       	breq	.-20     	; 0xba6 <__divsf3+0x1e>
     bba:	55 23       	and	r21, r21
     bbc:	91 f3       	breq	.-28     	; 0xba2 <__divsf3+0x1a>
     bbe:	95 1b       	sub	r25, r21
     bc0:	55 0b       	sbc	r21, r21
     bc2:	bb 27       	eor	r27, r27
     bc4:	aa 27       	eor	r26, r26
     bc6:	62 17       	cp	r22, r18
     bc8:	73 07       	cpc	r23, r19
     bca:	84 07       	cpc	r24, r20
     bcc:	38 f0       	brcs	.+14     	; 0xbdc <__divsf3_pse+0x26>
     bce:	9f 5f       	subi	r25, 0xFF	; 255
     bd0:	5f 4f       	sbci	r21, 0xFF	; 255
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	44 1f       	adc	r20, r20
     bd8:	aa 1f       	adc	r26, r26
     bda:	a9 f3       	breq	.-22     	; 0xbc6 <__divsf3_pse+0x10>
     bdc:	35 d0       	rcall	.+106    	; 0xc48 <__divsf3_pse+0x92>
     bde:	0e 2e       	mov	r0, r30
     be0:	3a f0       	brmi	.+14     	; 0xbf0 <__divsf3_pse+0x3a>
     be2:	e0 e8       	ldi	r30, 0x80	; 128
     be4:	32 d0       	rcall	.+100    	; 0xc4a <__divsf3_pse+0x94>
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	50 40       	sbci	r21, 0x00	; 0
     bea:	e6 95       	lsr	r30
     bec:	00 1c       	adc	r0, r0
     bee:	ca f7       	brpl	.-14     	; 0xbe2 <__divsf3_pse+0x2c>
     bf0:	2b d0       	rcall	.+86     	; 0xc48 <__divsf3_pse+0x92>
     bf2:	fe 2f       	mov	r31, r30
     bf4:	29 d0       	rcall	.+82     	; 0xc48 <__divsf3_pse+0x92>
     bf6:	66 0f       	add	r22, r22
     bf8:	77 1f       	adc	r23, r23
     bfa:	88 1f       	adc	r24, r24
     bfc:	bb 1f       	adc	r27, r27
     bfe:	26 17       	cp	r18, r22
     c00:	37 07       	cpc	r19, r23
     c02:	48 07       	cpc	r20, r24
     c04:	ab 07       	cpc	r26, r27
     c06:	b0 e8       	ldi	r27, 0x80	; 128
     c08:	09 f0       	breq	.+2      	; 0xc0c <__divsf3_pse+0x56>
     c0a:	bb 0b       	sbc	r27, r27
     c0c:	80 2d       	mov	r24, r0
     c0e:	bf 01       	movw	r22, r30
     c10:	ff 27       	eor	r31, r31
     c12:	93 58       	subi	r25, 0x83	; 131
     c14:	5f 4f       	sbci	r21, 0xFF	; 255
     c16:	3a f0       	brmi	.+14     	; 0xc26 <__divsf3_pse+0x70>
     c18:	9e 3f       	cpi	r25, 0xFE	; 254
     c1a:	51 05       	cpc	r21, r1
     c1c:	78 f0       	brcs	.+30     	; 0xc3c <__divsf3_pse+0x86>
     c1e:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
     c22:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>
     c26:	5f 3f       	cpi	r21, 0xFF	; 255
     c28:	e4 f3       	brlt	.-8      	; 0xc22 <__divsf3_pse+0x6c>
     c2a:	98 3e       	cpi	r25, 0xE8	; 232
     c2c:	d4 f3       	brlt	.-12     	; 0xc22 <__divsf3_pse+0x6c>
     c2e:	86 95       	lsr	r24
     c30:	77 95       	ror	r23
     c32:	67 95       	ror	r22
     c34:	b7 95       	ror	r27
     c36:	f7 95       	ror	r31
     c38:	9f 5f       	subi	r25, 0xFF	; 255
     c3a:	c9 f7       	brne	.-14     	; 0xc2e <__divsf3_pse+0x78>
     c3c:	88 0f       	add	r24, r24
     c3e:	91 1d       	adc	r25, r1
     c40:	96 95       	lsr	r25
     c42:	87 95       	ror	r24
     c44:	97 f9       	bld	r25, 7
     c46:	08 95       	ret
     c48:	e1 e0       	ldi	r30, 0x01	; 1
     c4a:	66 0f       	add	r22, r22
     c4c:	77 1f       	adc	r23, r23
     c4e:	88 1f       	adc	r24, r24
     c50:	bb 1f       	adc	r27, r27
     c52:	62 17       	cp	r22, r18
     c54:	73 07       	cpc	r23, r19
     c56:	84 07       	cpc	r24, r20
     c58:	ba 07       	cpc	r27, r26
     c5a:	20 f0       	brcs	.+8      	; 0xc64 <__divsf3_pse+0xae>
     c5c:	62 1b       	sub	r22, r18
     c5e:	73 0b       	sbc	r23, r19
     c60:	84 0b       	sbc	r24, r20
     c62:	ba 0b       	sbc	r27, r26
     c64:	ee 1f       	adc	r30, r30
     c66:	88 f7       	brcc	.-30     	; 0xc4a <__divsf3_pse+0x94>
     c68:	e0 95       	com	r30
     c6a:	08 95       	ret

00000c6c <__fixsfsi>:
     c6c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fixunssfsi>
     c70:	68 94       	set
     c72:	b1 11       	cpse	r27, r1
     c74:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>
     c78:	08 95       	ret

00000c7a <__fixunssfsi>:
     c7a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__fp_splitA>
     c7e:	88 f0       	brcs	.+34     	; 0xca2 <__fixunssfsi+0x28>
     c80:	9f 57       	subi	r25, 0x7F	; 127
     c82:	98 f0       	brcs	.+38     	; 0xcaa <__fixunssfsi+0x30>
     c84:	b9 2f       	mov	r27, r25
     c86:	99 27       	eor	r25, r25
     c88:	b7 51       	subi	r27, 0x17	; 23
     c8a:	b0 f0       	brcs	.+44     	; 0xcb8 <__fixunssfsi+0x3e>
     c8c:	e1 f0       	breq	.+56     	; 0xcc6 <__fixunssfsi+0x4c>
     c8e:	66 0f       	add	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	88 1f       	adc	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	1a f0       	brmi	.+6      	; 0xc9e <__fixunssfsi+0x24>
     c98:	ba 95       	dec	r27
     c9a:	c9 f7       	brne	.-14     	; 0xc8e <__fixunssfsi+0x14>
     c9c:	14 c0       	rjmp	.+40     	; 0xcc6 <__fixunssfsi+0x4c>
     c9e:	b1 30       	cpi	r27, 0x01	; 1
     ca0:	91 f0       	breq	.+36     	; 0xcc6 <__fixunssfsi+0x4c>
     ca2:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_zero>
     ca6:	b1 e0       	ldi	r27, 0x01	; 1
     ca8:	08 95       	ret
     caa:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_zero>
     cae:	67 2f       	mov	r22, r23
     cb0:	78 2f       	mov	r23, r24
     cb2:	88 27       	eor	r24, r24
     cb4:	b8 5f       	subi	r27, 0xF8	; 248
     cb6:	39 f0       	breq	.+14     	; 0xcc6 <__fixunssfsi+0x4c>
     cb8:	b9 3f       	cpi	r27, 0xF9	; 249
     cba:	cc f3       	brlt	.-14     	; 0xcae <__fixunssfsi+0x34>
     cbc:	86 95       	lsr	r24
     cbe:	77 95       	ror	r23
     cc0:	67 95       	ror	r22
     cc2:	b3 95       	inc	r27
     cc4:	d9 f7       	brne	.-10     	; 0xcbc <__fixunssfsi+0x42>
     cc6:	3e f4       	brtc	.+14     	; 0xcd6 <__fixunssfsi+0x5c>
     cc8:	90 95       	com	r25
     cca:	80 95       	com	r24
     ccc:	70 95       	com	r23
     cce:	61 95       	neg	r22
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	8f 4f       	sbci	r24, 0xFF	; 255
     cd4:	9f 4f       	sbci	r25, 0xFF	; 255
     cd6:	08 95       	ret

00000cd8 <__floatunsisf>:
     cd8:	e8 94       	clt
     cda:	09 c0       	rjmp	.+18     	; 0xcee <__floatsisf+0x12>

00000cdc <__floatsisf>:
     cdc:	97 fb       	bst	r25, 7
     cde:	3e f4       	brtc	.+14     	; 0xcee <__floatsisf+0x12>
     ce0:	90 95       	com	r25
     ce2:	80 95       	com	r24
     ce4:	70 95       	com	r23
     ce6:	61 95       	neg	r22
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	8f 4f       	sbci	r24, 0xFF	; 255
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	99 23       	and	r25, r25
     cf0:	a9 f0       	breq	.+42     	; 0xd1c <__floatsisf+0x40>
     cf2:	f9 2f       	mov	r31, r25
     cf4:	96 e9       	ldi	r25, 0x96	; 150
     cf6:	bb 27       	eor	r27, r27
     cf8:	93 95       	inc	r25
     cfa:	f6 95       	lsr	r31
     cfc:	87 95       	ror	r24
     cfe:	77 95       	ror	r23
     d00:	67 95       	ror	r22
     d02:	b7 95       	ror	r27
     d04:	f1 11       	cpse	r31, r1
     d06:	f8 cf       	rjmp	.-16     	; 0xcf8 <__floatsisf+0x1c>
     d08:	fa f4       	brpl	.+62     	; 0xd48 <__floatsisf+0x6c>
     d0a:	bb 0f       	add	r27, r27
     d0c:	11 f4       	brne	.+4      	; 0xd12 <__floatsisf+0x36>
     d0e:	60 ff       	sbrs	r22, 0
     d10:	1b c0       	rjmp	.+54     	; 0xd48 <__floatsisf+0x6c>
     d12:	6f 5f       	subi	r22, 0xFF	; 255
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	8f 4f       	sbci	r24, 0xFF	; 255
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	16 c0       	rjmp	.+44     	; 0xd48 <__floatsisf+0x6c>
     d1c:	88 23       	and	r24, r24
     d1e:	11 f0       	breq	.+4      	; 0xd24 <__floatsisf+0x48>
     d20:	96 e9       	ldi	r25, 0x96	; 150
     d22:	11 c0       	rjmp	.+34     	; 0xd46 <__floatsisf+0x6a>
     d24:	77 23       	and	r23, r23
     d26:	21 f0       	breq	.+8      	; 0xd30 <__floatsisf+0x54>
     d28:	9e e8       	ldi	r25, 0x8E	; 142
     d2a:	87 2f       	mov	r24, r23
     d2c:	76 2f       	mov	r23, r22
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <__floatsisf+0x5e>
     d30:	66 23       	and	r22, r22
     d32:	71 f0       	breq	.+28     	; 0xd50 <__floatsisf+0x74>
     d34:	96 e8       	ldi	r25, 0x86	; 134
     d36:	86 2f       	mov	r24, r22
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	2a f0       	brmi	.+10     	; 0xd48 <__floatsisf+0x6c>
     d3e:	9a 95       	dec	r25
     d40:	66 0f       	add	r22, r22
     d42:	77 1f       	adc	r23, r23
     d44:	88 1f       	adc	r24, r24
     d46:	da f7       	brpl	.-10     	; 0xd3e <__floatsisf+0x62>
     d48:	88 0f       	add	r24, r24
     d4a:	96 95       	lsr	r25
     d4c:	87 95       	ror	r24
     d4e:	97 f9       	bld	r25, 7
     d50:	08 95       	ret

00000d52 <__fp_inf>:
     d52:	97 f9       	bld	r25, 7
     d54:	9f 67       	ori	r25, 0x7F	; 127
     d56:	80 e8       	ldi	r24, 0x80	; 128
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	08 95       	ret

00000d5e <__fp_nan>:
     d5e:	9f ef       	ldi	r25, 0xFF	; 255
     d60:	80 ec       	ldi	r24, 0xC0	; 192
     d62:	08 95       	ret

00000d64 <__fp_pscA>:
     d64:	00 24       	eor	r0, r0
     d66:	0a 94       	dec	r0
     d68:	16 16       	cp	r1, r22
     d6a:	17 06       	cpc	r1, r23
     d6c:	18 06       	cpc	r1, r24
     d6e:	09 06       	cpc	r0, r25
     d70:	08 95       	ret

00000d72 <__fp_pscB>:
     d72:	00 24       	eor	r0, r0
     d74:	0a 94       	dec	r0
     d76:	12 16       	cp	r1, r18
     d78:	13 06       	cpc	r1, r19
     d7a:	14 06       	cpc	r1, r20
     d7c:	05 06       	cpc	r0, r21
     d7e:	08 95       	ret

00000d80 <__fp_round>:
     d80:	09 2e       	mov	r0, r25
     d82:	03 94       	inc	r0
     d84:	00 0c       	add	r0, r0
     d86:	11 f4       	brne	.+4      	; 0xd8c <__fp_round+0xc>
     d88:	88 23       	and	r24, r24
     d8a:	52 f0       	brmi	.+20     	; 0xda0 <__fp_round+0x20>
     d8c:	bb 0f       	add	r27, r27
     d8e:	40 f4       	brcc	.+16     	; 0xda0 <__fp_round+0x20>
     d90:	bf 2b       	or	r27, r31
     d92:	11 f4       	brne	.+4      	; 0xd98 <__fp_round+0x18>
     d94:	60 ff       	sbrs	r22, 0
     d96:	04 c0       	rjmp	.+8      	; 0xda0 <__fp_round+0x20>
     d98:	6f 5f       	subi	r22, 0xFF	; 255
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	8f 4f       	sbci	r24, 0xFF	; 255
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	08 95       	ret

00000da2 <__fp_split3>:
     da2:	57 fd       	sbrc	r21, 7
     da4:	90 58       	subi	r25, 0x80	; 128
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	59 f0       	breq	.+22     	; 0xdc2 <__fp_splitA+0x10>
     dac:	5f 3f       	cpi	r21, 0xFF	; 255
     dae:	71 f0       	breq	.+28     	; 0xdcc <__fp_splitA+0x1a>
     db0:	47 95       	ror	r20

00000db2 <__fp_splitA>:
     db2:	88 0f       	add	r24, r24
     db4:	97 fb       	bst	r25, 7
     db6:	99 1f       	adc	r25, r25
     db8:	61 f0       	breq	.+24     	; 0xdd2 <__fp_splitA+0x20>
     dba:	9f 3f       	cpi	r25, 0xFF	; 255
     dbc:	79 f0       	breq	.+30     	; 0xddc <__fp_splitA+0x2a>
     dbe:	87 95       	ror	r24
     dc0:	08 95       	ret
     dc2:	12 16       	cp	r1, r18
     dc4:	13 06       	cpc	r1, r19
     dc6:	14 06       	cpc	r1, r20
     dc8:	55 1f       	adc	r21, r21
     dca:	f2 cf       	rjmp	.-28     	; 0xdb0 <__fp_split3+0xe>
     dcc:	46 95       	lsr	r20
     dce:	f1 df       	rcall	.-30     	; 0xdb2 <__fp_splitA>
     dd0:	08 c0       	rjmp	.+16     	; 0xde2 <__fp_splitA+0x30>
     dd2:	16 16       	cp	r1, r22
     dd4:	17 06       	cpc	r1, r23
     dd6:	18 06       	cpc	r1, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	f1 cf       	rjmp	.-30     	; 0xdbe <__fp_splitA+0xc>
     ddc:	86 95       	lsr	r24
     dde:	71 05       	cpc	r23, r1
     de0:	61 05       	cpc	r22, r1
     de2:	08 94       	sec
     de4:	08 95       	ret

00000de6 <__fp_zero>:
     de6:	e8 94       	clt

00000de8 <__fp_szero>:
     de8:	bb 27       	eor	r27, r27
     dea:	66 27       	eor	r22, r22
     dec:	77 27       	eor	r23, r23
     dee:	cb 01       	movw	r24, r22
     df0:	97 f9       	bld	r25, 7
     df2:	08 95       	ret

00000df4 <__mulsf3>:
     df4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__mulsf3x>
     df8:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <__fp_round>
     dfc:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_pscA>
     e00:	38 f0       	brcs	.+14     	; 0xe10 <__mulsf3+0x1c>
     e02:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_pscB>
     e06:	20 f0       	brcs	.+8      	; 0xe10 <__mulsf3+0x1c>
     e08:	95 23       	and	r25, r21
     e0a:	11 f0       	breq	.+4      	; 0xe10 <__mulsf3+0x1c>
     e0c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
     e10:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__fp_nan>
     e14:	11 24       	eor	r1, r1
     e16:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>

00000e1a <__mulsf3x>:
     e1a:	0e 94 d1 06 	call	0xda2	; 0xda2 <__fp_split3>
     e1e:	70 f3       	brcs	.-36     	; 0xdfc <__mulsf3+0x8>

00000e20 <__mulsf3_pse>:
     e20:	95 9f       	mul	r25, r21
     e22:	c1 f3       	breq	.-16     	; 0xe14 <__mulsf3+0x20>
     e24:	95 0f       	add	r25, r21
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	55 1f       	adc	r21, r21
     e2a:	62 9f       	mul	r22, r18
     e2c:	f0 01       	movw	r30, r0
     e2e:	72 9f       	mul	r23, r18
     e30:	bb 27       	eor	r27, r27
     e32:	f0 0d       	add	r31, r0
     e34:	b1 1d       	adc	r27, r1
     e36:	63 9f       	mul	r22, r19
     e38:	aa 27       	eor	r26, r26
     e3a:	f0 0d       	add	r31, r0
     e3c:	b1 1d       	adc	r27, r1
     e3e:	aa 1f       	adc	r26, r26
     e40:	64 9f       	mul	r22, r20
     e42:	66 27       	eor	r22, r22
     e44:	b0 0d       	add	r27, r0
     e46:	a1 1d       	adc	r26, r1
     e48:	66 1f       	adc	r22, r22
     e4a:	82 9f       	mul	r24, r18
     e4c:	22 27       	eor	r18, r18
     e4e:	b0 0d       	add	r27, r0
     e50:	a1 1d       	adc	r26, r1
     e52:	62 1f       	adc	r22, r18
     e54:	73 9f       	mul	r23, r19
     e56:	b0 0d       	add	r27, r0
     e58:	a1 1d       	adc	r26, r1
     e5a:	62 1f       	adc	r22, r18
     e5c:	83 9f       	mul	r24, r19
     e5e:	a0 0d       	add	r26, r0
     e60:	61 1d       	adc	r22, r1
     e62:	22 1f       	adc	r18, r18
     e64:	74 9f       	mul	r23, r20
     e66:	33 27       	eor	r19, r19
     e68:	a0 0d       	add	r26, r0
     e6a:	61 1d       	adc	r22, r1
     e6c:	23 1f       	adc	r18, r19
     e6e:	84 9f       	mul	r24, r20
     e70:	60 0d       	add	r22, r0
     e72:	21 1d       	adc	r18, r1
     e74:	82 2f       	mov	r24, r18
     e76:	76 2f       	mov	r23, r22
     e78:	6a 2f       	mov	r22, r26
     e7a:	11 24       	eor	r1, r1
     e7c:	9f 57       	subi	r25, 0x7F	; 127
     e7e:	50 40       	sbci	r21, 0x00	; 0
     e80:	9a f0       	brmi	.+38     	; 0xea8 <__mulsf3_pse+0x88>
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__mulsf3_pse+0xa0>
     e84:	88 23       	and	r24, r24
     e86:	4a f0       	brmi	.+18     	; 0xe9a <__mulsf3_pse+0x7a>
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	bb 1f       	adc	r27, r27
     e8e:	66 1f       	adc	r22, r22
     e90:	77 1f       	adc	r23, r23
     e92:	88 1f       	adc	r24, r24
     e94:	91 50       	subi	r25, 0x01	; 1
     e96:	50 40       	sbci	r21, 0x00	; 0
     e98:	a9 f7       	brne	.-22     	; 0xe84 <__mulsf3_pse+0x64>
     e9a:	9e 3f       	cpi	r25, 0xFE	; 254
     e9c:	51 05       	cpc	r21, r1
     e9e:	80 f0       	brcs	.+32     	; 0xec0 <__mulsf3_pse+0xa0>
     ea0:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__fp_inf>
     ea4:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__fp_szero>
     ea8:	5f 3f       	cpi	r21, 0xFF	; 255
     eaa:	e4 f3       	brlt	.-8      	; 0xea4 <__mulsf3_pse+0x84>
     eac:	98 3e       	cpi	r25, 0xE8	; 232
     eae:	d4 f3       	brlt	.-12     	; 0xea4 <__mulsf3_pse+0x84>
     eb0:	86 95       	lsr	r24
     eb2:	77 95       	ror	r23
     eb4:	67 95       	ror	r22
     eb6:	b7 95       	ror	r27
     eb8:	f7 95       	ror	r31
     eba:	e7 95       	ror	r30
     ebc:	9f 5f       	subi	r25, 0xFF	; 255
     ebe:	c1 f7       	brne	.-16     	; 0xeb0 <__mulsf3_pse+0x90>
     ec0:	fe 2b       	or	r31, r30
     ec2:	88 0f       	add	r24, r24
     ec4:	91 1d       	adc	r25, r1
     ec6:	96 95       	lsr	r25
     ec8:	87 95       	ror	r24
     eca:	97 f9       	bld	r25, 7
     ecc:	08 95       	ret

00000ece <_ZN15OrangutanAnalog7setModeEh.part.0>:
     ece:	ec e7       	ldi	r30, 0x7C	; 124
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 7d       	andi	r24, 0xDF	; 223
     ed6:	80 83       	st	Z, r24
     ed8:	08 95       	ret

00000eda <_ZN15OrangutanAnalog7setModeEh>:
     eda:	81 11       	cpse	r24, r1
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <_ZN15OrangutanAnalog7setModeEh+0xa>
     ede:	0e 94 67 07 	call	0xece	; 0xece <_ZN15OrangutanAnalog7setModeEh.part.0>
     ee2:	08 95       	ret
     ee4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ee8:	80 62       	ori	r24, 0x20	; 32
     eea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     eee:	08 95       	ret

00000ef0 <_ZN15OrangutanAnalog7getModeEv>:
     ef0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ef4:	85 fb       	bst	r24, 5
     ef6:	88 27       	eor	r24, r24
     ef8:	80 f9       	bld	r24, 0
     efa:	08 95       	ret

00000efc <_ZN15OrangutanAnalog16conversionResultEv>:
     efc:	0e 94 78 07 	call	0xef0	; 0xef0 <_ZN15OrangutanAnalog7getModeEv>
     f00:	88 23       	and	r24, r24
     f02:	21 f0       	breq	.+8      	; 0xf0c <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     f04:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	08 95       	ret
     f0c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     f10:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f14:	08 95       	ret

00000f16 <_ZN15OrangutanAnalog15startConversionEhh>:
     f16:	80 32       	cpi	r24, 0x20	; 32
     f18:	a0 f4       	brcc	.+40     	; 0xf42 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     f1a:	97 e8       	ldi	r25, 0x87	; 135
     f1c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f20:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f24:	66 23       	and	r22, r22
     f26:	11 f0       	breq	.+4      	; 0xf2c <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     f28:	90 6c       	ori	r25, 0xC0	; 192
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     f2c:	9f 77       	andi	r25, 0x7F	; 127
     f2e:	90 64       	ori	r25, 0x40	; 64
     f30:	90 7e       	andi	r25, 0xE0	; 224
     f32:	98 2b       	or	r25, r24
     f34:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f38:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f3c:	80 64       	ori	r24, 0x40	; 64
     f3e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f42:	08 95       	ret

00000f44 <_ZN15OrangutanAnalog11readAverageEhj>:
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 ea       	ldi	r30, 0xA8	; 168
     f4a:	f7 e0       	ldi	r31, 0x07	; 7
     f4c:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__prologue_saves__+0x14>
     f50:	eb 01       	movw	r28, r22
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN15OrangutanAnalog15startConversionEhh>
     f58:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f5c:	86 fd       	sbrc	r24, 6
     f5e:	fc cf       	rjmp	.-8      	; 0xf58 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     f60:	8e 01       	movw	r16, r28
     f62:	c1 2c       	mov	r12, r1
     f64:	d1 2c       	mov	r13, r1
     f66:	76 01       	movw	r14, r12
     f68:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f6c:	80 64       	ori	r24, 0x40	; 64
     f6e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f72:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f76:	86 fd       	sbrc	r24, 6
     f78:	fc cf       	rjmp	.-8      	; 0xf72 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     f7a:	0e 94 7e 07 	call	0xefc	; 0xefc <_ZN15OrangutanAnalog16conversionResultEv>
     f7e:	c8 0e       	add	r12, r24
     f80:	d9 1e       	adc	r13, r25
     f82:	e1 1c       	adc	r14, r1
     f84:	f1 1c       	adc	r15, r1
     f86:	01 50       	subi	r16, 0x01	; 1
     f88:	11 09       	sbc	r17, r1
     f8a:	01 15       	cp	r16, r1
     f8c:	11 05       	cpc	r17, r1
     f8e:	61 f7       	brne	.-40     	; 0xf68 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     f90:	ce 01       	movw	r24, r28
     f92:	96 95       	lsr	r25
     f94:	87 95       	ror	r24
     f96:	c0 34       	cpi	r28, 0x40	; 64
     f98:	d1 05       	cpc	r29, r1
     f9a:	38 f4       	brcc	.+14     	; 0xfaa <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     f9c:	8c 0d       	add	r24, r12
     f9e:	9d 1d       	adc	r25, r13
     fa0:	be 01       	movw	r22, r28
     fa2:	0e 94 94 10 	call	0x2128	; 0x2128 <__udivmodhi4>
     fa6:	cb 01       	movw	r24, r22
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     faa:	a7 01       	movw	r20, r14
     fac:	96 01       	movw	r18, r12
     fae:	28 0f       	add	r18, r24
     fb0:	39 1f       	adc	r19, r25
     fb2:	41 1d       	adc	r20, r1
     fb4:	51 1d       	adc	r21, r1
     fb6:	ca 01       	movw	r24, r20
     fb8:	b9 01       	movw	r22, r18
     fba:	9e 01       	movw	r18, r28
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	0e 94 bc 10 	call	0x2178	; 0x2178 <__udivmodsi4>
     fc4:	c9 01       	movw	r24, r18
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	e8 e0       	ldi	r30, 0x08	; 8
     fcc:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__epilogue_restores__+0x14>

00000fd0 <_ZN15OrangutanAnalog12toMillivoltsEj>:
     fd0:	cf 92       	push	r12
     fd2:	df 92       	push	r13
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     fdc:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     fe0:	9c 01       	movw	r18, r24
     fe2:	0e 94 03 11 	call	0x2206	; 0x2206 <__umulhisi3>
     fe6:	6b 01       	movw	r12, r22
     fe8:	7c 01       	movw	r14, r24
     fea:	0e 94 78 07 	call	0xef0	; 0xef0 <_ZN15OrangutanAnalog7getModeEv>
     fee:	88 23       	and	r24, r24
     ff0:	59 f0       	breq	.+22     	; 0x1008 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     ff2:	c7 01       	movw	r24, r14
     ff4:	b6 01       	movw	r22, r12
     ff6:	61 58       	subi	r22, 0x81	; 129
     ff8:	7f 4f       	sbci	r23, 0xFF	; 255
     ffa:	8f 4f       	sbci	r24, 0xFF	; 255
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	2f ef       	ldi	r18, 0xFF	; 255
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	0a c0       	rjmp	.+20     	; 0x101c <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1008:	c7 01       	movw	r24, r14
    100a:	b6 01       	movw	r22, r12
    100c:	61 50       	subi	r22, 0x01	; 1
    100e:	7e 4f       	sbci	r23, 0xFE	; 254
    1010:	8f 4f       	sbci	r24, 0xFF	; 255
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	2f ef       	ldi	r18, 0xFF	; 255
    1016:	33 e0       	ldi	r19, 0x03	; 3
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	0e 94 bc 10 	call	0x2178	; 0x2178 <__udivmodsi4>
    1020:	c9 01       	movw	r24, r18
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	df 90       	pop	r13
    1028:	cf 90       	pop	r12
    102a:	08 95       	ret

0000102c <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    102c:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN15OrangutanAnalog11readAverageEhj>
    1030:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1034:	08 95       	ret

00001036 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	0e 94 78 07 	call	0xef0	; 0xef0 <_ZN15OrangutanAnalog7getModeEv>
    1040:	18 2f       	mov	r17, r24
    1042:	0e 94 67 07 	call	0xece	; 0xece <_ZN15OrangutanAnalog7setModeEh.part.0>
    1046:	6a e0       	ldi	r22, 0x0A	; 10
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	86 e0       	ldi	r24, 0x06	; 6
    104c:	0e 94 16 08 	call	0x102c	; 0x102c <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1050:	ec 01       	movw	r28, r24
    1052:	81 2f       	mov	r24, r17
    1054:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN15OrangutanAnalog7setModeEh>
    1058:	ce 01       	movw	r24, r28
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	8c 0f       	add	r24, r28
    1060:	9d 1f       	adc	r25, r29
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	96 95       	lsr	r25
    1066:	87 95       	ror	r24
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	08 95       	ret

00001070 <read_battery_millivolts_3pi>:
    1070:	0e 94 1b 08 	call	0x1036	; 0x1036 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1074:	08 95       	ret

00001076 <delay_us.constprop.0>:
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	6f 93       	push	r22
    107c:	64 e0       	ldi	r22, 0x04	; 4
    107e:	6a 95       	dec	r22
    1080:	f1 f7       	brne	.-4      	; 0x107e <delay_us.constprop.0+0x8>
    1082:	6f 91       	pop	r22
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	c9 f7       	brne	.-14     	; 0x107a <delay_us.constprop.0+0x4>
    1088:	08 95       	ret

0000108a <_ZN12OrangutanLCD8busyWaitEv>:
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	1a b1       	in	r17, 0x0a	; 10
    1094:	57 98       	cbi	0x0a, 7	; 10
    1096:	5a 98       	cbi	0x0b, 2	; 11
    1098:	28 9a       	sbi	0x05, 0	; 5
    109a:	c0 e0       	ldi	r28, 0x00	; 0
    109c:	d0 e0       	ldi	r29, 0x00	; 0
    109e:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    10a2:	5c 9a       	sbi	0x0b, 4	; 11
    10a4:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    10a8:	09 b1       	in	r16, 0x09	; 9
    10aa:	5c 98       	cbi	0x0b, 4	; 11
    10ac:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    10b0:	5c 9a       	sbi	0x0b, 4	; 11
    10b2:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    10b6:	5c 98       	cbi	0x0b, 4	; 11
    10b8:	24 96       	adiw	r28, 0x04	; 4
    10ba:	07 ff       	sbrs	r16, 7
    10bc:	10 c0       	rjmp	.+32     	; 0x10de <_ZN12OrangutanLCD8busyWaitEv+0x54>
    10be:	ae 01       	movw	r20, r28
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
    10c8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
    10cc:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <__data_end+0x2>
    10d0:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <__data_end+0x3>
    10d4:	48 17       	cp	r20, r24
    10d6:	59 07       	cpc	r21, r25
    10d8:	6a 07       	cpc	r22, r26
    10da:	7b 07       	cpc	r23, r27
    10dc:	00 f3       	brcs	.-64     	; 0x109e <_ZN12OrangutanLCD8busyWaitEv+0x14>
    10de:	1a b9       	out	0x0a, r17	; 10
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <_ZN12OrangutanLCD8sendDataEh>:
    10ea:	95 b1       	in	r25, 0x05	; 5
    10ec:	28 2f       	mov	r18, r24
    10ee:	21 70       	andi	r18, 0x01	; 1
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	48 2f       	mov	r20, r24
    10f8:	46 70       	andi	r20, 0x06	; 6
    10fa:	68 e0       	ldi	r22, 0x08	; 8
    10fc:	46 9f       	mul	r20, r22
    10fe:	a0 01       	movw	r20, r0
    1100:	11 24       	eor	r1, r1
    1102:	24 2b       	or	r18, r20
    1104:	9d 7c       	andi	r25, 0xCD	; 205
    1106:	29 2b       	or	r18, r25
    1108:	25 b9       	out	0x05, r18	; 5
    110a:	9b b1       	in	r25, 0x0b	; 11
    110c:	88 70       	andi	r24, 0x08	; 8
    110e:	82 95       	swap	r24
    1110:	80 7f       	andi	r24, 0xF0	; 240
    1112:	9f 77       	andi	r25, 0x7F	; 127
    1114:	89 2b       	or	r24, r25
    1116:	8b b9       	out	0x0b, r24	; 11
    1118:	5c 9a       	sbi	0x0b, 4	; 11
    111a:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    111e:	5c 98       	cbi	0x0b, 4	; 11
    1120:	0e 94 3b 08 	call	0x1076	; 0x1076 <delay_us.constprop.0>
    1124:	08 95       	ret

00001126 <_ZN12OrangutanLCD4sendEhhh>:
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e9 e9       	ldi	r30, 0x99	; 153
    112c:	f8 e0       	ldi	r31, 0x08	; 8
    112e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x16>
    1132:	c8 2f       	mov	r28, r24
    1134:	d6 2e       	mov	r13, r22
    1136:	e4 2e       	mov	r14, r20
    1138:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <_ZZN12OrangutanLCD4initEvE11initialized>
    113c:	81 11       	cpse	r24, r1
    113e:	05 c0       	rjmp	.+10     	; 0x114a <_ZN12OrangutanLCD4sendEhhh+0x24>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <_ZZN12OrangutanLCD4initEvE11initialized>
    1146:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <_ZN12OrangutanLCD5init2Ev>
    114a:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN12OrangutanLCD8busyWaitEv>
    114e:	14 b1       	in	r17, 0x04	; 4
    1150:	d5 b1       	in	r29, 0x05	; 5
    1152:	fa b0       	in	r15, 0x0a	; 10
    1154:	0b b1       	in	r16, 0x0b	; 11
    1156:	28 98       	cbi	0x05, 0	; 5
    1158:	dd 20       	and	r13, r13
    115a:	11 f0       	breq	.+4      	; 0x1160 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    115c:	5a 9a       	sbi	0x0b, 2	; 11
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    1160:	5a 98       	cbi	0x0b, 2	; 11
    1162:	94 b1       	in	r25, 0x04	; 4
    1164:	92 63       	ori	r25, 0x32	; 50
    1166:	94 b9       	out	0x04, r25	; 4
    1168:	57 9a       	sbi	0x0a, 7	; 10
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	e8 16       	cp	r14, r24
    116e:	29 f0       	breq	.+10     	; 0x117a <_ZN12OrangutanLCD4sendEhhh+0x54>
    1170:	8c 2f       	mov	r24, r28
    1172:	82 95       	swap	r24
    1174:	8f 70       	andi	r24, 0x0F	; 15
    1176:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD8sendDataEh>
    117a:	8c 2f       	mov	r24, r28
    117c:	8f 70       	andi	r24, 0x0F	; 15
    117e:	0e 94 75 08 	call	0x10ea	; 0x10ea <_ZN12OrangutanLCD8sendDataEh>
    1182:	fa b8       	out	0x0a, r15	; 10
    1184:	0b b9       	out	0x0b, r16	; 11
    1186:	14 b9       	out	0x04, r17	; 4
    1188:	d5 b9       	out	0x05, r29	; 5
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	e7 e0       	ldi	r30, 0x07	; 7
    1190:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x16>

00001194 <_ZN12OrangutanLCD8send_cmdEh>:
    1194:	42 e0       	ldi	r20, 0x02	; 2
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN12OrangutanLCD4sendEhhh>
    119c:	08 95       	ret

0000119e <_ZN12OrangutanLCD9send_dataEh>:
    119e:	42 e0       	ldi	r20, 0x02	; 2
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN12OrangutanLCD4sendEhhh>
    11a6:	08 95       	ret

000011a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	0e 94 93 08 	call	0x1126	; 0x1126 <_ZN12OrangutanLCD4sendEhhh>
    11b0:	08 95       	ret

000011b2 <_ZN12OrangutanLCD5init2Ev>:
    11b2:	80 e1       	ldi	r24, 0x10	; 16
    11b4:	97 e2       	ldi	r25, 0x27	; 39
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    11be:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    11c2:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <__data_end+0x2>
    11c6:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <__data_end+0x3>
    11ca:	52 9a       	sbi	0x0a, 2	; 10
    11cc:	20 9a       	sbi	0x04, 0	; 4
    11ce:	54 9a       	sbi	0x0a, 4	; 10
    11d0:	8e e1       	ldi	r24, 0x1E	; 30
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11de:	86 e0       	ldi	r24, 0x06	; 6
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1208:	82 e0       	ldi	r24, 0x02	; 2
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
    1210:	88 e2       	ldi	r24, 0x28	; 40
    1212:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    1216:	88 e0       	ldi	r24, 0x08	; 8
    1218:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    1222:	86 e0       	ldi	r24, 0x06	; 6
    1224:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    1228:	8c e0       	ldi	r24, 0x0C	; 12
    122a:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    122e:	08 95       	ret

00001230 <_ZN12OrangutanLCD5clearEv>:
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    1236:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <printf_chars>
    123a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <printf_chars+0x1>
    123e:	89 2b       	or	r24, r25
    1240:	f9 f0       	breq	.+62     	; 0x1280 <_ZN12OrangutanLCD5clearEv+0x50>
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	a0 e2       	ldi	r26, 0x20	; 32
    1246:	26 2f       	mov	r18, r22
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <numLCDCols>
    124e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <numLCDRows>
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	78 9f       	mul	r23, r24
    1258:	a0 01       	movw	r20, r0
    125a:	79 9f       	mul	r23, r25
    125c:	50 0d       	add	r21, r0
    125e:	11 24       	eor	r1, r1
    1260:	24 17       	cp	r18, r20
    1262:	35 07       	cpc	r19, r21
    1264:	4c f4       	brge	.+18     	; 0x1278 <_ZN12OrangutanLCD5clearEv+0x48>
    1266:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <printf_chars>
    126a:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <printf_chars+0x1>
    126e:	e2 0f       	add	r30, r18
    1270:	f3 1f       	adc	r31, r19
    1272:	a0 83       	st	Z, r26
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	e7 cf       	rjmp	.-50     	; 0x1246 <_ZN12OrangutanLCD5clearEv+0x16>
    1278:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <col>
    127c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <row>
    1280:	08 95       	ret

00001282 <clear>:
    1282:	0e 94 18 09 	call	0x1230	; 0x1230 <_ZN12OrangutanLCD5clearEv>
    1286:	08 95       	ret

00001288 <_ZN12OrangutanLCD5printEPKc>:
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	ec 01       	movw	r28, r24
    128e:	89 91       	ld	r24, Y+
    1290:	88 23       	and	r24, r24
    1292:	19 f0       	breq	.+6      	; 0x129a <_ZN12OrangutanLCD5printEPKc+0x12>
    1294:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    1298:	fa cf       	rjmp	.-12     	; 0x128e <_ZN12OrangutanLCD5printEPKc+0x6>
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <print>:
    12a0:	0e 94 44 09 	call	0x1288	; 0x1288 <_ZN12OrangutanLCD5printEPKc>
    12a4:	08 95       	ret

000012a6 <_ZN12OrangutanLCD5printEm>:
    12a6:	aa e0       	ldi	r26, 0x0A	; 10
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e9 e5       	ldi	r30, 0x59	; 89
    12ac:	f9 e0       	ldi	r31, 0x09	; 9
    12ae:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__prologue_saves__+0x14>
    12b2:	1a e0       	ldi	r17, 0x0A	; 10
    12b4:	5a e0       	ldi	r21, 0x0A	; 10
    12b6:	c5 2e       	mov	r12, r21
    12b8:	d1 2c       	mov	r13, r1
    12ba:	e1 2c       	mov	r14, r1
    12bc:	f1 2c       	mov	r15, r1
    12be:	06 2f       	mov	r16, r22
    12c0:	a7 01       	movw	r20, r14
    12c2:	96 01       	movw	r18, r12
    12c4:	0e 94 bc 10 	call	0x2178	; 0x2178 <__udivmodsi4>
    12c8:	ca 01       	movw	r24, r20
    12ca:	b9 01       	movw	r22, r18
    12cc:	11 50       	subi	r17, 0x01	; 1
    12ce:	e1 e0       	ldi	r30, 0x01	; 1
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	ec 0f       	add	r30, r28
    12d4:	fd 1f       	adc	r31, r29
    12d6:	e1 0f       	add	r30, r17
    12d8:	f1 1d       	adc	r31, r1
    12da:	00 5d       	subi	r16, 0xD0	; 208
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	62 9f       	mul	r22, r18
    12e0:	00 19       	sub	r16, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	00 83       	st	Z, r16
    12e6:	61 15       	cp	r22, r1
    12e8:	71 05       	cpc	r23, r1
    12ea:	81 05       	cpc	r24, r1
    12ec:	91 05       	cpc	r25, r1
    12ee:	39 f7       	brne	.-50     	; 0x12be <_ZN12OrangutanLCD5printEm+0x18>
    12f0:	1a 30       	cpi	r17, 0x0A	; 10
    12f2:	58 f4       	brcc	.+22     	; 0x130a <_ZN12OrangutanLCD5printEm+0x64>
    12f4:	e1 e0       	ldi	r30, 0x01	; 1
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	ec 0f       	add	r30, r28
    12fa:	fd 1f       	adc	r31, r29
    12fc:	e1 0f       	add	r30, r17
    12fe:	f1 1d       	adc	r31, r1
    1300:	80 81       	ld	r24, Z
    1302:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    1306:	1f 5f       	subi	r17, 0xFF	; 255
    1308:	f3 cf       	rjmp	.-26     	; 0x12f0 <_ZN12OrangutanLCD5printEm+0x4a>
    130a:	2a 96       	adiw	r28, 0x0a	; 10
    130c:	e8 e0       	ldi	r30, 0x08	; 8
    130e:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__epilogue_restores__+0x14>

00001312 <_ZN12OrangutanLCD5printEl>:
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	6b 01       	movw	r12, r22
    131c:	7c 01       	movw	r14, r24
    131e:	97 ff       	sbrs	r25, 7
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <_ZN12OrangutanLCD5printEl+0x26>
    1322:	f0 94       	com	r15
    1324:	e0 94       	com	r14
    1326:	d0 94       	com	r13
    1328:	c0 94       	com	r12
    132a:	c1 1c       	adc	r12, r1
    132c:	d1 1c       	adc	r13, r1
    132e:	e1 1c       	adc	r14, r1
    1330:	f1 1c       	adc	r15, r1
    1332:	8d e2       	ldi	r24, 0x2D	; 45
    1334:	0e 94 cf 08 	call	0x119e	; 0x119e <_ZN12OrangutanLCD9send_dataEh>
    1338:	c7 01       	movw	r24, r14
    133a:	b6 01       	movw	r22, r12
    133c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <_ZN12OrangutanLCD5printEm>
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	cf 90       	pop	r12
    1348:	08 95       	ret

0000134a <print_long>:
    134a:	0e 94 89 09 	call	0x1312	; 0x1312 <_ZN12OrangutanLCD5printEl>
    134e:	08 95       	ret

00001350 <_ZN12OrangutanLCD6gotoXYEhh>:
    1350:	a5 e0       	ldi	r26, 0x05	; 5
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ee ea       	ldi	r30, 0xAE	; 174
    1356:	f9 e0       	ldi	r31, 0x09	; 9
    1358:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__prologue_saves__+0x1e>
    135c:	18 2f       	mov	r17, r24
    135e:	80 e8       	ldi	r24, 0x80	; 128
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	80 ec       	ldi	r24, 0xC0	; 192
    1364:	8a 83       	std	Y+2, r24	; 0x02
    1366:	84 e9       	ldi	r24, 0x94	; 148
    1368:	8b 83       	std	Y+3, r24	; 0x03
    136a:	84 ed       	ldi	r24, 0xD4	; 212
    136c:	8c 83       	std	Y+4, r24	; 0x04
    136e:	fe 01       	movw	r30, r28
    1370:	e6 0f       	add	r30, r22
    1372:	f1 1d       	adc	r31, r1
    1374:	81 81       	ldd	r24, Z+1	; 0x01
    1376:	81 0f       	add	r24, r17
    1378:	6d 83       	std	Y+5, r22	; 0x05
    137a:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN12OrangutanLCD8send_cmdEh>
    137e:	10 93 3e 01 	sts	0x013E, r17	; 0x80013e <col>
    1382:	6d 81       	ldd	r22, Y+5	; 0x05
    1384:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <row>
    1388:	25 96       	adiw	r28, 0x05	; 5
    138a:	e3 e0       	ldi	r30, 0x03	; 3
    138c:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__epilogue_restores__+0x1e>

00001390 <lcd_goto_xy>:
    1390:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN12OrangutanLCD6gotoXYEhh>
    1394:	08 95       	ret

00001396 <_ZN16OrangutanDigital9setOutputEhh>:
    1396:	88 30       	cpi	r24, 0x08	; 8
    1398:	58 f4       	brcc	.+22     	; 0x13b0 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    139e:	99 0f       	add	r25, r25
    13a0:	8a 95       	dec	r24
    13a2:	ea f7       	brpl	.-6      	; 0x139e <_ZN16OrangutanDigital9setOutputEhh+0x8>
    13a4:	89 2f       	mov	r24, r25
    13a6:	aa e2       	ldi	r26, 0x2A	; 42
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	eb e2       	ldi	r30, 0x2B	; 43
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	21 c0       	rjmp	.+66     	; 0x13f2 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13b0:	8e 30       	cpi	r24, 0x0E	; 14
    13b2:	60 f4       	brcc	.+24     	; 0x13cc <_ZN16OrangutanDigital9setOutputEhh+0x36>
    13b4:	98 ef       	ldi	r25, 0xF8	; 248
    13b6:	98 0f       	add	r25, r24
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <_ZN16OrangutanDigital9setOutputEhh+0x28>
    13bc:	88 0f       	add	r24, r24
    13be:	9a 95       	dec	r25
    13c0:	ea f7       	brpl	.-6      	; 0x13bc <_ZN16OrangutanDigital9setOutputEhh+0x26>
    13c2:	a4 e2       	ldi	r26, 0x24	; 36
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e2       	ldi	r30, 0x25	; 37
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	13 c0       	rjmp	.+38     	; 0x13f2 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13cc:	85 31       	cpi	r24, 0x15	; 21
    13ce:	60 f4       	brcc	.+24     	; 0x13e8 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    13d0:	92 ef       	ldi	r25, 0xF2	; 242
    13d2:	98 0f       	add	r25, r24
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <_ZN16OrangutanDigital9setOutputEhh+0x44>
    13d8:	88 0f       	add	r24, r24
    13da:	9a 95       	dec	r25
    13dc:	ea f7       	brpl	.-6      	; 0x13d8 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    13de:	a7 e2       	ldi	r26, 0x27	; 39
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e8 e2       	ldi	r30, 0x28	; 40
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e0 e0       	ldi	r30, 0x00	; 0
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	6f 3f       	cpi	r22, 0xFF	; 255
    13f4:	19 f4       	brne	.+6      	; 0x13fc <_ZN16OrangutanDigital9setOutputEhh+0x66>
    13f6:	90 81       	ld	r25, Z
    13f8:	98 27       	eor	r25, r24
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <_ZN16OrangutanDigital9setOutputEhh+0x78>
    13fc:	66 23       	and	r22, r22
    13fe:	19 f0       	breq	.+6      	; 0x1406 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1400:	90 81       	ld	r25, Z
    1402:	98 2b       	or	r25, r24
    1404:	04 c0       	rjmp	.+8      	; 0x140e <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1406:	20 81       	ld	r18, Z
    1408:	98 2f       	mov	r25, r24
    140a:	90 95       	com	r25
    140c:	92 23       	and	r25, r18
    140e:	90 83       	st	Z, r25
    1410:	9c 91       	ld	r25, X
    1412:	98 2b       	or	r25, r24
    1414:	9c 93       	st	X, r25
    1416:	08 95       	ret

00001418 <_ZN15OrangutanMotors5init2Ev>:
    1418:	83 ef       	ldi	r24, 0xF3	; 243
    141a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    141e:	84 bd       	out	0x24, r24	; 36
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1426:	85 bd       	out	0x25, r24	; 37
    1428:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    142c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1430:	18 bc       	out	0x28, r1	; 40
    1432:	17 bc       	out	0x27, r1	; 39
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	86 e0       	ldi	r24, 0x06	; 6
    1438:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN16OrangutanDigital9setOutputEhh>
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	85 e0       	ldi	r24, 0x05	; 5
    1440:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN16OrangutanDigital9setOutputEhh>
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	8b e0       	ldi	r24, 0x0B	; 11
    1448:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN16OrangutanDigital9setOutputEhh>
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	83 e0       	ldi	r24, 0x03	; 3
    1450:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN16OrangutanDigital9setOutputEhh>
    1454:	08 95       	ret

00001456 <_ZN15OrangutanMotors4initEv>:
    1456:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZZN15OrangutanMotors4initEvE11initialized>
    145a:	81 11       	cpse	r24, r1
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <_ZN15OrangutanMotors4initEv+0x12>
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <_ZZN15OrangutanMotors4initEvE11initialized>
    1464:	0e 94 0c 0a 	call	0x1418	; 0x1418 <_ZN15OrangutanMotors5init2Ev>
    1468:	08 95       	ret

0000146a <_ZN15OrangutanMotors10setM1SpeedEi>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
    1470:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN15OrangutanMotors4initEv>
    1474:	d7 ff       	sbrs	r29, 7
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    1478:	d1 95       	neg	r29
    147a:	c1 95       	neg	r28
    147c:	d1 09       	sbc	r29, r1
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	cf 3f       	cpi	r28, 0xFF	; 255
    1486:	d1 05       	cpc	r29, r1
    1488:	19 f0       	breq	.+6      	; 0x1490 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    148a:	14 f0       	brlt	.+4      	; 0x1490 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    148c:	cf ef       	ldi	r28, 0xFF	; 255
    148e:	d0 e0       	ldi	r29, 0x00	; 0
    1490:	88 23       	and	r24, r24
    1492:	19 f0       	breq	.+6      	; 0x149a <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    1494:	18 bc       	out	0x28, r1	; 40
    1496:	c7 bd       	out	0x27, r28	; 39
    1498:	02 c0       	rjmp	.+4      	; 0x149e <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    149a:	c8 bd       	out	0x28, r28	; 40
    149c:	17 bc       	out	0x27, r1	; 39
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <_ZN15OrangutanMotors10setM2SpeedEi>:
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	ec 01       	movw	r28, r24
    14aa:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN15OrangutanMotors4initEv>
    14ae:	d7 ff       	sbrs	r29, 7
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    14b2:	d1 95       	neg	r29
    14b4:	c1 95       	neg	r28
    14b6:	d1 09       	sbc	r29, r1
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	cf 3f       	cpi	r28, 0xFF	; 255
    14c0:	d1 05       	cpc	r29, r1
    14c2:	19 f0       	breq	.+6      	; 0x14ca <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    14c4:	14 f0       	brlt	.+4      	; 0x14ca <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    14c6:	cf ef       	ldi	r28, 0xFF	; 255
    14c8:	d0 e0       	ldi	r29, 0x00	; 0
    14ca:	88 23       	and	r24, r24
    14cc:	29 f0       	breq	.+10     	; 0x14d8 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    14ce:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    14d2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    14d8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    14dc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <_ZN15OrangutanMotors9setSpeedsEii>:
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	eb 01       	movw	r28, r22
    14ec:	0e 94 35 0a 	call	0x146a	; 0x146a <_ZN15OrangutanMotors10setM1SpeedEi>
    14f0:	ce 01       	movw	r24, r28
    14f2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <_ZN15OrangutanMotors10setM2SpeedEi>
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <set_motors>:
    14fc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <_ZN15OrangutanMotors9setSpeedsEii>
    1500:	08 95       	ret

00001502 <_ZN20OrangutanPushbuttons5init2Ev>:
    1502:	84 b1       	in	r24, 0x04	; 4
    1504:	8d 7c       	andi	r24, 0xCD	; 205
    1506:	84 b9       	out	0x04, r24	; 4
    1508:	85 b1       	in	r24, 0x05	; 5
    150a:	82 63       	ori	r24, 0x32	; 50
    150c:	85 b9       	out	0x05, r24	; 5
    150e:	85 e0       	ldi	r24, 0x05	; 5
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	6f 93       	push	r22
    1514:	64 e0       	ldi	r22, 0x04	; 4
    1516:	6a 95       	dec	r22
    1518:	f1 f7       	brne	.-4      	; 0x1516 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    151a:	6f 91       	pop	r22
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	c9 f7       	brne	.-14     	; 0x1512 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1520:	08 95       	ret

00001522 <_ZN20OrangutanPushbuttons4initEv>:
    1522:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1526:	81 11       	cpse	r24, r1
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <_ZN20OrangutanPushbuttons4initEv+0x12>
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1530:	0e 94 81 0a 	call	0x1502	; 0x1502 <_ZN20OrangutanPushbuttons5init2Ev>
    1534:	08 95       	ret

00001536 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1536:	cf 93       	push	r28
    1538:	c8 2f       	mov	r28, r24
    153a:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN20OrangutanPushbuttons4initEv>
    153e:	83 b1       	in	r24, 0x03	; 3
    1540:	8c 23       	and	r24, r28
    1542:	e9 f3       	breq	.-6      	; 0x153e <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1544:	8a e0       	ldi	r24, 0x0A	; 10
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
    154c:	83 b1       	in	r24, 0x03	; 3
    154e:	8c 23       	and	r24, r28
    1550:	b1 f3       	breq	.-20     	; 0x153e <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1552:	83 b1       	in	r24, 0x03	; 3
    1554:	8c 23       	and	r24, r28
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <wait_for_button_release>:
    155a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    155e:	08 95       	ret

00001560 <_ZN20OrangutanPushbuttons9isPressedEh>:
    1560:	a1 e0       	ldi	r26, 0x01	; 1
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e6 eb       	ldi	r30, 0xB6	; 182
    1566:	fa e0       	ldi	r31, 0x0A	; 10
    1568:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x20>
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN20OrangutanPushbuttons4initEv>
    1572:	93 b1       	in	r25, 0x03	; 3
    1574:	90 95       	com	r25
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	89 23       	and	r24, r25
    157a:	21 96       	adiw	r28, 0x01	; 1
    157c:	e2 e0       	ldi	r30, 0x02	; 2
    157e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x20>

00001582 <button_is_pressed>:
    1582:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN20OrangutanPushbuttons9isPressedEh>
    1586:	08 95       	ret

00001588 <__vector_9>:
    1588:	2f 92       	push	r2
    158a:	8f 93       	push	r24
    158c:	9f 93       	push	r25
    158e:	2f b6       	in	r2, 0x3f	; 63
    1590:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tickCount+0x1>
    1594:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tickCount+0x2>
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tickCount+0x1>
    159e:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tickCount+0x2>
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tickCount+0x3>
    15a8:	89 1f       	adc	r24, r25
    15aa:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tickCount+0x3>
    15ae:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <us_over_10+0x1>
    15b2:	9c 5f       	subi	r25, 0xFC	; 252
    15b4:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <us_over_10+0x1>
    15b8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <us_over_10>
    15bc:	80 51       	subi	r24, 0x10	; 16
    15be:	97 42       	sbci	r25, 0x27	; 39
    15c0:	c0 f0       	brcs	.+48     	; 0x15f2 <end>
    15c2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <us_over_10+0x1>
    15c6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <us_over_10>
    15ca:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <msCounter>
    15ce:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <msCounter+0x1>
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <msCounter>
    15d8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <msCounter+0x1>
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <msCounter+0x2>
    15e2:	89 1f       	adc	r24, r25
    15e4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <msCounter+0x2>
    15e8:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <msCounter+0x3>
    15ec:	89 1f       	adc	r24, r25
    15ee:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <msCounter+0x3>

000015f2 <end>:
    15f2:	2f be       	out	0x3f, r2	; 63
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	2f 90       	pop	r2
    15fa:	18 95       	reti

000015fc <_ZN13OrangutanTime17delayMillisecondsEj>:
    15fc:	28 ee       	ldi	r18, 0xE8	; 232
    15fe:	33 e0       	ldi	r19, 0x03	; 3
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	48 f0       	brcs	.+18     	; 0x1616 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    1604:	f9 01       	movw	r30, r18
    1606:	6f 93       	push	r22
    1608:	64 e0       	ldi	r22, 0x04	; 4
    160a:	6a 95       	dec	r22
    160c:	f1 f7       	brne	.-4      	; 0x160a <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    160e:	6f 91       	pop	r22
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	c9 f7       	brne	.-14     	; 0x1606 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    1614:	f5 cf       	rjmp	.-22     	; 0x1600 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    1616:	08 95       	ret

00001618 <delay_ms>:
    1618:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN13OrangutanTime17delayMillisecondsEj>
    161c:	08 95       	ret

0000161e <_ZN13OrangutanTime5init2Ev>:
    161e:	e0 e7       	ldi	r30, 0x70	; 112
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8e 7f       	andi	r24, 0xFE	; 254
    1626:	80 83       	st	Z, r24
    1628:	a0 eb       	ldi	r26, 0xB0	; 176
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	8c 91       	ld	r24, X
    162e:	83 60       	ori	r24, 0x03	; 3
    1630:	8c 93       	st	X, r24
    1632:	a1 eb       	ldi	r26, 0xB1	; 177
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	8c 91       	ld	r24, X
    1638:	80 7f       	andi	r24, 0xF0	; 240
    163a:	8c 93       	st	X, r24
    163c:	8c 91       	ld	r24, X
    163e:	82 60       	ori	r24, 0x02	; 2
    1640:	8c 93       	st	X, r24
    1642:	b8 9a       	sbi	0x17, 0	; 23
    1644:	80 81       	ld	r24, Z
    1646:	81 60       	ori	r24, 0x01	; 1
    1648:	80 83       	st	Z, r24
    164a:	78 94       	sei
    164c:	08 95       	ret

0000164e <_ZN13OrangutanTime4initEv>:
    164e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZZN13OrangutanTime4initEvE11initialized>
    1652:	81 11       	cpse	r24, r1
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <_ZN13OrangutanTime4initEv+0x12>
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <_ZZN13OrangutanTime4initEvE11initialized>
    165c:	0e 94 0f 0b 	call	0x161e	; 0x161e <_ZN13OrangutanTime5init2Ev>
    1660:	08 95       	ret

00001662 <_ZN13OrangutanTime5resetEv>:
    1662:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN13OrangutanTime4initEv>
    1666:	e0 e7       	ldi	r30, 0x70	; 112
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	8e 7f       	andi	r24, 0xFE	; 254
    166e:	80 83       	st	Z, r24
    1670:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <msCounter>
    1674:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <msCounter+0x1>
    1678:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <msCounter+0x2>
    167c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <msCounter+0x3>
    1680:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <us_over_10+0x1>
    1684:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <us_over_10>
    1688:	80 81       	ld	r24, Z
    168a:	81 60       	ori	r24, 0x01	; 1
    168c:	80 83       	st	Z, r24
    168e:	08 95       	ret

00001690 <calibrate_line_sensors>:
    1690:	68 2f       	mov	r22, r24
    1692:	8c e4       	ldi	r24, 0x4C	; 76
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN16PololuQTRSensors9calibrateEh>
    169a:	08 95       	ret

0000169c <read_line>:
    169c:	46 2f       	mov	r20, r22
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	bc 01       	movw	r22, r24
    16a2:	8c e4       	ldi	r24, 0x4C	; 76
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN16PololuQTRSensors8readLineEPjhh>
    16aa:	08 95       	ret

000016ac <_ZN9Pololu3pi4initEjh>:
    16ac:	0f 93       	push	r16
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <_ZN9Pololu3pi4initEjh+0x8>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <_ZN9Pololu3pi4initEjh+0xa>
    16b6:	1f 92       	push	r1
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	9c 01       	movw	r18, r24
    16be:	85 e0       	ldi	r24, 0x05	; 5
    16c0:	ee e1       	ldi	r30, 0x1E	; 30
    16c2:	f1 e0       	ldi	r31, 0x01	; 1
    16c4:	de 01       	movw	r26, r28
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	01 90       	ld	r0, Z+
    16ca:	0d 92       	st	X+, r0
    16cc:	8a 95       	dec	r24
    16ce:	e1 f7       	brne	.-8      	; 0x16c8 <_ZN9Pololu3pi4initEjh+0x1c>
    16d0:	66 23       	and	r22, r22
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <_ZN9Pololu3pi4initEjh+0x2c>
    16d4:	0f ef       	ldi	r16, 0xFF	; 255
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <_ZN9Pololu3pi4initEjh+0x2e>
    16d8:	03 e1       	ldi	r16, 0x13	; 19
    16da:	45 e0       	ldi	r20, 0x05	; 5
    16dc:	be 01       	movw	r22, r28
    16de:	6f 5f       	subi	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	8c e4       	ldi	r24, 0x4C	; 76
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    16ea:	8c e4       	ldi	r24, 0x4C	; 76
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN16PololuQTRSensors11emittersOffEv>
    16f2:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN13OrangutanTime5resetEv>
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <pololu_3pi_init>:
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN9Pololu3pi4initEjh>
    170e:	08 95       	ret

00001710 <_GLOBAL__sub_D_pololu_3pi_init>:
    1710:	8c e4       	ldi	r24, 0x4C	; 76
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	0e 94 76 10 	call	0x20ec	; 0x20ec <_ZN16PololuQTRSensorsD1Ev>
    1718:	08 95       	ret

0000171a <delay_us>:
    171a:	6f 93       	push	r22
    171c:	64 e0       	ldi	r22, 0x04	; 4
    171e:	6a 95       	dec	r22
    1720:	f1 f7       	brne	.-4      	; 0x171e <delay_us+0x4>
    1722:	6f 91       	pop	r22
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	c9 f7       	brne	.-14     	; 0x171a <delay_us>
    1728:	08 95       	ret

0000172a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    172a:	fc 01       	movw	r30, r24
    172c:	11 82       	std	Z+1, r1	; 0x01
    172e:	10 82       	st	Z, r1
    1730:	13 82       	std	Z+3, r1	; 0x03
    1732:	12 82       	std	Z+2, r1	; 0x02
    1734:	15 82       	std	Z+5, r1	; 0x05
    1736:	14 82       	std	Z+4, r1	; 0x04
    1738:	16 82       	std	Z+6, r1	; 0x06
    173a:	68 30       	cpi	r22, 0x08	; 8
    173c:	68 f4       	brcc	.+26     	; 0x1758 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    173e:	89 e2       	ldi	r24, 0x29	; 41
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
    1746:	8b e2       	ldi	r24, 0x2B	; 43
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	93 83       	std	Z+3, r25	; 0x03
    174c:	82 83       	std	Z+2, r24	; 0x02
    174e:	8a e2       	ldi	r24, 0x2A	; 42
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	95 83       	std	Z+5, r25	; 0x05
    1754:	84 83       	std	Z+4, r24	; 0x04
    1756:	1f c0       	rjmp	.+62     	; 0x1796 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1758:	6e 30       	cpi	r22, 0x0E	; 14
    175a:	70 f4       	brcc	.+28     	; 0x1778 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    175c:	83 e2       	ldi	r24, 0x23	; 35
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
    1764:	85 e2       	ldi	r24, 0x25	; 37
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	93 83       	std	Z+3, r25	; 0x03
    176a:	82 83       	std	Z+2, r24	; 0x02
    176c:	84 e2       	ldi	r24, 0x24	; 36
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	95 83       	std	Z+5, r25	; 0x05
    1772:	84 83       	std	Z+4, r24	; 0x04
    1774:	68 50       	subi	r22, 0x08	; 8
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    1778:	65 31       	cpi	r22, 0x15	; 21
    177a:	98 f4       	brcc	.+38     	; 0x17a2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    177c:	86 e2       	ldi	r24, 0x26	; 38
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
    1784:	88 e2       	ldi	r24, 0x28	; 40
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	93 83       	std	Z+3, r25	; 0x03
    178a:	82 83       	std	Z+2, r24	; 0x02
    178c:	87 e2       	ldi	r24, 0x27	; 39
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	95 83       	std	Z+5, r25	; 0x05
    1792:	84 83       	std	Z+4, r24	; 0x04
    1794:	6e 50       	subi	r22, 0x0E	; 14
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	01 c0       	rjmp	.+2      	; 0x179c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    179a:	88 0f       	add	r24, r24
    179c:	6a 95       	dec	r22
    179e:	ea f7       	brpl	.-6      	; 0x179a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    17a0:	86 83       	std	Z+6, r24	; 0x06
    17a2:	08 95       	ret

000017a4 <_ZN16PololuQTRSensors4initEhhh>:
    17a4:	a7 e0       	ldi	r26, 0x07	; 7
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e8 ed       	ldi	r30, 0xD8	; 216
    17aa:	fb e0       	ldi	r31, 0x0B	; 11
    17ac:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__prologue_saves__+0x1c>
    17b0:	8c 01       	movw	r16, r24
    17b2:	fc 01       	movw	r30, r24
    17b4:	11 82       	std	Z+1, r1	; 0x01
    17b6:	10 82       	st	Z, r1
    17b8:	13 82       	std	Z+3, r1	; 0x03
    17ba:	12 82       	std	Z+2, r1	; 0x02
    17bc:	15 82       	std	Z+5, r1	; 0x05
    17be:	14 82       	std	Z+4, r1	; 0x04
    17c0:	17 82       	std	Z+7, r1	; 0x07
    17c2:	16 82       	std	Z+6, r1	; 0x06
    17c4:	61 31       	cpi	r22, 0x11	; 17
    17c6:	18 f0       	brcs	.+6      	; 0x17ce <_ZN16PololuQTRSensors4initEhhh+0x2a>
    17c8:	80 e1       	ldi	r24, 0x10	; 16
    17ca:	80 87       	std	Z+8, r24	; 0x08
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    17ce:	fc 01       	movw	r30, r24
    17d0:	60 87       	std	Z+8, r22	; 0x08
    17d2:	f8 01       	movw	r30, r16
    17d4:	20 8b       	std	Z+16, r18	; 0x10
    17d6:	64 2f       	mov	r22, r20
    17d8:	ce 01       	movw	r24, r28
    17da:	01 96       	adiw	r24, 0x01	; 1
    17dc:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    17e0:	8f 81       	ldd	r24, Y+7	; 0x07
    17e2:	f8 01       	movw	r30, r16
    17e4:	81 87       	std	Z+9, r24	; 0x09
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	93 87       	std	Z+11, r25	; 0x0b
    17ec:	82 87       	std	Z+10, r24	; 0x0a
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	95 87       	std	Z+13, r25	; 0x0d
    17f4:	84 87       	std	Z+12, r24	; 0x0c
    17f6:	27 96       	adiw	r28, 0x07	; 7
    17f8:	e4 e0       	ldi	r30, 0x04	; 4
    17fa:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__epilogue_restores__+0x1c>

000017fe <_ZN16PololuQTRSensors11emittersOffEv>:
    17fe:	fc 01       	movw	r30, r24
    1800:	a4 85       	ldd	r26, Z+12	; 0x0c
    1802:	b5 85       	ldd	r27, Z+13	; 0x0d
    1804:	10 97       	sbiw	r26, 0x00	; 0
    1806:	79 f0       	breq	.+30     	; 0x1826 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1808:	8c 91       	ld	r24, X
    180a:	91 85       	ldd	r25, Z+9	; 0x09
    180c:	89 2b       	or	r24, r25
    180e:	8c 93       	st	X, r24
    1810:	a2 85       	ldd	r26, Z+10	; 0x0a
    1812:	b3 85       	ldd	r27, Z+11	; 0x0b
    1814:	9c 91       	ld	r25, X
    1816:	81 85       	ldd	r24, Z+9	; 0x09
    1818:	80 95       	com	r24
    181a:	89 23       	and	r24, r25
    181c:	8c 93       	st	X, r24
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 8d 0b 	call	0x171a	; 0x171a <delay_us>
    1826:	08 95       	ret

00001828 <_ZN16PololuQTRSensors10emittersOnEv>:
    1828:	fc 01       	movw	r30, r24
    182a:	a4 85       	ldd	r26, Z+12	; 0x0c
    182c:	b5 85       	ldd	r27, Z+13	; 0x0d
    182e:	10 97       	sbiw	r26, 0x00	; 0
    1830:	71 f0       	breq	.+28     	; 0x184e <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1832:	8c 91       	ld	r24, X
    1834:	91 85       	ldd	r25, Z+9	; 0x09
    1836:	89 2b       	or	r24, r25
    1838:	8c 93       	st	X, r24
    183a:	a2 85       	ldd	r26, Z+10	; 0x0a
    183c:	b3 85       	ldd	r27, Z+11	; 0x0b
    183e:	8c 91       	ld	r24, X
    1840:	91 85       	ldd	r25, Z+9	; 0x09
    1842:	89 2b       	or	r24, r25
    1844:	8c 93       	st	X, r24
    1846:	88 ec       	ldi	r24, 0xC8	; 200
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 8d 0b 	call	0x171a	; 0x171a <delay_us>
    184e:	08 95       	ret

00001850 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1850:	a7 e0       	ldi	r26, 0x07	; 7
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ee e2       	ldi	r30, 0x2E	; 46
    1856:	fc e0       	ldi	r31, 0x0C	; 12
    1858:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__prologue_saves__+0x6>
    185c:	7c 01       	movw	r14, r24
    185e:	4b 01       	movw	r8, r22
    1860:	64 2f       	mov	r22, r20
    1862:	39 01       	movw	r6, r18
    1864:	40 2f       	mov	r20, r16
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <_ZN16PololuQTRSensors4initEhhh>
    186c:	87 01       	movw	r16, r14
    186e:	0f 5b       	subi	r16, 0xBF	; 191
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	f8 01       	movw	r30, r16
    1874:	10 82       	st	Z, r1
    1876:	67 01       	movw	r12, r14
    1878:	f2 e4       	ldi	r31, 0x42	; 66
    187a:	cf 0e       	add	r12, r31
    187c:	d1 1c       	adc	r13, r1
    187e:	f6 01       	movw	r30, r12
    1880:	10 82       	st	Z, r1
    1882:	57 01       	movw	r10, r14
    1884:	f3 e4       	ldi	r31, 0x43	; 67
    1886:	af 0e       	add	r10, r31
    1888:	b1 1c       	adc	r11, r1
    188a:	f5 01       	movw	r30, r10
    188c:	10 82       	st	Z, r1
    188e:	f7 01       	movw	r30, r14
    1890:	77 86       	std	Z+15, r7	; 0x0f
    1892:	66 86       	std	Z+14, r6	; 0x0e
    1894:	51 2c       	mov	r5, r1
    1896:	f7 01       	movw	r30, r14
    1898:	80 85       	ldd	r24, Z+8	; 0x08
    189a:	58 16       	cp	r5, r24
    189c:	50 f5       	brcc	.+84     	; 0x18f2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    189e:	65 2c       	mov	r6, r5
    18a0:	71 2c       	mov	r7, r1
    18a2:	f4 01       	movw	r30, r8
    18a4:	e6 0d       	add	r30, r6
    18a6:	f7 1d       	adc	r31, r7
    18a8:	60 81       	ld	r22, Z
    18aa:	ce 01       	movw	r24, r28
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	0e 94 95 0b 	call	0x172a	; 0x172a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    18b2:	2f 81       	ldd	r18, Y+7	; 0x07
    18b4:	f7 01       	movw	r30, r14
    18b6:	e6 0d       	add	r30, r6
    18b8:	f7 1d       	adc	r31, r7
    18ba:	21 8b       	std	Z+17, r18	; 0x11
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	f3 01       	movw	r30, r6
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	ee 0d       	add	r30, r14
    18c8:	ff 1d       	adc	r31, r15
    18ca:	92 a3       	std	Z+34, r25	; 0x22
    18cc:	81 a3       	std	Z+33, r24	; 0x21
    18ce:	83 32       	cpi	r24, 0x23	; 35
    18d0:	91 05       	cpc	r25, r1
    18d2:	11 f4       	brne	.+4      	; 0x18d8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    18d4:	f8 01       	movw	r30, r16
    18d6:	08 c0       	rjmp	.+16     	; 0x18e8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    18d8:	86 32       	cpi	r24, 0x26	; 38
    18da:	91 05       	cpc	r25, r1
    18dc:	11 f4       	brne	.+4      	; 0x18e2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    18de:	f6 01       	movw	r30, r12
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    18e2:	89 97       	sbiw	r24, 0x29	; 41
    18e4:	21 f4       	brne	.+8      	; 0x18ee <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    18e6:	f5 01       	movw	r30, r10
    18e8:	80 81       	ld	r24, Z
    18ea:	82 2b       	or	r24, r18
    18ec:	80 83       	st	Z, r24
    18ee:	53 94       	inc	r5
    18f0:	d2 cf       	rjmp	.-92     	; 0x1896 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    18f2:	27 96       	adiw	r28, 0x07	; 7
    18f4:	ef e0       	ldi	r30, 0x0F	; 15
    18f6:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__epilogue_restores__+0x6>

000018fa <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e3 e8       	ldi	r30, 0x83	; 131
    1900:	fc e0       	ldi	r31, 0x0C	; 12
    1902:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__prologue_saves__+0xa>
    1906:	ec 01       	movw	r28, r24
    1908:	5b 01       	movw	r10, r22
    190a:	6c 01       	movw	r12, r24
    190c:	81 e4       	ldi	r24, 0x41	; 65
    190e:	c8 0e       	add	r12, r24
    1910:	d1 1c       	adc	r13, r1
    1912:	f6 01       	movw	r30, r12
    1914:	80 80       	ld	r8, Z
    1916:	7e 01       	movw	r14, r28
    1918:	f2 e4       	ldi	r31, 0x42	; 66
    191a:	ef 0e       	add	r14, r31
    191c:	f1 1c       	adc	r15, r1
    191e:	f7 01       	movw	r30, r14
    1920:	70 80       	ld	r7, Z
    1922:	8e 01       	movw	r16, r28
    1924:	0d 5b       	subi	r16, 0xBD	; 189
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	f8 01       	movw	r30, r16
    192a:	90 80       	ld	r9, Z
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	98 85       	ldd	r25, Y+8	; 0x08
    1930:	89 17       	cp	r24, r25
    1932:	48 f4       	brcc	.+18     	; 0x1946 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    1934:	f5 01       	movw	r30, r10
    1936:	e8 0f       	add	r30, r24
    1938:	f1 1d       	adc	r31, r1
    193a:	e8 0f       	add	r30, r24
    193c:	f1 1d       	adc	r31, r1
    193e:	11 82       	std	Z+1, r1	; 0x01
    1940:	10 82       	st	Z, r1
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	f4 cf       	rjmp	.-24     	; 0x192e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    1946:	84 b1       	in	r24, 0x04	; 4
    1948:	f6 01       	movw	r30, r12
    194a:	90 81       	ld	r25, Z
    194c:	89 2b       	or	r24, r25
    194e:	84 b9       	out	0x04, r24	; 4
    1950:	87 b1       	in	r24, 0x07	; 7
    1952:	f7 01       	movw	r30, r14
    1954:	90 81       	ld	r25, Z
    1956:	89 2b       	or	r24, r25
    1958:	87 b9       	out	0x07, r24	; 7
    195a:	8a b1       	in	r24, 0x0a	; 10
    195c:	f8 01       	movw	r30, r16
    195e:	90 81       	ld	r25, Z
    1960:	89 2b       	or	r24, r25
    1962:	8a b9       	out	0x0a, r24	; 10
    1964:	85 b1       	in	r24, 0x05	; 5
    1966:	f6 01       	movw	r30, r12
    1968:	90 81       	ld	r25, Z
    196a:	89 2b       	or	r24, r25
    196c:	85 b9       	out	0x05, r24	; 5
    196e:	88 b1       	in	r24, 0x08	; 8
    1970:	f7 01       	movw	r30, r14
    1972:	90 81       	ld	r25, Z
    1974:	89 2b       	or	r24, r25
    1976:	88 b9       	out	0x08, r24	; 8
    1978:	8b b1       	in	r24, 0x0b	; 11
    197a:	f8 01       	movw	r30, r16
    197c:	90 81       	ld	r25, Z
    197e:	89 2b       	or	r24, r25
    1980:	8b b9       	out	0x0b, r24	; 11
    1982:	8a e0       	ldi	r24, 0x0A	; 10
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 8d 0b 	call	0x171a	; 0x171a <delay_us>
    198a:	94 b1       	in	r25, 0x04	; 4
    198c:	f6 01       	movw	r30, r12
    198e:	80 81       	ld	r24, Z
    1990:	80 95       	com	r24
    1992:	89 23       	and	r24, r25
    1994:	84 b9       	out	0x04, r24	; 4
    1996:	97 b1       	in	r25, 0x07	; 7
    1998:	f7 01       	movw	r30, r14
    199a:	80 81       	ld	r24, Z
    199c:	80 95       	com	r24
    199e:	89 23       	and	r24, r25
    19a0:	87 b9       	out	0x07, r24	; 7
    19a2:	9a b1       	in	r25, 0x0a	; 10
    19a4:	f8 01       	movw	r30, r16
    19a6:	80 81       	ld	r24, Z
    19a8:	80 95       	com	r24
    19aa:	89 23       	and	r24, r25
    19ac:	8a b9       	out	0x0a, r24	; 10
    19ae:	95 b1       	in	r25, 0x05	; 5
    19b0:	f6 01       	movw	r30, r12
    19b2:	80 81       	ld	r24, Z
    19b4:	80 95       	com	r24
    19b6:	89 23       	and	r24, r25
    19b8:	85 b9       	out	0x05, r24	; 5
    19ba:	98 b1       	in	r25, 0x08	; 8
    19bc:	f7 01       	movw	r30, r14
    19be:	80 81       	ld	r24, Z
    19c0:	80 95       	com	r24
    19c2:	89 23       	and	r24, r25
    19c4:	88 b9       	out	0x08, r24	; 8
    19c6:	9b b1       	in	r25, 0x0b	; 11
    19c8:	f8 01       	movw	r30, r16
    19ca:	80 81       	ld	r24, Z
    19cc:	80 95       	com	r24
    19ce:	89 23       	and	r24, r25
    19d0:	8b b9       	out	0x0b, r24	; 11
    19d2:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    19d6:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    19da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    19de:	83 60       	ori	r24, 0x03	; 3
    19e0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    19ea:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	2e 85       	ldd	r18, Y+14	; 0x0e
    19f4:	3f 85       	ldd	r19, Y+15	; 0x0f
    19f6:	82 17       	cp	r24, r18
    19f8:	93 07       	cpc	r25, r19
    19fa:	20 f5       	brcc	.+72     	; 0x1a44 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    19fc:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1a00:	2c 2d       	mov	r18, r12
    1a02:	24 1b       	sub	r18, r20
    1a04:	82 0f       	add	r24, r18
    1a06:	91 1d       	adc	r25, r1
    1a08:	03 b1       	in	r16, 0x03	; 3
    1a0a:	08 11       	cpse	r16, r8
    1a0c:	32 c0       	rjmp	.+100    	; 0x1a72 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a0e:	f6 b0       	in	r15, 0x06	; 6
    1a10:	f7 10       	cpse	r15, r7
    1a12:	2f c0       	rjmp	.+94     	; 0x1a72 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a14:	29 b1       	in	r18, 0x09	; 9
    1a16:	29 11       	cpse	r18, r9
    1a18:	2c c0       	rjmp	.+88     	; 0x1a72 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a1a:	10 c0       	rjmp	.+32     	; 0x1a3c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1a1c:	21 2f       	mov	r18, r17
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	a9 01       	movw	r20, r18
    1a22:	44 0f       	add	r20, r20
    1a24:	55 1f       	adc	r21, r21
    1a26:	f5 01       	movw	r30, r10
    1a28:	e4 0f       	add	r30, r20
    1a2a:	f5 1f       	adc	r31, r21
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	67 2b       	or	r22, r23
    1a32:	21 f1       	breq	.+72     	; 0x1a7c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1a34:	1f 5f       	subi	r17, 0xFF	; 255
    1a36:	28 85       	ldd	r18, Y+8	; 0x08
    1a38:	12 17       	cp	r17, r18
    1a3a:	80 f3       	brcs	.-32     	; 0x1a1c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1a3c:	7f 2c       	mov	r7, r15
    1a3e:	80 2e       	mov	r8, r16
    1a40:	4c 2d       	mov	r20, r12
    1a42:	d7 cf       	rjmp	.-82     	; 0x19f2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1a44:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1a48:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	88 85       	ldd	r24, Y+8	; 0x08
    1a50:	28 17       	cp	r18, r24
    1a52:	30 f5       	brcc	.+76     	; 0x1aa0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1a54:	f5 01       	movw	r30, r10
    1a56:	e2 0f       	add	r30, r18
    1a58:	f1 1d       	adc	r31, r1
    1a5a:	e2 0f       	add	r30, r18
    1a5c:	f1 1d       	adc	r31, r1
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	89 2b       	or	r24, r25
    1a64:	21 f4       	brne	.+8      	; 0x1a6e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1a66:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a68:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
    1a6e:	2f 5f       	subi	r18, 0xFF	; 255
    1a70:	ee cf       	rjmp	.-36     	; 0x1a4e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1a72:	03 b1       	in	r16, 0x03	; 3
    1a74:	f6 b0       	in	r15, 0x06	; 6
    1a76:	99 b0       	in	r9, 0x09	; 9
    1a78:	10 e0       	ldi	r17, 0x00	; 0
    1a7a:	dd cf       	rjmp	.-70     	; 0x1a36 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1a7c:	de 01       	movw	r26, r28
    1a7e:	a4 0f       	add	r26, r20
    1a80:	b5 1f       	adc	r27, r21
    1a82:	91 96       	adiw	r26, 0x21	; 33
    1a84:	0d 90       	ld	r0, X+
    1a86:	bc 91       	ld	r27, X
    1a88:	a0 2d       	mov	r26, r0
    1a8a:	4c 91       	ld	r20, X
    1a8c:	de 01       	movw	r26, r28
    1a8e:	a2 0f       	add	r26, r18
    1a90:	b3 1f       	adc	r27, r19
    1a92:	51 96       	adiw	r26, 0x11	; 17
    1a94:	2c 91       	ld	r18, X
    1a96:	42 23       	and	r20, r18
    1a98:	69 f6       	brne	.-102    	; 0x1a34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
    1a9e:	ca cf       	rjmp	.-108    	; 0x1a34 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1aa0:	cd b7       	in	r28, 0x3d	; 61
    1aa2:	de b7       	in	r29, 0x3e	; 62
    1aa4:	ed e0       	ldi	r30, 0x0D	; 13
    1aa6:	0c 94 46 11 	jmp	0x228c	; 0x228c <__epilogue_restores__+0xa>

00001aaa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	9b 01       	movw	r18, r22
    1aba:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1abe:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ac2:	47 b1       	in	r20, 0x07	; 7
    1ac4:	18 b1       	in	r17, 0x08	; 8
    1ac6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1aca:	86 fd       	sbrc	r24, 6
    1acc:	fc cf       	rjmp	.-8      	; 0x1ac6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 85       	ldd	r25, Z+8	; 0x08
    1ad2:	89 17       	cp	r24, r25
    1ad4:	48 f4       	brcc	.+18     	; 0x1ae8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1ad6:	d9 01       	movw	r26, r18
    1ad8:	a8 0f       	add	r26, r24
    1ada:	b1 1d       	adc	r27, r1
    1adc:	a8 0f       	add	r26, r24
    1ade:	b1 1d       	adc	r27, r1
    1ae0:	1d 92       	st	X+, r1
    1ae2:	1c 92       	st	X, r1
    1ae4:	8f 5f       	subi	r24, 0xFF	; 255
    1ae6:	f4 cf       	rjmp	.-24     	; 0x1ad0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1ae8:	97 b1       	in	r25, 0x07	; 7
    1aea:	82 a1       	ldd	r24, Z+34	; 0x22
    1aec:	80 95       	com	r24
    1aee:	89 23       	and	r24, r25
    1af0:	87 b9       	out	0x07, r24	; 7
    1af2:	98 b1       	in	r25, 0x08	; 8
    1af4:	82 a1       	ldd	r24, Z+34	; 0x22
    1af6:	80 95       	com	r24
    1af8:	89 23       	and	r24, r25
    1afa:	88 b9       	out	0x08, r24	; 8
    1afc:	87 e8       	ldi	r24, 0x87	; 135
    1afe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b02:	e1 2c       	mov	r14, r1
    1b04:	81 a1       	ldd	r24, Z+33	; 0x21
    1b06:	e8 16       	cp	r14, r24
    1b08:	10 f0       	brcs	.+4      	; 0x1b0e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1b0a:	e1 2c       	mov	r14, r1
    1b0c:	29 c0       	rjmp	.+82     	; 0x1b60 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
    1b10:	80 85       	ldd	r24, Z+8	; 0x08
    1b12:	58 17       	cp	r21, r24
    1b14:	18 f5       	brcc	.+70     	; 0x1b5c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1b16:	a5 2f       	mov	r26, r21
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	ef 01       	movw	r28, r30
    1b1c:	ca 0f       	add	r28, r26
    1b1e:	db 1f       	adc	r29, r27
    1b20:	89 89       	ldd	r24, Y+17	; 0x11
    1b22:	80 64       	ori	r24, 0x40	; 64
    1b24:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1b28:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b2c:	80 64       	ori	r24, 0x40	; 64
    1b2e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b32:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b36:	86 fd       	sbrc	r24, 6
    1b38:	fc cf       	rjmp	.-8      	; 0x1b32 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1b3a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1b3e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1b42:	aa 0f       	add	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	a2 0f       	add	r26, r18
    1b48:	b3 1f       	adc	r27, r19
    1b4a:	8d 91       	ld	r24, X+
    1b4c:	9c 91       	ld	r25, X
    1b4e:	11 97       	sbiw	r26, 0x01	; 1
    1b50:	86 0f       	add	r24, r22
    1b52:	97 1f       	adc	r25, r23
    1b54:	8d 93       	st	X+, r24
    1b56:	9c 93       	st	X, r25
    1b58:	5f 5f       	subi	r21, 0xFF	; 255
    1b5a:	da cf       	rjmp	.-76     	; 0x1b10 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1b5c:	e3 94       	inc	r14
    1b5e:	d2 cf       	rjmp	.-92     	; 0x1b04 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1b60:	80 85       	ldd	r24, Z+8	; 0x08
    1b62:	e8 16       	cp	r14, r24
    1b64:	a0 f4       	brcc	.+40     	; 0x1b8e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1b66:	e9 01       	movw	r28, r18
    1b68:	ce 0d       	add	r28, r14
    1b6a:	d1 1d       	adc	r29, r1
    1b6c:	ce 0d       	add	r28, r14
    1b6e:	d1 1d       	adc	r29, r1
    1b70:	61 a1       	ldd	r22, Z+33	; 0x21
    1b72:	70 e0       	ldi	r23, 0x00	; 0
    1b74:	cb 01       	movw	r24, r22
    1b76:	95 95       	asr	r25
    1b78:	87 95       	ror	r24
    1b7a:	a8 81       	ld	r26, Y
    1b7c:	b9 81       	ldd	r27, Y+1	; 0x01
    1b7e:	8a 0f       	add	r24, r26
    1b80:	9b 1f       	adc	r25, r27
    1b82:	0e 94 94 10 	call	0x2128	; 0x2128 <__udivmodhi4>
    1b86:	79 83       	std	Y+1, r23	; 0x01
    1b88:	68 83       	st	Y, r22
    1b8a:	e3 94       	inc	r14
    1b8c:	e9 cf       	rjmp	.-46     	; 0x1b60 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1b8e:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1b92:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b96:	18 b9       	out	0x08, r17	; 8
    1b98:	47 b9       	out	0x07, r20	; 7
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	e6 e0       	ldi	r30, 0x06	; 6
    1ba0:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__+0x18>

00001ba4 <_ZN16PololuQTRSensors4readEPjh>:
    1ba4:	a0 e2       	ldi	r26, 0x20	; 32
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e8 ed       	ldi	r30, 0xD8	; 216
    1baa:	fd e0       	ldi	r31, 0x0D	; 13
    1bac:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__prologue_saves__+0x16>
    1bb0:	8c 01       	movw	r16, r24
    1bb2:	7b 01       	movw	r14, r22
    1bb4:	d4 2e       	mov	r13, r20
    1bb6:	8f ef       	ldi	r24, 0xFF	; 255
    1bb8:	84 0f       	add	r24, r20
    1bba:	82 30       	cpi	r24, 0x02	; 2
    1bbc:	18 f4       	brcc	.+6      	; 0x1bc4 <_ZN16PololuQTRSensors4readEPjh+0x20>
    1bbe:	c8 01       	movw	r24, r16
    1bc0:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZN16PololuQTRSensors10emittersOnEv>
    1bc4:	d8 01       	movw	r26, r16
    1bc6:	50 96       	adiw	r26, 0x10	; 16
    1bc8:	8c 91       	ld	r24, X
    1bca:	b7 01       	movw	r22, r14
    1bcc:	81 11       	cpse	r24, r1
    1bce:	10 c0       	rjmp	.+32     	; 0x1bf0 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1bd6:	c8 01       	movw	r24, r16
    1bd8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN16PololuQTRSensors11emittersOffEv>
    1bdc:	b2 e0       	ldi	r27, 0x02	; 2
    1bde:	db 12       	cpse	r13, r27
    1be0:	3a c0       	rjmp	.+116    	; 0x1c56 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1be2:	be 01       	movw	r22, r28
    1be4:	6f 5f       	subi	r22, 0xFF	; 255
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255
    1be8:	c8 01       	movw	r24, r16
    1bea:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1bf0:	c8 01       	movw	r24, r16
    1bf2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN16PololuQTRSensors11emittersOffEv>
    1bfc:	e2 e0       	ldi	r30, 0x02	; 2
    1bfe:	de 12       	cpse	r13, r30
    1c00:	2a c0       	rjmp	.+84     	; 0x1c56 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c02:	be 01       	movw	r22, r28
    1c04:	6f 5f       	subi	r22, 0xFF	; 255
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255
    1c08:	c8 01       	movw	r24, r16
    1c0a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	f8 01       	movw	r30, r16
    1c12:	80 85       	ldd	r24, Z+8	; 0x08
    1c14:	48 17       	cp	r20, r24
    1c16:	f8 f4       	brcc	.+62     	; 0x1c56 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c18:	84 2f       	mov	r24, r20
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	f7 01       	movw	r30, r14
    1c22:	e8 0f       	add	r30, r24
    1c24:	f9 1f       	adc	r31, r25
    1c26:	21 e0       	ldi	r18, 0x01	; 1
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	2c 0f       	add	r18, r28
    1c2c:	3d 1f       	adc	r19, r29
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	d8 01       	movw	r26, r16
    1c34:	1e 96       	adiw	r26, 0x0e	; 14
    1c36:	2d 91       	ld	r18, X+
    1c38:	3c 91       	ld	r19, X
    1c3a:	1f 97       	sbiw	r26, 0x0f	; 15
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	8d 91       	ld	r24, X+
    1c40:	9c 91       	ld	r25, X
    1c42:	28 1b       	sub	r18, r24
    1c44:	39 0b       	sbc	r19, r25
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	82 0f       	add	r24, r18
    1c4c:	93 1f       	adc	r25, r19
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
    1c52:	4f 5f       	subi	r20, 0xFF	; 255
    1c54:	dd cf       	rjmp	.-70     	; 0x1c10 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1c56:	a0 96       	adiw	r28, 0x20	; 32
    1c58:	e7 e0       	ldi	r30, 0x07	; 7
    1c5a:	0c 94 4c 11 	jmp	0x2298	; 0x2298 <__epilogue_restores__+0x16>

00001c5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1c5e:	2f 92       	push	r2
    1c60:	3f 92       	push	r3
    1c62:	5f 92       	push	r5
    1c64:	6f 92       	push	r6
    1c66:	7f 92       	push	r7
    1c68:	8f 92       	push	r8
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	c0 56       	subi	r28, 0x60	; 96
    1c86:	d1 09       	sbc	r29, r1
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	8c 01       	movw	r16, r24
    1c94:	4b 01       	movw	r8, r22
    1c96:	5a 01       	movw	r10, r20
    1c98:	52 2e       	mov	r5, r18
    1c9a:	da 01       	movw	r26, r20
    1c9c:	8d 91       	ld	r24, X+
    1c9e:	9c 91       	ld	r25, X
    1ca0:	89 2b       	or	r24, r25
    1ca2:	31 f0       	breq	.+12     	; 0x1cb0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1ca4:	f4 01       	movw	r30, r8
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	89 2b       	or	r24, r25
    1cac:	f1 f4       	brne	.+60     	; 0x1cea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1cae:	24 c0       	rjmp	.+72     	; 0x1cf8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1cb0:	d8 01       	movw	r26, r16
    1cb2:	18 96       	adiw	r26, 0x08	; 8
    1cb4:	8c 91       	ld	r24, X
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <malloc>
    1cc0:	f5 01       	movw	r30, r10
    1cc2:	91 83       	std	Z+1, r25	; 0x01
    1cc4:	80 83       	st	Z, r24
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1cca:	b1 c0       	rjmp	.+354    	; 0x1e2e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1ccc:	fc 01       	movw	r30, r24
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	d8 01       	movw	r26, r16
    1cd4:	18 96       	adiw	r26, 0x08	; 8
    1cd6:	8c 91       	ld	r24, X
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	28 17       	cp	r18, r24
    1cdc:	39 07       	cpc	r19, r25
    1cde:	14 f7       	brge	.-60     	; 0x1ca4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1ce0:	11 92       	st	Z+, r1
    1ce2:	11 92       	st	Z+, r1
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	f4 cf       	rjmp	.-24     	; 0x1cd2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1cea:	e1 2c       	mov	r14, r1
    1cec:	f1 2c       	mov	r15, r1
    1cee:	6e 01       	movw	r12, r28
    1cf0:	b1 e2       	ldi	r27, 0x21	; 33
    1cf2:	cb 0e       	add	r12, r27
    1cf4:	d1 1c       	adc	r13, r1
    1cf6:	21 c0       	rjmp	.+66     	; 0x1d3a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	80 85       	ldd	r24, Z+8	; 0x08
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <malloc>
    1d06:	d4 01       	movw	r26, r8
    1d08:	8d 93       	st	X+, r24
    1d0a:	9c 93       	st	X, r25
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1d10:	8e c0       	rjmp	.+284    	; 0x1e2e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1d12:	fc 01       	movw	r30, r24
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	d8 01       	movw	r26, r16
    1d1a:	18 96       	adiw	r26, 0x08	; 8
    1d1c:	8c 91       	ld	r24, X
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	28 17       	cp	r18, r24
    1d22:	39 07       	cpc	r19, r25
    1d24:	14 f7       	brge	.-60     	; 0x1cea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1d26:	d8 01       	movw	r26, r16
    1d28:	1e 96       	adiw	r26, 0x0e	; 14
    1d2a:	8d 91       	ld	r24, X+
    1d2c:	9c 91       	ld	r25, X
    1d2e:	1f 97       	sbiw	r26, 0x0f	; 15
    1d30:	81 93       	st	Z+, r24
    1d32:	91 93       	st	Z+, r25
    1d34:	2f 5f       	subi	r18, 0xFF	; 255
    1d36:	3f 4f       	sbci	r19, 0xFF	; 255
    1d38:	ef cf       	rjmp	.-34     	; 0x1d18 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1d3a:	45 2d       	mov	r20, r5
    1d3c:	be 01       	movw	r22, r28
    1d3e:	6f 5b       	subi	r22, 0xBF	; 191
    1d40:	7f 4f       	sbci	r23, 0xFF	; 255
    1d42:	c8 01       	movw	r24, r16
    1d44:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_ZN16PololuQTRSensors4readEPjh>
    1d48:	f8 01       	movw	r30, r16
    1d4a:	60 84       	ldd	r6, Z+8	; 0x08
    1d4c:	71 2c       	mov	r7, r1
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ef 5b       	subi	r30, 0xBF	; 191
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	c6 01       	movw	r24, r12
    1d56:	9e 01       	movw	r18, r28
    1d58:	2f 5f       	subi	r18, 0xFF	; 255
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	19 01       	movw	r2, r18
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	26 15       	cp	r18, r6
    1d64:	37 05       	cpc	r19, r7
    1d66:	4c f5       	brge	.+82     	; 0x1dba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1d68:	e1 14       	cp	r14, r1
    1d6a:	f1 04       	cpc	r15, r1
    1d6c:	89 f0       	breq	.+34     	; 0x1d90 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	6d 91       	ld	r22, X+
    1d72:	7c 91       	ld	r23, X
    1d74:	40 81       	ld	r20, Z
    1d76:	51 81       	ldd	r21, Z+1	; 0x01
    1d78:	64 17       	cp	r22, r20
    1d7a:	75 07       	cpc	r23, r21
    1d7c:	48 f0       	brcs	.+18     	; 0x1d90 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1d7e:	d1 01       	movw	r26, r2
    1d80:	6d 91       	ld	r22, X+
    1d82:	7c 91       	ld	r23, X
    1d84:	40 81       	ld	r20, Z
    1d86:	51 81       	ldd	r21, Z+1	; 0x01
    1d88:	46 17       	cp	r20, r22
    1d8a:	57 07       	cpc	r21, r23
    1d8c:	48 f0       	brcs	.+18     	; 0x1da0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1d8e:	0d c0       	rjmp	.+26     	; 0x1daa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1d90:	40 81       	ld	r20, Z
    1d92:	51 81       	ldd	r21, Z+1	; 0x01
    1d94:	dc 01       	movw	r26, r24
    1d96:	4d 93       	st	X+, r20
    1d98:	5c 93       	st	X, r21
    1d9a:	e1 14       	cp	r14, r1
    1d9c:	f1 04       	cpc	r15, r1
    1d9e:	79 f7       	brne	.-34     	; 0x1d7e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1da0:	40 81       	ld	r20, Z
    1da2:	51 81       	ldd	r21, Z+1	; 0x01
    1da4:	d1 01       	movw	r26, r2
    1da6:	4d 93       	st	X+, r20
    1da8:	5c 93       	st	X, r21
    1daa:	2f 5f       	subi	r18, 0xFF	; 255
    1dac:	3f 4f       	sbci	r19, 0xFF	; 255
    1dae:	b2 e0       	ldi	r27, 0x02	; 2
    1db0:	2b 0e       	add	r2, r27
    1db2:	31 1c       	adc	r3, r1
    1db4:	32 96       	adiw	r30, 0x02	; 2
    1db6:	02 96       	adiw	r24, 0x02	; 2
    1db8:	d4 cf       	rjmp	.-88     	; 0x1d62 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1dba:	ef ef       	ldi	r30, 0xFF	; 255
    1dbc:	ee 1a       	sub	r14, r30
    1dbe:	fe 0a       	sbc	r15, r30
    1dc0:	fa e0       	ldi	r31, 0x0A	; 10
    1dc2:	ef 16       	cp	r14, r31
    1dc4:	f1 04       	cpc	r15, r1
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1dc8:	b8 cf       	rjmp	.-144    	; 0x1d3a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1dca:	9e 01       	movw	r18, r28
    1dcc:	2f 5f       	subi	r18, 0xFF	; 255
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	79 01       	movw	r14, r18
    1dd2:	36 01       	movw	r6, r12
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	f8 01       	movw	r30, r16
    1dda:	20 85       	ldd	r18, Z+8	; 0x08
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	82 17       	cp	r24, r18
    1de0:	93 07       	cpc	r25, r19
    1de2:	2c f5       	brge	.+74     	; 0x1e2e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1de4:	d7 01       	movw	r26, r14
    1de6:	2d 91       	ld	r18, X+
    1de8:	3d 91       	ld	r19, X+
    1dea:	7d 01       	movw	r14, r26
    1dec:	b3 01       	movw	r22, r6
    1dee:	6c 19       	sub	r22, r12
    1df0:	7d 09       	sbc	r23, r13
    1df2:	d5 01       	movw	r26, r10
    1df4:	ed 91       	ld	r30, X+
    1df6:	fc 91       	ld	r31, X
    1df8:	e6 0f       	add	r30, r22
    1dfa:	f7 1f       	adc	r31, r23
    1dfc:	40 81       	ld	r20, Z
    1dfe:	51 81       	ldd	r21, Z+1	; 0x01
    1e00:	42 17       	cp	r20, r18
    1e02:	53 07       	cpc	r21, r19
    1e04:	10 f4       	brcc	.+4      	; 0x1e0a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1e06:	31 83       	std	Z+1, r19	; 0x01
    1e08:	20 83       	st	Z, r18
    1e0a:	f3 01       	movw	r30, r6
    1e0c:	21 91       	ld	r18, Z+
    1e0e:	31 91       	ld	r19, Z+
    1e10:	3f 01       	movw	r6, r30
    1e12:	d4 01       	movw	r26, r8
    1e14:	ed 91       	ld	r30, X+
    1e16:	fc 91       	ld	r31, X
    1e18:	e6 0f       	add	r30, r22
    1e1a:	f7 1f       	adc	r31, r23
    1e1c:	40 81       	ld	r20, Z
    1e1e:	51 81       	ldd	r21, Z+1	; 0x01
    1e20:	24 17       	cp	r18, r20
    1e22:	35 07       	cpc	r19, r21
    1e24:	10 f4       	brcc	.+4      	; 0x1e2a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1e26:	31 83       	std	Z+1, r19	; 0x01
    1e28:	20 83       	st	Z, r18
    1e2a:	01 96       	adiw	r24, 0x01	; 1
    1e2c:	d5 cf       	rjmp	.-86     	; 0x1dd8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1e2e:	c0 5a       	subi	r28, 0xA0	; 160
    1e30:	df 4f       	sbci	r29, 0xFF	; 255
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	ff 90       	pop	r15
    1e46:	ef 90       	pop	r14
    1e48:	df 90       	pop	r13
    1e4a:	cf 90       	pop	r12
    1e4c:	bf 90       	pop	r11
    1e4e:	af 90       	pop	r10
    1e50:	9f 90       	pop	r9
    1e52:	8f 90       	pop	r8
    1e54:	7f 90       	pop	r7
    1e56:	6f 90       	pop	r6
    1e58:	5f 90       	pop	r5
    1e5a:	3f 90       	pop	r3
    1e5c:	2f 90       	pop	r2
    1e5e:	08 95       	ret

00001e60 <_ZN16PololuQTRSensors9calibrateEh>:
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	ec 01       	movw	r28, r24
    1e68:	16 2f       	mov	r17, r22
    1e6a:	8f ef       	ldi	r24, 0xFF	; 255
    1e6c:	86 0f       	add	r24, r22
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	18 f0       	brcs	.+6      	; 0x1e78 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1e72:	66 23       	and	r22, r22
    1e74:	59 f0       	breq	.+22     	; 0x1e8c <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1e78:	21 e0       	ldi	r18, 0x01	; 1
    1e7a:	ae 01       	movw	r20, r28
    1e7c:	4e 5f       	subi	r20, 0xFE	; 254
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e80:	be 01       	movw	r22, r28
    1e82:	ce 01       	movw	r24, r28
    1e84:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1e88:	12 30       	cpi	r17, 0x02	; 2
    1e8a:	51 f4       	brne	.+20     	; 0x1ea0 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1e8c:	ae 01       	movw	r20, r28
    1e8e:	4a 5f       	subi	r20, 0xFA	; 250
    1e90:	5f 4f       	sbci	r21, 0xFF	; 255
    1e92:	be 01       	movw	r22, r28
    1e94:	6c 5f       	subi	r22, 0xFC	; 252
    1e96:	7f 4f       	sbci	r23, 0xFF	; 255
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	08 95       	ret

00001ea8 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    1ea8:	a0 e0       	ldi	r26, 0x00	; 0
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	ea e5       	ldi	r30, 0x5A	; 90
    1eae:	ff e0       	ldi	r31, 0x0F	; 15
    1eb0:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__prologue_saves__+0x12>
    1eb4:	ec 01       	movw	r28, r24
    1eb6:	8b 01       	movw	r16, r22
    1eb8:	b4 2e       	mov	r11, r20
    1eba:	84 2f       	mov	r24, r20
    1ebc:	8d 7f       	andi	r24, 0xFD	; 253
    1ebe:	51 f4       	brne	.+20     	; 0x1ed4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	89 2b       	or	r24, r25
    1ec6:	09 f4       	brne	.+2      	; 0x1eca <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    1ec8:	97 c0       	rjmp	.+302    	; 0x1ff8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1eca:	8e 81       	ldd	r24, Y+6	; 0x06
    1ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ece:	89 2b       	or	r24, r25
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1ed2:	92 c0       	rjmp	.+292    	; 0x1ff8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1ed4:	8f ef       	ldi	r24, 0xFF	; 255
    1ed6:	8b 0d       	add	r24, r11
    1ed8:	82 30       	cpi	r24, 0x02	; 2
    1eda:	50 f4       	brcc	.+20     	; 0x1ef0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1edc:	88 81       	ld	r24, Y
    1ede:	99 81       	ldd	r25, Y+1	; 0x01
    1ee0:	89 2b       	or	r24, r25
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    1ee4:	89 c0       	rjmp	.+274    	; 0x1ff8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eea:	89 2b       	or	r24, r25
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1eee:	84 c0       	rjmp	.+264    	; 0x1ff8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1ef0:	4b 2d       	mov	r20, r11
    1ef2:	b8 01       	movw	r22, r16
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <_ZN16PololuQTRSensors4readEPjh>
    1efa:	78 01       	movw	r14, r16
    1efc:	00 e0       	ldi	r16, 0x00	; 0
    1efe:	10 e0       	ldi	r17, 0x00	; 0
    1f00:	c1 2c       	mov	r12, r1
    1f02:	d1 2c       	mov	r13, r1
    1f04:	88 85       	ldd	r24, Y+8	; 0x08
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	c8 16       	cp	r12, r24
    1f0a:	d9 06       	cpc	r13, r25
    1f0c:	0c f0       	brlt	.+2      	; 0x1f10 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    1f0e:	74 c0       	rjmp	.+232    	; 0x1ff8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	b8 12       	cpse	r11, r24
    1f14:	0a c0       	rjmp	.+20     	; 0x1f2a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    1f16:	ea 81       	ldd	r30, Y+2	; 0x02
    1f18:	fb 81       	ldd	r31, Y+3	; 0x03
    1f1a:	e0 0f       	add	r30, r16
    1f1c:	f1 1f       	adc	r31, r17
    1f1e:	01 90       	ld	r0, Z+
    1f20:	f0 81       	ld	r31, Z
    1f22:	e0 2d       	mov	r30, r0
    1f24:	a8 81       	ld	r26, Y
    1f26:	b9 81       	ldd	r27, Y+1	; 0x01
    1f28:	0d c0       	rjmp	.+26     	; 0x1f44 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f30:	3f 81       	ldd	r19, Y+7	; 0x07
    1f32:	b1 10       	cpse	r11, r1
    1f34:	0c c0       	rjmp	.+24     	; 0x1f4e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    1f36:	f9 01       	movw	r30, r18
    1f38:	e0 0f       	add	r30, r16
    1f3a:	f1 1f       	adc	r31, r17
    1f3c:	01 90       	ld	r0, Z+
    1f3e:	f0 81       	ld	r31, Z
    1f40:	e0 2d       	mov	r30, r0
    1f42:	dc 01       	movw	r26, r24
    1f44:	a0 0f       	add	r26, r16
    1f46:	b1 1f       	adc	r27, r17
    1f48:	8d 91       	ld	r24, X+
    1f4a:	9c 91       	ld	r25, X
    1f4c:	28 c0       	rjmp	.+80     	; 0x1f9e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1f4e:	fc 01       	movw	r30, r24
    1f50:	e0 0f       	add	r30, r16
    1f52:	f1 1f       	adc	r31, r17
    1f54:	40 81       	ld	r20, Z
    1f56:	51 81       	ldd	r21, Z+1	; 0x01
    1f58:	e8 81       	ld	r30, Y
    1f5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f5c:	e0 0f       	add	r30, r16
    1f5e:	f1 1f       	adc	r31, r17
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f66:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f68:	48 17       	cp	r20, r24
    1f6a:	59 07       	cpc	r21, r25
    1f6c:	10 f4       	brcc	.+4      	; 0x1f72 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    1f6e:	cf 01       	movw	r24, r30
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    1f72:	8e 0f       	add	r24, r30
    1f74:	9f 1f       	adc	r25, r31
    1f76:	84 1b       	sub	r24, r20
    1f78:	95 0b       	sbc	r25, r21
    1f7a:	d9 01       	movw	r26, r18
    1f7c:	a0 0f       	add	r26, r16
    1f7e:	b1 1f       	adc	r27, r17
    1f80:	2d 91       	ld	r18, X+
    1f82:	3c 91       	ld	r19, X
    1f84:	aa 81       	ldd	r26, Y+2	; 0x02
    1f86:	bb 81       	ldd	r27, Y+3	; 0x03
    1f88:	a0 0f       	add	r26, r16
    1f8a:	b1 1f       	adc	r27, r17
    1f8c:	4d 91       	ld	r20, X+
    1f8e:	5c 91       	ld	r21, X
    1f90:	24 17       	cp	r18, r20
    1f92:	35 07       	cpc	r19, r21
    1f94:	20 f0       	brcs	.+8      	; 0x1f9e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1f96:	e4 0f       	add	r30, r20
    1f98:	f5 1f       	adc	r31, r21
    1f9a:	e2 1b       	sub	r30, r18
    1f9c:	f3 0b       	sbc	r31, r19
    1f9e:	e8 1b       	sub	r30, r24
    1fa0:	f9 0b       	sbc	r31, r25
    1fa2:	a9 f0       	breq	.+42     	; 0x1fce <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    1fa4:	d7 01       	movw	r26, r14
    1fa6:	2d 91       	ld	r18, X+
    1fa8:	3c 91       	ld	r19, X
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	28 1b       	sub	r18, r24
    1fb0:	39 0b       	sbc	r19, r25
    1fb2:	41 09       	sbc	r20, r1
    1fb4:	51 09       	sbc	r21, r1
    1fb6:	a8 ee       	ldi	r26, 0xE8	; 232
    1fb8:	b3 e0       	ldi	r27, 0x03	; 3
    1fba:	0e 94 12 11 	call	0x2224	; 0x2224 <__muluhisi3>
    1fbe:	9f 01       	movw	r18, r30
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	0e 94 de 10 	call	0x21bc	; 0x21bc <__divmodsi4>
    1fc8:	37 fd       	sbrc	r19, 7
    1fca:	0a c0       	rjmp	.+20     	; 0x1fe0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	29 3e       	cpi	r18, 0xE9	; 233
    1fd4:	b3 e0       	ldi	r27, 0x03	; 3
    1fd6:	3b 07       	cpc	r19, r27
    1fd8:	2c f0       	brlt	.+10     	; 0x1fe4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1fda:	28 ee       	ldi	r18, 0xE8	; 232
    1fdc:	33 e0       	ldi	r19, 0x03	; 3
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	f7 01       	movw	r30, r14
    1fe6:	21 93       	st	Z+, r18
    1fe8:	31 93       	st	Z+, r19
    1fea:	7f 01       	movw	r14, r30
    1fec:	ff ef       	ldi	r31, 0xFF	; 255
    1fee:	cf 1a       	sub	r12, r31
    1ff0:	df 0a       	sbc	r13, r31
    1ff2:	0e 5f       	subi	r16, 0xFE	; 254
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	86 cf       	rjmp	.-244    	; 0x1f04 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	e9 e0       	ldi	r30, 0x09	; 9
    1ffe:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__epilogue_restores__+0x12>

00002002 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2002:	a0 e0       	ldi	r26, 0x00	; 0
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e7 e0       	ldi	r30, 0x07	; 7
    2008:	f0 e1       	ldi	r31, 0x10	; 16
    200a:	0c 94 25 11 	jmp	0x224a	; 0x224a <__prologue_saves__>
    200e:	ec 01       	movw	r28, r24
    2010:	8b 01       	movw	r16, r22
    2012:	82 2e       	mov	r8, r18
    2014:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2018:	28 84       	ldd	r2, Y+8	; 0x08
    201a:	e8 01       	movw	r28, r16
    201c:	41 2c       	mov	r4, r1
    201e:	51 2c       	mov	r5, r1
    2020:	32 01       	movw	r6, r4
    2022:	00 e0       	ldi	r16, 0x00	; 0
    2024:	10 e0       	ldi	r17, 0x00	; 0
    2026:	c1 2c       	mov	r12, r1
    2028:	d1 2c       	mov	r13, r1
    202a:	76 01       	movw	r14, r12
    202c:	31 2c       	mov	r3, r1
    202e:	91 2c       	mov	r9, r1
    2030:	58 ee       	ldi	r21, 0xE8	; 232
    2032:	a5 2e       	mov	r10, r21
    2034:	53 e0       	ldi	r21, 0x03	; 3
    2036:	b5 2e       	mov	r11, r21
    2038:	92 14       	cp	r9, r2
    203a:	21 f1       	breq	.+72     	; 0x2084 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    203c:	e9 91       	ld	r30, Y+
    203e:	f9 91       	ld	r31, Y+
    2040:	88 20       	and	r8, r8
    2042:	21 f0       	breq	.+8      	; 0x204c <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    2044:	c5 01       	movw	r24, r10
    2046:	8e 1b       	sub	r24, r30
    2048:	9f 0b       	sbc	r25, r31
    204a:	fc 01       	movw	r30, r24
    204c:	e9 3c       	cpi	r30, 0xC9	; 201
    204e:	f1 05       	cpc	r31, r1
    2050:	24 f4       	brge	.+8      	; 0x205a <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2052:	e3 33       	cpi	r30, 0x33	; 51
    2054:	f1 05       	cpc	r31, r1
    2056:	74 f0       	brlt	.+28     	; 0x2074 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    2058:	02 c0       	rjmp	.+4      	; 0x205e <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    205a:	33 24       	eor	r3, r3
    205c:	33 94       	inc	r3
    205e:	df 01       	movw	r26, r30
    2060:	a3 01       	movw	r20, r6
    2062:	92 01       	movw	r18, r4
    2064:	0e 94 1d 11 	call	0x223a	; 0x223a <__mulshisi3>
    2068:	c6 0e       	add	r12, r22
    206a:	d7 1e       	adc	r13, r23
    206c:	e8 1e       	adc	r14, r24
    206e:	f9 1e       	adc	r15, r25
    2070:	0e 0f       	add	r16, r30
    2072:	1f 1f       	adc	r17, r31
    2074:	93 94       	inc	r9
    2076:	98 ee       	ldi	r25, 0xE8	; 232
    2078:	49 0e       	add	r4, r25
    207a:	93 e0       	ldi	r25, 0x03	; 3
    207c:	59 1e       	adc	r5, r25
    207e:	61 1c       	adc	r6, r1
    2080:	71 1c       	adc	r7, r1
    2082:	da cf       	rjmp	.-76     	; 0x2038 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    2084:	31 10       	cpse	r3, r1
    2086:	1e c0       	rjmp	.+60     	; 0x20c4 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    2088:	49 2d       	mov	r20, r9
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	41 50       	subi	r20, 0x01	; 1
    208e:	51 09       	sbc	r21, r1
    2090:	24 ef       	ldi	r18, 0xF4	; 244
    2092:	31 e0       	ldi	r19, 0x01	; 1
    2094:	42 9f       	mul	r20, r18
    2096:	c0 01       	movw	r24, r0
    2098:	43 9f       	mul	r20, r19
    209a:	90 0d       	add	r25, r0
    209c:	52 9f       	mul	r21, r18
    209e:	90 0d       	add	r25, r0
    20a0:	11 24       	eor	r1, r1
    20a2:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    20a6:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    20aa:	28 17       	cp	r18, r24
    20ac:	39 07       	cpc	r19, r25
    20ae:	b4 f0       	brlt	.+44     	; 0x20dc <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    20b0:	88 ee       	ldi	r24, 0xE8	; 232
    20b2:	93 e0       	ldi	r25, 0x03	; 3
    20b4:	48 9f       	mul	r20, r24
    20b6:	90 01       	movw	r18, r0
    20b8:	49 9f       	mul	r20, r25
    20ba:	30 0d       	add	r19, r0
    20bc:	58 9f       	mul	r21, r24
    20be:	30 0d       	add	r19, r0
    20c0:	11 24       	eor	r1, r1
    20c2:	0e c0       	rjmp	.+28     	; 0x20e0 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    20c4:	98 01       	movw	r18, r16
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	c7 01       	movw	r24, r14
    20cc:	b6 01       	movw	r22, r12
    20ce:	0e 94 bc 10 	call	0x2178	; 0x2178 <__udivmodsi4>
    20d2:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    20d6:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	c9 01       	movw	r24, r18
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	e2 e1       	ldi	r30, 0x12	; 18
    20e8:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__epilogue_restores__>

000020ec <_ZN16PololuQTRSensorsD1Ev>:
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	ec 01       	movw	r28, r24
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	9b 81       	ldd	r25, Y+3	; 0x03
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	11 f0       	breq	.+4      	; 0x20fe <_ZN16PololuQTRSensorsD1Ev+0x12>
    20fa:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <free>
    20fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2100:	9f 81       	ldd	r25, Y+7	; 0x07
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	11 f0       	breq	.+4      	; 0x210a <_ZN16PololuQTRSensorsD1Ev+0x1e>
    2106:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <free>
    210a:	88 81       	ld	r24, Y
    210c:	99 81       	ldd	r25, Y+1	; 0x01
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	11 f0       	breq	.+4      	; 0x2116 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2112:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <free>
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	9d 81       	ldd	r25, Y+5	; 0x05
    211a:	00 97       	sbiw	r24, 0x00	; 0
    211c:	11 f0       	breq	.+4      	; 0x2122 <_ZN16PololuQTRSensorsD1Ev+0x36>
    211e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <free>
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	08 95       	ret

00002128 <__udivmodhi4>:
    2128:	aa 1b       	sub	r26, r26
    212a:	bb 1b       	sub	r27, r27
    212c:	51 e1       	ldi	r21, 0x11	; 17
    212e:	07 c0       	rjmp	.+14     	; 0x213e <__udivmodhi4_ep>

00002130 <__udivmodhi4_loop>:
    2130:	aa 1f       	adc	r26, r26
    2132:	bb 1f       	adc	r27, r27
    2134:	a6 17       	cp	r26, r22
    2136:	b7 07       	cpc	r27, r23
    2138:	10 f0       	brcs	.+4      	; 0x213e <__udivmodhi4_ep>
    213a:	a6 1b       	sub	r26, r22
    213c:	b7 0b       	sbc	r27, r23

0000213e <__udivmodhi4_ep>:
    213e:	88 1f       	adc	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	5a 95       	dec	r21
    2144:	a9 f7       	brne	.-22     	; 0x2130 <__udivmodhi4_loop>
    2146:	80 95       	com	r24
    2148:	90 95       	com	r25
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	08 95       	ret

00002150 <__divmodhi4>:
    2150:	97 fb       	bst	r25, 7
    2152:	07 2e       	mov	r0, r23
    2154:	16 f4       	brtc	.+4      	; 0x215a <__divmodhi4+0xa>
    2156:	00 94       	com	r0
    2158:	07 d0       	rcall	.+14     	; 0x2168 <__divmodhi4_neg1>
    215a:	77 fd       	sbrc	r23, 7
    215c:	09 d0       	rcall	.+18     	; 0x2170 <__divmodhi4_neg2>
    215e:	0e 94 94 10 	call	0x2128	; 0x2128 <__udivmodhi4>
    2162:	07 fc       	sbrc	r0, 7
    2164:	05 d0       	rcall	.+10     	; 0x2170 <__divmodhi4_neg2>
    2166:	3e f4       	brtc	.+14     	; 0x2176 <__divmodhi4_exit>

00002168 <__divmodhi4_neg1>:
    2168:	90 95       	com	r25
    216a:	81 95       	neg	r24
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	08 95       	ret

00002170 <__divmodhi4_neg2>:
    2170:	70 95       	com	r23
    2172:	61 95       	neg	r22
    2174:	7f 4f       	sbci	r23, 0xFF	; 255

00002176 <__divmodhi4_exit>:
    2176:	08 95       	ret

00002178 <__udivmodsi4>:
    2178:	a1 e2       	ldi	r26, 0x21	; 33
    217a:	1a 2e       	mov	r1, r26
    217c:	aa 1b       	sub	r26, r26
    217e:	bb 1b       	sub	r27, r27
    2180:	fd 01       	movw	r30, r26
    2182:	0d c0       	rjmp	.+26     	; 0x219e <__udivmodsi4_ep>

00002184 <__udivmodsi4_loop>:
    2184:	aa 1f       	adc	r26, r26
    2186:	bb 1f       	adc	r27, r27
    2188:	ee 1f       	adc	r30, r30
    218a:	ff 1f       	adc	r31, r31
    218c:	a2 17       	cp	r26, r18
    218e:	b3 07       	cpc	r27, r19
    2190:	e4 07       	cpc	r30, r20
    2192:	f5 07       	cpc	r31, r21
    2194:	20 f0       	brcs	.+8      	; 0x219e <__udivmodsi4_ep>
    2196:	a2 1b       	sub	r26, r18
    2198:	b3 0b       	sbc	r27, r19
    219a:	e4 0b       	sbc	r30, r20
    219c:	f5 0b       	sbc	r31, r21

0000219e <__udivmodsi4_ep>:
    219e:	66 1f       	adc	r22, r22
    21a0:	77 1f       	adc	r23, r23
    21a2:	88 1f       	adc	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	1a 94       	dec	r1
    21a8:	69 f7       	brne	.-38     	; 0x2184 <__udivmodsi4_loop>
    21aa:	60 95       	com	r22
    21ac:	70 95       	com	r23
    21ae:	80 95       	com	r24
    21b0:	90 95       	com	r25
    21b2:	9b 01       	movw	r18, r22
    21b4:	ac 01       	movw	r20, r24
    21b6:	bd 01       	movw	r22, r26
    21b8:	cf 01       	movw	r24, r30
    21ba:	08 95       	ret

000021bc <__divmodsi4>:
    21bc:	05 2e       	mov	r0, r21
    21be:	97 fb       	bst	r25, 7
    21c0:	1e f4       	brtc	.+6      	; 0x21c8 <__divmodsi4+0xc>
    21c2:	00 94       	com	r0
    21c4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__negsi2>
    21c8:	57 fd       	sbrc	r21, 7
    21ca:	07 d0       	rcall	.+14     	; 0x21da <__divmodsi4_neg2>
    21cc:	0e 94 bc 10 	call	0x2178	; 0x2178 <__udivmodsi4>
    21d0:	07 fc       	sbrc	r0, 7
    21d2:	03 d0       	rcall	.+6      	; 0x21da <__divmodsi4_neg2>
    21d4:	4e f4       	brtc	.+18     	; 0x21e8 <__divmodsi4_exit>
    21d6:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <__negsi2>

000021da <__divmodsi4_neg2>:
    21da:	50 95       	com	r21
    21dc:	40 95       	com	r20
    21de:	30 95       	com	r19
    21e0:	21 95       	neg	r18
    21e2:	3f 4f       	sbci	r19, 0xFF	; 255
    21e4:	4f 4f       	sbci	r20, 0xFF	; 255
    21e6:	5f 4f       	sbci	r21, 0xFF	; 255

000021e8 <__divmodsi4_exit>:
    21e8:	08 95       	ret

000021ea <__negsi2>:
    21ea:	90 95       	com	r25
    21ec:	80 95       	com	r24
    21ee:	70 95       	com	r23
    21f0:	61 95       	neg	r22
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255
    21f4:	8f 4f       	sbci	r24, 0xFF	; 255
    21f6:	9f 4f       	sbci	r25, 0xFF	; 255
    21f8:	08 95       	ret

000021fa <__tablejump2__>:
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	05 90       	lpm	r0, Z+
    2200:	f4 91       	lpm	r31, Z
    2202:	e0 2d       	mov	r30, r0
    2204:	09 94       	ijmp

00002206 <__umulhisi3>:
    2206:	a2 9f       	mul	r26, r18
    2208:	b0 01       	movw	r22, r0
    220a:	b3 9f       	mul	r27, r19
    220c:	c0 01       	movw	r24, r0
    220e:	a3 9f       	mul	r26, r19
    2210:	70 0d       	add	r23, r0
    2212:	81 1d       	adc	r24, r1
    2214:	11 24       	eor	r1, r1
    2216:	91 1d       	adc	r25, r1
    2218:	b2 9f       	mul	r27, r18
    221a:	70 0d       	add	r23, r0
    221c:	81 1d       	adc	r24, r1
    221e:	11 24       	eor	r1, r1
    2220:	91 1d       	adc	r25, r1
    2222:	08 95       	ret

00002224 <__muluhisi3>:
    2224:	0e 94 03 11 	call	0x2206	; 0x2206 <__umulhisi3>
    2228:	a5 9f       	mul	r26, r21
    222a:	90 0d       	add	r25, r0
    222c:	b4 9f       	mul	r27, r20
    222e:	90 0d       	add	r25, r0
    2230:	a4 9f       	mul	r26, r20
    2232:	80 0d       	add	r24, r0
    2234:	91 1d       	adc	r25, r1
    2236:	11 24       	eor	r1, r1
    2238:	08 95       	ret

0000223a <__mulshisi3>:
    223a:	b7 ff       	sbrs	r27, 7
    223c:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__muluhisi3>

00002240 <__mulohisi3>:
    2240:	0e 94 12 11 	call	0x2224	; 0x2224 <__muluhisi3>
    2244:	82 1b       	sub	r24, r18
    2246:	93 0b       	sbc	r25, r19
    2248:	08 95       	ret

0000224a <__prologue_saves__>:
    224a:	2f 92       	push	r2
    224c:	3f 92       	push	r3
    224e:	4f 92       	push	r4
    2250:	5f 92       	push	r5
    2252:	6f 92       	push	r6
    2254:	7f 92       	push	r7
    2256:	8f 92       	push	r8
    2258:	9f 92       	push	r9
    225a:	af 92       	push	r10
    225c:	bf 92       	push	r11
    225e:	cf 92       	push	r12
    2260:	df 92       	push	r13
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	ca 1b       	sub	r28, r26
    2274:	db 0b       	sbc	r29, r27
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	09 94       	ijmp

00002282 <__epilogue_restores__>:
    2282:	2a 88       	ldd	r2, Y+18	; 0x12
    2284:	39 88       	ldd	r3, Y+17	; 0x11
    2286:	48 88       	ldd	r4, Y+16	; 0x10
    2288:	5f 84       	ldd	r5, Y+15	; 0x0f
    228a:	6e 84       	ldd	r6, Y+14	; 0x0e
    228c:	7d 84       	ldd	r7, Y+13	; 0x0d
    228e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2290:	9b 84       	ldd	r9, Y+11	; 0x0b
    2292:	aa 84       	ldd	r10, Y+10	; 0x0a
    2294:	b9 84       	ldd	r11, Y+9	; 0x09
    2296:	c8 84       	ldd	r12, Y+8	; 0x08
    2298:	df 80       	ldd	r13, Y+7	; 0x07
    229a:	ee 80       	ldd	r14, Y+6	; 0x06
    229c:	fd 80       	ldd	r15, Y+5	; 0x05
    229e:	0c 81       	ldd	r16, Y+4	; 0x04
    22a0:	1b 81       	ldd	r17, Y+3	; 0x03
    22a2:	aa 81       	ldd	r26, Y+2	; 0x02
    22a4:	b9 81       	ldd	r27, Y+1	; 0x01
    22a6:	ce 0f       	add	r28, r30
    22a8:	d1 1d       	adc	r29, r1
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	ed 01       	movw	r28, r26
    22b6:	08 95       	ret

000022b8 <malloc>:
    22b8:	0f 93       	push	r16
    22ba:	1f 93       	push	r17
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	91 05       	cpc	r25, r1
    22c4:	10 f4       	brcc	.+4      	; 0x22ca <malloc+0x12>
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <__flp>
    22ce:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <__flp+0x1>
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	a0 e0       	ldi	r26, 0x00	; 0
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	30 97       	sbiw	r30, 0x00	; 0
    22dc:	19 f1       	breq	.+70     	; 0x2324 <malloc+0x6c>
    22de:	40 81       	ld	r20, Z
    22e0:	51 81       	ldd	r21, Z+1	; 0x01
    22e2:	02 81       	ldd	r16, Z+2	; 0x02
    22e4:	13 81       	ldd	r17, Z+3	; 0x03
    22e6:	48 17       	cp	r20, r24
    22e8:	59 07       	cpc	r21, r25
    22ea:	c8 f0       	brcs	.+50     	; 0x231e <malloc+0x66>
    22ec:	84 17       	cp	r24, r20
    22ee:	95 07       	cpc	r25, r21
    22f0:	69 f4       	brne	.+26     	; 0x230c <malloc+0x54>
    22f2:	10 97       	sbiw	r26, 0x00	; 0
    22f4:	31 f0       	breq	.+12     	; 0x2302 <malloc+0x4a>
    22f6:	12 96       	adiw	r26, 0x02	; 2
    22f8:	0c 93       	st	X, r16
    22fa:	12 97       	sbiw	r26, 0x02	; 2
    22fc:	13 96       	adiw	r26, 0x03	; 3
    22fe:	1c 93       	st	X, r17
    2300:	27 c0       	rjmp	.+78     	; 0x2350 <malloc+0x98>
    2302:	00 93 a9 01 	sts	0x01A9, r16	; 0x8001a9 <__flp>
    2306:	10 93 aa 01 	sts	0x01AA, r17	; 0x8001aa <__flp+0x1>
    230a:	22 c0       	rjmp	.+68     	; 0x2350 <malloc+0x98>
    230c:	21 15       	cp	r18, r1
    230e:	31 05       	cpc	r19, r1
    2310:	19 f0       	breq	.+6      	; 0x2318 <malloc+0x60>
    2312:	42 17       	cp	r20, r18
    2314:	53 07       	cpc	r21, r19
    2316:	18 f4       	brcc	.+6      	; 0x231e <malloc+0x66>
    2318:	9a 01       	movw	r18, r20
    231a:	bd 01       	movw	r22, r26
    231c:	ef 01       	movw	r28, r30
    231e:	df 01       	movw	r26, r30
    2320:	f8 01       	movw	r30, r16
    2322:	db cf       	rjmp	.-74     	; 0x22da <malloc+0x22>
    2324:	21 15       	cp	r18, r1
    2326:	31 05       	cpc	r19, r1
    2328:	f9 f0       	breq	.+62     	; 0x2368 <malloc+0xb0>
    232a:	28 1b       	sub	r18, r24
    232c:	39 0b       	sbc	r19, r25
    232e:	24 30       	cpi	r18, 0x04	; 4
    2330:	31 05       	cpc	r19, r1
    2332:	80 f4       	brcc	.+32     	; 0x2354 <malloc+0x9c>
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	9b 81       	ldd	r25, Y+3	; 0x03
    2338:	61 15       	cp	r22, r1
    233a:	71 05       	cpc	r23, r1
    233c:	21 f0       	breq	.+8      	; 0x2346 <malloc+0x8e>
    233e:	fb 01       	movw	r30, r22
    2340:	93 83       	std	Z+3, r25	; 0x03
    2342:	82 83       	std	Z+2, r24	; 0x02
    2344:	04 c0       	rjmp	.+8      	; 0x234e <malloc+0x96>
    2346:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <__flp+0x1>
    234a:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__flp>
    234e:	fe 01       	movw	r30, r28
    2350:	32 96       	adiw	r30, 0x02	; 2
    2352:	44 c0       	rjmp	.+136    	; 0x23dc <malloc+0x124>
    2354:	fe 01       	movw	r30, r28
    2356:	e2 0f       	add	r30, r18
    2358:	f3 1f       	adc	r31, r19
    235a:	81 93       	st	Z+, r24
    235c:	91 93       	st	Z+, r25
    235e:	22 50       	subi	r18, 0x02	; 2
    2360:	31 09       	sbc	r19, r1
    2362:	39 83       	std	Y+1, r19	; 0x01
    2364:	28 83       	st	Y, r18
    2366:	3a c0       	rjmp	.+116    	; 0x23dc <malloc+0x124>
    2368:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <__brkval>
    236c:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <__brkval+0x1>
    2370:	23 2b       	or	r18, r19
    2372:	41 f4       	brne	.+16     	; 0x2384 <malloc+0xcc>
    2374:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    2378:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    237c:	30 93 a8 01 	sts	0x01A8, r19	; 0x8001a8 <__brkval+0x1>
    2380:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <__brkval>
    2384:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    2388:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    238c:	21 15       	cp	r18, r1
    238e:	31 05       	cpc	r19, r1
    2390:	41 f4       	brne	.+16     	; 0x23a2 <malloc+0xea>
    2392:	2d b7       	in	r18, 0x3d	; 61
    2394:	3e b7       	in	r19, 0x3e	; 62
    2396:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    239a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    239e:	24 1b       	sub	r18, r20
    23a0:	35 0b       	sbc	r19, r21
    23a2:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <__brkval>
    23a6:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <__brkval+0x1>
    23aa:	e2 17       	cp	r30, r18
    23ac:	f3 07       	cpc	r31, r19
    23ae:	a0 f4       	brcc	.+40     	; 0x23d8 <malloc+0x120>
    23b0:	2e 1b       	sub	r18, r30
    23b2:	3f 0b       	sbc	r19, r31
    23b4:	28 17       	cp	r18, r24
    23b6:	39 07       	cpc	r19, r25
    23b8:	78 f0       	brcs	.+30     	; 0x23d8 <malloc+0x120>
    23ba:	ac 01       	movw	r20, r24
    23bc:	4e 5f       	subi	r20, 0xFE	; 254
    23be:	5f 4f       	sbci	r21, 0xFF	; 255
    23c0:	24 17       	cp	r18, r20
    23c2:	35 07       	cpc	r19, r21
    23c4:	48 f0       	brcs	.+18     	; 0x23d8 <malloc+0x120>
    23c6:	4e 0f       	add	r20, r30
    23c8:	5f 1f       	adc	r21, r31
    23ca:	50 93 a8 01 	sts	0x01A8, r21	; 0x8001a8 <__brkval+0x1>
    23ce:	40 93 a7 01 	sts	0x01A7, r20	; 0x8001a7 <__brkval>
    23d2:	81 93       	st	Z+, r24
    23d4:	91 93       	st	Z+, r25
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <malloc+0x124>
    23d8:	e0 e0       	ldi	r30, 0x00	; 0
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	cf 01       	movw	r24, r30
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret

000023e8 <free>:
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	09 f4       	brne	.+2      	; 0x23f2 <free+0xa>
    23f0:	81 c0       	rjmp	.+258    	; 0x24f4 <free+0x10c>
    23f2:	fc 01       	movw	r30, r24
    23f4:	32 97       	sbiw	r30, 0x02	; 2
    23f6:	13 82       	std	Z+3, r1	; 0x03
    23f8:	12 82       	std	Z+2, r1	; 0x02
    23fa:	a0 91 a9 01 	lds	r26, 0x01A9	; 0x8001a9 <__flp>
    23fe:	b0 91 aa 01 	lds	r27, 0x01AA	; 0x8001aa <__flp+0x1>
    2402:	10 97       	sbiw	r26, 0x00	; 0
    2404:	81 f4       	brne	.+32     	; 0x2426 <free+0x3e>
    2406:	20 81       	ld	r18, Z
    2408:	31 81       	ldd	r19, Z+1	; 0x01
    240a:	82 0f       	add	r24, r18
    240c:	93 1f       	adc	r25, r19
    240e:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <__brkval>
    2412:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <__brkval+0x1>
    2416:	28 17       	cp	r18, r24
    2418:	39 07       	cpc	r19, r25
    241a:	51 f5       	brne	.+84     	; 0x2470 <free+0x88>
    241c:	f0 93 a8 01 	sts	0x01A8, r31	; 0x8001a8 <__brkval+0x1>
    2420:	e0 93 a7 01 	sts	0x01A7, r30	; 0x8001a7 <__brkval>
    2424:	67 c0       	rjmp	.+206    	; 0x24f4 <free+0x10c>
    2426:	ed 01       	movw	r28, r26
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	ce 17       	cp	r28, r30
    242e:	df 07       	cpc	r29, r31
    2430:	40 f4       	brcc	.+16     	; 0x2442 <free+0x5a>
    2432:	4a 81       	ldd	r20, Y+2	; 0x02
    2434:	5b 81       	ldd	r21, Y+3	; 0x03
    2436:	9e 01       	movw	r18, r28
    2438:	41 15       	cp	r20, r1
    243a:	51 05       	cpc	r21, r1
    243c:	f1 f0       	breq	.+60     	; 0x247a <free+0x92>
    243e:	ea 01       	movw	r28, r20
    2440:	f5 cf       	rjmp	.-22     	; 0x242c <free+0x44>
    2442:	d3 83       	std	Z+3, r29	; 0x03
    2444:	c2 83       	std	Z+2, r28	; 0x02
    2446:	40 81       	ld	r20, Z
    2448:	51 81       	ldd	r21, Z+1	; 0x01
    244a:	84 0f       	add	r24, r20
    244c:	95 1f       	adc	r25, r21
    244e:	c8 17       	cp	r28, r24
    2450:	d9 07       	cpc	r29, r25
    2452:	59 f4       	brne	.+22     	; 0x246a <free+0x82>
    2454:	88 81       	ld	r24, Y
    2456:	99 81       	ldd	r25, Y+1	; 0x01
    2458:	84 0f       	add	r24, r20
    245a:	95 1f       	adc	r25, r21
    245c:	02 96       	adiw	r24, 0x02	; 2
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	9b 81       	ldd	r25, Y+3	; 0x03
    2466:	93 83       	std	Z+3, r25	; 0x03
    2468:	82 83       	std	Z+2, r24	; 0x02
    246a:	21 15       	cp	r18, r1
    246c:	31 05       	cpc	r19, r1
    246e:	29 f4       	brne	.+10     	; 0x247a <free+0x92>
    2470:	f0 93 aa 01 	sts	0x01AA, r31	; 0x8001aa <__flp+0x1>
    2474:	e0 93 a9 01 	sts	0x01A9, r30	; 0x8001a9 <__flp>
    2478:	3d c0       	rjmp	.+122    	; 0x24f4 <free+0x10c>
    247a:	e9 01       	movw	r28, r18
    247c:	fb 83       	std	Y+3, r31	; 0x03
    247e:	ea 83       	std	Y+2, r30	; 0x02
    2480:	49 91       	ld	r20, Y+
    2482:	59 91       	ld	r21, Y+
    2484:	c4 0f       	add	r28, r20
    2486:	d5 1f       	adc	r29, r21
    2488:	ec 17       	cp	r30, r28
    248a:	fd 07       	cpc	r31, r29
    248c:	61 f4       	brne	.+24     	; 0x24a6 <free+0xbe>
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	84 0f       	add	r24, r20
    2494:	95 1f       	adc	r25, r21
    2496:	02 96       	adiw	r24, 0x02	; 2
    2498:	e9 01       	movw	r28, r18
    249a:	99 83       	std	Y+1, r25	; 0x01
    249c:	88 83       	st	Y, r24
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	93 81       	ldd	r25, Z+3	; 0x03
    24a2:	9b 83       	std	Y+3, r25	; 0x03
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	e0 e0       	ldi	r30, 0x00	; 0
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	12 96       	adiw	r26, 0x02	; 2
    24ac:	8d 91       	ld	r24, X+
    24ae:	9c 91       	ld	r25, X
    24b0:	13 97       	sbiw	r26, 0x03	; 3
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	19 f0       	breq	.+6      	; 0x24bc <free+0xd4>
    24b6:	fd 01       	movw	r30, r26
    24b8:	dc 01       	movw	r26, r24
    24ba:	f7 cf       	rjmp	.-18     	; 0x24aa <free+0xc2>
    24bc:	8d 91       	ld	r24, X+
    24be:	9c 91       	ld	r25, X
    24c0:	11 97       	sbiw	r26, 0x01	; 1
    24c2:	9d 01       	movw	r18, r26
    24c4:	2e 5f       	subi	r18, 0xFE	; 254
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	82 0f       	add	r24, r18
    24ca:	93 1f       	adc	r25, r19
    24cc:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <__brkval>
    24d0:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <__brkval+0x1>
    24d4:	28 17       	cp	r18, r24
    24d6:	39 07       	cpc	r19, r25
    24d8:	69 f4       	brne	.+26     	; 0x24f4 <free+0x10c>
    24da:	30 97       	sbiw	r30, 0x00	; 0
    24dc:	29 f4       	brne	.+10     	; 0x24e8 <free+0x100>
    24de:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__flp+0x1>
    24e2:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__flp>
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <free+0x104>
    24e8:	13 82       	std	Z+3, r1	; 0x03
    24ea:	12 82       	std	Z+2, r1	; 0x02
    24ec:	b0 93 a8 01 	sts	0x01A8, r27	; 0x8001a8 <__brkval+0x1>
    24f0:	a0 93 a7 01 	sts	0x01A7, r26	; 0x8001a7 <__brkval>
    24f4:	df 91       	pop	r29
    24f6:	cf 91       	pop	r28
    24f8:	08 95       	ret

000024fa <strncat>:
    24fa:	fb 01       	movw	r30, r22
    24fc:	dc 01       	movw	r26, r24
    24fe:	0d 90       	ld	r0, X+
    2500:	00 20       	and	r0, r0
    2502:	e9 f7       	brne	.-6      	; 0x24fe <strncat+0x4>
    2504:	11 97       	sbiw	r26, 0x01	; 1
    2506:	41 50       	subi	r20, 0x01	; 1
    2508:	50 40       	sbci	r21, 0x00	; 0
    250a:	28 f0       	brcs	.+10     	; 0x2516 <strncat+0x1c>
    250c:	01 90       	ld	r0, Z+
    250e:	00 20       	and	r0, r0
    2510:	0d 92       	st	X+, r0
    2512:	c9 f7       	brne	.-14     	; 0x2506 <strncat+0xc>
    2514:	08 95       	ret
    2516:	1c 92       	st	X, r1
    2518:	08 95       	ret

0000251a <__do_global_dtors>:
    251a:	10 e0       	ldi	r17, 0x00	; 0
    251c:	cd e3       	ldi	r28, 0x3D	; 61
    251e:	d0 e0       	ldi	r29, 0x00	; 0
    2520:	04 c0       	rjmp	.+8      	; 0x252a <__do_global_dtors+0x10>
    2522:	fe 01       	movw	r30, r28
    2524:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__tablejump2__>
    2528:	21 96       	adiw	r28, 0x01	; 1
    252a:	ce 33       	cpi	r28, 0x3E	; 62
    252c:	d1 07       	cpc	r29, r17
    252e:	c9 f7       	brne	.-14     	; 0x2522 <__do_global_dtors+0x8>
    2530:	f8 94       	cli

00002532 <__stop_program>:
    2532:	ff cf       	rjmp	.-2      	; 0x2532 <__stop_program>
