
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  00003e94  00003f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  0080019a  0080019a  00003fc2  2**0
                  ALLOC
  3 .stab         00007b00  00000000  00000000  00003fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000bac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00015b4a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00015b8c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000001b8  00000000  00000000  00015bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003793  00000000  00000000  00015d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000011fa  00000000  00000000  00019517  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002223  00000000  00000000  0001a711  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000544  00000000  00000000  0001c934  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000009fe  00000000  00000000  0001ce78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000016c4  00000000  00000000  0001d876  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001e8  00000000  00000000  0001ef3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__dtors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 4b 17 	jmp	0x2e96	; 0x2e96 <__vector_9>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <__vector_13>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <__vector_18>
      4c:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	02 09       	sbc	r16, r2
      6a:	06 09       	sbc	r16, r6
      6c:	87 09       	sbc	r24, r7
      6e:	21 09       	sbc	r18, r1
      70:	30 09       	sbc	r19, r0
      72:	15 09       	sbc	r17, r5
      74:	21 09       	sbc	r18, r1
      76:	21 09       	sbc	r18, r1
      78:	21 09       	sbc	r18, r1

0000007a <__trampolines_end>:
      7a:	3e 67       	ori	r19, 0x7E	; 126
      7c:	33 32       	cpi	r19, 0x23	; 35
      7e:	3e 3e       	cpi	r19, 0xEE	; 238
      80:	67 33       	cpi	r22, 0x37	; 55
      82:	32 3e       	cpi	r19, 0xE2	; 226
      84:	3e 67       	ori	r19, 0x7E	; 126
      86:	33 32       	cpi	r19, 0x23	; 35
      88:	3e 3e       	cpi	r19, 0xEE	; 238
      8a:	3e 63       	ori	r19, 0x3E	; 62
      8c:	32 32       	cpi	r19, 0x22	; 34
	...

0000008f <welcome>:
      8f:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

00000099 <Beep>:
      99:	3e 67 33 32 3e 3e 63 32 32 3e 3e 67 33 32 00        >g32>>c22>>g32.

000000a8 <sound>:
      a8:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

000000b2 <__ctors_end>:
      b2:	2c 18       	sub	r2, r12

000000b4 <__dtors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e4 e9       	ldi	r30, 0x94	; 148
      c8:	fe e3       	ldi	r31, 0x3E	; 62
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	aa 39       	cpi	r26, 0x9A	; 154
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	22 e0       	ldi	r18, 0x02	; 2
      d8:	aa e9       	ldi	r26, 0x9A	; 154
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ad 32       	cpi	r26, 0x2D	; 45
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
      ea:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <__do_global_dtors>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <filllocationarrays>:


#define START 010
#define STOP 101

void filllocationarrays(Communications *self){
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
      fa:	e2 97       	sbiw	r28, 0x32	; 50
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	f8 94       	cli
     100:	de bf       	out	0x3e, r29	; 62
     102:	0f be       	out	0x3f, r0	; 63
     104:	cd bf       	out	0x3d, r28	; 61
     106:	dc 01       	movw	r26, r24
	char arrx[25];
	char arry[25];
	char set;
	int placement=0;

	for (int i=0;i<25;i++){
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	1a c0       	rjmp	.+52     	; 0x142 <filllocationarrays+0x50>
	arrx[i]=arry[i]=self->Orderary[i]=self->Orderarx[i]=0;
     10e:	ad 01       	movw	r20, r26
     110:	42 0f       	add	r20, r18
     112:	53 1f       	adc	r21, r19
     114:	ca 01       	movw	r24, r20
     116:	8e 5a       	subi	r24, 0xAE	; 174
     118:	9f 4f       	sbci	r25, 0xFF	; 255
     11a:	fc 01       	movw	r30, r24
     11c:	10 82       	st	Z, r1
     11e:	fa 01       	movw	r30, r20
     120:	11 ae       	std	Z+57, r1	; 0x39
     122:	ea e1       	ldi	r30, 0x1A	; 26
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	ec 0f       	add	r30, r28
     128:	fd 1f       	adc	r31, r29
     12a:	e2 0f       	add	r30, r18
     12c:	f3 1f       	adc	r31, r19
     12e:	10 82       	st	Z, r1
     130:	e1 e0       	ldi	r30, 0x01	; 1
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	ec 0f       	add	r30, r28
     136:	fd 1f       	adc	r31, r29
     138:	e2 0f       	add	r30, r18
     13a:	f3 1f       	adc	r31, r19
     13c:	10 82       	st	Z, r1
	char arrx[25];
	char arry[25];
	char set;
	int placement=0;

	for (int i=0;i<25;i++){
     13e:	2f 5f       	subi	r18, 0xFF	; 255
     140:	3f 4f       	sbci	r19, 0xFF	; 255
     142:	29 31       	cpi	r18, 0x19	; 25
     144:	31 05       	cpc	r19, r1
     146:	1c f3       	brlt	.-58     	; 0x10e <filllocationarrays+0x1c>
	arrx[i]=arry[i]=self->Orderary[i]=self->Orderarx[i]=0;
}

	if (self->Recieved[1]==1){
     148:	5c 96       	adiw	r26, 0x1c	; 28
     14a:	8c 91       	ld	r24, X
     14c:	5c 97       	sbiw	r26, 0x1c	; 28
     14e:	81 30       	cpi	r24, 0x01	; 1
     150:	29 f4       	brne	.+10     	; 0x15c <filllocationarrays+0x6a>
		arrx[placement]=1;
     152:	89 83       	std	Y+1, r24	; 0x01
		arry[placement]=1;
     154:	8a 8f       	std	Y+26, r24	; 0x1a
		placement++;
     156:	21 e0       	ldi	r18, 0x01	; 1
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	02 c0       	rjmp	.+4      	; 0x160 <filllocationarrays+0x6e>

void filllocationarrays(Communications *self){
	char arrx[25];
	char arry[25];
	char set;
	int placement=0;
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	40 e0       	ldi	r20, 0x00	; 0
     162:	50 e0       	ldi	r21, 0x00	; 0
     164:	3b c0       	rjmp	.+118    	; 0x1dc <filllocationarrays+0xea>
		arrx[placement]=1;
		arry[placement]=1;
		placement++;
	}
	for (int i=0;i<8;i++){
		set = ((self->Recieved[2] >> i)  & 0x01);
     166:	5d 96       	adiw	r26, 0x1d	; 29
     168:	8c 91       	ld	r24, X
     16a:	5d 97       	sbiw	r26, 0x1d	; 29
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	04 2e       	mov	r0, r20
     170:	02 c0       	rjmp	.+4      	; 0x176 <filllocationarrays+0x84>
     172:	95 95       	asr	r25
     174:	87 95       	ror	r24
     176:	0a 94       	dec	r0
     178:	e2 f7       	brpl	.-8      	; 0x172 <filllocationarrays+0x80>
     17a:	81 70       	andi	r24, 0x01	; 1
		if (i<4){
     17c:	44 30       	cpi	r20, 0x04	; 4
     17e:	51 05       	cpc	r21, r1
     180:	b4 f4       	brge	.+44     	; 0x1ae <filllocationarrays+0xbc>
			if (set == 1){
     182:	81 30       	cpi	r24, 0x01	; 1
     184:	49 f5       	brne	.+82     	; 0x1d8 <filllocationarrays+0xe6>
			arrx[placement]=i+1+1;
     186:	e1 e0       	ldi	r30, 0x01	; 1
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	ec 0f       	add	r30, r28
     18c:	fd 1f       	adc	r31, r29
     18e:	e2 0f       	add	r30, r18
     190:	f3 1f       	adc	r31, r19
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	84 0f       	add	r24, r20
     196:	80 83       	st	Z, r24
			arry[placement]=0+1;
     198:	ea e1       	ldi	r30, 0x1A	; 26
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	ec 0f       	add	r30, r28
     19e:	fd 1f       	adc	r31, r29
     1a0:	e2 0f       	add	r30, r18
     1a2:	f3 1f       	adc	r31, r19
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	80 83       	st	Z, r24
			placement++;}
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
     1ac:	15 c0       	rjmp	.+42     	; 0x1d8 <filllocationarrays+0xe6>
		}else{
			if (set == 1){
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	99 f4       	brne	.+38     	; 0x1d8 <filllocationarrays+0xe6>
			arrx[placement]=i-4+1;
     1b2:	e1 e0       	ldi	r30, 0x01	; 1
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ec 0f       	add	r30, r28
     1b8:	fd 1f       	adc	r31, r29
     1ba:	e2 0f       	add	r30, r18
     1bc:	f3 1f       	adc	r31, r19
     1be:	8d ef       	ldi	r24, 0xFD	; 253
     1c0:	84 0f       	add	r24, r20
     1c2:	80 83       	st	Z, r24
			arry[placement]=1+1;
     1c4:	ea e1       	ldi	r30, 0x1A	; 26
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	ec 0f       	add	r30, r28
     1ca:	fd 1f       	adc	r31, r29
     1cc:	e2 0f       	add	r30, r18
     1ce:	f3 1f       	adc	r31, r19
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	80 83       	st	Z, r24
			placement++;}
     1d4:	2f 5f       	subi	r18, 0xFF	; 255
     1d6:	3f 4f       	sbci	r19, 0xFF	; 255
	if (self->Recieved[1]==1){
		arrx[placement]=1;
		arry[placement]=1;
		placement++;
	}
	for (int i=0;i<8;i++){
     1d8:	4f 5f       	subi	r20, 0xFF	; 255
     1da:	5f 4f       	sbci	r21, 0xFF	; 255
     1dc:	48 30       	cpi	r20, 0x08	; 8
     1de:	51 05       	cpc	r21, r1
     1e0:	14 f2       	brlt	.-124    	; 0x166 <filllocationarrays+0x74>
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	53 c0       	rjmp	.+166    	; 0x28e <filllocationarrays+0x19c>
			arry[placement]=1+1;
			placement++;}
		}
	}
		for (int i=0;i<8;i++){
			set = ((self->Recieved[3] >> i)  & 0x01);
     1e8:	5e 96       	adiw	r26, 0x1e	; 30
     1ea:	8c 91       	ld	r24, X
     1ec:	5e 97       	sbiw	r26, 0x1e	; 30
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	04 2e       	mov	r0, r20
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <filllocationarrays+0x106>
     1f4:	95 95       	asr	r25
     1f6:	87 95       	ror	r24
     1f8:	0a 94       	dec	r0
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <filllocationarrays+0x102>
     1fc:	81 70       	andi	r24, 0x01	; 1
			if (i==0){
     1fe:	41 15       	cp	r20, r1
     200:	51 05       	cpc	r21, r1
     202:	b9 f4       	brne	.+46     	; 0x232 <filllocationarrays+0x140>
				if (set == 1){
     204:	81 30       	cpi	r24, 0x01	; 1
     206:	09 f0       	breq	.+2      	; 0x20a <filllocationarrays+0x118>
     208:	40 c0       	rjmp	.+128    	; 0x28a <filllocationarrays+0x198>
				arrx[placement]=i+4+1;
     20a:	e1 e0       	ldi	r30, 0x01	; 1
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	ec 0f       	add	r30, r28
     210:	fd 1f       	adc	r31, r29
     212:	e2 0f       	add	r30, r18
     214:	f3 1f       	adc	r31, r19
     216:	85 e0       	ldi	r24, 0x05	; 5
     218:	84 0f       	add	r24, r20
     21a:	80 83       	st	Z, r24
				arry[placement]=1+1;
     21c:	ea e1       	ldi	r30, 0x1A	; 26
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	ec 0f       	add	r30, r28
     222:	fd 1f       	adc	r31, r29
     224:	e2 0f       	add	r30, r18
     226:	f3 1f       	adc	r31, r19
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	80 83       	st	Z, r24
				placement++;}
     22c:	2f 5f       	subi	r18, 0xFF	; 255
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	2c c0       	rjmp	.+88     	; 0x28a <filllocationarrays+0x198>
			}else if(i<6){
     232:	46 30       	cpi	r20, 0x06	; 6
     234:	51 05       	cpc	r21, r1
     236:	a4 f4       	brge	.+40     	; 0x260 <filllocationarrays+0x16e>
				if (set == 1){
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	39 f5       	brne	.+78     	; 0x28a <filllocationarrays+0x198>
				arrx[placement]=i-1+1;
     23c:	e1 e0       	ldi	r30, 0x01	; 1
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ec 0f       	add	r30, r28
     242:	fd 1f       	adc	r31, r29
     244:	e2 0f       	add	r30, r18
     246:	f3 1f       	adc	r31, r19
     248:	40 83       	st	Z, r20
				arry[placement]=2+1;
     24a:	ea e1       	ldi	r30, 0x1A	; 26
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	ec 0f       	add	r30, r28
     250:	fd 1f       	adc	r31, r29
     252:	e2 0f       	add	r30, r18
     254:	f3 1f       	adc	r31, r19
     256:	83 e0       	ldi	r24, 0x03	; 3
     258:	80 83       	st	Z, r24
				placement++;}
     25a:	2f 5f       	subi	r18, 0xFF	; 255
     25c:	3f 4f       	sbci	r19, 0xFF	; 255
     25e:	15 c0       	rjmp	.+42     	; 0x28a <filllocationarrays+0x198>
			}else{
				if (set == 1){
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	99 f4       	brne	.+38     	; 0x28a <filllocationarrays+0x198>
				arrx[placement]=i-6+1;
     264:	e1 e0       	ldi	r30, 0x01	; 1
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	ec 0f       	add	r30, r28
     26a:	fd 1f       	adc	r31, r29
     26c:	e2 0f       	add	r30, r18
     26e:	f3 1f       	adc	r31, r19
     270:	8b ef       	ldi	r24, 0xFB	; 251
     272:	84 0f       	add	r24, r20
     274:	80 83       	st	Z, r24
				arry[placement]=3+1;
     276:	ea e1       	ldi	r30, 0x1A	; 26
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ec 0f       	add	r30, r28
     27c:	fd 1f       	adc	r31, r29
     27e:	e2 0f       	add	r30, r18
     280:	f3 1f       	adc	r31, r19
     282:	84 e0       	ldi	r24, 0x04	; 4
     284:	80 83       	st	Z, r24
				placement++;}
     286:	2f 5f       	subi	r18, 0xFF	; 255
     288:	3f 4f       	sbci	r19, 0xFF	; 255
			arrx[placement]=i-4+1;
			arry[placement]=1+1;
			placement++;}
		}
	}
		for (int i=0;i<8;i++){
     28a:	4f 5f       	subi	r20, 0xFF	; 255
     28c:	5f 4f       	sbci	r21, 0xFF	; 255
     28e:	48 30       	cpi	r20, 0x08	; 8
     290:	51 05       	cpc	r21, r1
     292:	0c f4       	brge	.+2      	; 0x296 <filllocationarrays+0x1a4>
     294:	a9 cf       	rjmp	.-174    	; 0x1e8 <filllocationarrays+0xf6>
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	50 e0       	ldi	r21, 0x00	; 0
     29a:	3b c0       	rjmp	.+118    	; 0x312 <filllocationarrays+0x220>
				arry[placement]=3+1;
				placement++;}
			}
		}
		for (int i=0;i<8;i++){
			set = ((self->Recieved[4] >> i)  & 0x01);
     29c:	5f 96       	adiw	r26, 0x1f	; 31
     29e:	8c 91       	ld	r24, X
     2a0:	5f 97       	sbiw	r26, 0x1f	; 31
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	04 2e       	mov	r0, r20
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <filllocationarrays+0x1ba>
     2a8:	95 95       	asr	r25
     2aa:	87 95       	ror	r24
     2ac:	0a 94       	dec	r0
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <filllocationarrays+0x1b6>
     2b0:	81 70       	andi	r24, 0x01	; 1
			if (i<3){
     2b2:	43 30       	cpi	r20, 0x03	; 3
     2b4:	51 05       	cpc	r21, r1
     2b6:	b4 f4       	brge	.+44     	; 0x2e4 <filllocationarrays+0x1f2>
				if (set == 1){
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	49 f5       	brne	.+82     	; 0x30e <filllocationarrays+0x21c>
				arrx[placement]=i+2+1;
     2bc:	e1 e0       	ldi	r30, 0x01	; 1
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	ec 0f       	add	r30, r28
     2c2:	fd 1f       	adc	r31, r29
     2c4:	e2 0f       	add	r30, r18
     2c6:	f3 1f       	adc	r31, r19
     2c8:	83 e0       	ldi	r24, 0x03	; 3
     2ca:	84 0f       	add	r24, r20
     2cc:	80 83       	st	Z, r24
				arry[placement]=3+1;
     2ce:	ea e1       	ldi	r30, 0x1A	; 26
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ec 0f       	add	r30, r28
     2d4:	fd 1f       	adc	r31, r29
     2d6:	e2 0f       	add	r30, r18
     2d8:	f3 1f       	adc	r31, r19
     2da:	84 e0       	ldi	r24, 0x04	; 4
     2dc:	80 83       	st	Z, r24
				placement++;}
     2de:	2f 5f       	subi	r18, 0xFF	; 255
     2e0:	3f 4f       	sbci	r19, 0xFF	; 255
     2e2:	15 c0       	rjmp	.+42     	; 0x30e <filllocationarrays+0x21c>
			}else{
				if (set == 1){
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	99 f4       	brne	.+38     	; 0x30e <filllocationarrays+0x21c>
				arrx[placement]=i-3+1;
     2e8:	e1 e0       	ldi	r30, 0x01	; 1
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	ec 0f       	add	r30, r28
     2ee:	fd 1f       	adc	r31, r29
     2f0:	e2 0f       	add	r30, r18
     2f2:	f3 1f       	adc	r31, r19
     2f4:	8e ef       	ldi	r24, 0xFE	; 254
     2f6:	84 0f       	add	r24, r20
     2f8:	80 83       	st	Z, r24
				arry[placement]=4+1;
     2fa:	ea e1       	ldi	r30, 0x1A	; 26
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ec 0f       	add	r30, r28
     300:	fd 1f       	adc	r31, r29
     302:	e2 0f       	add	r30, r18
     304:	f3 1f       	adc	r31, r19
     306:	85 e0       	ldi	r24, 0x05	; 5
     308:	80 83       	st	Z, r24
				placement++;}
     30a:	2f 5f       	subi	r18, 0xFF	; 255
     30c:	3f 4f       	sbci	r19, 0xFF	; 255
				arrx[placement]=i-6+1;
				arry[placement]=3+1;
				placement++;}
			}
		}
		for (int i=0;i<8;i++){
     30e:	4f 5f       	subi	r20, 0xFF	; 255
     310:	5f 4f       	sbci	r21, 0xFF	; 255
     312:	48 30       	cpi	r20, 0x08	; 8
     314:	51 05       	cpc	r21, r1
     316:	14 f2       	brlt	.-124    	; 0x29c <filllocationarrays+0x1aa>
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	19 c0       	rjmp	.+50     	; 0x350 <filllocationarrays+0x25e>
				arry[placement]=4+1;
				placement++;}
			}
		}
	for (int i=0;i<25;i++){
		self->Orderarx[i]=arrx[i];
     31e:	e1 e0       	ldi	r30, 0x01	; 1
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ec 0f       	add	r30, r28
     324:	fd 1f       	adc	r31, r29
     326:	e2 0f       	add	r30, r18
     328:	f3 1f       	adc	r31, r19
     32a:	40 81       	ld	r20, Z
     32c:	cd 01       	movw	r24, r26
     32e:	82 0f       	add	r24, r18
     330:	93 1f       	adc	r25, r19
     332:	fc 01       	movw	r30, r24
     334:	ee 5a       	subi	r30, 0xAE	; 174
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	40 83       	st	Z, r20
		self->Orderary[i]=arry[i];
     33a:	ea e1       	ldi	r30, 0x1A	; 26
     33c:	f0 e0       	ldi	r31, 0x00	; 0
     33e:	ec 0f       	add	r30, r28
     340:	fd 1f       	adc	r31, r29
     342:	e2 0f       	add	r30, r18
     344:	f3 1f       	adc	r31, r19
     346:	40 81       	ld	r20, Z
     348:	fc 01       	movw	r30, r24
     34a:	41 af       	std	Z+57, r20	; 0x39
				arrx[placement]=i-3+1;
				arry[placement]=4+1;
				placement++;}
			}
		}
	for (int i=0;i<25;i++){
     34c:	2f 5f       	subi	r18, 0xFF	; 255
     34e:	3f 4f       	sbci	r19, 0xFF	; 255
     350:	29 31       	cpi	r18, 0x19	; 25
     352:	31 05       	cpc	r19, r1
     354:	24 f3       	brlt	.-56     	; 0x31e <filllocationarrays+0x22c>
		self->Orderarx[i]=arrx[i];
		self->Orderary[i]=arry[i];
	}
}
     356:	e2 96       	adiw	r28, 0x32	; 50
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <sendACK>:
			


void sendACK(Communications *self ){
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	00 d0       	rcall	.+0      	; 0x36e <sendACK+0x6>
     36e:	1f 92       	push	r1
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
						char tmp[3];
						tmp[0]=START;
     374:	88 e0       	ldi	r24, 0x08	; 8
     376:	89 83       	std	Y+1, r24	; 0x01
						tmp[1]=255;
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	8a 83       	std	Y+2, r24	; 0x02
						tmp[2]=STOP;
     37c:	85 e6       	ldi	r24, 0x65	; 101
     37e:	8b 83       	std	Y+3, r24	; 0x03
						serial_send_blocking(tmp,4);
     380:	64 e0       	ldi	r22, 0x04	; 4
     382:	ce 01       	movw	r24, r28
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	0e 94 23 17 	call	0x2e46	; 0x2e46 <serial_send_blocking>
}
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <Update>:

void Update(Communications *self){
     396:	cf 92       	push	r12
     398:	df 92       	push	r13
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ec 01       	movw	r28, r24
	
	char Flag =0;
	unsigned long timebetweensends = 750;
	static unsigned long timesincelastsend = 0;
	
	if (serial_receive_buffer_full()==1){
     3a6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <serial_receive_buffer_full>
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <Update+0x1a>
     3ae:	61 c0       	rjmp	.+194    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
     3b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3b2:	88 30       	cpi	r24, 0x08	; 8
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <Update+0x22>
     3b6:	5f c0       	rjmp	.+190    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     3b8:	e8 81       	ld	r30, Y
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	31 97       	sbiw	r30, 0x01	; 1
     3be:	ec 0f       	add	r30, r28
     3c0:	fd 1f       	adc	r31, r29
     3c2:	83 8d       	ldd	r24, Z+27	; 0x1b
     3c4:	85 36       	cpi	r24, 0x65	; 101
     3c6:	09 f0       	breq	.+2      	; 0x3ca <Update+0x34>
     3c8:	58 c0       	rjmp	.+176    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			Flag = 1;
			//play_from_program_space(fugue);
			
			sendACK(self); // stops here to send acknowledge
     3ca:	ce 01       	movw	r24, r28
     3cc:	0e 94 b4 01 	call	0x368	; 0x368 <sendACK>
			
			if (self->Recieved[5]==254 || self->Recieved[8]==254){    //enter emergency stop
     3d0:	88 a1       	ldd	r24, Y+32	; 0x20
     3d2:	8e 3f       	cpi	r24, 0xFE	; 254
     3d4:	19 f0       	breq	.+6      	; 0x3dc <Update+0x46>
     3d6:	8b a1       	ldd	r24, Y+35	; 0x23
     3d8:	8e 3f       	cpi	r24, 0xFE	; 254
     3da:	29 f4       	brne	.+10     	; 0x3e6 <Update+0x50>
				//play_from_program_space(fugue);
				self->EmergencyStop=1;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	fe 01       	movw	r30, r28
     3e0:	e5 59       	subi	r30, 0x95	; 149
     3e2:	ff 4f       	sbci	r31, 0xFF	; 255
     3e4:	80 83       	st	Z, r24
			}
			
			if (self->Recieved[8]==250){    // Charging
     3e6:	8b a1       	ldd	r24, Y+35	; 0x23
     3e8:	8a 3f       	cpi	r24, 0xFA	; 250
     3ea:	29 f4       	brne	.+10     	; 0x3f6 <Update+0x60>
				self->EmergencyStop=4;
     3ec:	94 e0       	ldi	r25, 0x04	; 4
     3ee:	fe 01       	movw	r30, r28
     3f0:	e5 59       	subi	r30, 0x95	; 149
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	90 83       	st	Z, r25
			}
			
			if (self->Recieved[8]==245){                            // Enter Spin Mode
     3f6:	85 3f       	cpi	r24, 0xF5	; 245
     3f8:	29 f4       	brne	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				self->EmergencyStop=2;
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	fe 01       	movw	r30, r28
     3fe:	e5 59       	subi	r30, 0x95	; 149
     400:	ff 4f       	sbci	r31, 0xFF	; 255
     402:	80 83       	st	Z, r24
			}
			if (self->locationx==255 && self->locationy==255){
     404:	fe 01       	movw	r30, r28
     406:	e2 59       	subi	r30, 0x92	; 146
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	80 81       	ld	r24, Z
     40c:	8f 3f       	cpi	r24, 0xFF	; 255
     40e:	61 f4       	brne	.+24     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     410:	31 96       	adiw	r30, 0x01	; 1
     412:	80 81       	ld	r24, Z
     414:	8f 3f       	cpi	r24, 0xFF	; 255
     416:	41 f4       	brne	.+16     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				filllocationarrays(self);
     418:	ce 01       	movw	r24, r28
     41a:	0e 94 79 00 	call	0xf2	; 0xf2 <filllocationarrays>
				self->flag =1;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	fe 01       	movw	r30, r28
     422:	e0 59       	subi	r30, 0x90	; 144
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	80 83       	st	Z, r24
			}
			if(self->Recieved[8]==230){
     428:	8b a1       	ldd	r24, Y+35	; 0x23
     42a:	86 3e       	cpi	r24, 0xE6	; 230
     42c:	49 f4       	brne	.+18     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				self->locationx = -1;  
     42e:	9f ef       	ldi	r25, 0xFF	; 255
     430:	fe 01       	movw	r30, r28
     432:	e2 59       	subi	r30, 0x92	; 146
     434:	ff 4f       	sbci	r31, 0xFF	; 255
     436:	90 83       	st	Z, r25
				self->locationy = -1;
     438:	31 96       	adiw	r30, 0x01	; 1
     43a:	90 83       	st	Z, r25
				self->flag = 0;
     43c:	31 96       	adiw	r30, 0x01	; 1
     43e:	10 82       	st	Z, r1
				//play_from_program_space(welcomed);
			}
			if (self->Recieved[8]==240){                            // Enter Manual Mode
     440:	80 3f       	cpi	r24, 0xF0	; 240
     442:	e9 f4       	brne	.+58     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
				self->EmergencyStop=3;
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	fe 01       	movw	r30, r28
     448:	e5 59       	subi	r30, 0x95	; 149
     44a:	ff 4f       	sbci	r31, 0xFF	; 255
     44c:	80 83       	st	Z, r24
				for (int i = 0; i < 4; i++){
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0a c0       	rjmp	.+20     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
					self->Direction[i]=self->Recieved[i+9];
     454:	fc 01       	movw	r30, r24
     456:	39 96       	adiw	r30, 0x09	; 9
     458:	ec 0f       	add	r30, r28
     45a:	fd 1f       	adc	r31, r29
     45c:	23 8d       	ldd	r18, Z+27	; 0x1b
     45e:	fe 01       	movw	r30, r28
     460:	e8 0f       	add	r30, r24
     462:	f9 1f       	adc	r31, r25
     464:	25 ab       	std	Z+53, r18	; 0x35
				self->flag = 0;
				//play_from_program_space(welcomed);
			}
			if (self->Recieved[8]==240){                            // Enter Manual Mode
				self->EmergencyStop=3;
				for (int i = 0; i < 4; i++){
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	91 05       	cpc	r25, r1
     46c:	9c f3       	brlt	.-26     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
	unsigned long timebetweensends = 750;
	static unsigned long timesincelastsend = 0;
	
	if (serial_receive_buffer_full()==1){
		if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
			Flag = 1;
     46e:	11 e0       	ldi	r17, 0x01	; 1
     470:	07 c0       	rjmp	.+14     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
}

void Update(Communications *self){
	
	
	char Flag =0;
     472:	10 e0       	ldi	r17, 0x00	; 0
     474:	05 c0       	rjmp	.+10     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	03 c0       	rjmp	.+6      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     47a:	10 e0       	ldi	r17, 0x00	; 0
     47c:	01 c0       	rjmp	.+2      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
	unsigned long timebetweensends = 750;
	static unsigned long timesincelastsend = 0;
	
	if (serial_receive_buffer_full()==1){
		if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
			Flag = 1;
     47e:	11 e0       	ldi	r17, 0x01	; 1
			}
			
			
		}
	}
 if (timesincelastsend+timebetweensends<=get_ms()){
     480:	c0 90 07 02 	lds	r12, 0x0207	; 0x800207 <timesincelastsend.2232>
     484:	d0 90 08 02 	lds	r13, 0x0208	; 0x800208 <timesincelastsend.2232+0x1>
     488:	e0 90 09 02 	lds	r14, 0x0209	; 0x800209 <timesincelastsend.2232+0x2>
     48c:	f0 90 0a 02 	lds	r15, 0x020A	; 0x80020a <timesincelastsend.2232+0x3>
     490:	8e ee       	ldi	r24, 0xEE	; 238
     492:	c8 0e       	add	r12, r24
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	d8 1e       	adc	r13, r24
     498:	e1 1c       	adc	r14, r1
     49a:	f1 1c       	adc	r15, r1
     49c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <get_ms>
     4a0:	6c 15       	cp	r22, r12
     4a2:	7d 05       	cpc	r23, r13
     4a4:	8e 05       	cpc	r24, r14
     4a6:	9f 05       	cpc	r25, r15
     4a8:	c8 f1       	brcs	.+114    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
	 timesincelastsend=get_ms();
     4aa:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <get_ms>
     4ae:	60 93 07 02 	sts	0x0207, r22	; 0x800207 <timesincelastsend.2232>
     4b2:	70 93 08 02 	sts	0x0208, r23	; 0x800208 <timesincelastsend.2232+0x1>
     4b6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <timesincelastsend.2232+0x2>
     4ba:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <timesincelastsend.2232+0x3>
	 for (char i=0;i<self->val;i++){
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
		 self->msgBuffer[i]=i;
     4c2:	fe 01       	movw	r30, r28
     4c4:	e8 0f       	add	r30, r24
     4c6:	f1 1d       	adc	r31, r1
     4c8:	81 83       	std	Z+1, r24	; 0x01
			
		}
	}
 if (timesincelastsend+timebetweensends<=get_ms()){
	 timesincelastsend=get_ms();
	 for (char i=0;i<self->val;i++){
     4ca:	8f 5f       	subi	r24, 0xFF	; 255
     4cc:	68 81       	ld	r22, Y
     4ce:	86 17       	cp	r24, r22
     4d0:	c0 f3       	brcs	.-16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		 self->msgBuffer[i]=i;
	 }
	 self->msgBuffer[0]=START;
     4d2:	88 e0       	ldi	r24, 0x08	; 8
     4d4:	89 83       	std	Y+1, r24	; 0x01
	 self->msgBuffer[1]=self->batterylvl;
     4d6:	fe 01       	movw	r30, r28
     4d8:	e4 59       	subi	r30, 0x94	; 148
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	80 81       	ld	r24, Z
     4de:	8a 83       	std	Y+2, r24	; 0x02
	 self->msgBuffer[2]=self->magprocess;
     4e0:	31 96       	adiw	r30, 0x01	; 1
     4e2:	80 81       	ld	r24, Z
     4e4:	8b 83       	std	Y+3, r24	; 0x03
	 self->msgBuffer[3]=self->locationx;
     4e6:	31 96       	adiw	r30, 0x01	; 1
     4e8:	80 81       	ld	r24, Z
     4ea:	8c 83       	std	Y+4, r24	; 0x04
	 self->msgBuffer[4]=self->locationy;
     4ec:	31 96       	adiw	r30, 0x01	; 1
     4ee:	80 81       	ld	r24, Z
     4f0:	8d 83       	std	Y+5, r24	; 0x05
	 self->msgBuffer[5]=self->EmergencyStop;
     4f2:	34 97       	sbiw	r30, 0x04	; 4
     4f4:	80 81       	ld	r24, Z
     4f6:	8e 83       	std	Y+6, r24	; 0x06
	 self->msgBuffer[self->val-1]=STOP;
     4f8:	e6 2f       	mov	r30, r22
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	ec 0f       	add	r30, r28
     500:	fd 1f       	adc	r31, r29
     502:	85 e6       	ldi	r24, 0x65	; 101
     504:	81 83       	std	Z+1, r24	; 0x01
	 serial_send(self->msgBuffer, self->val);
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <serial_send>

	 //delay_ms(10000); // test
	 if (Flag == 1){
     50e:	11 30       	cpi	r17, 0x01	; 1
     510:	29 f4       	brne	.+10     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
		 serial_receive(self->Recieved,self->val);
     512:	68 81       	ld	r22, Y
     514:	ce 01       	movw	r24, r28
     516:	4b 96       	adiw	r24, 0x1b	; 27
     518:	0e 94 57 16 	call	0x2cae	; 0x2cae <serial_receive>
	 }
 }
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	cf 90       	pop	r12
     52a:	08 95       	ret

0000052c <fillarrays>:

void fillarrays(Communications *self){
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	60 97       	sbiw	r28, 0x10	; 16
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	ac 01       	movw	r20, r24
	//temp
		char arrx[]={2,5,4,2,1,6,1,5};
     542:	88 e0       	ldi	r24, 0x08	; 8
     544:	e8 e2       	ldi	r30, 0x28	; 40
     546:	f1 e0       	ldi	r31, 0x01	; 1
     548:	de 01       	movw	r26, r28
     54a:	11 96       	adiw	r26, 0x01	; 1
     54c:	01 90       	ld	r0, Z+
     54e:	0d 92       	st	X+, r0
     550:	8a 95       	dec	r24
     552:	e1 f7       	brne	.-8      	; 0x54c <fillarrays+0x20>
		char arry[]={0,1,3,5,2,4,1,2};
     554:	88 e0       	ldi	r24, 0x08	; 8
     556:	e0 e3       	ldi	r30, 0x30	; 48
     558:	f1 e0       	ldi	r31, 0x01	; 1
     55a:	de 01       	movw	r26, r28
     55c:	19 96       	adiw	r26, 0x09	; 9
     55e:	01 90       	ld	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	8a 95       	dec	r24
     564:	e1 f7       	brne	.-8      	; 0x55e <fillarrays+0x32>
		for (int i=0;i<8;i++){
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	19 c0       	rjmp	.+50     	; 0x59e <fillarrays+0x72>
			self->Orderarx[i]=arrx[i];
     56c:	e1 e0       	ldi	r30, 0x01	; 1
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	ec 0f       	add	r30, r28
     572:	fd 1f       	adc	r31, r29
     574:	e2 0f       	add	r30, r18
     576:	f3 1f       	adc	r31, r19
     578:	90 81       	ld	r25, Z
     57a:	da 01       	movw	r26, r20
     57c:	a2 0f       	add	r26, r18
     57e:	b3 1f       	adc	r27, r19
     580:	fd 01       	movw	r30, r26
     582:	ee 5a       	subi	r30, 0xAE	; 174
     584:	ff 4f       	sbci	r31, 0xFF	; 255
     586:	90 83       	st	Z, r25
			self->Orderary[i]=arry[i];
     588:	e9 e0       	ldi	r30, 0x09	; 9
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	ec 0f       	add	r30, r28
     58e:	fd 1f       	adc	r31, r29
     590:	e2 0f       	add	r30, r18
     592:	f3 1f       	adc	r31, r19
     594:	90 81       	ld	r25, Z
     596:	d9 96       	adiw	r26, 0x39	; 57
     598:	9c 93       	st	X, r25

void fillarrays(Communications *self){
	//temp
		char arrx[]={2,5,4,2,1,6,1,5};
		char arry[]={0,1,3,5,2,4,1,2};
		for (int i=0;i<8;i++){
     59a:	2f 5f       	subi	r18, 0xFF	; 255
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	28 30       	cpi	r18, 0x08	; 8
     5a0:	31 05       	cpc	r19, r1
     5a2:	24 f3       	brlt	.-56     	; 0x56c <fillarrays+0x40>
			self->Orderarx[i]=arrx[i];
			self->Orderary[i]=arry[i];
		}
}
     5a4:	60 96       	adiw	r28, 0x10	; 16
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <Communications_INIT>:

void Communications_INIT(Communications * myCom){
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
	myCom->val = Max_Bytes;	
     5c0:	8a e1       	ldi	r24, 0x1A	; 26
     5c2:	88 83       	st	Y, r24


	//Setup Communications
	serial_set_baud_rate(9600);
     5c4:	60 e8       	ldi	r22, 0x80	; 128
     5c6:	75 e2       	ldi	r23, 0x25	; 37
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <serial_set_baud_rate>
	serial_receive(myCom->Recieved,myCom->val);
     5d0:	68 81       	ld	r22, Y
     5d2:	ce 01       	movw	r24, r28
     5d4:	4b 96       	adiw	r24, 0x1b	; 27
     5d6:	0e 94 57 16 	call	0x2cae	; 0x2cae <serial_receive>

	//filling in functions
	myCom->Update		 = Update;
     5da:	fe 01       	movw	r30, r28
     5dc:	ef 58       	subi	r30, 0x8F	; 143
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	8b ec       	ldi	r24, 0xCB	; 203
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	91 83       	std	Z+1, r25	; 0x01
     5e6:	80 83       	st	Z, r24
		
	//filling in default values
	myCom->EmergencyStop = 0;
     5e8:	36 97       	sbiw	r30, 0x06	; 6
     5ea:	10 82       	st	Z, r1
	myCom->batterylvl	 = batteryPercentage();
     5ec:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
     5f0:	8e 01       	movw	r16, r28
     5f2:	04 59       	subi	r16, 0x94	; 148
     5f4:	1f 4f       	sbci	r17, 0xFF	; 255
     5f6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fixunssfsi>
     5fa:	f8 01       	movw	r30, r16
     5fc:	60 83       	st	Z, r22
	myCom->magprocess	 = 0;
     5fe:	31 96       	adiw	r30, 0x01	; 1
     600:	10 82       	st	Z, r1
	myCom->locationx	 = 4;
     602:	31 96       	adiw	r30, 0x01	; 1
     604:	84 e0       	ldi	r24, 0x04	; 4
     606:	80 83       	st	Z, r24
	myCom->locationy	 = 5;
     608:	31 96       	adiw	r30, 0x01	; 1
     60a:	85 e0       	ldi	r24, 0x05	; 5
     60c:	80 83       	st	Z, r24
	
	
	fillarrays(myCom);
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 96 02 	call	0x52c	; 0x52c <fillarrays>
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <batteryPercentage>:

#include "display.h"
#include <pololu/3pi.h>

float batteryPercentage()//Should this function be in main or in display.c or something else?
{
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     626:	0e 94 2b 10 	call	0x2056	; 0x2056 <read_battery_millivolts_3pi>
	
	float milliVolts = read_battery_millivolts();
     62a:	bc 01       	movw	r22, r24
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__floatunsisf>
     634:	6b 01       	movw	r12, r22
     636:	7c 01       	movw	r14, r24
	float batteryPercent = 0.000000000632*((milliVolts)*(milliVolts)*(milliVolts));
     638:	9b 01       	movw	r18, r22
     63a:	ac 01       	movw	r20, r24
     63c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3>
     640:	9b 01       	movw	r18, r22
     642:	ac 01       	movw	r20, r24
     644:	c7 01       	movw	r24, r14
     646:	b6 01       	movw	r22, r12
     648:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3>
     64c:	2c e0       	ldi	r18, 0x0C	; 12
     64e:	39 eb       	ldi	r19, 0xB9	; 185
     650:	4d e2       	ldi	r20, 0x2D	; 45
     652:	50 e3       	ldi	r21, 0x30	; 48
     654:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3>
	return batteryPercent;
}
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	df 90       	pop	r13
     65e:	cf 90       	pop	r12
     660:	08 95       	ret

00000662 <updateDisplay>:

void updateDisplay(int orderPercent, int batteryPercent, robotStates currentState)
{
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	cf 93       	push	r28
     66c:	7c 01       	movw	r14, r24
     66e:	8b 01       	movw	r16, r22
     670:	c4 2f       	mov	r28, r20
	clear();
     672:	0e 94 4d 14 	call	0x289a	; 0x289a <clear>
	lcd_goto_xy(0,0);
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <lcd_goto_xy>
	print("Job:");
     67e:	85 e5       	ldi	r24, 0x55	; 85
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
	print_long(orderPercent);
     686:	b7 01       	movw	r22, r14
     688:	ff 0c       	add	r15, r15
     68a:	88 0b       	sbc	r24, r24
     68c:	99 0b       	sbc	r25, r25
     68e:	0e 94 b1 14 	call	0x2962	; 0x2962 <print_long>
	print("%");
     692:	8a e5       	ldi	r24, 0x5A	; 90
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
	
	lcd_goto_xy(0,1);
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <lcd_goto_xy>
	print("Bat:");
     6a2:	8c e5       	ldi	r24, 0x5C	; 92
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
	print_long(batteryPercent);
     6aa:	b8 01       	movw	r22, r16
     6ac:	11 0f       	add	r17, r17
     6ae:	88 0b       	sbc	r24, r24
     6b0:	99 0b       	sbc	r25, r25
     6b2:	0e 94 b1 14 	call	0x2962	; 0x2962 <print_long>
	print("%");
     6b6:	8a e5       	ldi	r24, 0x5A	; 90
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
	switch(currentState)
     6be:	c2 30       	cpi	r28, 0x02	; 2
     6c0:	a9 f0       	breq	.+42     	; 0x6ec <updateDisplay+0x8a>
     6c2:	28 f4       	brcc	.+10     	; 0x6ce <updateDisplay+0x6c>
     6c4:	cc 23       	and	r28, r28
     6c6:	41 f0       	breq	.+16     	; 0x6d8 <updateDisplay+0x76>
     6c8:	c1 30       	cpi	r28, 0x01	; 1
     6ca:	59 f0       	breq	.+22     	; 0x6e2 <updateDisplay+0x80>
     6cc:	1d c0       	rjmp	.+58     	; 0x708 <updateDisplay+0xa6>
     6ce:	c3 30       	cpi	r28, 0x03	; 3
     6d0:	91 f0       	breq	.+36     	; 0x6f6 <updateDisplay+0x94>
     6d2:	c4 30       	cpi	r28, 0x04	; 4
     6d4:	a9 f0       	breq	.+42     	; 0x700 <updateDisplay+0x9e>
     6d6:	18 c0       	rjmp	.+48     	; 0x708 <updateDisplay+0xa6>
	{
		case manual:
		print("M");//M for Manual
     6d8:	81 e6       	ldi	r24, 0x61	; 97
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
     6e0:	13 c0       	rjmp	.+38     	; 0x708 <updateDisplay+0xa6>
		case mazeSolver:
		print("P");//P for Parcour
     6e2:	83 e6       	ldi	r24, 0x63	; 99
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
     6ea:	0e c0       	rjmp	.+28     	; 0x708 <updateDisplay+0xa6>
		case logicsBot:
		print("O");//O for Order
     6ec:	85 e6       	ldi	r24, 0x65	; 101
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
     6f4:	09 c0       	rjmp	.+18     	; 0x708 <updateDisplay+0xa6>
		case chargeMode:
		print("C");//C for Charge
     6f6:	87 e6       	ldi	r24, 0x67	; 103
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
     6fe:	04 c0       	rjmp	.+8      	; 0x708 <updateDisplay+0xa6>
		case homingMode:
		print("H");//H for Homing
     700:	89 e6       	ldi	r24, 0x69	; 105
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
	}
}
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	08 95       	ret

00000714 <errorDisplay>:

void errorDisplay(errorStates error, int batteryPercent)
{
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	18 2f       	mov	r17, r24
     71c:	eb 01       	movw	r28, r22
	clear();
     71e:	0e 94 4d 14 	call	0x289a	; 0x289a <clear>
	lcd_goto_xy(0,0);
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <lcd_goto_xy>
	print("Bat:");
     72a:	8c e5       	ldi	r24, 0x5C	; 92
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
	print_long(batteryPercent);
     732:	be 01       	movw	r22, r28
     734:	dd 0f       	add	r29, r29
     736:	88 0b       	sbc	r24, r24
     738:	99 0b       	sbc	r25, r25
     73a:	0e 94 b1 14 	call	0x2962	; 0x2962 <print_long>
	print("%");
     73e:	8a e5       	ldi	r24, 0x5A	; 90
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
	
	lcd_goto_xy(0,1);
     746:	61 e0       	ldi	r22, 0x01	; 1
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <lcd_goto_xy>
	
	switch(error)
     74e:	11 30       	cpi	r17, 0x01	; 1
     750:	59 f0       	breq	.+22     	; 0x768 <errorDisplay+0x54>
     752:	28 f0       	brcs	.+10     	; 0x75e <errorDisplay+0x4a>
     754:	12 30       	cpi	r17, 0x02	; 2
     756:	69 f0       	breq	.+26     	; 0x772 <errorDisplay+0x5e>
     758:	13 30       	cpi	r17, 0x03	; 3
     75a:	81 f0       	breq	.+32     	; 0x77c <errorDisplay+0x68>
     75c:	13 c0       	rjmp	.+38     	; 0x784 <errorDisplay+0x70>
	{
		case slipped:
		print("Slipped!");
     75e:	8b e6       	ldi	r24, 0x6B	; 107
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
     766:	0e c0       	rjmp	.+28     	; 0x784 <errorDisplay+0x70>
		case emergency:
		print("STOPPED");
     768:	84 e7       	ldi	r24, 0x74	; 116
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
     770:	09 c0       	rjmp	.+18     	; 0x784 <errorDisplay+0x70>
		case object:
		print("OBJECT");
     772:	8c e7       	ldi	r24, 0x7C	; 124
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
     77a:	04 c0       	rjmp	.+8      	; 0x784 <errorDisplay+0x70>
		case batLow:
		print("LOW-BAT");
     77c:	83 e8       	ldi	r24, 0x83	; 131
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
		break;
	}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	08 95       	ret

0000078c <whileBarcode>:

const char welcome[] PROGMEM = ">g32>>c32";
const char orderDone[] PROGMEM = ">g32>>g32>>g32>>>c22";
void whileBarcode()
{
	while (lineType() != Barcode)
     78c:	03 c0       	rjmp	.+6      	; 0x794 <whileBarcode+0x8>
	{
		motorControl('S');
     78e:	83 e5       	ldi	r24, 0x53	; 83
     790:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>

const char welcome[] PROGMEM = ">g32>>c32";
const char orderDone[] PROGMEM = ">g32>>g32>>g32>>>c22";
void whileBarcode()
{
	while (lineType() != Barcode)
     794:	0e 94 01 05 	call	0xa02	; 0xa02 <lineType>
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	c9 f7       	brne	.-14     	; 0x78e <whileBarcode+0x2>
	{
		motorControl('S');
	}
}
     79c:	08 95       	ret

0000079e <whileLineEnd>:

void whileLineEnd()
{
	while (lineType() != Line_end)
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <whileLineEnd+0x8>
	{
		motorControl('S');
     7a0:	83 e5       	ldi	r24, 0x53	; 83
     7a2:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
	}
}

void whileLineEnd()
{
	while (lineType() != Line_end)
     7a6:	0e 94 01 05 	call	0xa02	; 0xa02 <lineType>
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	c9 f7       	brne	.-14     	; 0x7a0 <whileLineEnd+0x2>
	{
		motorControl('S');
	}
}
     7ae:	08 95       	ret

000007b0 <charge_3pi>:

void charge_3pi(Communications *communications)
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	8c 01       	movw	r16, r24
	whileBarcode();
     7ba:	0e 94 c6 03 	call	0x78c	; 0x78c <whileBarcode>
	parcours('T', communications);
     7be:	b8 01       	movw	r22, r16
     7c0:	84 e5       	ldi	r24, 0x54	; 84
     7c2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <parcours>
	errorDisplay(batLow,0);
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	0e 94 8a 03 	call	0x714	; 0x714 <errorDisplay>
	warehouse(charging, communications);
     7d0:	b8 01       	movw	r22, r16
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	0e 94 cf 0b 	call	0x179e	; 0x179e <warehouse>
	for (int i = 0; i < 10; i++) {// wacht totdat de robot vol is
     7d8:	c0 e0       	ldi	r28, 0x00	; 0
     7da:	d0 e0       	ldi	r29, 0x00	; 0
     7dc:	09 c0       	rjmp	.+18     	; 0x7f0 <charge_3pi+0x40>
		play_from_program_space(welcome);
     7de:	8f e8       	ldi	r24, 0x8F	; 143
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 44 13 	call	0x2688	; 0x2688 <play_from_program_space>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     7e6:	84 ef       	ldi	r24, 0xF4	; 244
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
{
	whileBarcode();
	parcours('T', communications);
	errorDisplay(batLow,0);
	warehouse(charging, communications);
	for (int i = 0; i < 10; i++) {// wacht totdat de robot vol is
     7ee:	21 96       	adiw	r28, 0x01	; 1
     7f0:	ca 30       	cpi	r28, 0x0A	; 10
     7f2:	d1 05       	cpc	r29, r1
     7f4:	a4 f3       	brlt	.-24     	; 0x7de <charge_3pi+0x2e>
		play_from_program_space(welcome);
		delay(500);
	}								
	warehouse(charging, communications);
     7f6:	b8 01       	movw	r22, r16
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 cf 0b 	call	0x179e	; 0x179e <warehouse>
	whileBarcode();
     7fe:	0e 94 c6 03 	call	0x78c	; 0x78c <whileBarcode>
	parcours('B', communications);
     802:	b8 01       	movw	r22, r16
     804:	82 e4       	ldi	r24, 0x42	; 66
     806:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <parcours>
	whileLineEnd();
     80a:	0e 94 cf 03 	call	0x79e	; 0x79e <whileLineEnd>
	motorControl('L');
     80e:	8c e4       	ldi	r24, 0x4C	; 76
     810:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <pickOrder>:

void pickOrder(Communications *communications)
{
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	whileBarcode();
     824:	0e 94 c6 03 	call	0x78c	; 0x78c <whileBarcode>
	parcours('T', communications);
     828:	be 01       	movw	r22, r28
     82a:	84 e5       	ldi	r24, 0x54	; 84
     82c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <parcours>
	warehouse(orderPicking, communications); 	
     830:	be 01       	movw	r22, r28
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 cf 0b 	call	0x179e	; 0x179e <warehouse>
	whileBarcode();
     838:	0e 94 c6 03 	call	0x78c	; 0x78c <whileBarcode>
	parcours('B', communications);
     83c:	be 01       	movw	r22, r28
     83e:	82 e4       	ldi	r24, 0x42	; 66
     840:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <parcours>
	whileLineEnd();
     844:	0e 94 cf 03 	call	0x79e	; 0x79e <whileLineEnd>
	motorControl('L');
     848:	8c e4       	ldi	r24, 0x4C	; 76
     84a:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
	play_from_program_space(orderDone);
     84e:	8a e7       	ldi	r24, 0x7A	; 122
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 44 13 	call	0x2688	; 0x2688 <play_from_program_space>
}
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <main>:

int main()
{ 
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	c3 57       	subi	r28, 0x73	; 115
     866:	d1 09       	sbc	r29, r1
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	cd bf       	out	0x3d, r28	; 61
	
	play_from_program_space(welcome);
     872:	8f e8       	ldi	r24, 0x8F	; 143
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 44 13 	call	0x2688	; 0x2688 <play_from_program_space>
	
	Communications communications;
	Communications_INIT(&communications);
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Communications_INIT>
	
	initialize(&communications);
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	0e 94 9a 04 	call	0x934	; 0x934 <initialize>
		
		
	communications.locationx = -1;
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	e0 96       	adiw	r28, 0x30	; 48
     88e:	8f af       	std	Y+63, r24	; 0x3f
     890:	e0 97       	sbiw	r28, 0x30	; 48
	communications.locationy = -1;
     892:	e1 96       	adiw	r28, 0x31	; 49
     894:	8f af       	std	Y+63, r24	; 0x3f
     896:	e1 97       	sbiw	r28, 0x31	; 49
	while(1) 
	{
		updateDisplay(0, batteryPercentage(), homingMode);
     898:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
     89c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
     8a0:	44 e0       	ldi	r20, 0x04	; 4
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 31 03 	call	0x662	; 0x662 <updateDisplay>
		communications.Update(&communications);
     8aa:	e4 96       	adiw	r28, 0x34	; 52
     8ac:	ee ad       	ldd	r30, Y+62	; 0x3e
     8ae:	ff ad       	ldd	r31, Y+63	; 0x3f
     8b0:	e4 97       	sbiw	r28, 0x34	; 52
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	09 95       	icall
		
				
						
		switch (communications.EmergencyStop)  // bits from gui
     8b8:	ad 96       	adiw	r28, 0x2d	; 45
     8ba:	8f ad       	ldd	r24, Y+63	; 0x3f
     8bc:	ad 97       	sbiw	r28, 0x2d	; 45
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	41 f1       	breq	.+80     	; 0x912 <__stack+0x13>
     8c2:	28 f0       	brcs	.+10     	; 0x8ce <main+0x72>
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	41 f1       	breq	.+80     	; 0x918 <__stack+0x19>
     8c8:	84 30       	cpi	r24, 0x04	; 4
     8ca:	49 f1       	breq	.+82     	; 0x91e <__stack+0x1f>
     8cc:	e5 cf       	rjmp	.-54     	; 0x898 <main+0x3c>
		{  
			case 0:
			case 1: 				
				if (communications.flag==1) // if order is true AND finish order button is pressed
     8ce:	e2 96       	adiw	r28, 0x32	; 50
     8d0:	8f ad       	ldd	r24, Y+63	; 0x3f
     8d2:	e2 97       	sbiw	r28, 0x32	; 50
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	c1 f4       	brne	.+48     	; 0x908 <__stack+0x9>
				{
					communications.flag=0;
     8d8:	e2 96       	adiw	r28, 0x32	; 50
     8da:	1f ae       	std	Y+63, r1	; 0x3f
     8dc:	e2 97       	sbiw	r28, 0x32	; 50
					
					play_from_program_space(welcome);
     8de:	8f e8       	ldi	r24, 0x8F	; 143
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 44 13 	call	0x2688	; 0x2688 <play_from_program_space>
					communications.locationx = 0;
     8e6:	e0 96       	adiw	r28, 0x30	; 48
     8e8:	1f ae       	std	Y+63, r1	; 0x3f
     8ea:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = 0;
     8ec:	e1 96       	adiw	r28, 0x31	; 49
     8ee:	1f ae       	std	Y+63, r1	; 0x3f
     8f0:	e1 97       	sbiw	r28, 0x31	; 49
					pickOrder(&communications);
     8f2:	ce 01       	movw	r24, r28
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	0e 94 0f 04 	call	0x81e	; 0x81e <pickOrder>
					communications.locationx = -2;
     8fa:	8e ef       	ldi	r24, 0xFE	; 254
     8fc:	e0 96       	adiw	r28, 0x30	; 48
     8fe:	8f af       	std	Y+63, r24	; 0x3f
     900:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = -2;
     902:	e1 96       	adiw	r28, 0x31	; 49
     904:	8f af       	std	Y+63, r24	; 0x3f
     906:	e1 97       	sbiw	r28, 0x31	; 49
     908:	84 e6       	ldi	r24, 0x64	; 100
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
     910:	c3 cf       	rjmp	.-122    	; 0x898 <main+0x3c>
					while(communications.locationx == -2);
				}
				delay(100);
				break;
			case 2:
			Spin();
     912:	0e 94 a4 08 	call	0x1148	; 0x1148 <Spin>
			break;
     916:	c0 cf       	rjmp	.-128    	; 0x898 <main+0x3c>
			case 3:
				manualControl();
     918:	0e 94 65 07 	call	0xeca	; 0xeca <manualControl>
				break;
     91c:	bd cf       	rjmp	.-134    	; 0x898 <main+0x3c>
			case 4:
				charge_3pi(&communications);
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <charge_3pi>
				communications.EmergencyStop = 0;
     926:	ad 96       	adiw	r28, 0x2d	; 45
     928:	1f ae       	std	Y+63, r1	; 0x3f
     92a:	ad 97       	sbiw	r28, 0x2d	; 45
				communications.flag=0;
     92c:	e2 96       	adiw	r28, 0x32	; 50
     92e:	1f ae       	std	Y+63, r1	; 0x3f
     930:	e2 97       	sbiw	r28, 0x32	; 50
				break;
     932:	b2 cf       	rjmp	.-156    	; 0x898 <main+0x3c>

00000934 <initialize>:
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <myComs+0x1>
     93c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <myComs>
     940:	80 ed       	ldi	r24, 0xD0	; 208
     942:	97 e0       	ldi	r25, 0x07	; 7
     944:	0e 94 28 18 	call	0x3050	; 0x3050 <pololu_3pi_init>
     948:	0d c0       	rjmp	.+26     	; 0x964 <initialize+0x30>
     94a:	0e 94 4d 14 	call	0x289a	; 0x289a <clear>
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <lcd_goto_xy>
     956:	0e 94 2b 10 	call	0x2056	; 0x2056 <read_battery_millivolts_3pi>
     95a:	bc 01       	movw	r22, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 b1 14 	call	0x2962	; 0x2962 <print_long>
     964:	80 e1       	ldi	r24, 0x10	; 16
     966:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <button_is_pressed>
     96a:	88 23       	and	r24, r24
     96c:	71 f3       	breq	.-36     	; 0x94a <initialize+0x16>
     96e:	80 e1       	ldi	r24, 0x10	; 16
     970:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <wait_for_button_release>
     974:	88 ee       	ldi	r24, 0xE8	; 232
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
     97c:	c0 e0       	ldi	r28, 0x00	; 0
     97e:	d0 e0       	ldi	r29, 0x00	; 0
     980:	19 c0       	rjmp	.+50     	; 0x9b4 <initialize+0x80>
     982:	ce 01       	movw	r24, r28
     984:	44 97       	sbiw	r24, 0x14	; 20
     986:	88 97       	sbiw	r24, 0x28	; 40
     988:	38 f0       	brcs	.+14     	; 0x998 <initialize+0x64>
     98a:	68 ed       	ldi	r22, 0xD8	; 216
     98c:	7f ef       	ldi	r23, 0xFF	; 255
     98e:	88 e2       	ldi	r24, 0x28	; 40
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     996:	06 c0       	rjmp	.+12     	; 0x9a4 <initialize+0x70>
     998:	68 e2       	ldi	r22, 0x28	; 40
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	88 ed       	ldi	r24, 0xD8	; 216
     99e:	9f ef       	ldi	r25, 0xFF	; 255
     9a0:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0e 94 e5 17 	call	0x2fca	; 0x2fca <calibrate_line_sensors>
     9aa:	84 e1       	ldi	r24, 0x14	; 20
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
     9b2:	21 96       	adiw	r28, 0x01	; 1
     9b4:	c0 35       	cpi	r28, 0x50	; 80
     9b6:	d1 05       	cpc	r29, r1
     9b8:	20 f3       	brcs	.-56     	; 0x982 <initialize+0x4e>
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     9c6:	80 e1       	ldi	r24, 0x10	; 16
     9c8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <button_is_pressed>
     9cc:	88 23       	and	r24, r24
     9ce:	d9 f3       	breq	.-10     	; 0x9c6 <initialize+0x92>
     9d0:	80 e1       	ldi	r24, 0x10	; 16
     9d2:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <wait_for_button_release>
     9d6:	0e 94 4d 14 	call	0x289a	; 0x289a <clear>
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <inch>:
     9e0:	62 e3       	ldi	r22, 0x32	; 50
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	82 e3       	ldi	r24, 0x32	; 50
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     9ec:	88 ec       	ldi	r24, 0xC8	; 200
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     a00:	08 95       	ret

00000a02 <lineType>:
	set_motors(0,0);
	delay(1000);
}

char lineType(){																																								// function that returns the type of junction it detects																																								// >= black line		<=white
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	8f e1       	ldi	r24, 0x1F	; 31
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
	
	if (sensors[1] >= Reference_Upper_Value && sensors[3] >= Reference_Upper_Value){																									//Checks if its A "Barcode", a X junction or a T junction and returns the junction
     a0c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <sensors+0x2>
     a10:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <sensors+0x3>
     a14:	80 39       	cpi	r24, 0x90	; 144
     a16:	21 e0       	ldi	r18, 0x01	; 1
     a18:	92 07       	cpc	r25, r18
     a1a:	08 f4       	brcc	.+2      	; 0xa1e <lineType+0x1c>
     a1c:	6c c0       	rjmp	.+216    	; 0xaf6 <lineType+0xf4>
     a1e:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <sensors+0x6>
     a22:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <sensors+0x7>
     a26:	20 39       	cpi	r18, 0x90	; 144
     a28:	31 40       	sbci	r19, 0x01	; 1
     a2a:	08 f4       	brcc	.+2      	; 0xa2e <lineType+0x2c>
     a2c:	64 c0       	rjmp	.+200    	; 0xaf6 <lineType+0xf4>
		inch();
     a2e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <inch>
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	8f e1       	ldi	r24, 0x1F	; 31
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
		
		if (sensors[0] > Reference_Upper_Value && sensors[1] > Reference_Upper_Value && sensors[3] > Reference_Upper_Value && sensors[4] > Reference_Upper_Value){
     a3c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <sensors>
     a40:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <sensors+0x1>
     a44:	81 39       	cpi	r24, 0x91	; 145
     a46:	91 40       	sbci	r25, 0x01	; 1
     a48:	b8 f1       	brcs	.+110    	; 0xab8 <lineType+0xb6>
     a4a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <sensors+0x2>
     a4e:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <sensors+0x3>
     a52:	81 39       	cpi	r24, 0x91	; 145
     a54:	91 40       	sbci	r25, 0x01	; 1
     a56:	80 f1       	brcs	.+96     	; 0xab8 <lineType+0xb6>
     a58:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <sensors+0x6>
     a5c:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <sensors+0x7>
     a60:	81 39       	cpi	r24, 0x91	; 145
     a62:	91 40       	sbci	r25, 0x01	; 1
     a64:	48 f1       	brcs	.+82     	; 0xab8 <lineType+0xb6>
     a66:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <sensors+0x8>
     a6a:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <sensors+0x9>
     a6e:	81 39       	cpi	r24, 0x91	; 145
     a70:	91 40       	sbci	r25, 0x01	; 1
     a72:	10 f1       	brcs	.+68     	; 0xab8 <lineType+0xb6>
			set_motors(75,75);
     a74:	6b e4       	ldi	r22, 0x4B	; 75
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	8b e4       	ldi	r24, 0x4B	; 75
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
			while(sensors[0] > Reference_Upper_Value || sensors[4]  > Reference_Upper_Value)
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <lineType+0x8a>
			{
				read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	8f e1       	ldi	r24, 0x1F	; 31
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
		inch();
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		
		if (sensors[0] > Reference_Upper_Value && sensors[1] > Reference_Upper_Value && sensors[3] > Reference_Upper_Value && sensors[4] > Reference_Upper_Value){
			set_motors(75,75);
			while(sensors[0] > Reference_Upper_Value || sensors[4]  > Reference_Upper_Value)
     a8c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <sensors>
     a90:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <sensors+0x1>
     a94:	81 39       	cpi	r24, 0x91	; 145
     a96:	91 40       	sbci	r25, 0x01	; 1
     a98:	a0 f7       	brcc	.-24     	; 0xa82 <lineType+0x80>
     a9a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <sensors+0x8>
     a9e:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <sensors+0x9>
     aa2:	81 39       	cpi	r24, 0x91	; 145
     aa4:	91 40       	sbci	r25, 0x01	; 1
     aa6:	68 f7       	brcc	.-38     	; 0xa82 <lineType+0x80>
			{
				read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			}
			inch();
     aa8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <inch>
     aac:	88 ee       	ldi	r24, 0xE8	; 232
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
			delay(1000);
			return Barcode;
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	08 95       	ret
		}
		
		else if (sensors[2] > Reference_Upper_Value || (sensors[1] > Reference_Upper_Value || sensors[3]  > Reference_Upper_Value)){
     ab8:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     abc:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     ac0:	81 39       	cpi	r24, 0x91	; 145
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	92 07       	cpc	r25, r18
     ac6:	08 f0       	brcs	.+2      	; 0xaca <lineType+0xc8>
     ac8:	84 c0       	rjmp	.+264    	; 0xbd2 <lineType+0x1d0>
     aca:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <sensors+0x2>
     ace:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <sensors+0x3>
     ad2:	21 39       	cpi	r18, 0x91	; 145
     ad4:	31 40       	sbci	r19, 0x01	; 1
     ad6:	08 f0       	brcs	.+2      	; 0xada <lineType+0xd8>
     ad8:	7e c0       	rjmp	.+252    	; 0xbd6 <lineType+0x1d4>
     ada:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <sensors+0x6>
     ade:	30 91 26 02 	lds	r19, 0x0226	; 0x800226 <sensors+0x7>
     ae2:	21 39       	cpi	r18, 0x91	; 145
     ae4:	31 40       	sbci	r19, 0x01	; 1
     ae6:	08 f0       	brcs	.+2      	; 0xaea <lineType+0xe8>
     ae8:	78 c0       	rjmp	.+240    	; 0xbda <lineType+0x1d8>
			return X_junction;
		}
		else if(sensors[2] < Reference_Lower_Value){
     aea:	88 3c       	cpi	r24, 0xC8	; 200
     aec:	91 05       	cpc	r25, r1
     aee:	08 f0       	brcs	.+2      	; 0xaf2 <lineType+0xf0>
     af0:	76 c0       	rjmp	.+236    	; 0xbde <lineType+0x1dc>
			return T_junction;
     af2:	87 e0       	ldi	r24, 0x07	; 7
     af4:	08 95       	ret
		}
		
	}
	
							
	else if (sensors[0] > 400 && sensors[1] > 400 && sensors[4] < 350 ){																	//Checks if its a left corner or a straight with left corner and returns the junction
     af6:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <sensors>
     afa:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <sensors+0x1>
     afe:	21 39       	cpi	r18, 0x91	; 145
     b00:	e1 e0       	ldi	r30, 0x01	; 1
     b02:	3e 07       	cpc	r19, r30
     b04:	20 f1       	brcs	.+72     	; 0xb4e <lineType+0x14c>
     b06:	81 39       	cpi	r24, 0x91	; 145
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	94 07       	cpc	r25, r20
     b0c:	00 f1       	brcs	.+64     	; 0xb4e <lineType+0x14c>
     b0e:	40 91 27 02 	lds	r20, 0x0227	; 0x800227 <sensors+0x8>
     b12:	50 91 28 02 	lds	r21, 0x0228	; 0x800228 <sensors+0x9>
     b16:	4e 35       	cpi	r20, 0x5E	; 94
     b18:	51 40       	sbci	r21, 0x01	; 1
     b1a:	c8 f4       	brcc	.+50     	; 0xb4e <lineType+0x14c>
		inch();
     b1c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <inch>
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	8f e1       	ldi	r24, 0x1F	; 31
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
			
		if (sensors[2] > Reference_Upper_Value || sensors[3]  > Reference_Upper_Value){
     b2a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     b2e:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     b32:	81 39       	cpi	r24, 0x91	; 145
     b34:	91 40       	sbci	r25, 0x01	; 1
     b36:	08 f0       	brcs	.+2      	; 0xb3a <lineType+0x138>
     b38:	54 c0       	rjmp	.+168    	; 0xbe2 <lineType+0x1e0>
     b3a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <sensors+0x6>
     b3e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <sensors+0x7>
     b42:	81 39       	cpi	r24, 0x91	; 145
     b44:	91 40       	sbci	r25, 0x01	; 1
     b46:	08 f4       	brcc	.+2      	; 0xb4a <lineType+0x148>
     b48:	4e c0       	rjmp	.+156    	; 0xbe6 <lineType+0x1e4>
			return Straight_left_junction;
     b4a:	86 e0       	ldi	r24, 0x06	; 6
     b4c:	08 95       	ret
			return Left_corner;
		}
	}
		
		
	else if (sensors[3] > 300 && sensors[4] > 300 && sensors[0] < 200){																	//Checks if its a right corner or a straight with right corner and returns the junction
     b4e:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <sensors+0x6>
     b52:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <sensors+0x7>
     b56:	4d 32       	cpi	r20, 0x2D	; 45
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	56 07       	cpc	r21, r22
     b5c:	08 f1       	brcs	.+66     	; 0xba0 <lineType+0x19e>
     b5e:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <sensors+0x8>
     b62:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <sensors+0x9>
     b66:	6d 32       	cpi	r22, 0x2D	; 45
     b68:	71 40       	sbci	r23, 0x01	; 1
     b6a:	d0 f0       	brcs	.+52     	; 0xba0 <lineType+0x19e>
     b6c:	28 3c       	cpi	r18, 0xC8	; 200
     b6e:	31 05       	cpc	r19, r1
     b70:	b8 f4       	brcc	.+46     	; 0xba0 <lineType+0x19e>
		inch();
     b72:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <inch>
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	8f e1       	ldi	r24, 0x1F	; 31
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
			
		if (sensors[2] > Reference_Upper_Value || sensors[1]  > Reference_Upper_Value){
     b80:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     b84:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     b88:	81 39       	cpi	r24, 0x91	; 145
     b8a:	91 40       	sbci	r25, 0x01	; 1
     b8c:	70 f5       	brcc	.+92     	; 0xbea <lineType+0x1e8>
     b8e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <sensors+0x2>
     b92:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <sensors+0x3>
     b96:	81 39       	cpi	r24, 0x91	; 145
     b98:	91 40       	sbci	r25, 0x01	; 1
     b9a:	48 f1       	brcs	.+82     	; 0xbee <lineType+0x1ec>
			return Straight_right_junction;
     b9c:	85 e0       	ldi	r24, 0x05	; 5
     b9e:	08 95       	ret
		else {
			return Right_corner;
		}
	}
	
	else if(sensors[0] < End_Line_Value && sensors[1] < End_Line_Value && sensors[2] < End_Line_Value && sensors[3] < End_Line_Value && sensors[4] < End_Line_Value){											// check if the line ends and returns the junction																												
     ba0:	28 3c       	cpi	r18, 0xC8	; 200
     ba2:	31 05       	cpc	r19, r1
     ba4:	30 f5       	brcc	.+76     	; 0xbf2 <lineType+0x1f0>
     ba6:	88 3c       	cpi	r24, 0xC8	; 200
     ba8:	91 05       	cpc	r25, r1
     baa:	28 f5       	brcc	.+74     	; 0xbf6 <lineType+0x1f4>
     bac:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     bb0:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     bb4:	88 3c       	cpi	r24, 0xC8	; 200
     bb6:	91 05       	cpc	r25, r1
     bb8:	00 f5       	brcc	.+64     	; 0xbfa <lineType+0x1f8>
     bba:	48 3c       	cpi	r20, 0xC8	; 200
     bbc:	51 05       	cpc	r21, r1
     bbe:	f8 f4       	brcc	.+62     	; 0xbfe <lineType+0x1fc>
     bc0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <sensors+0x8>
     bc4:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <sensors+0x9>
     bc8:	88 3c       	cpi	r24, 0xC8	; 200
     bca:	91 05       	cpc	r25, r1
     bcc:	d0 f4       	brcc	.+52     	; 0xc02 <lineType+0x200>
		return Line_end;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret
			delay(1000);
			return Barcode;
		}
		
		else if (sensors[2] > Reference_Upper_Value || (sensors[1] > Reference_Upper_Value || sensors[3]  > Reference_Upper_Value)){
			return X_junction;
     bd2:	88 e0       	ldi	r24, 0x08	; 8
     bd4:	08 95       	ret
     bd6:	88 e0       	ldi	r24, 0x08	; 8
     bd8:	08 95       	ret
     bda:	88 e0       	ldi	r24, 0x08	; 8
     bdc:	08 95       	ret
	else if(sensors[0] < End_Line_Value && sensors[1] < End_Line_Value && sensors[2] < End_Line_Value && sensors[3] < End_Line_Value && sensors[4] < End_Line_Value){											// check if the line ends and returns the junction																												
		return Line_end;
	}
	
																																									// else its a straight
	return Straight;
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	08 95       	ret
	else if (sensors[0] > 400 && sensors[1] > 400 && sensors[4] < 350 ){																	//Checks if its a left corner or a straight with left corner and returns the junction
		inch();
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
		if (sensors[2] > Reference_Upper_Value || sensors[3]  > Reference_Upper_Value){
			return Straight_left_junction;
     be2:	86 e0       	ldi	r24, 0x06	; 6
     be4:	08 95       	ret
		}
		else {
			return Left_corner;
     be6:	83 e0       	ldi	r24, 0x03	; 3
     be8:	08 95       	ret
	else if (sensors[3] > 300 && sensors[4] > 300 && sensors[0] < 200){																	//Checks if its a right corner or a straight with right corner and returns the junction
		inch();
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
		if (sensors[2] > Reference_Upper_Value || sensors[1]  > Reference_Upper_Value){
			return Straight_right_junction;
     bea:	85 e0       	ldi	r24, 0x05	; 5
     bec:	08 95       	ret
		}
		else {
			return Right_corner;
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	08 95       	ret
	else if(sensors[0] < End_Line_Value && sensors[1] < End_Line_Value && sensors[2] < End_Line_Value && sensors[3] < End_Line_Value && sensors[4] < End_Line_Value){											// check if the line ends and returns the junction																												
		return Line_end;
	}
	
																																									// else its a straight
	return Straight;
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	08 95       	ret
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	08 95       	ret
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	08 95       	ret
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	08 95       	ret
     c02:	80 e0       	ldi	r24, 0x00	; 0
	
}
     c04:	08 95       	ret

00000c06 <motorControl>:

void motorControl(char x){																																					// function that controls the motor movement and the turns
     c06:	8f 92       	push	r8
     c08:	9f 92       	push	r9
     c0a:	af 92       	push	r10
     c0c:	bf 92       	push	r11
     c0e:	cf 92       	push	r12
     c10:	df 92       	push	r13
     c12:	ef 92       	push	r14
     c14:	ff 92       	push	r15
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	18 2f       	mov	r17, r24
	myComs->Update(myComs);
     c1e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <myComs>
     c22:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <myComs+0x1>
     c26:	fc 01       	movw	r30, r24
     c28:	ef 58       	subi	r30, 0x8F	; 143
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	01 90       	ld	r0, Z+
     c2e:	f0 81       	ld	r31, Z
     c30:	e0 2d       	mov	r30, r0
     c32:	09 95       	icall
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	8f e1       	ldi	r24, 0x1F	; 31
     c38:	92 e0       	ldi	r25, 0x02	; 2
     c3a:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <read_line>
     c3e:	ec 01       	movw	r28, r24
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	8f e1       	ldi	r24, 0x1F	; 31
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
	
	while (analog_read(7) >= 200) {																																			// Checks if there is an object infront of it, if there is it stops the motor and gives feedback to the display
     c4a:	11 c0       	rjmp	.+34     	; 0xc6e <motorControl+0x68>
		set_motors(0, 0);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		errorDisplay(object, batteryPercentage());
     c58:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
     c5c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	0e 94 8a 03 	call	0x714	; 0x714 <errorDisplay>
		play_from_program_space(Beep);
     c66:	89 e9       	ldi	r24, 0x99	; 153
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 44 13 	call	0x2688	; 0x2688 <play_from_program_space>
void motorControl(char x){																																					// function that controls the motor movement and the turns
	myComs->Update(myComs);
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	
	while (analog_read(7) >= 200) {																																			// Checks if there is an object infront of it, if there is it stops the motor and gives feedback to the display
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <analog_read>
     c74:	88 3c       	cpi	r24, 0xC8	; 200
     c76:	91 05       	cpc	r25, r1
     c78:	48 f7       	brcc	.-46     	; 0xc4c <motorControl+0x46>
		errorDisplay(object, batteryPercentage());
		play_from_program_space(Beep);
	}

		
	if(myComs->EmergencyStop == 1){																																	//Emergency Brake
     c7a:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <myComs>
     c7e:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <myComs+0x1>
     c82:	e5 59       	subi	r30, 0x95	; 149
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	80 81       	ld	r24, Z
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	71 f4       	brne	.+28     	; 0xca8 <motorControl+0xa2>
		set_motors(0,0);
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		errorDisplay(emergency,batteryPercentage());	
     c98:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
     c9c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	0e 94 8a 03 	call	0x714	; 0x714 <errorDisplay>
     ca6:	05 c1       	rjmp	.+522    	; 0xeb2 <motorControl+0x2ac>
	}
	
	
	else if(x == 'L'){																																						//Turn Left
     ca8:	1c 34       	cpi	r17, 0x4C	; 76
     caa:	39 f5       	brne	.+78     	; 0xcfa <motorControl+0xf4>
		set_motors(-turn_value,turn_value);
     cac:	6c e3       	ldi	r22, 0x3C	; 60
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	84 ec       	ldi	r24, 0xC4	; 196
     cb2:	9f ef       	ldi	r25, 0xFF	; 255
     cb4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		
		while (sensors[2] > Reference_Lower_Value)
     cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <motorControl+0xbe>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	8f e1       	ldi	r24, 0x1F	; 31
     cbe:	92 e0       	ldi	r25, 0x02	; 2
     cc0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
	
	
	else if(x == 'L'){																																						//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] > Reference_Lower_Value)
     cc4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     cc8:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     ccc:	89 3c       	cpi	r24, 0xC9	; 201
     cce:	91 05       	cpc	r25, r1
     cd0:	a0 f7       	brcc	.-24     	; 0xcba <motorControl+0xb4>
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <motorControl+0xd8>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] < Reference_Upper_Value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	8f e1       	ldi	r24, 0x1F	; 31
     cd8:	92 e0       	ldi	r25, 0x02	; 2
     cda:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
	else if(x == 'L'){																																						//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] > Reference_Lower_Value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] < Reference_Upper_Value)
     cde:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     ce2:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     ce6:	80 39       	cpi	r24, 0x90	; 144
     ce8:	91 40       	sbci	r25, 0x01	; 1
     cea:	a0 f3       	brcs	.-24     	; 0xcd4 <motorControl+0xce>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     cf8:	dc c0       	rjmp	.+440    	; 0xeb2 <motorControl+0x2ac>
	}
	
	
	else if(x == 'R'){																																						//Turn Right
     cfa:	12 35       	cpi	r17, 0x52	; 82
     cfc:	39 f5       	brne	.+78     	; 0xd4c <motorControl+0x146>
		set_motors(turn_value,-turn_value);
     cfe:	64 ec       	ldi	r22, 0xC4	; 196
     d00:	7f ef       	ldi	r23, 0xFF	; 255
     d02:	8c e3       	ldi	r24, 0x3C	; 60
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		
		while (sensors[2] > Reference_Lower_Value)
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <motorControl+0x110>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	8f e1       	ldi	r24, 0x1F	; 31
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
	
	
	else if(x == 'R'){																																						//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] > Reference_Lower_Value)
     d16:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     d1a:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     d1e:	89 3c       	cpi	r24, 0xC9	; 201
     d20:	91 05       	cpc	r25, r1
     d22:	a0 f7       	brcc	.-24     	; 0xd0c <motorControl+0x106>
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <motorControl+0x12a>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] < Reference_Upper_Value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	8f e1       	ldi	r24, 0x1F	; 31
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
	else if(x == 'R'){																																						//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] > Reference_Lower_Value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] < Reference_Upper_Value)
     d30:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     d34:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     d38:	80 39       	cpi	r24, 0x90	; 144
     d3a:	91 40       	sbci	r25, 0x01	; 1
     d3c:	a0 f3       	brcs	.-24     	; 0xd26 <motorControl+0x120>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     d4a:	b3 c0       	rjmp	.+358    	; 0xeb2 <motorControl+0x2ac>
	}
		
			
	else if(x == 'S'){																																						//drive straight and adjusts the robot so it follows the line
     d4c:	13 35       	cpi	r17, 0x53	; 83
     d4e:	09 f0       	breq	.+2      	; 0xd52 <motorControl+0x14c>
     d50:	66 c0       	rjmp	.+204    	; 0xe1e <motorControl+0x218>
		
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     d52:	ce 01       	movw	r24, r28
     d54:	80 5d       	subi	r24, 0xD0	; 208
     d56:	97 40       	sbci	r25, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     d58:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <last_proportional>
     d5c:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <last_proportional+0x1>
     d60:	ec 01       	movw	r28, r24
     d62:	c2 1b       	sub	r28, r18
     d64:	d3 0b       	sbc	r29, r19
		integral = integral + proportional;
     d66:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <integral>
     d6a:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <integral+0x1>
     d6e:	fc 01       	movw	r30, r24
     d70:	e6 0f       	add	r30, r22
     d72:	f7 1f       	adc	r31, r23
     d74:	f0 93 1e 02 	sts	0x021E, r31	; 0x80021e <integral+0x1>
     d78:	e0 93 1d 02 	sts	0x021D, r30	; 0x80021d <integral>

		// Remember the last position.
		 last_proportional = proportional;
     d7c:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <last_proportional+0x1>
     d80:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <last_proportional>
 
 		int power_difference = proportional/10 + integral/40000 + derivative*0.50;						
     d84:	6a e0       	ldi	r22, 0x0A	; 10
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__divmodhi4>
     d8c:	6b 01       	movw	r12, r22
     d8e:	bf 01       	movw	r22, r30
     d90:	ff 0f       	add	r31, r31
     d92:	88 0b       	sbc	r24, r24
     d94:	99 0b       	sbc	r25, r25
     d96:	20 e4       	ldi	r18, 0x40	; 64
     d98:	3c e9       	ldi	r19, 0x9C	; 156
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__divmodsi4>
     da2:	0d 2c       	mov	r0, r13
     da4:	00 0c       	add	r0, r0
     da6:	ee 08       	sbc	r14, r14
     da8:	ff 08       	sbc	r15, r15
     daa:	c2 0e       	add	r12, r18
     dac:	d3 1e       	adc	r13, r19
     dae:	e4 1e       	adc	r14, r20
     db0:	f5 1e       	adc	r15, r21
     db2:	be 01       	movw	r22, r28
     db4:	dd 0f       	add	r29, r29
     db6:	88 0b       	sbc	r24, r24
     db8:	99 0b       	sbc	r25, r25
     dba:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__floatsisf>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	5f e3       	ldi	r21, 0x3F	; 63
     dc6:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3>
     dca:	4b 01       	movw	r8, r22
     dcc:	5c 01       	movw	r10, r24
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__floatsisf>
     dd6:	a5 01       	movw	r20, r10
     dd8:	94 01       	movw	r18, r8
     dda:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__addsf3>
     dde:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
     de2:	cb 01       	movw	r24, r22

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 70;
		if(power_difference > max)
     de4:	67 34       	cpi	r22, 0x47	; 71
     de6:	71 05       	cpc	r23, r1
     de8:	14 f0       	brlt	.+4      	; 0xdee <motorControl+0x1e8>
			power_difference = max;
     dea:	86 e4       	ldi	r24, 0x46	; 70
     dec:	90 e0       	ldi	r25, 0x00	; 0
		if(power_difference < -max)
     dee:	8a 3b       	cpi	r24, 0xBA	; 186
     df0:	2f ef       	ldi	r18, 0xFF	; 255
     df2:	92 07       	cpc	r25, r18
     df4:	14 f4       	brge	.+4      	; 0xdfa <motorControl+0x1f4>
			power_difference = -max;
     df6:	8a eb       	ldi	r24, 0xBA	; 186
     df8:	9f ef       	ldi	r25, 0xFF	; 255

		if(power_difference < 0)
     dfa:	99 23       	and	r25, r25
     dfc:	3c f4       	brge	.+14     	; 0xe0c <motorControl+0x206>
			set_motors(max+power_difference, max);
     dfe:	66 e4       	ldi	r22, 0x46	; 70
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	8a 5b       	subi	r24, 0xBA	; 186
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     e0a:	53 c0       	rjmp	.+166    	; 0xeb2 <motorControl+0x2ac>
		else
			set_motors(max, max-power_difference);
     e0c:	66 e4       	ldi	r22, 0x46	; 70
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	68 1b       	sub	r22, r24
     e12:	79 0b       	sbc	r23, r25
     e14:	86 e4       	ldi	r24, 0x46	; 70
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     e1c:	4a c0       	rjmp	.+148    	; 0xeb2 <motorControl+0x2ac>
		
	}
	
	
	else if(x == 'B'){																																							//Reverse while following the line
     e1e:	12 34       	cpi	r17, 0x42	; 66
     e20:	09 f5       	brne	.+66     	; 0xe64 <motorControl+0x25e>
		set_motors(-50,-50);
     e22:	6e ec       	ldi	r22, 0xCE	; 206
     e24:	7f ef       	ldi	r23, 0xFF	; 255
     e26:	8e ec       	ldi	r24, 0xCE	; 206
     e28:	9f ef       	ldi	r25, 0xFF	; 255
     e2a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		
		if (sensors[3] >=Reference_Upper_Value)
     e2e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <sensors+0x6>
     e32:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <sensors+0x7>
     e36:	80 39       	cpi	r24, 0x90	; 144
     e38:	91 40       	sbci	r25, 0x01	; 1
     e3a:	30 f0       	brcs	.+12     	; 0xe48 <motorControl+0x242>
			set_motors(-50,-55);
     e3c:	69 ec       	ldi	r22, 0xC9	; 201
     e3e:	7f ef       	ldi	r23, 0xFF	; 255
     e40:	8e ec       	ldi	r24, 0xCE	; 206
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		if (sensors[1] >=Reference_Upper_Value)
     e48:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <sensors+0x2>
     e4c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <sensors+0x3>
     e50:	80 39       	cpi	r24, 0x90	; 144
     e52:	91 40       	sbci	r25, 0x01	; 1
     e54:	70 f1       	brcs	.+92     	; 0xeb2 <motorControl+0x2ac>
			set_motors(-55,-50);
     e56:	6e ec       	ldi	r22, 0xCE	; 206
     e58:	7f ef       	ldi	r23, 0xFF	; 255
     e5a:	89 ec       	ldi	r24, 0xC9	; 201
     e5c:	9f ef       	ldi	r25, 0xFF	; 255
     e5e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     e62:	27 c0       	rjmp	.+78     	; 0xeb2 <motorControl+0x2ac>
	}
	
	
	else if(x == 'T'){																																							// Turn around
     e64:	14 35       	cpi	r17, 0x54	; 84
     e66:	a1 f4       	brne	.+40     	; 0xe90 <motorControl+0x28a>
		set_motors(-turn_value,turn_value);
     e68:	6c e3       	ldi	r22, 0x3C	; 60
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	84 ec       	ldi	r24, 0xC4	; 196
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		
		while (sensors[2] <=Reference_Lower_Value)
     e74:	05 c0       	rjmp	.+10     	; 0xe80 <motorControl+0x27a>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	8f e1       	ldi	r24, 0x1F	; 31
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <read_line_sensors_calibrated>
	
	
	else if(x == 'T'){																																							// Turn around
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] <=Reference_Lower_Value)
     e80:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <sensors+0x4>
     e84:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <sensors+0x5>
     e88:	89 3c       	cpi	r24, 0xC9	; 201
     e8a:	91 05       	cpc	r25, r1
     e8c:	a0 f3       	brcs	.-24     	; 0xe76 <motorControl+0x270>
     e8e:	11 c0       	rjmp	.+34     	; 0xeb2 <motorControl+0x2ac>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
		
	else if(x == 'P')																																							//Robot stops slowly
     e90:	10 35       	cpi	r17, 0x50	; 80
     e92:	79 f4       	brne	.+30     	; 0xeb2 <motorControl+0x2ac>
     e94:	0a c0       	rjmp	.+20     	; 0xeaa <motorControl+0x2a4>
		for( int i=50;i>=0;i-=3)
		{
			set_motors(i,i);
     e96:	be 01       	movw	r22, r28
     e98:	ce 01       	movw	r24, r28
     e9a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
     e9e:	84 e0       	ldi	r24, 0x04	; 4
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
		
	else if(x == 'P')																																							//Robot stops slowly
		for( int i=50;i>=0;i-=3)
     ea6:	23 97       	sbiw	r28, 0x03	; 3
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <motorControl+0x2a8>
     eaa:	c2 e3       	ldi	r28, 0x32	; 50
     eac:	d0 e0       	ldi	r29, 0x00	; 0
     eae:	dd 23       	and	r29, r29
     eb0:	94 f7       	brge	.-28     	; 0xe96 <motorControl+0x290>
			set_motors(i,i);
			delay(4);
		}
		
		
}
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	1f 91       	pop	r17
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	08 95       	ret

00000eca <manualControl>:

void manualControl(){																																							// function for manual control of the robot
static int speed = 0;
static unsigned int counter = 0;

updateDisplay(0,batteryPercentage(),manual);
     eca:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
     ece:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 31 03 	call	0x662	; 0x662 <updateDisplay>
	myComs->Update(myComs);
     edc:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <myComs>
     ee0:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <myComs+0x1>
     ee4:	fc 01       	movw	r30, r24
     ee6:	ef 58       	subi	r30, 0x8F	; 143
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	01 90       	ld	r0, Z+
     eec:	f0 81       	ld	r31, Z
     eee:	e0 2d       	mov	r30, r0
     ef0:	09 95       	icall
	if(myComs->Direction[0] == 1){											// increase speed
     ef2:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <myComs>
     ef6:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <myComs+0x1>
     efa:	95 a9       	ldd	r25, Z+53	; 0x35
     efc:	91 30       	cpi	r25, 0x01	; 1
     efe:	e1 f5       	brne	.+120    	; 0xf78 <manualControl+0xae>
		set_motors(speed,speed);
     f00:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
     f04:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
     f08:	bc 01       	movw	r22, r24
     f0a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		if(counter % 20 == 0)
     f0e:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <counter.2278>
     f12:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <counter.2278+0x1>
     f16:	9a 01       	movw	r18, r20
     f18:	ad ec       	ldi	r26, 0xCD	; 205
     f1a:	bc ec       	ldi	r27, 0xCC	; 204
     f1c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__umulhisi3>
     f20:	92 95       	swap	r25
     f22:	82 95       	swap	r24
     f24:	8f 70       	andi	r24, 0x0F	; 15
     f26:	89 27       	eor	r24, r25
     f28:	9f 70       	andi	r25, 0x0F	; 15
     f2a:	89 27       	eor	r24, r25
     f2c:	64 e1       	ldi	r22, 0x14	; 20
     f2e:	68 9f       	mul	r22, r24
     f30:	90 01       	movw	r18, r0
     f32:	69 9f       	mul	r22, r25
     f34:	30 0d       	add	r19, r0
     f36:	11 24       	eor	r1, r1
     f38:	42 17       	cp	r20, r18
     f3a:	53 07       	cpc	r21, r19
     f3c:	49 f4       	brne	.+18     	; 0xf50 <manualControl+0x86>
		{
			speed +=10;
     f3e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
     f42:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
     f46:	0a 96       	adiw	r24, 0x0a	; 10
     f48:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <speed.2277+0x1>
     f4c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <speed.2277>
		}
		if(speed > 100)
     f50:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
     f54:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
     f58:	85 36       	cpi	r24, 0x65	; 101
     f5a:	91 05       	cpc	r25, r1
     f5c:	34 f0       	brlt	.+12     	; 0xf6a <manualControl+0xa0>
		{
			speed = 100;
     f5e:	84 e6       	ldi	r24, 0x64	; 100
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <speed.2277+0x1>
     f66:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <speed.2277>
		}
		counter++;
     f6a:	4f 5f       	subi	r20, 0xFF	; 255
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <counter.2278+0x1>
     f72:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <counter.2278>
     f76:	c0 c0       	rjmp	.+384    	; 0x10f8 <manualControl+0x22e>
	}
	else if(myComs->Direction[0] == 0 && myComs->Direction[2] == 0 && speed > 0)			// decrease speed without button press
     f78:	91 11       	cpse	r25, r1
     f7a:	41 c0       	rjmp	.+130    	; 0xffe <manualControl+0x134>
     f7c:	87 a9       	ldd	r24, Z+55	; 0x37
     f7e:	81 11       	cpse	r24, r1
     f80:	3e c0       	rjmp	.+124    	; 0xffe <manualControl+0x134>
     f82:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <speed.2277>
     f86:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <speed.2277+0x1>
     f8a:	12 16       	cp	r1, r18
     f8c:	13 06       	cpc	r1, r19
     f8e:	bc f5       	brge	.+110    	; 0xffe <manualControl+0x134>
	{
		set_motors(speed,speed);
     f90:	b9 01       	movw	r22, r18
     f92:	c9 01       	movw	r24, r18
     f94:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		if(counter % 20 == 0)
     f98:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <counter.2278>
     f9c:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <counter.2278+0x1>
     fa0:	9a 01       	movw	r18, r20
     fa2:	ad ec       	ldi	r26, 0xCD	; 205
     fa4:	bc ec       	ldi	r27, 0xCC	; 204
     fa6:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__umulhisi3>
     faa:	92 95       	swap	r25
     fac:	82 95       	swap	r24
     fae:	8f 70       	andi	r24, 0x0F	; 15
     fb0:	89 27       	eor	r24, r25
     fb2:	9f 70       	andi	r25, 0x0F	; 15
     fb4:	89 27       	eor	r24, r25
     fb6:	64 e1       	ldi	r22, 0x14	; 20
     fb8:	68 9f       	mul	r22, r24
     fba:	90 01       	movw	r18, r0
     fbc:	69 9f       	mul	r22, r25
     fbe:	30 0d       	add	r19, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	42 17       	cp	r20, r18
     fc4:	53 07       	cpc	r21, r19
     fc6:	49 f4       	brne	.+18     	; 0xfda <manualControl+0x110>
		{
			speed-=10;
     fc8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
     fcc:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
     fd0:	0a 97       	sbiw	r24, 0x0a	; 10
     fd2:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <speed.2277+0x1>
     fd6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <speed.2277>
		}
		if(speed < 1)
     fda:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
     fde:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
     fe2:	18 16       	cp	r1, r24
     fe4:	19 06       	cpc	r1, r25
     fe6:	24 f0       	brlt	.+8      	; 0xff0 <manualControl+0x126>
		{
			speed = 0;
     fe8:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <speed.2277+0x1>
     fec:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <speed.2277>
		}
		counter++;
     ff0:	4f 5f       	subi	r20, 0xFF	; 255
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <counter.2278+0x1>
     ff8:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <counter.2278>
     ffc:	7d c0       	rjmp	.+250    	; 0x10f8 <manualControl+0x22e>
	}
	
	else if(myComs->Direction[2] == 1){										// Backwards(decrease speed)				
     ffe:	87 a9       	ldd	r24, Z+55	; 0x37
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	e1 f5       	brne	.+120    	; 0x107c <manualControl+0x1b2>
		set_motors(speed,speed);
    1004:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
    1008:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
    100c:	bc 01       	movw	r22, r24
    100e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		if(counter % 20 == 0)
    1012:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <counter.2278>
    1016:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <counter.2278+0x1>
    101a:	9a 01       	movw	r18, r20
    101c:	ad ec       	ldi	r26, 0xCD	; 205
    101e:	bc ec       	ldi	r27, 0xCC	; 204
    1020:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__umulhisi3>
    1024:	92 95       	swap	r25
    1026:	82 95       	swap	r24
    1028:	8f 70       	andi	r24, 0x0F	; 15
    102a:	89 27       	eor	r24, r25
    102c:	9f 70       	andi	r25, 0x0F	; 15
    102e:	89 27       	eor	r24, r25
    1030:	64 e1       	ldi	r22, 0x14	; 20
    1032:	68 9f       	mul	r22, r24
    1034:	90 01       	movw	r18, r0
    1036:	69 9f       	mul	r22, r25
    1038:	30 0d       	add	r19, r0
    103a:	11 24       	eor	r1, r1
    103c:	42 17       	cp	r20, r18
    103e:	53 07       	cpc	r21, r19
    1040:	49 f4       	brne	.+18     	; 0x1054 <manualControl+0x18a>
		{
			speed-=10;
    1042:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
    1046:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
    104a:	0a 97       	sbiw	r24, 0x0a	; 10
    104c:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <speed.2277+0x1>
    1050:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <speed.2277>
		}
		if(speed < -100)
    1054:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
    1058:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
    105c:	8c 39       	cpi	r24, 0x9C	; 156
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	34 f4       	brge	.+12     	; 0x106e <manualControl+0x1a4>
		{
			speed = -100;
    1062:	8c e9       	ldi	r24, 0x9C	; 156
    1064:	9f ef       	ldi	r25, 0xFF	; 255
    1066:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <speed.2277+0x1>
    106a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <speed.2277>
		}
		counter++;
    106e:	4f 5f       	subi	r20, 0xFF	; 255
    1070:	5f 4f       	sbci	r21, 0xFF	; 255
    1072:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <counter.2278+0x1>
    1076:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <counter.2278>
    107a:	3e c0       	rjmp	.+124    	; 0x10f8 <manualControl+0x22e>
	}
	else if(myComs->Direction[0] == 0 && myComs->Direction[2] == 0 && speed < 0)			// Increases button speed when below 0
    107c:	91 11       	cpse	r25, r1
    107e:	3c c0       	rjmp	.+120    	; 0x10f8 <manualControl+0x22e>
    1080:	81 11       	cpse	r24, r1
    1082:	3a c0       	rjmp	.+116    	; 0x10f8 <manualControl+0x22e>
    1084:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
    1088:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
    108c:	99 23       	and	r25, r25
    108e:	a4 f5       	brge	.+104    	; 0x10f8 <manualControl+0x22e>
	{
		set_motors(speed,speed);
    1090:	bc 01       	movw	r22, r24
    1092:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
		if(counter % 20 == 0)
    1096:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <counter.2278>
    109a:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <counter.2278+0x1>
    109e:	9a 01       	movw	r18, r20
    10a0:	ad ec       	ldi	r26, 0xCD	; 205
    10a2:	bc ec       	ldi	r27, 0xCC	; 204
    10a4:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__umulhisi3>
    10a8:	92 95       	swap	r25
    10aa:	82 95       	swap	r24
    10ac:	8f 70       	andi	r24, 0x0F	; 15
    10ae:	89 27       	eor	r24, r25
    10b0:	9f 70       	andi	r25, 0x0F	; 15
    10b2:	89 27       	eor	r24, r25
    10b4:	64 e1       	ldi	r22, 0x14	; 20
    10b6:	68 9f       	mul	r22, r24
    10b8:	90 01       	movw	r18, r0
    10ba:	69 9f       	mul	r22, r25
    10bc:	30 0d       	add	r19, r0
    10be:	11 24       	eor	r1, r1
    10c0:	42 17       	cp	r20, r18
    10c2:	53 07       	cpc	r21, r19
    10c4:	49 f4       	brne	.+18     	; 0x10d8 <manualControl+0x20e>
		{
			speed += 10;
    10c6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
    10ca:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
    10ce:	0a 96       	adiw	r24, 0x0a	; 10
    10d0:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <speed.2277+0x1>
    10d4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <speed.2277>
		}
		if(speed > -1)
    10d8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
    10dc:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
    10e0:	99 23       	and	r25, r25
    10e2:	24 f0       	brlt	.+8      	; 0x10ec <manualControl+0x222>
		{
			speed = 0;
    10e4:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <speed.2277+0x1>
    10e8:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <speed.2277>
		}
		counter++;
    10ec:	4f 5f       	subi	r20, 0xFF	; 255
    10ee:	5f 4f       	sbci	r21, 0xFF	; 255
    10f0:	50 93 0c 02 	sts	0x020C, r21	; 0x80020c <counter.2278+0x1>
    10f4:	40 93 0b 02 	sts	0x020B, r20	; 0x80020b <counter.2278>
	}
	
	if(myComs->Direction[1] == 1){											// turn left
    10f8:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <myComs>
    10fc:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <myComs+0x1>
    1100:	86 a9       	ldd	r24, Z+54	; 0x36
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	61 f4       	brne	.+24     	; 0x111e <manualControl+0x254>
		set_motors(speed/2,speed);
    1106:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <speed.2277>
    110a:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <speed.2277+0x1>
    110e:	cb 01       	movw	r24, r22
    1110:	77 23       	and	r23, r23
    1112:	0c f4       	brge	.+2      	; 0x1116 <manualControl+0x24c>
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	95 95       	asr	r25
    1118:	87 95       	ror	r24
    111a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
	}
	
	if(myComs->Direction[3] == 1){											// turn Right
    111e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <myComs>
    1122:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <myComs+0x1>
    1126:	80 ad       	ldd	r24, Z+56	; 0x38
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	69 f4       	brne	.+26     	; 0x1146 <manualControl+0x27c>
		set_motors(speed,speed/2);
    112c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <speed.2277>
    1130:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <speed.2277+0x1>
    1134:	bc 01       	movw	r22, r24
    1136:	99 23       	and	r25, r25
    1138:	14 f4       	brge	.+4      	; 0x113e <manualControl+0x274>
    113a:	6f 5f       	subi	r22, 0xFF	; 255
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	75 95       	asr	r23
    1140:	67 95       	ror	r22
    1142:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
    1146:	08 95       	ret

00001148 <Spin>:
	}
}

void Spin(){																// spin fuction 
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
	errorDisplay(slipped,batteryPercentage());
    114c:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
    1150:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	0e 94 8a 03 	call	0x714	; 0x714 <errorDisplay>
	for(int i = 0;i<=255;i++){
    115a:	c0 e0       	ldi	r28, 0x00	; 0
    115c:	d0 e0       	ldi	r29, 0x00	; 0
    115e:	0c c0       	rjmp	.+24     	; 0x1178 <Spin+0x30>
		set_motors(i,0-i);
    1160:	66 27       	eor	r22, r22
    1162:	77 27       	eor	r23, r23
    1164:	6c 1b       	sub	r22, r28
    1166:	7d 0b       	sbc	r23, r29
    1168:	ce 01       	movw	r24, r28
    116a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
	}
}

void Spin(){																// spin fuction 
	errorDisplay(slipped,batteryPercentage());
	for(int i = 0;i<=255;i++){
    1176:	21 96       	adiw	r28, 0x01	; 1
    1178:	cf 3f       	cpi	r28, 0xFF	; 255
    117a:	d1 05       	cpc	r29, r1
    117c:	89 f3       	breq	.-30     	; 0x1160 <Spin+0x18>
    117e:	84 f3       	brlt	.-32     	; 0x1160 <Spin+0x18>
    1180:	c0 e0       	ldi	r28, 0x00	; 0
    1182:	d0 e0       	ldi	r29, 0x00	; 0
    1184:	10 c0       	rjmp	.+32     	; 0x11a6 <Spin+0x5e>
		set_motors(i,0-i);
		delay(2);
	}
	int count = 0;
	while(myComs->EmergencyStop == 2){
		count++;
    1186:	21 96       	adiw	r28, 0x01	; 1
		if(count % 10000 == 0)
    1188:	ce 01       	movw	r24, r28
    118a:	60 e1       	ldi	r22, 0x10	; 16
    118c:	77 e2       	ldi	r23, 0x27	; 39
    118e:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__divmodhi4>
    1192:	89 2b       	or	r24, r25
    1194:	41 f4       	brne	.+16     	; 0x11a6 <Spin+0x5e>
		{
			myComs->Update(myComs);
    1196:	f9 01       	movw	r30, r18
    1198:	ef 58       	subi	r30, 0x8F	; 143
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	01 90       	ld	r0, Z+
    119e:	f0 81       	ld	r31, Z
    11a0:	e0 2d       	mov	r30, r0
    11a2:	c9 01       	movw	r24, r18
    11a4:	09 95       	icall
	for(int i = 0;i<=255;i++){
		set_motors(i,0-i);
		delay(2);
	}
	int count = 0;
	while(myComs->EmergencyStop == 2){
    11a6:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <myComs>
    11aa:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <myComs+0x1>
    11ae:	f9 01       	movw	r30, r18
    11b0:	e5 59       	subi	r30, 0x95	; 149
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	80 81       	ld	r24, Z
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	31 f3       	breq	.-52     	; 0x1186 <Spin+0x3e>
		if(count % 10000 == 0)
		{
			myComs->Update(myComs);
		}
	}
	set_motors(0,0);
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <set_motors>
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	08 95       	ret

000011cc <parcoursSearch>:
char route[20] = "_"; 
char routeBack[20];
int routea = 1;

int parcoursSearch(Communications *communications) // go to parcour with left hand rule
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <parcoursSearch+0x6>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
	char richting;
	while(1) 
	{
		
		updateDisplay(0, batteryPercentage(), mazeSolver);
    11d6:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
    11da:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
    11de:	41 e0       	ldi	r20, 0x01	; 1
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 31 03 	call	0x662	; 0x662 <updateDisplay>
		situatie = lineType();		
    11e8:	0e 94 01 05 	call	0xa02	; 0xa02 <lineType>
    11ec:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <situatie>
		switch (situatie) 
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	89 30       	cpi	r24, 0x09	; 9
    11f4:	91 05       	cpc	r25, r1
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <parcoursSearch+0x2e>
    11f8:	41 c0       	rjmp	.+130    	; 0x127c <parcoursSearch+0xb0>
    11fa:	fc 01       	movw	r30, r24
    11fc:	ec 5c       	subi	r30, 0xCC	; 204
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__tablejump2__>
		{
			case Straight:
				motorControl('S');
    1204:	83 e5       	ldi	r24, 0x53	; 83
    1206:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
				break;
    120a:	38 c0       	rjmp	.+112    	; 0x127c <parcoursSearch+0xb0>
					
			case Line_end:
				motorControl('T');
    120c:	84 e5       	ldi	r24, 0x54	; 84
    120e:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
				richting = 'T';
    1212:	84 e5       	ldi	r24, 0x54	; 84
    1214:	89 83       	std	Y+1, r24	; 0x01
				strncat(route, &richting, 1);
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	be 01       	movw	r22, r28
    121c:	6f 5f       	subi	r22, 0xFF	; 255
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	84 e1       	ldi	r24, 0x14	; 20
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <strncat>
				break;
    1228:	29 c0       	rjmp	.+82     	; 0x127c <parcoursSearch+0xb0>
			case Barcode: // end of parcour
				motorControl('P');
				return 0;
			
			case Straight_right_junction:
				richting = 'S';
    122a:	83 e5       	ldi	r24, 0x53	; 83
    122c:	89 83       	std	Y+1, r24	; 0x01
				strncat(route, &richting, 1);
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	be 01       	movw	r22, r28
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	84 e1       	ldi	r24, 0x14	; 20
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <strncat>
				break;
    1240:	1d c0       	rjmp	.+58     	; 0x127c <parcoursSearch+0xb0>
			
			case X_junction:
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
				motorControl('L');
    1242:	8c e4       	ldi	r24, 0x4C	; 76
    1244:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
				richting = 'L';
    1248:	8c e4       	ldi	r24, 0x4C	; 76
    124a:	89 83       	std	Y+1, r24	; 0x01
				strncat(route, &richting, 1);
    124c:	41 e0       	ldi	r20, 0x01	; 1
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	be 01       	movw	r22, r28
    1252:	6f 5f       	subi	r22, 0xFF	; 255
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	84 e1       	ldi	r24, 0x14	; 20
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <strncat>
				break;
    125e:	0e c0       	rjmp	.+28     	; 0x127c <parcoursSearch+0xb0>
			
			case Right_corner:
				motorControl('R');
    1260:	82 e5       	ldi	r24, 0x52	; 82
    1262:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
				richting = 'R';
    1266:	82 e5       	ldi	r24, 0x52	; 82
    1268:	89 83       	std	Y+1, r24	; 0x01
				strncat(route, &richting, 1);
    126a:	41 e0       	ldi	r20, 0x01	; 1
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	be 01       	movw	r22, r28
    1270:	6f 5f       	subi	r22, 0xFF	; 255
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	84 e1       	ldi	r24, 0x14	; 20
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <strncat>
// 		print_character(route[i]);
//		}
		
		////// find shortest route
		char richting;	
		if (route[strlen(route)-2] == 'T') 
    127c:	e4 e1       	ldi	r30, 0x14	; 20
    127e:	f1 e0       	ldi	r31, 0x01	; 1
    1280:	01 90       	ld	r0, Z+
    1282:	00 20       	and	r0, r0
    1284:	e9 f7       	brne	.-6      	; 0x1280 <parcoursSearch+0xb4>
    1286:	31 97       	sbiw	r30, 0x01	; 1
    1288:	e4 51       	subi	r30, 0x14	; 20
    128a:	f1 40       	sbci	r31, 0x01	; 1
    128c:	df 01       	movw	r26, r30
    128e:	ae 5e       	subi	r26, 0xEE	; 238
    1290:	be 4f       	sbci	r27, 0xFE	; 254
    1292:	8c 91       	ld	r24, X
    1294:	84 35       	cpi	r24, 0x54	; 84
    1296:	09 f0       	breq	.+2      	; 0x129a <parcoursSearch+0xce>
    1298:	9e cf       	rjmp	.-196    	; 0x11d6 <parcoursSearch+0xa>
		{
			char char_1 = route[strlen(route)-3];
    129a:	df 01       	movw	r26, r30
    129c:	af 5e       	subi	r26, 0xEF	; 239
    129e:	be 4f       	sbci	r27, 0xFE	; 254
    12a0:	8c 91       	ld	r24, X
			char char_2 = route[strlen(route)-1];
    12a2:	ed 5e       	subi	r30, 0xED	; 237
    12a4:	fe 4f       	sbci	r31, 0xFE	; 254
    12a6:	90 81       	ld	r25, Z

			if (char_1 == 'L' && char_2 == 'L') 
    12a8:	8c 34       	cpi	r24, 0x4C	; 76
    12aa:	29 f4       	brne	.+10     	; 0x12b6 <parcoursSearch+0xea>
    12ac:	9c 34       	cpi	r25, 0x4C	; 76
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <parcoursSearch+0xea>
			{
				richting = 'S';
    12b0:	83 e5       	ldi	r24, 0x53	; 83
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	1b c0       	rjmp	.+54     	; 0x12ec <parcoursSearch+0x120>
			}
			else if (char_1 == 'S' && char_2 == 'L')
    12b6:	83 35       	cpi	r24, 0x53	; 83
    12b8:	29 f4       	brne	.+10     	; 0x12c4 <parcoursSearch+0xf8>
    12ba:	9c 34       	cpi	r25, 0x4C	; 76
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <parcoursSearch+0xf8>
			{
				richting = 'R';
    12be:	82 e5       	ldi	r24, 0x52	; 82
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	14 c0       	rjmp	.+40     	; 0x12ec <parcoursSearch+0x120>
			}
			else if (char_1 == 'R' && char_2 == 'L')
    12c4:	82 35       	cpi	r24, 0x52	; 82
    12c6:	29 f4       	brne	.+10     	; 0x12d2 <parcoursSearch+0x106>
    12c8:	9c 34       	cpi	r25, 0x4C	; 76
    12ca:	19 f4       	brne	.+6      	; 0x12d2 <parcoursSearch+0x106>
			{
				richting = 'T';
    12cc:	84 e5       	ldi	r24, 0x54	; 84
    12ce:	8a 83       	std	Y+2, r24	; 0x02
    12d0:	0d c0       	rjmp	.+26     	; 0x12ec <parcoursSearch+0x120>
			}
			else if (char_1 == 'L' && char_2 == 'R')
    12d2:	8c 34       	cpi	r24, 0x4C	; 76
    12d4:	29 f4       	brne	.+10     	; 0x12e0 <parcoursSearch+0x114>
    12d6:	92 35       	cpi	r25, 0x52	; 82
    12d8:	19 f4       	brne	.+6      	; 0x12e0 <parcoursSearch+0x114>
			{
				richting = 'T';
    12da:	84 e5       	ldi	r24, 0x54	; 84
    12dc:	8a 83       	std	Y+2, r24	; 0x02
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <parcoursSearch+0x120>
			}
			else if (char_1 == 'L' && char_2 == 'S')
    12e0:	8c 34       	cpi	r24, 0x4C	; 76
    12e2:	21 f4       	brne	.+8      	; 0x12ec <parcoursSearch+0x120>
    12e4:	93 35       	cpi	r25, 0x53	; 83
    12e6:	11 f4       	brne	.+4      	; 0x12ec <parcoursSearch+0x120>
			{
				richting = 'R';
    12e8:	82 e5       	ldi	r24, 0x52	; 82
    12ea:	8a 83       	std	Y+2, r24	; 0x02
			}
			route[strlen(route)-3] = '\0';
    12ec:	e4 e1       	ldi	r30, 0x14	; 20
    12ee:	f1 e0       	ldi	r31, 0x01	; 1
    12f0:	01 90       	ld	r0, Z+
    12f2:	00 20       	and	r0, r0
    12f4:	e9 f7       	brne	.-6      	; 0x12f0 <parcoursSearch+0x124>
    12f6:	34 97       	sbiw	r30, 0x04	; 4
    12f8:	10 82       	st	Z, r1
			strncat(route, &richting, 1);
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	be 01       	movw	r22, r28
    1300:	6e 5f       	subi	r22, 0xFE	; 254
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	84 e1       	ldi	r24, 0x14	; 20
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 2d 1f 	call	0x3e5a	; 0x3e5a <strncat>
		}
	}
    130c:	64 cf       	rjmp	.-312    	; 0x11d6 <parcoursSearch+0xa>
				richting = 'T';
				strncat(route, &richting, 1);
				break;
					
			case Barcode: // end of parcour
				motorControl('P');
    130e:	80 e5       	ldi	r24, 0x50	; 80
    1310:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
			strncat(route, &richting, 1);
		}
	}
	routea = 0;	
	return 0;
}
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <parcoursRun>:

// run shortest route
int parcoursRun(char way, Communications *communications) 
{
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	18 2f       	mov	r17, r24
	char richting;
	for (int i = 0; i < strlen(route); i++) 
    132e:	c0 e0       	ldi	r28, 0x00	; 0
    1330:	d0 e0       	ldi	r29, 0x00	; 0
    1332:	43 c0       	rjmp	.+134    	; 0x13ba <parcoursRun+0x98>
	{
		updateDisplay(0, batteryPercentage(), mazeSolver);
    1334:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
    1338:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 31 03 	call	0x662	; 0x662 <updateDisplay>
		while (lineType() == Straight)
    1346:	03 c0       	rjmp	.+6      	; 0x134e <parcoursRun+0x2c>
		{
			motorControl('S');
    1348:	83 e5       	ldi	r24, 0x53	; 83
    134a:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
	{
		updateDisplay(0, batteryPercentage(), mazeSolver);
		while (lineType() == Straight)
    134e:	0e 94 01 05 	call	0xa02	; 0xa02 <lineType>
    1352:	88 23       	and	r24, r24
    1354:	c9 f3       	breq	.-14     	; 0x1348 <parcoursRun+0x26>
		{
			motorControl('S');
		}
		
		if (lineType() == Line_end) {
    1356:	0e 94 01 05 	call	0xa02	; 0xa02 <lineType>
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	59 f4       	brne	.+22     	; 0x1374 <parcoursRun+0x52>
			clear();
    135e:	0e 94 4d 14 	call	0x289a	; 0x289a <clear>
			lcd_goto_xy(0, 0);
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <lcd_goto_xy>
			print("parcours lost");
    136a:	8b e8       	ldi	r24, 0x8B	; 139
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <print>
    1372:	ff cf       	rjmp	.-2      	; 0x1372 <parcoursRun+0x50>
			while(1);
		}
		
		if (way == 'T') {
    1374:	14 35       	cpi	r17, 0x54	; 84
    1376:	39 f4       	brne	.+14     	; 0x1386 <parcoursRun+0x64>
			motorControl(route[i]);
    1378:	fe 01       	movw	r30, r28
    137a:	ec 5e       	subi	r30, 0xEC	; 236
    137c:	fe 4f       	sbci	r31, 0xFE	; 254
    137e:	80 81       	ld	r24, Z
    1380:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
    1384:	19 c0       	rjmp	.+50     	; 0x13b8 <parcoursRun+0x96>
		} 
		else if (way == 'B') 
    1386:	12 34       	cpi	r17, 0x42	; 66
    1388:	b9 f4       	brne	.+46     	; 0x13b8 <parcoursRun+0x96>
		{
			richting = route[strlen(route)-i-1];
    138a:	e4 e1       	ldi	r30, 0x14	; 20
    138c:	f1 e0       	ldi	r31, 0x01	; 1
    138e:	01 90       	ld	r0, Z+
    1390:	00 20       	and	r0, r0
    1392:	e9 f7       	brne	.-6      	; 0x138e <parcoursRun+0x6c>
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	e4 51       	subi	r30, 0x14	; 20
    1398:	f1 40       	sbci	r31, 0x01	; 1
    139a:	ee 19       	sub	r30, r14
    139c:	ff 09       	sbc	r31, r15
    139e:	ed 5e       	subi	r30, 0xED	; 237
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	80 81       	ld	r24, Z
			switch (richting)
    13a4:	8c 34       	cpi	r24, 0x4C	; 76
    13a6:	19 f0       	breq	.+6      	; 0x13ae <parcoursRun+0x8c>
    13a8:	82 35       	cpi	r24, 0x52	; 82
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <parcoursRun+0x90>
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <parcoursRun+0x92>
			{
				case 'R':
					richting = 'L';
					break;
				case 'L':
					richting = 'R';
    13ae:	82 e5       	ldi	r24, 0x52	; 82
					break;
    13b0:	01 c0       	rjmp	.+2      	; 0x13b4 <parcoursRun+0x92>
		{
			richting = route[strlen(route)-i-1];
			switch (richting)
			{
				case 'R':
					richting = 'L';
    13b2:	8c e4       	ldi	r24, 0x4C	; 76
					break;
				case 'L':
					richting = 'R';
					break;
			}
			motorControl(richting);
    13b4:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>

// run shortest route
int parcoursRun(char way, Communications *communications) 
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
    13b8:	21 96       	adiw	r28, 0x01	; 1
    13ba:	e4 e1       	ldi	r30, 0x14	; 20
    13bc:	f1 e0       	ldi	r31, 0x01	; 1
    13be:	01 90       	ld	r0, Z+
    13c0:	00 20       	and	r0, r0
    13c2:	e9 f7       	brne	.-6      	; 0x13be <parcoursRun+0x9c>
    13c4:	31 97       	sbiw	r30, 0x01	; 1
    13c6:	e4 51       	subi	r30, 0x14	; 20
    13c8:	f1 40       	sbci	r31, 0x01	; 1
    13ca:	7e 01       	movw	r14, r28
    13cc:	ce 17       	cp	r28, r30
    13ce:	df 07       	cpc	r29, r31
    13d0:	08 f4       	brcc	.+2      	; 0x13d4 <parcoursRun+0xb2>
    13d2:	b0 cf       	rjmp	.-160    	; 0x1334 <parcoursRun+0x12>
			}
			motorControl(richting);
		}
	}
	return 0;
}
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	08 95       	ret

000013e4 <parcours>:

int parcours(char way, Communications *communications) 
{
	if (route[0] == '_')// if it is the first time -> parcoursSearch
    13e4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <route>
    13e8:	9f 35       	cpi	r25, 0x5F	; 95
    13ea:	59 f4       	brne	.+22     	; 0x1402 <parcours+0x1e>
	{		
		memset(route,0,sizeof route);
    13ec:	84 e1       	ldi	r24, 0x14	; 20
    13ee:	e4 e1       	ldi	r30, 0x14	; 20
    13f0:	f1 e0       	ldi	r31, 0x01	; 1
    13f2:	df 01       	movw	r26, r30
    13f4:	1d 92       	st	X+, r1
    13f6:	8a 95       	dec	r24
    13f8:	e9 f7       	brne	.-6      	; 0x13f4 <parcours+0x10>
		parcoursSearch(communications);
    13fa:	cb 01       	movw	r24, r22
    13fc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <parcoursSearch>
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <parcours+0x22>
	} 
	else						// if it isn't the fist time -> run shortest route
	{
		parcoursRun(way, communications); // run shortest route
    1402:	0e 94 91 09 	call	0x1322	; 0x1322 <parcoursRun>
		//parcoursSearch(communications);
	} 
	return 0;
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	08 95       	ret

0000140c <swap>:

const char sound[] PROGMEM = ">g32>>c32";


void swap(char *a, char *b) {
    int temp = *a;
    140c:	fc 01       	movw	r30, r24
    140e:	20 81       	ld	r18, Z
    *a = *b;
    1410:	fb 01       	movw	r30, r22
    1412:	30 81       	ld	r19, Z
    1414:	fc 01       	movw	r30, r24
    1416:	30 83       	st	Z, r19
    *b = temp;
    1418:	fb 01       	movw	r30, r22
    141a:	20 83       	st	Z, r18
    141c:	08 95       	ret

0000141e <bubbleSort>:
}

void bubbleSort(char arr[],char orderY[], int n) {
    141e:	8f 92       	push	r8
    1420:	9f 92       	push	r9
    1422:	af 92       	push	r10
    1424:	bf 92       	push	r11
    1426:	cf 92       	push	r12
    1428:	df 92       	push	r13
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	8c 01       	movw	r16, r24
    1438:	5b 01       	movw	r10, r22
    143a:	6a 01       	movw	r12, r20
    for (int i = 0; i < n - 1; i++) {
    143c:	e1 2c       	mov	r14, r1
    143e:	f1 2c       	mov	r15, r1
    1440:	28 c0       	rjmp	.+80     	; 0x1492 <bubbleSort+0x74>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
    1442:	f8 01       	movw	r30, r16
    1444:	ec 0f       	add	r30, r28
    1446:	fd 1f       	adc	r31, r29
    1448:	90 81       	ld	r25, Z
    144a:	4e 01       	movw	r8, r28
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	88 1a       	sub	r8, r24
    1450:	98 0a       	sbc	r9, r24
    1452:	d8 01       	movw	r26, r16
    1454:	a8 0d       	add	r26, r8
    1456:	b9 1d       	adc	r27, r9
    1458:	8c 91       	ld	r24, X
    145a:	89 17       	cp	r24, r25
    145c:	60 f4       	brcc	.+24     	; 0x1476 <bubbleSort+0x58>
                swap(&arr[j], &arr[j + 1]);
    145e:	bd 01       	movw	r22, r26
    1460:	cf 01       	movw	r24, r30
    1462:	0e 94 06 0a 	call	0x140c	; 0x140c <swap>
                swap(&orderY[j], &orderY[j + 1]);
    1466:	b5 01       	movw	r22, r10
    1468:	68 0d       	add	r22, r8
    146a:	79 1d       	adc	r23, r9
    146c:	c5 01       	movw	r24, r10
    146e:	8c 0f       	add	r24, r28
    1470:	9d 1f       	adc	r25, r29
    1472:	0e 94 06 0a 	call	0x140c	; 0x140c <swap>
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
    1476:	21 96       	adiw	r28, 0x01	; 1
    1478:	02 c0       	rjmp	.+4      	; 0x147e <bubbleSort+0x60>
    147a:	c0 e0       	ldi	r28, 0x00	; 0
    147c:	d0 e0       	ldi	r29, 0x00	; 0
    147e:	c6 01       	movw	r24, r12
    1480:	8e 19       	sub	r24, r14
    1482:	9f 09       	sbc	r25, r15
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	c8 17       	cp	r28, r24
    1488:	d9 07       	cpc	r29, r25
    148a:	dc f2       	brlt	.-74     	; 0x1442 <bubbleSort+0x24>
    *a = *b;
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
    148c:	8f ef       	ldi	r24, 0xFF	; 255
    148e:	e8 1a       	sub	r14, r24
    1490:	f8 0a       	sbc	r15, r24
    1492:	c6 01       	movw	r24, r12
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	e8 16       	cp	r14, r24
    1498:	f9 06       	cpc	r15, r25
    149a:	7c f3       	brlt	.-34     	; 0x147a <bubbleSort+0x5c>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	08 95       	ret

000014b6 <drive>:



void drive(int junctions, piRobot *robot, Communications *myCom)
{
    14b6:	cf 92       	push	r12
    14b8:	df 92       	push	r13
    14ba:	ef 92       	push	r14
    14bc:	ff 92       	push	r15
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	6c 01       	movw	r12, r24
    14c8:	7a 01       	movw	r14, r20
	Junctions situatie;
	
	motorControl('S');
    14ca:	83 e5       	ldi	r24, 0x53	; 83
    14cc:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
	int driving = 1;
	int count = 0;//Count for number of junctions to pass
    14d0:	00 e0       	ldi	r16, 0x00	; 0
    14d2:	10 e0       	ldi	r17, 0x00	; 0
void drive(int junctions, piRobot *robot, Communications *myCom)
{
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
    14d4:	c1 e0       	ldi	r28, 0x01	; 1
    14d6:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;//Count for number of junctions to pass
	while(driving) {
    14d8:	22 c0       	rjmp	.+68     	; 0x151e <drive+0x68>
		situatie = lineType();
    14da:	0e 94 01 05 	call	0xa02	; 0xa02 <lineType>
		switch (situatie) {
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	49 f0       	breq	.+18     	; 0x14f4 <drive+0x3e>
    14e2:	20 f0       	brcs	.+8      	; 0x14ec <drive+0x36>
    14e4:	83 50       	subi	r24, 0x03	; 3
    14e6:	86 30       	cpi	r24, 0x06	; 6
    14e8:	d0 f4       	brcc	.+52     	; 0x151e <drive+0x68>
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <drive+0x3e>
			case Barcode: // end of parcour
			
				break;
			
			case Straight:
				motorControl('S');
    14ec:	83 e5       	ldi	r24, 0x53	; 83
    14ee:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
				break;
    14f2:	15 c0       	rjmp	.+42     	; 0x151e <drive+0x68>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
    14f4:	0f 5f       	subi	r16, 0xFF	; 255
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
				motorControl('S');
    14f8:	83 e5       	ldi	r24, 0x53	; 83
    14fa:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
				if(count == junctions)
    14fe:	0c 15       	cp	r16, r12
    1500:	1d 05       	cpc	r17, r13
    1502:	29 f4       	brne	.+10     	; 0x150e <drive+0x58>
				{
					motorControl('P');
    1504:	80 e5       	ldi	r24, 0x50	; 80
    1506:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					driving = 0;
    150a:	c0 e0       	ldi	r28, 0x00	; 0
    150c:	d0 e0       	ldi	r29, 0x00	; 0
				}
				myCom->Update(myCom);
    150e:	f7 01       	movw	r30, r14
    1510:	ef 58       	subi	r30, 0x8F	; 143
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	01 90       	ld	r0, Z+
    1516:	f0 81       	ld	r31, Z
    1518:	e0 2d       	mov	r30, r0
    151a:	c7 01       	movw	r24, r14
    151c:	09 95       	icall
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
	int count = 0;//Count for number of junctions to pass
	while(driving) {
    151e:	20 97       	sbiw	r28, 0x00	; 0
    1520:	e1 f6       	brne	.-72     	; 0x14da <drive+0x24>
				}
				myCom->Update(myCom);
				break;	
		}
	}
}
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	08 95       	ret

00001534 <waitForTurn>:

void waitForTurn()
{
    1534:	cf 93       	push	r28
	Junctions line;
	line = lineType();
    1536:	0e 94 01 05 	call	0xa02	; 0xa02 <lineType>
    153a:	c8 2f       	mov	r28, r24
    153c:	89 e1       	ldi	r24, 0x19	; 25
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
    1544:	03 c0       	rjmp	.+6      	; 0x154c <waitForTurn+0x18>
	delay(25);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
	{
		line  = lineType();
    1546:	0e 94 01 05 	call	0xa02	; 0xa02 <lineType>
    154a:	c8 2f       	mov	r28, r24
void waitForTurn()
{
	Junctions line;
	line = lineType();
	delay(25);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
    154c:	c1 11       	cpse	r28, r1
    154e:	fb cf       	rjmp	.-10     	; 0x1546 <waitForTurn+0x12>
	{
		line  = lineType();
	}
	motorControl('N');
    1550:	8e e4       	ldi	r24, 0x4E	; 78
    1552:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
}
    1556:	cf 91       	pop	r28
    1558:	08 95       	ret

0000155a <turnRobot>:

void turnRobot(char tdirection, piRobot *myRobot)
{
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	c8 2f       	mov	r28, r24
    1566:	8b 01       	movw	r16, r22
    int changing = 1;
    1568:	ee 24       	eor	r14, r14
    156a:	e3 94       	inc	r14
    156c:	f1 2c       	mov	r15, r1

    while(changing==1)
    156e:	b0 c0       	rjmp	.+352    	; 0x16d0 <turnRobot+0x176>
    {
		
        switch(myRobot->direction)
    1570:	f8 01       	movw	r30, r16
    1572:	84 81       	ldd	r24, Z+4	; 0x04
    1574:	8e 34       	cpi	r24, 0x4E	; 78
    1576:	59 f0       	breq	.+22     	; 0x158e <turnRobot+0x34>
    1578:	18 f4       	brcc	.+6      	; 0x1580 <turnRobot+0x26>
    157a:	85 34       	cpi	r24, 0x45	; 69
    157c:	91 f1       	breq	.+100    	; 0x15e2 <turnRobot+0x88>
    157e:	a2 c0       	rjmp	.+324    	; 0x16c4 <turnRobot+0x16a>
    1580:	83 35       	cpi	r24, 0x53	; 83
    1582:	09 f4       	brne	.+2      	; 0x1586 <turnRobot+0x2c>
    1584:	53 c0       	rjmp	.+166    	; 0x162c <turnRobot+0xd2>
    1586:	87 35       	cpi	r24, 0x57	; 87
    1588:	09 f4       	brne	.+2      	; 0x158c <turnRobot+0x32>
    158a:	74 c0       	rjmp	.+232    	; 0x1674 <turnRobot+0x11a>
    158c:	9b c0       	rjmp	.+310    	; 0x16c4 <turnRobot+0x16a>
        {
            case 'N':
                if(tdirection == 'E')
    158e:	c5 34       	cpi	r28, 0x45	; 69
    1590:	49 f4       	brne	.+18     	; 0x15a4 <turnRobot+0x4a>
                {
                    motorControl('R');
    1592:	82 e5       	ldi	r24, 0x52	; 82
    1594:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    1598:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'E';
    159c:	85 e4       	ldi	r24, 0x45	; 69
    159e:	f8 01       	movw	r30, r16
    15a0:	84 83       	std	Z+4, r24	; 0x04
    15a2:	90 c0       	rjmp	.+288    	; 0x16c4 <turnRobot+0x16a>
                }
                else if(tdirection == 'W')
    15a4:	c7 35       	cpi	r28, 0x57	; 87
    15a6:	49 f4       	brne	.+18     	; 0x15ba <turnRobot+0x60>
                {
                    motorControl('L');
    15a8:	8c e4       	ldi	r24, 0x4C	; 76
    15aa:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    15ae:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'W';
    15b2:	87 e5       	ldi	r24, 0x57	; 87
    15b4:	f8 01       	movw	r30, r16
    15b6:	84 83       	std	Z+4, r24	; 0x04
    15b8:	85 c0       	rjmp	.+266    	; 0x16c4 <turnRobot+0x16a>
                }
                else if(tdirection == 'S')
    15ba:	c3 35       	cpi	r28, 0x53	; 83
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <turnRobot+0x66>
    15be:	82 c0       	rjmp	.+260    	; 0x16c4 <turnRobot+0x16a>
                {
                    motorControl('L');
    15c0:	8c e4       	ldi	r24, 0x4C	; 76
    15c2:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					if(myRobot->posX != 5){motorControl('L');}
    15c6:	f8 01       	movw	r30, r16
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	05 97       	sbiw	r24, 0x05	; 5
    15ce:	19 f0       	breq	.+6      	; 0x15d6 <turnRobot+0x7c>
    15d0:	8c e4       	ldi	r24, 0x4C	; 76
    15d2:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    15d6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'S';
    15da:	83 e5       	ldi	r24, 0x53	; 83
    15dc:	f8 01       	movw	r30, r16
    15de:	84 83       	std	Z+4, r24	; 0x04
    15e0:	71 c0       	rjmp	.+226    	; 0x16c4 <turnRobot+0x16a>
                }
                break;
            case 'E':
                if(tdirection == 'S')
    15e2:	c3 35       	cpi	r28, 0x53	; 83
    15e4:	49 f4       	brne	.+18     	; 0x15f8 <turnRobot+0x9e>
                {
                    motorControl('R');
    15e6:	82 e5       	ldi	r24, 0x52	; 82
    15e8:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    15ec:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'S';
    15f0:	83 e5       	ldi	r24, 0x53	; 83
    15f2:	f8 01       	movw	r30, r16
    15f4:	84 83       	std	Z+4, r24	; 0x04
    15f6:	66 c0       	rjmp	.+204    	; 0x16c4 <turnRobot+0x16a>
                }
                else if(tdirection == 'W')
    15f8:	c7 35       	cpi	r28, 0x57	; 87
    15fa:	49 f4       	brne	.+18     	; 0x160e <turnRobot+0xb4>
                {
                    motorControl('L');
    15fc:	8c e4       	ldi	r24, 0x4C	; 76
    15fe:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    1602:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'W';
    1606:	87 e5       	ldi	r24, 0x57	; 87
    1608:	f8 01       	movw	r30, r16
    160a:	84 83       	std	Z+4, r24	; 0x04
    160c:	5b c0       	rjmp	.+182    	; 0x16c4 <turnRobot+0x16a>
                }
                else if(tdirection == 'S')
    160e:	c3 35       	cpi	r28, 0x53	; 83
    1610:	09 f0       	breq	.+2      	; 0x1614 <turnRobot+0xba>
    1612:	58 c0       	rjmp	.+176    	; 0x16c4 <turnRobot+0x16a>
                {
                    motorControl('L');motorControl('L');
    1614:	8c e4       	ldi	r24, 0x4C	; 76
    1616:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
    161a:	8c e4       	ldi	r24, 0x4C	; 76
    161c:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    1620:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'S';
    1624:	83 e5       	ldi	r24, 0x53	; 83
    1626:	f8 01       	movw	r30, r16
    1628:	84 83       	std	Z+4, r24	; 0x04
    162a:	4c c0       	rjmp	.+152    	; 0x16c4 <turnRobot+0x16a>
                }
                break;
            case 'S':
                if(tdirection == 'W')
    162c:	c7 35       	cpi	r28, 0x57	; 87
    162e:	49 f4       	brne	.+18     	; 0x1642 <turnRobot+0xe8>
                {
                    motorControl('R');
    1630:	82 e5       	ldi	r24, 0x52	; 82
    1632:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    1636:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'W';
    163a:	87 e5       	ldi	r24, 0x57	; 87
    163c:	f8 01       	movw	r30, r16
    163e:	84 83       	std	Z+4, r24	; 0x04
    1640:	41 c0       	rjmp	.+130    	; 0x16c4 <turnRobot+0x16a>
                }
                else if(tdirection == 'E')
    1642:	c5 34       	cpi	r28, 0x45	; 69
    1644:	49 f4       	brne	.+18     	; 0x1658 <turnRobot+0xfe>
                {
                    motorControl('L');
    1646:	8c e4       	ldi	r24, 0x4C	; 76
    1648:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    164c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'E';
    1650:	85 e4       	ldi	r24, 0x45	; 69
    1652:	f8 01       	movw	r30, r16
    1654:	84 83       	std	Z+4, r24	; 0x04
    1656:	36 c0       	rjmp	.+108    	; 0x16c4 <turnRobot+0x16a>
                }
                else if(tdirection == 'N')
    1658:	ce 34       	cpi	r28, 0x4E	; 78
    165a:	a1 f5       	brne	.+104    	; 0x16c4 <turnRobot+0x16a>
                {
                    motorControl('L');motorControl('L');
    165c:	8c e4       	ldi	r24, 0x4C	; 76
    165e:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
    1662:	8c e4       	ldi	r24, 0x4C	; 76
    1664:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    1668:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'N';
    166c:	8e e4       	ldi	r24, 0x4E	; 78
    166e:	f8 01       	movw	r30, r16
    1670:	84 83       	std	Z+4, r24	; 0x04
    1672:	28 c0       	rjmp	.+80     	; 0x16c4 <turnRobot+0x16a>
                }
                break;
            case 'W':
                if(tdirection == 'N')
    1674:	ce 34       	cpi	r28, 0x4E	; 78
    1676:	49 f4       	brne	.+18     	; 0x168a <turnRobot+0x130>
                {
					
                    motorControl('R');
    1678:	82 e5       	ldi	r24, 0x52	; 82
    167a:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    167e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'N';
    1682:	8e e4       	ldi	r24, 0x4E	; 78
    1684:	f8 01       	movw	r30, r16
    1686:	84 83       	std	Z+4, r24	; 0x04
    1688:	1d c0       	rjmp	.+58     	; 0x16c4 <turnRobot+0x16a>
                }
                else if(tdirection == 'S')
    168a:	c3 35       	cpi	r28, 0x53	; 83
    168c:	49 f4       	brne	.+18     	; 0x16a0 <turnRobot+0x146>
                {
	                motorControl('L');
    168e:	8c e4       	ldi	r24, 0x4C	; 76
    1690:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
	                waitForTurn();
    1694:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
	                myRobot->direction = 'S';
    1698:	83 e5       	ldi	r24, 0x53	; 83
    169a:	f8 01       	movw	r30, r16
    169c:	84 83       	std	Z+4, r24	; 0x04
    169e:	12 c0       	rjmp	.+36     	; 0x16c4 <turnRobot+0x16a>
                }
                else if(tdirection == 'E')
    16a0:	c5 34       	cpi	r28, 0x45	; 69
    16a2:	81 f4       	brne	.+32     	; 0x16c4 <turnRobot+0x16a>
                {
                    motorControl('L');
    16a4:	8c e4       	ldi	r24, 0x4C	; 76
    16a6:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					if(myRobot->posY != 1){motorControl('L');}
    16aa:	f8 01       	movw	r30, r16
    16ac:	82 81       	ldd	r24, Z+2	; 0x02
    16ae:	93 81       	ldd	r25, Z+3	; 0x03
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	19 f0       	breq	.+6      	; 0x16ba <turnRobot+0x160>
    16b4:	8c e4       	ldi	r24, 0x4C	; 76
    16b6:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
					waitForTurn();
    16ba:	0e 94 9a 0a 	call	0x1534	; 0x1534 <waitForTurn>
                    myRobot->direction = 'E';
    16be:	85 e4       	ldi	r24, 0x45	; 69
    16c0:	f8 01       	movw	r30, r16
    16c2:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
				if(myRobot->direction == tdirection)
    16c4:	f8 01       	movw	r30, r16
    16c6:	84 81       	ldd	r24, Z+4	; 0x04
    16c8:	c8 13       	cpse	r28, r24
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <turnRobot+0x176>
				{
					changing = 0;
    16cc:	e1 2c       	mov	r14, r1
    16ce:	f1 2c       	mov	r15, r1

void turnRobot(char tdirection, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
    16d0:	f1 e0       	ldi	r31, 0x01	; 1
    16d2:	ef 16       	cp	r14, r31
    16d4:	f1 04       	cpc	r15, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <turnRobot+0x180>
    16d8:	4b cf       	rjmp	.-362    	; 0x1570 <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	08 95       	ret

000016e6 <moveX>:


void moveX(int orderPos, piRobot *robot, Communications *myCom)
{
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
	
    int junctions;
	
    if(robot->posX != orderPos)
    16f2:	fb 01       	movw	r30, r22
    16f4:	20 81       	ld	r18, Z
    16f6:	31 81       	ldd	r19, Z+1	; 0x01
    16f8:	28 17       	cp	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	d9 f0       	breq	.+54     	; 0x1734 <moveX+0x4e>
    16fe:	7a 01       	movw	r14, r20
    1700:	eb 01       	movw	r28, r22
    1702:	8c 01       	movw	r16, r24
    {
		
        if(robot->posX < orderPos)
    1704:	28 17       	cp	r18, r24
    1706:	39 07       	cpc	r19, r25
    1708:	54 f4       	brge	.+20     	; 0x171e <moveX+0x38>
        {
            turnRobot('W', robot);
    170a:	87 e5       	ldi	r24, 0x57	; 87
    170c:	0e 94 ad 0a 	call	0x155a	; 0x155a <turnRobot>
            junctions = orderPos-robot->posX;
    1710:	88 81       	ld	r24, Y
    1712:	99 81       	ldd	r25, Y+1	; 0x01
    1714:	98 01       	movw	r18, r16
    1716:	28 1b       	sub	r18, r24
    1718:	39 0b       	sbc	r19, r25
    171a:	c9 01       	movw	r24, r18
    171c:	07 c0       	rjmp	.+14     	; 0x172c <moveX+0x46>
        }
        else{
            turnRobot('E', robot);
    171e:	85 e4       	ldi	r24, 0x45	; 69
    1720:	0e 94 ad 0a 	call	0x155a	; 0x155a <turnRobot>
            junctions = robot->posX - orderPos;
    1724:	88 81       	ld	r24, Y
    1726:	99 81       	ldd	r25, Y+1	; 0x01
    1728:	80 1b       	sub	r24, r16
    172a:	91 0b       	sbc	r25, r17
        }
		drive(junctions, robot, myCom);
    172c:	a7 01       	movw	r20, r14
    172e:	be 01       	movw	r22, r28
    1730:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <drive>
    }
}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	08 95       	ret

00001742 <moveY>:

void moveY(int orderPos, piRobot *robot, Communications *myCom)
{
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
    174e:	fb 01       	movw	r30, r22
    1750:	22 81       	ldd	r18, Z+2	; 0x02
    1752:	33 81       	ldd	r19, Z+3	; 0x03
    1754:	28 17       	cp	r18, r24
    1756:	39 07       	cpc	r19, r25
    1758:	d9 f0       	breq	.+54     	; 0x1790 <moveY+0x4e>
    175a:	7a 01       	movw	r14, r20
    175c:	eb 01       	movw	r28, r22
    175e:	8c 01       	movw	r16, r24
    {
        if(robot->posY < orderPos)
    1760:	28 17       	cp	r18, r24
    1762:	39 07       	cpc	r19, r25
    1764:	54 f4       	brge	.+20     	; 0x177a <moveY+0x38>
        {
            turnRobot('N', robot);
    1766:	8e e4       	ldi	r24, 0x4E	; 78
    1768:	0e 94 ad 0a 	call	0x155a	; 0x155a <turnRobot>
            junctions = orderPos-robot->posY;
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	9b 81       	ldd	r25, Y+3	; 0x03
    1770:	98 01       	movw	r18, r16
    1772:	28 1b       	sub	r18, r24
    1774:	39 0b       	sbc	r19, r25
    1776:	c9 01       	movw	r24, r18
    1778:	07 c0       	rjmp	.+14     	; 0x1788 <moveY+0x46>
        }
        else{
            turnRobot('S', robot);
    177a:	83 e5       	ldi	r24, 0x53	; 83
    177c:	0e 94 ad 0a 	call	0x155a	; 0x155a <turnRobot>
            junctions = robot->posY - orderPos;
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	9b 81       	ldd	r25, Y+3	; 0x03
    1784:	80 1b       	sub	r24, r16
    1786:	91 0b       	sbc	r25, r17
        }
            drive(junctions, robot, myCom);
    1788:	a7 01       	movw	r20, r14
    178a:	be 01       	movw	r22, r28
    178c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <drive>
        
    }
}
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	08 95       	ret

0000179e <warehouse>:


void warehouse(objective objective, Communications *myCom)
{
    179e:	2f 92       	push	r2
    17a0:	3f 92       	push	r3
    17a2:	4f 92       	push	r4
    17a4:	5f 92       	push	r5
    17a6:	6f 92       	push	r6
    17a8:	7f 92       	push	r7
    17aa:	8f 92       	push	r8
    17ac:	9f 92       	push	r9
    17ae:	af 92       	push	r10
    17b0:	bf 92       	push	r11
    17b2:	cf 92       	push	r12
    17b4:	df 92       	push	r13
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	e7 97       	sbiw	r28, 0x37	; 55
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	f8 2e       	mov	r15, r24
    17d4:	8b 01       	movw	r16, r22
 piRobot robot;
 robot.direction = 'W';
    17d6:	87 e5       	ldi	r24, 0x57	; 87
    17d8:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = 0;
    17da:	1a 82       	std	Y+2, r1	; 0x02
    17dc:	19 82       	std	Y+1, r1	; 0x01
 robot.posY = 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
 myCom->locationx = 0;
    17e6:	fb 01       	movw	r30, r22
    17e8:	e2 59       	subi	r30, 0x92	; 146
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	10 82       	st	Z, r1
 myCom-> locationy = 1;
    17ee:	31 96       	adiw	r30, 0x01	; 1
    17f0:	80 83       	st	Z, r24
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
 //char orderX[]={2,5,4,3,1};
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
    17f6:	c1 2c       	mov	r12, r1
    17f8:	d1 2c       	mov	r13, r1
 for(int i = 0; i<25;i++)
    17fa:	0c c0       	rjmp	.+24     	; 0x1814 <warehouse+0x76>
 {
 	if(myCom->Orderarx[i] != 0)
    17fc:	f8 01       	movw	r30, r16
    17fe:	e8 0f       	add	r30, r24
    1800:	f9 1f       	adc	r31, r25
    1802:	ee 5a       	subi	r30, 0xAE	; 174
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	20 81       	ld	r18, Z
    1808:	22 23       	and	r18, r18
    180a:	19 f0       	breq	.+6      	; 0x1812 <warehouse+0x74>
 	{
 		arraySize++;
    180c:	2f ef       	ldi	r18, 0xFF	; 255
    180e:	c2 1a       	sub	r12, r18
    1810:	d2 0a       	sbc	r13, r18
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	89 31       	cpi	r24, 0x19	; 25
    1816:	91 05       	cpc	r25, r1
    1818:	8c f3       	brlt	.-30     	; 0x17fc <warehouse+0x5e>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	18 c0       	rjmp	.+48     	; 0x1850 <warehouse+0xb2>
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
 {
 	orderX[i] = myCom->Orderarx[i];
    1820:	d8 01       	movw	r26, r16
    1822:	a8 0f       	add	r26, r24
    1824:	b9 1f       	adc	r27, r25
    1826:	fd 01       	movw	r30, r26
    1828:	ee 5a       	subi	r30, 0xAE	; 174
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	20 81       	ld	r18, Z
    182e:	e6 e0       	ldi	r30, 0x06	; 6
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	ec 0f       	add	r30, r28
    1834:	fd 1f       	adc	r31, r29
    1836:	e8 0f       	add	r30, r24
    1838:	f9 1f       	adc	r31, r25
    183a:	20 83       	st	Z, r18
 	orderY[i] = myCom->Orderary[i];
    183c:	d9 96       	adiw	r26, 0x39	; 57
    183e:	2c 91       	ld	r18, X
    1840:	ef e1       	ldi	r30, 0x1F	; 31
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	ec 0f       	add	r30, r28
    1846:	fd 1f       	adc	r31, r29
    1848:	e8 0f       	add	r30, r24
    184a:	f9 1f       	adc	r31, r25
    184c:	20 83       	st	Z, r18
 	if(myCom->Orderarx[i] != 0)
 	{
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	8c 15       	cp	r24, r12
    1852:	9d 05       	cpc	r25, r13
    1854:	2c f3       	brlt	.-54     	; 0x1820 <warehouse+0x82>
 	orderX[i] = myCom->Orderarx[i];
 	orderY[i] = myCom->Orderary[i];
 }


    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
    1856:	a6 01       	movw	r20, r12
    1858:	be 01       	movw	r22, r28
    185a:	61 5e       	subi	r22, 0xE1	; 225
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	ce 01       	movw	r24, r28
    1860:	06 96       	adiw	r24, 0x06	; 6
    1862:	0e 94 0f 0a 	call	0x141e	; 0x141e <bubbleSort>
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
    1866:	ff 20       	and	r15, r15
    1868:	09 f4       	brne	.+2      	; 0x186c <warehouse+0xce>
    186a:	93 c0       	rjmp	.+294    	; 0x1992 <warehouse+0x1f4>
    186c:	a9 c0       	rjmp	.+338    	; 0x19c0 <warehouse+0x222>
	{
		for(int locations = 0; locations<arraySize;locations++)
		{
			float completed = locations;
    186e:	b1 01       	movw	r22, r2
    1870:	03 2c       	mov	r0, r3
    1872:	00 0c       	add	r0, r0
    1874:	88 0b       	sbc	r24, r24
    1876:	99 0b       	sbc	r25, r25
    1878:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__floatsisf>
    187c:	2b 01       	movw	r4, r22
    187e:	3c 01       	movw	r6, r24
			float total = arraySize;
    1880:	b6 01       	movw	r22, r12
    1882:	0d 2c       	mov	r0, r13
    1884:	00 0c       	add	r0, r0
    1886:	88 0b       	sbc	r24, r24
    1888:	99 0b       	sbc	r25, r25
    188a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__floatsisf>
    188e:	4b 01       	movw	r8, r22
    1890:	5c 01       	movw	r10, r24
			
			moveX(orderX[locations], &robot, myCom);
    1892:	0f 2e       	mov	r0, r31
    1894:	f6 e0       	ldi	r31, 0x06	; 6
    1896:	ef 2e       	mov	r14, r31
    1898:	f1 2c       	mov	r15, r1
    189a:	f0 2d       	mov	r31, r0
    189c:	ec 0e       	add	r14, r28
    189e:	fd 1e       	adc	r15, r29
    18a0:	e2 0c       	add	r14, r2
    18a2:	f3 1c       	adc	r15, r3
    18a4:	f7 01       	movw	r30, r14
    18a6:	80 81       	ld	r24, Z
    18a8:	a8 01       	movw	r20, r16
    18aa:	be 01       	movw	r22, r28
    18ac:	6f 5f       	subi	r22, 0xFF	; 255
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <moveX>
			robot.posX = orderX[locations];
    18b6:	f7 01       	movw	r30, r14
    18b8:	80 81       	ld	r24, Z
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3a 83       	std	Y+2, r19	; 0x02
    18c0:	29 83       	std	Y+1, r18	; 0x01
			myCom->locationx = robot.posX;
    18c2:	f8 01       	movw	r30, r16
    18c4:	e2 59       	subi	r30, 0x92	; 146
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 83       	st	Z, r24
			moveY(orderY[locations], &robot, myCom);
    18ca:	0f 2e       	mov	r0, r31
    18cc:	ff e1       	ldi	r31, 0x1F	; 31
    18ce:	ef 2e       	mov	r14, r31
    18d0:	f1 2c       	mov	r15, r1
    18d2:	f0 2d       	mov	r31, r0
    18d4:	ec 0e       	add	r14, r28
    18d6:	fd 1e       	adc	r15, r29
    18d8:	e2 0c       	add	r14, r2
    18da:	f3 1c       	adc	r15, r3
    18dc:	f7 01       	movw	r30, r14
    18de:	80 81       	ld	r24, Z
    18e0:	a8 01       	movw	r20, r16
    18e2:	be 01       	movw	r22, r28
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 a1 0b 	call	0x1742	; 0x1742 <moveY>
			robot.posY = orderY[locations];
    18ee:	f7 01       	movw	r30, r14
    18f0:	80 81       	ld	r24, Z
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	3c 83       	std	Y+4, r19	; 0x04
    18f8:	2b 83       	std	Y+3, r18	; 0x03
			myCom->locationy = robot.posY;
    18fa:	f8 01       	movw	r30, r16
    18fc:	e1 59       	subi	r30, 0x91	; 145
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 83       	st	Z, r24
			play_from_program_space(sound);
    1902:	88 ea       	ldi	r24, 0xA8	; 168
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 44 13 	call	0x2688	; 0x2688 <play_from_program_space>
    190a:	88 ee       	ldi	r24, 0xE8	; 232
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
			delay(1000);//wait 1 second
			
			myCom->batterylvl = batteryPercentage();
    1912:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
    1916:	78 01       	movw	r14, r16
    1918:	fc e6       	ldi	r31, 0x6C	; 108
    191a:	ef 0e       	add	r14, r31
    191c:	f1 1c       	adc	r15, r1
    191e:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fixunssfsi>
    1922:	f7 01       	movw	r30, r14
    1924:	60 83       	st	Z, r22
			myCom->magprocess = (((completed+1)/total)*100);
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	c3 01       	movw	r24, r6
    1930:	b2 01       	movw	r22, r4
    1932:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__addsf3>
    1936:	a5 01       	movw	r20, r10
    1938:	94 01       	movw	r18, r8
    193a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__divsf3>
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	48 ec       	ldi	r20, 0xC8	; 200
    1944:	52 e4       	ldi	r21, 0x42	; 66
    1946:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__mulsf3>
    194a:	4b 01       	movw	r8, r22
    194c:	5c 01       	movw	r10, r24
    194e:	78 01       	movw	r14, r16
    1950:	fd e6       	ldi	r31, 0x6D	; 109
    1952:	ef 0e       	add	r14, r31
    1954:	f1 1c       	adc	r15, r1
    1956:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fixunssfsi>
    195a:	f7 01       	movw	r30, r14
    195c:	60 83       	st	Z, r22
			myCom->Update(myCom);
    195e:	34 96       	adiw	r30, 0x04	; 4
    1960:	01 90       	ld	r0, Z+
    1962:	f0 81       	ld	r31, Z
    1964:	e0 2d       	mov	r30, r0
    1966:	c8 01       	movw	r24, r16
    1968:	09 95       	icall
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
    196a:	0e 94 0f 03 	call	0x61e	; 0x61e <batteryPercentage>
    196e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
    1972:	2b 01       	movw	r4, r22
    1974:	3c 01       	movw	r6, r24
    1976:	c5 01       	movw	r24, r10
    1978:	b4 01       	movw	r22, r8
    197a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__fixsfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	42 e0       	ldi	r20, 0x02	; 2
    1984:	b2 01       	movw	r22, r4
    1986:	0e 94 31 03 	call	0x662	; 0x662 <updateDisplay>

    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
	{
		for(int locations = 0; locations<arraySize;locations++)
    198a:	ff ef       	ldi	r31, 0xFF	; 255
    198c:	2f 1a       	sub	r2, r31
    198e:	3f 0a       	sbc	r3, r31
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <warehouse+0x1f8>
    1992:	21 2c       	mov	r2, r1
    1994:	31 2c       	mov	r3, r1
    1996:	2c 14       	cp	r2, r12
    1998:	3d 04       	cpc	r3, r13
    199a:	0c f4       	brge	.+2      	; 0x199e <warehouse+0x200>
    199c:	68 cf       	rjmp	.-304    	; 0x186e <warehouse+0xd0>
			myCom->batterylvl = batteryPercentage();
			myCom->magprocess = (((completed+1)/total)*100);
			myCom->Update(myCom);
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
		}
		moveY(1, &robot, myCom);
    199e:	a8 01       	movw	r20, r16
    19a0:	be 01       	movw	r22, r28
    19a2:	6f 5f       	subi	r22, 0xFF	; 255
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	0e 94 a1 0b 	call	0x1742	; 0x1742 <moveY>
			moveX(1, &robot, myCom);
    19ae:	a8 01       	movw	r20, r16
    19b0:	be 01       	movw	r22, r28
    19b2:	6f 5f       	subi	r22, 0xFF	; 255
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <moveX>
    19be:	44 c0       	rjmp	.+136    	; 0x1a48 <warehouse+0x2aa>
			
	}
	else
	{
		static int charged = 0;
		if(charged == 0)
    19c0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <charged.2339>
    19c4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <charged.2339+0x1>
    19c8:	89 2b       	or	r24, r25
    19ca:	29 f5       	brne	.+74     	; 0x1a16 <warehouse+0x278>
		{
			drive(1, &robot, myCom);
    19cc:	a8 01       	movw	r20, r16
    19ce:	be 01       	movw	r22, r28
    19d0:	6f 5f       	subi	r22, 0xFF	; 255
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <drive>
			motorControl('R');
    19dc:	82 e5       	ldi	r24, 0x52	; 82
    19de:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
			drive(4, &robot, myCom);
    19e2:	a8 01       	movw	r20, r16
    19e4:	be 01       	movw	r22, r28
    19e6:	6f 5f       	subi	r22, 0xFF	; 255
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	84 e0       	ldi	r24, 0x04	; 4
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <drive>
			motorControl('R');
    19f2:	82 e5       	ldi	r24, 0x52	; 82
    19f4:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
			drive(1, &robot, myCom);
    19f8:	a8 01       	movw	r20, r16
    19fa:	be 01       	movw	r22, r28
    19fc:	6f 5f       	subi	r22, 0xFF	; 255
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <drive>
			charged = 1;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <charged.2339+0x1>
    1a10:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <charged.2339>
    1a14:	19 c0       	rjmp	.+50     	; 0x1a48 <warehouse+0x2aa>
		}
		else
		{
			motorControl('T');
    1a16:	84 e5       	ldi	r24, 0x54	; 84
    1a18:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
			drive(1, &robot, myCom);
    1a1c:	a8 01       	movw	r20, r16
    1a1e:	be 01       	movw	r22, r28
    1a20:	6f 5f       	subi	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <drive>
			motorControl('L');
    1a2c:	8c e4       	ldi	r24, 0x4C	; 76
    1a2e:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
			drive(4, &robot, myCom);
    1a32:	a8 01       	movw	r20, r16
    1a34:	be 01       	movw	r22, r28
    1a36:	6f 5f       	subi	r22, 0xFF	; 255
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	84 e0       	ldi	r24, 0x04	; 4
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <drive>
			motorControl('L');
    1a42:	8c e4       	ldi	r24, 0x4C	; 76
    1a44:	0e 94 03 06 	call	0xc06	; 0xc06 <motorControl>
		}
	}
}
    1a48:	e7 96       	adiw	r28, 0x37	; 55
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	7f 90       	pop	r7
    1a6e:	6f 90       	pop	r6
    1a70:	5f 90       	pop	r5
    1a72:	4f 90       	pop	r4
    1a74:	3f 90       	pop	r3
    1a76:	2f 90       	pop	r2
    1a78:	08 95       	ret

00001a7a <__subsf3>:
    1a7a:	50 58       	subi	r21, 0x80	; 128

00001a7c <__addsf3>:
    1a7c:	bb 27       	eor	r27, r27
    1a7e:	aa 27       	eor	r26, r26
    1a80:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <__addsf3x>
    1a84:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_round>
    1a88:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_pscA>
    1a8c:	38 f0       	brcs	.+14     	; 0x1a9c <__addsf3+0x20>
    1a8e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscB>
    1a92:	20 f0       	brcs	.+8      	; 0x1a9c <__addsf3+0x20>
    1a94:	39 f4       	brne	.+14     	; 0x1aa4 <__addsf3+0x28>
    1a96:	9f 3f       	cpi	r25, 0xFF	; 255
    1a98:	19 f4       	brne	.+6      	; 0x1aa0 <__addsf3+0x24>
    1a9a:	26 f4       	brtc	.+8      	; 0x1aa4 <__addsf3+0x28>
    1a9c:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__fp_nan>
    1aa0:	0e f4       	brtc	.+2      	; 0x1aa4 <__addsf3+0x28>
    1aa2:	e0 95       	com	r30
    1aa4:	e7 fb       	bst	r30, 7
    1aa6:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__fp_inf>

00001aaa <__addsf3x>:
    1aaa:	e9 2f       	mov	r30, r25
    1aac:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__fp_split3>
    1ab0:	58 f3       	brcs	.-42     	; 0x1a88 <__addsf3+0xc>
    1ab2:	ba 17       	cp	r27, r26
    1ab4:	62 07       	cpc	r22, r18
    1ab6:	73 07       	cpc	r23, r19
    1ab8:	84 07       	cpc	r24, r20
    1aba:	95 07       	cpc	r25, r21
    1abc:	20 f0       	brcs	.+8      	; 0x1ac6 <__addsf3x+0x1c>
    1abe:	79 f4       	brne	.+30     	; 0x1ade <__addsf3x+0x34>
    1ac0:	a6 f5       	brtc	.+104    	; 0x1b2a <__addsf3x+0x80>
    1ac2:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__fp_zero>
    1ac6:	0e f4       	brtc	.+2      	; 0x1aca <__addsf3x+0x20>
    1ac8:	e0 95       	com	r30
    1aca:	0b 2e       	mov	r0, r27
    1acc:	ba 2f       	mov	r27, r26
    1ace:	a0 2d       	mov	r26, r0
    1ad0:	0b 01       	movw	r0, r22
    1ad2:	b9 01       	movw	r22, r18
    1ad4:	90 01       	movw	r18, r0
    1ad6:	0c 01       	movw	r0, r24
    1ad8:	ca 01       	movw	r24, r20
    1ada:	a0 01       	movw	r20, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	ff 27       	eor	r31, r31
    1ae0:	59 1b       	sub	r21, r25
    1ae2:	99 f0       	breq	.+38     	; 0x1b0a <__addsf3x+0x60>
    1ae4:	59 3f       	cpi	r21, 0xF9	; 249
    1ae6:	50 f4       	brcc	.+20     	; 0x1afc <__addsf3x+0x52>
    1ae8:	50 3e       	cpi	r21, 0xE0	; 224
    1aea:	68 f1       	brcs	.+90     	; 0x1b46 <__addsf3x+0x9c>
    1aec:	1a 16       	cp	r1, r26
    1aee:	f0 40       	sbci	r31, 0x00	; 0
    1af0:	a2 2f       	mov	r26, r18
    1af2:	23 2f       	mov	r18, r19
    1af4:	34 2f       	mov	r19, r20
    1af6:	44 27       	eor	r20, r20
    1af8:	58 5f       	subi	r21, 0xF8	; 248
    1afa:	f3 cf       	rjmp	.-26     	; 0x1ae2 <__addsf3x+0x38>
    1afc:	46 95       	lsr	r20
    1afe:	37 95       	ror	r19
    1b00:	27 95       	ror	r18
    1b02:	a7 95       	ror	r26
    1b04:	f0 40       	sbci	r31, 0x00	; 0
    1b06:	53 95       	inc	r21
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__addsf3x+0x52>
    1b0a:	7e f4       	brtc	.+30     	; 0x1b2a <__addsf3x+0x80>
    1b0c:	1f 16       	cp	r1, r31
    1b0e:	ba 0b       	sbc	r27, r26
    1b10:	62 0b       	sbc	r22, r18
    1b12:	73 0b       	sbc	r23, r19
    1b14:	84 0b       	sbc	r24, r20
    1b16:	ba f0       	brmi	.+46     	; 0x1b46 <__addsf3x+0x9c>
    1b18:	91 50       	subi	r25, 0x01	; 1
    1b1a:	a1 f0       	breq	.+40     	; 0x1b44 <__addsf3x+0x9a>
    1b1c:	ff 0f       	add	r31, r31
    1b1e:	bb 1f       	adc	r27, r27
    1b20:	66 1f       	adc	r22, r22
    1b22:	77 1f       	adc	r23, r23
    1b24:	88 1f       	adc	r24, r24
    1b26:	c2 f7       	brpl	.-16     	; 0x1b18 <__addsf3x+0x6e>
    1b28:	0e c0       	rjmp	.+28     	; 0x1b46 <__addsf3x+0x9c>
    1b2a:	ba 0f       	add	r27, r26
    1b2c:	62 1f       	adc	r22, r18
    1b2e:	73 1f       	adc	r23, r19
    1b30:	84 1f       	adc	r24, r20
    1b32:	48 f4       	brcc	.+18     	; 0x1b46 <__addsf3x+0x9c>
    1b34:	87 95       	ror	r24
    1b36:	77 95       	ror	r23
    1b38:	67 95       	ror	r22
    1b3a:	b7 95       	ror	r27
    1b3c:	f7 95       	ror	r31
    1b3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <__addsf3x+0x9a>
    1b42:	b0 cf       	rjmp	.-160    	; 0x1aa4 <__addsf3+0x28>
    1b44:	93 95       	inc	r25
    1b46:	88 0f       	add	r24, r24
    1b48:	08 f0       	brcs	.+2      	; 0x1b4c <__addsf3x+0xa2>
    1b4a:	99 27       	eor	r25, r25
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	97 95       	ror	r25
    1b50:	87 95       	ror	r24
    1b52:	08 95       	ret

00001b54 <__divsf3>:
    1b54:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <__divsf3x>
    1b58:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_round>
    1b5c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscB>
    1b60:	58 f0       	brcs	.+22     	; 0x1b78 <__divsf3+0x24>
    1b62:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_pscA>
    1b66:	40 f0       	brcs	.+16     	; 0x1b78 <__divsf3+0x24>
    1b68:	29 f4       	brne	.+10     	; 0x1b74 <__divsf3+0x20>
    1b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6c:	29 f0       	breq	.+10     	; 0x1b78 <__divsf3+0x24>
    1b6e:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__fp_inf>
    1b72:	51 11       	cpse	r21, r1
    1b74:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>
    1b78:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__fp_nan>

00001b7c <__divsf3x>:
    1b7c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__fp_split3>
    1b80:	68 f3       	brcs	.-38     	; 0x1b5c <__divsf3+0x8>

00001b82 <__divsf3_pse>:
    1b82:	99 23       	and	r25, r25
    1b84:	b1 f3       	breq	.-20     	; 0x1b72 <__divsf3+0x1e>
    1b86:	55 23       	and	r21, r21
    1b88:	91 f3       	breq	.-28     	; 0x1b6e <__divsf3+0x1a>
    1b8a:	95 1b       	sub	r25, r21
    1b8c:	55 0b       	sbc	r21, r21
    1b8e:	bb 27       	eor	r27, r27
    1b90:	aa 27       	eor	r26, r26
    1b92:	62 17       	cp	r22, r18
    1b94:	73 07       	cpc	r23, r19
    1b96:	84 07       	cpc	r24, r20
    1b98:	38 f0       	brcs	.+14     	; 0x1ba8 <__divsf3_pse+0x26>
    1b9a:	9f 5f       	subi	r25, 0xFF	; 255
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9e:	22 0f       	add	r18, r18
    1ba0:	33 1f       	adc	r19, r19
    1ba2:	44 1f       	adc	r20, r20
    1ba4:	aa 1f       	adc	r26, r26
    1ba6:	a9 f3       	breq	.-22     	; 0x1b92 <__divsf3_pse+0x10>
    1ba8:	35 d0       	rcall	.+106    	; 0x1c14 <__divsf3_pse+0x92>
    1baa:	0e 2e       	mov	r0, r30
    1bac:	3a f0       	brmi	.+14     	; 0x1bbc <__divsf3_pse+0x3a>
    1bae:	e0 e8       	ldi	r30, 0x80	; 128
    1bb0:	32 d0       	rcall	.+100    	; 0x1c16 <__divsf3_pse+0x94>
    1bb2:	91 50       	subi	r25, 0x01	; 1
    1bb4:	50 40       	sbci	r21, 0x00	; 0
    1bb6:	e6 95       	lsr	r30
    1bb8:	00 1c       	adc	r0, r0
    1bba:	ca f7       	brpl	.-14     	; 0x1bae <__divsf3_pse+0x2c>
    1bbc:	2b d0       	rcall	.+86     	; 0x1c14 <__divsf3_pse+0x92>
    1bbe:	fe 2f       	mov	r31, r30
    1bc0:	29 d0       	rcall	.+82     	; 0x1c14 <__divsf3_pse+0x92>
    1bc2:	66 0f       	add	r22, r22
    1bc4:	77 1f       	adc	r23, r23
    1bc6:	88 1f       	adc	r24, r24
    1bc8:	bb 1f       	adc	r27, r27
    1bca:	26 17       	cp	r18, r22
    1bcc:	37 07       	cpc	r19, r23
    1bce:	48 07       	cpc	r20, r24
    1bd0:	ab 07       	cpc	r26, r27
    1bd2:	b0 e8       	ldi	r27, 0x80	; 128
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <__divsf3_pse+0x56>
    1bd6:	bb 0b       	sbc	r27, r27
    1bd8:	80 2d       	mov	r24, r0
    1bda:	bf 01       	movw	r22, r30
    1bdc:	ff 27       	eor	r31, r31
    1bde:	93 58       	subi	r25, 0x83	; 131
    1be0:	5f 4f       	sbci	r21, 0xFF	; 255
    1be2:	3a f0       	brmi	.+14     	; 0x1bf2 <__divsf3_pse+0x70>
    1be4:	9e 3f       	cpi	r25, 0xFE	; 254
    1be6:	51 05       	cpc	r21, r1
    1be8:	78 f0       	brcs	.+30     	; 0x1c08 <__divsf3_pse+0x86>
    1bea:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__fp_inf>
    1bee:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>
    1bf2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf4:	e4 f3       	brlt	.-8      	; 0x1bee <__divsf3_pse+0x6c>
    1bf6:	98 3e       	cpi	r25, 0xE8	; 232
    1bf8:	d4 f3       	brlt	.-12     	; 0x1bee <__divsf3_pse+0x6c>
    1bfa:	86 95       	lsr	r24
    1bfc:	77 95       	ror	r23
    1bfe:	67 95       	ror	r22
    1c00:	b7 95       	ror	r27
    1c02:	f7 95       	ror	r31
    1c04:	9f 5f       	subi	r25, 0xFF	; 255
    1c06:	c9 f7       	brne	.-14     	; 0x1bfa <__divsf3_pse+0x78>
    1c08:	88 0f       	add	r24, r24
    1c0a:	91 1d       	adc	r25, r1
    1c0c:	96 95       	lsr	r25
    1c0e:	87 95       	ror	r24
    1c10:	97 f9       	bld	r25, 7
    1c12:	08 95       	ret
    1c14:	e1 e0       	ldi	r30, 0x01	; 1
    1c16:	66 0f       	add	r22, r22
    1c18:	77 1f       	adc	r23, r23
    1c1a:	88 1f       	adc	r24, r24
    1c1c:	bb 1f       	adc	r27, r27
    1c1e:	62 17       	cp	r22, r18
    1c20:	73 07       	cpc	r23, r19
    1c22:	84 07       	cpc	r24, r20
    1c24:	ba 07       	cpc	r27, r26
    1c26:	20 f0       	brcs	.+8      	; 0x1c30 <__divsf3_pse+0xae>
    1c28:	62 1b       	sub	r22, r18
    1c2a:	73 0b       	sbc	r23, r19
    1c2c:	84 0b       	sbc	r24, r20
    1c2e:	ba 0b       	sbc	r27, r26
    1c30:	ee 1f       	adc	r30, r30
    1c32:	88 f7       	brcc	.-30     	; 0x1c16 <__divsf3_pse+0x94>
    1c34:	e0 95       	com	r30
    1c36:	08 95       	ret

00001c38 <__fixsfsi>:
    1c38:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fixunssfsi>
    1c3c:	68 94       	set
    1c3e:	b1 11       	cpse	r27, r1
    1c40:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>
    1c44:	08 95       	ret

00001c46 <__fixunssfsi>:
    1c46:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_splitA>
    1c4a:	88 f0       	brcs	.+34     	; 0x1c6e <__fixunssfsi+0x28>
    1c4c:	9f 57       	subi	r25, 0x7F	; 127
    1c4e:	98 f0       	brcs	.+38     	; 0x1c76 <__fixunssfsi+0x30>
    1c50:	b9 2f       	mov	r27, r25
    1c52:	99 27       	eor	r25, r25
    1c54:	b7 51       	subi	r27, 0x17	; 23
    1c56:	b0 f0       	brcs	.+44     	; 0x1c84 <__fixunssfsi+0x3e>
    1c58:	e1 f0       	breq	.+56     	; 0x1c92 <__fixunssfsi+0x4c>
    1c5a:	66 0f       	add	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	88 1f       	adc	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	1a f0       	brmi	.+6      	; 0x1c6a <__fixunssfsi+0x24>
    1c64:	ba 95       	dec	r27
    1c66:	c9 f7       	brne	.-14     	; 0x1c5a <__fixunssfsi+0x14>
    1c68:	14 c0       	rjmp	.+40     	; 0x1c92 <__fixunssfsi+0x4c>
    1c6a:	b1 30       	cpi	r27, 0x01	; 1
    1c6c:	91 f0       	breq	.+36     	; 0x1c92 <__fixunssfsi+0x4c>
    1c6e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__fp_zero>
    1c72:	b1 e0       	ldi	r27, 0x01	; 1
    1c74:	08 95       	ret
    1c76:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__fp_zero>
    1c7a:	67 2f       	mov	r22, r23
    1c7c:	78 2f       	mov	r23, r24
    1c7e:	88 27       	eor	r24, r24
    1c80:	b8 5f       	subi	r27, 0xF8	; 248
    1c82:	39 f0       	breq	.+14     	; 0x1c92 <__fixunssfsi+0x4c>
    1c84:	b9 3f       	cpi	r27, 0xF9	; 249
    1c86:	cc f3       	brlt	.-14     	; 0x1c7a <__fixunssfsi+0x34>
    1c88:	86 95       	lsr	r24
    1c8a:	77 95       	ror	r23
    1c8c:	67 95       	ror	r22
    1c8e:	b3 95       	inc	r27
    1c90:	d9 f7       	brne	.-10     	; 0x1c88 <__fixunssfsi+0x42>
    1c92:	3e f4       	brtc	.+14     	; 0x1ca2 <__fixunssfsi+0x5c>
    1c94:	90 95       	com	r25
    1c96:	80 95       	com	r24
    1c98:	70 95       	com	r23
    1c9a:	61 95       	neg	r22
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca2:	08 95       	ret

00001ca4 <__floatunsisf>:
    1ca4:	e8 94       	clt
    1ca6:	09 c0       	rjmp	.+18     	; 0x1cba <__floatsisf+0x12>

00001ca8 <__floatsisf>:
    1ca8:	97 fb       	bst	r25, 7
    1caa:	3e f4       	brtc	.+14     	; 0x1cba <__floatsisf+0x12>
    1cac:	90 95       	com	r25
    1cae:	80 95       	com	r24
    1cb0:	70 95       	com	r23
    1cb2:	61 95       	neg	r22
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	99 23       	and	r25, r25
    1cbc:	a9 f0       	breq	.+42     	; 0x1ce8 <__floatsisf+0x40>
    1cbe:	f9 2f       	mov	r31, r25
    1cc0:	96 e9       	ldi	r25, 0x96	; 150
    1cc2:	bb 27       	eor	r27, r27
    1cc4:	93 95       	inc	r25
    1cc6:	f6 95       	lsr	r31
    1cc8:	87 95       	ror	r24
    1cca:	77 95       	ror	r23
    1ccc:	67 95       	ror	r22
    1cce:	b7 95       	ror	r27
    1cd0:	f1 11       	cpse	r31, r1
    1cd2:	f8 cf       	rjmp	.-16     	; 0x1cc4 <__floatsisf+0x1c>
    1cd4:	fa f4       	brpl	.+62     	; 0x1d14 <__floatsisf+0x6c>
    1cd6:	bb 0f       	add	r27, r27
    1cd8:	11 f4       	brne	.+4      	; 0x1cde <__floatsisf+0x36>
    1cda:	60 ff       	sbrs	r22, 0
    1cdc:	1b c0       	rjmp	.+54     	; 0x1d14 <__floatsisf+0x6c>
    1cde:	6f 5f       	subi	r22, 0xFF	; 255
    1ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce6:	16 c0       	rjmp	.+44     	; 0x1d14 <__floatsisf+0x6c>
    1ce8:	88 23       	and	r24, r24
    1cea:	11 f0       	breq	.+4      	; 0x1cf0 <__floatsisf+0x48>
    1cec:	96 e9       	ldi	r25, 0x96	; 150
    1cee:	11 c0       	rjmp	.+34     	; 0x1d12 <__floatsisf+0x6a>
    1cf0:	77 23       	and	r23, r23
    1cf2:	21 f0       	breq	.+8      	; 0x1cfc <__floatsisf+0x54>
    1cf4:	9e e8       	ldi	r25, 0x8E	; 142
    1cf6:	87 2f       	mov	r24, r23
    1cf8:	76 2f       	mov	r23, r22
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <__floatsisf+0x5e>
    1cfc:	66 23       	and	r22, r22
    1cfe:	71 f0       	breq	.+28     	; 0x1d1c <__floatsisf+0x74>
    1d00:	96 e8       	ldi	r25, 0x86	; 134
    1d02:	86 2f       	mov	r24, r22
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	2a f0       	brmi	.+10     	; 0x1d14 <__floatsisf+0x6c>
    1d0a:	9a 95       	dec	r25
    1d0c:	66 0f       	add	r22, r22
    1d0e:	77 1f       	adc	r23, r23
    1d10:	88 1f       	adc	r24, r24
    1d12:	da f7       	brpl	.-10     	; 0x1d0a <__floatsisf+0x62>
    1d14:	88 0f       	add	r24, r24
    1d16:	96 95       	lsr	r25
    1d18:	87 95       	ror	r24
    1d1a:	97 f9       	bld	r25, 7
    1d1c:	08 95       	ret

00001d1e <__fp_inf>:
    1d1e:	97 f9       	bld	r25, 7
    1d20:	9f 67       	ori	r25, 0x7F	; 127
    1d22:	80 e8       	ldi	r24, 0x80	; 128
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	08 95       	ret

00001d2a <__fp_nan>:
    1d2a:	9f ef       	ldi	r25, 0xFF	; 255
    1d2c:	80 ec       	ldi	r24, 0xC0	; 192
    1d2e:	08 95       	ret

00001d30 <__fp_pscA>:
    1d30:	00 24       	eor	r0, r0
    1d32:	0a 94       	dec	r0
    1d34:	16 16       	cp	r1, r22
    1d36:	17 06       	cpc	r1, r23
    1d38:	18 06       	cpc	r1, r24
    1d3a:	09 06       	cpc	r0, r25
    1d3c:	08 95       	ret

00001d3e <__fp_pscB>:
    1d3e:	00 24       	eor	r0, r0
    1d40:	0a 94       	dec	r0
    1d42:	12 16       	cp	r1, r18
    1d44:	13 06       	cpc	r1, r19
    1d46:	14 06       	cpc	r1, r20
    1d48:	05 06       	cpc	r0, r21
    1d4a:	08 95       	ret

00001d4c <__fp_round>:
    1d4c:	09 2e       	mov	r0, r25
    1d4e:	03 94       	inc	r0
    1d50:	00 0c       	add	r0, r0
    1d52:	11 f4       	brne	.+4      	; 0x1d58 <__fp_round+0xc>
    1d54:	88 23       	and	r24, r24
    1d56:	52 f0       	brmi	.+20     	; 0x1d6c <__fp_round+0x20>
    1d58:	bb 0f       	add	r27, r27
    1d5a:	40 f4       	brcc	.+16     	; 0x1d6c <__fp_round+0x20>
    1d5c:	bf 2b       	or	r27, r31
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <__fp_round+0x18>
    1d60:	60 ff       	sbrs	r22, 0
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <__fp_round+0x20>
    1d64:	6f 5f       	subi	r22, 0xFF	; 255
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	08 95       	ret

00001d6e <__fp_split3>:
    1d6e:	57 fd       	sbrc	r21, 7
    1d70:	90 58       	subi	r25, 0x80	; 128
    1d72:	44 0f       	add	r20, r20
    1d74:	55 1f       	adc	r21, r21
    1d76:	59 f0       	breq	.+22     	; 0x1d8e <__fp_splitA+0x10>
    1d78:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7a:	71 f0       	breq	.+28     	; 0x1d98 <__fp_splitA+0x1a>
    1d7c:	47 95       	ror	r20

00001d7e <__fp_splitA>:
    1d7e:	88 0f       	add	r24, r24
    1d80:	97 fb       	bst	r25, 7
    1d82:	99 1f       	adc	r25, r25
    1d84:	61 f0       	breq	.+24     	; 0x1d9e <__fp_splitA+0x20>
    1d86:	9f 3f       	cpi	r25, 0xFF	; 255
    1d88:	79 f0       	breq	.+30     	; 0x1da8 <__fp_splitA+0x2a>
    1d8a:	87 95       	ror	r24
    1d8c:	08 95       	ret
    1d8e:	12 16       	cp	r1, r18
    1d90:	13 06       	cpc	r1, r19
    1d92:	14 06       	cpc	r1, r20
    1d94:	55 1f       	adc	r21, r21
    1d96:	f2 cf       	rjmp	.-28     	; 0x1d7c <__fp_split3+0xe>
    1d98:	46 95       	lsr	r20
    1d9a:	f1 df       	rcall	.-30     	; 0x1d7e <__fp_splitA>
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <__fp_splitA+0x30>
    1d9e:	16 16       	cp	r1, r22
    1da0:	17 06       	cpc	r1, r23
    1da2:	18 06       	cpc	r1, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	f1 cf       	rjmp	.-30     	; 0x1d8a <__fp_splitA+0xc>
    1da8:	86 95       	lsr	r24
    1daa:	71 05       	cpc	r23, r1
    1dac:	61 05       	cpc	r22, r1
    1dae:	08 94       	sec
    1db0:	08 95       	ret

00001db2 <__fp_zero>:
    1db2:	e8 94       	clt

00001db4 <__fp_szero>:
    1db4:	bb 27       	eor	r27, r27
    1db6:	66 27       	eor	r22, r22
    1db8:	77 27       	eor	r23, r23
    1dba:	cb 01       	movw	r24, r22
    1dbc:	97 f9       	bld	r25, 7
    1dbe:	08 95       	ret

00001dc0 <__mulsf3>:
    1dc0:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3x>
    1dc4:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_round>
    1dc8:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_pscA>
    1dcc:	38 f0       	brcs	.+14     	; 0x1ddc <__mulsf3+0x1c>
    1dce:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscB>
    1dd2:	20 f0       	brcs	.+8      	; 0x1ddc <__mulsf3+0x1c>
    1dd4:	95 23       	and	r25, r21
    1dd6:	11 f0       	breq	.+4      	; 0x1ddc <__mulsf3+0x1c>
    1dd8:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__fp_inf>
    1ddc:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <__fp_nan>
    1de0:	11 24       	eor	r1, r1
    1de2:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>

00001de6 <__mulsf3x>:
    1de6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__fp_split3>
    1dea:	70 f3       	brcs	.-36     	; 0x1dc8 <__mulsf3+0x8>

00001dec <__mulsf3_pse>:
    1dec:	95 9f       	mul	r25, r21
    1dee:	c1 f3       	breq	.-16     	; 0x1de0 <__mulsf3+0x20>
    1df0:	95 0f       	add	r25, r21
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	55 1f       	adc	r21, r21
    1df6:	62 9f       	mul	r22, r18
    1df8:	f0 01       	movw	r30, r0
    1dfa:	72 9f       	mul	r23, r18
    1dfc:	bb 27       	eor	r27, r27
    1dfe:	f0 0d       	add	r31, r0
    1e00:	b1 1d       	adc	r27, r1
    1e02:	63 9f       	mul	r22, r19
    1e04:	aa 27       	eor	r26, r26
    1e06:	f0 0d       	add	r31, r0
    1e08:	b1 1d       	adc	r27, r1
    1e0a:	aa 1f       	adc	r26, r26
    1e0c:	64 9f       	mul	r22, r20
    1e0e:	66 27       	eor	r22, r22
    1e10:	b0 0d       	add	r27, r0
    1e12:	a1 1d       	adc	r26, r1
    1e14:	66 1f       	adc	r22, r22
    1e16:	82 9f       	mul	r24, r18
    1e18:	22 27       	eor	r18, r18
    1e1a:	b0 0d       	add	r27, r0
    1e1c:	a1 1d       	adc	r26, r1
    1e1e:	62 1f       	adc	r22, r18
    1e20:	73 9f       	mul	r23, r19
    1e22:	b0 0d       	add	r27, r0
    1e24:	a1 1d       	adc	r26, r1
    1e26:	62 1f       	adc	r22, r18
    1e28:	83 9f       	mul	r24, r19
    1e2a:	a0 0d       	add	r26, r0
    1e2c:	61 1d       	adc	r22, r1
    1e2e:	22 1f       	adc	r18, r18
    1e30:	74 9f       	mul	r23, r20
    1e32:	33 27       	eor	r19, r19
    1e34:	a0 0d       	add	r26, r0
    1e36:	61 1d       	adc	r22, r1
    1e38:	23 1f       	adc	r18, r19
    1e3a:	84 9f       	mul	r24, r20
    1e3c:	60 0d       	add	r22, r0
    1e3e:	21 1d       	adc	r18, r1
    1e40:	82 2f       	mov	r24, r18
    1e42:	76 2f       	mov	r23, r22
    1e44:	6a 2f       	mov	r22, r26
    1e46:	11 24       	eor	r1, r1
    1e48:	9f 57       	subi	r25, 0x7F	; 127
    1e4a:	50 40       	sbci	r21, 0x00	; 0
    1e4c:	9a f0       	brmi	.+38     	; 0x1e74 <__mulsf3_pse+0x88>
    1e4e:	f1 f0       	breq	.+60     	; 0x1e8c <__mulsf3_pse+0xa0>
    1e50:	88 23       	and	r24, r24
    1e52:	4a f0       	brmi	.+18     	; 0x1e66 <__mulsf3_pse+0x7a>
    1e54:	ee 0f       	add	r30, r30
    1e56:	ff 1f       	adc	r31, r31
    1e58:	bb 1f       	adc	r27, r27
    1e5a:	66 1f       	adc	r22, r22
    1e5c:	77 1f       	adc	r23, r23
    1e5e:	88 1f       	adc	r24, r24
    1e60:	91 50       	subi	r25, 0x01	; 1
    1e62:	50 40       	sbci	r21, 0x00	; 0
    1e64:	a9 f7       	brne	.-22     	; 0x1e50 <__mulsf3_pse+0x64>
    1e66:	9e 3f       	cpi	r25, 0xFE	; 254
    1e68:	51 05       	cpc	r21, r1
    1e6a:	80 f0       	brcs	.+32     	; 0x1e8c <__mulsf3_pse+0xa0>
    1e6c:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__fp_inf>
    1e70:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>
    1e74:	5f 3f       	cpi	r21, 0xFF	; 255
    1e76:	e4 f3       	brlt	.-8      	; 0x1e70 <__mulsf3_pse+0x84>
    1e78:	98 3e       	cpi	r25, 0xE8	; 232
    1e7a:	d4 f3       	brlt	.-12     	; 0x1e70 <__mulsf3_pse+0x84>
    1e7c:	86 95       	lsr	r24
    1e7e:	77 95       	ror	r23
    1e80:	67 95       	ror	r22
    1e82:	b7 95       	ror	r27
    1e84:	f7 95       	ror	r31
    1e86:	e7 95       	ror	r30
    1e88:	9f 5f       	subi	r25, 0xFF	; 255
    1e8a:	c1 f7       	brne	.-16     	; 0x1e7c <__mulsf3_pse+0x90>
    1e8c:	fe 2b       	or	r31, r30
    1e8e:	88 0f       	add	r24, r24
    1e90:	91 1d       	adc	r25, r1
    1e92:	96 95       	lsr	r25
    1e94:	87 95       	ror	r24
    1e96:	97 f9       	bld	r25, 7
    1e98:	08 95       	ret

00001e9a <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1e9a:	ec e7       	ldi	r30, 0x7C	; 124
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8f 7d       	andi	r24, 0xDF	; 223
    1ea2:	80 83       	st	Z, r24
    1ea4:	08 95       	ret

00001ea6 <_ZN15OrangutanAnalog7setModeEh>:
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1eaa:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <_ZN15OrangutanAnalog7setModeEh.part.0>
    1eae:	08 95       	ret
    1eb0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1eb4:	80 62       	ori	r24, 0x20	; 32
    1eb6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1eba:	08 95       	ret

00001ebc <_ZN15OrangutanAnalog7getModeEv>:
    1ebc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1ec0:	85 fb       	bst	r24, 5
    1ec2:	88 27       	eor	r24, r24
    1ec4:	80 f9       	bld	r24, 0
    1ec6:	08 95       	ret

00001ec8 <_ZN15OrangutanAnalog16conversionResultEv>:
    1ec8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_ZN15OrangutanAnalog7getModeEv>
    1ecc:	88 23       	and	r24, r24
    1ece:	21 f0       	breq	.+8      	; 0x1ed8 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1ed0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	08 95       	ret
    1ed8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1edc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1ee0:	08 95       	ret

00001ee2 <_ZN15OrangutanAnalog15startConversionEhh>:
    1ee2:	80 32       	cpi	r24, 0x20	; 32
    1ee4:	a0 f4       	brcc	.+40     	; 0x1f0e <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1ee6:	97 e8       	ldi	r25, 0x87	; 135
    1ee8:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1eec:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1ef0:	66 23       	and	r22, r22
    1ef2:	11 f0       	breq	.+4      	; 0x1ef8 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1ef4:	90 6c       	ori	r25, 0xC0	; 192
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1ef8:	9f 77       	andi	r25, 0x7F	; 127
    1efa:	90 64       	ori	r25, 0x40	; 64
    1efc:	90 7e       	andi	r25, 0xE0	; 224
    1efe:	98 2b       	or	r25, r24
    1f00:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1f04:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1f08:	80 64       	ori	r24, 0x40	; 64
    1f0a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1f0e:	08 95       	ret

00001f10 <_ZN15OrangutanAnalog4readEh>:
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <_ZN15OrangutanAnalog15startConversionEhh>
    1f16:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1f1a:	86 fd       	sbrc	r24, 6
    1f1c:	fc cf       	rjmp	.-8      	; 0x1f16 <_ZN15OrangutanAnalog4readEh+0x6>
    1f1e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN15OrangutanAnalog16conversionResultEv>
    1f22:	08 95       	ret

00001f24 <analog_read>:
    1f24:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZN15OrangutanAnalog4readEh>
    1f28:	08 95       	ret

00001f2a <_ZN15OrangutanAnalog11readAverageEhj>:
    1f2a:	a0 e0       	ldi	r26, 0x00	; 0
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	eb e9       	ldi	r30, 0x9B	; 155
    1f30:	ff e0       	ldi	r31, 0x0F	; 15
    1f32:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x14>
    1f36:	eb 01       	movw	r28, r22
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <_ZN15OrangutanAnalog15startConversionEhh>
    1f3e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1f42:	86 fd       	sbrc	r24, 6
    1f44:	fc cf       	rjmp	.-8      	; 0x1f3e <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1f46:	8e 01       	movw	r16, r28
    1f48:	c1 2c       	mov	r12, r1
    1f4a:	d1 2c       	mov	r13, r1
    1f4c:	76 01       	movw	r14, r12
    1f4e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1f58:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1f5c:	86 fd       	sbrc	r24, 6
    1f5e:	fc cf       	rjmp	.-8      	; 0x1f58 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1f60:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_ZN15OrangutanAnalog16conversionResultEv>
    1f64:	c8 0e       	add	r12, r24
    1f66:	d9 1e       	adc	r13, r25
    1f68:	e1 1c       	adc	r14, r1
    1f6a:	f1 1c       	adc	r15, r1
    1f6c:	01 50       	subi	r16, 0x01	; 1
    1f6e:	11 09       	sbc	r17, r1
    1f70:	01 15       	cp	r16, r1
    1f72:	11 05       	cpc	r17, r1
    1f74:	61 f7       	brne	.-40     	; 0x1f4e <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1f76:	ce 01       	movw	r24, r28
    1f78:	96 95       	lsr	r25
    1f7a:	87 95       	ror	r24
    1f7c:	c0 34       	cpi	r28, 0x40	; 64
    1f7e:	d1 05       	cpc	r29, r1
    1f80:	38 f4       	brcc	.+14     	; 0x1f90 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1f82:	8c 0d       	add	r24, r12
    1f84:	9d 1d       	adc	r25, r13
    1f86:	be 01       	movw	r22, r28
    1f88:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__udivmodhi4>
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	0e c0       	rjmp	.+28     	; 0x1fac <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1f90:	a7 01       	movw	r20, r14
    1f92:	96 01       	movw	r18, r12
    1f94:	28 0f       	add	r18, r24
    1f96:	39 1f       	adc	r19, r25
    1f98:	41 1d       	adc	r20, r1
    1f9a:	51 1d       	adc	r21, r1
    1f9c:	ca 01       	movw	r24, r20
    1f9e:	b9 01       	movw	r22, r18
    1fa0:	9e 01       	movw	r18, r28
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodsi4>
    1faa:	c9 01       	movw	r24, r18
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	e8 e0       	ldi	r30, 0x08	; 8
    1fb2:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x14>

00001fb6 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1fb6:	cf 92       	push	r12
    1fb8:	df 92       	push	r13
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1fc2:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1fc6:	9c 01       	movw	r18, r24
    1fc8:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__umulhisi3>
    1fcc:	6b 01       	movw	r12, r22
    1fce:	7c 01       	movw	r14, r24
    1fd0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_ZN15OrangutanAnalog7getModeEv>
    1fd4:	88 23       	and	r24, r24
    1fd6:	59 f0       	breq	.+22     	; 0x1fee <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1fd8:	c7 01       	movw	r24, r14
    1fda:	b6 01       	movw	r22, r12
    1fdc:	61 58       	subi	r22, 0x81	; 129
    1fde:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	2f ef       	ldi	r18, 0xFF	; 255
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	0a c0       	rjmp	.+20     	; 0x2002 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1fee:	c7 01       	movw	r24, r14
    1ff0:	b6 01       	movw	r22, r12
    1ff2:	61 50       	subi	r22, 0x01	; 1
    1ff4:	7e 4f       	sbci	r23, 0xFE	; 254
    1ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	2f ef       	ldi	r18, 0xFF	; 255
    1ffc:	33 e0       	ldi	r19, 0x03	; 3
    1ffe:	40 e0       	ldi	r20, 0x00	; 0
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodsi4>
    2006:	c9 01       	movw	r24, r18
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	08 95       	ret

00002012 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    2012:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <_ZN15OrangutanAnalog11readAverageEhj>
    2016:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <_ZN15OrangutanAnalog12toMillivoltsEj>
    201a:	08 95       	ret

0000201c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <_ZN15OrangutanAnalog7getModeEv>
    2026:	18 2f       	mov	r17, r24
    2028:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <_ZN15OrangutanAnalog7setModeEh.part.0>
    202c:	6a e0       	ldi	r22, 0x0A	; 10
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	86 e0       	ldi	r24, 0x06	; 6
    2032:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    2036:	ec 01       	movw	r28, r24
    2038:	81 2f       	mov	r24, r17
    203a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN15OrangutanAnalog7setModeEh>
    203e:	ce 01       	movw	r24, r28
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	8c 0f       	add	r24, r28
    2046:	9d 1f       	adc	r25, r29
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	96 95       	lsr	r25
    204c:	87 95       	ror	r24
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	08 95       	ret

00002056 <read_battery_millivolts_3pi>:
    2056:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    205a:	08 95       	ret

0000205c <_ZL16currentCharacterv>:
    205c:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <_ZL17use_program_space>
    2060:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <__data_end>
    2064:	f0 91 9b 01 	lds	r31, 0x019B	; 0x80019b <__data_end+0x1>
    2068:	99 23       	and	r25, r25
    206a:	11 f0       	breq	.+4      	; 0x2070 <_ZL16currentCharacterv+0x14>
    206c:	84 91       	lpm	r24, Z
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <_ZL16currentCharacterv+0x16>
    2070:	80 81       	ld	r24, Z
    2072:	2f eb       	ldi	r18, 0xBF	; 191
    2074:	28 0f       	add	r18, r24
    2076:	2a 31       	cpi	r18, 0x1A	; 26
    2078:	10 f4       	brcc	.+4      	; 0x207e <_ZL16currentCharacterv+0x22>
    207a:	80 5e       	subi	r24, 0xE0	; 224
    207c:	08 95       	ret
    207e:	80 32       	cpi	r24, 0x20	; 32
    2080:	49 f4       	brne	.+18     	; 0x2094 <_ZL16currentCharacterv+0x38>
    2082:	9f 01       	movw	r18, r30
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <__data_end+0x1>
    208c:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <__data_end>
    2090:	ef 2b       	or	r30, r31
    2092:	31 f7       	brne	.-52     	; 0x2060 <_ZL16currentCharacterv+0x4>
    2094:	08 95       	ret

00002096 <_ZL9getNumberv>:
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZL16currentCharacterv>
    20a0:	c0 e0       	ldi	r28, 0x00	; 0
    20a2:	d0 e0       	ldi	r29, 0x00	; 0
    20a4:	1a e0       	ldi	r17, 0x0A	; 10
    20a6:	90 ed       	ldi	r25, 0xD0	; 208
    20a8:	98 0f       	add	r25, r24
    20aa:	9a 30       	cpi	r25, 0x0A	; 10
    20ac:	b8 f4       	brcc	.+46     	; 0x20dc <_ZL9getNumberv+0x46>
    20ae:	9e 01       	movw	r18, r28
    20b0:	12 9f       	mul	r17, r18
    20b2:	e0 01       	movw	r28, r0
    20b4:	13 9f       	mul	r17, r19
    20b6:	d0 0d       	add	r29, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	c8 0f       	add	r28, r24
    20bc:	d1 1d       	adc	r29, r1
    20be:	87 fd       	sbrc	r24, 7
    20c0:	da 95       	dec	r29
    20c2:	e0 97       	sbiw	r28, 0x30	; 48
    20c4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    20c8:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
    20d2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
    20d6:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZL16currentCharacterv>
    20da:	e5 cf       	rjmp	.-54     	; 0x20a6 <_ZL9getNumberv+0x10>
    20dc:	ce 01       	movw	r24, r28
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	08 95       	ret

000020e6 <_ZN15OrangutanBuzzer5init2Ev>:
    20e6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    20ea:	83 e2       	ldi	r24, 0x23	; 35
    20ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    20f0:	81 e1       	ldi	r24, 0x11	; 17
    20f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    20f6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    20fa:	80 e1       	ldi	r24, 0x10	; 16
    20fc:	97 e2       	ldi	r25, 0x27	; 39
    20fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2102:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2106:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    210a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    210e:	22 9a       	sbi	0x04, 2	; 4
    2110:	78 94       	sei
    2112:	08 95       	ret

00002114 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    2114:	8f 92       	push	r8
    2116:	9f 92       	push	r9
    2118:	af 92       	push	r10
    211a:	bf 92       	push	r11
    211c:	df 92       	push	r13
    211e:	ef 92       	push	r14
    2120:	ff 92       	push	r15
    2122:	0f 93       	push	r16
    2124:	1f 93       	push	r17
    2126:	cf 93       	push	r28
    2128:	df 93       	push	r29
    212a:	5c 01       	movw	r10, r24
    212c:	8b 01       	movw	r16, r22
    212e:	d4 2e       	mov	r13, r20
    2130:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <buzzerInitialized>
    2134:	81 11       	cpse	r24, r1
    2136:	05 c0       	rjmp	.+10     	; 0x2142 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <buzzerInitialized>
    213e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <_ZN15OrangutanBuzzer5init2Ev>
    2142:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    2146:	b7 fe       	sbrs	r11, 7
    2148:	05 c0       	rjmp	.+10     	; 0x2154 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    214a:	e8 94       	clt
    214c:	b7 f8       	bld	r11, 7
    214e:	2a e0       	ldi	r18, 0x0A	; 10
    2150:	f2 2e       	mov	r15, r18
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    2154:	ff 24       	eor	r15, r15
    2156:	f3 94       	inc	r15
    2158:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    215c:	2e 2d       	mov	r18, r14
    215e:	28 7f       	andi	r18, 0xF8	; 248
    2160:	e2 2e       	mov	r14, r18
    2162:	48 ec       	ldi	r20, 0xC8	; 200
    2164:	f4 9e       	mul	r15, r20
    2166:	c0 01       	movw	r24, r0
    2168:	11 24       	eor	r1, r1
    216a:	8a 15       	cp	r24, r10
    216c:	9b 05       	cpc	r25, r11
    216e:	e0 f4       	brcc	.+56     	; 0x21a8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    2170:	e5 01       	movw	r28, r10
    2172:	51 e1       	ldi	r21, 0x11	; 17
    2174:	a5 16       	cp	r10, r21
    2176:	57 e2       	ldi	r21, 0x27	; 39
    2178:	b5 06       	cpc	r11, r21
    217a:	10 f0       	brcs	.+4      	; 0x2180 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    217c:	c0 e1       	ldi	r28, 0x10	; 16
    217e:	d7 e2       	ldi	r29, 0x27	; 39
    2180:	be 01       	movw	r22, r28
    2182:	76 95       	lsr	r23
    2184:	67 95       	ror	r22
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	60 58       	subi	r22, 0x80	; 128
    218c:	79 46       	sbci	r23, 0x69	; 105
    218e:	87 46       	sbci	r24, 0x67	; 103
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
    2192:	4e 01       	movw	r8, r28
    2194:	a1 2c       	mov	r10, r1
    2196:	b1 2c       	mov	r11, r1
    2198:	a5 01       	movw	r20, r10
    219a:	94 01       	movw	r18, r8
    219c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodsi4>
    21a0:	59 01       	movw	r10, r18
    21a2:	8e 2d       	mov	r24, r14
    21a4:	81 60       	ori	r24, 0x01	; 1
    21a6:	24 c0       	rjmp	.+72     	; 0x21f0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    21a8:	c8 e2       	ldi	r28, 0x28	; 40
    21aa:	fc 9e       	mul	r15, r28
    21ac:	c0 2d       	mov	r28, r0
    21ae:	11 24       	eor	r1, r1
    21b0:	d0 e0       	ldi	r29, 0x00	; 0
    21b2:	ca 15       	cp	r28, r10
    21b4:	db 05       	cpc	r29, r11
    21b6:	08 f4       	brcc	.+2      	; 0x21ba <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    21b8:	e5 01       	movw	r28, r10
    21ba:	be 01       	movw	r22, r28
    21bc:	76 95       	lsr	r23
    21be:	67 95       	ror	r22
    21c0:	9e 01       	movw	r18, r28
    21c2:	40 e0       	ldi	r20, 0x00	; 0
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	8a e0       	ldi	r24, 0x0A	; 10
    21c8:	f8 12       	cpse	r15, r24
    21ca:	07 c0       	rjmp	.+14     	; 0x21da <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	60 5e       	subi	r22, 0xE0	; 224
    21d2:	73 44       	sbci	r23, 0x43	; 67
    21d4:	81 44       	sbci	r24, 0x41	; 65
    21d6:	9f 4f       	sbci	r25, 0xFF	; 255
    21d8:	06 c0       	rjmp	.+12     	; 0x21e6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	60 53       	subi	r22, 0x30	; 48
    21e0:	7d 4e       	sbci	r23, 0xED	; 237
    21e2:	8c 4e       	sbci	r24, 0xEC	; 236
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
    21e6:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodsi4>
    21ea:	59 01       	movw	r10, r18
    21ec:	8e 2d       	mov	r24, r14
    21ee:	82 60       	ori	r24, 0x02	; 2
    21f0:	88 2e       	mov	r8, r24
    21f2:	2a e0       	ldi	r18, 0x0A	; 10
    21f4:	f2 12       	cpse	r15, r18
    21f6:	07 c0       	rjmp	.+14     	; 0x2206 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    21f8:	ce 01       	movw	r24, r28
    21fa:	05 96       	adiw	r24, 0x05	; 5
    21fc:	6a e0       	ldi	r22, 0x0A	; 10
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__udivmodhi4>
    2204:	eb 01       	movw	r28, r22
    2206:	c8 3e       	cpi	r28, 0xE8	; 232
    2208:	43 e0       	ldi	r20, 0x03	; 3
    220a:	d4 07       	cpc	r29, r20
    220c:	59 f0       	breq	.+22     	; 0x2224 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    220e:	98 01       	movw	r18, r16
    2210:	de 01       	movw	r26, r28
    2212:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__umulhisi3>
    2216:	28 ee       	ldi	r18, 0xE8	; 232
    2218:	33 e0       	ldi	r19, 0x03	; 3
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__divmodsi4>
    2222:	89 01       	movw	r16, r18
    2224:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2228:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    222c:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2230:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2234:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2238:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    223c:	4d 2d       	mov	r20, r13
    223e:	40 31       	cpi	r20, 0x10	; 16
    2240:	08 f0       	brcs	.+2      	; 0x2244 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    2242:	4f e0       	ldi	r20, 0x0F	; 15
    2244:	80 e1       	ldi	r24, 0x10	; 16
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	84 1b       	sub	r24, r20
    224a:	91 09       	sbc	r25, r1
    224c:	a9 01       	movw	r20, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    2250:	56 95       	lsr	r21
    2252:	47 95       	ror	r20
    2254:	8a 95       	dec	r24
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    2258:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    225c:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2260:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <_ZL13buzzerTimeout+0x1>
    2264:	00 93 a1 01 	sts	0x01A1, r16	; 0x8001a1 <_ZL13buzzerTimeout>
    2268:	86 b3       	in	r24, 0x16	; 22
    226a:	8f ef       	ldi	r24, 0xFF	; 255
    226c:	86 bb       	out	0x16, r24	; 22
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	bf 90       	pop	r11
    2284:	af 90       	pop	r10
    2286:	9f 90       	pop	r9
    2288:	8f 90       	pop	r8
    228a:	08 95       	ret

0000228c <_ZN15OrangutanBuzzer8playNoteEhjh>:
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	eb 01       	movw	r28, r22
    2292:	8f 3f       	cpi	r24, 0xFF	; 255
    2294:	11 f0       	breq	.+4      	; 0x229a <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    2296:	41 11       	cpse	r20, r1
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	be 01       	movw	r22, r28
    229e:	88 ee       	ldi	r24, 0xE8	; 232
    22a0:	93 e0       	ldi	r25, 0x03	; 3
    22a2:	43 c0       	rjmp	.+134    	; 0x232a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    22a4:	81 31       	cpi	r24, 0x11	; 17
    22a6:	30 f0       	brcs	.+12     	; 0x22b4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    22a8:	50 ef       	ldi	r21, 0xF0	; 240
    22aa:	58 0f       	add	r21, r24
    22ac:	50 36       	cpi	r21, 0x60	; 96
    22ae:	18 f0       	brcs	.+6      	; 0x22b6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    22b0:	5f e5       	ldi	r21, 0x5F	; 95
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	85 2f       	mov	r24, r21
    22b8:	6c e0       	ldi	r22, 0x0C	; 12
    22ba:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <__udivmodqi4>
    22be:	68 2f       	mov	r22, r24
    22c0:	74 ef       	ldi	r23, 0xF4	; 244
    22c2:	76 03       	mulsu	r23, r22
    22c4:	90 01       	movw	r18, r0
    22c6:	11 24       	eor	r1, r1
    22c8:	25 0f       	add	r18, r21
    22ca:	31 1d       	adc	r19, r1
    22cc:	2c 30       	cpi	r18, 0x0C	; 12
    22ce:	31 05       	cpc	r19, r1
    22d0:	40 f4       	brcc	.+16     	; 0x22e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    22d2:	f9 01       	movw	r30, r18
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	e8 5c       	subi	r30, 0xC8	; 200
    22da:	fe 4f       	sbci	r31, 0xFE	; 254
    22dc:	20 81       	ld	r18, Z
    22de:	31 81       	ldd	r19, Z+1	; 0x01
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	87 30       	cpi	r24, 0x07	; 7
    22e8:	81 f0       	breq	.+32     	; 0x230a <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    22ea:	08 2e       	mov	r0, r24
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	28 f0       	brcs	.+10     	; 0x2304 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    22fa:	c9 01       	movw	r24, r18
    22fc:	05 96       	adiw	r24, 0x05	; 5
    22fe:	6a e0       	ldi	r22, 0x0A	; 10
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	0c c0       	rjmp	.+24     	; 0x231c <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    2304:	c9 01       	movw	r24, r18
    2306:	90 58       	subi	r25, 0x80	; 128
    2308:	0c c0       	rjmp	.+24     	; 0x2322 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    230a:	c9 01       	movw	r24, r18
    230c:	36 e0       	ldi	r19, 0x06	; 6
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	3a 95       	dec	r19
    2314:	e1 f7       	brne	.-8      	; 0x230e <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    2316:	02 96       	adiw	r24, 0x02	; 2
    2318:	65 e0       	ldi	r22, 0x05	; 5
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__udivmodhi4>
    2320:	cb 01       	movw	r24, r22
    2322:	40 31       	cpi	r20, 0x10	; 16
    2324:	08 f0       	brcs	.+2      	; 0x2328 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    2326:	4f e0       	ldi	r20, 0x0F	; 15
    2328:	be 01       	movw	r22, r28
    232a:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	08 95       	ret

00002334 <_ZL8nextNotev>:
    2334:	a2 e0       	ldi	r26, 0x02	; 2
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e0 ea       	ldi	r30, 0xA0	; 160
    233a:	f1 e1       	ldi	r31, 0x11	; 17
    233c:	0c 94 d7 1d 	jmp	0x3bae	; 0x3bae <__prologue_saves__+0x4>
    2340:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    2344:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZL8staccato>
    2348:	88 23       	and	r24, r24
    234a:	21 f0       	breq	.+8      	; 0x2354 <_ZL8nextNotev+0x20>
    234c:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <_ZL22staccato_rest_duration>
    2350:	61 11       	cpse	r22, r1
    2352:	17 c0       	rjmp	.+46     	; 0x2382 <_ZL8nextNotev+0x4e>
    2354:	77 24       	eor	r7, r7
    2356:	73 94       	inc	r7
    2358:	b0 ec       	ldi	r27, 0xC0	; 192
    235a:	ab 2e       	mov	r10, r27
    235c:	bd e5       	ldi	r27, 0x5D	; 93
    235e:	bb 2e       	mov	r11, r27
    2360:	1a e0       	ldi	r17, 0x0A	; 10
    2362:	61 2e       	mov	r6, r17
    2364:	04 e0       	ldi	r16, 0x04	; 4
    2366:	80 2e       	mov	r8, r16
    2368:	80 ed       	ldi	r24, 0xD0	; 208
    236a:	c8 2e       	mov	r12, r24
    236c:	87 e0       	ldi	r24, 0x07	; 7
    236e:	d8 2e       	mov	r13, r24
    2370:	94 e0       	ldi	r25, 0x04	; 4
    2372:	e9 2e       	mov	r14, r25
    2374:	f1 2c       	mov	r15, r1
    2376:	04 ef       	ldi	r16, 0xF4	; 244
    2378:	11 e0       	ldi	r17, 0x01	; 1
    237a:	2f e0       	ldi	r18, 0x0F	; 15
    237c:	42 2e       	mov	r4, r18
    237e:	51 2c       	mov	r5, r1
    2380:	15 c0       	rjmp	.+42     	; 0x23ac <_ZL8nextNotev+0x78>
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	88 ee       	ldi	r24, 0xE8	; 232
    2388:	93 e0       	ldi	r25, 0x03	; 3
    238a:	0e 94 8a 10 	call	0x2114	; 0x2114 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    238e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_ZL22staccato_rest_duration>
    2392:	17 c1       	rjmp	.+558    	; 0x25c2 <_ZL8nextNotev+0x28e>
    2394:	86 36       	cpi	r24, 0x66	; 102
    2396:	d4 f5       	brge	.+116    	; 0x240c <_ZL8nextNotev+0xd8>
    2398:	81 36       	cpi	r24, 0x61	; 97
    239a:	09 f4       	brne	.+2      	; 0x239e <_ZL8nextNotev+0x6a>
    239c:	a9 c0       	rjmp	.+338    	; 0x24f0 <_ZL8nextNotev+0x1bc>
    239e:	7c f5       	brge	.+94     	; 0x23fe <_ZL8nextNotev+0xca>
    23a0:	8c 33       	cpi	r24, 0x3C	; 60
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <_ZL8nextNotev+0x72>
    23a4:	60 c0       	rjmp	.+192    	; 0x2466 <_ZL8nextNotev+0x132>
    23a6:	8e 33       	cpi	r24, 0x3E	; 62
    23a8:	81 f4       	brne	.+32     	; 0x23ca <_ZL8nextNotev+0x96>
    23aa:	93 94       	inc	r9
    23ac:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZL16currentCharacterv>
    23b0:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
    23b4:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x1>
    23b8:	2f 5f       	subi	r18, 0xFF	; 255
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <__data_end+0x1>
    23c0:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <__data_end>
    23c4:	85 36       	cpi	r24, 0x65	; 101
    23c6:	31 f7       	brne	.-52     	; 0x2394 <_ZL8nextNotev+0x60>
    23c8:	52 c0       	rjmp	.+164    	; 0x246e <_ZL8nextNotev+0x13a>
    23ca:	81 32       	cpi	r24, 0x21	; 33
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <_ZL8nextNotev+0x9c>
    23ce:	8b c0       	rjmp	.+278    	; 0x24e6 <_ZL8nextNotev+0x1b2>
    23d0:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    23d4:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    23d8:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    23dc:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    23e0:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    23e4:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    23e8:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    23ec:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    23f0:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    23f4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZL8staccato>
    23f8:	a4 e0       	ldi	r26, 0x04	; 4
    23fa:	9a 2e       	mov	r9, r26
    23fc:	d7 cf       	rjmp	.-82     	; 0x23ac <_ZL8nextNotev+0x78>
    23fe:	83 36       	cpi	r24, 0x63	; 99
    2400:	a1 f1       	breq	.+104    	; 0x246a <_ZL8nextNotev+0x136>
    2402:	0c f4       	brge	.+2      	; 0x2406 <_ZL8nextNotev+0xd2>
    2404:	78 c0       	rjmp	.+240    	; 0x24f6 <_ZL8nextNotev+0x1c2>
    2406:	10 e0       	ldi	r17, 0x00	; 0
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	77 c0       	rjmp	.+238    	; 0x24fa <_ZL8nextNotev+0x1c6>
    240c:	8d 36       	cpi	r24, 0x6D	; 109
    240e:	c1 f1       	breq	.+112    	; 0x2480 <_ZL8nextNotev+0x14c>
    2410:	94 f4       	brge	.+36     	; 0x2436 <_ZL8nextNotev+0x102>
    2412:	87 36       	cpi	r24, 0x67	; 103
    2414:	91 f1       	breq	.+100    	; 0x247a <_ZL8nextNotev+0x146>
    2416:	74 f1       	brlt	.+92     	; 0x2474 <_ZL8nextNotev+0x140>
    2418:	8c 36       	cpi	r24, 0x6C	; 108
    241a:	09 f0       	breq	.+2      	; 0x241e <_ZL8nextNotev+0xea>
    241c:	64 c0       	rjmp	.+200    	; 0x24e6 <_ZL8nextNotev+0x1b2>
    241e:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZL9getNumberv>
    2422:	bc 01       	movw	r22, r24
    2424:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    2428:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    242c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2430:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2434:	51 c0       	rjmp	.+162    	; 0x24d8 <_ZL8nextNotev+0x1a4>
    2436:	82 37       	cpi	r24, 0x72	; 114
    2438:	c9 f1       	breq	.+114    	; 0x24ac <_ZL8nextNotev+0x178>
    243a:	4c f4       	brge	.+18     	; 0x244e <_ZL8nextNotev+0x11a>
    243c:	8f 36       	cpi	r24, 0x6F	; 111
    243e:	09 f0       	breq	.+2      	; 0x2442 <_ZL8nextNotev+0x10e>
    2440:	52 c0       	rjmp	.+164    	; 0x24e6 <_ZL8nextNotev+0x1b2>
    2442:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZL9getNumberv>
    2446:	98 2e       	mov	r9, r24
    2448:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    244c:	af cf       	rjmp	.-162    	; 0x23ac <_ZL8nextNotev+0x78>
    244e:	84 37       	cpi	r24, 0x74	; 116
    2450:	81 f1       	breq	.+96     	; 0x24b2 <_ZL8nextNotev+0x17e>
    2452:	86 37       	cpi	r24, 0x76	; 118
    2454:	09 f0       	breq	.+2      	; 0x2458 <_ZL8nextNotev+0x124>
    2456:	47 c0       	rjmp	.+142    	; 0x24e6 <_ZL8nextNotev+0x1b2>
    2458:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZL9getNumberv>
    245c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    2460:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    2464:	a3 cf       	rjmp	.-186    	; 0x23ac <_ZL8nextNotev+0x78>
    2466:	9a 94       	dec	r9
    2468:	a1 cf       	rjmp	.-190    	; 0x23ac <_ZL8nextNotev+0x78>
    246a:	10 e0       	ldi	r17, 0x00	; 0
    246c:	20 c0       	rjmp	.+64     	; 0x24ae <_ZL8nextNotev+0x17a>
    246e:	10 e0       	ldi	r17, 0x00	; 0
    2470:	84 e0       	ldi	r24, 0x04	; 4
    2472:	43 c0       	rjmp	.+134    	; 0x24fa <_ZL8nextNotev+0x1c6>
    2474:	10 e0       	ldi	r17, 0x00	; 0
    2476:	85 e0       	ldi	r24, 0x05	; 5
    2478:	40 c0       	rjmp	.+128    	; 0x24fa <_ZL8nextNotev+0x1c6>
    247a:	10 e0       	ldi	r17, 0x00	; 0
    247c:	87 e0       	ldi	r24, 0x07	; 7
    247e:	3d c0       	rjmp	.+122    	; 0x24fa <_ZL8nextNotev+0x1c6>
    2480:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZL16currentCharacterv>
    2484:	8c 36       	cpi	r24, 0x6C	; 108
    2486:	19 f4       	brne	.+6      	; 0x248e <_ZL8nextNotev+0x15a>
    2488:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZL8staccato>
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <_ZL8nextNotev+0x162>
    248e:	70 92 9e 01 	sts	0x019E, r7	; 0x80019e <_ZL8staccato>
    2492:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_ZL22staccato_rest_duration>
    2496:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
    249a:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x1>
    249e:	2f 5f       	subi	r18, 0xFF	; 255
    24a0:	3f 4f       	sbci	r19, 0xFF	; 255
    24a2:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <__data_end+0x1>
    24a6:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <__data_end>
    24aa:	80 cf       	rjmp	.-256    	; 0x23ac <_ZL8nextNotev+0x78>
    24ac:	11 e0       	ldi	r17, 0x01	; 1
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	24 c0       	rjmp	.+72     	; 0x24fa <_ZL8nextNotev+0x1c6>
    24b2:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZL9getNumberv>
    24b6:	bc 01       	movw	r22, r24
    24b8:	c5 01       	movw	r24, r10
    24ba:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__udivmodhi4>
    24be:	66 9e       	mul	r6, r22
    24c0:	c0 01       	movw	r24, r0
    24c2:	67 9e       	mul	r6, r23
    24c4:	90 0d       	add	r25, r0
    24c6:	11 24       	eor	r1, r1
    24c8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    24cc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    24d0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    24d4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    24d8:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__udivmodhi4>
    24dc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    24e0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    24e4:	63 cf       	rjmp	.-314    	; 0x23ac <_ZL8nextNotev+0x78>
    24e6:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <__data_end+0x1>
    24ea:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <__data_end>
    24ee:	69 c0       	rjmp	.+210    	; 0x25c2 <_ZL8nextNotev+0x28e>
    24f0:	10 e0       	ldi	r17, 0x00	; 0
    24f2:	89 e0       	ldi	r24, 0x09	; 9
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <_ZL8nextNotev+0x1c6>
    24f6:	10 e0       	ldi	r17, 0x00	; 0
    24f8:	8b e0       	ldi	r24, 0x0B	; 11
    24fa:	08 2f       	mov	r16, r24
    24fc:	9c e0       	ldi	r25, 0x0C	; 12
    24fe:	99 9e       	mul	r9, r25
    2500:	00 0d       	add	r16, r0
    2502:	11 24       	eor	r1, r1
    2504:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZL16currentCharacterv>
    2508:	98 2f       	mov	r25, r24
    250a:	97 7f       	andi	r25, 0xF7	; 247
    250c:	93 32       	cpi	r25, 0x23	; 35
    250e:	61 f4       	brne	.+24     	; 0x2528 <_ZL8nextNotev+0x1f4>
    2510:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
    2514:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x1>
    2518:	2f 5f       	subi	r18, 0xFF	; 255
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <__data_end+0x1>
    2520:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <__data_end>
    2524:	0f 5f       	subi	r16, 0xFF	; 255
    2526:	ee cf       	rjmp	.-36     	; 0x2504 <_ZL8nextNotev+0x1d0>
    2528:	8d 32       	cpi	r24, 0x2D	; 45
    252a:	71 f4       	brne	.+28     	; 0x2548 <_ZL8nextNotev+0x214>
    252c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
    2530:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x1>
    2534:	2f 5f       	subi	r18, 0xFF	; 255
    2536:	3f 4f       	sbci	r19, 0xFF	; 255
    2538:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <__data_end+0x1>
    253c:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <__data_end>
    2540:	01 50       	subi	r16, 0x01	; 1
    2542:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZL16currentCharacterv>
    2546:	f0 cf       	rjmp	.-32     	; 0x2528 <_ZL8nextNotev+0x1f4>
    2548:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    254c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    2550:	81 53       	subi	r24, 0x31	; 49
    2552:	88 30       	cpi	r24, 0x08	; 8
    2554:	50 f4       	brcc	.+20     	; 0x256a <_ZL8nextNotev+0x236>
    2556:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    255a:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    255e:	0e 94 4b 10 	call	0x2096	; 0x2096 <_ZL9getNumberv>
    2562:	bc 01       	movw	r22, r24
    2564:	c7 01       	movw	r24, r14
    2566:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__udivmodhi4>
    256a:	7b 01       	movw	r14, r22
    256c:	f6 94       	lsr	r15
    256e:	e7 94       	ror	r14
    2570:	69 83       	std	Y+1, r22	; 0x01
    2572:	7a 83       	std	Y+2, r23	; 0x02
    2574:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZL16currentCharacterv>
    2578:	69 81       	ldd	r22, Y+1	; 0x01
    257a:	7a 81       	ldd	r23, Y+2	; 0x02
    257c:	8e 32       	cpi	r24, 0x2E	; 46
    257e:	69 f4       	brne	.+26     	; 0x259a <_ZL8nextNotev+0x266>
    2580:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
    2584:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <__data_end+0x1>
    2588:	2f 5f       	subi	r18, 0xFF	; 255
    258a:	3f 4f       	sbci	r19, 0xFF	; 255
    258c:	30 93 9b 01 	sts	0x019B, r19	; 0x80019b <__data_end+0x1>
    2590:	20 93 9a 01 	sts	0x019A, r18	; 0x80019a <__data_end>
    2594:	6e 0d       	add	r22, r14
    2596:	7f 1d       	adc	r23, r15
    2598:	e9 cf       	rjmp	.-46     	; 0x256c <_ZL8nextNotev+0x238>
    259a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZL8staccato>
    259e:	88 23       	and	r24, r24
    25a0:	39 f0       	breq	.+14     	; 0x25b0 <_ZL8nextNotev+0x27c>
    25a2:	9b 01       	movw	r18, r22
    25a4:	36 95       	lsr	r19
    25a6:	27 95       	ror	r18
    25a8:	20 93 9d 01 	sts	0x019D, r18	; 0x80019d <_ZL22staccato_rest_duration>
    25ac:	62 1b       	sub	r22, r18
    25ae:	71 09       	sbc	r23, r1
    25b0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    25b4:	11 23       	and	r17, r17
    25b6:	11 f0       	breq	.+4      	; 0x25bc <_ZL8nextNotev+0x288>
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	01 c0       	rjmp	.+2      	; 0x25be <_ZL8nextNotev+0x28a>
    25bc:	80 2f       	mov	r24, r16
    25be:	0e 94 46 11 	call	0x228c	; 0x228c <_ZN15OrangutanBuzzer8playNoteEhjh>
    25c2:	22 96       	adiw	r28, 0x02	; 2
    25c4:	e0 e1       	ldi	r30, 0x10	; 16
    25c6:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__epilogue_restores__+0x4>

000025ca <__vector_13>:
    25ca:	1f 92       	push	r1
    25cc:	0f 92       	push	r0
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	0f 92       	push	r0
    25d2:	11 24       	eor	r1, r1
    25d4:	2f 93       	push	r18
    25d6:	3f 93       	push	r19
    25d8:	4f 93       	push	r20
    25da:	5f 93       	push	r21
    25dc:	6f 93       	push	r22
    25de:	7f 93       	push	r23
    25e0:	8f 93       	push	r24
    25e2:	9f 93       	push	r25
    25e4:	af 93       	push	r26
    25e6:	bf 93       	push	r27
    25e8:	ef 93       	push	r30
    25ea:	ff 93       	push	r31
    25ec:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <_ZL13buzzerTimeout>
    25f0:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <_ZL13buzzerTimeout+0x1>
    25f4:	9c 01       	movw	r18, r24
    25f6:	21 50       	subi	r18, 0x01	; 1
    25f8:	31 09       	sbc	r19, r1
    25fa:	30 93 a2 01 	sts	0x01A2, r19	; 0x8001a2 <_ZL13buzzerTimeout+0x1>
    25fe:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <_ZL13buzzerTimeout>
    2602:	89 2b       	or	r24, r25
    2604:	11 f5       	brne	.+68     	; 0x264a <__vector_13+0x80>
    2606:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    260a:	78 94       	sei
    260c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2610:	88 7f       	andi	r24, 0xF8	; 248
    2612:	81 60       	ori	r24, 0x01	; 1
    2614:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2618:	80 e1       	ldi	r24, 0x10	; 16
    261a:	97 e2       	ldi	r25, 0x27	; 39
    261c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2620:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2624:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2628:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    2632:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
    2636:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
    263a:	89 2b       	or	r24, r25
    263c:	31 f0       	breq	.+12     	; 0x264a <__vector_13+0x80>
    263e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZL17play_mode_setting>
    2642:	81 11       	cpse	r24, r1
    2644:	02 c0       	rjmp	.+4      	; 0x264a <__vector_13+0x80>
    2646:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZL8nextNotev>
    264a:	ff 91       	pop	r31
    264c:	ef 91       	pop	r30
    264e:	bf 91       	pop	r27
    2650:	af 91       	pop	r26
    2652:	9f 91       	pop	r25
    2654:	8f 91       	pop	r24
    2656:	7f 91       	pop	r23
    2658:	6f 91       	pop	r22
    265a:	5f 91       	pop	r21
    265c:	4f 91       	pop	r20
    265e:	3f 91       	pop	r19
    2660:	2f 91       	pop	r18
    2662:	0f 90       	pop	r0
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	0f 90       	pop	r0
    2668:	1f 90       	pop	r1
    266a:	18 95       	reti

0000266c <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    266c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2670:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <__data_end+0x1>
    2674:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_ZL17use_program_space>
    267e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_ZL22staccato_rest_duration>
    2682:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZL8nextNotev>
    2686:	08 95       	ret

00002688 <play_from_program_space>:
    2688:	0e 94 36 13 	call	0x266c	; 0x266c <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    268c:	08 95       	ret

0000268e <delay_us.constprop.0>:
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	6f 93       	push	r22
    2694:	64 e0       	ldi	r22, 0x04	; 4
    2696:	6a 95       	dec	r22
    2698:	f1 f7       	brne	.-4      	; 0x2696 <delay_us.constprop.0+0x8>
    269a:	6f 91       	pop	r22
    269c:	01 97       	sbiw	r24, 0x01	; 1
    269e:	c9 f7       	brne	.-14     	; 0x2692 <delay_us.constprop.0+0x4>
    26a0:	08 95       	ret

000026a2 <_ZN12OrangutanLCD8busyWaitEv>:
    26a2:	0f 93       	push	r16
    26a4:	1f 93       	push	r17
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	1a b1       	in	r17, 0x0a	; 10
    26ac:	57 98       	cbi	0x0a, 7	; 10
    26ae:	5a 98       	cbi	0x0b, 2	; 11
    26b0:	28 9a       	sbi	0x05, 0	; 5
    26b2:	c0 e0       	ldi	r28, 0x00	; 0
    26b4:	d0 e0       	ldi	r29, 0x00	; 0
    26b6:	0e 94 47 13 	call	0x268e	; 0x268e <delay_us.constprop.0>
    26ba:	5c 9a       	sbi	0x0b, 4	; 11
    26bc:	0e 94 47 13 	call	0x268e	; 0x268e <delay_us.constprop.0>
    26c0:	09 b1       	in	r16, 0x09	; 9
    26c2:	5c 98       	cbi	0x0b, 4	; 11
    26c4:	0e 94 47 13 	call	0x268e	; 0x268e <delay_us.constprop.0>
    26c8:	5c 9a       	sbi	0x0b, 4	; 11
    26ca:	0e 94 47 13 	call	0x268e	; 0x268e <delay_us.constprop.0>
    26ce:	5c 98       	cbi	0x0b, 4	; 11
    26d0:	24 96       	adiw	r28, 0x04	; 4
    26d2:	07 ff       	sbrs	r16, 7
    26d4:	10 c0       	rjmp	.+32     	; 0x26f6 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    26d6:	ae 01       	movw	r20, r28
    26d8:	60 e0       	ldi	r22, 0x00	; 0
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <lcdTimeout>
    26e0:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <lcdTimeout+0x1>
    26e4:	a0 91 a5 01 	lds	r26, 0x01A5	; 0x8001a5 <lcdTimeout+0x2>
    26e8:	b0 91 a6 01 	lds	r27, 0x01A6	; 0x8001a6 <lcdTimeout+0x3>
    26ec:	48 17       	cp	r20, r24
    26ee:	59 07       	cpc	r21, r25
    26f0:	6a 07       	cpc	r22, r26
    26f2:	7b 07       	cpc	r23, r27
    26f4:	00 f3       	brcs	.-64     	; 0x26b6 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    26f6:	1a b9       	out	0x0a, r17	; 10
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	08 95       	ret

00002702 <_ZN12OrangutanLCD8sendDataEh>:
    2702:	95 b1       	in	r25, 0x05	; 5
    2704:	28 2f       	mov	r18, r24
    2706:	21 70       	andi	r18, 0x01	; 1
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	22 0f       	add	r18, r18
    270c:	33 1f       	adc	r19, r19
    270e:	48 2f       	mov	r20, r24
    2710:	46 70       	andi	r20, 0x06	; 6
    2712:	68 e0       	ldi	r22, 0x08	; 8
    2714:	46 9f       	mul	r20, r22
    2716:	a0 01       	movw	r20, r0
    2718:	11 24       	eor	r1, r1
    271a:	24 2b       	or	r18, r20
    271c:	9d 7c       	andi	r25, 0xCD	; 205
    271e:	29 2b       	or	r18, r25
    2720:	25 b9       	out	0x05, r18	; 5
    2722:	9b b1       	in	r25, 0x0b	; 11
    2724:	88 70       	andi	r24, 0x08	; 8
    2726:	82 95       	swap	r24
    2728:	80 7f       	andi	r24, 0xF0	; 240
    272a:	9f 77       	andi	r25, 0x7F	; 127
    272c:	89 2b       	or	r24, r25
    272e:	8b b9       	out	0x0b, r24	; 11
    2730:	5c 9a       	sbi	0x0b, 4	; 11
    2732:	0e 94 47 13 	call	0x268e	; 0x268e <delay_us.constprop.0>
    2736:	5c 98       	cbi	0x0b, 4	; 11
    2738:	0e 94 47 13 	call	0x268e	; 0x268e <delay_us.constprop.0>
    273c:	08 95       	ret

0000273e <_ZN12OrangutanLCD4sendEhhh>:
    273e:	a0 e0       	ldi	r26, 0x00	; 0
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e5 ea       	ldi	r30, 0xA5	; 165
    2744:	f3 e1       	ldi	r31, 0x13	; 19
    2746:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__prologue_saves__+0x16>
    274a:	c8 2f       	mov	r28, r24
    274c:	d6 2e       	mov	r13, r22
    274e:	e4 2e       	mov	r14, r20
    2750:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <_ZZN12OrangutanLCD4initEvE11initialized>
    2754:	81 11       	cpse	r24, r1
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <_ZN12OrangutanLCD4sendEhhh+0x24>
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <_ZZN12OrangutanLCD4initEvE11initialized>
    275e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <_ZN12OrangutanLCD5init2Ev>
    2762:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN12OrangutanLCD8busyWaitEv>
    2766:	14 b1       	in	r17, 0x04	; 4
    2768:	d5 b1       	in	r29, 0x05	; 5
    276a:	fa b0       	in	r15, 0x0a	; 10
    276c:	0b b1       	in	r16, 0x0b	; 11
    276e:	28 98       	cbi	0x05, 0	; 5
    2770:	dd 20       	and	r13, r13
    2772:	11 f0       	breq	.+4      	; 0x2778 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2774:	5a 9a       	sbi	0x0b, 2	; 11
    2776:	01 c0       	rjmp	.+2      	; 0x277a <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2778:	5a 98       	cbi	0x0b, 2	; 11
    277a:	94 b1       	in	r25, 0x04	; 4
    277c:	92 63       	ori	r25, 0x32	; 50
    277e:	94 b9       	out	0x04, r25	; 4
    2780:	57 9a       	sbi	0x0a, 7	; 10
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	e8 16       	cp	r14, r24
    2786:	29 f0       	breq	.+10     	; 0x2792 <_ZN12OrangutanLCD4sendEhhh+0x54>
    2788:	8c 2f       	mov	r24, r28
    278a:	82 95       	swap	r24
    278c:	8f 70       	andi	r24, 0x0F	; 15
    278e:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN12OrangutanLCD8sendDataEh>
    2792:	8c 2f       	mov	r24, r28
    2794:	8f 70       	andi	r24, 0x0F	; 15
    2796:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN12OrangutanLCD8sendDataEh>
    279a:	fa b8       	out	0x0a, r15	; 10
    279c:	0b b9       	out	0x0b, r16	; 11
    279e:	14 b9       	out	0x04, r17	; 4
    27a0:	d5 b9       	out	0x05, r29	; 5
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	e7 e0       	ldi	r30, 0x07	; 7
    27a8:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__epilogue_restores__+0x16>

000027ac <_ZN12OrangutanLCD8send_cmdEh>:
    27ac:	42 e0       	ldi	r20, 0x02	; 2
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN12OrangutanLCD4sendEhhh>
    27b4:	08 95       	ret

000027b6 <_ZN12OrangutanLCD9send_dataEh>:
    27b6:	42 e0       	ldi	r20, 0x02	; 2
    27b8:	61 e0       	ldi	r22, 0x01	; 1
    27ba:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN12OrangutanLCD4sendEhhh>
    27be:	08 95       	ret

000027c0 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    27c0:	41 e0       	ldi	r20, 0x01	; 1
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN12OrangutanLCD4sendEhhh>
    27c8:	08 95       	ret

000027ca <_ZN12OrangutanLCD5init2Ev>:
    27ca:	80 e1       	ldi	r24, 0x10	; 16
    27cc:	97 e2       	ldi	r25, 0x27	; 39
    27ce:	a0 e0       	ldi	r26, 0x00	; 0
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <lcdTimeout>
    27d6:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <lcdTimeout+0x1>
    27da:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <lcdTimeout+0x2>
    27de:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <lcdTimeout+0x3>
    27e2:	52 9a       	sbi	0x0a, 2	; 10
    27e4:	20 9a       	sbi	0x04, 0	; 4
    27e6:	54 9a       	sbi	0x0a, 4	; 10
    27e8:	8e e1       	ldi	r24, 0x1E	; 30
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
    27f0:	83 e0       	ldi	r24, 0x03	; 3
    27f2:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27f6:	86 e0       	ldi	r24, 0x06	; 6
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
    27fe:	83 e0       	ldi	r24, 0x03	; 3
    2800:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
    280c:	83 e0       	ldi	r24, 0x03	; 3
    280e:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
    2828:	88 e2       	ldi	r24, 0x28	; 40
    282a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN12OrangutanLCD8send_cmdEh>
    282e:	88 e0       	ldi	r24, 0x08	; 8
    2830:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN12OrangutanLCD8send_cmdEh>
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN12OrangutanLCD8send_cmdEh>
    283a:	86 e0       	ldi	r24, 0x06	; 6
    283c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN12OrangutanLCD8send_cmdEh>
    2840:	8c e0       	ldi	r24, 0x0C	; 12
    2842:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN12OrangutanLCD8send_cmdEh>
    2846:	08 95       	ret

00002848 <_ZN12OrangutanLCD5clearEv>:
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN12OrangutanLCD8send_cmdEh>
    284e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <printf_chars>
    2852:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <printf_chars+0x1>
    2856:	89 2b       	or	r24, r25
    2858:	f9 f0       	breq	.+62     	; 0x2898 <_ZN12OrangutanLCD5clearEv+0x50>
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	a0 e2       	ldi	r26, 0x20	; 32
    285e:	26 2f       	mov	r18, r22
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2866:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	78 9f       	mul	r23, r24
    2870:	a0 01       	movw	r20, r0
    2872:	79 9f       	mul	r23, r25
    2874:	50 0d       	add	r21, r0
    2876:	11 24       	eor	r1, r1
    2878:	24 17       	cp	r18, r20
    287a:	35 07       	cpc	r19, r21
    287c:	4c f4       	brge	.+18     	; 0x2890 <_ZN12OrangutanLCD5clearEv+0x48>
    287e:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <printf_chars>
    2882:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <printf_chars+0x1>
    2886:	e2 0f       	add	r30, r18
    2888:	f3 1f       	adc	r31, r19
    288a:	a0 83       	st	Z, r26
    288c:	6f 5f       	subi	r22, 0xFF	; 255
    288e:	e7 cf       	rjmp	.-50     	; 0x285e <_ZN12OrangutanLCD5clearEv+0x16>
    2890:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <col>
    2894:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <row>
    2898:	08 95       	ret

0000289a <clear>:
    289a:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN12OrangutanLCD5clearEv>
    289e:	08 95       	ret

000028a0 <_ZN12OrangutanLCD5printEPKc>:
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	ec 01       	movw	r28, r24
    28a6:	89 91       	ld	r24, Y+
    28a8:	88 23       	and	r24, r24
    28aa:	19 f0       	breq	.+6      	; 0x28b2 <_ZN12OrangutanLCD5printEPKc+0x12>
    28ac:	0e 94 db 13 	call	0x27b6	; 0x27b6 <_ZN12OrangutanLCD9send_dataEh>
    28b0:	fa cf       	rjmp	.-12     	; 0x28a6 <_ZN12OrangutanLCD5printEPKc+0x6>
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	08 95       	ret

000028b8 <print>:
    28b8:	0e 94 50 14 	call	0x28a0	; 0x28a0 <_ZN12OrangutanLCD5printEPKc>
    28bc:	08 95       	ret

000028be <_ZN12OrangutanLCD5printEm>:
    28be:	aa e0       	ldi	r26, 0x0A	; 10
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e5 e6       	ldi	r30, 0x65	; 101
    28c4:	f4 e1       	ldi	r31, 0x14	; 20
    28c6:	0c 94 df 1d 	jmp	0x3bbe	; 0x3bbe <__prologue_saves__+0x14>
    28ca:	1a e0       	ldi	r17, 0x0A	; 10
    28cc:	5a e0       	ldi	r21, 0x0A	; 10
    28ce:	c5 2e       	mov	r12, r21
    28d0:	d1 2c       	mov	r13, r1
    28d2:	e1 2c       	mov	r14, r1
    28d4:	f1 2c       	mov	r15, r1
    28d6:	06 2f       	mov	r16, r22
    28d8:	a7 01       	movw	r20, r14
    28da:	96 01       	movw	r18, r12
    28dc:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodsi4>
    28e0:	ca 01       	movw	r24, r20
    28e2:	b9 01       	movw	r22, r18
    28e4:	11 50       	subi	r17, 0x01	; 1
    28e6:	e1 e0       	ldi	r30, 0x01	; 1
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	ec 0f       	add	r30, r28
    28ec:	fd 1f       	adc	r31, r29
    28ee:	e1 0f       	add	r30, r17
    28f0:	f1 1d       	adc	r31, r1
    28f2:	00 5d       	subi	r16, 0xD0	; 208
    28f4:	2a e0       	ldi	r18, 0x0A	; 10
    28f6:	62 9f       	mul	r22, r18
    28f8:	00 19       	sub	r16, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	00 83       	st	Z, r16
    28fe:	61 15       	cp	r22, r1
    2900:	71 05       	cpc	r23, r1
    2902:	81 05       	cpc	r24, r1
    2904:	91 05       	cpc	r25, r1
    2906:	39 f7       	brne	.-50     	; 0x28d6 <_ZN12OrangutanLCD5printEm+0x18>
    2908:	1a 30       	cpi	r17, 0x0A	; 10
    290a:	58 f4       	brcc	.+22     	; 0x2922 <_ZN12OrangutanLCD5printEm+0x64>
    290c:	e1 e0       	ldi	r30, 0x01	; 1
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	ec 0f       	add	r30, r28
    2912:	fd 1f       	adc	r31, r29
    2914:	e1 0f       	add	r30, r17
    2916:	f1 1d       	adc	r31, r1
    2918:	80 81       	ld	r24, Z
    291a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <_ZN12OrangutanLCD9send_dataEh>
    291e:	1f 5f       	subi	r17, 0xFF	; 255
    2920:	f3 cf       	rjmp	.-26     	; 0x2908 <_ZN12OrangutanLCD5printEm+0x4a>
    2922:	2a 96       	adiw	r28, 0x0a	; 10
    2924:	e8 e0       	ldi	r30, 0x08	; 8
    2926:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__epilogue_restores__+0x14>

0000292a <_ZN12OrangutanLCD5printEl>:
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	6b 01       	movw	r12, r22
    2934:	7c 01       	movw	r14, r24
    2936:	97 ff       	sbrs	r25, 7
    2938:	0b c0       	rjmp	.+22     	; 0x2950 <_ZN12OrangutanLCD5printEl+0x26>
    293a:	f0 94       	com	r15
    293c:	e0 94       	com	r14
    293e:	d0 94       	com	r13
    2940:	c0 94       	com	r12
    2942:	c1 1c       	adc	r12, r1
    2944:	d1 1c       	adc	r13, r1
    2946:	e1 1c       	adc	r14, r1
    2948:	f1 1c       	adc	r15, r1
    294a:	8d e2       	ldi	r24, 0x2D	; 45
    294c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <_ZN12OrangutanLCD9send_dataEh>
    2950:	c7 01       	movw	r24, r14
    2952:	b6 01       	movw	r22, r12
    2954:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN12OrangutanLCD5printEm>
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	df 90       	pop	r13
    295e:	cf 90       	pop	r12
    2960:	08 95       	ret

00002962 <print_long>:
    2962:	0e 94 95 14 	call	0x292a	; 0x292a <_ZN12OrangutanLCD5printEl>
    2966:	08 95       	ret

00002968 <_ZN12OrangutanLCD6gotoXYEhh>:
    2968:	a5 e0       	ldi	r26, 0x05	; 5
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	ea eb       	ldi	r30, 0xBA	; 186
    296e:	f4 e1       	ldi	r31, 0x14	; 20
    2970:	0c 94 e4 1d 	jmp	0x3bc8	; 0x3bc8 <__prologue_saves__+0x1e>
    2974:	18 2f       	mov	r17, r24
    2976:	80 e8       	ldi	r24, 0x80	; 128
    2978:	89 83       	std	Y+1, r24	; 0x01
    297a:	80 ec       	ldi	r24, 0xC0	; 192
    297c:	8a 83       	std	Y+2, r24	; 0x02
    297e:	84 e9       	ldi	r24, 0x94	; 148
    2980:	8b 83       	std	Y+3, r24	; 0x03
    2982:	84 ed       	ldi	r24, 0xD4	; 212
    2984:	8c 83       	std	Y+4, r24	; 0x04
    2986:	fe 01       	movw	r30, r28
    2988:	e6 0f       	add	r30, r22
    298a:	f1 1d       	adc	r31, r1
    298c:	81 81       	ldd	r24, Z+1	; 0x01
    298e:	81 0f       	add	r24, r17
    2990:	6d 83       	std	Y+5, r22	; 0x05
    2992:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN12OrangutanLCD8send_cmdEh>
    2996:	10 93 a7 01 	sts	0x01A7, r17	; 0x8001a7 <col>
    299a:	6d 81       	ldd	r22, Y+5	; 0x05
    299c:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <row>
    29a0:	25 96       	adiw	r28, 0x05	; 5
    29a2:	e3 e0       	ldi	r30, 0x03	; 3
    29a4:	0c 94 00 1e 	jmp	0x3c00	; 0x3c00 <__epilogue_restores__+0x1e>

000029a8 <lcd_goto_xy>:
    29a8:	0e 94 b4 14 	call	0x2968	; 0x2968 <_ZN12OrangutanLCD6gotoXYEhh>
    29ac:	08 95       	ret

000029ae <_ZN16OrangutanDigital9setOutputEhh>:
    29ae:	88 30       	cpi	r24, 0x08	; 8
    29b0:	58 f4       	brcc	.+22     	; 0x29c8 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    29b6:	99 0f       	add	r25, r25
    29b8:	8a 95       	dec	r24
    29ba:	ea f7       	brpl	.-6      	; 0x29b6 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    29bc:	89 2f       	mov	r24, r25
    29be:	aa e2       	ldi	r26, 0x2A	; 42
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	eb e2       	ldi	r30, 0x2B	; 43
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	21 c0       	rjmp	.+66     	; 0x2a0a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    29c8:	8e 30       	cpi	r24, 0x0E	; 14
    29ca:	60 f4       	brcc	.+24     	; 0x29e4 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    29cc:	98 ef       	ldi	r25, 0xF8	; 248
    29ce:	98 0f       	add	r25, r24
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    29d4:	88 0f       	add	r24, r24
    29d6:	9a 95       	dec	r25
    29d8:	ea f7       	brpl	.-6      	; 0x29d4 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    29da:	a4 e2       	ldi	r26, 0x24	; 36
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e5 e2       	ldi	r30, 0x25	; 37
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	13 c0       	rjmp	.+38     	; 0x2a0a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    29e4:	85 31       	cpi	r24, 0x15	; 21
    29e6:	60 f4       	brcc	.+24     	; 0x2a00 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    29e8:	92 ef       	ldi	r25, 0xF2	; 242
    29ea:	98 0f       	add	r25, r24
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	01 c0       	rjmp	.+2      	; 0x29f2 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    29f0:	88 0f       	add	r24, r24
    29f2:	9a 95       	dec	r25
    29f4:	ea f7       	brpl	.-6      	; 0x29f0 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    29f6:	a7 e2       	ldi	r26, 0x27	; 39
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e8 e2       	ldi	r30, 0x28	; 40
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	05 c0       	rjmp	.+10     	; 0x2a0a <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e0 e0       	ldi	r30, 0x00	; 0
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	6f 3f       	cpi	r22, 0xFF	; 255
    2a0c:	19 f4       	brne	.+6      	; 0x2a14 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    2a0e:	90 81       	ld	r25, Z
    2a10:	98 27       	eor	r25, r24
    2a12:	09 c0       	rjmp	.+18     	; 0x2a26 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2a14:	66 23       	and	r22, r22
    2a16:	19 f0       	breq	.+6      	; 0x2a1e <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2a18:	90 81       	ld	r25, Z
    2a1a:	98 2b       	or	r25, r24
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2a1e:	20 81       	ld	r18, Z
    2a20:	98 2f       	mov	r25, r24
    2a22:	90 95       	com	r25
    2a24:	92 23       	and	r25, r18
    2a26:	90 83       	st	Z, r25
    2a28:	9c 91       	ld	r25, X
    2a2a:	98 2b       	or	r25, r24
    2a2c:	9c 93       	st	X, r25
    2a2e:	08 95       	ret

00002a30 <_ZN15OrangutanMotors5init2Ev>:
    2a30:	83 ef       	ldi	r24, 0xF3	; 243
    2a32:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2a36:	84 bd       	out	0x24, r24	; 36
    2a38:	82 e0       	ldi	r24, 0x02	; 2
    2a3a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2a3e:	85 bd       	out	0x25, r24	; 37
    2a40:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2a44:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2a48:	18 bc       	out	0x28, r1	; 40
    2a4a:	17 bc       	out	0x27, r1	; 39
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	86 e0       	ldi	r24, 0x06	; 6
    2a50:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN16OrangutanDigital9setOutputEhh>
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	85 e0       	ldi	r24, 0x05	; 5
    2a58:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN16OrangutanDigital9setOutputEhh>
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	8b e0       	ldi	r24, 0x0B	; 11
    2a60:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN16OrangutanDigital9setOutputEhh>
    2a64:	60 e0       	ldi	r22, 0x00	; 0
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	0e 94 d7 14 	call	0x29ae	; 0x29ae <_ZN16OrangutanDigital9setOutputEhh>
    2a6c:	08 95       	ret

00002a6e <_ZN15OrangutanMotors4initEv>:
    2a6e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <_ZZN15OrangutanMotors4initEvE11initialized>
    2a72:	81 11       	cpse	r24, r1
    2a74:	05 c0       	rjmp	.+10     	; 0x2a80 <_ZN15OrangutanMotors4initEv+0x12>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_ZZN15OrangutanMotors4initEvE11initialized>
    2a7c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_ZN15OrangutanMotors5init2Ev>
    2a80:	08 95       	ret

00002a82 <_ZN15OrangutanMotors10setM1SpeedEi>:
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	ec 01       	movw	r28, r24
    2a88:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN15OrangutanMotors4initEv>
    2a8c:	d7 ff       	sbrs	r29, 7
    2a8e:	05 c0       	rjmp	.+10     	; 0x2a9a <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    2a90:	d1 95       	neg	r29
    2a92:	c1 95       	neg	r28
    2a94:	d1 09       	sbc	r29, r1
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	cf 3f       	cpi	r28, 0xFF	; 255
    2a9e:	d1 05       	cpc	r29, r1
    2aa0:	19 f0       	breq	.+6      	; 0x2aa8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2aa2:	14 f0       	brlt	.+4      	; 0x2aa8 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2aa4:	cf ef       	ldi	r28, 0xFF	; 255
    2aa6:	d0 e0       	ldi	r29, 0x00	; 0
    2aa8:	88 23       	and	r24, r24
    2aaa:	19 f0       	breq	.+6      	; 0x2ab2 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2aac:	18 bc       	out	0x28, r1	; 40
    2aae:	c7 bd       	out	0x27, r28	; 39
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    2ab2:	c8 bd       	out	0x28, r28	; 40
    2ab4:	17 bc       	out	0x27, r1	; 39
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	08 95       	ret

00002abc <_ZN15OrangutanMotors10setM2SpeedEi>:
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	ec 01       	movw	r28, r24
    2ac2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN15OrangutanMotors4initEv>
    2ac6:	d7 ff       	sbrs	r29, 7
    2ac8:	05 c0       	rjmp	.+10     	; 0x2ad4 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2aca:	d1 95       	neg	r29
    2acc:	c1 95       	neg	r28
    2ace:	d1 09       	sbc	r29, r1
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	01 c0       	rjmp	.+2      	; 0x2ad6 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	cf 3f       	cpi	r28, 0xFF	; 255
    2ad8:	d1 05       	cpc	r29, r1
    2ada:	19 f0       	breq	.+6      	; 0x2ae2 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2adc:	14 f0       	brlt	.+4      	; 0x2ae2 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2ade:	cf ef       	ldi	r28, 0xFF	; 255
    2ae0:	d0 e0       	ldi	r29, 0x00	; 0
    2ae2:	88 23       	and	r24, r24
    2ae4:	29 f0       	breq	.+10     	; 0x2af0 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2ae6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2aea:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2aee:	04 c0       	rjmp	.+8      	; 0x2af8 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    2af0:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2af4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <_ZN15OrangutanMotors9setSpeedsEii>:
    2afe:	cf 93       	push	r28
    2b00:	df 93       	push	r29
    2b02:	eb 01       	movw	r28, r22
    2b04:	0e 94 41 15 	call	0x2a82	; 0x2a82 <_ZN15OrangutanMotors10setM1SpeedEi>
    2b08:	ce 01       	movw	r24, r28
    2b0a:	0e 94 5e 15 	call	0x2abc	; 0x2abc <_ZN15OrangutanMotors10setM2SpeedEi>
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	08 95       	ret

00002b14 <set_motors>:
    2b14:	0e 94 7f 15 	call	0x2afe	; 0x2afe <_ZN15OrangutanMotors9setSpeedsEii>
    2b18:	08 95       	ret

00002b1a <_ZN20OrangutanPushbuttons5init2Ev>:
    2b1a:	84 b1       	in	r24, 0x04	; 4
    2b1c:	8d 7c       	andi	r24, 0xCD	; 205
    2b1e:	84 b9       	out	0x04, r24	; 4
    2b20:	85 b1       	in	r24, 0x05	; 5
    2b22:	82 63       	ori	r24, 0x32	; 50
    2b24:	85 b9       	out	0x05, r24	; 5
    2b26:	85 e0       	ldi	r24, 0x05	; 5
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	6f 93       	push	r22
    2b2c:	64 e0       	ldi	r22, 0x04	; 4
    2b2e:	6a 95       	dec	r22
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2b32:	6f 91       	pop	r22
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	c9 f7       	brne	.-14     	; 0x2b2a <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2b38:	08 95       	ret

00002b3a <_ZN20OrangutanPushbuttons4initEv>:
    2b3a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2b3e:	81 11       	cpse	r24, r1
    2b40:	05 c0       	rjmp	.+10     	; 0x2b4c <_ZN20OrangutanPushbuttons4initEv+0x12>
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2b48:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_ZN20OrangutanPushbuttons5init2Ev>
    2b4c:	08 95       	ret

00002b4e <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2b4e:	cf 93       	push	r28
    2b50:	c8 2f       	mov	r28, r24
    2b52:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <_ZN20OrangutanPushbuttons4initEv>
    2b56:	83 b1       	in	r24, 0x03	; 3
    2b58:	8c 23       	and	r24, r28
    2b5a:	e9 f3       	breq	.-6      	; 0x2b56 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2b5c:	8a e0       	ldi	r24, 0x0A	; 10
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 93 17 	call	0x2f26	; 0x2f26 <delay_ms>
    2b64:	83 b1       	in	r24, 0x03	; 3
    2b66:	8c 23       	and	r24, r28
    2b68:	b1 f3       	breq	.-20     	; 0x2b56 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2b6a:	83 b1       	in	r24, 0x03	; 3
    2b6c:	8c 23       	and	r24, r28
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <wait_for_button_release>:
    2b72:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2b76:	08 95       	ret

00002b78 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2b78:	a1 e0       	ldi	r26, 0x01	; 1
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e2 ec       	ldi	r30, 0xC2	; 194
    2b7e:	f5 e1       	ldi	r31, 0x15	; 21
    2b80:	0c 94 e5 1d 	jmp	0x3bca	; 0x3bca <__prologue_saves__+0x20>
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <_ZN20OrangutanPushbuttons4initEv>
    2b8a:	93 b1       	in	r25, 0x03	; 3
    2b8c:	90 95       	com	r25
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	89 23       	and	r24, r25
    2b92:	21 96       	adiw	r28, 0x01	; 1
    2b94:	e2 e0       	ldi	r30, 0x02	; 2
    2b96:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <__epilogue_restores__+0x20>

00002b9a <button_is_pressed>:
    2b9a:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <_ZN20OrangutanPushbuttons9isPressedEh>
    2b9e:	08 95       	ret

00002ba0 <serial_receive_buffer_full>:
    2ba0:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <_ZN15OrangutanSerial5portsE+0x2>
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <_ZN15OrangutanSerial5portsE+0x4>
    2baa:	29 13       	cpse	r18, r25
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	08 95       	ret

00002bb0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	9a e0       	ldi	r25, 0x0A	; 10
    2bb6:	89 9f       	mul	r24, r25
    2bb8:	f0 01       	movw	r30, r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	e5 55       	subi	r30, 0x55	; 85
    2bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc0:	80 85       	ldd	r24, Z+8	; 0x08
    2bc2:	91 85       	ldd	r25, Z+9	; 0x09
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	21 f0       	breq	.+8      	; 0x2bd0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2bc8:	52 81       	ldd	r21, Z+2	; 0x02
    2bca:	44 81       	ldd	r20, Z+4	; 0x04
    2bcc:	54 17       	cp	r21, r20
    2bce:	80 f0       	brcs	.+32     	; 0x2bf0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    2bd0:	8a e0       	ldi	r24, 0x0A	; 10
    2bd2:	82 9f       	mul	r24, r18
    2bd4:	f0 01       	movw	r30, r0
    2bd6:	83 9f       	mul	r24, r19
    2bd8:	f0 0d       	add	r31, r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	e5 55       	subi	r30, 0x55	; 85
    2bde:	fe 4f       	sbci	r31, 0xFE	; 254
    2be0:	92 81       	ldd	r25, Z+2	; 0x02
    2be2:	84 81       	ldd	r24, Z+4	; 0x04
    2be4:	98 13       	cpse	r25, r24
    2be6:	0e c0       	rjmp	.+28     	; 0x2c04 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    2be8:	85 81       	ldd	r24, Z+5	; 0x05
    2bea:	81 11       	cpse	r24, r1
    2bec:	0a c0       	rjmp	.+20     	; 0x2c02 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    2bee:	08 95       	ret
    2bf0:	42 81       	ldd	r20, Z+2	; 0x02
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	a4 0f       	add	r26, r20
    2bf6:	b1 1d       	adc	r27, r1
    2bf8:	6c 93       	st	X, r22
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	8f 5f       	subi	r24, 0xFF	; 255
    2bfe:	82 83       	std	Z+2, r24	; 0x02
    2c00:	e7 cf       	rjmp	.-50     	; 0x2bd0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2c02:	12 82       	std	Z+2, r1	; 0x02
    2c04:	08 95       	ret

00002c06 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    2c06:	cf 93       	push	r28
    2c08:	df 93       	push	r29
    2c0a:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c0e:	9f 77       	andi	r25, 0x7F	; 127
    2c10:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c14:	c8 2f       	mov	r28, r24
    2c16:	d0 e0       	ldi	r29, 0x00	; 0
    2c18:	9a e0       	ldi	r25, 0x0A	; 10
    2c1a:	89 9f       	mul	r24, r25
    2c1c:	f0 01       	movw	r30, r0
    2c1e:	11 24       	eor	r1, r1
    2c20:	e5 55       	subi	r30, 0x55	; 85
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	20 85       	ldd	r18, Z+8	; 0x08
    2c26:	31 85       	ldd	r19, Z+9	; 0x09
    2c28:	23 2b       	or	r18, r19
    2c2a:	41 f0       	breq	.+16     	; 0x2c3c <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2c2c:	22 81       	ldd	r18, Z+2	; 0x02
    2c2e:	94 81       	ldd	r25, Z+4	; 0x04
    2c30:	29 17       	cp	r18, r25
    2c32:	20 f4       	brcc	.+8      	; 0x2c3c <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2c34:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2c38:	97 fd       	sbrc	r25, 7
    2c3a:	11 c0       	rjmp	.+34     	; 0x2c5e <_ZN15OrangutanSerial15serial_rx_checkEh+0x58>
    2c3c:	8a e0       	ldi	r24, 0x0A	; 10
    2c3e:	8c 9f       	mul	r24, r28
    2c40:	f0 01       	movw	r30, r0
    2c42:	8d 9f       	mul	r24, r29
    2c44:	f0 0d       	add	r31, r0
    2c46:	11 24       	eor	r1, r1
    2c48:	e5 55       	subi	r30, 0x55	; 85
    2c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4c:	80 81       	ld	r24, Z
    2c4e:	81 11       	cpse	r24, r1
    2c50:	0b c0       	rjmp	.+22     	; 0x2c68 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2c52:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c56:	80 68       	ori	r24, 0x80	; 128
    2c58:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c5c:	05 c0       	rjmp	.+10     	; 0x2c68 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2c5e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2c62:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2c66:	ea cf       	rjmp	.-44     	; 0x2c3c <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	08 95       	ret

00002c6e <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    2c6e:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c72:	9f 77       	andi	r25, 0x7F	; 127
    2c74:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c78:	9a e0       	ldi	r25, 0x0A	; 10
    2c7a:	89 9f       	mul	r24, r25
    2c7c:	f0 01       	movw	r30, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	e5 55       	subi	r30, 0x55	; 85
    2c82:	fe 4f       	sbci	r31, 0xFE	; 254
    2c84:	71 87       	std	Z+9, r23	; 0x09
    2c86:	60 87       	std	Z+8, r22	; 0x08
    2c88:	12 82       	std	Z+2, r1	; 0x02
    2c8a:	44 83       	std	Z+4, r20	; 0x04
    2c8c:	25 83       	std	Z+5, r18	; 0x05
    2c8e:	80 81       	ld	r24, Z
    2c90:	81 11       	cpse	r24, r1
    2c92:	05 c0       	rjmp	.+10     	; 0x2c9e <_ZN15OrangutanSerial14receive_inlineEhPchh+0x30>
    2c94:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c98:	80 68       	ori	r24, 0x80	; 128
    2c9a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c9e:	08 95       	ret

00002ca0 <_ZN15OrangutanSerial7receiveEPch>:
    2ca0:	46 2f       	mov	r20, r22
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <_ZN15OrangutanSerial14receive_inlineEhPchh>
    2cac:	08 95       	ret

00002cae <serial_receive>:
    2cae:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN15OrangutanSerial7receiveEPch>
    2cb2:	08 95       	ret

00002cb4 <__vector_18>:
    2cb4:	1f 92       	push	r1
    2cb6:	0f 92       	push	r0
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	0f 92       	push	r0
    2cbc:	11 24       	eor	r1, r1
    2cbe:	2f 93       	push	r18
    2cc0:	3f 93       	push	r19
    2cc2:	4f 93       	push	r20
    2cc4:	5f 93       	push	r21
    2cc6:	6f 93       	push	r22
    2cc8:	7f 93       	push	r23
    2cca:	8f 93       	push	r24
    2ccc:	9f 93       	push	r25
    2cce:	af 93       	push	r26
    2cd0:	bf 93       	push	r27
    2cd2:	ef 93       	push	r30
    2cd4:	ff 93       	push	r31
    2cd6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2ce0:	ff 91       	pop	r31
    2ce2:	ef 91       	pop	r30
    2ce4:	bf 91       	pop	r27
    2ce6:	af 91       	pop	r26
    2ce8:	9f 91       	pop	r25
    2cea:	8f 91       	pop	r24
    2cec:	7f 91       	pop	r23
    2cee:	6f 91       	pop	r22
    2cf0:	5f 91       	pop	r21
    2cf2:	4f 91       	pop	r20
    2cf4:	3f 91       	pop	r19
    2cf6:	2f 91       	pop	r18
    2cf8:	0f 90       	pop	r0
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	0f 90       	pop	r0
    2cfe:	1f 90       	pop	r1
    2d00:	18 95       	reti

00002d02 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2d02:	9a e0       	ldi	r25, 0x0A	; 10
    2d04:	89 9f       	mul	r24, r25
    2d06:	f0 01       	movw	r30, r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	e5 55       	subi	r30, 0x55	; 85
    2d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0e:	86 81       	ldd	r24, Z+6	; 0x06
    2d10:	97 81       	ldd	r25, Z+7	; 0x07
    2d12:	89 2b       	or	r24, r25
    2d14:	59 f0       	breq	.+22     	; 0x2d2c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	83 81       	ldd	r24, Z+3	; 0x03
    2d1a:	98 17       	cp	r25, r24
    2d1c:	38 f4       	brcc	.+14     	; 0x2d2c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2d1e:	80 81       	ld	r24, Z
    2d20:	81 11       	cpse	r24, r1
    2d22:	04 c0       	rjmp	.+8      	; 0x2d2c <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2d24:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2d28:	80 62       	ori	r24, 0x20	; 32
    2d2a:	03 c0       	rjmp	.+6      	; 0x2d32 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    2d2c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2d30:	8f 7d       	andi	r24, 0xDF	; 223
    2d32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2d36:	08 95       	ret

00002d38 <_ZN15OrangutanSerial15initUART_inlineEh>:
    2d38:	9a e0       	ldi	r25, 0x0A	; 10
    2d3a:	89 9f       	mul	r24, r25
    2d3c:	f0 01       	movw	r30, r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	e5 55       	subi	r30, 0x55	; 85
    2d42:	fe 4f       	sbci	r31, 0xFE	; 254
    2d44:	90 81       	ld	r25, Z
    2d46:	91 11       	cpse	r25, r1
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2d4a:	98 e9       	ldi	r25, 0x98	; 152
    2d4c:	01 c0       	rjmp	.+2      	; 0x2d50 <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    2d4e:	98 e1       	ldi	r25, 0x18	; 24
    2d50:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2d54:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2d58:	78 94       	sei
    2d5a:	08 95       	ret

00002d5c <serial_set_baud_rate>:
    2d5c:	cf 92       	push	r12
    2d5e:	df 92       	push	r13
    2d60:	ef 92       	push	r14
    2d62:	ff 92       	push	r15
    2d64:	6b 01       	movw	r12, r22
    2d66:	7c 01       	movw	r14, r24
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <_ZN15OrangutanSerial15initUART_inlineEh>
    2d6e:	a8 ef       	ldi	r26, 0xF8	; 248
    2d70:	bf ef       	ldi	r27, 0xFF	; 255
    2d72:	a7 01       	movw	r20, r14
    2d74:	96 01       	movw	r18, r12
    2d76:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulohisi3>
    2d7a:	73 5d       	subi	r23, 0xD3	; 211
    2d7c:	8e 4c       	sbci	r24, 0xCE	; 206
    2d7e:	9e 4f       	sbci	r25, 0xFE	; 254
    2d80:	e4 e0       	ldi	r30, 0x04	; 4
    2d82:	22 0f       	add	r18, r18
    2d84:	33 1f       	adc	r19, r19
    2d86:	44 1f       	adc	r20, r20
    2d88:	55 1f       	adc	r21, r21
    2d8a:	ea 95       	dec	r30
    2d8c:	d1 f7       	brne	.-12     	; 0x2d82 <serial_set_baud_rate+0x26>
    2d8e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodsi4>
    2d92:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2d96:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    2d9a:	ff 90       	pop	r15
    2d9c:	ef 90       	pop	r14
    2d9e:	df 90       	pop	r13
    2da0:	cf 90       	pop	r12
    2da2:	08 95       	ret

00002da4 <_ZN15OrangutanSerial4sendEPch>:
    2da4:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <_ZN15OrangutanSerial5portsE+0x7>
    2da8:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <_ZN15OrangutanSerial5portsE+0x6>
    2dac:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x1>
    2db0:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <_ZN15OrangutanSerial5portsE+0x3>
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2dba:	08 95       	ret

00002dbc <serial_send>:
    2dbc:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <_ZN15OrangutanSerial4sendEPch>
    2dc0:	08 95       	ret

00002dc2 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    2dc2:	9a e0       	ldi	r25, 0x0A	; 10
    2dc4:	89 9f       	mul	r24, r25
    2dc6:	f0 01       	movw	r30, r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	e5 55       	subi	r30, 0x55	; 85
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	26 81       	ldd	r18, Z+6	; 0x06
    2dd0:	37 81       	ldd	r19, Z+7	; 0x07
    2dd2:	21 15       	cp	r18, r1
    2dd4:	31 05       	cpc	r19, r1
    2dd6:	41 f0       	breq	.+16     	; 0x2de8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2dd8:	41 81       	ldd	r20, Z+1	; 0x01
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	49 17       	cp	r20, r25
    2dde:	20 f4       	brcc	.+8      	; 0x2de8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2de0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2de4:	95 fd       	sbrc	r25, 5
    2de6:	03 c0       	rjmp	.+6      	; 0x2dee <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    2de8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2dec:	08 95       	ret
    2dee:	91 81       	ldd	r25, Z+1	; 0x01
    2df0:	d9 01       	movw	r26, r18
    2df2:	a9 0f       	add	r26, r25
    2df4:	b1 1d       	adc	r27, r1
    2df6:	9c 91       	ld	r25, X
    2df8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2dfc:	91 81       	ldd	r25, Z+1	; 0x01
    2dfe:	9f 5f       	subi	r25, 0xFF	; 255
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	f2 cf       	rjmp	.-28     	; 0x2de8 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

00002e04 <_ZN15OrangutanSerial5checkEv>:
    2e04:	e1 ec       	ldi	r30, 0xC1	; 193
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	8f 7d       	andi	r24, 0xDF	; 223
    2e0c:	80 83       	st	Z, r24
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN15OrangutanSerial15serial_rx_checkEh>
    2e1a:	08 95       	ret

00002e1c <_ZN15OrangutanSerial12sendBlockingEPch>:
    2e1c:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <_ZN15OrangutanSerial5portsE+0x7>
    2e20:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <_ZN15OrangutanSerial5portsE+0x6>
    2e24:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x1>
    2e28:	60 93 ae 01 	sts	0x01AE, r22	; 0x8001ae <_ZN15OrangutanSerial5portsE+0x3>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2e32:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x1>
    2e36:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <_ZN15OrangutanSerial5portsE+0x3>
    2e3a:	98 17       	cp	r25, r24
    2e3c:	19 f0       	breq	.+6      	; 0x2e44 <_ZN15OrangutanSerial12sendBlockingEPch+0x28>
    2e3e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <_ZN15OrangutanSerial5checkEv>
    2e42:	f7 cf       	rjmp	.-18     	; 0x2e32 <_ZN15OrangutanSerial12sendBlockingEPch+0x16>
    2e44:	08 95       	ret

00002e46 <serial_send_blocking>:
    2e46:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <_ZN15OrangutanSerial12sendBlockingEPch>
    2e4a:	08 95       	ret

00002e4c <__vector_19>:
    2e4c:	1f 92       	push	r1
    2e4e:	0f 92       	push	r0
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	0f 92       	push	r0
    2e54:	11 24       	eor	r1, r1
    2e56:	2f 93       	push	r18
    2e58:	3f 93       	push	r19
    2e5a:	4f 93       	push	r20
    2e5c:	5f 93       	push	r21
    2e5e:	6f 93       	push	r22
    2e60:	7f 93       	push	r23
    2e62:	8f 93       	push	r24
    2e64:	9f 93       	push	r25
    2e66:	af 93       	push	r26
    2e68:	bf 93       	push	r27
    2e6a:	ef 93       	push	r30
    2e6c:	ff 93       	push	r31
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2e74:	ff 91       	pop	r31
    2e76:	ef 91       	pop	r30
    2e78:	bf 91       	pop	r27
    2e7a:	af 91       	pop	r26
    2e7c:	9f 91       	pop	r25
    2e7e:	8f 91       	pop	r24
    2e80:	7f 91       	pop	r23
    2e82:	6f 91       	pop	r22
    2e84:	5f 91       	pop	r21
    2e86:	4f 91       	pop	r20
    2e88:	3f 91       	pop	r19
    2e8a:	2f 91       	pop	r18
    2e8c:	0f 90       	pop	r0
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	0f 90       	pop	r0
    2e92:	1f 90       	pop	r1
    2e94:	18 95       	reti

00002e96 <__vector_9>:
    2e96:	2f 92       	push	r2
    2e98:	8f 93       	push	r24
    2e9a:	9f 93       	push	r25
    2e9c:	2f b6       	in	r2, 0x3f	; 63
    2e9e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <tickCount+0x1>
    2ea2:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <tickCount+0x2>
    2ea6:	01 96       	adiw	r24, 0x01	; 1
    2ea8:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <tickCount+0x1>
    2eac:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <tickCount+0x2>
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <tickCount+0x3>
    2eb6:	89 1f       	adc	r24, r25
    2eb8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <tickCount+0x3>
    2ebc:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <us_over_10+0x1>
    2ec0:	9c 5f       	subi	r25, 0xFC	; 252
    2ec2:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <us_over_10+0x1>
    2ec6:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <us_over_10>
    2eca:	80 51       	subi	r24, 0x10	; 16
    2ecc:	97 42       	sbci	r25, 0x27	; 39
    2ece:	c0 f0       	brcs	.+48     	; 0x2f00 <end>
    2ed0:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <us_over_10+0x1>
    2ed4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <us_over_10>
    2ed8:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <msCounter>
    2edc:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <msCounter+0x1>
    2ee0:	01 96       	adiw	r24, 0x01	; 1
    2ee2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <msCounter>
    2ee6:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <msCounter+0x1>
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <msCounter+0x2>
    2ef0:	89 1f       	adc	r24, r25
    2ef2:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <msCounter+0x2>
    2ef6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <msCounter+0x3>
    2efa:	89 1f       	adc	r24, r25
    2efc:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <msCounter+0x3>

00002f00 <end>:
    2f00:	2f be       	out	0x3f, r2	; 63
    2f02:	9f 91       	pop	r25
    2f04:	8f 91       	pop	r24
    2f06:	2f 90       	pop	r2
    2f08:	18 95       	reti

00002f0a <_ZN13OrangutanTime17delayMillisecondsEj>:
    2f0a:	28 ee       	ldi	r18, 0xE8	; 232
    2f0c:	33 e0       	ldi	r19, 0x03	; 3
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	48 f0       	brcs	.+18     	; 0x2f24 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2f12:	f9 01       	movw	r30, r18
    2f14:	6f 93       	push	r22
    2f16:	64 e0       	ldi	r22, 0x04	; 4
    2f18:	6a 95       	dec	r22
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2f1c:	6f 91       	pop	r22
    2f1e:	31 97       	sbiw	r30, 0x01	; 1
    2f20:	c9 f7       	brne	.-14     	; 0x2f14 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2f22:	f5 cf       	rjmp	.-22     	; 0x2f0e <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2f24:	08 95       	ret

00002f26 <delay_ms>:
    2f26:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_ZN13OrangutanTime17delayMillisecondsEj>
    2f2a:	08 95       	ret

00002f2c <_ZN13OrangutanTime5init2Ev>:
    2f2c:	e0 e7       	ldi	r30, 0x70	; 112
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	8e 7f       	andi	r24, 0xFE	; 254
    2f34:	80 83       	st	Z, r24
    2f36:	a0 eb       	ldi	r26, 0xB0	; 176
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	8c 91       	ld	r24, X
    2f3c:	83 60       	ori	r24, 0x03	; 3
    2f3e:	8c 93       	st	X, r24
    2f40:	a1 eb       	ldi	r26, 0xB1	; 177
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	8c 91       	ld	r24, X
    2f46:	80 7f       	andi	r24, 0xF0	; 240
    2f48:	8c 93       	st	X, r24
    2f4a:	8c 91       	ld	r24, X
    2f4c:	82 60       	ori	r24, 0x02	; 2
    2f4e:	8c 93       	st	X, r24
    2f50:	b8 9a       	sbi	0x17, 0	; 23
    2f52:	80 81       	ld	r24, Z
    2f54:	81 60       	ori	r24, 0x01	; 1
    2f56:	80 83       	st	Z, r24
    2f58:	78 94       	sei
    2f5a:	08 95       	ret

00002f5c <_ZN13OrangutanTime4initEv>:
    2f5c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <_ZZN13OrangutanTime4initEvE11initialized>
    2f60:	81 11       	cpse	r24, r1
    2f62:	05 c0       	rjmp	.+10     	; 0x2f6e <_ZN13OrangutanTime4initEv+0x12>
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <_ZZN13OrangutanTime4initEvE11initialized>
    2f6a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <_ZN13OrangutanTime5init2Ev>
    2f6e:	08 95       	ret

00002f70 <_ZN13OrangutanTime2msEv>:
    2f70:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN13OrangutanTime4initEv>
    2f74:	e0 e7       	ldi	r30, 0x70	; 112
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	8e 7f       	andi	r24, 0xFE	; 254
    2f7c:	80 83       	st	Z, r24
    2f7e:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <msCounter>
    2f82:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <msCounter+0x1>
    2f86:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <msCounter+0x2>
    2f8a:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <msCounter+0x3>
    2f8e:	20 81       	ld	r18, Z
    2f90:	21 60       	ori	r18, 0x01	; 1
    2f92:	20 83       	st	Z, r18
    2f94:	08 95       	ret

00002f96 <get_ms>:
    2f96:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <_ZN13OrangutanTime2msEv>
    2f9a:	08 95       	ret

00002f9c <_ZN13OrangutanTime5resetEv>:
    2f9c:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN13OrangutanTime4initEv>
    2fa0:	e0 e7       	ldi	r30, 0x70	; 112
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	8e 7f       	andi	r24, 0xFE	; 254
    2fa8:	80 83       	st	Z, r24
    2faa:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <msCounter>
    2fae:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <msCounter+0x1>
    2fb2:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <msCounter+0x2>
    2fb6:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <msCounter+0x3>
    2fba:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <us_over_10+0x1>
    2fbe:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <us_over_10>
    2fc2:	80 81       	ld	r24, Z
    2fc4:	81 60       	ori	r24, 0x01	; 1
    2fc6:	80 83       	st	Z, r24
    2fc8:	08 95       	ret

00002fca <calibrate_line_sensors>:
    2fca:	68 2f       	mov	r22, r24
    2fcc:	8f eb       	ldi	r24, 0xBF	; 191
    2fce:	91 e0       	ldi	r25, 0x01	; 1
    2fd0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <_ZN16PololuQTRSensors9calibrateEh>
    2fd4:	08 95       	ret

00002fd6 <read_line_sensors_calibrated>:
    2fd6:	46 2f       	mov	r20, r22
    2fd8:	bc 01       	movw	r22, r24
    2fda:	8f eb       	ldi	r24, 0xBF	; 191
    2fdc:	91 e0       	ldi	r25, 0x01	; 1
    2fde:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2fe2:	08 95       	ret

00002fe4 <read_line>:
    2fe4:	46 2f       	mov	r20, r22
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	bc 01       	movw	r22, r24
    2fea:	8f eb       	ldi	r24, 0xBF	; 191
    2fec:	91 e0       	ldi	r25, 0x01	; 1
    2fee:	0e 94 a5 1c 	call	0x394a	; 0x394a <_ZN16PololuQTRSensors8readLineEPjhh>
    2ff2:	08 95       	ret

00002ff4 <_ZN9Pololu3pi4initEjh>:
    2ff4:	0f 93       	push	r16
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <_ZN9Pololu3pi4initEjh+0x8>
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <_ZN9Pololu3pi4initEjh+0xa>
    2ffe:	1f 92       	push	r1
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	9c 01       	movw	r18, r24
    3006:	85 e0       	ldi	r24, 0x05	; 5
    3008:	e0 e5       	ldi	r30, 0x50	; 80
    300a:	f1 e0       	ldi	r31, 0x01	; 1
    300c:	de 01       	movw	r26, r28
    300e:	11 96       	adiw	r26, 0x01	; 1
    3010:	01 90       	ld	r0, Z+
    3012:	0d 92       	st	X+, r0
    3014:	8a 95       	dec	r24
    3016:	e1 f7       	brne	.-8      	; 0x3010 <_ZN9Pololu3pi4initEjh+0x1c>
    3018:	66 23       	and	r22, r22
    301a:	11 f0       	breq	.+4      	; 0x3020 <_ZN9Pololu3pi4initEjh+0x2c>
    301c:	0f ef       	ldi	r16, 0xFF	; 255
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <_ZN9Pololu3pi4initEjh+0x2e>
    3020:	03 e1       	ldi	r16, 0x13	; 19
    3022:	45 e0       	ldi	r20, 0x05	; 5
    3024:	be 01       	movw	r22, r28
    3026:	6f 5f       	subi	r22, 0xFF	; 255
    3028:	7f 4f       	sbci	r23, 0xFF	; 255
    302a:	8f eb       	ldi	r24, 0xBF	; 191
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	0e 94 cc 18 	call	0x3198	; 0x3198 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    3032:	8f eb       	ldi	r24, 0xBF	; 191
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	0e 94 a3 18 	call	0x3146	; 0x3146 <_ZN16PololuQTRSensors11emittersOffEv>
    303a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN13OrangutanTime5resetEv>
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	0f 91       	pop	r16
    304e:	08 95       	ret

00003050 <pololu_3pi_init>:
    3050:	60 e0       	ldi	r22, 0x00	; 0
    3052:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_ZN9Pololu3pi4initEjh>
    3056:	08 95       	ret

00003058 <_GLOBAL__sub_D_pololu_3pi_init>:
    3058:	8f eb       	ldi	r24, 0xBF	; 191
    305a:	91 e0       	ldi	r25, 0x01	; 1
    305c:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN16PololuQTRSensorsD1Ev>
    3060:	08 95       	ret

00003062 <delay_us>:
    3062:	6f 93       	push	r22
    3064:	64 e0       	ldi	r22, 0x04	; 4
    3066:	6a 95       	dec	r22
    3068:	f1 f7       	brne	.-4      	; 0x3066 <delay_us+0x4>
    306a:	6f 91       	pop	r22
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	c9 f7       	brne	.-14     	; 0x3062 <delay_us>
    3070:	08 95       	ret

00003072 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    3072:	fc 01       	movw	r30, r24
    3074:	11 82       	std	Z+1, r1	; 0x01
    3076:	10 82       	st	Z, r1
    3078:	13 82       	std	Z+3, r1	; 0x03
    307a:	12 82       	std	Z+2, r1	; 0x02
    307c:	15 82       	std	Z+5, r1	; 0x05
    307e:	14 82       	std	Z+4, r1	; 0x04
    3080:	16 82       	std	Z+6, r1	; 0x06
    3082:	68 30       	cpi	r22, 0x08	; 8
    3084:	68 f4       	brcc	.+26     	; 0x30a0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    3086:	89 e2       	ldi	r24, 0x29	; 41
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	91 83       	std	Z+1, r25	; 0x01
    308c:	80 83       	st	Z, r24
    308e:	8b e2       	ldi	r24, 0x2B	; 43
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	93 83       	std	Z+3, r25	; 0x03
    3094:	82 83       	std	Z+2, r24	; 0x02
    3096:	8a e2       	ldi	r24, 0x2A	; 42
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	95 83       	std	Z+5, r25	; 0x05
    309c:	84 83       	std	Z+4, r24	; 0x04
    309e:	1f c0       	rjmp	.+62     	; 0x30de <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    30a0:	6e 30       	cpi	r22, 0x0E	; 14
    30a2:	70 f4       	brcc	.+28     	; 0x30c0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    30a4:	83 e2       	ldi	r24, 0x23	; 35
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	80 83       	st	Z, r24
    30ac:	85 e2       	ldi	r24, 0x25	; 37
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	93 83       	std	Z+3, r25	; 0x03
    30b2:	82 83       	std	Z+2, r24	; 0x02
    30b4:	84 e2       	ldi	r24, 0x24	; 36
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	95 83       	std	Z+5, r25	; 0x05
    30ba:	84 83       	std	Z+4, r24	; 0x04
    30bc:	68 50       	subi	r22, 0x08	; 8
    30be:	0f c0       	rjmp	.+30     	; 0x30de <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    30c0:	65 31       	cpi	r22, 0x15	; 21
    30c2:	98 f4       	brcc	.+38     	; 0x30ea <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    30c4:	86 e2       	ldi	r24, 0x26	; 38
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
    30cc:	88 e2       	ldi	r24, 0x28	; 40
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	93 83       	std	Z+3, r25	; 0x03
    30d2:	82 83       	std	Z+2, r24	; 0x02
    30d4:	87 e2       	ldi	r24, 0x27	; 39
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	95 83       	std	Z+5, r25	; 0x05
    30da:	84 83       	std	Z+4, r24	; 0x04
    30dc:	6e 50       	subi	r22, 0x0E	; 14
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	01 c0       	rjmp	.+2      	; 0x30e4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    30e2:	88 0f       	add	r24, r24
    30e4:	6a 95       	dec	r22
    30e6:	ea f7       	brpl	.-6      	; 0x30e2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    30e8:	86 83       	std	Z+6, r24	; 0x06
    30ea:	08 95       	ret

000030ec <_ZN16PololuQTRSensors4initEhhh>:
    30ec:	a7 e0       	ldi	r26, 0x07	; 7
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	ec e7       	ldi	r30, 0x7C	; 124
    30f2:	f8 e1       	ldi	r31, 0x18	; 24
    30f4:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__prologue_saves__+0x1c>
    30f8:	8c 01       	movw	r16, r24
    30fa:	fc 01       	movw	r30, r24
    30fc:	11 82       	std	Z+1, r1	; 0x01
    30fe:	10 82       	st	Z, r1
    3100:	13 82       	std	Z+3, r1	; 0x03
    3102:	12 82       	std	Z+2, r1	; 0x02
    3104:	15 82       	std	Z+5, r1	; 0x05
    3106:	14 82       	std	Z+4, r1	; 0x04
    3108:	17 82       	std	Z+7, r1	; 0x07
    310a:	16 82       	std	Z+6, r1	; 0x06
    310c:	61 31       	cpi	r22, 0x11	; 17
    310e:	18 f0       	brcs	.+6      	; 0x3116 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    3110:	80 e1       	ldi	r24, 0x10	; 16
    3112:	80 87       	std	Z+8, r24	; 0x08
    3114:	02 c0       	rjmp	.+4      	; 0x311a <_ZN16PololuQTRSensors4initEhhh+0x2e>
    3116:	fc 01       	movw	r30, r24
    3118:	60 87       	std	Z+8, r22	; 0x08
    311a:	f8 01       	movw	r30, r16
    311c:	20 8b       	std	Z+16, r18	; 0x10
    311e:	64 2f       	mov	r22, r20
    3120:	ce 01       	movw	r24, r28
    3122:	01 96       	adiw	r24, 0x01	; 1
    3124:	0e 94 39 18 	call	0x3072	; 0x3072 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    3128:	8f 81       	ldd	r24, Y+7	; 0x07
    312a:	f8 01       	movw	r30, r16
    312c:	81 87       	std	Z+9, r24	; 0x09
    312e:	8b 81       	ldd	r24, Y+3	; 0x03
    3130:	9c 81       	ldd	r25, Y+4	; 0x04
    3132:	93 87       	std	Z+11, r25	; 0x0b
    3134:	82 87       	std	Z+10, r24	; 0x0a
    3136:	8d 81       	ldd	r24, Y+5	; 0x05
    3138:	9e 81       	ldd	r25, Y+6	; 0x06
    313a:	95 87       	std	Z+13, r25	; 0x0d
    313c:	84 87       	std	Z+12, r24	; 0x0c
    313e:	27 96       	adiw	r28, 0x07	; 7
    3140:	e4 e0       	ldi	r30, 0x04	; 4
    3142:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__epilogue_restores__+0x1c>

00003146 <_ZN16PololuQTRSensors11emittersOffEv>:
    3146:	fc 01       	movw	r30, r24
    3148:	a4 85       	ldd	r26, Z+12	; 0x0c
    314a:	b5 85       	ldd	r27, Z+13	; 0x0d
    314c:	10 97       	sbiw	r26, 0x00	; 0
    314e:	79 f0       	breq	.+30     	; 0x316e <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    3150:	8c 91       	ld	r24, X
    3152:	91 85       	ldd	r25, Z+9	; 0x09
    3154:	89 2b       	or	r24, r25
    3156:	8c 93       	st	X, r24
    3158:	a2 85       	ldd	r26, Z+10	; 0x0a
    315a:	b3 85       	ldd	r27, Z+11	; 0x0b
    315c:	9c 91       	ld	r25, X
    315e:	81 85       	ldd	r24, Z+9	; 0x09
    3160:	80 95       	com	r24
    3162:	89 23       	and	r24, r25
    3164:	8c 93       	st	X, r24
    3166:	88 ec       	ldi	r24, 0xC8	; 200
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	0e 94 31 18 	call	0x3062	; 0x3062 <delay_us>
    316e:	08 95       	ret

00003170 <_ZN16PololuQTRSensors10emittersOnEv>:
    3170:	fc 01       	movw	r30, r24
    3172:	a4 85       	ldd	r26, Z+12	; 0x0c
    3174:	b5 85       	ldd	r27, Z+13	; 0x0d
    3176:	10 97       	sbiw	r26, 0x00	; 0
    3178:	71 f0       	breq	.+28     	; 0x3196 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    317a:	8c 91       	ld	r24, X
    317c:	91 85       	ldd	r25, Z+9	; 0x09
    317e:	89 2b       	or	r24, r25
    3180:	8c 93       	st	X, r24
    3182:	a2 85       	ldd	r26, Z+10	; 0x0a
    3184:	b3 85       	ldd	r27, Z+11	; 0x0b
    3186:	8c 91       	ld	r24, X
    3188:	91 85       	ldd	r25, Z+9	; 0x09
    318a:	89 2b       	or	r24, r25
    318c:	8c 93       	st	X, r24
    318e:	88 ec       	ldi	r24, 0xC8	; 200
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 31 18 	call	0x3062	; 0x3062 <delay_us>
    3196:	08 95       	ret

00003198 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    3198:	a7 e0       	ldi	r26, 0x07	; 7
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e2 ed       	ldi	r30, 0xD2	; 210
    319e:	f8 e1       	ldi	r31, 0x18	; 24
    31a0:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__prologue_saves__+0x6>
    31a4:	7c 01       	movw	r14, r24
    31a6:	4b 01       	movw	r8, r22
    31a8:	64 2f       	mov	r22, r20
    31aa:	39 01       	movw	r6, r18
    31ac:	40 2f       	mov	r20, r16
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	0e 94 76 18 	call	0x30ec	; 0x30ec <_ZN16PololuQTRSensors4initEhhh>
    31b4:	87 01       	movw	r16, r14
    31b6:	0f 5b       	subi	r16, 0xBF	; 191
    31b8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ba:	f8 01       	movw	r30, r16
    31bc:	10 82       	st	Z, r1
    31be:	67 01       	movw	r12, r14
    31c0:	f2 e4       	ldi	r31, 0x42	; 66
    31c2:	cf 0e       	add	r12, r31
    31c4:	d1 1c       	adc	r13, r1
    31c6:	f6 01       	movw	r30, r12
    31c8:	10 82       	st	Z, r1
    31ca:	57 01       	movw	r10, r14
    31cc:	f3 e4       	ldi	r31, 0x43	; 67
    31ce:	af 0e       	add	r10, r31
    31d0:	b1 1c       	adc	r11, r1
    31d2:	f5 01       	movw	r30, r10
    31d4:	10 82       	st	Z, r1
    31d6:	f7 01       	movw	r30, r14
    31d8:	77 86       	std	Z+15, r7	; 0x0f
    31da:	66 86       	std	Z+14, r6	; 0x0e
    31dc:	51 2c       	mov	r5, r1
    31de:	f7 01       	movw	r30, r14
    31e0:	80 85       	ldd	r24, Z+8	; 0x08
    31e2:	58 16       	cp	r5, r24
    31e4:	50 f5       	brcc	.+84     	; 0x323a <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    31e6:	65 2c       	mov	r6, r5
    31e8:	71 2c       	mov	r7, r1
    31ea:	f4 01       	movw	r30, r8
    31ec:	e6 0d       	add	r30, r6
    31ee:	f7 1d       	adc	r31, r7
    31f0:	60 81       	ld	r22, Z
    31f2:	ce 01       	movw	r24, r28
    31f4:	01 96       	adiw	r24, 0x01	; 1
    31f6:	0e 94 39 18 	call	0x3072	; 0x3072 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    31fa:	2f 81       	ldd	r18, Y+7	; 0x07
    31fc:	f7 01       	movw	r30, r14
    31fe:	e6 0d       	add	r30, r6
    3200:	f7 1d       	adc	r31, r7
    3202:	21 8b       	std	Z+17, r18	; 0x11
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	f3 01       	movw	r30, r6
    320a:	ee 0f       	add	r30, r30
    320c:	ff 1f       	adc	r31, r31
    320e:	ee 0d       	add	r30, r14
    3210:	ff 1d       	adc	r31, r15
    3212:	92 a3       	std	Z+34, r25	; 0x22
    3214:	81 a3       	std	Z+33, r24	; 0x21
    3216:	83 32       	cpi	r24, 0x23	; 35
    3218:	91 05       	cpc	r25, r1
    321a:	11 f4       	brne	.+4      	; 0x3220 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    321c:	f8 01       	movw	r30, r16
    321e:	08 c0       	rjmp	.+16     	; 0x3230 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    3220:	86 32       	cpi	r24, 0x26	; 38
    3222:	91 05       	cpc	r25, r1
    3224:	11 f4       	brne	.+4      	; 0x322a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    3226:	f6 01       	movw	r30, r12
    3228:	03 c0       	rjmp	.+6      	; 0x3230 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    322a:	89 97       	sbiw	r24, 0x29	; 41
    322c:	21 f4       	brne	.+8      	; 0x3236 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    322e:	f5 01       	movw	r30, r10
    3230:	80 81       	ld	r24, Z
    3232:	82 2b       	or	r24, r18
    3234:	80 83       	st	Z, r24
    3236:	53 94       	inc	r5
    3238:	d2 cf       	rjmp	.-92     	; 0x31de <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    323a:	27 96       	adiw	r28, 0x07	; 7
    323c:	ef e0       	ldi	r30, 0x0F	; 15
    323e:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__epilogue_restores__+0x6>

00003242 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    3242:	a0 e0       	ldi	r26, 0x00	; 0
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	e7 e2       	ldi	r30, 0x27	; 39
    3248:	f9 e1       	ldi	r31, 0x19	; 25
    324a:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <__prologue_saves__+0xa>
    324e:	ec 01       	movw	r28, r24
    3250:	5b 01       	movw	r10, r22
    3252:	6c 01       	movw	r12, r24
    3254:	81 e4       	ldi	r24, 0x41	; 65
    3256:	c8 0e       	add	r12, r24
    3258:	d1 1c       	adc	r13, r1
    325a:	f6 01       	movw	r30, r12
    325c:	80 80       	ld	r8, Z
    325e:	7e 01       	movw	r14, r28
    3260:	f2 e4       	ldi	r31, 0x42	; 66
    3262:	ef 0e       	add	r14, r31
    3264:	f1 1c       	adc	r15, r1
    3266:	f7 01       	movw	r30, r14
    3268:	70 80       	ld	r7, Z
    326a:	8e 01       	movw	r16, r28
    326c:	0d 5b       	subi	r16, 0xBD	; 189
    326e:	1f 4f       	sbci	r17, 0xFF	; 255
    3270:	f8 01       	movw	r30, r16
    3272:	90 80       	ld	r9, Z
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	98 85       	ldd	r25, Y+8	; 0x08
    3278:	89 17       	cp	r24, r25
    327a:	48 f4       	brcc	.+18     	; 0x328e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    327c:	f5 01       	movw	r30, r10
    327e:	e8 0f       	add	r30, r24
    3280:	f1 1d       	adc	r31, r1
    3282:	e8 0f       	add	r30, r24
    3284:	f1 1d       	adc	r31, r1
    3286:	11 82       	std	Z+1, r1	; 0x01
    3288:	10 82       	st	Z, r1
    328a:	8f 5f       	subi	r24, 0xFF	; 255
    328c:	f4 cf       	rjmp	.-24     	; 0x3276 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    328e:	84 b1       	in	r24, 0x04	; 4
    3290:	f6 01       	movw	r30, r12
    3292:	90 81       	ld	r25, Z
    3294:	89 2b       	or	r24, r25
    3296:	84 b9       	out	0x04, r24	; 4
    3298:	87 b1       	in	r24, 0x07	; 7
    329a:	f7 01       	movw	r30, r14
    329c:	90 81       	ld	r25, Z
    329e:	89 2b       	or	r24, r25
    32a0:	87 b9       	out	0x07, r24	; 7
    32a2:	8a b1       	in	r24, 0x0a	; 10
    32a4:	f8 01       	movw	r30, r16
    32a6:	90 81       	ld	r25, Z
    32a8:	89 2b       	or	r24, r25
    32aa:	8a b9       	out	0x0a, r24	; 10
    32ac:	85 b1       	in	r24, 0x05	; 5
    32ae:	f6 01       	movw	r30, r12
    32b0:	90 81       	ld	r25, Z
    32b2:	89 2b       	or	r24, r25
    32b4:	85 b9       	out	0x05, r24	; 5
    32b6:	88 b1       	in	r24, 0x08	; 8
    32b8:	f7 01       	movw	r30, r14
    32ba:	90 81       	ld	r25, Z
    32bc:	89 2b       	or	r24, r25
    32be:	88 b9       	out	0x08, r24	; 8
    32c0:	8b b1       	in	r24, 0x0b	; 11
    32c2:	f8 01       	movw	r30, r16
    32c4:	90 81       	ld	r25, Z
    32c6:	89 2b       	or	r24, r25
    32c8:	8b b9       	out	0x0b, r24	; 11
    32ca:	8a e0       	ldi	r24, 0x0A	; 10
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	0e 94 31 18 	call	0x3062	; 0x3062 <delay_us>
    32d2:	94 b1       	in	r25, 0x04	; 4
    32d4:	f6 01       	movw	r30, r12
    32d6:	80 81       	ld	r24, Z
    32d8:	80 95       	com	r24
    32da:	89 23       	and	r24, r25
    32dc:	84 b9       	out	0x04, r24	; 4
    32de:	97 b1       	in	r25, 0x07	; 7
    32e0:	f7 01       	movw	r30, r14
    32e2:	80 81       	ld	r24, Z
    32e4:	80 95       	com	r24
    32e6:	89 23       	and	r24, r25
    32e8:	87 b9       	out	0x07, r24	; 7
    32ea:	9a b1       	in	r25, 0x0a	; 10
    32ec:	f8 01       	movw	r30, r16
    32ee:	80 81       	ld	r24, Z
    32f0:	80 95       	com	r24
    32f2:	89 23       	and	r24, r25
    32f4:	8a b9       	out	0x0a, r24	; 10
    32f6:	95 b1       	in	r25, 0x05	; 5
    32f8:	f6 01       	movw	r30, r12
    32fa:	80 81       	ld	r24, Z
    32fc:	80 95       	com	r24
    32fe:	89 23       	and	r24, r25
    3300:	85 b9       	out	0x05, r24	; 5
    3302:	98 b1       	in	r25, 0x08	; 8
    3304:	f7 01       	movw	r30, r14
    3306:	80 81       	ld	r24, Z
    3308:	80 95       	com	r24
    330a:	89 23       	and	r24, r25
    330c:	88 b9       	out	0x08, r24	; 8
    330e:	9b b1       	in	r25, 0x0b	; 11
    3310:	f8 01       	movw	r30, r16
    3312:	80 81       	ld	r24, Z
    3314:	80 95       	com	r24
    3316:	89 23       	and	r24, r25
    3318:	8b b9       	out	0x0b, r24	; 11
    331a:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    331e:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3322:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3326:	83 60       	ori	r24, 0x03	; 3
    3328:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    332c:	82 e0       	ldi	r24, 0x02	; 2
    332e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3332:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	2e 85       	ldd	r18, Y+14	; 0x0e
    333c:	3f 85       	ldd	r19, Y+15	; 0x0f
    333e:	82 17       	cp	r24, r18
    3340:	93 07       	cpc	r25, r19
    3342:	20 f5       	brcc	.+72     	; 0x338c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    3344:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    3348:	2c 2d       	mov	r18, r12
    334a:	24 1b       	sub	r18, r20
    334c:	82 0f       	add	r24, r18
    334e:	91 1d       	adc	r25, r1
    3350:	03 b1       	in	r16, 0x03	; 3
    3352:	08 11       	cpse	r16, r8
    3354:	32 c0       	rjmp	.+100    	; 0x33ba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    3356:	f6 b0       	in	r15, 0x06	; 6
    3358:	f7 10       	cpse	r15, r7
    335a:	2f c0       	rjmp	.+94     	; 0x33ba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    335c:	29 b1       	in	r18, 0x09	; 9
    335e:	29 11       	cpse	r18, r9
    3360:	2c c0       	rjmp	.+88     	; 0x33ba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    3362:	10 c0       	rjmp	.+32     	; 0x3384 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    3364:	21 2f       	mov	r18, r17
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	a9 01       	movw	r20, r18
    336a:	44 0f       	add	r20, r20
    336c:	55 1f       	adc	r21, r21
    336e:	f5 01       	movw	r30, r10
    3370:	e4 0f       	add	r30, r20
    3372:	f5 1f       	adc	r31, r21
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	67 2b       	or	r22, r23
    337a:	21 f1       	breq	.+72     	; 0x33c4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    337c:	1f 5f       	subi	r17, 0xFF	; 255
    337e:	28 85       	ldd	r18, Y+8	; 0x08
    3380:	12 17       	cp	r17, r18
    3382:	80 f3       	brcs	.-32     	; 0x3364 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    3384:	7f 2c       	mov	r7, r15
    3386:	80 2e       	mov	r8, r16
    3388:	4c 2d       	mov	r20, r12
    338a:	d7 cf       	rjmp	.-82     	; 0x333a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    338c:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3390:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	88 85       	ldd	r24, Y+8	; 0x08
    3398:	28 17       	cp	r18, r24
    339a:	30 f5       	brcc	.+76     	; 0x33e8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    339c:	f5 01       	movw	r30, r10
    339e:	e2 0f       	add	r30, r18
    33a0:	f1 1d       	adc	r31, r1
    33a2:	e2 0f       	add	r30, r18
    33a4:	f1 1d       	adc	r31, r1
    33a6:	80 81       	ld	r24, Z
    33a8:	91 81       	ldd	r25, Z+1	; 0x01
    33aa:	89 2b       	or	r24, r25
    33ac:	21 f4       	brne	.+8      	; 0x33b6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    33ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    33b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	80 83       	st	Z, r24
    33b6:	2f 5f       	subi	r18, 0xFF	; 255
    33b8:	ee cf       	rjmp	.-36     	; 0x3396 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    33ba:	03 b1       	in	r16, 0x03	; 3
    33bc:	f6 b0       	in	r15, 0x06	; 6
    33be:	99 b0       	in	r9, 0x09	; 9
    33c0:	10 e0       	ldi	r17, 0x00	; 0
    33c2:	dd cf       	rjmp	.-70     	; 0x337e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    33c4:	de 01       	movw	r26, r28
    33c6:	a4 0f       	add	r26, r20
    33c8:	b5 1f       	adc	r27, r21
    33ca:	91 96       	adiw	r26, 0x21	; 33
    33cc:	0d 90       	ld	r0, X+
    33ce:	bc 91       	ld	r27, X
    33d0:	a0 2d       	mov	r26, r0
    33d2:	4c 91       	ld	r20, X
    33d4:	de 01       	movw	r26, r28
    33d6:	a2 0f       	add	r26, r18
    33d8:	b3 1f       	adc	r27, r19
    33da:	51 96       	adiw	r26, 0x11	; 17
    33dc:	2c 91       	ld	r18, X
    33de:	42 23       	and	r20, r18
    33e0:	69 f6       	brne	.-102    	; 0x337c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    33e2:	91 83       	std	Z+1, r25	; 0x01
    33e4:	80 83       	st	Z, r24
    33e6:	ca cf       	rjmp	.-108    	; 0x337c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	ed e0       	ldi	r30, 0x0D	; 13
    33ee:	0c 94 f6 1d 	jmp	0x3bec	; 0x3bec <__epilogue_restores__+0xa>

000033f2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    33f2:	ef 92       	push	r14
    33f4:	ff 92       	push	r15
    33f6:	0f 93       	push	r16
    33f8:	1f 93       	push	r17
    33fa:	cf 93       	push	r28
    33fc:	df 93       	push	r29
    33fe:	fc 01       	movw	r30, r24
    3400:	9b 01       	movw	r18, r22
    3402:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    3406:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    340a:	47 b1       	in	r20, 0x07	; 7
    340c:	18 b1       	in	r17, 0x08	; 8
    340e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3412:	86 fd       	sbrc	r24, 6
    3414:	fc cf       	rjmp	.-8      	; 0x340e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 85       	ldd	r25, Z+8	; 0x08
    341a:	89 17       	cp	r24, r25
    341c:	48 f4       	brcc	.+18     	; 0x3430 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    341e:	d9 01       	movw	r26, r18
    3420:	a8 0f       	add	r26, r24
    3422:	b1 1d       	adc	r27, r1
    3424:	a8 0f       	add	r26, r24
    3426:	b1 1d       	adc	r27, r1
    3428:	1d 92       	st	X+, r1
    342a:	1c 92       	st	X, r1
    342c:	8f 5f       	subi	r24, 0xFF	; 255
    342e:	f4 cf       	rjmp	.-24     	; 0x3418 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    3430:	97 b1       	in	r25, 0x07	; 7
    3432:	82 a1       	ldd	r24, Z+34	; 0x22
    3434:	80 95       	com	r24
    3436:	89 23       	and	r24, r25
    3438:	87 b9       	out	0x07, r24	; 7
    343a:	98 b1       	in	r25, 0x08	; 8
    343c:	82 a1       	ldd	r24, Z+34	; 0x22
    343e:	80 95       	com	r24
    3440:	89 23       	and	r24, r25
    3442:	88 b9       	out	0x08, r24	; 8
    3444:	87 e8       	ldi	r24, 0x87	; 135
    3446:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    344a:	e1 2c       	mov	r14, r1
    344c:	81 a1       	ldd	r24, Z+33	; 0x21
    344e:	e8 16       	cp	r14, r24
    3450:	10 f0       	brcs	.+4      	; 0x3456 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    3452:	e1 2c       	mov	r14, r1
    3454:	29 c0       	rjmp	.+82     	; 0x34a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	80 85       	ldd	r24, Z+8	; 0x08
    345a:	58 17       	cp	r21, r24
    345c:	18 f5       	brcc	.+70     	; 0x34a4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    345e:	a5 2f       	mov	r26, r21
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	ef 01       	movw	r28, r30
    3464:	ca 0f       	add	r28, r26
    3466:	db 1f       	adc	r29, r27
    3468:	89 89       	ldd	r24, Y+17	; 0x11
    346a:	80 64       	ori	r24, 0x40	; 64
    346c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    3470:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3474:	80 64       	ori	r24, 0x40	; 64
    3476:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    347a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    347e:	86 fd       	sbrc	r24, 6
    3480:	fc cf       	rjmp	.-8      	; 0x347a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    3482:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    3486:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    348a:	aa 0f       	add	r26, r26
    348c:	bb 1f       	adc	r27, r27
    348e:	a2 0f       	add	r26, r18
    3490:	b3 1f       	adc	r27, r19
    3492:	8d 91       	ld	r24, X+
    3494:	9c 91       	ld	r25, X
    3496:	11 97       	sbiw	r26, 0x01	; 1
    3498:	86 0f       	add	r24, r22
    349a:	97 1f       	adc	r25, r23
    349c:	8d 93       	st	X+, r24
    349e:	9c 93       	st	X, r25
    34a0:	5f 5f       	subi	r21, 0xFF	; 255
    34a2:	da cf       	rjmp	.-76     	; 0x3458 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    34a4:	e3 94       	inc	r14
    34a6:	d2 cf       	rjmp	.-92     	; 0x344c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    34a8:	80 85       	ldd	r24, Z+8	; 0x08
    34aa:	e8 16       	cp	r14, r24
    34ac:	a0 f4       	brcc	.+40     	; 0x34d6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    34ae:	e9 01       	movw	r28, r18
    34b0:	ce 0d       	add	r28, r14
    34b2:	d1 1d       	adc	r29, r1
    34b4:	ce 0d       	add	r28, r14
    34b6:	d1 1d       	adc	r29, r1
    34b8:	61 a1       	ldd	r22, Z+33	; 0x21
    34ba:	70 e0       	ldi	r23, 0x00	; 0
    34bc:	cb 01       	movw	r24, r22
    34be:	95 95       	asr	r25
    34c0:	87 95       	ror	r24
    34c2:	a8 81       	ld	r26, Y
    34c4:	b9 81       	ldd	r27, Y+1	; 0x01
    34c6:	8a 0f       	add	r24, r26
    34c8:	9b 1f       	adc	r25, r27
    34ca:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__udivmodhi4>
    34ce:	79 83       	std	Y+1, r23	; 0x01
    34d0:	68 83       	st	Y, r22
    34d2:	e3 94       	inc	r14
    34d4:	e9 cf       	rjmp	.-46     	; 0x34a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    34d6:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    34da:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    34de:	18 b9       	out	0x08, r17	; 8
    34e0:	47 b9       	out	0x07, r20	; 7
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	e6 e0       	ldi	r30, 0x06	; 6
    34e8:	0c 94 fd 1d 	jmp	0x3bfa	; 0x3bfa <__epilogue_restores__+0x18>

000034ec <_ZN16PololuQTRSensors4readEPjh>:
    34ec:	a0 e2       	ldi	r26, 0x20	; 32
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	ec e7       	ldi	r30, 0x7C	; 124
    34f2:	fa e1       	ldi	r31, 0x1A	; 26
    34f4:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__prologue_saves__+0x16>
    34f8:	8c 01       	movw	r16, r24
    34fa:	7b 01       	movw	r14, r22
    34fc:	d4 2e       	mov	r13, r20
    34fe:	8f ef       	ldi	r24, 0xFF	; 255
    3500:	84 0f       	add	r24, r20
    3502:	82 30       	cpi	r24, 0x02	; 2
    3504:	18 f4       	brcc	.+6      	; 0x350c <_ZN16PololuQTRSensors4readEPjh+0x20>
    3506:	c8 01       	movw	r24, r16
    3508:	0e 94 b8 18 	call	0x3170	; 0x3170 <_ZN16PololuQTRSensors10emittersOnEv>
    350c:	d8 01       	movw	r26, r16
    350e:	50 96       	adiw	r26, 0x10	; 16
    3510:	8c 91       	ld	r24, X
    3512:	b7 01       	movw	r22, r14
    3514:	81 11       	cpse	r24, r1
    3516:	10 c0       	rjmp	.+32     	; 0x3538 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    3518:	c8 01       	movw	r24, r16
    351a:	0e 94 21 19 	call	0x3242	; 0x3242 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    351e:	c8 01       	movw	r24, r16
    3520:	0e 94 a3 18 	call	0x3146	; 0x3146 <_ZN16PololuQTRSensors11emittersOffEv>
    3524:	b2 e0       	ldi	r27, 0x02	; 2
    3526:	db 12       	cpse	r13, r27
    3528:	3a c0       	rjmp	.+116    	; 0x359e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    352a:	be 01       	movw	r22, r28
    352c:	6f 5f       	subi	r22, 0xFF	; 255
    352e:	7f 4f       	sbci	r23, 0xFF	; 255
    3530:	c8 01       	movw	r24, r16
    3532:	0e 94 21 19 	call	0x3242	; 0x3242 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    3536:	0f c0       	rjmp	.+30     	; 0x3556 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    3538:	c8 01       	movw	r24, r16
    353a:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    353e:	c8 01       	movw	r24, r16
    3540:	0e 94 a3 18 	call	0x3146	; 0x3146 <_ZN16PololuQTRSensors11emittersOffEv>
    3544:	e2 e0       	ldi	r30, 0x02	; 2
    3546:	de 12       	cpse	r13, r30
    3548:	2a c0       	rjmp	.+84     	; 0x359e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    354a:	be 01       	movw	r22, r28
    354c:	6f 5f       	subi	r22, 0xFF	; 255
    354e:	7f 4f       	sbci	r23, 0xFF	; 255
    3550:	c8 01       	movw	r24, r16
    3552:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	f8 01       	movw	r30, r16
    355a:	80 85       	ldd	r24, Z+8	; 0x08
    355c:	48 17       	cp	r20, r24
    355e:	f8 f4       	brcc	.+62     	; 0x359e <_ZN16PololuQTRSensors4readEPjh+0xb2>
    3560:	84 2f       	mov	r24, r20
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	f7 01       	movw	r30, r14
    356a:	e8 0f       	add	r30, r24
    356c:	f9 1f       	adc	r31, r25
    356e:	21 e0       	ldi	r18, 0x01	; 1
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	2c 0f       	add	r18, r28
    3574:	3d 1f       	adc	r19, r29
    3576:	82 0f       	add	r24, r18
    3578:	93 1f       	adc	r25, r19
    357a:	d8 01       	movw	r26, r16
    357c:	1e 96       	adiw	r26, 0x0e	; 14
    357e:	2d 91       	ld	r18, X+
    3580:	3c 91       	ld	r19, X
    3582:	1f 97       	sbiw	r26, 0x0f	; 15
    3584:	dc 01       	movw	r26, r24
    3586:	8d 91       	ld	r24, X+
    3588:	9c 91       	ld	r25, X
    358a:	28 1b       	sub	r18, r24
    358c:	39 0b       	sbc	r19, r25
    358e:	80 81       	ld	r24, Z
    3590:	91 81       	ldd	r25, Z+1	; 0x01
    3592:	82 0f       	add	r24, r18
    3594:	93 1f       	adc	r25, r19
    3596:	91 83       	std	Z+1, r25	; 0x01
    3598:	80 83       	st	Z, r24
    359a:	4f 5f       	subi	r20, 0xFF	; 255
    359c:	dd cf       	rjmp	.-70     	; 0x3558 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    359e:	a0 96       	adiw	r28, 0x20	; 32
    35a0:	e7 e0       	ldi	r30, 0x07	; 7
    35a2:	0c 94 fc 1d 	jmp	0x3bf8	; 0x3bf8 <__epilogue_restores__+0x16>

000035a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    35a6:	2f 92       	push	r2
    35a8:	3f 92       	push	r3
    35aa:	5f 92       	push	r5
    35ac:	6f 92       	push	r6
    35ae:	7f 92       	push	r7
    35b0:	8f 92       	push	r8
    35b2:	9f 92       	push	r9
    35b4:	af 92       	push	r10
    35b6:	bf 92       	push	r11
    35b8:	cf 92       	push	r12
    35ba:	df 92       	push	r13
    35bc:	ef 92       	push	r14
    35be:	ff 92       	push	r15
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	c0 56       	subi	r28, 0x60	; 96
    35ce:	d1 09       	sbc	r29, r1
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	8c 01       	movw	r16, r24
    35dc:	4b 01       	movw	r8, r22
    35de:	5a 01       	movw	r10, r20
    35e0:	52 2e       	mov	r5, r18
    35e2:	da 01       	movw	r26, r20
    35e4:	8d 91       	ld	r24, X+
    35e6:	9c 91       	ld	r25, X
    35e8:	89 2b       	or	r24, r25
    35ea:	31 f0       	breq	.+12     	; 0x35f8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    35ec:	f4 01       	movw	r30, r8
    35ee:	80 81       	ld	r24, Z
    35f0:	91 81       	ldd	r25, Z+1	; 0x01
    35f2:	89 2b       	or	r24, r25
    35f4:	f1 f4       	brne	.+60     	; 0x3632 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    35f6:	24 c0       	rjmp	.+72     	; 0x3640 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    35f8:	d8 01       	movw	r26, r16
    35fa:	18 96       	adiw	r26, 0x08	; 8
    35fc:	8c 91       	ld	r24, X
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	88 0f       	add	r24, r24
    3602:	99 1f       	adc	r25, r25
    3604:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <malloc>
    3608:	f5 01       	movw	r30, r10
    360a:	91 83       	std	Z+1, r25	; 0x01
    360c:	80 83       	st	Z, r24
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	09 f4       	brne	.+2      	; 0x3614 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    3612:	b1 c0       	rjmp	.+354    	; 0x3776 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    3614:	fc 01       	movw	r30, r24
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	d8 01       	movw	r26, r16
    361c:	18 96       	adiw	r26, 0x08	; 8
    361e:	8c 91       	ld	r24, X
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	28 17       	cp	r18, r24
    3624:	39 07       	cpc	r19, r25
    3626:	14 f7       	brge	.-60     	; 0x35ec <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    3628:	11 92       	st	Z+, r1
    362a:	11 92       	st	Z+, r1
    362c:	2f 5f       	subi	r18, 0xFF	; 255
    362e:	3f 4f       	sbci	r19, 0xFF	; 255
    3630:	f4 cf       	rjmp	.-24     	; 0x361a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    3632:	e1 2c       	mov	r14, r1
    3634:	f1 2c       	mov	r15, r1
    3636:	6e 01       	movw	r12, r28
    3638:	b1 e2       	ldi	r27, 0x21	; 33
    363a:	cb 0e       	add	r12, r27
    363c:	d1 1c       	adc	r13, r1
    363e:	21 c0       	rjmp	.+66     	; 0x3682 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3640:	f8 01       	movw	r30, r16
    3642:	80 85       	ldd	r24, Z+8	; 0x08
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <malloc>
    364e:	d4 01       	movw	r26, r8
    3650:	8d 93       	st	X+, r24
    3652:	9c 93       	st	X, r25
    3654:	00 97       	sbiw	r24, 0x00	; 0
    3656:	09 f4       	brne	.+2      	; 0x365a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    3658:	8e c0       	rjmp	.+284    	; 0x3776 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    365a:	fc 01       	movw	r30, r24
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	d8 01       	movw	r26, r16
    3662:	18 96       	adiw	r26, 0x08	; 8
    3664:	8c 91       	ld	r24, X
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	28 17       	cp	r18, r24
    366a:	39 07       	cpc	r19, r25
    366c:	14 f7       	brge	.-60     	; 0x3632 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    366e:	d8 01       	movw	r26, r16
    3670:	1e 96       	adiw	r26, 0x0e	; 14
    3672:	8d 91       	ld	r24, X+
    3674:	9c 91       	ld	r25, X
    3676:	1f 97       	sbiw	r26, 0x0f	; 15
    3678:	81 93       	st	Z+, r24
    367a:	91 93       	st	Z+, r25
    367c:	2f 5f       	subi	r18, 0xFF	; 255
    367e:	3f 4f       	sbci	r19, 0xFF	; 255
    3680:	ef cf       	rjmp	.-34     	; 0x3660 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    3682:	45 2d       	mov	r20, r5
    3684:	be 01       	movw	r22, r28
    3686:	6f 5b       	subi	r22, 0xBF	; 191
    3688:	7f 4f       	sbci	r23, 0xFF	; 255
    368a:	c8 01       	movw	r24, r16
    368c:	0e 94 76 1a 	call	0x34ec	; 0x34ec <_ZN16PololuQTRSensors4readEPjh>
    3690:	f8 01       	movw	r30, r16
    3692:	60 84       	ldd	r6, Z+8	; 0x08
    3694:	71 2c       	mov	r7, r1
    3696:	fe 01       	movw	r30, r28
    3698:	ef 5b       	subi	r30, 0xBF	; 191
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	c6 01       	movw	r24, r12
    369e:	9e 01       	movw	r18, r28
    36a0:	2f 5f       	subi	r18, 0xFF	; 255
    36a2:	3f 4f       	sbci	r19, 0xFF	; 255
    36a4:	19 01       	movw	r2, r18
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	26 15       	cp	r18, r6
    36ac:	37 05       	cpc	r19, r7
    36ae:	4c f5       	brge	.+82     	; 0x3702 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    36b0:	e1 14       	cp	r14, r1
    36b2:	f1 04       	cpc	r15, r1
    36b4:	89 f0       	breq	.+34     	; 0x36d8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    36b6:	dc 01       	movw	r26, r24
    36b8:	6d 91       	ld	r22, X+
    36ba:	7c 91       	ld	r23, X
    36bc:	40 81       	ld	r20, Z
    36be:	51 81       	ldd	r21, Z+1	; 0x01
    36c0:	64 17       	cp	r22, r20
    36c2:	75 07       	cpc	r23, r21
    36c4:	48 f0       	brcs	.+18     	; 0x36d8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    36c6:	d1 01       	movw	r26, r2
    36c8:	6d 91       	ld	r22, X+
    36ca:	7c 91       	ld	r23, X
    36cc:	40 81       	ld	r20, Z
    36ce:	51 81       	ldd	r21, Z+1	; 0x01
    36d0:	46 17       	cp	r20, r22
    36d2:	57 07       	cpc	r21, r23
    36d4:	48 f0       	brcs	.+18     	; 0x36e8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    36d6:	0d c0       	rjmp	.+26     	; 0x36f2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    36d8:	40 81       	ld	r20, Z
    36da:	51 81       	ldd	r21, Z+1	; 0x01
    36dc:	dc 01       	movw	r26, r24
    36de:	4d 93       	st	X+, r20
    36e0:	5c 93       	st	X, r21
    36e2:	e1 14       	cp	r14, r1
    36e4:	f1 04       	cpc	r15, r1
    36e6:	79 f7       	brne	.-34     	; 0x36c6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    36e8:	40 81       	ld	r20, Z
    36ea:	51 81       	ldd	r21, Z+1	; 0x01
    36ec:	d1 01       	movw	r26, r2
    36ee:	4d 93       	st	X+, r20
    36f0:	5c 93       	st	X, r21
    36f2:	2f 5f       	subi	r18, 0xFF	; 255
    36f4:	3f 4f       	sbci	r19, 0xFF	; 255
    36f6:	b2 e0       	ldi	r27, 0x02	; 2
    36f8:	2b 0e       	add	r2, r27
    36fa:	31 1c       	adc	r3, r1
    36fc:	32 96       	adiw	r30, 0x02	; 2
    36fe:	02 96       	adiw	r24, 0x02	; 2
    3700:	d4 cf       	rjmp	.-88     	; 0x36aa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    3702:	ef ef       	ldi	r30, 0xFF	; 255
    3704:	ee 1a       	sub	r14, r30
    3706:	fe 0a       	sbc	r15, r30
    3708:	fa e0       	ldi	r31, 0x0A	; 10
    370a:	ef 16       	cp	r14, r31
    370c:	f1 04       	cpc	r15, r1
    370e:	09 f0       	breq	.+2      	; 0x3712 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    3710:	b8 cf       	rjmp	.-144    	; 0x3682 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3712:	9e 01       	movw	r18, r28
    3714:	2f 5f       	subi	r18, 0xFF	; 255
    3716:	3f 4f       	sbci	r19, 0xFF	; 255
    3718:	79 01       	movw	r14, r18
    371a:	36 01       	movw	r6, r12
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	f8 01       	movw	r30, r16
    3722:	20 85       	ldd	r18, Z+8	; 0x08
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	82 17       	cp	r24, r18
    3728:	93 07       	cpc	r25, r19
    372a:	2c f5       	brge	.+74     	; 0x3776 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    372c:	d7 01       	movw	r26, r14
    372e:	2d 91       	ld	r18, X+
    3730:	3d 91       	ld	r19, X+
    3732:	7d 01       	movw	r14, r26
    3734:	b3 01       	movw	r22, r6
    3736:	6c 19       	sub	r22, r12
    3738:	7d 09       	sbc	r23, r13
    373a:	d5 01       	movw	r26, r10
    373c:	ed 91       	ld	r30, X+
    373e:	fc 91       	ld	r31, X
    3740:	e6 0f       	add	r30, r22
    3742:	f7 1f       	adc	r31, r23
    3744:	40 81       	ld	r20, Z
    3746:	51 81       	ldd	r21, Z+1	; 0x01
    3748:	42 17       	cp	r20, r18
    374a:	53 07       	cpc	r21, r19
    374c:	10 f4       	brcc	.+4      	; 0x3752 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    374e:	31 83       	std	Z+1, r19	; 0x01
    3750:	20 83       	st	Z, r18
    3752:	f3 01       	movw	r30, r6
    3754:	21 91       	ld	r18, Z+
    3756:	31 91       	ld	r19, Z+
    3758:	3f 01       	movw	r6, r30
    375a:	d4 01       	movw	r26, r8
    375c:	ed 91       	ld	r30, X+
    375e:	fc 91       	ld	r31, X
    3760:	e6 0f       	add	r30, r22
    3762:	f7 1f       	adc	r31, r23
    3764:	40 81       	ld	r20, Z
    3766:	51 81       	ldd	r21, Z+1	; 0x01
    3768:	24 17       	cp	r18, r20
    376a:	35 07       	cpc	r19, r21
    376c:	10 f4       	brcc	.+4      	; 0x3772 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    376e:	31 83       	std	Z+1, r19	; 0x01
    3770:	20 83       	st	Z, r18
    3772:	01 96       	adiw	r24, 0x01	; 1
    3774:	d5 cf       	rjmp	.-86     	; 0x3720 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    3776:	c0 5a       	subi	r28, 0xA0	; 160
    3778:	df 4f       	sbci	r29, 0xFF	; 255
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	de bf       	out	0x3e, r29	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	cd bf       	out	0x3d, r28	; 61
    3784:	df 91       	pop	r29
    3786:	cf 91       	pop	r28
    3788:	1f 91       	pop	r17
    378a:	0f 91       	pop	r16
    378c:	ff 90       	pop	r15
    378e:	ef 90       	pop	r14
    3790:	df 90       	pop	r13
    3792:	cf 90       	pop	r12
    3794:	bf 90       	pop	r11
    3796:	af 90       	pop	r10
    3798:	9f 90       	pop	r9
    379a:	8f 90       	pop	r8
    379c:	7f 90       	pop	r7
    379e:	6f 90       	pop	r6
    37a0:	5f 90       	pop	r5
    37a2:	3f 90       	pop	r3
    37a4:	2f 90       	pop	r2
    37a6:	08 95       	ret

000037a8 <_ZN16PololuQTRSensors9calibrateEh>:
    37a8:	1f 93       	push	r17
    37aa:	cf 93       	push	r28
    37ac:	df 93       	push	r29
    37ae:	ec 01       	movw	r28, r24
    37b0:	16 2f       	mov	r17, r22
    37b2:	8f ef       	ldi	r24, 0xFF	; 255
    37b4:	86 0f       	add	r24, r22
    37b6:	82 30       	cpi	r24, 0x02	; 2
    37b8:	18 f0       	brcs	.+6      	; 0x37c0 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    37ba:	66 23       	and	r22, r22
    37bc:	59 f0       	breq	.+22     	; 0x37d4 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    37be:	14 c0       	rjmp	.+40     	; 0x37e8 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    37c0:	21 e0       	ldi	r18, 0x01	; 1
    37c2:	ae 01       	movw	r20, r28
    37c4:	4e 5f       	subi	r20, 0xFE	; 254
    37c6:	5f 4f       	sbci	r21, 0xFF	; 255
    37c8:	be 01       	movw	r22, r28
    37ca:	ce 01       	movw	r24, r28
    37cc:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    37d0:	12 30       	cpi	r17, 0x02	; 2
    37d2:	51 f4       	brne	.+20     	; 0x37e8 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    37d4:	ae 01       	movw	r20, r28
    37d6:	4a 5f       	subi	r20, 0xFA	; 250
    37d8:	5f 4f       	sbci	r21, 0xFF	; 255
    37da:	be 01       	movw	r22, r28
    37dc:	6c 5f       	subi	r22, 0xFC	; 252
    37de:	7f 4f       	sbci	r23, 0xFF	; 255
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	ce 01       	movw	r24, r28
    37e4:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    37e8:	df 91       	pop	r29
    37ea:	cf 91       	pop	r28
    37ec:	1f 91       	pop	r17
    37ee:	08 95       	ret

000037f0 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    37f0:	a0 e0       	ldi	r26, 0x00	; 0
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	ee ef       	ldi	r30, 0xFE	; 254
    37f6:	fb e1       	ldi	r31, 0x1B	; 27
    37f8:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <__prologue_saves__+0x12>
    37fc:	ec 01       	movw	r28, r24
    37fe:	8b 01       	movw	r16, r22
    3800:	b4 2e       	mov	r11, r20
    3802:	84 2f       	mov	r24, r20
    3804:	8d 7f       	andi	r24, 0xFD	; 253
    3806:	51 f4       	brne	.+20     	; 0x381c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    3808:	8c 81       	ldd	r24, Y+4	; 0x04
    380a:	9d 81       	ldd	r25, Y+5	; 0x05
    380c:	89 2b       	or	r24, r25
    380e:	09 f4       	brne	.+2      	; 0x3812 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    3810:	97 c0       	rjmp	.+302    	; 0x3940 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3812:	8e 81       	ldd	r24, Y+6	; 0x06
    3814:	9f 81       	ldd	r25, Y+7	; 0x07
    3816:	89 2b       	or	r24, r25
    3818:	09 f4       	brne	.+2      	; 0x381c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    381a:	92 c0       	rjmp	.+292    	; 0x3940 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    381c:	8f ef       	ldi	r24, 0xFF	; 255
    381e:	8b 0d       	add	r24, r11
    3820:	82 30       	cpi	r24, 0x02	; 2
    3822:	50 f4       	brcc	.+20     	; 0x3838 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3824:	88 81       	ld	r24, Y
    3826:	99 81       	ldd	r25, Y+1	; 0x01
    3828:	89 2b       	or	r24, r25
    382a:	09 f4       	brne	.+2      	; 0x382e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    382c:	89 c0       	rjmp	.+274    	; 0x3940 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    382e:	8a 81       	ldd	r24, Y+2	; 0x02
    3830:	9b 81       	ldd	r25, Y+3	; 0x03
    3832:	89 2b       	or	r24, r25
    3834:	09 f4       	brne	.+2      	; 0x3838 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3836:	84 c0       	rjmp	.+264    	; 0x3940 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3838:	4b 2d       	mov	r20, r11
    383a:	b8 01       	movw	r22, r16
    383c:	ce 01       	movw	r24, r28
    383e:	0e 94 76 1a 	call	0x34ec	; 0x34ec <_ZN16PololuQTRSensors4readEPjh>
    3842:	78 01       	movw	r14, r16
    3844:	00 e0       	ldi	r16, 0x00	; 0
    3846:	10 e0       	ldi	r17, 0x00	; 0
    3848:	c1 2c       	mov	r12, r1
    384a:	d1 2c       	mov	r13, r1
    384c:	88 85       	ldd	r24, Y+8	; 0x08
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	c8 16       	cp	r12, r24
    3852:	d9 06       	cpc	r13, r25
    3854:	0c f0       	brlt	.+2      	; 0x3858 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    3856:	74 c0       	rjmp	.+232    	; 0x3940 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	b8 12       	cpse	r11, r24
    385c:	0a c0       	rjmp	.+20     	; 0x3872 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    385e:	ea 81       	ldd	r30, Y+2	; 0x02
    3860:	fb 81       	ldd	r31, Y+3	; 0x03
    3862:	e0 0f       	add	r30, r16
    3864:	f1 1f       	adc	r31, r17
    3866:	01 90       	ld	r0, Z+
    3868:	f0 81       	ld	r31, Z
    386a:	e0 2d       	mov	r30, r0
    386c:	a8 81       	ld	r26, Y
    386e:	b9 81       	ldd	r27, Y+1	; 0x01
    3870:	0d c0       	rjmp	.+26     	; 0x388c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3872:	8c 81       	ldd	r24, Y+4	; 0x04
    3874:	9d 81       	ldd	r25, Y+5	; 0x05
    3876:	2e 81       	ldd	r18, Y+6	; 0x06
    3878:	3f 81       	ldd	r19, Y+7	; 0x07
    387a:	b1 10       	cpse	r11, r1
    387c:	0c c0       	rjmp	.+24     	; 0x3896 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    387e:	f9 01       	movw	r30, r18
    3880:	e0 0f       	add	r30, r16
    3882:	f1 1f       	adc	r31, r17
    3884:	01 90       	ld	r0, Z+
    3886:	f0 81       	ld	r31, Z
    3888:	e0 2d       	mov	r30, r0
    388a:	dc 01       	movw	r26, r24
    388c:	a0 0f       	add	r26, r16
    388e:	b1 1f       	adc	r27, r17
    3890:	8d 91       	ld	r24, X+
    3892:	9c 91       	ld	r25, X
    3894:	28 c0       	rjmp	.+80     	; 0x38e6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    3896:	fc 01       	movw	r30, r24
    3898:	e0 0f       	add	r30, r16
    389a:	f1 1f       	adc	r31, r17
    389c:	40 81       	ld	r20, Z
    389e:	51 81       	ldd	r21, Z+1	; 0x01
    38a0:	e8 81       	ld	r30, Y
    38a2:	f9 81       	ldd	r31, Y+1	; 0x01
    38a4:	e0 0f       	add	r30, r16
    38a6:	f1 1f       	adc	r31, r17
    38a8:	80 81       	ld	r24, Z
    38aa:	91 81       	ldd	r25, Z+1	; 0x01
    38ac:	ee 85       	ldd	r30, Y+14	; 0x0e
    38ae:	ff 85       	ldd	r31, Y+15	; 0x0f
    38b0:	48 17       	cp	r20, r24
    38b2:	59 07       	cpc	r21, r25
    38b4:	10 f4       	brcc	.+4      	; 0x38ba <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    38b6:	cf 01       	movw	r24, r30
    38b8:	04 c0       	rjmp	.+8      	; 0x38c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    38ba:	8e 0f       	add	r24, r30
    38bc:	9f 1f       	adc	r25, r31
    38be:	84 1b       	sub	r24, r20
    38c0:	95 0b       	sbc	r25, r21
    38c2:	d9 01       	movw	r26, r18
    38c4:	a0 0f       	add	r26, r16
    38c6:	b1 1f       	adc	r27, r17
    38c8:	2d 91       	ld	r18, X+
    38ca:	3c 91       	ld	r19, X
    38cc:	aa 81       	ldd	r26, Y+2	; 0x02
    38ce:	bb 81       	ldd	r27, Y+3	; 0x03
    38d0:	a0 0f       	add	r26, r16
    38d2:	b1 1f       	adc	r27, r17
    38d4:	4d 91       	ld	r20, X+
    38d6:	5c 91       	ld	r21, X
    38d8:	24 17       	cp	r18, r20
    38da:	35 07       	cpc	r19, r21
    38dc:	20 f0       	brcs	.+8      	; 0x38e6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    38de:	e4 0f       	add	r30, r20
    38e0:	f5 1f       	adc	r31, r21
    38e2:	e2 1b       	sub	r30, r18
    38e4:	f3 0b       	sbc	r31, r19
    38e6:	e8 1b       	sub	r30, r24
    38e8:	f9 0b       	sbc	r31, r25
    38ea:	a9 f0       	breq	.+42     	; 0x3916 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    38ec:	d7 01       	movw	r26, r14
    38ee:	2d 91       	ld	r18, X+
    38f0:	3c 91       	ld	r19, X
    38f2:	40 e0       	ldi	r20, 0x00	; 0
    38f4:	50 e0       	ldi	r21, 0x00	; 0
    38f6:	28 1b       	sub	r18, r24
    38f8:	39 0b       	sbc	r19, r25
    38fa:	41 09       	sbc	r20, r1
    38fc:	51 09       	sbc	r21, r1
    38fe:	a8 ee       	ldi	r26, 0xE8	; 232
    3900:	b3 e0       	ldi	r27, 0x03	; 3
    3902:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__muluhisi3>
    3906:	9f 01       	movw	r18, r30
    3908:	40 e0       	ldi	r20, 0x00	; 0
    390a:	50 e0       	ldi	r21, 0x00	; 0
    390c:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__divmodsi4>
    3910:	37 fd       	sbrc	r19, 7
    3912:	0a c0       	rjmp	.+20     	; 0x3928 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    3914:	02 c0       	rjmp	.+4      	; 0x391a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    3916:	20 e0       	ldi	r18, 0x00	; 0
    3918:	30 e0       	ldi	r19, 0x00	; 0
    391a:	29 3e       	cpi	r18, 0xE9	; 233
    391c:	b3 e0       	ldi	r27, 0x03	; 3
    391e:	3b 07       	cpc	r19, r27
    3920:	2c f0       	brlt	.+10     	; 0x392c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3922:	28 ee       	ldi	r18, 0xE8	; 232
    3924:	33 e0       	ldi	r19, 0x03	; 3
    3926:	02 c0       	rjmp	.+4      	; 0x392c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	f7 01       	movw	r30, r14
    392e:	21 93       	st	Z+, r18
    3930:	31 93       	st	Z+, r19
    3932:	7f 01       	movw	r14, r30
    3934:	ff ef       	ldi	r31, 0xFF	; 255
    3936:	cf 1a       	sub	r12, r31
    3938:	df 0a       	sbc	r13, r31
    393a:	0e 5f       	subi	r16, 0xFE	; 254
    393c:	1f 4f       	sbci	r17, 0xFF	; 255
    393e:	86 cf       	rjmp	.-244    	; 0x384c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    3940:	cd b7       	in	r28, 0x3d	; 61
    3942:	de b7       	in	r29, 0x3e	; 62
    3944:	e9 e0       	ldi	r30, 0x09	; 9
    3946:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <__epilogue_restores__+0x12>

0000394a <_ZN16PololuQTRSensors8readLineEPjhh>:
    394a:	a0 e0       	ldi	r26, 0x00	; 0
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	eb ea       	ldi	r30, 0xAB	; 171
    3950:	fc e1       	ldi	r31, 0x1C	; 28
    3952:	0c 94 d5 1d 	jmp	0x3baa	; 0x3baa <__prologue_saves__>
    3956:	ec 01       	movw	r28, r24
    3958:	8b 01       	movw	r16, r22
    395a:	82 2e       	mov	r8, r18
    395c:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    3960:	28 84       	ldd	r2, Y+8	; 0x08
    3962:	e8 01       	movw	r28, r16
    3964:	41 2c       	mov	r4, r1
    3966:	51 2c       	mov	r5, r1
    3968:	32 01       	movw	r6, r4
    396a:	00 e0       	ldi	r16, 0x00	; 0
    396c:	10 e0       	ldi	r17, 0x00	; 0
    396e:	c1 2c       	mov	r12, r1
    3970:	d1 2c       	mov	r13, r1
    3972:	76 01       	movw	r14, r12
    3974:	31 2c       	mov	r3, r1
    3976:	91 2c       	mov	r9, r1
    3978:	58 ee       	ldi	r21, 0xE8	; 232
    397a:	a5 2e       	mov	r10, r21
    397c:	53 e0       	ldi	r21, 0x03	; 3
    397e:	b5 2e       	mov	r11, r21
    3980:	92 14       	cp	r9, r2
    3982:	21 f1       	breq	.+72     	; 0x39cc <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3984:	e9 91       	ld	r30, Y+
    3986:	f9 91       	ld	r31, Y+
    3988:	88 20       	and	r8, r8
    398a:	21 f0       	breq	.+8      	; 0x3994 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    398c:	c5 01       	movw	r24, r10
    398e:	8e 1b       	sub	r24, r30
    3990:	9f 0b       	sbc	r25, r31
    3992:	fc 01       	movw	r30, r24
    3994:	e9 3c       	cpi	r30, 0xC9	; 201
    3996:	f1 05       	cpc	r31, r1
    3998:	24 f4       	brge	.+8      	; 0x39a2 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    399a:	e3 33       	cpi	r30, 0x33	; 51
    399c:	f1 05       	cpc	r31, r1
    399e:	74 f0       	brlt	.+28     	; 0x39bc <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    39a0:	02 c0       	rjmp	.+4      	; 0x39a6 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    39a2:	33 24       	eor	r3, r3
    39a4:	33 94       	inc	r3
    39a6:	df 01       	movw	r26, r30
    39a8:	a3 01       	movw	r20, r6
    39aa:	92 01       	movw	r18, r4
    39ac:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__mulshisi3>
    39b0:	c6 0e       	add	r12, r22
    39b2:	d7 1e       	adc	r13, r23
    39b4:	e8 1e       	adc	r14, r24
    39b6:	f9 1e       	adc	r15, r25
    39b8:	0e 0f       	add	r16, r30
    39ba:	1f 1f       	adc	r17, r31
    39bc:	93 94       	inc	r9
    39be:	98 ee       	ldi	r25, 0xE8	; 232
    39c0:	49 0e       	add	r4, r25
    39c2:	93 e0       	ldi	r25, 0x03	; 3
    39c4:	59 1e       	adc	r5, r25
    39c6:	61 1c       	adc	r6, r1
    39c8:	71 1c       	adc	r7, r1
    39ca:	da cf       	rjmp	.-76     	; 0x3980 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    39cc:	31 10       	cpse	r3, r1
    39ce:	1e c0       	rjmp	.+60     	; 0x3a0c <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    39d0:	49 2d       	mov	r20, r9
    39d2:	50 e0       	ldi	r21, 0x00	; 0
    39d4:	41 50       	subi	r20, 0x01	; 1
    39d6:	51 09       	sbc	r21, r1
    39d8:	24 ef       	ldi	r18, 0xF4	; 244
    39da:	31 e0       	ldi	r19, 0x01	; 1
    39dc:	42 9f       	mul	r20, r18
    39de:	c0 01       	movw	r24, r0
    39e0:	43 9f       	mul	r20, r19
    39e2:	90 0d       	add	r25, r0
    39e4:	52 9f       	mul	r21, r18
    39e6:	90 0d       	add	r25, r0
    39e8:	11 24       	eor	r1, r1
    39ea:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    39ee:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    39f2:	28 17       	cp	r18, r24
    39f4:	39 07       	cpc	r19, r25
    39f6:	b4 f0       	brlt	.+44     	; 0x3a24 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    39f8:	88 ee       	ldi	r24, 0xE8	; 232
    39fa:	93 e0       	ldi	r25, 0x03	; 3
    39fc:	48 9f       	mul	r20, r24
    39fe:	90 01       	movw	r18, r0
    3a00:	49 9f       	mul	r20, r25
    3a02:	30 0d       	add	r19, r0
    3a04:	58 9f       	mul	r21, r24
    3a06:	30 0d       	add	r19, r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	0e c0       	rjmp	.+28     	; 0x3a28 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3a0c:	98 01       	movw	r18, r16
    3a0e:	40 e0       	ldi	r20, 0x00	; 0
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	c7 01       	movw	r24, r14
    3a14:	b6 01       	movw	r22, r12
    3a16:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodsi4>
    3a1a:	30 93 04 02 	sts	0x0204, r19	; 0x800204 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3a1e:	20 93 03 02 	sts	0x0203, r18	; 0x800203 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3a22:	02 c0       	rjmp	.+4      	; 0x3a28 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	c9 01       	movw	r24, r18
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    3a2e:	e2 e1       	ldi	r30, 0x12	; 18
    3a30:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__epilogue_restores__>

00003a34 <_ZN16PololuQTRSensorsD1Ev>:
    3a34:	cf 93       	push	r28
    3a36:	df 93       	push	r29
    3a38:	ec 01       	movw	r28, r24
    3a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	11 f0       	breq	.+4      	; 0x3a46 <_ZN16PololuQTRSensorsD1Ev+0x12>
    3a42:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <free>
    3a46:	8e 81       	ldd	r24, Y+6	; 0x06
    3a48:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	11 f0       	breq	.+4      	; 0x3a52 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    3a4e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <free>
    3a52:	88 81       	ld	r24, Y
    3a54:	99 81       	ldd	r25, Y+1	; 0x01
    3a56:	00 97       	sbiw	r24, 0x00	; 0
    3a58:	11 f0       	breq	.+4      	; 0x3a5e <_ZN16PololuQTRSensorsD1Ev+0x2a>
    3a5a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <free>
    3a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a60:	9d 81       	ldd	r25, Y+5	; 0x05
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	11 f0       	breq	.+4      	; 0x3a6a <_ZN16PololuQTRSensorsD1Ev+0x36>
    3a66:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <free>
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	08 95       	ret

00003a70 <__udivmodqi4>:
    3a70:	99 1b       	sub	r25, r25
    3a72:	79 e0       	ldi	r23, 0x09	; 9
    3a74:	04 c0       	rjmp	.+8      	; 0x3a7e <__udivmodqi4_ep>

00003a76 <__udivmodqi4_loop>:
    3a76:	99 1f       	adc	r25, r25
    3a78:	96 17       	cp	r25, r22
    3a7a:	08 f0       	brcs	.+2      	; 0x3a7e <__udivmodqi4_ep>
    3a7c:	96 1b       	sub	r25, r22

00003a7e <__udivmodqi4_ep>:
    3a7e:	88 1f       	adc	r24, r24
    3a80:	7a 95       	dec	r23
    3a82:	c9 f7       	brne	.-14     	; 0x3a76 <__udivmodqi4_loop>
    3a84:	80 95       	com	r24
    3a86:	08 95       	ret

00003a88 <__udivmodhi4>:
    3a88:	aa 1b       	sub	r26, r26
    3a8a:	bb 1b       	sub	r27, r27
    3a8c:	51 e1       	ldi	r21, 0x11	; 17
    3a8e:	07 c0       	rjmp	.+14     	; 0x3a9e <__udivmodhi4_ep>

00003a90 <__udivmodhi4_loop>:
    3a90:	aa 1f       	adc	r26, r26
    3a92:	bb 1f       	adc	r27, r27
    3a94:	a6 17       	cp	r26, r22
    3a96:	b7 07       	cpc	r27, r23
    3a98:	10 f0       	brcs	.+4      	; 0x3a9e <__udivmodhi4_ep>
    3a9a:	a6 1b       	sub	r26, r22
    3a9c:	b7 0b       	sbc	r27, r23

00003a9e <__udivmodhi4_ep>:
    3a9e:	88 1f       	adc	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	5a 95       	dec	r21
    3aa4:	a9 f7       	brne	.-22     	; 0x3a90 <__udivmodhi4_loop>
    3aa6:	80 95       	com	r24
    3aa8:	90 95       	com	r25
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	08 95       	ret

00003ab0 <__divmodhi4>:
    3ab0:	97 fb       	bst	r25, 7
    3ab2:	07 2e       	mov	r0, r23
    3ab4:	16 f4       	brtc	.+4      	; 0x3aba <__divmodhi4+0xa>
    3ab6:	00 94       	com	r0
    3ab8:	07 d0       	rcall	.+14     	; 0x3ac8 <__divmodhi4_neg1>
    3aba:	77 fd       	sbrc	r23, 7
    3abc:	09 d0       	rcall	.+18     	; 0x3ad0 <__divmodhi4_neg2>
    3abe:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__udivmodhi4>
    3ac2:	07 fc       	sbrc	r0, 7
    3ac4:	05 d0       	rcall	.+10     	; 0x3ad0 <__divmodhi4_neg2>
    3ac6:	3e f4       	brtc	.+14     	; 0x3ad6 <__divmodhi4_exit>

00003ac8 <__divmodhi4_neg1>:
    3ac8:	90 95       	com	r25
    3aca:	81 95       	neg	r24
    3acc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ace:	08 95       	ret

00003ad0 <__divmodhi4_neg2>:
    3ad0:	70 95       	com	r23
    3ad2:	61 95       	neg	r22
    3ad4:	7f 4f       	sbci	r23, 0xFF	; 255

00003ad6 <__divmodhi4_exit>:
    3ad6:	08 95       	ret

00003ad8 <__udivmodsi4>:
    3ad8:	a1 e2       	ldi	r26, 0x21	; 33
    3ada:	1a 2e       	mov	r1, r26
    3adc:	aa 1b       	sub	r26, r26
    3ade:	bb 1b       	sub	r27, r27
    3ae0:	fd 01       	movw	r30, r26
    3ae2:	0d c0       	rjmp	.+26     	; 0x3afe <__udivmodsi4_ep>

00003ae4 <__udivmodsi4_loop>:
    3ae4:	aa 1f       	adc	r26, r26
    3ae6:	bb 1f       	adc	r27, r27
    3ae8:	ee 1f       	adc	r30, r30
    3aea:	ff 1f       	adc	r31, r31
    3aec:	a2 17       	cp	r26, r18
    3aee:	b3 07       	cpc	r27, r19
    3af0:	e4 07       	cpc	r30, r20
    3af2:	f5 07       	cpc	r31, r21
    3af4:	20 f0       	brcs	.+8      	; 0x3afe <__udivmodsi4_ep>
    3af6:	a2 1b       	sub	r26, r18
    3af8:	b3 0b       	sbc	r27, r19
    3afa:	e4 0b       	sbc	r30, r20
    3afc:	f5 0b       	sbc	r31, r21

00003afe <__udivmodsi4_ep>:
    3afe:	66 1f       	adc	r22, r22
    3b00:	77 1f       	adc	r23, r23
    3b02:	88 1f       	adc	r24, r24
    3b04:	99 1f       	adc	r25, r25
    3b06:	1a 94       	dec	r1
    3b08:	69 f7       	brne	.-38     	; 0x3ae4 <__udivmodsi4_loop>
    3b0a:	60 95       	com	r22
    3b0c:	70 95       	com	r23
    3b0e:	80 95       	com	r24
    3b10:	90 95       	com	r25
    3b12:	9b 01       	movw	r18, r22
    3b14:	ac 01       	movw	r20, r24
    3b16:	bd 01       	movw	r22, r26
    3b18:	cf 01       	movw	r24, r30
    3b1a:	08 95       	ret

00003b1c <__divmodsi4>:
    3b1c:	05 2e       	mov	r0, r21
    3b1e:	97 fb       	bst	r25, 7
    3b20:	1e f4       	brtc	.+6      	; 0x3b28 <__divmodsi4+0xc>
    3b22:	00 94       	com	r0
    3b24:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <__negsi2>
    3b28:	57 fd       	sbrc	r21, 7
    3b2a:	07 d0       	rcall	.+14     	; 0x3b3a <__divmodsi4_neg2>
    3b2c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodsi4>
    3b30:	07 fc       	sbrc	r0, 7
    3b32:	03 d0       	rcall	.+6      	; 0x3b3a <__divmodsi4_neg2>
    3b34:	4e f4       	brtc	.+18     	; 0x3b48 <__divmodsi4_exit>
    3b36:	0c 94 a5 1d 	jmp	0x3b4a	; 0x3b4a <__negsi2>

00003b3a <__divmodsi4_neg2>:
    3b3a:	50 95       	com	r21
    3b3c:	40 95       	com	r20
    3b3e:	30 95       	com	r19
    3b40:	21 95       	neg	r18
    3b42:	3f 4f       	sbci	r19, 0xFF	; 255
    3b44:	4f 4f       	sbci	r20, 0xFF	; 255
    3b46:	5f 4f       	sbci	r21, 0xFF	; 255

00003b48 <__divmodsi4_exit>:
    3b48:	08 95       	ret

00003b4a <__negsi2>:
    3b4a:	90 95       	com	r25
    3b4c:	80 95       	com	r24
    3b4e:	70 95       	com	r23
    3b50:	61 95       	neg	r22
    3b52:	7f 4f       	sbci	r23, 0xFF	; 255
    3b54:	8f 4f       	sbci	r24, 0xFF	; 255
    3b56:	9f 4f       	sbci	r25, 0xFF	; 255
    3b58:	08 95       	ret

00003b5a <__tablejump2__>:
    3b5a:	ee 0f       	add	r30, r30
    3b5c:	ff 1f       	adc	r31, r31
    3b5e:	05 90       	lpm	r0, Z+
    3b60:	f4 91       	lpm	r31, Z
    3b62:	e0 2d       	mov	r30, r0
    3b64:	09 94       	ijmp

00003b66 <__umulhisi3>:
    3b66:	a2 9f       	mul	r26, r18
    3b68:	b0 01       	movw	r22, r0
    3b6a:	b3 9f       	mul	r27, r19
    3b6c:	c0 01       	movw	r24, r0
    3b6e:	a3 9f       	mul	r26, r19
    3b70:	70 0d       	add	r23, r0
    3b72:	81 1d       	adc	r24, r1
    3b74:	11 24       	eor	r1, r1
    3b76:	91 1d       	adc	r25, r1
    3b78:	b2 9f       	mul	r27, r18
    3b7a:	70 0d       	add	r23, r0
    3b7c:	81 1d       	adc	r24, r1
    3b7e:	11 24       	eor	r1, r1
    3b80:	91 1d       	adc	r25, r1
    3b82:	08 95       	ret

00003b84 <__muluhisi3>:
    3b84:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <__umulhisi3>
    3b88:	a5 9f       	mul	r26, r21
    3b8a:	90 0d       	add	r25, r0
    3b8c:	b4 9f       	mul	r27, r20
    3b8e:	90 0d       	add	r25, r0
    3b90:	a4 9f       	mul	r26, r20
    3b92:	80 0d       	add	r24, r0
    3b94:	91 1d       	adc	r25, r1
    3b96:	11 24       	eor	r1, r1
    3b98:	08 95       	ret

00003b9a <__mulshisi3>:
    3b9a:	b7 ff       	sbrs	r27, 7
    3b9c:	0c 94 c2 1d 	jmp	0x3b84	; 0x3b84 <__muluhisi3>

00003ba0 <__mulohisi3>:
    3ba0:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__muluhisi3>
    3ba4:	82 1b       	sub	r24, r18
    3ba6:	93 0b       	sbc	r25, r19
    3ba8:	08 95       	ret

00003baa <__prologue_saves__>:
    3baa:	2f 92       	push	r2
    3bac:	3f 92       	push	r3
    3bae:	4f 92       	push	r4
    3bb0:	5f 92       	push	r5
    3bb2:	6f 92       	push	r6
    3bb4:	7f 92       	push	r7
    3bb6:	8f 92       	push	r8
    3bb8:	9f 92       	push	r9
    3bba:	af 92       	push	r10
    3bbc:	bf 92       	push	r11
    3bbe:	cf 92       	push	r12
    3bc0:	df 92       	push	r13
    3bc2:	ef 92       	push	r14
    3bc4:	ff 92       	push	r15
    3bc6:	0f 93       	push	r16
    3bc8:	1f 93       	push	r17
    3bca:	cf 93       	push	r28
    3bcc:	df 93       	push	r29
    3bce:	cd b7       	in	r28, 0x3d	; 61
    3bd0:	de b7       	in	r29, 0x3e	; 62
    3bd2:	ca 1b       	sub	r28, r26
    3bd4:	db 0b       	sbc	r29, r27
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	09 94       	ijmp

00003be2 <__epilogue_restores__>:
    3be2:	2a 88       	ldd	r2, Y+18	; 0x12
    3be4:	39 88       	ldd	r3, Y+17	; 0x11
    3be6:	48 88       	ldd	r4, Y+16	; 0x10
    3be8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bea:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bec:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bee:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bf0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bf2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bf4:	b9 84       	ldd	r11, Y+9	; 0x09
    3bf6:	c8 84       	ldd	r12, Y+8	; 0x08
    3bf8:	df 80       	ldd	r13, Y+7	; 0x07
    3bfa:	ee 80       	ldd	r14, Y+6	; 0x06
    3bfc:	fd 80       	ldd	r15, Y+5	; 0x05
    3bfe:	0c 81       	ldd	r16, Y+4	; 0x04
    3c00:	1b 81       	ldd	r17, Y+3	; 0x03
    3c02:	aa 81       	ldd	r26, Y+2	; 0x02
    3c04:	b9 81       	ldd	r27, Y+1	; 0x01
    3c06:	ce 0f       	add	r28, r30
    3c08:	d1 1d       	adc	r29, r1
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	f8 94       	cli
    3c0e:	de bf       	out	0x3e, r29	; 62
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	cd bf       	out	0x3d, r28	; 61
    3c14:	ed 01       	movw	r28, r26
    3c16:	08 95       	ret

00003c18 <malloc>:
    3c18:	0f 93       	push	r16
    3c1a:	1f 93       	push	r17
    3c1c:	cf 93       	push	r28
    3c1e:	df 93       	push	r29
    3c20:	82 30       	cpi	r24, 0x02	; 2
    3c22:	91 05       	cpc	r25, r1
    3c24:	10 f4       	brcc	.+4      	; 0x3c2a <malloc+0x12>
    3c26:	82 e0       	ldi	r24, 0x02	; 2
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <__flp>
    3c2e:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <__flp+0x1>
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	a0 e0       	ldi	r26, 0x00	; 0
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	30 97       	sbiw	r30, 0x00	; 0
    3c3c:	19 f1       	breq	.+70     	; 0x3c84 <malloc+0x6c>
    3c3e:	40 81       	ld	r20, Z
    3c40:	51 81       	ldd	r21, Z+1	; 0x01
    3c42:	02 81       	ldd	r16, Z+2	; 0x02
    3c44:	13 81       	ldd	r17, Z+3	; 0x03
    3c46:	48 17       	cp	r20, r24
    3c48:	59 07       	cpc	r21, r25
    3c4a:	c8 f0       	brcs	.+50     	; 0x3c7e <malloc+0x66>
    3c4c:	84 17       	cp	r24, r20
    3c4e:	95 07       	cpc	r25, r21
    3c50:	69 f4       	brne	.+26     	; 0x3c6c <malloc+0x54>
    3c52:	10 97       	sbiw	r26, 0x00	; 0
    3c54:	31 f0       	breq	.+12     	; 0x3c62 <malloc+0x4a>
    3c56:	12 96       	adiw	r26, 0x02	; 2
    3c58:	0c 93       	st	X, r16
    3c5a:	12 97       	sbiw	r26, 0x02	; 2
    3c5c:	13 96       	adiw	r26, 0x03	; 3
    3c5e:	1c 93       	st	X, r17
    3c60:	27 c0       	rjmp	.+78     	; 0x3cb0 <malloc+0x98>
    3c62:	00 93 2b 02 	sts	0x022B, r16	; 0x80022b <__flp>
    3c66:	10 93 2c 02 	sts	0x022C, r17	; 0x80022c <__flp+0x1>
    3c6a:	22 c0       	rjmp	.+68     	; 0x3cb0 <malloc+0x98>
    3c6c:	21 15       	cp	r18, r1
    3c6e:	31 05       	cpc	r19, r1
    3c70:	19 f0       	breq	.+6      	; 0x3c78 <malloc+0x60>
    3c72:	42 17       	cp	r20, r18
    3c74:	53 07       	cpc	r21, r19
    3c76:	18 f4       	brcc	.+6      	; 0x3c7e <malloc+0x66>
    3c78:	9a 01       	movw	r18, r20
    3c7a:	bd 01       	movw	r22, r26
    3c7c:	ef 01       	movw	r28, r30
    3c7e:	df 01       	movw	r26, r30
    3c80:	f8 01       	movw	r30, r16
    3c82:	db cf       	rjmp	.-74     	; 0x3c3a <malloc+0x22>
    3c84:	21 15       	cp	r18, r1
    3c86:	31 05       	cpc	r19, r1
    3c88:	f9 f0       	breq	.+62     	; 0x3cc8 <malloc+0xb0>
    3c8a:	28 1b       	sub	r18, r24
    3c8c:	39 0b       	sbc	r19, r25
    3c8e:	24 30       	cpi	r18, 0x04	; 4
    3c90:	31 05       	cpc	r19, r1
    3c92:	80 f4       	brcc	.+32     	; 0x3cb4 <malloc+0x9c>
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	61 15       	cp	r22, r1
    3c9a:	71 05       	cpc	r23, r1
    3c9c:	21 f0       	breq	.+8      	; 0x3ca6 <malloc+0x8e>
    3c9e:	fb 01       	movw	r30, r22
    3ca0:	93 83       	std	Z+3, r25	; 0x03
    3ca2:	82 83       	std	Z+2, r24	; 0x02
    3ca4:	04 c0       	rjmp	.+8      	; 0x3cae <malloc+0x96>
    3ca6:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <__flp+0x1>
    3caa:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__flp>
    3cae:	fe 01       	movw	r30, r28
    3cb0:	32 96       	adiw	r30, 0x02	; 2
    3cb2:	44 c0       	rjmp	.+136    	; 0x3d3c <malloc+0x124>
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	e2 0f       	add	r30, r18
    3cb8:	f3 1f       	adc	r31, r19
    3cba:	81 93       	st	Z+, r24
    3cbc:	91 93       	st	Z+, r25
    3cbe:	22 50       	subi	r18, 0x02	; 2
    3cc0:	31 09       	sbc	r19, r1
    3cc2:	39 83       	std	Y+1, r19	; 0x01
    3cc4:	28 83       	st	Y, r18
    3cc6:	3a c0       	rjmp	.+116    	; 0x3d3c <malloc+0x124>
    3cc8:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <__brkval>
    3ccc:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <__brkval+0x1>
    3cd0:	23 2b       	or	r18, r19
    3cd2:	41 f4       	brne	.+16     	; 0x3ce4 <malloc+0xcc>
    3cd4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3cd8:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3cdc:	30 93 2a 02 	sts	0x022A, r19	; 0x80022a <__brkval+0x1>
    3ce0:	20 93 29 02 	sts	0x0229, r18	; 0x800229 <__brkval>
    3ce4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3ce8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3cec:	21 15       	cp	r18, r1
    3cee:	31 05       	cpc	r19, r1
    3cf0:	41 f4       	brne	.+16     	; 0x3d02 <malloc+0xea>
    3cf2:	2d b7       	in	r18, 0x3d	; 61
    3cf4:	3e b7       	in	r19, 0x3e	; 62
    3cf6:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3cfa:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3cfe:	24 1b       	sub	r18, r20
    3d00:	35 0b       	sbc	r19, r21
    3d02:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <__brkval>
    3d06:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <__brkval+0x1>
    3d0a:	e2 17       	cp	r30, r18
    3d0c:	f3 07       	cpc	r31, r19
    3d0e:	a0 f4       	brcc	.+40     	; 0x3d38 <malloc+0x120>
    3d10:	2e 1b       	sub	r18, r30
    3d12:	3f 0b       	sbc	r19, r31
    3d14:	28 17       	cp	r18, r24
    3d16:	39 07       	cpc	r19, r25
    3d18:	78 f0       	brcs	.+30     	; 0x3d38 <malloc+0x120>
    3d1a:	ac 01       	movw	r20, r24
    3d1c:	4e 5f       	subi	r20, 0xFE	; 254
    3d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3d20:	24 17       	cp	r18, r20
    3d22:	35 07       	cpc	r19, r21
    3d24:	48 f0       	brcs	.+18     	; 0x3d38 <malloc+0x120>
    3d26:	4e 0f       	add	r20, r30
    3d28:	5f 1f       	adc	r21, r31
    3d2a:	50 93 2a 02 	sts	0x022A, r21	; 0x80022a <__brkval+0x1>
    3d2e:	40 93 29 02 	sts	0x0229, r20	; 0x800229 <__brkval>
    3d32:	81 93       	st	Z+, r24
    3d34:	91 93       	st	Z+, r25
    3d36:	02 c0       	rjmp	.+4      	; 0x3d3c <malloc+0x124>
    3d38:	e0 e0       	ldi	r30, 0x00	; 0
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	cf 01       	movw	r24, r30
    3d3e:	df 91       	pop	r29
    3d40:	cf 91       	pop	r28
    3d42:	1f 91       	pop	r17
    3d44:	0f 91       	pop	r16
    3d46:	08 95       	ret

00003d48 <free>:
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
    3d4c:	00 97       	sbiw	r24, 0x00	; 0
    3d4e:	09 f4       	brne	.+2      	; 0x3d52 <free+0xa>
    3d50:	81 c0       	rjmp	.+258    	; 0x3e54 <free+0x10c>
    3d52:	fc 01       	movw	r30, r24
    3d54:	32 97       	sbiw	r30, 0x02	; 2
    3d56:	13 82       	std	Z+3, r1	; 0x03
    3d58:	12 82       	std	Z+2, r1	; 0x02
    3d5a:	a0 91 2b 02 	lds	r26, 0x022B	; 0x80022b <__flp>
    3d5e:	b0 91 2c 02 	lds	r27, 0x022C	; 0x80022c <__flp+0x1>
    3d62:	10 97       	sbiw	r26, 0x00	; 0
    3d64:	81 f4       	brne	.+32     	; 0x3d86 <free+0x3e>
    3d66:	20 81       	ld	r18, Z
    3d68:	31 81       	ldd	r19, Z+1	; 0x01
    3d6a:	82 0f       	add	r24, r18
    3d6c:	93 1f       	adc	r25, r19
    3d6e:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <__brkval>
    3d72:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <__brkval+0x1>
    3d76:	28 17       	cp	r18, r24
    3d78:	39 07       	cpc	r19, r25
    3d7a:	51 f5       	brne	.+84     	; 0x3dd0 <free+0x88>
    3d7c:	f0 93 2a 02 	sts	0x022A, r31	; 0x80022a <__brkval+0x1>
    3d80:	e0 93 29 02 	sts	0x0229, r30	; 0x800229 <__brkval>
    3d84:	67 c0       	rjmp	.+206    	; 0x3e54 <free+0x10c>
    3d86:	ed 01       	movw	r28, r26
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	ce 17       	cp	r28, r30
    3d8e:	df 07       	cpc	r29, r31
    3d90:	40 f4       	brcc	.+16     	; 0x3da2 <free+0x5a>
    3d92:	4a 81       	ldd	r20, Y+2	; 0x02
    3d94:	5b 81       	ldd	r21, Y+3	; 0x03
    3d96:	9e 01       	movw	r18, r28
    3d98:	41 15       	cp	r20, r1
    3d9a:	51 05       	cpc	r21, r1
    3d9c:	f1 f0       	breq	.+60     	; 0x3dda <free+0x92>
    3d9e:	ea 01       	movw	r28, r20
    3da0:	f5 cf       	rjmp	.-22     	; 0x3d8c <free+0x44>
    3da2:	d3 83       	std	Z+3, r29	; 0x03
    3da4:	c2 83       	std	Z+2, r28	; 0x02
    3da6:	40 81       	ld	r20, Z
    3da8:	51 81       	ldd	r21, Z+1	; 0x01
    3daa:	84 0f       	add	r24, r20
    3dac:	95 1f       	adc	r25, r21
    3dae:	c8 17       	cp	r28, r24
    3db0:	d9 07       	cpc	r29, r25
    3db2:	59 f4       	brne	.+22     	; 0x3dca <free+0x82>
    3db4:	88 81       	ld	r24, Y
    3db6:	99 81       	ldd	r25, Y+1	; 0x01
    3db8:	84 0f       	add	r24, r20
    3dba:	95 1f       	adc	r25, r21
    3dbc:	02 96       	adiw	r24, 0x02	; 2
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	80 83       	st	Z, r24
    3dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc6:	93 83       	std	Z+3, r25	; 0x03
    3dc8:	82 83       	std	Z+2, r24	; 0x02
    3dca:	21 15       	cp	r18, r1
    3dcc:	31 05       	cpc	r19, r1
    3dce:	29 f4       	brne	.+10     	; 0x3dda <free+0x92>
    3dd0:	f0 93 2c 02 	sts	0x022C, r31	; 0x80022c <__flp+0x1>
    3dd4:	e0 93 2b 02 	sts	0x022B, r30	; 0x80022b <__flp>
    3dd8:	3d c0       	rjmp	.+122    	; 0x3e54 <free+0x10c>
    3dda:	e9 01       	movw	r28, r18
    3ddc:	fb 83       	std	Y+3, r31	; 0x03
    3dde:	ea 83       	std	Y+2, r30	; 0x02
    3de0:	49 91       	ld	r20, Y+
    3de2:	59 91       	ld	r21, Y+
    3de4:	c4 0f       	add	r28, r20
    3de6:	d5 1f       	adc	r29, r21
    3de8:	ec 17       	cp	r30, r28
    3dea:	fd 07       	cpc	r31, r29
    3dec:	61 f4       	brne	.+24     	; 0x3e06 <free+0xbe>
    3dee:	80 81       	ld	r24, Z
    3df0:	91 81       	ldd	r25, Z+1	; 0x01
    3df2:	84 0f       	add	r24, r20
    3df4:	95 1f       	adc	r25, r21
    3df6:	02 96       	adiw	r24, 0x02	; 2
    3df8:	e9 01       	movw	r28, r18
    3dfa:	99 83       	std	Y+1, r25	; 0x01
    3dfc:	88 83       	st	Y, r24
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	9b 83       	std	Y+3, r25	; 0x03
    3e04:	8a 83       	std	Y+2, r24	; 0x02
    3e06:	e0 e0       	ldi	r30, 0x00	; 0
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	12 96       	adiw	r26, 0x02	; 2
    3e0c:	8d 91       	ld	r24, X+
    3e0e:	9c 91       	ld	r25, X
    3e10:	13 97       	sbiw	r26, 0x03	; 3
    3e12:	00 97       	sbiw	r24, 0x00	; 0
    3e14:	19 f0       	breq	.+6      	; 0x3e1c <free+0xd4>
    3e16:	fd 01       	movw	r30, r26
    3e18:	dc 01       	movw	r26, r24
    3e1a:	f7 cf       	rjmp	.-18     	; 0x3e0a <free+0xc2>
    3e1c:	8d 91       	ld	r24, X+
    3e1e:	9c 91       	ld	r25, X
    3e20:	11 97       	sbiw	r26, 0x01	; 1
    3e22:	9d 01       	movw	r18, r26
    3e24:	2e 5f       	subi	r18, 0xFE	; 254
    3e26:	3f 4f       	sbci	r19, 0xFF	; 255
    3e28:	82 0f       	add	r24, r18
    3e2a:	93 1f       	adc	r25, r19
    3e2c:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <__brkval>
    3e30:	30 91 2a 02 	lds	r19, 0x022A	; 0x80022a <__brkval+0x1>
    3e34:	28 17       	cp	r18, r24
    3e36:	39 07       	cpc	r19, r25
    3e38:	69 f4       	brne	.+26     	; 0x3e54 <free+0x10c>
    3e3a:	30 97       	sbiw	r30, 0x00	; 0
    3e3c:	29 f4       	brne	.+10     	; 0x3e48 <free+0x100>
    3e3e:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <__flp+0x1>
    3e42:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__flp>
    3e46:	02 c0       	rjmp	.+4      	; 0x3e4c <free+0x104>
    3e48:	13 82       	std	Z+3, r1	; 0x03
    3e4a:	12 82       	std	Z+2, r1	; 0x02
    3e4c:	b0 93 2a 02 	sts	0x022A, r27	; 0x80022a <__brkval+0x1>
    3e50:	a0 93 29 02 	sts	0x0229, r26	; 0x800229 <__brkval>
    3e54:	df 91       	pop	r29
    3e56:	cf 91       	pop	r28
    3e58:	08 95       	ret

00003e5a <strncat>:
    3e5a:	fb 01       	movw	r30, r22
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	0d 90       	ld	r0, X+
    3e60:	00 20       	and	r0, r0
    3e62:	e9 f7       	brne	.-6      	; 0x3e5e <strncat+0x4>
    3e64:	11 97       	sbiw	r26, 0x01	; 1
    3e66:	41 50       	subi	r20, 0x01	; 1
    3e68:	50 40       	sbci	r21, 0x00	; 0
    3e6a:	28 f0       	brcs	.+10     	; 0x3e76 <strncat+0x1c>
    3e6c:	01 90       	ld	r0, Z+
    3e6e:	00 20       	and	r0, r0
    3e70:	0d 92       	st	X+, r0
    3e72:	c9 f7       	brne	.-14     	; 0x3e66 <strncat+0xc>
    3e74:	08 95       	ret
    3e76:	1c 92       	st	X, r1
    3e78:	08 95       	ret

00003e7a <__do_global_dtors>:
    3e7a:	10 e0       	ldi	r17, 0x00	; 0
    3e7c:	c9 e5       	ldi	r28, 0x59	; 89
    3e7e:	d0 e0       	ldi	r29, 0x00	; 0
    3e80:	04 c0       	rjmp	.+8      	; 0x3e8a <__do_global_dtors+0x10>
    3e82:	fe 01       	movw	r30, r28
    3e84:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__tablejump2__>
    3e88:	21 96       	adiw	r28, 0x01	; 1
    3e8a:	ca 35       	cpi	r28, 0x5A	; 90
    3e8c:	d1 07       	cpc	r29, r17
    3e8e:	c9 f7       	brne	.-14     	; 0x3e82 <__do_global_dtors+0x8>
    3e90:	f8 94       	cli

00003e92 <__stop_program>:
    3e92:	ff cf       	rjmp	.-2      	; 0x3e92 <__stop_program>
