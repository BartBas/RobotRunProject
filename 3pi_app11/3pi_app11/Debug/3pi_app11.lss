
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00003d98  00003e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  0080018c  0080018c  00003eb8  2**0
                  ALLOC
  3 .stab         00007b48  00000000  00000000  00003eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000ba00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00015a86  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00015ac8  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000001c0  00000000  00000000  00015b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003659  00000000  00000000  00015cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000011f3  00000000  00000000  00019321  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000219f  00000000  00000000  0001a514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000056c  00000000  00000000  0001c6b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a9e  00000000  00000000  0001cc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001699  00000000  00000000  0001d6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001d8  00000000  00000000  0001ed57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__dtors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__vector_9>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__vector_13>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__vector_18>
      4c:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__vector_19>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	c3 08       	sbc	r12, r3
      6a:	f1 08       	sbc	r15, r1
      6c:	5c 09       	sbc	r21, r12
      6e:	c7 08       	sbc	r12, r7
      70:	d6 08       	sbc	r13, r6
      72:	e5 08       	sbc	r14, r5
      74:	c7 08       	sbc	r12, r7
      76:	c7 08       	sbc	r12, r7
      78:	c7 08       	sbc	r12, r7

0000007a <__trampolines_end>:
      7a:	3e 67       	ori	r19, 0x7E	; 126
      7c:	33 32       	cpi	r19, 0x23	; 35
      7e:	3e 3e       	cpi	r19, 0xEE	; 238
      80:	63 33       	cpi	r22, 0x33	; 51
      82:	32 00       	.word	0x0032	; ????

00000084 <__ctors_end>:
      84:	ae 17       	cp	r26, r30

00000086 <__dtors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	e8 e9       	ldi	r30, 0x98	; 152
      9a:	fd e3       	ldi	r31, 0x3D	; 61
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	ac 38       	cpi	r26, 0x8C	; 140
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	22 e0       	ldi	r18, 0x02	; 2
      aa:	ac e8       	ldi	r26, 0x8C	; 140
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	af 31       	cpi	r26, 0x1F	; 31
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 15 04 	call	0x82a	; 0x82a <main>
      bc:	0c 94 bf 1e 	jmp	0x3d7e	; 0x3d7e <__do_global_dtors>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <filllocationarrays>:
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	e2 97       	sbiw	r28, 0x32	; 50
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	f8 94       	cli
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	0f be       	out	0x3f, r0	; 63
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	dc 01       	movw	r26, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	1a c0       	rjmp	.+52     	; 0x114 <filllocationarrays+0x50>
      e0:	ad 01       	movw	r20, r26
      e2:	42 0f       	add	r20, r18
      e4:	53 1f       	adc	r21, r19
      e6:	ca 01       	movw	r24, r20
      e8:	8e 5a       	subi	r24, 0xAE	; 174
      ea:	9f 4f       	sbci	r25, 0xFF	; 255
      ec:	fc 01       	movw	r30, r24
      ee:	10 82       	st	Z, r1
      f0:	fa 01       	movw	r30, r20
      f2:	11 ae       	std	Z+57, r1	; 0x39
      f4:	ea e1       	ldi	r30, 0x1A	; 26
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	ec 0f       	add	r30, r28
      fa:	fd 1f       	adc	r31, r29
      fc:	e2 0f       	add	r30, r18
      fe:	f3 1f       	adc	r31, r19
     100:	10 82       	st	Z, r1
     102:	e1 e0       	ldi	r30, 0x01	; 1
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ec 0f       	add	r30, r28
     108:	fd 1f       	adc	r31, r29
     10a:	e2 0f       	add	r30, r18
     10c:	f3 1f       	adc	r31, r19
     10e:	10 82       	st	Z, r1
     110:	2f 5f       	subi	r18, 0xFF	; 255
     112:	3f 4f       	sbci	r19, 0xFF	; 255
     114:	29 31       	cpi	r18, 0x19	; 25
     116:	31 05       	cpc	r19, r1
     118:	1c f3       	brlt	.-58     	; 0xe0 <filllocationarrays+0x1c>
     11a:	5c 96       	adiw	r26, 0x1c	; 28
     11c:	8c 91       	ld	r24, X
     11e:	5c 97       	sbiw	r26, 0x1c	; 28
     120:	81 30       	cpi	r24, 0x01	; 1
     122:	29 f4       	brne	.+10     	; 0x12e <filllocationarrays+0x6a>
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	8a 8f       	std	Y+26, r24	; 0x1a
     128:	21 e0       	ldi	r18, 0x01	; 1
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <filllocationarrays+0x6e>
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	3b c0       	rjmp	.+118    	; 0x1ae <filllocationarrays+0xea>
     138:	5d 96       	adiw	r26, 0x1d	; 29
     13a:	8c 91       	ld	r24, X
     13c:	5d 97       	sbiw	r26, 0x1d	; 29
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	04 2e       	mov	r0, r20
     142:	02 c0       	rjmp	.+4      	; 0x148 <filllocationarrays+0x84>
     144:	95 95       	asr	r25
     146:	87 95       	ror	r24
     148:	0a 94       	dec	r0
     14a:	e2 f7       	brpl	.-8      	; 0x144 <filllocationarrays+0x80>
     14c:	81 70       	andi	r24, 0x01	; 1
     14e:	44 30       	cpi	r20, 0x04	; 4
     150:	51 05       	cpc	r21, r1
     152:	b4 f4       	brge	.+44     	; 0x180 <filllocationarrays+0xbc>
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	49 f5       	brne	.+82     	; 0x1aa <filllocationarrays+0xe6>
     158:	e1 e0       	ldi	r30, 0x01	; 1
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	ec 0f       	add	r30, r28
     15e:	fd 1f       	adc	r31, r29
     160:	e2 0f       	add	r30, r18
     162:	f3 1f       	adc	r31, r19
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	84 0f       	add	r24, r20
     168:	80 83       	st	Z, r24
     16a:	ea e1       	ldi	r30, 0x1A	; 26
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	ec 0f       	add	r30, r28
     170:	fd 1f       	adc	r31, r29
     172:	e2 0f       	add	r30, r18
     174:	f3 1f       	adc	r31, r19
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 83       	st	Z, r24
     17a:	2f 5f       	subi	r18, 0xFF	; 255
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	15 c0       	rjmp	.+42     	; 0x1aa <filllocationarrays+0xe6>
     180:	81 30       	cpi	r24, 0x01	; 1
     182:	99 f4       	brne	.+38     	; 0x1aa <filllocationarrays+0xe6>
     184:	e1 e0       	ldi	r30, 0x01	; 1
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	ec 0f       	add	r30, r28
     18a:	fd 1f       	adc	r31, r29
     18c:	e2 0f       	add	r30, r18
     18e:	f3 1f       	adc	r31, r19
     190:	8d ef       	ldi	r24, 0xFD	; 253
     192:	84 0f       	add	r24, r20
     194:	80 83       	st	Z, r24
     196:	ea e1       	ldi	r30, 0x1A	; 26
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	ec 0f       	add	r30, r28
     19c:	fd 1f       	adc	r31, r29
     19e:	e2 0f       	add	r30, r18
     1a0:	f3 1f       	adc	r31, r19
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	80 83       	st	Z, r24
     1a6:	2f 5f       	subi	r18, 0xFF	; 255
     1a8:	3f 4f       	sbci	r19, 0xFF	; 255
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	48 30       	cpi	r20, 0x08	; 8
     1b0:	51 05       	cpc	r21, r1
     1b2:	14 f2       	brlt	.-124    	; 0x138 <filllocationarrays+0x74>
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	53 c0       	rjmp	.+166    	; 0x260 <filllocationarrays+0x19c>
     1ba:	5e 96       	adiw	r26, 0x1e	; 30
     1bc:	8c 91       	ld	r24, X
     1be:	5e 97       	sbiw	r26, 0x1e	; 30
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	04 2e       	mov	r0, r20
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <filllocationarrays+0x106>
     1c6:	95 95       	asr	r25
     1c8:	87 95       	ror	r24
     1ca:	0a 94       	dec	r0
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <filllocationarrays+0x102>
     1ce:	81 70       	andi	r24, 0x01	; 1
     1d0:	41 15       	cp	r20, r1
     1d2:	51 05       	cpc	r21, r1
     1d4:	b9 f4       	brne	.+46     	; 0x204 <filllocationarrays+0x140>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	09 f0       	breq	.+2      	; 0x1dc <filllocationarrays+0x118>
     1da:	40 c0       	rjmp	.+128    	; 0x25c <filllocationarrays+0x198>
     1dc:	e1 e0       	ldi	r30, 0x01	; 1
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	ec 0f       	add	r30, r28
     1e2:	fd 1f       	adc	r31, r29
     1e4:	e2 0f       	add	r30, r18
     1e6:	f3 1f       	adc	r31, r19
     1e8:	85 e0       	ldi	r24, 0x05	; 5
     1ea:	84 0f       	add	r24, r20
     1ec:	80 83       	st	Z, r24
     1ee:	ea e1       	ldi	r30, 0x1A	; 26
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	ec 0f       	add	r30, r28
     1f4:	fd 1f       	adc	r31, r29
     1f6:	e2 0f       	add	r30, r18
     1f8:	f3 1f       	adc	r31, r19
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	80 83       	st	Z, r24
     1fe:	2f 5f       	subi	r18, 0xFF	; 255
     200:	3f 4f       	sbci	r19, 0xFF	; 255
     202:	2c c0       	rjmp	.+88     	; 0x25c <filllocationarrays+0x198>
     204:	46 30       	cpi	r20, 0x06	; 6
     206:	51 05       	cpc	r21, r1
     208:	a4 f4       	brge	.+40     	; 0x232 <filllocationarrays+0x16e>
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	39 f5       	brne	.+78     	; 0x25c <filllocationarrays+0x198>
     20e:	e1 e0       	ldi	r30, 0x01	; 1
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ec 0f       	add	r30, r28
     214:	fd 1f       	adc	r31, r29
     216:	e2 0f       	add	r30, r18
     218:	f3 1f       	adc	r31, r19
     21a:	40 83       	st	Z, r20
     21c:	ea e1       	ldi	r30, 0x1A	; 26
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	ec 0f       	add	r30, r28
     222:	fd 1f       	adc	r31, r29
     224:	e2 0f       	add	r30, r18
     226:	f3 1f       	adc	r31, r19
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	80 83       	st	Z, r24
     22c:	2f 5f       	subi	r18, 0xFF	; 255
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	15 c0       	rjmp	.+42     	; 0x25c <filllocationarrays+0x198>
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	99 f4       	brne	.+38     	; 0x25c <filllocationarrays+0x198>
     236:	e1 e0       	ldi	r30, 0x01	; 1
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ec 0f       	add	r30, r28
     23c:	fd 1f       	adc	r31, r29
     23e:	e2 0f       	add	r30, r18
     240:	f3 1f       	adc	r31, r19
     242:	8b ef       	ldi	r24, 0xFB	; 251
     244:	84 0f       	add	r24, r20
     246:	80 83       	st	Z, r24
     248:	ea e1       	ldi	r30, 0x1A	; 26
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	ec 0f       	add	r30, r28
     24e:	fd 1f       	adc	r31, r29
     250:	e2 0f       	add	r30, r18
     252:	f3 1f       	adc	r31, r19
     254:	84 e0       	ldi	r24, 0x04	; 4
     256:	80 83       	st	Z, r24
     258:	2f 5f       	subi	r18, 0xFF	; 255
     25a:	3f 4f       	sbci	r19, 0xFF	; 255
     25c:	4f 5f       	subi	r20, 0xFF	; 255
     25e:	5f 4f       	sbci	r21, 0xFF	; 255
     260:	48 30       	cpi	r20, 0x08	; 8
     262:	51 05       	cpc	r21, r1
     264:	0c f4       	brge	.+2      	; 0x268 <filllocationarrays+0x1a4>
     266:	a9 cf       	rjmp	.-174    	; 0x1ba <filllocationarrays+0xf6>
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	3b c0       	rjmp	.+118    	; 0x2e4 <filllocationarrays+0x220>
     26e:	5f 96       	adiw	r26, 0x1f	; 31
     270:	8c 91       	ld	r24, X
     272:	5f 97       	sbiw	r26, 0x1f	; 31
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	04 2e       	mov	r0, r20
     278:	02 c0       	rjmp	.+4      	; 0x27e <filllocationarrays+0x1ba>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	0a 94       	dec	r0
     280:	e2 f7       	brpl	.-8      	; 0x27a <filllocationarrays+0x1b6>
     282:	81 70       	andi	r24, 0x01	; 1
     284:	43 30       	cpi	r20, 0x03	; 3
     286:	51 05       	cpc	r21, r1
     288:	b4 f4       	brge	.+44     	; 0x2b6 <filllocationarrays+0x1f2>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	49 f5       	brne	.+82     	; 0x2e0 <filllocationarrays+0x21c>
     28e:	e1 e0       	ldi	r30, 0x01	; 1
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ec 0f       	add	r30, r28
     294:	fd 1f       	adc	r31, r29
     296:	e2 0f       	add	r30, r18
     298:	f3 1f       	adc	r31, r19
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	84 0f       	add	r24, r20
     29e:	80 83       	st	Z, r24
     2a0:	ea e1       	ldi	r30, 0x1A	; 26
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	ec 0f       	add	r30, r28
     2a6:	fd 1f       	adc	r31, r29
     2a8:	e2 0f       	add	r30, r18
     2aa:	f3 1f       	adc	r31, r19
     2ac:	84 e0       	ldi	r24, 0x04	; 4
     2ae:	80 83       	st	Z, r24
     2b0:	2f 5f       	subi	r18, 0xFF	; 255
     2b2:	3f 4f       	sbci	r19, 0xFF	; 255
     2b4:	15 c0       	rjmp	.+42     	; 0x2e0 <filllocationarrays+0x21c>
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	99 f4       	brne	.+38     	; 0x2e0 <filllocationarrays+0x21c>
     2ba:	e1 e0       	ldi	r30, 0x01	; 1
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	ec 0f       	add	r30, r28
     2c0:	fd 1f       	adc	r31, r29
     2c2:	e2 0f       	add	r30, r18
     2c4:	f3 1f       	adc	r31, r19
     2c6:	8e ef       	ldi	r24, 0xFE	; 254
     2c8:	84 0f       	add	r24, r20
     2ca:	80 83       	st	Z, r24
     2cc:	ea e1       	ldi	r30, 0x1A	; 26
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	ec 0f       	add	r30, r28
     2d2:	fd 1f       	adc	r31, r29
     2d4:	e2 0f       	add	r30, r18
     2d6:	f3 1f       	adc	r31, r19
     2d8:	85 e0       	ldi	r24, 0x05	; 5
     2da:	80 83       	st	Z, r24
     2dc:	2f 5f       	subi	r18, 0xFF	; 255
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
     2e0:	4f 5f       	subi	r20, 0xFF	; 255
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	48 30       	cpi	r20, 0x08	; 8
     2e6:	51 05       	cpc	r21, r1
     2e8:	14 f2       	brlt	.-124    	; 0x26e <filllocationarrays+0x1aa>
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	19 c0       	rjmp	.+50     	; 0x322 <filllocationarrays+0x25e>
     2f0:	e1 e0       	ldi	r30, 0x01	; 1
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	ec 0f       	add	r30, r28
     2f6:	fd 1f       	adc	r31, r29
     2f8:	e2 0f       	add	r30, r18
     2fa:	f3 1f       	adc	r31, r19
     2fc:	40 81       	ld	r20, Z
     2fe:	cd 01       	movw	r24, r26
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	fc 01       	movw	r30, r24
     306:	ee 5a       	subi	r30, 0xAE	; 174
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	40 83       	st	Z, r20
     30c:	ea e1       	ldi	r30, 0x1A	; 26
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ec 0f       	add	r30, r28
     312:	fd 1f       	adc	r31, r29
     314:	e2 0f       	add	r30, r18
     316:	f3 1f       	adc	r31, r19
     318:	40 81       	ld	r20, Z
     31a:	fc 01       	movw	r30, r24
     31c:	41 af       	std	Z+57, r20	; 0x39
     31e:	2f 5f       	subi	r18, 0xFF	; 255
     320:	3f 4f       	sbci	r19, 0xFF	; 255
     322:	29 31       	cpi	r18, 0x19	; 25
     324:	31 05       	cpc	r19, r1
     326:	24 f3       	brlt	.-56     	; 0x2f0 <filllocationarrays+0x22c>
     328:	e2 96       	adiw	r28, 0x32	; 50
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <sendACK>:
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	00 d0       	rcall	.+0      	; 0x340 <sendACK+0x6>
     340:	1f 92       	push	r1
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	88 e0       	ldi	r24, 0x08	; 8
     348:	89 83       	std	Y+1, r24	; 0x01
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	8a 83       	std	Y+2, r24	; 0x02
     34e:	85 e6       	ldi	r24, 0x65	; 101
     350:	8b 83       	std	Y+3, r24	; 0x03
     352:	64 e0       	ldi	r22, 0x04	; 4
     354:	ce 01       	movw	r24, r28
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <serial_send_blocking>
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <Update>:
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	ec 01       	movw	r28, r24
     378:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <serial_receive_buffer_full>
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	09 f0       	breq	.+2      	; 0x382 <Update+0x1a>
     380:	5c c0       	rjmp	.+184    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     382:	8b 8d       	ldd	r24, Y+27	; 0x1b
     384:	88 30       	cpi	r24, 0x08	; 8
     386:	09 f0       	breq	.+2      	; 0x38a <Update+0x22>
     388:	5a c0       	rjmp	.+180    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     38a:	e8 81       	ld	r30, Y
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	31 97       	sbiw	r30, 0x01	; 1
     390:	ec 0f       	add	r30, r28
     392:	fd 1f       	adc	r31, r29
     394:	83 8d       	ldd	r24, Z+27	; 0x1b
     396:	85 36       	cpi	r24, 0x65	; 101
     398:	09 f0       	breq	.+2      	; 0x39c <Update+0x34>
     39a:	53 c0       	rjmp	.+166    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     39c:	ce 01       	movw	r24, r28
     39e:	0e 94 9d 01 	call	0x33a	; 0x33a <sendACK>
     3a2:	0e 94 cf 13 	call	0x279e	; 0x279e <clear>
     3a6:	68 a1       	ldd	r22, Y+32	; 0x20
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 33 14 	call	0x2866	; 0x2866 <print_long>
     3b2:	88 a1       	ldd	r24, Y+32	; 0x20
     3b4:	8e 3f       	cpi	r24, 0xFE	; 254
     3b6:	19 f0       	breq	.+6      	; 0x3be <Update+0x56>
     3b8:	8b a1       	ldd	r24, Y+35	; 0x23
     3ba:	8e 3f       	cpi	r24, 0xFE	; 254
     3bc:	29 f4       	brne	.+10     	; 0x3c8 <Update+0x60>
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	fe 01       	movw	r30, r28
     3c2:	e5 59       	subi	r30, 0x95	; 149
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	80 83       	st	Z, r24
     3c8:	8b a1       	ldd	r24, Y+35	; 0x23
     3ca:	8a 3f       	cpi	r24, 0xFA	; 250
     3cc:	21 f4       	brne	.+8      	; 0x3d6 <Update+0x6e>
     3ce:	fe 01       	movw	r30, r28
     3d0:	e5 59       	subi	r30, 0x95	; 149
     3d2:	ff 4f       	sbci	r31, 0xFF	; 255
     3d4:	10 82       	st	Z, r1
     3d6:	85 3f       	cpi	r24, 0xF5	; 245
     3d8:	29 f4       	brne	.+10     	; 0x3e4 <Update+0x7c>
     3da:	92 e0       	ldi	r25, 0x02	; 2
     3dc:	fe 01       	movw	r30, r28
     3de:	e5 59       	subi	r30, 0x95	; 149
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	90 83       	st	Z, r25
     3e4:	80 3f       	cpi	r24, 0xF0	; 240
     3e6:	a9 f4       	brne	.+42     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	fe 01       	movw	r30, r28
     3ec:	e5 59       	subi	r30, 0x95	; 149
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	80 83       	st	Z, r24
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0a c0       	rjmp	.+20     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3f8:	fc 01       	movw	r30, r24
     3fa:	39 96       	adiw	r30, 0x09	; 9
     3fc:	ec 0f       	add	r30, r28
     3fe:	fd 1f       	adc	r31, r29
     400:	23 8d       	ldd	r18, Z+27	; 0x1b
     402:	fe 01       	movw	r30, r28
     404:	e8 0f       	add	r30, r24
     406:	f9 1f       	adc	r31, r25
     408:	25 ab       	std	Z+53, r18	; 0x35
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	84 30       	cpi	r24, 0x04	; 4
     40e:	91 05       	cpc	r25, r1
     410:	9c f3       	brlt	.-26     	; 0x3f8 <Update+0x90>
     412:	fe 01       	movw	r30, r28
     414:	e2 59       	subi	r30, 0x92	; 146
     416:	ff 4f       	sbci	r31, 0xFF	; 255
     418:	80 81       	ld	r24, Z
     41a:	8f 3f       	cpi	r24, 0xFF	; 255
     41c:	a1 f4       	brne	.+40     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     41e:	31 96       	adiw	r30, 0x01	; 1
     420:	80 81       	ld	r24, Z
     422:	8f 3f       	cpi	r24, 0xFF	; 255
     424:	91 f4       	brne	.+36     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     426:	ce 01       	movw	r24, r28
     428:	0e 94 62 00 	call	0xc4	; 0xc4 <filllocationarrays>
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	fe 01       	movw	r30, r28
     430:	e0 59       	subi	r30, 0x90	; 144
     432:	ff 4f       	sbci	r31, 0xFF	; 255
     434:	80 83       	st	Z, r24
     436:	11 e0       	ldi	r17, 0x01	; 1
     438:	09 c0       	rjmp	.+18     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	07 c0       	rjmp	.+14     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	05 c0       	rjmp	.+10     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     442:	10 e0       	ldi	r17, 0x00	; 0
     444:	03 c0       	rjmp	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     446:	11 e0       	ldi	r17, 0x01	; 1
     448:	01 c0       	rjmp	.+2      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     44a:	11 e0       	ldi	r17, 0x01	; 1
     44c:	c0 90 f9 01 	lds	r12, 0x01F9	; 0x8001f9 <timesincelastsend.2233>
     450:	d0 90 fa 01 	lds	r13, 0x01FA	; 0x8001fa <timesincelastsend.2233+0x1>
     454:	e0 90 fb 01 	lds	r14, 0x01FB	; 0x8001fb <timesincelastsend.2233+0x2>
     458:	f0 90 fc 01 	lds	r15, 0x01FC	; 0x8001fc <timesincelastsend.2233+0x3>
     45c:	8e ee       	ldi	r24, 0xEE	; 238
     45e:	c8 0e       	add	r12, r24
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	d8 1e       	adc	r13, r24
     464:	e1 1c       	adc	r14, r1
     466:	f1 1c       	adc	r15, r1
     468:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <get_ms>
     46c:	6c 15       	cp	r22, r12
     46e:	7d 05       	cpc	r23, r13
     470:	8e 05       	cpc	r24, r14
     472:	9f 05       	cpc	r25, r15
     474:	c8 f1       	brcs	.+114    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     476:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <get_ms>
     47a:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <timesincelastsend.2233>
     47e:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <timesincelastsend.2233+0x1>
     482:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <timesincelastsend.2233+0x2>
     486:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <timesincelastsend.2233+0x3>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	05 c0       	rjmp	.+10     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     48e:	fe 01       	movw	r30, r28
     490:	e8 0f       	add	r30, r24
     492:	f1 1d       	adc	r31, r1
     494:	81 83       	std	Z+1, r24	; 0x01
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	68 81       	ld	r22, Y
     49a:	86 17       	cp	r24, r22
     49c:	c0 f3       	brcs	.-16     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     49e:	88 e0       	ldi	r24, 0x08	; 8
     4a0:	89 83       	std	Y+1, r24	; 0x01
     4a2:	fe 01       	movw	r30, r28
     4a4:	e4 59       	subi	r30, 0x94	; 148
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	80 81       	ld	r24, Z
     4aa:	8a 83       	std	Y+2, r24	; 0x02
     4ac:	31 96       	adiw	r30, 0x01	; 1
     4ae:	80 81       	ld	r24, Z
     4b0:	8b 83       	std	Y+3, r24	; 0x03
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	80 81       	ld	r24, Z
     4b6:	8c 83       	std	Y+4, r24	; 0x04
     4b8:	31 96       	adiw	r30, 0x01	; 1
     4ba:	80 81       	ld	r24, Z
     4bc:	8d 83       	std	Y+5, r24	; 0x05
     4be:	34 97       	sbiw	r30, 0x04	; 4
     4c0:	80 81       	ld	r24, Z
     4c2:	8e 83       	std	Y+6, r24	; 0x06
     4c4:	e6 2f       	mov	r30, r22
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	31 97       	sbiw	r30, 0x01	; 1
     4ca:	ec 0f       	add	r30, r28
     4cc:	fd 1f       	adc	r31, r29
     4ce:	85 e6       	ldi	r24, 0x65	; 101
     4d0:	81 83       	std	Z+1, r24	; 0x01
     4d2:	ce 01       	movw	r24, r28
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <serial_send>
     4da:	11 30       	cpi	r17, 0x01	; 1
     4dc:	29 f4       	brne	.+10     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4de:	68 81       	ld	r22, Y
     4e0:	ce 01       	movw	r24, r28
     4e2:	4b 96       	adiw	r24, 0x1b	; 27
     4e4:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <serial_receive>
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	08 95       	ret

000004f8 <fillarrays>:
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	60 97       	sbiw	r28, 0x10	; 16
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	ac 01       	movw	r20, r24
     50e:	88 e0       	ldi	r24, 0x08	; 8
     510:	e8 e2       	ldi	r30, 0x28	; 40
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	de 01       	movw	r26, r28
     516:	11 96       	adiw	r26, 0x01	; 1
     518:	01 90       	ld	r0, Z+
     51a:	0d 92       	st	X+, r0
     51c:	8a 95       	dec	r24
     51e:	e1 f7       	brne	.-8      	; 0x518 <fillarrays+0x20>
     520:	88 e0       	ldi	r24, 0x08	; 8
     522:	e0 e3       	ldi	r30, 0x30	; 48
     524:	f1 e0       	ldi	r31, 0x01	; 1
     526:	de 01       	movw	r26, r28
     528:	19 96       	adiw	r26, 0x09	; 9
     52a:	01 90       	ld	r0, Z+
     52c:	0d 92       	st	X+, r0
     52e:	8a 95       	dec	r24
     530:	e1 f7       	brne	.-8      	; 0x52a <fillarrays+0x32>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	19 c0       	rjmp	.+50     	; 0x56a <fillarrays+0x72>
     538:	e1 e0       	ldi	r30, 0x01	; 1
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	ec 0f       	add	r30, r28
     53e:	fd 1f       	adc	r31, r29
     540:	e2 0f       	add	r30, r18
     542:	f3 1f       	adc	r31, r19
     544:	90 81       	ld	r25, Z
     546:	da 01       	movw	r26, r20
     548:	a2 0f       	add	r26, r18
     54a:	b3 1f       	adc	r27, r19
     54c:	fd 01       	movw	r30, r26
     54e:	ee 5a       	subi	r30, 0xAE	; 174
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	90 83       	st	Z, r25
     554:	e9 e0       	ldi	r30, 0x09	; 9
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	ec 0f       	add	r30, r28
     55a:	fd 1f       	adc	r31, r29
     55c:	e2 0f       	add	r30, r18
     55e:	f3 1f       	adc	r31, r19
     560:	90 81       	ld	r25, Z
     562:	d9 96       	adiw	r26, 0x39	; 57
     564:	9c 93       	st	X, r25
     566:	2f 5f       	subi	r18, 0xFF	; 255
     568:	3f 4f       	sbci	r19, 0xFF	; 255
     56a:	28 30       	cpi	r18, 0x08	; 8
     56c:	31 05       	cpc	r19, r1
     56e:	24 f3       	brlt	.-56     	; 0x538 <fillarrays+0x40>
     570:	60 96       	adiw	r28, 0x10	; 16
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <Communications_INIT>:
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
     58c:	8a e1       	ldi	r24, 0x1A	; 26
     58e:	88 83       	st	Y, r24
     590:	60 e8       	ldi	r22, 0x80	; 128
     592:	75 e2       	ldi	r23, 0x25	; 37
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 30 16 	call	0x2c60	; 0x2c60 <serial_set_baud_rate>
     59c:	68 81       	ld	r22, Y
     59e:	ce 01       	movw	r24, r28
     5a0:	4b 96       	adiw	r24, 0x1b	; 27
     5a2:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <serial_receive>
     5a6:	fe 01       	movw	r30, r28
     5a8:	ef 58       	subi	r30, 0x8F	; 143
     5aa:	ff 4f       	sbci	r31, 0xFF	; 255
     5ac:	84 eb       	ldi	r24, 0xB4	; 180
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
     5b4:	36 97       	sbiw	r30, 0x06	; 6
     5b6:	10 82       	st	Z, r1
     5b8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <batteryPercentage>
     5bc:	8e 01       	movw	r16, r28
     5be:	04 59       	subi	r16, 0x94	; 148
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fixunssfsi>
     5c6:	f8 01       	movw	r30, r16
     5c8:	60 83       	st	Z, r22
     5ca:	31 96       	adiw	r30, 0x01	; 1
     5cc:	10 82       	st	Z, r1
     5ce:	31 96       	adiw	r30, 0x01	; 1
     5d0:	84 e0       	ldi	r24, 0x04	; 4
     5d2:	80 83       	st	Z, r24
     5d4:	31 96       	adiw	r30, 0x01	; 1
     5d6:	85 e0       	ldi	r24, 0x05	; 5
     5d8:	80 83       	st	Z, r24
     5da:	ce 01       	movw	r24, r28
     5dc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <fillarrays>
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <batteryPercentage>:

#include "display.h"
#include <pololu/3pi.h>

float batteryPercentage()//Should this function be in main or in display.c or something else?
{
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     5f2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <read_battery_millivolts_3pi>
	
	float milliVolts = read_battery_millivolts();
     5f6:	bc 01       	movw	r22, r24
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__floatunsisf>
     600:	6b 01       	movw	r12, r22
     602:	7c 01       	movw	r14, r24
	float batteryPercent = 0.000000000632*((milliVolts)*(milliVolts)*(milliVolts));
     604:	9b 01       	movw	r18, r22
     606:	ac 01       	movw	r20, r24
     608:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     60c:	9b 01       	movw	r18, r22
     60e:	ac 01       	movw	r20, r24
     610:	c7 01       	movw	r24, r14
     612:	b6 01       	movw	r22, r12
     614:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     618:	2c e0       	ldi	r18, 0x0C	; 12
     61a:	39 eb       	ldi	r19, 0xB9	; 185
     61c:	4d e2       	ldi	r20, 0x2D	; 45
     61e:	50 e3       	ldi	r21, 0x30	; 48
     620:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
	return batteryPercent;
}
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	df 90       	pop	r13
     62a:	cf 90       	pop	r12
     62c:	08 95       	ret

0000062e <updateDisplay>:

void updateDisplay(int orderPercent, int batteryPercent, robotStates currentState)
{
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	7c 01       	movw	r14, r24
     63a:	8b 01       	movw	r16, r22
     63c:	c4 2f       	mov	r28, r20
	clear();
     63e:	0e 94 cf 13 	call	0x279e	; 0x279e <clear>
	lcd_goto_xy(0,0);
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 56 14 	call	0x28ac	; 0x28ac <lcd_goto_xy>
	print("Job:");
     64a:	85 e5       	ldi	r24, 0x55	; 85
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
	print_long(orderPercent);
     652:	b7 01       	movw	r22, r14
     654:	ff 0c       	add	r15, r15
     656:	88 0b       	sbc	r24, r24
     658:	99 0b       	sbc	r25, r25
     65a:	0e 94 33 14 	call	0x2866	; 0x2866 <print_long>
	print("%");
     65e:	8a e5       	ldi	r24, 0x5A	; 90
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
	
	lcd_goto_xy(0,1);
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 56 14 	call	0x28ac	; 0x28ac <lcd_goto_xy>
	print("Bat:");
     66e:	8c e5       	ldi	r24, 0x5C	; 92
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
	print_long(batteryPercent);
     676:	b8 01       	movw	r22, r16
     678:	11 0f       	add	r17, r17
     67a:	88 0b       	sbc	r24, r24
     67c:	99 0b       	sbc	r25, r25
     67e:	0e 94 33 14 	call	0x2866	; 0x2866 <print_long>
	print("%");
     682:	8a e5       	ldi	r24, 0x5A	; 90
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
	switch(currentState)
     68a:	c2 30       	cpi	r28, 0x02	; 2
     68c:	a9 f0       	breq	.+42     	; 0x6b8 <updateDisplay+0x8a>
     68e:	28 f4       	brcc	.+10     	; 0x69a <updateDisplay+0x6c>
     690:	cc 23       	and	r28, r28
     692:	41 f0       	breq	.+16     	; 0x6a4 <updateDisplay+0x76>
     694:	c1 30       	cpi	r28, 0x01	; 1
     696:	59 f0       	breq	.+22     	; 0x6ae <updateDisplay+0x80>
     698:	1d c0       	rjmp	.+58     	; 0x6d4 <updateDisplay+0xa6>
     69a:	c3 30       	cpi	r28, 0x03	; 3
     69c:	91 f0       	breq	.+36     	; 0x6c2 <updateDisplay+0x94>
     69e:	c4 30       	cpi	r28, 0x04	; 4
     6a0:	a9 f0       	breq	.+42     	; 0x6cc <updateDisplay+0x9e>
     6a2:	18 c0       	rjmp	.+48     	; 0x6d4 <updateDisplay+0xa6>
	{
		case manual:
		print("M");//M for Manual
     6a4:	81 e6       	ldi	r24, 0x61	; 97
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
     6ac:	13 c0       	rjmp	.+38     	; 0x6d4 <updateDisplay+0xa6>
		case mazeSolver:
		print("P");//P for Parcour
     6ae:	83 e6       	ldi	r24, 0x63	; 99
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
     6b6:	0e c0       	rjmp	.+28     	; 0x6d4 <updateDisplay+0xa6>
		case logicsBot:
		print("O");//O for Order
     6b8:	85 e6       	ldi	r24, 0x65	; 101
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
     6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <updateDisplay+0xa6>
		case chargeMode:
		print("C");//C for Charge
     6c2:	87 e6       	ldi	r24, 0x67	; 103
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
     6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <updateDisplay+0xa6>
		case homingMode:
		print("H");//H for Homing
     6cc:	89 e6       	ldi	r24, 0x69	; 105
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
	}
}
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	ff 90       	pop	r15
     6dc:	ef 90       	pop	r14
     6de:	08 95       	ret

000006e0 <errorDisplay>:

void errorDisplay(errorStates error, int batteryPercent)
{
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	18 2f       	mov	r17, r24
     6e8:	eb 01       	movw	r28, r22
	clear();
     6ea:	0e 94 cf 13 	call	0x279e	; 0x279e <clear>
	lcd_goto_xy(0,0);
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	0e 94 56 14 	call	0x28ac	; 0x28ac <lcd_goto_xy>
	print("Bat:");
     6f6:	8c e5       	ldi	r24, 0x5C	; 92
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
	print_long(batteryPercent);
     6fe:	be 01       	movw	r22, r28
     700:	dd 0f       	add	r29, r29
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	0e 94 33 14 	call	0x2866	; 0x2866 <print_long>
	print("%");
     70a:	8a e5       	ldi	r24, 0x5A	; 90
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
	
	lcd_goto_xy(0,1);
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	0e 94 56 14 	call	0x28ac	; 0x28ac <lcd_goto_xy>
	
	switch(error)
     71a:	11 30       	cpi	r17, 0x01	; 1
     71c:	59 f0       	breq	.+22     	; 0x734 <errorDisplay+0x54>
     71e:	28 f0       	brcs	.+10     	; 0x72a <errorDisplay+0x4a>
     720:	12 30       	cpi	r17, 0x02	; 2
     722:	69 f0       	breq	.+26     	; 0x73e <errorDisplay+0x5e>
     724:	13 30       	cpi	r17, 0x03	; 3
     726:	81 f0       	breq	.+32     	; 0x748 <errorDisplay+0x68>
     728:	13 c0       	rjmp	.+38     	; 0x750 <errorDisplay+0x70>
	{
		case slipped:
		print("Slipped!");
     72a:	8b e6       	ldi	r24, 0x6B	; 107
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
     732:	0e c0       	rjmp	.+28     	; 0x750 <errorDisplay+0x70>
		case emergency:
		print("STOPPED");
     734:	84 e7       	ldi	r24, 0x74	; 116
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
     73c:	09 c0       	rjmp	.+18     	; 0x750 <errorDisplay+0x70>
		case object:
		print("OBJECT");
     73e:	8c e7       	ldi	r24, 0x7C	; 124
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
     746:	04 c0       	rjmp	.+8      	; 0x750 <errorDisplay+0x70>
		case batLow:
		print("LOW-BAT");
     748:	83 e8       	ldi	r24, 0x83	; 131
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 de 13 	call	0x27bc	; 0x27bc <print>
		break;
	}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	08 95       	ret

00000758 <whileBarcode>:

const char welcome[] PROGMEM = ">g32>>c32";

void whileBarcode()
{
	while (lineType() != Barcode)
     758:	03 c0       	rjmp	.+6      	; 0x760 <whileBarcode+0x8>
	{
		motorControl('S');
     75a:	83 e5       	ldi	r24, 0x53	; 83
     75c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>

const char welcome[] PROGMEM = ">g32>>c32";

void whileBarcode()
{
	while (lineType() != Barcode)
     760:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lineType>
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	c9 f7       	brne	.-14     	; 0x75a <whileBarcode+0x2>
	{
		motorControl('S');
	}
}
     768:	08 95       	ret

0000076a <whileLineEnd>:

void whileLineEnd()
{
	while (lineType() != Line_end)
     76a:	03 c0       	rjmp	.+6      	; 0x772 <whileLineEnd+0x8>
	{
		motorControl('S');
     76c:	83 e5       	ldi	r24, 0x53	; 83
     76e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
	}
}

void whileLineEnd()
{
	while (lineType() != Line_end)
     772:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lineType>
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	c9 f7       	brne	.-14     	; 0x76c <whileLineEnd+0x2>
	{
		motorControl('S');
	}
}
     77a:	08 95       	ret

0000077c <charge_3pi>:
void charge_3pi(Communications *communications)
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
	whileBarcode();
     782:	0e 94 ac 03 	call	0x758	; 0x758 <whileBarcode>
	updateDisplay(0, batteryPercentage(), mazeSolver);
     786:	0e 94 f5 02 	call	0x5ea	; 0x5ea <batteryPercentage>
     78a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 17 03 	call	0x62e	; 0x62e <updateDisplay>
	parcours('T', communications);
     798:	be 01       	movw	r22, r28
     79a:	84 e5       	ldi	r24, 0x54	; 84
     79c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <parcours>
	updateDisplay(0, batteryPercentage(), chargeMode);
     7a0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <batteryPercentage>
     7a4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     7a8:	43 e0       	ldi	r20, 0x03	; 3
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 17 03 	call	0x62e	; 0x62e <updateDisplay>
	warehouse(charging, communications);
     7b2:	be 01       	movw	r22, r28
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <warehouse>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     7ba:	88 e8       	ldi	r24, 0x88	; 136
     7bc:	93 e1       	ldi	r25, 0x13	; 19
     7be:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
	delay(5000);								// wacht totdat de robot vol is
	warehouse(charging, communications);
     7c2:	be 01       	movw	r22, r28
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <warehouse>
	whileBarcode();
     7ca:	0e 94 ac 03 	call	0x758	; 0x758 <whileBarcode>
	updateDisplay(0, batteryPercentage(), mazeSolver);
     7ce:	0e 94 f5 02 	call	0x5ea	; 0x5ea <batteryPercentage>
     7d2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 17 03 	call	0x62e	; 0x62e <updateDisplay>
	parcours('B', communications);
     7e0:	be 01       	movw	r22, r28
     7e2:	82 e4       	ldi	r24, 0x42	; 66
     7e4:	0e 94 68 09 	call	0x12d0	; 0x12d0 <parcours>
	whileLineEnd();
     7e8:	0e 94 b5 03 	call	0x76a	; 0x76a <whileLineEnd>
	motorControl('L');
     7ec:	8c e4       	ldi	r24, 0x4C	; 76
     7ee:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <pickOrder>:

void pickOrder(Communications *communications)
{
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
	whileBarcode();
     7fe:	0e 94 ac 03 	call	0x758	; 0x758 <whileBarcode>
	parcours('T', communications);
     802:	be 01       	movw	r22, r28
     804:	84 e5       	ldi	r24, 0x54	; 84
     806:	0e 94 68 09 	call	0x12d0	; 0x12d0 <parcours>
	warehouse(orderPicking, communications); 	
     80a:	be 01       	movw	r22, r28
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <warehouse>
	parcours('B', communications);
     812:	be 01       	movw	r22, r28
     814:	82 e4       	ldi	r24, 0x42	; 66
     816:	0e 94 68 09 	call	0x12d0	; 0x12d0 <parcours>
	whileLineEnd();
     81a:	0e 94 b5 03 	call	0x76a	; 0x76a <whileLineEnd>
	motorControl('L');
     81e:	8c e4       	ldi	r24, 0x4C	; 76
     820:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <main>:

int main()
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	c3 57       	subi	r28, 0x73	; 115
     834:	d1 09       	sbc	r29, r1
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
	play_from_program_space(welcome);
     840:	8a e7       	ldi	r24, 0x7A	; 122
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 c3 12 	call	0x2586	; 0x2586 <play_from_program_space>
	
	Communications communications;
	Communications_INIT(&communications);
     848:	ce 01       	movw	r24, r28
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	0e 94 c1 02 	call	0x582	; 0x582 <Communications_INIT>
	
	initialize(&communications);
     850:	ce 01       	movw	r24, r28
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <initialize>
		
	while(1) 
	{
		//updateDisplay(0, batteryPercentage(), homingMode);
		communications.Update(&communications);
     858:	e4 96       	adiw	r28, 0x34	; 52
     85a:	ee ad       	ldd	r30, Y+62	; 0x3e
     85c:	ff ad       	ldd	r31, Y+63	; 0x3f
     85e:	e4 97       	sbiw	r28, 0x34	; 52
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	09 95       	icall
		
		communications.locationx = -1;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	e0 96       	adiw	r28, 0x30	; 48
     86a:	8f af       	std	Y+63, r24	; 0x3f
     86c:	e0 97       	sbiw	r28, 0x30	; 48
		communications.locationy = -1;
     86e:	e1 96       	adiw	r28, 0x31	; 49
     870:	8f af       	std	Y+63, r24	; 0x3f
     872:	e1 97       	sbiw	r28, 0x31	; 49
		
		lcd_goto_xy(0, 0);
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 56 14 	call	0x28ac	; 0x28ac <lcd_goto_xy>
		print_long(communications.EmergencyStop);
     87c:	ad 96       	adiw	r28, 0x2d	; 45
     87e:	6f ad       	ldd	r22, Y+63	; 0x3f
     880:	ad 97       	sbiw	r28, 0x2d	; 45
     882:	70 e0       	ldi	r23, 0x00	; 0
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 33 14 	call	0x2866	; 0x2866 <print_long>
		
		switch (communications.EmergencyStop) {
     88c:	ad 96       	adiw	r28, 0x2d	; 45
     88e:	8f ad       	ldd	r24, Y+63	; 0x3f
     890:	ad 97       	sbiw	r28, 0x2d	; 45
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	21 f1       	breq	.+72     	; 0x8de <main+0xb4>
     896:	28 f0       	brcs	.+10     	; 0x8a2 <main+0x78>
     898:	83 30       	cpi	r24, 0x03	; 3
     89a:	21 f1       	breq	.+72     	; 0x8e4 <main+0xba>
     89c:	84 30       	cpi	r24, 0x04	; 4
     89e:	29 f1       	breq	.+74     	; 0x8ea <main+0xc0>
     8a0:	db cf       	rjmp	.-74     	; 0x858 <main+0x2e>
				}
				else*/
// 				print_long(communications.locationx);
// 				print_long(communications.locationy);
				
				if (communications.flag==1)
     8a2:	e2 96       	adiw	r28, 0x32	; 50
     8a4:	8f ad       	ldd	r24, Y+63	; 0x3f
     8a6:	e2 97       	sbiw	r28, 0x32	; 50
     8a8:	81 30       	cpi	r24, 0x01	; 1
     8aa:	b1 f6       	brne	.-84     	; 0x858 <main+0x2e>
				{
					communications.flag=0;
     8ac:	e2 96       	adiw	r28, 0x32	; 50
     8ae:	1f ae       	std	Y+63, r1	; 0x3f
     8b0:	e2 97       	sbiw	r28, 0x32	; 50
					
					play_from_program_space(welcome);
     8b2:	8a e7       	ldi	r24, 0x7A	; 122
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 c3 12 	call	0x2586	; 0x2586 <play_from_program_space>
					communications.locationx = 0;
     8ba:	e0 96       	adiw	r28, 0x30	; 48
     8bc:	1f ae       	std	Y+63, r1	; 0x3f
     8be:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = 0;
     8c0:	e1 96       	adiw	r28, 0x31	; 49
     8c2:	1f ae       	std	Y+63, r1	; 0x3f
     8c4:	e1 97       	sbiw	r28, 0x31	; 49
					pickOrder(&communications);
     8c6:	ce 01       	movw	r24, r28
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <pickOrder>
					communications.locationx = -1;
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	e0 96       	adiw	r28, 0x30	; 48
     8d2:	8f af       	std	Y+63, r24	; 0x3f
     8d4:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = -1;
     8d6:	e1 96       	adiw	r28, 0x31	; 49
     8d8:	8f af       	std	Y+63, r24	; 0x3f
     8da:	e1 97       	sbiw	r28, 0x31	; 49
     8dc:	bd cf       	rjmp	.-134    	; 0x858 <main+0x2e>
				}
				break;
				delay(100);
			case 2:
				Spin();
     8de:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Spin>
				break;
     8e2:	ba cf       	rjmp	.-140    	; 0x858 <main+0x2e>
			case 3:
				manualControl();
     8e4:	0e 94 32 07 	call	0xe64	; 0xe64 <manualControl>
				break;
     8e8:	b7 cf       	rjmp	.-146    	; 0x858 <main+0x2e>
				
			case 4:
				charge_3pi(&communications);
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	0e 94 be 03 	call	0x77c	; 0x77c <charge_3pi>
				break;
     8f2:	b2 cf       	rjmp	.-156    	; 0x858 <main+0x2e>

000008f4 <initialize>:
void inch(){
	set_motors(50,50);
	delay(200);
	set_motors(0,0);
}
void println(int x){
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <myComs+0x1>
     8fc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <myComs>
     900:	80 ed       	ldi	r24, 0xD0	; 208
     902:	97 e0       	ldi	r25, 0x07	; 7
     904:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <pololu_3pi_init>
     908:	0d c0       	rjmp	.+26     	; 0x924 <__stack+0x25>
     90a:	0e 94 cf 13 	call	0x279e	; 0x279e <clear>
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 56 14 	call	0x28ac	; 0x28ac <lcd_goto_xy>
     916:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <read_battery_millivolts_3pi>
     91a:	bc 01       	movw	r22, r24
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 33 14 	call	0x2866	; 0x2866 <print_long>
     924:	80 e1       	ldi	r24, 0x10	; 16
     926:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <button_is_pressed>
     92a:	88 23       	and	r24, r24
     92c:	71 f3       	breq	.-36     	; 0x90a <__stack+0xb>
     92e:	80 e1       	ldi	r24, 0x10	; 16
     930:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <wait_for_button_release>
     934:	88 ee       	ldi	r24, 0xE8	; 232
     936:	93 e0       	ldi	r25, 0x03	; 3
     938:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
     93c:	c0 e0       	ldi	r28, 0x00	; 0
     93e:	d0 e0       	ldi	r29, 0x00	; 0
     940:	19 c0       	rjmp	.+50     	; 0x974 <__stack+0x75>
     942:	ce 01       	movw	r24, r28
     944:	44 97       	sbiw	r24, 0x14	; 20
     946:	88 97       	sbiw	r24, 0x28	; 40
     948:	38 f0       	brcs	.+14     	; 0x958 <__stack+0x59>
     94a:	68 ed       	ldi	r22, 0xD8	; 216
     94c:	7f ef       	ldi	r23, 0xFF	; 255
     94e:	88 e2       	ldi	r24, 0x28	; 40
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     956:	06 c0       	rjmp	.+12     	; 0x964 <__stack+0x65>
     958:	68 e2       	ldi	r22, 0x28	; 40
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	88 ed       	ldi	r24, 0xD8	; 216
     95e:	9f ef       	ldi	r25, 0xFF	; 255
     960:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	0e 94 67 17 	call	0x2ece	; 0x2ece <calibrate_line_sensors>
     96a:	84 e1       	ldi	r24, 0x14	; 20
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
     972:	21 96       	adiw	r28, 0x01	; 1
     974:	c0 35       	cpi	r28, 0x50	; 80
     976:	d1 05       	cpc	r29, r1
     978:	20 f3       	brcs	.-56     	; 0x942 <__stack+0x43>
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     986:	80 e1       	ldi	r24, 0x10	; 16
     988:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <button_is_pressed>
     98c:	88 23       	and	r24, r24
     98e:	d9 f3       	breq	.-10     	; 0x986 <__stack+0x87>
     990:	80 e1       	ldi	r24, 0x10	; 16
     992:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <wait_for_button_release>
     996:	0e 94 cf 13 	call	0x279e	; 0x279e <clear>
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <inch>:
     9a0:	62 e3       	ldi	r22, 0x32	; 50
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	82 e3       	ldi	r24, 0x32	; 50
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     9ac:	88 ec       	ldi	r24, 0xC8	; 200
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     9c0:	08 95       	ret

000009c2 <wait>:
	lcd_goto_xy(0,0);
	print_long(x);	*/
}

void wait(){
	set_motors(0,0);
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
						
	while(!button_is_pressed(BUTTON_B)){}
     9ce:	80 e1       	ldi	r24, 0x10	; 16
     9d0:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <button_is_pressed>
     9d4:	88 23       	and	r24, r24
     9d6:	d9 f3       	breq	.-10     	; 0x9ce <wait+0xc>
	wait_for_button_release(BUTTON_B);
     9d8:	80 e1       	ldi	r24, 0x10	; 16
     9da:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <wait_for_button_release>
     9de:	08 95       	ret

000009e0 <lineType>:
}

char lineType(){																																	// function that returns the type of junction it detects
	while(1){																																		// >= 500 = black line		<=500 = white
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	81 e1       	ldi	r24, 0x11	; 17
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>

			if (sensors[0] >= Refrence_value && sensors[4] >= Refrence_value){																									//Checks if its a X junction or a T junction
     9ea:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     9ee:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     9f2:	80 39       	cpi	r24, 0x90	; 144
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	92 07       	cpc	r25, r18
     9f8:	08 f4       	brcc	.+2      	; 0x9fc <lineType+0x1c>
     9fa:	67 c0       	rjmp	.+206    	; 0xaca <lineType+0xea>
     9fc:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <sensors+0x8>
     a00:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <sensors+0x9>
     a04:	20 39       	cpi	r18, 0x90	; 144
     a06:	31 40       	sbci	r19, 0x01	; 1
     a08:	08 f4       	brcc	.+2      	; 0xa0c <lineType+0x2c>
     a0a:	5f c0       	rjmp	.+190    	; 0xaca <lineType+0xea>
					inch();
     a0c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <inch>
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a10:	61 e0       	ldi	r22, 0x01	; 1
     a12:	81 e1       	ldi	r24, 0x11	; 17
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
					if (sensors[0] >=Refrence_value && sensors[1] >=Refrence_value && sensors[3] >= Refrence_value && sensors[4] >=Refrence_value){
     a1a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     a1e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     a22:	80 39       	cpi	r24, 0x90	; 144
     a24:	91 40       	sbci	r25, 0x01	; 1
     a26:	b8 f1       	brcs	.+110    	; 0xa96 <lineType+0xb6>
     a28:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     a2c:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     a30:	80 39       	cpi	r24, 0x90	; 144
     a32:	91 40       	sbci	r25, 0x01	; 1
     a34:	80 f1       	brcs	.+96     	; 0xa96 <lineType+0xb6>
     a36:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     a3a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     a3e:	80 39       	cpi	r24, 0x90	; 144
     a40:	91 40       	sbci	r25, 0x01	; 1
     a42:	48 f1       	brcs	.+82     	; 0xa96 <lineType+0xb6>
     a44:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     a48:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     a4c:	80 39       	cpi	r24, 0x90	; 144
     a4e:	91 40       	sbci	r25, 0x01	; 1
     a50:	10 f1       	brcs	.+68     	; 0xa96 <lineType+0xb6>
						clear();
     a52:	0e 94 cf 13 	call	0x279e	; 0x279e <clear>
						while(sensors[0] >= 400 || sensors[4] >=400)
     a56:	0b c0       	rjmp	.+22     	; 0xa6e <lineType+0x8e>
						{
							read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	81 e1       	ldi	r24, 0x11	; 17
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
							set_motors(75,75);
     a62:	6b e4       	ldi	r22, 0x4B	; 75
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	8b e4       	ldi	r24, 0x4B	; 75
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
			if (sensors[0] >= Refrence_value && sensors[4] >= Refrence_value){																									//Checks if its a X junction or a T junction
					inch();
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
					if (sensors[0] >=Refrence_value && sensors[1] >=Refrence_value && sensors[3] >= Refrence_value && sensors[4] >=Refrence_value){
						clear();
						while(sensors[0] >= 400 || sensors[4] >=400)
     a6e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     a72:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     a76:	80 39       	cpi	r24, 0x90	; 144
     a78:	91 40       	sbci	r25, 0x01	; 1
     a7a:	70 f7       	brcc	.-36     	; 0xa58 <lineType+0x78>
     a7c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     a80:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     a84:	80 39       	cpi	r24, 0x90	; 144
     a86:	91 40       	sbci	r25, 0x01	; 1
     a88:	38 f7       	brcc	.-50     	; 0xa58 <lineType+0x78>
						{
							read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
							set_motors(75,75);
						}
						inch();
     a8a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <inch>
						wait();
     a8e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <wait>
						return Barcode;
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	08 95       	ret
					}
					else if (sensors[2] >=Refrence_value || (sensors[1] >= Refrence_value || sensors[3] >= Refrence_value)){
     a96:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     a9a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     a9e:	80 39       	cpi	r24, 0x90	; 144
     aa0:	91 40       	sbci	r25, 0x01	; 1
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <lineType+0xc6>
     aa4:	79 c0       	rjmp	.+242    	; 0xb98 <lineType+0x1b8>
     aa6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     aaa:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     aae:	80 39       	cpi	r24, 0x90	; 144
     ab0:	91 40       	sbci	r25, 0x01	; 1
     ab2:	08 f0       	brcs	.+2      	; 0xab6 <lineType+0xd6>
     ab4:	73 c0       	rjmp	.+230    	; 0xb9c <lineType+0x1bc>
     ab6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     aba:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     abe:	80 39       	cpi	r24, 0x90	; 144
     ac0:	91 40       	sbci	r25, 0x01	; 1
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <lineType+0xe6>
     ac4:	6d c0       	rjmp	.+218    	; 0xba0 <lineType+0x1c0>
						println(X_junction);
						return X_junction;
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	08 95       	ret
						println(T_junction);
						return T_junction;
					}
				}
							
		else if (sensors[0] >=Refrence_value && sensors[1] >= Refrence_value && sensors[4] <= Refrence_value ){																							//Checks if its a left corner or a straight with left corner
     aca:	80 39       	cpi	r24, 0x90	; 144
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	96 07       	cpc	r25, r22
     ad0:	38 f1       	brcs	.+78     	; 0xb20 <lineType+0x140>
     ad2:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <sensors+0x2>
     ad6:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <sensors+0x3>
     ada:	20 39       	cpi	r18, 0x90	; 144
     adc:	31 40       	sbci	r19, 0x01	; 1
     ade:	00 f1       	brcs	.+64     	; 0xb20 <lineType+0x140>
     ae0:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <sensors+0x8>
     ae4:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <sensors+0x9>
     ae8:	21 39       	cpi	r18, 0x91	; 145
     aea:	31 40       	sbci	r19, 0x01	; 1
     aec:	c8 f4       	brcc	.+50     	; 0xb20 <lineType+0x140>
			inch();
     aee:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	81 e1       	ldi	r24, 0x11	; 17
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
     afc:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b00:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b04:	80 39       	cpi	r24, 0x90	; 144
     b06:	91 40       	sbci	r25, 0x01	; 1
     b08:	08 f0       	brcs	.+2      	; 0xb0c <lineType+0x12c>
     b0a:	4c c0       	rjmp	.+152    	; 0xba4 <lineType+0x1c4>
     b0c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     b10:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     b14:	80 39       	cpi	r24, 0x90	; 144
     b16:	91 40       	sbci	r25, 0x01	; 1
     b18:	08 f4       	brcc	.+2      	; 0xb1c <lineType+0x13c>
     b1a:	46 c0       	rjmp	.+140    	; 0xba8 <lineType+0x1c8>
				println(Straight_left_junction);
				return Straight_left_junction;
     b1c:	86 e0       	ldi	r24, 0x06	; 6
     b1e:	08 95       	ret
				return Left_corner;
			}
		}
		
		
		else if (sensors[3] >=Refrence_value && sensors[4] >= Refrence_value && sensors[0] <= Refrence_value){																							//Checks if its a right corner or a straight with right corner
     b20:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <sensors+0x6>
     b24:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <sensors+0x7>
     b28:	20 39       	cpi	r18, 0x90	; 144
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	36 07       	cpc	r19, r22
     b2e:	08 f1       	brcs	.+66     	; 0xb72 <lineType+0x192>
     b30:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <sensors+0x8>
     b34:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <sensors+0x9>
     b38:	40 39       	cpi	r20, 0x90	; 144
     b3a:	51 40       	sbci	r21, 0x01	; 1
     b3c:	d0 f0       	brcs	.+52     	; 0xb72 <lineType+0x192>
     b3e:	81 39       	cpi	r24, 0x91	; 145
     b40:	91 40       	sbci	r25, 0x01	; 1
     b42:	b8 f4       	brcc	.+46     	; 0xb72 <lineType+0x192>
			inch();
     b44:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	81 e1       	ldi	r24, 0x11	; 17
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
     b52:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b56:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b5a:	80 39       	cpi	r24, 0x90	; 144
     b5c:	91 40       	sbci	r25, 0x01	; 1
     b5e:	30 f5       	brcc	.+76     	; 0xbac <lineType+0x1cc>
     b60:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     b64:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     b68:	80 39       	cpi	r24, 0x90	; 144
     b6a:	91 40       	sbci	r25, 0x01	; 1
     b6c:	08 f1       	brcs	.+66     	; 0xbb0 <lineType+0x1d0>
				println(Straight_right_junction);
				return Straight_right_junction;
     b6e:	85 e0       	ldi	r24, 0x05	; 5
     b70:	08 95       	ret
				println(Straight_left_junction);
				return Right_corner;
			}
		}
		
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){
     b72:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b76:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b7a:	89 3c       	cpi	r24, 0xC9	; 201
     b7c:	91 05       	cpc	r25, r1
     b7e:	d0 f4       	brcc	.+52     	; 0xbb4 <lineType+0x1d4>
     b80:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     b84:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     b88:	89 3c       	cpi	r24, 0xC9	; 201
     b8a:	91 05       	cpc	r25, r1
     b8c:	a8 f4       	brcc	.+42     	; 0xbb8 <lineType+0x1d8>
     b8e:	29 3c       	cpi	r18, 0xC9	; 201
     b90:	31 05       	cpc	r19, r1
     b92:	a0 f0       	brcs	.+40     	; 0xbbc <lineType+0x1dc>
			}
			else{
				println(Straight);
				return Straight;
			}				*/																					// check if its straight without any corners
			return Straight;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	08 95       	ret
						wait();
						return Barcode;
					}
					else if (sensors[2] >=Refrence_value || (sensors[1] >= Refrence_value || sensors[3] >= Refrence_value)){
						println(X_junction);
						return X_junction;
     b98:	88 e0       	ldi	r24, 0x08	; 8
     b9a:	08 95       	ret
     b9c:	88 e0       	ldi	r24, 0x08	; 8
     b9e:	08 95       	ret
					}
					else {
						println(T_junction);
						return T_junction;
     ba0:	87 e0       	ldi	r24, 0x07	; 7
     ba2:	08 95       	ret
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
				println(Straight_left_junction);
				return Straight_left_junction;
     ba4:	86 e0       	ldi	r24, 0x06	; 6
     ba6:	08 95       	ret
			}
			else{
				println(Left_corner);
				return Left_corner;
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	08 95       	ret
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
				println(Straight_right_junction);
				return Straight_right_junction;
     bac:	85 e0       	ldi	r24, 0x05	; 5
     bae:	08 95       	ret
			}
			else{
				println(Straight_left_junction);
				return Right_corner;
     bb0:	84 e0       	ldi	r24, 0x04	; 4
     bb2:	08 95       	ret
			}
			else{
				println(Straight);
				return Straight;
			}				*/																					// check if its straight without any corners
			return Straight;
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	08 95       	ret
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	08 95       	ret
			}
		}
		
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){
					println(Line_end);																													// check if the line ends
					return Line_end;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
			return Straight;
		}
		
	
	}
}
     bbe:	08 95       	ret

00000bc0 <motorControl>:

void motorControl(char x){													// function that controlls the motor movement and the turns
     bc0:	8f 92       	push	r8
     bc2:	9f 92       	push	r9
     bc4:	af 92       	push	r10
     bc6:	bf 92       	push	r11
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	c8 2f       	mov	r28, r24

		


	myComs->Update(myComs);
     bda:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <myComs>
     bde:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <myComs+0x1>
     be2:	fc 01       	movw	r30, r24
     be4:	ef 58       	subi	r30, 0x8F	; 143
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	01 90       	ld	r0, Z+
     bea:	f0 81       	ld	r31, Z
     bec:	e0 2d       	mov	r30, r0
     bee:	09 95       	icall
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	81 e1       	ldi	r24, 0x11	; 17
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <read_line>
     bfa:	8c 01       	movw	r16, r24
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	81 e1       	ldi	r24, 0x11	; 17
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>

	while (analog_read(5) <= 200) {
     c06:	06 c0       	rjmp	.+12     	; 0xc14 <motorControl+0x54>
		set_motors(0, 0);
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>

	myComs->Update(myComs);
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);

	while (analog_read(5) <= 200) {
     c14:	85 e0       	ldi	r24, 0x05	; 5
     c16:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <analog_read>
     c1a:	89 3c       	cpi	r24, 0xC9	; 201
     c1c:	91 05       	cpc	r25, r1
     c1e:	a0 f3       	brcs	.-24     	; 0xc08 <motorControl+0x48>
		set_motors(0, 0);
	}
	
	if(myComs->EmergencyStop == 1)		{													//Emergency Brake
     c20:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     c24:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     c28:	e5 59       	subi	r30, 0x95	; 149
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	80 81       	ld	r24, Z
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	39 f4       	brne	.+14     	; 0xc40 <motorControl+0x80>
		set_motors(0,0);
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     c3e:	05 c1       	rjmp	.+522    	; 0xe4a <motorControl+0x28a>
	}else if(x == 'L'){														//Turn Left
     c40:	cc 34       	cpi	r28, 0x4C	; 76
     c42:	39 f5       	brne	.+78     	; 0xc92 <motorControl+0xd2>
		set_motors(-turn_value,turn_value);
     c44:	6c e3       	ldi	r22, 0x3C	; 60
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	84 ec       	ldi	r24, 0xC4	; 196
     c4a:	9f ef       	ldi	r25, 0xFF	; 255
     c4c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		
		while (sensors[2] >=Refrence_value)
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <motorControl+0x9c>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	81 e1       	ldi	r24, 0x11	; 17
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
	if(myComs->EmergencyStop == 1)		{													//Emergency Brake
		set_motors(0,0);
	}else if(x == 'L'){														//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
     c5c:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     c60:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     c64:	80 39       	cpi	r24, 0x90	; 144
     c66:	91 40       	sbci	r25, 0x01	; 1
     c68:	a0 f7       	brcc	.-24     	; 0xc52 <motorControl+0x92>
     c6a:	05 c0       	rjmp	.+10     	; 0xc76 <motorControl+0xb6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	81 e1       	ldi	r24, 0x11	; 17
     c70:	92 e0       	ldi	r25, 0x02	; 2
     c72:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
	}else if(x == 'L'){														//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     c76:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     c7a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     c7e:	81 39       	cpi	r24, 0x91	; 145
     c80:	91 40       	sbci	r25, 0x01	; 1
     c82:	a0 f3       	brcs	.-24     	; 0xc6c <motorControl+0xac>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     c90:	dc c0       	rjmp	.+440    	; 0xe4a <motorControl+0x28a>
	}
	
	
	else if(x == 'R'){														//Turn Right
     c92:	c2 35       	cpi	r28, 0x52	; 82
     c94:	39 f5       	brne	.+78     	; 0xce4 <motorControl+0x124>
		set_motors(turn_value,-turn_value);
     c96:	64 ec       	ldi	r22, 0xC4	; 196
     c98:	7f ef       	ldi	r23, 0xFF	; 255
     c9a:	8c e3       	ldi	r24, 0x3C	; 60
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		
		while (sensors[2] >=Refrence_value)
     ca2:	05 c0       	rjmp	.+10     	; 0xcae <motorControl+0xee>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	81 e1       	ldi	r24, 0x11	; 17
     ca8:	92 e0       	ldi	r25, 0x02	; 2
     caa:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
	
	
	else if(x == 'R'){														//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
     cae:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     cb2:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     cb6:	80 39       	cpi	r24, 0x90	; 144
     cb8:	91 40       	sbci	r25, 0x01	; 1
     cba:	a0 f7       	brcc	.-24     	; 0xca4 <motorControl+0xe4>
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <motorControl+0x108>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	81 e1       	ldi	r24, 0x11	; 17
     cc2:	92 e0       	ldi	r25, 0x02	; 2
     cc4:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
	else if(x == 'R'){														//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     cc8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     ccc:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     cd0:	81 39       	cpi	r24, 0x91	; 145
     cd2:	91 40       	sbci	r25, 0x01	; 1
     cd4:	a0 f3       	brcs	.-24     	; 0xcbe <motorControl+0xfe>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     ce2:	b3 c0       	rjmp	.+358    	; 0xe4a <motorControl+0x28a>
	}
		
			
	else if(x == 'S'){												//drive straight and adjusts the robot so it follows the line
     ce4:	c3 35       	cpi	r28, 0x53	; 83
     ce6:	09 f0       	breq	.+2      	; 0xcea <motorControl+0x12a>
     ce8:	66 c0       	rjmp	.+204    	; 0xdb6 <motorControl+0x1f6>
		// are not interested in the individual sensor readings.
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     cea:	c8 01       	movw	r24, r16
     cec:	80 5d       	subi	r24, 0xD0	; 208
     cee:	97 40       	sbci	r25, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     cf0:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <last_proportional>
     cf4:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <last_proportional+0x1>
     cf8:	ec 01       	movw	r28, r24
     cfa:	c2 1b       	sub	r28, r18
     cfc:	d3 0b       	sbc	r29, r19
		integral = integral + proportional;
     cfe:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <integral>
     d02:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <integral+0x1>
     d06:	fc 01       	movw	r30, r24
     d08:	e6 0f       	add	r30, r22
     d0a:	f7 1f       	adc	r31, r23
     d0c:	f0 93 10 02 	sts	0x0210, r31	; 0x800210 <integral+0x1>
     d10:	e0 93 0f 02 	sts	0x020F, r30	; 0x80020f <integral>

		// Remember the last position.
		 last_proportional = proportional;
     d14:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <last_proportional+0x1>
     d18:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <last_proportional>
 
 
		int power_difference = proportional/10 + integral/40000 + derivative*0.50;						// derivative == stuur snelheid
     d1c:	6a e0       	ldi	r22, 0x0A	; 10
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__divmodhi4>
     d24:	6b 01       	movw	r12, r22
     d26:	bf 01       	movw	r22, r30
     d28:	ff 0f       	add	r31, r31
     d2a:	88 0b       	sbc	r24, r24
     d2c:	99 0b       	sbc	r25, r25
     d2e:	20 e4       	ldi	r18, 0x40	; 64
     d30:	3c e9       	ldi	r19, 0x9C	; 156
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__divmodsi4>
     d3a:	0d 2c       	mov	r0, r13
     d3c:	00 0c       	add	r0, r0
     d3e:	ee 08       	sbc	r14, r14
     d40:	ff 08       	sbc	r15, r15
     d42:	c2 0e       	add	r12, r18
     d44:	d3 1e       	adc	r13, r19
     d46:	e4 1e       	adc	r14, r20
     d48:	f5 1e       	adc	r15, r21
     d4a:	be 01       	movw	r22, r28
     d4c:	dd 0f       	add	r29, r29
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatsisf>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
     d62:	4b 01       	movw	r8, r22
     d64:	5c 01       	movw	r10, r24
     d66:	c7 01       	movw	r24, r14
     d68:	b6 01       	movw	r22, r12
     d6a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatsisf>
     d6e:	a5 01       	movw	r20, r10
     d70:	94 01       	movw	r18, r8
     d72:	0e 94 bd 0c 	call	0x197a	; 0x197a <__addsf3>
     d76:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     d7a:	cb 01       	movw	r24, r22

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 70;
		if(power_difference > max)
     d7c:	67 34       	cpi	r22, 0x47	; 71
     d7e:	71 05       	cpc	r23, r1
     d80:	14 f0       	brlt	.+4      	; 0xd86 <motorControl+0x1c6>
			power_difference = max;
     d82:	86 e4       	ldi	r24, 0x46	; 70
     d84:	90 e0       	ldi	r25, 0x00	; 0
		if(power_difference < -max)
     d86:	8a 3b       	cpi	r24, 0xBA	; 186
     d88:	2f ef       	ldi	r18, 0xFF	; 255
     d8a:	92 07       	cpc	r25, r18
     d8c:	14 f4       	brge	.+4      	; 0xd92 <motorControl+0x1d2>
			power_difference = -max;
     d8e:	8a eb       	ldi	r24, 0xBA	; 186
     d90:	9f ef       	ldi	r25, 0xFF	; 255

		if(power_difference < 0)
     d92:	99 23       	and	r25, r25
     d94:	3c f4       	brge	.+14     	; 0xda4 <motorControl+0x1e4>
			set_motors(max+power_difference, max);
     d96:	66 e4       	ldi	r22, 0x46	; 70
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	8a 5b       	subi	r24, 0xBA	; 186
     d9c:	9f 4f       	sbci	r25, 0xFF	; 255
     d9e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     da2:	53 c0       	rjmp	.+166    	; 0xe4a <motorControl+0x28a>
		else
			set_motors(max, max-power_difference);
     da4:	66 e4       	ldi	r22, 0x46	; 70
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	68 1b       	sub	r22, r24
     daa:	79 0b       	sbc	r23, r25
     dac:	86 e4       	ldi	r24, 0x46	; 70
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     db4:	4a c0       	rjmp	.+148    	; 0xe4a <motorControl+0x28a>
		
	}
	
	
	else if(x == 'B'){														//Reverse while following the line
     db6:	c2 34       	cpi	r28, 0x42	; 66
     db8:	09 f5       	brne	.+66     	; 0xdfc <motorControl+0x23c>
		set_motors(-50,-50);
     dba:	6e ec       	ldi	r22, 0xCE	; 206
     dbc:	7f ef       	ldi	r23, 0xFF	; 255
     dbe:	8e ec       	ldi	r24, 0xCE	; 206
     dc0:	9f ef       	ldi	r25, 0xFF	; 255
     dc2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		
		if (sensors[3] >=Refrence_value)
     dc6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     dca:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     dce:	80 39       	cpi	r24, 0x90	; 144
     dd0:	91 40       	sbci	r25, 0x01	; 1
     dd2:	30 f0       	brcs	.+12     	; 0xde0 <motorControl+0x220>
			set_motors(-50,-55);
     dd4:	69 ec       	ldi	r22, 0xC9	; 201
     dd6:	7f ef       	ldi	r23, 0xFF	; 255
     dd8:	8e ec       	ldi	r24, 0xCE	; 206
     dda:	9f ef       	ldi	r25, 0xFF	; 255
     ddc:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		if (sensors[1] >=Refrence_value)
     de0:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     de4:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     de8:	80 39       	cpi	r24, 0x90	; 144
     dea:	91 40       	sbci	r25, 0x01	; 1
     dec:	70 f1       	brcs	.+92     	; 0xe4a <motorControl+0x28a>
			set_motors(-55,-50);
     dee:	6e ec       	ldi	r22, 0xCE	; 206
     df0:	7f ef       	ldi	r23, 0xFF	; 255
     df2:	89 ec       	ldi	r24, 0xC9	; 201
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     dfa:	27 c0       	rjmp	.+78     	; 0xe4a <motorControl+0x28a>
	}
	
	
	else if(x == 'T'){														// Turn around
     dfc:	c4 35       	cpi	r28, 0x54	; 84
     dfe:	a1 f4       	brne	.+40     	; 0xe28 <motorControl+0x268>
		set_motors(-turn_value,turn_value);
     e00:	6c e3       	ldi	r22, 0x3C	; 60
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	84 ec       	ldi	r24, 0xC4	; 196
     e06:	9f ef       	ldi	r25, 0xFF	; 255
     e08:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		
		while (sensors[2] <=Refrence_value)
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <motorControl+0x258>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	81 e1       	ldi	r24, 0x11	; 17
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	0e 94 6d 17 	call	0x2eda	; 0x2eda <read_line_sensors_calibrated>
	
	
	else if(x == 'T'){														// Turn around
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] <=Refrence_value)
     e18:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     e1c:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     e20:	81 39       	cpi	r24, 0x91	; 145
     e22:	91 40       	sbci	r25, 0x01	; 1
     e24:	a0 f3       	brcs	.-24     	; 0xe0e <motorControl+0x24e>
     e26:	11 c0       	rjmp	.+34     	; 0xe4a <motorControl+0x28a>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
     e28:	c0 35       	cpi	r28, 0x50	; 80
     e2a:	79 f4       	brne	.+30     	; 0xe4a <motorControl+0x28a>
     e2c:	0a c0       	rjmp	.+20     	; 0xe42 <motorControl+0x282>
		for( int i=50;i>=0;i-=3)
		{
			set_motors(i,i);
     e2e:	be 01       	movw	r22, r28
     e30:	ce 01       	movw	r24, r28
     e32:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
		for( int i=50;i>=0;i-=3)
     e3e:	23 97       	sbiw	r28, 0x03	; 3
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <motorControl+0x286>
     e42:	c2 e3       	ldi	r28, 0x32	; 50
     e44:	d0 e0       	ldi	r29, 0x00	; 0
     e46:	dd 23       	and	r29, r29
     e48:	94 f7       	brge	.-28     	; 0xe2e <motorControl+0x26e>
			set_motors(i,i);
			delay(4);
		}
		
		
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	bf 90       	pop	r11
     e5c:	af 90       	pop	r10
     e5e:	9f 90       	pop	r9
     e60:	8f 90       	pop	r8
     e62:	08 95       	ret

00000e64 <manualControl>:

void manualControl(){
static int speed = 0;
static unsigned int counter = 0;

updateDisplay(0,batteryPercentage(),manual);
     e64:	0e 94 f5 02 	call	0x5ea	; 0x5ea <batteryPercentage>
     e68:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 17 03 	call	0x62e	; 0x62e <updateDisplay>
	myComs->Update(myComs);
     e76:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <myComs>
     e7a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <myComs+0x1>
     e7e:	fc 01       	movw	r30, r24
     e80:	ef 58       	subi	r30, 0x8F	; 143
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	01 90       	ld	r0, Z+
     e86:	f0 81       	ld	r31, Z
     e88:	e0 2d       	mov	r30, r0
     e8a:	09 95       	icall
	if(myComs->Direction[0] == 1){
     e8c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     e90:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     e94:	85 a9       	ldd	r24, Z+53	; 0x35
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	d9 f5       	brne	.+118    	; 0xf10 <manualControl+0xac>
		set_motors(speed,speed);
     e9a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     e9e:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     ea2:	bc 01       	movw	r22, r24
     ea4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		if(counter % 20 == 0)
     ea8:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2284>
     eac:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2284+0x1>
     eb0:	9a 01       	movw	r18, r20
     eb2:	ad ec       	ldi	r26, 0xCD	; 205
     eb4:	bc ec       	ldi	r27, 0xCC	; 204
     eb6:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__umulhisi3>
     eba:	92 95       	swap	r25
     ebc:	82 95       	swap	r24
     ebe:	8f 70       	andi	r24, 0x0F	; 15
     ec0:	89 27       	eor	r24, r25
     ec2:	9f 70       	andi	r25, 0x0F	; 15
     ec4:	89 27       	eor	r24, r25
     ec6:	64 e1       	ldi	r22, 0x14	; 20
     ec8:	68 9f       	mul	r22, r24
     eca:	90 01       	movw	r18, r0
     ecc:	69 9f       	mul	r22, r25
     ece:	30 0d       	add	r19, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	42 17       	cp	r20, r18
     ed4:	53 07       	cpc	r21, r19
     ed6:	49 f4       	brne	.+18     	; 0xeea <manualControl+0x86>
		{
			speed++;
     ed8:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     edc:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     ee6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		if(speed > 25)
     eea:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     eee:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     ef2:	4a 97       	sbiw	r24, 0x1a	; 26
     ef4:	34 f0       	brlt	.+12     	; 0xf02 <manualControl+0x9e>
		{
			speed = 25;
     ef6:	89 e1       	ldi	r24, 0x19	; 25
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     efe:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		counter++;
     f02:	4f 5f       	subi	r20, 0xFF	; 255
     f04:	5f 4f       	sbci	r21, 0xFF	; 255
     f06:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2284+0x1>
     f0a:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2284>
     f0e:	ba c0       	rjmp	.+372    	; 0x1084 <manualControl+0x220>
	}
	else if(myComs->Direction[0] == 0 && myComs->Direction[2] == 0)
     f10:	81 11       	cpse	r24, r1
     f12:	3d c0       	rjmp	.+122    	; 0xf8e <manualControl+0x12a>
     f14:	97 a9       	ldd	r25, Z+55	; 0x37
     f16:	91 11       	cpse	r25, r1
     f18:	3a c0       	rjmp	.+116    	; 0xf8e <manualControl+0x12a>
	{
		set_motors(speed,speed);
     f1a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     f1e:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     f22:	bc 01       	movw	r22, r24
     f24:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		if(counter % 20 == 0)
     f28:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2284>
     f2c:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2284+0x1>
     f30:	9a 01       	movw	r18, r20
     f32:	ad ec       	ldi	r26, 0xCD	; 205
     f34:	bc ec       	ldi	r27, 0xCC	; 204
     f36:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__umulhisi3>
     f3a:	92 95       	swap	r25
     f3c:	82 95       	swap	r24
     f3e:	8f 70       	andi	r24, 0x0F	; 15
     f40:	89 27       	eor	r24, r25
     f42:	9f 70       	andi	r25, 0x0F	; 15
     f44:	89 27       	eor	r24, r25
     f46:	64 e1       	ldi	r22, 0x14	; 20
     f48:	68 9f       	mul	r22, r24
     f4a:	90 01       	movw	r18, r0
     f4c:	69 9f       	mul	r22, r25
     f4e:	30 0d       	add	r19, r0
     f50:	11 24       	eor	r1, r1
     f52:	42 17       	cp	r20, r18
     f54:	53 07       	cpc	r21, r19
     f56:	49 f4       	brne	.+18     	; 0xf6a <manualControl+0x106>
		{
			speed--;
     f58:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     f5c:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     f66:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		if(speed < 1)
     f6a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     f6e:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     f72:	18 16       	cp	r1, r24
     f74:	19 06       	cpc	r1, r25
     f76:	24 f0       	brlt	.+8      	; 0xf80 <manualControl+0x11c>
		{
			speed = 0;
     f78:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <speed.2283+0x1>
     f7c:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <speed.2283>
		}
		counter++;
     f80:	4f 5f       	subi	r20, 0xFF	; 255
     f82:	5f 4f       	sbci	r21, 0xFF	; 255
     f84:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2284+0x1>
     f88:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2284>
     f8c:	7b c0       	rjmp	.+246    	; 0x1084 <manualControl+0x220>
	}
	
	else if(myComs->Direction[2] == 1){
     f8e:	97 a9       	ldd	r25, Z+55	; 0x37
     f90:	91 30       	cpi	r25, 0x01	; 1
     f92:	e1 f5       	brne	.+120    	; 0x100c <manualControl+0x1a8>
		set_motors(speed,speed);
     f94:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     f98:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     f9c:	bc 01       	movw	r22, r24
     f9e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		if(counter % 20 == 0)
     fa2:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2284>
     fa6:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2284+0x1>
     faa:	9a 01       	movw	r18, r20
     fac:	ad ec       	ldi	r26, 0xCD	; 205
     fae:	bc ec       	ldi	r27, 0xCC	; 204
     fb0:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__umulhisi3>
     fb4:	92 95       	swap	r25
     fb6:	82 95       	swap	r24
     fb8:	8f 70       	andi	r24, 0x0F	; 15
     fba:	89 27       	eor	r24, r25
     fbc:	9f 70       	andi	r25, 0x0F	; 15
     fbe:	89 27       	eor	r24, r25
     fc0:	64 e1       	ldi	r22, 0x14	; 20
     fc2:	68 9f       	mul	r22, r24
     fc4:	90 01       	movw	r18, r0
     fc6:	69 9f       	mul	r22, r25
     fc8:	30 0d       	add	r19, r0
     fca:	11 24       	eor	r1, r1
     fcc:	42 17       	cp	r20, r18
     fce:	53 07       	cpc	r21, r19
     fd0:	49 f4       	brne	.+18     	; 0xfe4 <manualControl+0x180>
		{
			speed--;
     fd2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     fd6:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     fe0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		if(speed < -25)
     fe4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     fe8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     fec:	87 3e       	cpi	r24, 0xE7	; 231
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	34 f4       	brge	.+12     	; 0xffe <manualControl+0x19a>
		{
			speed = -25;
     ff2:	87 ee       	ldi	r24, 0xE7	; 231
     ff4:	9f ef       	ldi	r25, 0xFF	; 255
     ff6:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     ffa:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		counter++;
     ffe:	4f 5f       	subi	r20, 0xFF	; 255
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2284+0x1>
    1006:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2284>
    100a:	3c c0       	rjmp	.+120    	; 0x1084 <manualControl+0x220>
	}
	else if(myComs->Direction[0] == 1 && myComs->Direction[2] == 0)
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	d1 f5       	brne	.+116    	; 0x1084 <manualControl+0x220>
    1010:	91 11       	cpse	r25, r1
    1012:	38 c0       	rjmp	.+112    	; 0x1084 <manualControl+0x220>
	{
		set_motors(speed,speed);
    1014:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
    1018:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
    101c:	bc 01       	movw	r22, r24
    101e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
		if(counter % 20 == 0)
    1022:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2284>
    1026:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2284+0x1>
    102a:	9a 01       	movw	r18, r20
    102c:	ad ec       	ldi	r26, 0xCD	; 205
    102e:	bc ec       	ldi	r27, 0xCC	; 204
    1030:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__umulhisi3>
    1034:	92 95       	swap	r25
    1036:	82 95       	swap	r24
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	89 27       	eor	r24, r25
    103c:	9f 70       	andi	r25, 0x0F	; 15
    103e:	89 27       	eor	r24, r25
    1040:	64 e1       	ldi	r22, 0x14	; 20
    1042:	68 9f       	mul	r22, r24
    1044:	90 01       	movw	r18, r0
    1046:	69 9f       	mul	r22, r25
    1048:	30 0d       	add	r19, r0
    104a:	11 24       	eor	r1, r1
    104c:	42 17       	cp	r20, r18
    104e:	53 07       	cpc	r21, r19
    1050:	49 f4       	brne	.+18     	; 0x1064 <manualControl+0x200>
		{
			speed++;
    1052:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
    1056:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
    105a:	01 96       	adiw	r24, 0x01	; 1
    105c:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
    1060:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		if(speed > -1)
    1064:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
    1068:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
    106c:	99 23       	and	r25, r25
    106e:	24 f0       	brlt	.+8      	; 0x1078 <manualControl+0x214>
		{
			speed = 0;
    1070:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <speed.2283+0x1>
    1074:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <speed.2283>
		}
		counter++;
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2284+0x1>
    1080:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2284>
	}
	
	if(myComs->Direction[1] == 1){
    1084:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
    1088:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
    108c:	86 a9       	ldd	r24, Z+54	; 0x36
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	61 f4       	brne	.+24     	; 0x10aa <manualControl+0x246>
		set_motors(speed/2,speed);
    1092:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <speed.2283>
    1096:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <speed.2283+0x1>
    109a:	cb 01       	movw	r24, r22
    109c:	77 23       	and	r23, r23
    109e:	0c f4       	brge	.+2      	; 0x10a2 <manualControl+0x23e>
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	95 95       	asr	r25
    10a4:	87 95       	ror	r24
    10a6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
	}
	
	if(myComs->Direction[3] == 1){
    10aa:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
    10ae:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
    10b2:	80 ad       	ldd	r24, Z+56	; 0x38
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	69 f4       	brne	.+26     	; 0x10d2 <manualControl+0x26e>
		set_motors(speed,speed/2);
    10b8:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
    10bc:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
    10c0:	bc 01       	movw	r22, r24
    10c2:	99 23       	and	r25, r25
    10c4:	14 f4       	brge	.+4      	; 0x10ca <manualControl+0x266>
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	75 95       	asr	r23
    10cc:	67 95       	ror	r22
    10ce:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
    10d2:	08 95       	ret

000010d4 <Spin>:
	}
}

void Spin(){
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
	errorDisplay(slipped,0);
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 70 03 	call	0x6e0	; 0x6e0 <errorDisplay>
	for(int i = 0;i<=255;i++){
    10e2:	c0 e0       	ldi	r28, 0x00	; 0
    10e4:	d0 e0       	ldi	r29, 0x00	; 0
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <Spin+0x2c>
		set_motors(i,0-i);
    10e8:	66 27       	eor	r22, r22
    10ea:	77 27       	eor	r23, r23
    10ec:	6c 1b       	sub	r22, r28
    10ee:	7d 0b       	sbc	r23, r29
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
	}
}

void Spin(){
	errorDisplay(slipped,0);
	for(int i = 0;i<=255;i++){
    10fe:	21 96       	adiw	r28, 0x01	; 1
    1100:	cf 3f       	cpi	r28, 0xFF	; 255
    1102:	d1 05       	cpc	r29, r1
    1104:	89 f3       	breq	.-30     	; 0x10e8 <Spin+0x14>
    1106:	84 f3       	brlt	.-32     	; 0x10e8 <Spin+0x14>
    1108:	c0 e0       	ldi	r28, 0x00	; 0
    110a:	d0 e0       	ldi	r29, 0x00	; 0
    110c:	15 c0       	rjmp	.+42     	; 0x1138 <Spin+0x64>
		set_motors(i,0-i);
		delay(2);
	}
	int count = 0;
	while(myComs->EmergencyStop == 2){
		count++;
    110e:	21 96       	adiw	r28, 0x01	; 1
		if(count % 10000 == 0)
    1110:	ce 01       	movw	r24, r28
    1112:	60 e1       	ldi	r22, 0x10	; 16
    1114:	77 e2       	ldi	r23, 0x27	; 39
    1116:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <__divmodhi4>
    111a:	89 2b       	or	r24, r25
    111c:	69 f4       	brne	.+26     	; 0x1138 <Spin+0x64>
		{
			clear();
    111e:	0e 94 cf 13 	call	0x279e	; 0x279e <clear>
			myComs->Update(myComs);
    1122:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <myComs>
    1126:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <myComs+0x1>
    112a:	fc 01       	movw	r30, r24
    112c:	ef 58       	subi	r30, 0x8F	; 143
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	01 90       	ld	r0, Z+
    1132:	f0 81       	ld	r31, Z
    1134:	e0 2d       	mov	r30, r0
    1136:	09 95       	icall
	for(int i = 0;i<=255;i++){
		set_motors(i,0-i);
		delay(2);
	}
	int count = 0;
	while(myComs->EmergencyStop == 2){
    1138:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
    113c:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
    1140:	e5 59       	subi	r30, 0x95	; 149
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	80 81       	ld	r24, Z
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	11 f3       	breq	.-60     	; 0x110e <Spin+0x3a>
		


	}
	
	set_motors(0,0);
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <set_motors>

	
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <parcoursSearch>:
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	00 d0       	rcall	.+0      	; 0x1166 <parcoursSearch+0xa>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lineType>
    116e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <situatie>
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	89 30       	cpi	r24, 0x09	; 9
    1176:	91 05       	cpc	r25, r1
    1178:	08 f0       	brcs	.+2      	; 0x117c <parcoursSearch+0x20>
    117a:	41 c0       	rjmp	.+130    	; 0x11fe <parcoursSearch+0xa2>
    117c:	fc 01       	movw	r30, r24
    117e:	ec 5c       	subi	r30, 0xCC	; 204
    1180:	ff 4f       	sbci	r31, 0xFF	; 255
    1182:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__tablejump2__>
    1186:	83 e5       	ldi	r24, 0x53	; 83
    1188:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
    118c:	38 c0       	rjmp	.+112    	; 0x11fe <parcoursSearch+0xa2>
    118e:	8c e4       	ldi	r24, 0x4C	; 76
    1190:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
    1194:	8c e4       	ldi	r24, 0x4C	; 76
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	be 01       	movw	r22, r28
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	84 e1       	ldi	r24, 0x14	; 20
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <strncat>
    11aa:	29 c0       	rjmp	.+82     	; 0x11fe <parcoursSearch+0xa2>
    11ac:	82 e5       	ldi	r24, 0x52	; 82
    11ae:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
    11b2:	82 e5       	ldi	r24, 0x52	; 82
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	41 e0       	ldi	r20, 0x01	; 1
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	be 01       	movw	r22, r28
    11bc:	6f 5f       	subi	r22, 0xFF	; 255
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	84 e1       	ldi	r24, 0x14	; 20
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <strncat>
    11c8:	1a c0       	rjmp	.+52     	; 0x11fe <parcoursSearch+0xa2>
    11ca:	83 e5       	ldi	r24, 0x53	; 83
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	be 01       	movw	r22, r28
    11d4:	6f 5f       	subi	r22, 0xFF	; 255
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	84 e1       	ldi	r24, 0x14	; 20
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <strncat>
    11e0:	0e c0       	rjmp	.+28     	; 0x11fe <parcoursSearch+0xa2>
    11e2:	84 e5       	ldi	r24, 0x54	; 84
    11e4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
    11e8:	84 e5       	ldi	r24, 0x54	; 84
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	be 01       	movw	r22, r28
    11f2:	6f 5f       	subi	r22, 0xFF	; 255
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	84 e1       	ldi	r24, 0x14	; 20
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <strncat>
    11fe:	0e 94 cf 13 	call	0x279e	; 0x279e <clear>
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	0e 94 56 14 	call	0x28ac	; 0x28ac <lcd_goto_xy>
    120a:	00 e0       	ldi	r16, 0x00	; 0
    120c:	10 e0       	ldi	r17, 0x00	; 0
    120e:	08 c0       	rjmp	.+16     	; 0x1220 <parcoursSearch+0xc4>
    1210:	f8 01       	movw	r30, r16
    1212:	ec 5e       	subi	r30, 0xEC	; 236
    1214:	fe 4f       	sbci	r31, 0xFE	; 254
    1216:	80 81       	ld	r24, Z
    1218:	0e 94 5f 13 	call	0x26be	; 0x26be <print_character>
    121c:	0f 5f       	subi	r16, 0xFF	; 255
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	e4 e1       	ldi	r30, 0x14	; 20
    1222:	f1 e0       	ldi	r31, 0x01	; 1
    1224:	01 90       	ld	r0, Z+
    1226:	00 20       	and	r0, r0
    1228:	e9 f7       	brne	.-6      	; 0x1224 <parcoursSearch+0xc8>
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	e4 51       	subi	r30, 0x14	; 20
    122e:	f1 40       	sbci	r31, 0x01	; 1
    1230:	e0 17       	cp	r30, r16
    1232:	f1 07       	cpc	r31, r17
    1234:	68 f7       	brcc	.-38     	; 0x1210 <parcoursSearch+0xb4>
    1236:	df 01       	movw	r26, r30
    1238:	ae 5e       	subi	r26, 0xEE	; 238
    123a:	be 4f       	sbci	r27, 0xFE	; 254
    123c:	8c 91       	ld	r24, X
    123e:	84 35       	cpi	r24, 0x54	; 84
    1240:	09 f0       	breq	.+2      	; 0x1244 <parcoursSearch+0xe8>
    1242:	93 cf       	rjmp	.-218    	; 0x116a <parcoursSearch+0xe>
    1244:	df 01       	movw	r26, r30
    1246:	af 5e       	subi	r26, 0xEF	; 239
    1248:	be 4f       	sbci	r27, 0xFE	; 254
    124a:	8c 91       	ld	r24, X
    124c:	ed 5e       	subi	r30, 0xED	; 237
    124e:	fe 4f       	sbci	r31, 0xFE	; 254
    1250:	90 81       	ld	r25, Z
    1252:	8c 34       	cpi	r24, 0x4C	; 76
    1254:	29 f4       	brne	.+10     	; 0x1260 <parcoursSearch+0x104>
    1256:	9c 34       	cpi	r25, 0x4C	; 76
    1258:	19 f4       	brne	.+6      	; 0x1260 <parcoursSearch+0x104>
    125a:	83 e5       	ldi	r24, 0x53	; 83
    125c:	8a 83       	std	Y+2, r24	; 0x02
    125e:	1b c0       	rjmp	.+54     	; 0x1296 <parcoursSearch+0x13a>
    1260:	83 35       	cpi	r24, 0x53	; 83
    1262:	29 f4       	brne	.+10     	; 0x126e <parcoursSearch+0x112>
    1264:	9c 34       	cpi	r25, 0x4C	; 76
    1266:	19 f4       	brne	.+6      	; 0x126e <parcoursSearch+0x112>
    1268:	82 e5       	ldi	r24, 0x52	; 82
    126a:	8a 83       	std	Y+2, r24	; 0x02
    126c:	14 c0       	rjmp	.+40     	; 0x1296 <parcoursSearch+0x13a>
    126e:	82 35       	cpi	r24, 0x52	; 82
    1270:	29 f4       	brne	.+10     	; 0x127c <parcoursSearch+0x120>
    1272:	9c 34       	cpi	r25, 0x4C	; 76
    1274:	19 f4       	brne	.+6      	; 0x127c <parcoursSearch+0x120>
    1276:	84 e5       	ldi	r24, 0x54	; 84
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <parcoursSearch+0x13a>
    127c:	8c 34       	cpi	r24, 0x4C	; 76
    127e:	29 f4       	brne	.+10     	; 0x128a <parcoursSearch+0x12e>
    1280:	92 35       	cpi	r25, 0x52	; 82
    1282:	19 f4       	brne	.+6      	; 0x128a <parcoursSearch+0x12e>
    1284:	84 e5       	ldi	r24, 0x54	; 84
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <parcoursSearch+0x13a>
    128a:	8c 34       	cpi	r24, 0x4C	; 76
    128c:	21 f4       	brne	.+8      	; 0x1296 <parcoursSearch+0x13a>
    128e:	93 35       	cpi	r25, 0x53	; 83
    1290:	11 f4       	brne	.+4      	; 0x1296 <parcoursSearch+0x13a>
    1292:	82 e5       	ldi	r24, 0x52	; 82
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	e4 e1       	ldi	r30, 0x14	; 20
    1298:	f1 e0       	ldi	r31, 0x01	; 1
    129a:	01 90       	ld	r0, Z+
    129c:	00 20       	and	r0, r0
    129e:	e9 f7       	brne	.-6      	; 0x129a <parcoursSearch+0x13e>
    12a0:	34 97       	sbiw	r30, 0x04	; 4
    12a2:	10 82       	st	Z, r1
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	be 01       	movw	r22, r28
    12aa:	6e 5f       	subi	r22, 0xFE	; 254
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
    12ae:	84 e1       	ldi	r24, 0x14	; 20
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <strncat>
    12b6:	59 cf       	rjmp	.-334    	; 0x116a <parcoursSearch+0xe>
    12b8:	80 e5       	ldi	r24, 0x50	; 80
    12ba:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	08 95       	ret

000012d0 <parcours>:
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <parcours+0x6>
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	7a 83       	std	Y+2, r23	; 0x02
    12dc:	69 83       	std	Y+1, r22	; 0x01
    12de:	0e 94 f5 02 	call	0x5ea	; 0x5ea <batteryPercentage>
    12e2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 17 03 	call	0x62e	; 0x62e <updateDisplay>
    12f0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <route>
    12f4:	8f 35       	cpi	r24, 0x5F	; 95
    12f6:	61 f4       	brne	.+24     	; 0x1310 <parcours+0x40>
    12f8:	84 e1       	ldi	r24, 0x14	; 20
    12fa:	e4 e1       	ldi	r30, 0x14	; 20
    12fc:	f1 e0       	ldi	r31, 0x01	; 1
    12fe:	df 01       	movw	r26, r30
    1300:	1d 92       	st	X+, r1
    1302:	8a 95       	dec	r24
    1304:	e9 f7       	brne	.-6      	; 0x1300 <parcours+0x30>
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	0e 94 ae 08 	call	0x115c	; 0x115c <parcoursSearch>
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <parcours+0x48>
    1310:	ce 01       	movw	r24, r28
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	0e 94 ae 08 	call	0x115c	; 0x115c <parcoursSearch>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(char *a, char *b) {
    int temp = *a;
    1326:	fc 01       	movw	r30, r24
    1328:	20 81       	ld	r18, Z
    *a = *b;
    132a:	fb 01       	movw	r30, r22
    132c:	30 81       	ld	r19, Z
    132e:	fc 01       	movw	r30, r24
    1330:	30 83       	st	Z, r19
    *b = temp;
    1332:	fb 01       	movw	r30, r22
    1334:	20 83       	st	Z, r18
    1336:	08 95       	ret

00001338 <bubbleSort>:
}

void bubbleSort(char arr[],char orderY[], int n) {
    1338:	8f 92       	push	r8
    133a:	9f 92       	push	r9
    133c:	af 92       	push	r10
    133e:	bf 92       	push	r11
    1340:	cf 92       	push	r12
    1342:	df 92       	push	r13
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	8c 01       	movw	r16, r24
    1352:	5b 01       	movw	r10, r22
    1354:	6a 01       	movw	r12, r20
    for (int i = 0; i < n - 1; i++) {
    1356:	e1 2c       	mov	r14, r1
    1358:	f1 2c       	mov	r15, r1
    135a:	28 c0       	rjmp	.+80     	; 0x13ac <bubbleSort+0x74>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
    135c:	f8 01       	movw	r30, r16
    135e:	ec 0f       	add	r30, r28
    1360:	fd 1f       	adc	r31, r29
    1362:	90 81       	ld	r25, Z
    1364:	4e 01       	movw	r8, r28
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	88 1a       	sub	r8, r24
    136a:	98 0a       	sbc	r9, r24
    136c:	d8 01       	movw	r26, r16
    136e:	a8 0d       	add	r26, r8
    1370:	b9 1d       	adc	r27, r9
    1372:	8c 91       	ld	r24, X
    1374:	89 17       	cp	r24, r25
    1376:	60 f4       	brcc	.+24     	; 0x1390 <bubbleSort+0x58>
                swap(&arr[j], &arr[j + 1]);
    1378:	bd 01       	movw	r22, r26
    137a:	cf 01       	movw	r24, r30
    137c:	0e 94 93 09 	call	0x1326	; 0x1326 <swap>
                swap(&orderY[j], &orderY[j + 1]);
    1380:	b5 01       	movw	r22, r10
    1382:	68 0d       	add	r22, r8
    1384:	79 1d       	adc	r23, r9
    1386:	c5 01       	movw	r24, r10
    1388:	8c 0f       	add	r24, r28
    138a:	9d 1f       	adc	r25, r29
    138c:	0e 94 93 09 	call	0x1326	; 0x1326 <swap>
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
    1390:	21 96       	adiw	r28, 0x01	; 1
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <bubbleSort+0x60>
    1394:	c0 e0       	ldi	r28, 0x00	; 0
    1396:	d0 e0       	ldi	r29, 0x00	; 0
    1398:	c6 01       	movw	r24, r12
    139a:	8e 19       	sub	r24, r14
    139c:	9f 09       	sbc	r25, r15
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	c8 17       	cp	r28, r24
    13a2:	d9 07       	cpc	r29, r25
    13a4:	dc f2       	brlt	.-74     	; 0x135c <bubbleSort+0x24>
    *a = *b;
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	e8 1a       	sub	r14, r24
    13aa:	f8 0a       	sbc	r15, r24
    13ac:	c6 01       	movw	r24, r12
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	e8 16       	cp	r14, r24
    13b2:	f9 06       	cpc	r15, r25
    13b4:	7c f3       	brlt	.-34     	; 0x1394 <bubbleSort+0x5c>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	bf 90       	pop	r11
    13c8:	af 90       	pop	r10
    13ca:	9f 90       	pop	r9
    13cc:	8f 90       	pop	r8
    13ce:	08 95       	ret

000013d0 <drive>:



void drive(int junctions, piRobot *robot, Communications *myCom)
{
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	6c 01       	movw	r12, r24
    13e2:	7a 01       	movw	r14, r20
	Junctions situatie;
	
	motorControl('S');
    13e4:	83 e5       	ldi	r24, 0x53	; 83
    13e6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
	int driving = 1;
	int count = 0;//Count for number of junctions to pass
    13ea:	00 e0       	ldi	r16, 0x00	; 0
    13ec:	10 e0       	ldi	r17, 0x00	; 0
void drive(int junctions, piRobot *robot, Communications *myCom)
{
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
    13ee:	c1 e0       	ldi	r28, 0x01	; 1
    13f0:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;//Count for number of junctions to pass
	while(driving) {
    13f2:	22 c0       	rjmp	.+68     	; 0x1438 <drive+0x68>
		situatie = lineType();
    13f4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lineType>
		switch (situatie) {
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	49 f0       	breq	.+18     	; 0x140e <drive+0x3e>
    13fc:	20 f0       	brcs	.+8      	; 0x1406 <drive+0x36>
    13fe:	83 50       	subi	r24, 0x03	; 3
    1400:	86 30       	cpi	r24, 0x06	; 6
    1402:	d0 f4       	brcc	.+52     	; 0x1438 <drive+0x68>
    1404:	04 c0       	rjmp	.+8      	; 0x140e <drive+0x3e>
			case Barcode: // end of parcour
			
				break;
			
			case Straight:
				motorControl('S');
    1406:	83 e5       	ldi	r24, 0x53	; 83
    1408:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
				break;
    140c:	15 c0       	rjmp	.+42     	; 0x1438 <drive+0x68>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
    140e:	0f 5f       	subi	r16, 0xFF	; 255
    1410:	1f 4f       	sbci	r17, 0xFF	; 255
				motorControl('S');
    1412:	83 e5       	ldi	r24, 0x53	; 83
    1414:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
				if(count == junctions)
    1418:	0c 15       	cp	r16, r12
    141a:	1d 05       	cpc	r17, r13
    141c:	29 f4       	brne	.+10     	; 0x1428 <drive+0x58>
				{
					motorControl('P');
    141e:	80 e5       	ldi	r24, 0x50	; 80
    1420:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					driving = 0;
    1424:	c0 e0       	ldi	r28, 0x00	; 0
    1426:	d0 e0       	ldi	r29, 0x00	; 0
				}
				myCom->Update(myCom);
    1428:	f7 01       	movw	r30, r14
    142a:	ef 58       	subi	r30, 0x8F	; 143
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	01 90       	ld	r0, Z+
    1430:	f0 81       	ld	r31, Z
    1432:	e0 2d       	mov	r30, r0
    1434:	c7 01       	movw	r24, r14
    1436:	09 95       	icall
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
	int count = 0;//Count for number of junctions to pass
	while(driving) {
    1438:	20 97       	sbiw	r28, 0x00	; 0
    143a:	e1 f6       	brne	.-72     	; 0x13f4 <drive+0x24>
				}
				myCom->Update(myCom);
				break;	
		}
	}
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	08 95       	ret

0000144e <waitForTurn>:

void waitForTurn()
{
    144e:	cf 93       	push	r28
	Junctions line;
	line = lineType();
    1450:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lineType>
    1454:	c8 2f       	mov	r28, r24
    1456:	8f e0       	ldi	r24, 0x0F	; 15
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <waitForTurn+0x18>
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
	{
		line  = lineType();
    1460:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <lineType>
    1464:	c8 2f       	mov	r28, r24
void waitForTurn()
{
	Junctions line;
	line = lineType();
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
    1466:	c1 11       	cpse	r28, r1
    1468:	fb cf       	rjmp	.-10     	; 0x1460 <waitForTurn+0x12>
	{
		line  = lineType();
	}
	motorControl('N');
    146a:	8e e4       	ldi	r24, 0x4E	; 78
    146c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
}
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <turnRobot>:

void turnRobot(char tdirection, piRobot *myRobot)
{
    1474:	ef 92       	push	r14
    1476:	ff 92       	push	r15
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	c8 2f       	mov	r28, r24
    1480:	8b 01       	movw	r16, r22
    int changing = 1;
    1482:	ee 24       	eor	r14, r14
    1484:	e3 94       	inc	r14
    1486:	f1 2c       	mov	r15, r1

    while(changing==1)
    1488:	a6 c0       	rjmp	.+332    	; 0x15d6 <turnRobot+0x162>
    {
		
        switch(myRobot->direction)
    148a:	f8 01       	movw	r30, r16
    148c:	84 81       	ldd	r24, Z+4	; 0x04
    148e:	8e 34       	cpi	r24, 0x4E	; 78
    1490:	59 f0       	breq	.+22     	; 0x14a8 <turnRobot+0x34>
    1492:	18 f4       	brcc	.+6      	; 0x149a <turnRobot+0x26>
    1494:	85 34       	cpi	r24, 0x45	; 69
    1496:	69 f1       	breq	.+90     	; 0x14f2 <turnRobot+0x7e>
    1498:	98 c0       	rjmp	.+304    	; 0x15ca <turnRobot+0x156>
    149a:	83 35       	cpi	r24, 0x53	; 83
    149c:	09 f4       	brne	.+2      	; 0x14a0 <turnRobot+0x2c>
    149e:	4e c0       	rjmp	.+156    	; 0x153c <turnRobot+0xc8>
    14a0:	87 35       	cpi	r24, 0x57	; 87
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <turnRobot+0x32>
    14a4:	6f c0       	rjmp	.+222    	; 0x1584 <turnRobot+0x110>
    14a6:	91 c0       	rjmp	.+290    	; 0x15ca <turnRobot+0x156>
        {
            case 'N':
                if(tdirection == 'E')
    14a8:	c5 34       	cpi	r28, 0x45	; 69
    14aa:	49 f4       	brne	.+18     	; 0x14be <turnRobot+0x4a>
                {
                    motorControl('R');
    14ac:	82 e5       	ldi	r24, 0x52	; 82
    14ae:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    14b2:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'E';
    14b6:	85 e4       	ldi	r24, 0x45	; 69
    14b8:	f8 01       	movw	r30, r16
    14ba:	84 83       	std	Z+4, r24	; 0x04
    14bc:	86 c0       	rjmp	.+268    	; 0x15ca <turnRobot+0x156>
                }
                else if(tdirection == 'W')
    14be:	c7 35       	cpi	r28, 0x57	; 87
    14c0:	49 f4       	brne	.+18     	; 0x14d4 <turnRobot+0x60>
                {
                    motorControl('L');
    14c2:	8c e4       	ldi	r24, 0x4C	; 76
    14c4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    14c8:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'W';
    14cc:	87 e5       	ldi	r24, 0x57	; 87
    14ce:	f8 01       	movw	r30, r16
    14d0:	84 83       	std	Z+4, r24	; 0x04
    14d2:	7b c0       	rjmp	.+246    	; 0x15ca <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    14d4:	c3 35       	cpi	r28, 0x53	; 83
    14d6:	09 f0       	breq	.+2      	; 0x14da <turnRobot+0x66>
    14d8:	78 c0       	rjmp	.+240    	; 0x15ca <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    14da:	8c e4       	ldi	r24, 0x4C	; 76
    14dc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
    14e0:	8c e4       	ldi	r24, 0x4C	; 76
    14e2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    14e6:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'S';
    14ea:	83 e5       	ldi	r24, 0x53	; 83
    14ec:	f8 01       	movw	r30, r16
    14ee:	84 83       	std	Z+4, r24	; 0x04
    14f0:	6c c0       	rjmp	.+216    	; 0x15ca <turnRobot+0x156>
                }
                break;
            case 'E':
                if(tdirection == 'S')
    14f2:	c3 35       	cpi	r28, 0x53	; 83
    14f4:	49 f4       	brne	.+18     	; 0x1508 <turnRobot+0x94>
                {
                    motorControl('R');
    14f6:	82 e5       	ldi	r24, 0x52	; 82
    14f8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    14fc:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'S';
    1500:	83 e5       	ldi	r24, 0x53	; 83
    1502:	f8 01       	movw	r30, r16
    1504:	84 83       	std	Z+4, r24	; 0x04
    1506:	61 c0       	rjmp	.+194    	; 0x15ca <turnRobot+0x156>
                }
                else if(tdirection == 'W')
    1508:	c7 35       	cpi	r28, 0x57	; 87
    150a:	49 f4       	brne	.+18     	; 0x151e <turnRobot+0xaa>
                {
                    motorControl('L');
    150c:	8c e4       	ldi	r24, 0x4C	; 76
    150e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    1512:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'W';
    1516:	87 e5       	ldi	r24, 0x57	; 87
    1518:	f8 01       	movw	r30, r16
    151a:	84 83       	std	Z+4, r24	; 0x04
    151c:	56 c0       	rjmp	.+172    	; 0x15ca <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    151e:	c3 35       	cpi	r28, 0x53	; 83
    1520:	09 f0       	breq	.+2      	; 0x1524 <turnRobot+0xb0>
    1522:	53 c0       	rjmp	.+166    	; 0x15ca <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    1524:	8c e4       	ldi	r24, 0x4C	; 76
    1526:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
    152a:	8c e4       	ldi	r24, 0x4C	; 76
    152c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    1530:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'S';
    1534:	83 e5       	ldi	r24, 0x53	; 83
    1536:	f8 01       	movw	r30, r16
    1538:	84 83       	std	Z+4, r24	; 0x04
    153a:	47 c0       	rjmp	.+142    	; 0x15ca <turnRobot+0x156>
                }
                break;
            case 'S':
                if(tdirection == 'W')
    153c:	c7 35       	cpi	r28, 0x57	; 87
    153e:	49 f4       	brne	.+18     	; 0x1552 <turnRobot+0xde>
                {
                    motorControl('R');
    1540:	82 e5       	ldi	r24, 0x52	; 82
    1542:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    1546:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'W';
    154a:	87 e5       	ldi	r24, 0x57	; 87
    154c:	f8 01       	movw	r30, r16
    154e:	84 83       	std	Z+4, r24	; 0x04
    1550:	3c c0       	rjmp	.+120    	; 0x15ca <turnRobot+0x156>
                }
                else if(tdirection == 'E')
    1552:	c5 34       	cpi	r28, 0x45	; 69
    1554:	49 f4       	brne	.+18     	; 0x1568 <turnRobot+0xf4>
                {
                    motorControl('L');
    1556:	8c e4       	ldi	r24, 0x4C	; 76
    1558:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    155c:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'E';
    1560:	85 e4       	ldi	r24, 0x45	; 69
    1562:	f8 01       	movw	r30, r16
    1564:	84 83       	std	Z+4, r24	; 0x04
    1566:	31 c0       	rjmp	.+98     	; 0x15ca <turnRobot+0x156>
                }
                else if(tdirection == 'N')
    1568:	ce 34       	cpi	r28, 0x4E	; 78
    156a:	79 f5       	brne	.+94     	; 0x15ca <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    156c:	8c e4       	ldi	r24, 0x4C	; 76
    156e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
    1572:	8c e4       	ldi	r24, 0x4C	; 76
    1574:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    1578:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'N';
    157c:	8e e4       	ldi	r24, 0x4E	; 78
    157e:	f8 01       	movw	r30, r16
    1580:	84 83       	std	Z+4, r24	; 0x04
    1582:	23 c0       	rjmp	.+70     	; 0x15ca <turnRobot+0x156>
                }
                break;
            case 'W':
                if(tdirection == 'N')
    1584:	ce 34       	cpi	r28, 0x4E	; 78
    1586:	49 f4       	brne	.+18     	; 0x159a <turnRobot+0x126>
                {
					
                    motorControl('R');
    1588:	82 e5       	ldi	r24, 0x52	; 82
    158a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    158e:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'N';
    1592:	8e e4       	ldi	r24, 0x4E	; 78
    1594:	f8 01       	movw	r30, r16
    1596:	84 83       	std	Z+4, r24	; 0x04
    1598:	18 c0       	rjmp	.+48     	; 0x15ca <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    159a:	c3 35       	cpi	r28, 0x53	; 83
    159c:	49 f4       	brne	.+18     	; 0x15b0 <turnRobot+0x13c>
                {
	                motorControl('L');
    159e:	8c e4       	ldi	r24, 0x4C	; 76
    15a0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
	                waitForTurn();
    15a4:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
	                myRobot->direction = 'S';
    15a8:	83 e5       	ldi	r24, 0x53	; 83
    15aa:	f8 01       	movw	r30, r16
    15ac:	84 83       	std	Z+4, r24	; 0x04
    15ae:	0d c0       	rjmp	.+26     	; 0x15ca <turnRobot+0x156>
                }
                else if(tdirection == 'E')
    15b0:	c5 34       	cpi	r28, 0x45	; 69
    15b2:	59 f4       	brne	.+22     	; 0x15ca <turnRobot+0x156>
                {
                    motorControl('L');
    15b4:	8c e4       	ldi	r24, 0x4C	; 76
    15b6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					motorControl('L');
    15ba:	8c e4       	ldi	r24, 0x4C	; 76
    15bc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
					waitForTurn();
    15c0:	0e 94 27 0a 	call	0x144e	; 0x144e <waitForTurn>
                    myRobot->direction = 'E';
    15c4:	85 e4       	ldi	r24, 0x45	; 69
    15c6:	f8 01       	movw	r30, r16
    15c8:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
				if(myRobot->direction == tdirection)
    15ca:	f8 01       	movw	r30, r16
    15cc:	84 81       	ldd	r24, Z+4	; 0x04
    15ce:	c8 13       	cpse	r28, r24
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <turnRobot+0x162>
				{
					changing = 0;
    15d2:	e1 2c       	mov	r14, r1
    15d4:	f1 2c       	mov	r15, r1

void turnRobot(char tdirection, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
    15d6:	f1 e0       	ldi	r31, 0x01	; 1
    15d8:	ef 16       	cp	r14, r31
    15da:	f1 04       	cpc	r15, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <turnRobot+0x16c>
    15de:	55 cf       	rjmp	.-342    	; 0x148a <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	08 95       	ret

000015ec <moveX>:


void moveX(int orderPos, piRobot *robot, Communications *myCom)
{
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
	
    int junctions;
	
    if(robot->posX != orderPos)
    15f8:	fb 01       	movw	r30, r22
    15fa:	20 81       	ld	r18, Z
    15fc:	31 81       	ldd	r19, Z+1	; 0x01
    15fe:	28 17       	cp	r18, r24
    1600:	39 07       	cpc	r19, r25
    1602:	d9 f0       	breq	.+54     	; 0x163a <moveX+0x4e>
    1604:	7a 01       	movw	r14, r20
    1606:	eb 01       	movw	r28, r22
    1608:	8c 01       	movw	r16, r24
    {
		
        if(robot->posX < orderPos)
    160a:	28 17       	cp	r18, r24
    160c:	39 07       	cpc	r19, r25
    160e:	54 f4       	brge	.+20     	; 0x1624 <moveX+0x38>
        {
            turnRobot('W', robot);
    1610:	87 e5       	ldi	r24, 0x57	; 87
    1612:	0e 94 3a 0a 	call	0x1474	; 0x1474 <turnRobot>
            junctions = orderPos-robot->posX;
    1616:	88 81       	ld	r24, Y
    1618:	99 81       	ldd	r25, Y+1	; 0x01
    161a:	98 01       	movw	r18, r16
    161c:	28 1b       	sub	r18, r24
    161e:	39 0b       	sbc	r19, r25
    1620:	c9 01       	movw	r24, r18
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <moveX+0x46>
        }
        else{
            turnRobot('E', robot);
    1624:	85 e4       	ldi	r24, 0x45	; 69
    1626:	0e 94 3a 0a 	call	0x1474	; 0x1474 <turnRobot>
            junctions = robot->posX - orderPos;
    162a:	88 81       	ld	r24, Y
    162c:	99 81       	ldd	r25, Y+1	; 0x01
    162e:	80 1b       	sub	r24, r16
    1630:	91 0b       	sbc	r25, r17
        }
		drive(junctions, robot, myCom);
    1632:	a7 01       	movw	r20, r14
    1634:	be 01       	movw	r22, r28
    1636:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <drive>
    }
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	08 95       	ret

00001648 <moveY>:

void moveY(int orderPos, piRobot *robot, Communications *myCom)
{
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
    1654:	fb 01       	movw	r30, r22
    1656:	22 81       	ldd	r18, Z+2	; 0x02
    1658:	33 81       	ldd	r19, Z+3	; 0x03
    165a:	28 17       	cp	r18, r24
    165c:	39 07       	cpc	r19, r25
    165e:	d9 f0       	breq	.+54     	; 0x1696 <moveY+0x4e>
    1660:	7a 01       	movw	r14, r20
    1662:	eb 01       	movw	r28, r22
    1664:	8c 01       	movw	r16, r24
    {
        if(robot->posY < orderPos)
    1666:	28 17       	cp	r18, r24
    1668:	39 07       	cpc	r19, r25
    166a:	54 f4       	brge	.+20     	; 0x1680 <moveY+0x38>
        {
            turnRobot('N', robot);
    166c:	8e e4       	ldi	r24, 0x4E	; 78
    166e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <turnRobot>
            junctions = orderPos-robot->posY;
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	9b 81       	ldd	r25, Y+3	; 0x03
    1676:	98 01       	movw	r18, r16
    1678:	28 1b       	sub	r18, r24
    167a:	39 0b       	sbc	r19, r25
    167c:	c9 01       	movw	r24, r18
    167e:	07 c0       	rjmp	.+14     	; 0x168e <moveY+0x46>
        }
        else{
            turnRobot('S', robot);
    1680:	83 e5       	ldi	r24, 0x53	; 83
    1682:	0e 94 3a 0a 	call	0x1474	; 0x1474 <turnRobot>
            junctions = robot->posY - orderPos;
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	9b 81       	ldd	r25, Y+3	; 0x03
    168a:	80 1b       	sub	r24, r16
    168c:	91 0b       	sbc	r25, r17
        }
            drive(junctions, robot, myCom);
    168e:	a7 01       	movw	r20, r14
    1690:	be 01       	movw	r22, r28
    1692:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <drive>
        
    }
}
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	08 95       	ret

000016a4 <warehouse>:


void warehouse(objective objective, Communications *myCom)
{
    16a4:	2f 92       	push	r2
    16a6:	3f 92       	push	r3
    16a8:	4f 92       	push	r4
    16aa:	5f 92       	push	r5
    16ac:	6f 92       	push	r6
    16ae:	7f 92       	push	r7
    16b0:	8f 92       	push	r8
    16b2:	9f 92       	push	r9
    16b4:	af 92       	push	r10
    16b6:	bf 92       	push	r11
    16b8:	cf 92       	push	r12
    16ba:	df 92       	push	r13
    16bc:	ef 92       	push	r14
    16be:	ff 92       	push	r15
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	e7 97       	sbiw	r28, 0x37	; 55
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	f8 2e       	mov	r15, r24
    16da:	8b 01       	movw	r16, r22
 piRobot robot;
 robot.direction = 'W';
    16dc:	87 e5       	ldi	r24, 0x57	; 87
    16de:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = 0;
    16e0:	1a 82       	std	Y+2, r1	; 0x02
    16e2:	19 82       	std	Y+1, r1	; 0x01
 robot.posY = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
 myCom->locationx = 0;
    16ec:	fb 01       	movw	r30, r22
    16ee:	e2 59       	subi	r30, 0x92	; 146
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	10 82       	st	Z, r1
 myCom-> locationy = 1;
    16f4:	31 96       	adiw	r30, 0x01	; 1
    16f6:	80 83       	st	Z, r24
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
 //char orderX[]={2,5,4,3,1};
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
    16fc:	c1 2c       	mov	r12, r1
    16fe:	d1 2c       	mov	r13, r1
 for(int i = 0; i<25;i++)
    1700:	0c c0       	rjmp	.+24     	; 0x171a <warehouse+0x76>
 {
 	if(myCom->Orderarx[i] != 0)
    1702:	f8 01       	movw	r30, r16
    1704:	e8 0f       	add	r30, r24
    1706:	f9 1f       	adc	r31, r25
    1708:	ee 5a       	subi	r30, 0xAE	; 174
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	20 81       	ld	r18, Z
    170e:	22 23       	and	r18, r18
    1710:	19 f0       	breq	.+6      	; 0x1718 <warehouse+0x74>
 	{
 		arraySize++;
    1712:	2f ef       	ldi	r18, 0xFF	; 255
    1714:	c2 1a       	sub	r12, r18
    1716:	d2 0a       	sbc	r13, r18
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	89 31       	cpi	r24, 0x19	; 25
    171c:	91 05       	cpc	r25, r1
    171e:	8c f3       	brlt	.-30     	; 0x1702 <warehouse+0x5e>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	18 c0       	rjmp	.+48     	; 0x1756 <warehouse+0xb2>
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
 {
 	orderX[i] = myCom->Orderarx[i];
    1726:	d8 01       	movw	r26, r16
    1728:	a8 0f       	add	r26, r24
    172a:	b9 1f       	adc	r27, r25
    172c:	fd 01       	movw	r30, r26
    172e:	ee 5a       	subi	r30, 0xAE	; 174
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	20 81       	ld	r18, Z
    1734:	e6 e0       	ldi	r30, 0x06	; 6
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	ec 0f       	add	r30, r28
    173a:	fd 1f       	adc	r31, r29
    173c:	e8 0f       	add	r30, r24
    173e:	f9 1f       	adc	r31, r25
    1740:	20 83       	st	Z, r18
 	orderY[i] = myCom->Orderary[i];
    1742:	d9 96       	adiw	r26, 0x39	; 57
    1744:	2c 91       	ld	r18, X
    1746:	ef e1       	ldi	r30, 0x1F	; 31
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	ec 0f       	add	r30, r28
    174c:	fd 1f       	adc	r31, r29
    174e:	e8 0f       	add	r30, r24
    1750:	f9 1f       	adc	r31, r25
    1752:	20 83       	st	Z, r18
 	if(myCom->Orderarx[i] != 0)
 	{
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	8c 15       	cp	r24, r12
    1758:	9d 05       	cpc	r25, r13
    175a:	2c f3       	brlt	.-54     	; 0x1726 <warehouse+0x82>
 	orderX[i] = myCom->Orderarx[i];
 	orderY[i] = myCom->Orderary[i];
 }


    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
    175c:	a6 01       	movw	r20, r12
    175e:	be 01       	movw	r22, r28
    1760:	61 5e       	subi	r22, 0xE1	; 225
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	ce 01       	movw	r24, r28
    1766:	06 96       	adiw	r24, 0x06	; 6
    1768:	0e 94 9c 09 	call	0x1338	; 0x1338 <bubbleSort>
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
    176c:	ff 20       	and	r15, r15
    176e:	09 f4       	brne	.+2      	; 0x1772 <warehouse+0xce>
    1770:	8f c0       	rjmp	.+286    	; 0x1890 <warehouse+0x1ec>
    1772:	a5 c0       	rjmp	.+330    	; 0x18be <warehouse+0x21a>
	{
		for(int locations = 0; locations<arraySize;locations++)
		{
			float completed = locations;
    1774:	b1 01       	movw	r22, r2
    1776:	03 2c       	mov	r0, r3
    1778:	00 0c       	add	r0, r0
    177a:	88 0b       	sbc	r24, r24
    177c:	99 0b       	sbc	r25, r25
    177e:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatsisf>
    1782:	2b 01       	movw	r4, r22
    1784:	3c 01       	movw	r6, r24
			float total = arraySize;
    1786:	b6 01       	movw	r22, r12
    1788:	0d 2c       	mov	r0, r13
    178a:	00 0c       	add	r0, r0
    178c:	88 0b       	sbc	r24, r24
    178e:	99 0b       	sbc	r25, r25
    1790:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatsisf>
    1794:	4b 01       	movw	r8, r22
    1796:	5c 01       	movw	r10, r24
			
			moveX(orderX[locations], &robot, myCom);
    1798:	0f 2e       	mov	r0, r31
    179a:	f6 e0       	ldi	r31, 0x06	; 6
    179c:	ef 2e       	mov	r14, r31
    179e:	f1 2c       	mov	r15, r1
    17a0:	f0 2d       	mov	r31, r0
    17a2:	ec 0e       	add	r14, r28
    17a4:	fd 1e       	adc	r15, r29
    17a6:	e2 0c       	add	r14, r2
    17a8:	f3 1c       	adc	r15, r3
    17aa:	f7 01       	movw	r30, r14
    17ac:	80 81       	ld	r24, Z
    17ae:	a8 01       	movw	r20, r16
    17b0:	be 01       	movw	r22, r28
    17b2:	6f 5f       	subi	r22, 0xFF	; 255
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <moveX>
			robot.posX = orderX[locations];
    17bc:	f7 01       	movw	r30, r14
    17be:	80 81       	ld	r24, Z
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3a 83       	std	Y+2, r19	; 0x02
    17c6:	29 83       	std	Y+1, r18	; 0x01
			myCom->locationx = robot.posX;
    17c8:	f8 01       	movw	r30, r16
    17ca:	e2 59       	subi	r30, 0x92	; 146
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 83       	st	Z, r24
			moveY(orderY[locations], &robot, myCom);
    17d0:	0f 2e       	mov	r0, r31
    17d2:	ff e1       	ldi	r31, 0x1F	; 31
    17d4:	ef 2e       	mov	r14, r31
    17d6:	f1 2c       	mov	r15, r1
    17d8:	f0 2d       	mov	r31, r0
    17da:	ec 0e       	add	r14, r28
    17dc:	fd 1e       	adc	r15, r29
    17de:	e2 0c       	add	r14, r2
    17e0:	f3 1c       	adc	r15, r3
    17e2:	f7 01       	movw	r30, r14
    17e4:	80 81       	ld	r24, Z
    17e6:	a8 01       	movw	r20, r16
    17e8:	be 01       	movw	r22, r28
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 24 0b 	call	0x1648	; 0x1648 <moveY>
			robot.posY = orderY[locations];
    17f4:	f7 01       	movw	r30, r14
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	3c 83       	std	Y+4, r19	; 0x04
    17fe:	2b 83       	std	Y+3, r18	; 0x03
			myCom->locationy = robot.posY;
    1800:	f8 01       	movw	r30, r16
    1802:	e1 59       	subi	r30, 0x91	; 145
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 83       	st	Z, r24
    1808:	88 ee       	ldi	r24, 0xE8	; 232
    180a:	93 e0       	ldi	r25, 0x03	; 3
    180c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
			delay(1000);//wait 1 second
			
			myCom->batterylvl = batteryPercentage();
    1810:	0e 94 f5 02 	call	0x5ea	; 0x5ea <batteryPercentage>
    1814:	78 01       	movw	r14, r16
    1816:	fc e6       	ldi	r31, 0x6C	; 108
    1818:	ef 0e       	add	r14, r31
    181a:	f1 1c       	adc	r15, r1
    181c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fixunssfsi>
    1820:	f7 01       	movw	r30, r14
    1822:	60 83       	st	Z, r22
			myCom->magprocess = (((completed+1)/total)*100);
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e8       	ldi	r20, 0x80	; 128
    182a:	5f e3       	ldi	r21, 0x3F	; 63
    182c:	c3 01       	movw	r24, r6
    182e:	b2 01       	movw	r22, r4
    1830:	0e 94 bd 0c 	call	0x197a	; 0x197a <__addsf3>
    1834:	a5 01       	movw	r20, r10
    1836:	94 01       	movw	r18, r8
    1838:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__divsf3>
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	48 ec       	ldi	r20, 0xC8	; 200
    1842:	52 e4       	ldi	r21, 0x42	; 66
    1844:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <__mulsf3>
    1848:	4b 01       	movw	r8, r22
    184a:	5c 01       	movw	r10, r24
    184c:	78 01       	movw	r14, r16
    184e:	fd e6       	ldi	r31, 0x6D	; 109
    1850:	ef 0e       	add	r14, r31
    1852:	f1 1c       	adc	r15, r1
    1854:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fixunssfsi>
    1858:	f7 01       	movw	r30, r14
    185a:	60 83       	st	Z, r22
			myCom->Update(myCom);
    185c:	34 96       	adiw	r30, 0x04	; 4
    185e:	01 90       	ld	r0, Z+
    1860:	f0 81       	ld	r31, Z
    1862:	e0 2d       	mov	r30, r0
    1864:	c8 01       	movw	r24, r16
    1866:	09 95       	icall
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
    1868:	0e 94 f5 02 	call	0x5ea	; 0x5ea <batteryPercentage>
    186c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
    1870:	2b 01       	movw	r4, r22
    1872:	3c 01       	movw	r6, r24
    1874:	c5 01       	movw	r24, r10
    1876:	b4 01       	movw	r22, r8
    1878:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__fixsfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	42 e0       	ldi	r20, 0x02	; 2
    1882:	b2 01       	movw	r22, r4
    1884:	0e 94 17 03 	call	0x62e	; 0x62e <updateDisplay>

    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
	{
		for(int locations = 0; locations<arraySize;locations++)
    1888:	ff ef       	ldi	r31, 0xFF	; 255
    188a:	2f 1a       	sub	r2, r31
    188c:	3f 0a       	sbc	r3, r31
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <warehouse+0x1f0>
    1890:	21 2c       	mov	r2, r1
    1892:	31 2c       	mov	r3, r1
    1894:	2c 14       	cp	r2, r12
    1896:	3d 04       	cpc	r3, r13
    1898:	0c f4       	brge	.+2      	; 0x189c <warehouse+0x1f8>
    189a:	6c cf       	rjmp	.-296    	; 0x1774 <warehouse+0xd0>
			myCom->batterylvl = batteryPercentage();
			myCom->magprocess = (((completed+1)/total)*100);
			myCom->Update(myCom);
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
		}
		moveY(1, &robot, myCom);
    189c:	a8 01       	movw	r20, r16
    189e:	be 01       	movw	r22, r28
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 24 0b 	call	0x1648	; 0x1648 <moveY>
			moveX(1, &robot, myCom);
    18ac:	a8 01       	movw	r20, r16
    18ae:	be 01       	movw	r22, r28
    18b0:	6f 5f       	subi	r22, 0xFF	; 255
    18b2:	7f 4f       	sbci	r23, 0xFF	; 255
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <moveX>
    18bc:	44 c0       	rjmp	.+136    	; 0x1946 <warehouse+0x2a2>
			
	}
	else
	{
		static int charged = 0;
		if(charged == 0)
    18be:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <charged.2338>
    18c2:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <charged.2338+0x1>
    18c6:	89 2b       	or	r24, r25
    18c8:	29 f5       	brne	.+74     	; 0x1914 <warehouse+0x270>
		{
			drive(1, &robot, myCom);
    18ca:	a8 01       	movw	r20, r16
    18cc:	be 01       	movw	r22, r28
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <drive>
			motorControl('R');
    18da:	82 e5       	ldi	r24, 0x52	; 82
    18dc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
			drive(3, &robot, myCom);
    18e0:	a8 01       	movw	r20, r16
    18e2:	be 01       	movw	r22, r28
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	83 e0       	ldi	r24, 0x03	; 3
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <drive>
			motorControl('R');
    18f0:	82 e5       	ldi	r24, 0x52	; 82
    18f2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
			drive(1, &robot, myCom);
    18f6:	a8 01       	movw	r20, r16
    18f8:	be 01       	movw	r22, r28
    18fa:	6f 5f       	subi	r22, 0xFF	; 255
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <drive>
			charged = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <charged.2338+0x1>
    190e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <charged.2338>
    1912:	19 c0       	rjmp	.+50     	; 0x1946 <warehouse+0x2a2>
		}
		else
		{
			motorControl('T');
    1914:	84 e5       	ldi	r24, 0x54	; 84
    1916:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
			drive(1, &robot, myCom);
    191a:	a8 01       	movw	r20, r16
    191c:	be 01       	movw	r22, r28
    191e:	6f 5f       	subi	r22, 0xFF	; 255
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <drive>
			motorControl('L');
    192a:	8c e4       	ldi	r24, 0x4C	; 76
    192c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
			drive(3, &robot, myCom);
    1930:	a8 01       	movw	r20, r16
    1932:	be 01       	movw	r22, r28
    1934:	6f 5f       	subi	r22, 0xFF	; 255
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <drive>
			motorControl('L');
    1940:	8c e4       	ldi	r24, 0x4C	; 76
    1942:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <motorControl>
			
		}
		
	}
}
    1946:	e7 96       	adiw	r28, 0x37	; 55
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	9f 90       	pop	r9
    1968:	8f 90       	pop	r8
    196a:	7f 90       	pop	r7
    196c:	6f 90       	pop	r6
    196e:	5f 90       	pop	r5
    1970:	4f 90       	pop	r4
    1972:	3f 90       	pop	r3
    1974:	2f 90       	pop	r2
    1976:	08 95       	ret

00001978 <__subsf3>:
    1978:	50 58       	subi	r21, 0x80	; 128

0000197a <__addsf3>:
    197a:	bb 27       	eor	r27, r27
    197c:	aa 27       	eor	r26, r26
    197e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__addsf3x>
    1982:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__fp_round>
    1986:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_pscA>
    198a:	38 f0       	brcs	.+14     	; 0x199a <__addsf3+0x20>
    198c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fp_pscB>
    1990:	20 f0       	brcs	.+8      	; 0x199a <__addsf3+0x20>
    1992:	39 f4       	brne	.+14     	; 0x19a2 <__addsf3+0x28>
    1994:	9f 3f       	cpi	r25, 0xFF	; 255
    1996:	19 f4       	brne	.+6      	; 0x199e <__addsf3+0x24>
    1998:	26 f4       	brtc	.+8      	; 0x19a2 <__addsf3+0x28>
    199a:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_nan>
    199e:	0e f4       	brtc	.+2      	; 0x19a2 <__addsf3+0x28>
    19a0:	e0 95       	com	r30
    19a2:	e7 fb       	bst	r30, 7
    19a4:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>

000019a8 <__addsf3x>:
    19a8:	e9 2f       	mov	r30, r25
    19aa:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_split3>
    19ae:	58 f3       	brcs	.-42     	; 0x1986 <__addsf3+0xc>
    19b0:	ba 17       	cp	r27, r26
    19b2:	62 07       	cpc	r22, r18
    19b4:	73 07       	cpc	r23, r19
    19b6:	84 07       	cpc	r24, r20
    19b8:	95 07       	cpc	r25, r21
    19ba:	20 f0       	brcs	.+8      	; 0x19c4 <__addsf3x+0x1c>
    19bc:	79 f4       	brne	.+30     	; 0x19dc <__addsf3x+0x34>
    19be:	a6 f5       	brtc	.+104    	; 0x1a28 <__addsf3x+0x80>
    19c0:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__fp_zero>
    19c4:	0e f4       	brtc	.+2      	; 0x19c8 <__addsf3x+0x20>
    19c6:	e0 95       	com	r30
    19c8:	0b 2e       	mov	r0, r27
    19ca:	ba 2f       	mov	r27, r26
    19cc:	a0 2d       	mov	r26, r0
    19ce:	0b 01       	movw	r0, r22
    19d0:	b9 01       	movw	r22, r18
    19d2:	90 01       	movw	r18, r0
    19d4:	0c 01       	movw	r0, r24
    19d6:	ca 01       	movw	r24, r20
    19d8:	a0 01       	movw	r20, r0
    19da:	11 24       	eor	r1, r1
    19dc:	ff 27       	eor	r31, r31
    19de:	59 1b       	sub	r21, r25
    19e0:	99 f0       	breq	.+38     	; 0x1a08 <__addsf3x+0x60>
    19e2:	59 3f       	cpi	r21, 0xF9	; 249
    19e4:	50 f4       	brcc	.+20     	; 0x19fa <__addsf3x+0x52>
    19e6:	50 3e       	cpi	r21, 0xE0	; 224
    19e8:	68 f1       	brcs	.+90     	; 0x1a44 <__addsf3x+0x9c>
    19ea:	1a 16       	cp	r1, r26
    19ec:	f0 40       	sbci	r31, 0x00	; 0
    19ee:	a2 2f       	mov	r26, r18
    19f0:	23 2f       	mov	r18, r19
    19f2:	34 2f       	mov	r19, r20
    19f4:	44 27       	eor	r20, r20
    19f6:	58 5f       	subi	r21, 0xF8	; 248
    19f8:	f3 cf       	rjmp	.-26     	; 0x19e0 <__addsf3x+0x38>
    19fa:	46 95       	lsr	r20
    19fc:	37 95       	ror	r19
    19fe:	27 95       	ror	r18
    1a00:	a7 95       	ror	r26
    1a02:	f0 40       	sbci	r31, 0x00	; 0
    1a04:	53 95       	inc	r21
    1a06:	c9 f7       	brne	.-14     	; 0x19fa <__addsf3x+0x52>
    1a08:	7e f4       	brtc	.+30     	; 0x1a28 <__addsf3x+0x80>
    1a0a:	1f 16       	cp	r1, r31
    1a0c:	ba 0b       	sbc	r27, r26
    1a0e:	62 0b       	sbc	r22, r18
    1a10:	73 0b       	sbc	r23, r19
    1a12:	84 0b       	sbc	r24, r20
    1a14:	ba f0       	brmi	.+46     	; 0x1a44 <__addsf3x+0x9c>
    1a16:	91 50       	subi	r25, 0x01	; 1
    1a18:	a1 f0       	breq	.+40     	; 0x1a42 <__addsf3x+0x9a>
    1a1a:	ff 0f       	add	r31, r31
    1a1c:	bb 1f       	adc	r27, r27
    1a1e:	66 1f       	adc	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	c2 f7       	brpl	.-16     	; 0x1a16 <__addsf3x+0x6e>
    1a26:	0e c0       	rjmp	.+28     	; 0x1a44 <__addsf3x+0x9c>
    1a28:	ba 0f       	add	r27, r26
    1a2a:	62 1f       	adc	r22, r18
    1a2c:	73 1f       	adc	r23, r19
    1a2e:	84 1f       	adc	r24, r20
    1a30:	48 f4       	brcc	.+18     	; 0x1a44 <__addsf3x+0x9c>
    1a32:	87 95       	ror	r24
    1a34:	77 95       	ror	r23
    1a36:	67 95       	ror	r22
    1a38:	b7 95       	ror	r27
    1a3a:	f7 95       	ror	r31
    1a3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <__addsf3x+0x9a>
    1a40:	b0 cf       	rjmp	.-160    	; 0x19a2 <__addsf3+0x28>
    1a42:	93 95       	inc	r25
    1a44:	88 0f       	add	r24, r24
    1a46:	08 f0       	brcs	.+2      	; 0x1a4a <__addsf3x+0xa2>
    1a48:	99 27       	eor	r25, r25
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	97 95       	ror	r25
    1a4e:	87 95       	ror	r24
    1a50:	08 95       	ret

00001a52 <__divsf3>:
    1a52:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <__divsf3x>
    1a56:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__fp_round>
    1a5a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fp_pscB>
    1a5e:	58 f0       	brcs	.+22     	; 0x1a76 <__divsf3+0x24>
    1a60:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_pscA>
    1a64:	40 f0       	brcs	.+16     	; 0x1a76 <__divsf3+0x24>
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <__divsf3+0x20>
    1a68:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6a:	29 f0       	breq	.+10     	; 0x1a76 <__divsf3+0x24>
    1a6c:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>
    1a70:	51 11       	cpse	r21, r1
    1a72:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_szero>
    1a76:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_nan>

00001a7a <__divsf3x>:
    1a7a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_split3>
    1a7e:	68 f3       	brcs	.-38     	; 0x1a5a <__divsf3+0x8>

00001a80 <__divsf3_pse>:
    1a80:	99 23       	and	r25, r25
    1a82:	b1 f3       	breq	.-20     	; 0x1a70 <__divsf3+0x1e>
    1a84:	55 23       	and	r21, r21
    1a86:	91 f3       	breq	.-28     	; 0x1a6c <__divsf3+0x1a>
    1a88:	95 1b       	sub	r25, r21
    1a8a:	55 0b       	sbc	r21, r21
    1a8c:	bb 27       	eor	r27, r27
    1a8e:	aa 27       	eor	r26, r26
    1a90:	62 17       	cp	r22, r18
    1a92:	73 07       	cpc	r23, r19
    1a94:	84 07       	cpc	r24, r20
    1a96:	38 f0       	brcs	.+14     	; 0x1aa6 <__divsf3_pse+0x26>
    1a98:	9f 5f       	subi	r25, 0xFF	; 255
    1a9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	44 1f       	adc	r20, r20
    1aa2:	aa 1f       	adc	r26, r26
    1aa4:	a9 f3       	breq	.-22     	; 0x1a90 <__divsf3_pse+0x10>
    1aa6:	35 d0       	rcall	.+106    	; 0x1b12 <__divsf3_pse+0x92>
    1aa8:	0e 2e       	mov	r0, r30
    1aaa:	3a f0       	brmi	.+14     	; 0x1aba <__divsf3_pse+0x3a>
    1aac:	e0 e8       	ldi	r30, 0x80	; 128
    1aae:	32 d0       	rcall	.+100    	; 0x1b14 <__divsf3_pse+0x94>
    1ab0:	91 50       	subi	r25, 0x01	; 1
    1ab2:	50 40       	sbci	r21, 0x00	; 0
    1ab4:	e6 95       	lsr	r30
    1ab6:	00 1c       	adc	r0, r0
    1ab8:	ca f7       	brpl	.-14     	; 0x1aac <__divsf3_pse+0x2c>
    1aba:	2b d0       	rcall	.+86     	; 0x1b12 <__divsf3_pse+0x92>
    1abc:	fe 2f       	mov	r31, r30
    1abe:	29 d0       	rcall	.+82     	; 0x1b12 <__divsf3_pse+0x92>
    1ac0:	66 0f       	add	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	bb 1f       	adc	r27, r27
    1ac8:	26 17       	cp	r18, r22
    1aca:	37 07       	cpc	r19, r23
    1acc:	48 07       	cpc	r20, r24
    1ace:	ab 07       	cpc	r26, r27
    1ad0:	b0 e8       	ldi	r27, 0x80	; 128
    1ad2:	09 f0       	breq	.+2      	; 0x1ad6 <__divsf3_pse+0x56>
    1ad4:	bb 0b       	sbc	r27, r27
    1ad6:	80 2d       	mov	r24, r0
    1ad8:	bf 01       	movw	r22, r30
    1ada:	ff 27       	eor	r31, r31
    1adc:	93 58       	subi	r25, 0x83	; 131
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae0:	3a f0       	brmi	.+14     	; 0x1af0 <__divsf3_pse+0x70>
    1ae2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	78 f0       	brcs	.+30     	; 0x1b06 <__divsf3_pse+0x86>
    1ae8:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>
    1aec:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_szero>
    1af0:	5f 3f       	cpi	r21, 0xFF	; 255
    1af2:	e4 f3       	brlt	.-8      	; 0x1aec <__divsf3_pse+0x6c>
    1af4:	98 3e       	cpi	r25, 0xE8	; 232
    1af6:	d4 f3       	brlt	.-12     	; 0x1aec <__divsf3_pse+0x6c>
    1af8:	86 95       	lsr	r24
    1afa:	77 95       	ror	r23
    1afc:	67 95       	ror	r22
    1afe:	b7 95       	ror	r27
    1b00:	f7 95       	ror	r31
    1b02:	9f 5f       	subi	r25, 0xFF	; 255
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <__divsf3_pse+0x78>
    1b06:	88 0f       	add	r24, r24
    1b08:	91 1d       	adc	r25, r1
    1b0a:	96 95       	lsr	r25
    1b0c:	87 95       	ror	r24
    1b0e:	97 f9       	bld	r25, 7
    1b10:	08 95       	ret
    1b12:	e1 e0       	ldi	r30, 0x01	; 1
    1b14:	66 0f       	add	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	bb 1f       	adc	r27, r27
    1b1c:	62 17       	cp	r22, r18
    1b1e:	73 07       	cpc	r23, r19
    1b20:	84 07       	cpc	r24, r20
    1b22:	ba 07       	cpc	r27, r26
    1b24:	20 f0       	brcs	.+8      	; 0x1b2e <__divsf3_pse+0xae>
    1b26:	62 1b       	sub	r22, r18
    1b28:	73 0b       	sbc	r23, r19
    1b2a:	84 0b       	sbc	r24, r20
    1b2c:	ba 0b       	sbc	r27, r26
    1b2e:	ee 1f       	adc	r30, r30
    1b30:	88 f7       	brcc	.-30     	; 0x1b14 <__divsf3_pse+0x94>
    1b32:	e0 95       	com	r30
    1b34:	08 95       	ret

00001b36 <__fixsfsi>:
    1b36:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fixunssfsi>
    1b3a:	68 94       	set
    1b3c:	b1 11       	cpse	r27, r1
    1b3e:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_szero>
    1b42:	08 95       	ret

00001b44 <__fixunssfsi>:
    1b44:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_splitA>
    1b48:	88 f0       	brcs	.+34     	; 0x1b6c <__fixunssfsi+0x28>
    1b4a:	9f 57       	subi	r25, 0x7F	; 127
    1b4c:	98 f0       	brcs	.+38     	; 0x1b74 <__fixunssfsi+0x30>
    1b4e:	b9 2f       	mov	r27, r25
    1b50:	99 27       	eor	r25, r25
    1b52:	b7 51       	subi	r27, 0x17	; 23
    1b54:	b0 f0       	brcs	.+44     	; 0x1b82 <__fixunssfsi+0x3e>
    1b56:	e1 f0       	breq	.+56     	; 0x1b90 <__fixunssfsi+0x4c>
    1b58:	66 0f       	add	r22, r22
    1b5a:	77 1f       	adc	r23, r23
    1b5c:	88 1f       	adc	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	1a f0       	brmi	.+6      	; 0x1b68 <__fixunssfsi+0x24>
    1b62:	ba 95       	dec	r27
    1b64:	c9 f7       	brne	.-14     	; 0x1b58 <__fixunssfsi+0x14>
    1b66:	14 c0       	rjmp	.+40     	; 0x1b90 <__fixunssfsi+0x4c>
    1b68:	b1 30       	cpi	r27, 0x01	; 1
    1b6a:	91 f0       	breq	.+36     	; 0x1b90 <__fixunssfsi+0x4c>
    1b6c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <__fp_zero>
    1b70:	b1 e0       	ldi	r27, 0x01	; 1
    1b72:	08 95       	ret
    1b74:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__fp_zero>
    1b78:	67 2f       	mov	r22, r23
    1b7a:	78 2f       	mov	r23, r24
    1b7c:	88 27       	eor	r24, r24
    1b7e:	b8 5f       	subi	r27, 0xF8	; 248
    1b80:	39 f0       	breq	.+14     	; 0x1b90 <__fixunssfsi+0x4c>
    1b82:	b9 3f       	cpi	r27, 0xF9	; 249
    1b84:	cc f3       	brlt	.-14     	; 0x1b78 <__fixunssfsi+0x34>
    1b86:	86 95       	lsr	r24
    1b88:	77 95       	ror	r23
    1b8a:	67 95       	ror	r22
    1b8c:	b3 95       	inc	r27
    1b8e:	d9 f7       	brne	.-10     	; 0x1b86 <__fixunssfsi+0x42>
    1b90:	3e f4       	brtc	.+14     	; 0x1ba0 <__fixunssfsi+0x5c>
    1b92:	90 95       	com	r25
    1b94:	80 95       	com	r24
    1b96:	70 95       	com	r23
    1b98:	61 95       	neg	r22
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	08 95       	ret

00001ba2 <__floatunsisf>:
    1ba2:	e8 94       	clt
    1ba4:	09 c0       	rjmp	.+18     	; 0x1bb8 <__floatsisf+0x12>

00001ba6 <__floatsisf>:
    1ba6:	97 fb       	bst	r25, 7
    1ba8:	3e f4       	brtc	.+14     	; 0x1bb8 <__floatsisf+0x12>
    1baa:	90 95       	com	r25
    1bac:	80 95       	com	r24
    1bae:	70 95       	com	r23
    1bb0:	61 95       	neg	r22
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	99 23       	and	r25, r25
    1bba:	a9 f0       	breq	.+42     	; 0x1be6 <__floatsisf+0x40>
    1bbc:	f9 2f       	mov	r31, r25
    1bbe:	96 e9       	ldi	r25, 0x96	; 150
    1bc0:	bb 27       	eor	r27, r27
    1bc2:	93 95       	inc	r25
    1bc4:	f6 95       	lsr	r31
    1bc6:	87 95       	ror	r24
    1bc8:	77 95       	ror	r23
    1bca:	67 95       	ror	r22
    1bcc:	b7 95       	ror	r27
    1bce:	f1 11       	cpse	r31, r1
    1bd0:	f8 cf       	rjmp	.-16     	; 0x1bc2 <__floatsisf+0x1c>
    1bd2:	fa f4       	brpl	.+62     	; 0x1c12 <__floatsisf+0x6c>
    1bd4:	bb 0f       	add	r27, r27
    1bd6:	11 f4       	brne	.+4      	; 0x1bdc <__floatsisf+0x36>
    1bd8:	60 ff       	sbrs	r22, 0
    1bda:	1b c0       	rjmp	.+54     	; 0x1c12 <__floatsisf+0x6c>
    1bdc:	6f 5f       	subi	r22, 0xFF	; 255
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	8f 4f       	sbci	r24, 0xFF	; 255
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	16 c0       	rjmp	.+44     	; 0x1c12 <__floatsisf+0x6c>
    1be6:	88 23       	and	r24, r24
    1be8:	11 f0       	breq	.+4      	; 0x1bee <__floatsisf+0x48>
    1bea:	96 e9       	ldi	r25, 0x96	; 150
    1bec:	11 c0       	rjmp	.+34     	; 0x1c10 <__floatsisf+0x6a>
    1bee:	77 23       	and	r23, r23
    1bf0:	21 f0       	breq	.+8      	; 0x1bfa <__floatsisf+0x54>
    1bf2:	9e e8       	ldi	r25, 0x8E	; 142
    1bf4:	87 2f       	mov	r24, r23
    1bf6:	76 2f       	mov	r23, r22
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <__floatsisf+0x5e>
    1bfa:	66 23       	and	r22, r22
    1bfc:	71 f0       	breq	.+28     	; 0x1c1a <__floatsisf+0x74>
    1bfe:	96 e8       	ldi	r25, 0x86	; 134
    1c00:	86 2f       	mov	r24, r22
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	2a f0       	brmi	.+10     	; 0x1c12 <__floatsisf+0x6c>
    1c08:	9a 95       	dec	r25
    1c0a:	66 0f       	add	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	88 1f       	adc	r24, r24
    1c10:	da f7       	brpl	.-10     	; 0x1c08 <__floatsisf+0x62>
    1c12:	88 0f       	add	r24, r24
    1c14:	96 95       	lsr	r25
    1c16:	87 95       	ror	r24
    1c18:	97 f9       	bld	r25, 7
    1c1a:	08 95       	ret

00001c1c <__fp_inf>:
    1c1c:	97 f9       	bld	r25, 7
    1c1e:	9f 67       	ori	r25, 0x7F	; 127
    1c20:	80 e8       	ldi	r24, 0x80	; 128
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	08 95       	ret

00001c28 <__fp_nan>:
    1c28:	9f ef       	ldi	r25, 0xFF	; 255
    1c2a:	80 ec       	ldi	r24, 0xC0	; 192
    1c2c:	08 95       	ret

00001c2e <__fp_pscA>:
    1c2e:	00 24       	eor	r0, r0
    1c30:	0a 94       	dec	r0
    1c32:	16 16       	cp	r1, r22
    1c34:	17 06       	cpc	r1, r23
    1c36:	18 06       	cpc	r1, r24
    1c38:	09 06       	cpc	r0, r25
    1c3a:	08 95       	ret

00001c3c <__fp_pscB>:
    1c3c:	00 24       	eor	r0, r0
    1c3e:	0a 94       	dec	r0
    1c40:	12 16       	cp	r1, r18
    1c42:	13 06       	cpc	r1, r19
    1c44:	14 06       	cpc	r1, r20
    1c46:	05 06       	cpc	r0, r21
    1c48:	08 95       	ret

00001c4a <__fp_round>:
    1c4a:	09 2e       	mov	r0, r25
    1c4c:	03 94       	inc	r0
    1c4e:	00 0c       	add	r0, r0
    1c50:	11 f4       	brne	.+4      	; 0x1c56 <__fp_round+0xc>
    1c52:	88 23       	and	r24, r24
    1c54:	52 f0       	brmi	.+20     	; 0x1c6a <__fp_round+0x20>
    1c56:	bb 0f       	add	r27, r27
    1c58:	40 f4       	brcc	.+16     	; 0x1c6a <__fp_round+0x20>
    1c5a:	bf 2b       	or	r27, r31
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <__fp_round+0x18>
    1c5e:	60 ff       	sbrs	r22, 0
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <__fp_round+0x20>
    1c62:	6f 5f       	subi	r22, 0xFF	; 255
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	8f 4f       	sbci	r24, 0xFF	; 255
    1c68:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6a:	08 95       	ret

00001c6c <__fp_split3>:
    1c6c:	57 fd       	sbrc	r21, 7
    1c6e:	90 58       	subi	r25, 0x80	; 128
    1c70:	44 0f       	add	r20, r20
    1c72:	55 1f       	adc	r21, r21
    1c74:	59 f0       	breq	.+22     	; 0x1c8c <__fp_splitA+0x10>
    1c76:	5f 3f       	cpi	r21, 0xFF	; 255
    1c78:	71 f0       	breq	.+28     	; 0x1c96 <__fp_splitA+0x1a>
    1c7a:	47 95       	ror	r20

00001c7c <__fp_splitA>:
    1c7c:	88 0f       	add	r24, r24
    1c7e:	97 fb       	bst	r25, 7
    1c80:	99 1f       	adc	r25, r25
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <__fp_splitA+0x20>
    1c84:	9f 3f       	cpi	r25, 0xFF	; 255
    1c86:	79 f0       	breq	.+30     	; 0x1ca6 <__fp_splitA+0x2a>
    1c88:	87 95       	ror	r24
    1c8a:	08 95       	ret
    1c8c:	12 16       	cp	r1, r18
    1c8e:	13 06       	cpc	r1, r19
    1c90:	14 06       	cpc	r1, r20
    1c92:	55 1f       	adc	r21, r21
    1c94:	f2 cf       	rjmp	.-28     	; 0x1c7a <__fp_split3+0xe>
    1c96:	46 95       	lsr	r20
    1c98:	f1 df       	rcall	.-30     	; 0x1c7c <__fp_splitA>
    1c9a:	08 c0       	rjmp	.+16     	; 0x1cac <__fp_splitA+0x30>
    1c9c:	16 16       	cp	r1, r22
    1c9e:	17 06       	cpc	r1, r23
    1ca0:	18 06       	cpc	r1, r24
    1ca2:	99 1f       	adc	r25, r25
    1ca4:	f1 cf       	rjmp	.-30     	; 0x1c88 <__fp_splitA+0xc>
    1ca6:	86 95       	lsr	r24
    1ca8:	71 05       	cpc	r23, r1
    1caa:	61 05       	cpc	r22, r1
    1cac:	08 94       	sec
    1cae:	08 95       	ret

00001cb0 <__fp_zero>:
    1cb0:	e8 94       	clt

00001cb2 <__fp_szero>:
    1cb2:	bb 27       	eor	r27, r27
    1cb4:	66 27       	eor	r22, r22
    1cb6:	77 27       	eor	r23, r23
    1cb8:	cb 01       	movw	r24, r22
    1cba:	97 f9       	bld	r25, 7
    1cbc:	08 95       	ret

00001cbe <__mulsf3>:
    1cbe:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <__mulsf3x>
    1cc2:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__fp_round>
    1cc6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__fp_pscA>
    1cca:	38 f0       	brcs	.+14     	; 0x1cda <__mulsf3+0x1c>
    1ccc:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__fp_pscB>
    1cd0:	20 f0       	brcs	.+8      	; 0x1cda <__mulsf3+0x1c>
    1cd2:	95 23       	and	r25, r21
    1cd4:	11 f0       	breq	.+4      	; 0x1cda <__mulsf3+0x1c>
    1cd6:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>
    1cda:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__fp_nan>
    1cde:	11 24       	eor	r1, r1
    1ce0:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_szero>

00001ce4 <__mulsf3x>:
    1ce4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <__fp_split3>
    1ce8:	70 f3       	brcs	.-36     	; 0x1cc6 <__mulsf3+0x8>

00001cea <__mulsf3_pse>:
    1cea:	95 9f       	mul	r25, r21
    1cec:	c1 f3       	breq	.-16     	; 0x1cde <__mulsf3+0x20>
    1cee:	95 0f       	add	r25, r21
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	55 1f       	adc	r21, r21
    1cf4:	62 9f       	mul	r22, r18
    1cf6:	f0 01       	movw	r30, r0
    1cf8:	72 9f       	mul	r23, r18
    1cfa:	bb 27       	eor	r27, r27
    1cfc:	f0 0d       	add	r31, r0
    1cfe:	b1 1d       	adc	r27, r1
    1d00:	63 9f       	mul	r22, r19
    1d02:	aa 27       	eor	r26, r26
    1d04:	f0 0d       	add	r31, r0
    1d06:	b1 1d       	adc	r27, r1
    1d08:	aa 1f       	adc	r26, r26
    1d0a:	64 9f       	mul	r22, r20
    1d0c:	66 27       	eor	r22, r22
    1d0e:	b0 0d       	add	r27, r0
    1d10:	a1 1d       	adc	r26, r1
    1d12:	66 1f       	adc	r22, r22
    1d14:	82 9f       	mul	r24, r18
    1d16:	22 27       	eor	r18, r18
    1d18:	b0 0d       	add	r27, r0
    1d1a:	a1 1d       	adc	r26, r1
    1d1c:	62 1f       	adc	r22, r18
    1d1e:	73 9f       	mul	r23, r19
    1d20:	b0 0d       	add	r27, r0
    1d22:	a1 1d       	adc	r26, r1
    1d24:	62 1f       	adc	r22, r18
    1d26:	83 9f       	mul	r24, r19
    1d28:	a0 0d       	add	r26, r0
    1d2a:	61 1d       	adc	r22, r1
    1d2c:	22 1f       	adc	r18, r18
    1d2e:	74 9f       	mul	r23, r20
    1d30:	33 27       	eor	r19, r19
    1d32:	a0 0d       	add	r26, r0
    1d34:	61 1d       	adc	r22, r1
    1d36:	23 1f       	adc	r18, r19
    1d38:	84 9f       	mul	r24, r20
    1d3a:	60 0d       	add	r22, r0
    1d3c:	21 1d       	adc	r18, r1
    1d3e:	82 2f       	mov	r24, r18
    1d40:	76 2f       	mov	r23, r22
    1d42:	6a 2f       	mov	r22, r26
    1d44:	11 24       	eor	r1, r1
    1d46:	9f 57       	subi	r25, 0x7F	; 127
    1d48:	50 40       	sbci	r21, 0x00	; 0
    1d4a:	9a f0       	brmi	.+38     	; 0x1d72 <__mulsf3_pse+0x88>
    1d4c:	f1 f0       	breq	.+60     	; 0x1d8a <__mulsf3_pse+0xa0>
    1d4e:	88 23       	and	r24, r24
    1d50:	4a f0       	brmi	.+18     	; 0x1d64 <__mulsf3_pse+0x7a>
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	bb 1f       	adc	r27, r27
    1d58:	66 1f       	adc	r22, r22
    1d5a:	77 1f       	adc	r23, r23
    1d5c:	88 1f       	adc	r24, r24
    1d5e:	91 50       	subi	r25, 0x01	; 1
    1d60:	50 40       	sbci	r21, 0x00	; 0
    1d62:	a9 f7       	brne	.-22     	; 0x1d4e <__mulsf3_pse+0x64>
    1d64:	9e 3f       	cpi	r25, 0xFE	; 254
    1d66:	51 05       	cpc	r21, r1
    1d68:	80 f0       	brcs	.+32     	; 0x1d8a <__mulsf3_pse+0xa0>
    1d6a:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__fp_inf>
    1d6e:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_szero>
    1d72:	5f 3f       	cpi	r21, 0xFF	; 255
    1d74:	e4 f3       	brlt	.-8      	; 0x1d6e <__mulsf3_pse+0x84>
    1d76:	98 3e       	cpi	r25, 0xE8	; 232
    1d78:	d4 f3       	brlt	.-12     	; 0x1d6e <__mulsf3_pse+0x84>
    1d7a:	86 95       	lsr	r24
    1d7c:	77 95       	ror	r23
    1d7e:	67 95       	ror	r22
    1d80:	b7 95       	ror	r27
    1d82:	f7 95       	ror	r31
    1d84:	e7 95       	ror	r30
    1d86:	9f 5f       	subi	r25, 0xFF	; 255
    1d88:	c1 f7       	brne	.-16     	; 0x1d7a <__mulsf3_pse+0x90>
    1d8a:	fe 2b       	or	r31, r30
    1d8c:	88 0f       	add	r24, r24
    1d8e:	91 1d       	adc	r25, r1
    1d90:	96 95       	lsr	r25
    1d92:	87 95       	ror	r24
    1d94:	97 f9       	bld	r25, 7
    1d96:	08 95       	ret

00001d98 <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1d98:	ec e7       	ldi	r30, 0x7C	; 124
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8f 7d       	andi	r24, 0xDF	; 223
    1da0:	80 83       	st	Z, r24
    1da2:	08 95       	ret

00001da4 <_ZN15OrangutanAnalog7setModeEh>:
    1da4:	81 11       	cpse	r24, r1
    1da6:	03 c0       	rjmp	.+6      	; 0x1dae <_ZN15OrangutanAnalog7setModeEh+0xa>
    1da8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1dac:	08 95       	ret
    1dae:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1db2:	80 62       	ori	r24, 0x20	; 32
    1db4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1db8:	08 95       	ret

00001dba <_ZN15OrangutanAnalog7getModeEv>:
    1dba:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1dbe:	85 fb       	bst	r24, 5
    1dc0:	88 27       	eor	r24, r24
    1dc2:	80 f9       	bld	r24, 0
    1dc4:	08 95       	ret

00001dc6 <_ZN15OrangutanAnalog16conversionResultEv>:
    1dc6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <_ZN15OrangutanAnalog7getModeEv>
    1dca:	88 23       	and	r24, r24
    1dcc:	21 f0       	breq	.+8      	; 0x1dd6 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1dce:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	08 95       	ret
    1dd6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1dda:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1dde:	08 95       	ret

00001de0 <_ZN15OrangutanAnalog15startConversionEhh>:
    1de0:	80 32       	cpi	r24, 0x20	; 32
    1de2:	a0 f4       	brcc	.+40     	; 0x1e0c <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1de4:	97 e8       	ldi	r25, 0x87	; 135
    1de6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1dea:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1dee:	66 23       	and	r22, r22
    1df0:	11 f0       	breq	.+4      	; 0x1df6 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1df2:	90 6c       	ori	r25, 0xC0	; 192
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1df6:	9f 77       	andi	r25, 0x7F	; 127
    1df8:	90 64       	ori	r25, 0x40	; 64
    1dfa:	90 7e       	andi	r25, 0xE0	; 224
    1dfc:	98 2b       	or	r25, r24
    1dfe:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1e02:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e0c:	08 95       	ret

00001e0e <_ZN15OrangutanAnalog4readEh>:
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN15OrangutanAnalog15startConversionEhh>
    1e14:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e18:	86 fd       	sbrc	r24, 6
    1e1a:	fc cf       	rjmp	.-8      	; 0x1e14 <_ZN15OrangutanAnalog4readEh+0x6>
    1e1c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN15OrangutanAnalog16conversionResultEv>
    1e20:	08 95       	ret

00001e22 <analog_read>:
    1e22:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZN15OrangutanAnalog4readEh>
    1e26:	08 95       	ret

00001e28 <_ZN15OrangutanAnalog11readAverageEhj>:
    1e28:	a0 e0       	ldi	r26, 0x00	; 0
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ea e1       	ldi	r30, 0x1A	; 26
    1e2e:	ff e0       	ldi	r31, 0x0F	; 15
    1e30:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__prologue_saves__+0x14>
    1e34:	eb 01       	movw	r28, r22
    1e36:	60 e0       	ldi	r22, 0x00	; 0
    1e38:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN15OrangutanAnalog15startConversionEhh>
    1e3c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e40:	86 fd       	sbrc	r24, 6
    1e42:	fc cf       	rjmp	.-8      	; 0x1e3c <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1e44:	8e 01       	movw	r16, r28
    1e46:	c1 2c       	mov	r12, r1
    1e48:	d1 2c       	mov	r13, r1
    1e4a:	76 01       	movw	r14, r12
    1e4c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e50:	80 64       	ori	r24, 0x40	; 64
    1e52:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e56:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e5a:	86 fd       	sbrc	r24, 6
    1e5c:	fc cf       	rjmp	.-8      	; 0x1e56 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1e5e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN15OrangutanAnalog16conversionResultEv>
    1e62:	c8 0e       	add	r12, r24
    1e64:	d9 1e       	adc	r13, r25
    1e66:	e1 1c       	adc	r14, r1
    1e68:	f1 1c       	adc	r15, r1
    1e6a:	01 50       	subi	r16, 0x01	; 1
    1e6c:	11 09       	sbc	r17, r1
    1e6e:	01 15       	cp	r16, r1
    1e70:	11 05       	cpc	r17, r1
    1e72:	61 f7       	brne	.-40     	; 0x1e4c <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1e74:	ce 01       	movw	r24, r28
    1e76:	96 95       	lsr	r25
    1e78:	87 95       	ror	r24
    1e7a:	c0 34       	cpi	r28, 0x40	; 64
    1e7c:	d1 05       	cpc	r29, r1
    1e7e:	38 f4       	brcc	.+14     	; 0x1e8e <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1e80:	8c 0d       	add	r24, r12
    1e82:	9d 1d       	adc	r25, r13
    1e84:	be 01       	movw	r22, r28
    1e86:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	0e c0       	rjmp	.+28     	; 0x1eaa <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1e8e:	a7 01       	movw	r20, r14
    1e90:	96 01       	movw	r18, r12
    1e92:	28 0f       	add	r18, r24
    1e94:	39 1f       	adc	r19, r25
    1e96:	41 1d       	adc	r20, r1
    1e98:	51 1d       	adc	r21, r1
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	b9 01       	movw	r22, r18
    1e9e:	9e 01       	movw	r18, r28
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__udivmodsi4>
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	e8 e0       	ldi	r30, 0x08	; 8
    1eb0:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__epilogue_restores__+0x14>

00001eb4 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1eb4:	cf 92       	push	r12
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ec0:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ec4:	9c 01       	movw	r18, r24
    1ec6:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__umulhisi3>
    1eca:	6b 01       	movw	r12, r22
    1ecc:	7c 01       	movw	r14, r24
    1ece:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <_ZN15OrangutanAnalog7getModeEv>
    1ed2:	88 23       	and	r24, r24
    1ed4:	59 f0       	breq	.+22     	; 0x1eec <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	b6 01       	movw	r22, r12
    1eda:	61 58       	subi	r22, 0x81	; 129
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee2:	2f ef       	ldi	r18, 0xFF	; 255
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	0a c0       	rjmp	.+20     	; 0x1f00 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b6 01       	movw	r22, r12
    1ef0:	61 50       	subi	r22, 0x01	; 1
    1ef2:	7e 4f       	sbci	r23, 0xFE	; 254
    1ef4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef8:	2f ef       	ldi	r18, 0xFF	; 255
    1efa:	33 e0       	ldi	r19, 0x03	; 3
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	50 e0       	ldi	r21, 0x00	; 0
    1f00:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__udivmodsi4>
    1f04:	c9 01       	movw	r24, r18
    1f06:	ff 90       	pop	r15
    1f08:	ef 90       	pop	r14
    1f0a:	df 90       	pop	r13
    1f0c:	cf 90       	pop	r12
    1f0e:	08 95       	ret

00001f10 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1f10:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <_ZN15OrangutanAnalog11readAverageEhj>
    1f14:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1f18:	08 95       	ret

00001f1a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <_ZN15OrangutanAnalog7getModeEv>
    1f24:	18 2f       	mov	r17, r24
    1f26:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN15OrangutanAnalog7setModeEh.part.0>
    1f2a:	6a e0       	ldi	r22, 0x0A	; 10
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	86 e0       	ldi	r24, 0x06	; 6
    1f30:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1f34:	ec 01       	movw	r28, r24
    1f36:	81 2f       	mov	r24, r17
    1f38:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN15OrangutanAnalog7setModeEh>
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	8c 0f       	add	r24, r28
    1f44:	9d 1f       	adc	r25, r29
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	96 95       	lsr	r25
    1f4a:	87 95       	ror	r24
    1f4c:	df 91       	pop	r29
    1f4e:	cf 91       	pop	r28
    1f50:	1f 91       	pop	r17
    1f52:	08 95       	ret

00001f54 <read_battery_millivolts_3pi>:
    1f54:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1f58:	08 95       	ret

00001f5a <_ZL16currentCharacterv>:
    1f5a:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL17use_program_space>
    1f5e:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__data_end>
    1f62:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <__data_end+0x1>
    1f66:	99 23       	and	r25, r25
    1f68:	11 f0       	breq	.+4      	; 0x1f6e <_ZL16currentCharacterv+0x14>
    1f6a:	84 91       	lpm	r24, Z
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <_ZL16currentCharacterv+0x16>
    1f6e:	80 81       	ld	r24, Z
    1f70:	2f eb       	ldi	r18, 0xBF	; 191
    1f72:	28 0f       	add	r18, r24
    1f74:	2a 31       	cpi	r18, 0x1A	; 26
    1f76:	10 f4       	brcc	.+4      	; 0x1f7c <_ZL16currentCharacterv+0x22>
    1f78:	80 5e       	subi	r24, 0xE0	; 224
    1f7a:	08 95       	ret
    1f7c:	80 32       	cpi	r24, 0x20	; 32
    1f7e:	49 f4       	brne	.+18     	; 0x1f92 <_ZL16currentCharacterv+0x38>
    1f80:	9f 01       	movw	r18, r30
    1f82:	2f 5f       	subi	r18, 0xFF	; 255
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
    1f86:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    1f8a:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    1f8e:	ef 2b       	or	r30, r31
    1f90:	31 f7       	brne	.-52     	; 0x1f5e <_ZL16currentCharacterv+0x4>
    1f92:	08 95       	ret

00001f94 <_ZL9getNumberv>:
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZL16currentCharacterv>
    1f9e:	c0 e0       	ldi	r28, 0x00	; 0
    1fa0:	d0 e0       	ldi	r29, 0x00	; 0
    1fa2:	1a e0       	ldi	r17, 0x0A	; 10
    1fa4:	90 ed       	ldi	r25, 0xD0	; 208
    1fa6:	98 0f       	add	r25, r24
    1fa8:	9a 30       	cpi	r25, 0x0A	; 10
    1faa:	b8 f4       	brcc	.+46     	; 0x1fda <_ZL9getNumberv+0x46>
    1fac:	9e 01       	movw	r18, r28
    1fae:	12 9f       	mul	r17, r18
    1fb0:	e0 01       	movw	r28, r0
    1fb2:	13 9f       	mul	r17, r19
    1fb4:	d0 0d       	add	r29, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	c8 0f       	add	r28, r24
    1fba:	d1 1d       	adc	r29, r1
    1fbc:	87 fd       	sbrc	r24, 7
    1fbe:	da 95       	dec	r29
    1fc0:	e0 97       	sbiw	r28, 0x30	; 48
    1fc2:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
    1fc6:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
    1fd0:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
    1fd4:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZL16currentCharacterv>
    1fd8:	e5 cf       	rjmp	.-54     	; 0x1fa4 <_ZL9getNumberv+0x10>
    1fda:	ce 01       	movw	r24, r28
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	08 95       	ret

00001fe4 <_ZN15OrangutanBuzzer5init2Ev>:
    1fe4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1fe8:	83 e2       	ldi	r24, 0x23	; 35
    1fea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1fee:	81 e1       	ldi	r24, 0x11	; 17
    1ff0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1ff4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    1ff8:	80 e1       	ldi	r24, 0x10	; 16
    1ffa:	97 e2       	ldi	r25, 0x27	; 39
    1ffc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2000:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2004:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2008:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    200c:	22 9a       	sbi	0x04, 2	; 4
    200e:	78 94       	sei
    2010:	08 95       	ret

00002012 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    2012:	8f 92       	push	r8
    2014:	9f 92       	push	r9
    2016:	af 92       	push	r10
    2018:	bf 92       	push	r11
    201a:	df 92       	push	r13
    201c:	ef 92       	push	r14
    201e:	ff 92       	push	r15
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	5c 01       	movw	r10, r24
    202a:	8b 01       	movw	r16, r22
    202c:	d4 2e       	mov	r13, r20
    202e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <buzzerInitialized>
    2032:	81 11       	cpse	r24, r1
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <buzzerInitialized>
    203c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN15OrangutanBuzzer5init2Ev>
    2040:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    2044:	b7 fe       	sbrs	r11, 7
    2046:	05 c0       	rjmp	.+10     	; 0x2052 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    2048:	e8 94       	clt
    204a:	b7 f8       	bld	r11, 7
    204c:	2a e0       	ldi	r18, 0x0A	; 10
    204e:	f2 2e       	mov	r15, r18
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    2052:	ff 24       	eor	r15, r15
    2054:	f3 94       	inc	r15
    2056:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    205a:	2e 2d       	mov	r18, r14
    205c:	28 7f       	andi	r18, 0xF8	; 248
    205e:	e2 2e       	mov	r14, r18
    2060:	48 ec       	ldi	r20, 0xC8	; 200
    2062:	f4 9e       	mul	r15, r20
    2064:	c0 01       	movw	r24, r0
    2066:	11 24       	eor	r1, r1
    2068:	8a 15       	cp	r24, r10
    206a:	9b 05       	cpc	r25, r11
    206c:	e0 f4       	brcc	.+56     	; 0x20a6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    206e:	e5 01       	movw	r28, r10
    2070:	51 e1       	ldi	r21, 0x11	; 17
    2072:	a5 16       	cp	r10, r21
    2074:	57 e2       	ldi	r21, 0x27	; 39
    2076:	b5 06       	cpc	r11, r21
    2078:	10 f0       	brcs	.+4      	; 0x207e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    207a:	c0 e1       	ldi	r28, 0x10	; 16
    207c:	d7 e2       	ldi	r29, 0x27	; 39
    207e:	be 01       	movw	r22, r28
    2080:	76 95       	lsr	r23
    2082:	67 95       	ror	r22
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	60 58       	subi	r22, 0x80	; 128
    208a:	79 46       	sbci	r23, 0x69	; 105
    208c:	87 46       	sbci	r24, 0x67	; 103
    208e:	9f 4f       	sbci	r25, 0xFF	; 255
    2090:	4e 01       	movw	r8, r28
    2092:	a1 2c       	mov	r10, r1
    2094:	b1 2c       	mov	r11, r1
    2096:	a5 01       	movw	r20, r10
    2098:	94 01       	movw	r18, r8
    209a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__udivmodsi4>
    209e:	59 01       	movw	r10, r18
    20a0:	8e 2d       	mov	r24, r14
    20a2:	81 60       	ori	r24, 0x01	; 1
    20a4:	24 c0       	rjmp	.+72     	; 0x20ee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    20a6:	c8 e2       	ldi	r28, 0x28	; 40
    20a8:	fc 9e       	mul	r15, r28
    20aa:	c0 2d       	mov	r28, r0
    20ac:	11 24       	eor	r1, r1
    20ae:	d0 e0       	ldi	r29, 0x00	; 0
    20b0:	ca 15       	cp	r28, r10
    20b2:	db 05       	cpc	r29, r11
    20b4:	08 f4       	brcc	.+2      	; 0x20b8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    20b6:	e5 01       	movw	r28, r10
    20b8:	be 01       	movw	r22, r28
    20ba:	76 95       	lsr	r23
    20bc:	67 95       	ror	r22
    20be:	9e 01       	movw	r18, r28
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	8a e0       	ldi	r24, 0x0A	; 10
    20c6:	f8 12       	cpse	r15, r24
    20c8:	07 c0       	rjmp	.+14     	; 0x20d8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	60 5e       	subi	r22, 0xE0	; 224
    20d0:	73 44       	sbci	r23, 0x43	; 67
    20d2:	81 44       	sbci	r24, 0x41	; 65
    20d4:	9f 4f       	sbci	r25, 0xFF	; 255
    20d6:	06 c0       	rjmp	.+12     	; 0x20e4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	60 53       	subi	r22, 0x30	; 48
    20de:	7d 4e       	sbci	r23, 0xED	; 237
    20e0:	8c 4e       	sbci	r24, 0xEC	; 236
    20e2:	9f 4f       	sbci	r25, 0xFF	; 255
    20e4:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__udivmodsi4>
    20e8:	59 01       	movw	r10, r18
    20ea:	8e 2d       	mov	r24, r14
    20ec:	82 60       	ori	r24, 0x02	; 2
    20ee:	88 2e       	mov	r8, r24
    20f0:	2a e0       	ldi	r18, 0x0A	; 10
    20f2:	f2 12       	cpse	r15, r18
    20f4:	07 c0       	rjmp	.+14     	; 0x2104 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    20f6:	ce 01       	movw	r24, r28
    20f8:	05 96       	adiw	r24, 0x05	; 5
    20fa:	6a e0       	ldi	r22, 0x0A	; 10
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    2102:	eb 01       	movw	r28, r22
    2104:	c8 3e       	cpi	r28, 0xE8	; 232
    2106:	43 e0       	ldi	r20, 0x03	; 3
    2108:	d4 07       	cpc	r29, r20
    210a:	59 f0       	breq	.+22     	; 0x2122 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    210c:	98 01       	movw	r18, r16
    210e:	de 01       	movw	r26, r28
    2110:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__umulhisi3>
    2114:	28 ee       	ldi	r18, 0xE8	; 232
    2116:	33 e0       	ldi	r19, 0x03	; 3
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__divmodsi4>
    2120:	89 01       	movw	r16, r18
    2122:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2126:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    212a:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    212e:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2132:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2136:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    213a:	4d 2d       	mov	r20, r13
    213c:	40 31       	cpi	r20, 0x10	; 16
    213e:	08 f0       	brcs	.+2      	; 0x2142 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    2140:	4f e0       	ldi	r20, 0x0F	; 15
    2142:	80 e1       	ldi	r24, 0x10	; 16
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	84 1b       	sub	r24, r20
    2148:	91 09       	sbc	r25, r1
    214a:	a9 01       	movw	r20, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    214e:	56 95       	lsr	r21
    2150:	47 95       	ror	r20
    2152:	8a 95       	dec	r24
    2154:	e2 f7       	brpl	.-8      	; 0x214e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    2156:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    215a:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    215e:	10 93 94 01 	sts	0x0194, r17	; 0x800194 <_ZL13buzzerTimeout+0x1>
    2162:	00 93 93 01 	sts	0x0193, r16	; 0x800193 <_ZL13buzzerTimeout>
    2166:	86 b3       	in	r24, 0x16	; 22
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	86 bb       	out	0x16, r24	; 22
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	df 90       	pop	r13
    2180:	bf 90       	pop	r11
    2182:	af 90       	pop	r10
    2184:	9f 90       	pop	r9
    2186:	8f 90       	pop	r8
    2188:	08 95       	ret

0000218a <_ZN15OrangutanBuzzer8playNoteEhjh>:
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
    218e:	eb 01       	movw	r28, r22
    2190:	8f 3f       	cpi	r24, 0xFF	; 255
    2192:	11 f0       	breq	.+4      	; 0x2198 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    2194:	41 11       	cpse	r20, r1
    2196:	05 c0       	rjmp	.+10     	; 0x21a2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	be 01       	movw	r22, r28
    219c:	88 ee       	ldi	r24, 0xE8	; 232
    219e:	93 e0       	ldi	r25, 0x03	; 3
    21a0:	43 c0       	rjmp	.+134    	; 0x2228 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    21a2:	81 31       	cpi	r24, 0x11	; 17
    21a4:	30 f0       	brcs	.+12     	; 0x21b2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    21a6:	50 ef       	ldi	r21, 0xF0	; 240
    21a8:	58 0f       	add	r21, r24
    21aa:	50 36       	cpi	r21, 0x60	; 96
    21ac:	18 f0       	brcs	.+6      	; 0x21b4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    21ae:	5f e5       	ldi	r21, 0x5F	; 95
    21b0:	01 c0       	rjmp	.+2      	; 0x21b4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	85 2f       	mov	r24, r21
    21b6:	6c e0       	ldi	r22, 0x0C	; 12
    21b8:	0e 94 ba 1c 	call	0x3974	; 0x3974 <__udivmodqi4>
    21bc:	68 2f       	mov	r22, r24
    21be:	74 ef       	ldi	r23, 0xF4	; 244
    21c0:	76 03       	mulsu	r23, r22
    21c2:	90 01       	movw	r18, r0
    21c4:	11 24       	eor	r1, r1
    21c6:	25 0f       	add	r18, r21
    21c8:	31 1d       	adc	r19, r1
    21ca:	2c 30       	cpi	r18, 0x0C	; 12
    21cc:	31 05       	cpc	r19, r1
    21ce:	40 f4       	brcc	.+16     	; 0x21e0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    21d0:	f9 01       	movw	r30, r18
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	e8 5c       	subi	r30, 0xC8	; 200
    21d8:	fe 4f       	sbci	r31, 0xFE	; 254
    21da:	20 81       	ld	r18, Z
    21dc:	31 81       	ldd	r19, Z+1	; 0x01
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	87 30       	cpi	r24, 0x07	; 7
    21e6:	81 f0       	breq	.+32     	; 0x2208 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    21e8:	08 2e       	mov	r0, r24
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    21ec:	22 0f       	add	r18, r18
    21ee:	33 1f       	adc	r19, r19
    21f0:	0a 94       	dec	r0
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    21f4:	82 30       	cpi	r24, 0x02	; 2
    21f6:	28 f0       	brcs	.+10     	; 0x2202 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    21f8:	c9 01       	movw	r24, r18
    21fa:	05 96       	adiw	r24, 0x05	; 5
    21fc:	6a e0       	ldi	r22, 0x0A	; 10
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	0c c0       	rjmp	.+24     	; 0x221a <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    2202:	c9 01       	movw	r24, r18
    2204:	90 58       	subi	r25, 0x80	; 128
    2206:	0c c0       	rjmp	.+24     	; 0x2220 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    2208:	c9 01       	movw	r24, r18
    220a:	36 e0       	ldi	r19, 0x06	; 6
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	3a 95       	dec	r19
    2212:	e1 f7       	brne	.-8      	; 0x220c <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    2214:	02 96       	adiw	r24, 0x02	; 2
    2216:	65 e0       	ldi	r22, 0x05	; 5
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    221e:	cb 01       	movw	r24, r22
    2220:	40 31       	cpi	r20, 0x10	; 16
    2222:	08 f0       	brcs	.+2      	; 0x2226 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    2224:	4f e0       	ldi	r20, 0x0F	; 15
    2226:	be 01       	movw	r22, r28
    2228:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	08 95       	ret

00002232 <_ZL8nextNotev>:
    2232:	a2 e0       	ldi	r26, 0x02	; 2
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	ef e1       	ldi	r30, 0x1F	; 31
    2238:	f1 e1       	ldi	r31, 0x11	; 17
    223a:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__prologue_saves__+0x4>
    223e:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    2242:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL8staccato>
    2246:	88 23       	and	r24, r24
    2248:	21 f0       	breq	.+8      	; 0x2252 <_ZL8nextNotev+0x20>
    224a:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <_ZL22staccato_rest_duration>
    224e:	61 11       	cpse	r22, r1
    2250:	17 c0       	rjmp	.+46     	; 0x2280 <_ZL8nextNotev+0x4e>
    2252:	77 24       	eor	r7, r7
    2254:	73 94       	inc	r7
    2256:	b0 ec       	ldi	r27, 0xC0	; 192
    2258:	ab 2e       	mov	r10, r27
    225a:	bd e5       	ldi	r27, 0x5D	; 93
    225c:	bb 2e       	mov	r11, r27
    225e:	1a e0       	ldi	r17, 0x0A	; 10
    2260:	61 2e       	mov	r6, r17
    2262:	04 e0       	ldi	r16, 0x04	; 4
    2264:	80 2e       	mov	r8, r16
    2266:	80 ed       	ldi	r24, 0xD0	; 208
    2268:	c8 2e       	mov	r12, r24
    226a:	87 e0       	ldi	r24, 0x07	; 7
    226c:	d8 2e       	mov	r13, r24
    226e:	94 e0       	ldi	r25, 0x04	; 4
    2270:	e9 2e       	mov	r14, r25
    2272:	f1 2c       	mov	r15, r1
    2274:	04 ef       	ldi	r16, 0xF4	; 244
    2276:	11 e0       	ldi	r17, 0x01	; 1
    2278:	2f e0       	ldi	r18, 0x0F	; 15
    227a:	42 2e       	mov	r4, r18
    227c:	51 2c       	mov	r5, r1
    227e:	15 c0       	rjmp	.+42     	; 0x22aa <_ZL8nextNotev+0x78>
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	88 ee       	ldi	r24, 0xE8	; 232
    2286:	93 e0       	ldi	r25, 0x03	; 3
    2288:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    228c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    2290:	17 c1       	rjmp	.+558    	; 0x24c0 <_ZL8nextNotev+0x28e>
    2292:	86 36       	cpi	r24, 0x66	; 102
    2294:	d4 f5       	brge	.+116    	; 0x230a <_ZL8nextNotev+0xd8>
    2296:	81 36       	cpi	r24, 0x61	; 97
    2298:	09 f4       	brne	.+2      	; 0x229c <_ZL8nextNotev+0x6a>
    229a:	a9 c0       	rjmp	.+338    	; 0x23ee <_ZL8nextNotev+0x1bc>
    229c:	7c f5       	brge	.+94     	; 0x22fc <_ZL8nextNotev+0xca>
    229e:	8c 33       	cpi	r24, 0x3C	; 60
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <_ZL8nextNotev+0x72>
    22a2:	60 c0       	rjmp	.+192    	; 0x2364 <_ZL8nextNotev+0x132>
    22a4:	8e 33       	cpi	r24, 0x3E	; 62
    22a6:	81 f4       	brne	.+32     	; 0x22c8 <_ZL8nextNotev+0x96>
    22a8:	93 94       	inc	r9
    22aa:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZL16currentCharacterv>
    22ae:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    22b2:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    22b6:	2f 5f       	subi	r18, 0xFF	; 255
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    22be:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    22c2:	85 36       	cpi	r24, 0x65	; 101
    22c4:	31 f7       	brne	.-52     	; 0x2292 <_ZL8nextNotev+0x60>
    22c6:	52 c0       	rjmp	.+164    	; 0x236c <_ZL8nextNotev+0x13a>
    22c8:	81 32       	cpi	r24, 0x21	; 33
    22ca:	09 f0       	breq	.+2      	; 0x22ce <_ZL8nextNotev+0x9c>
    22cc:	8b c0       	rjmp	.+278    	; 0x23e4 <_ZL8nextNotev+0x1b2>
    22ce:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    22d2:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    22d6:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    22da:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    22de:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    22e2:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    22e6:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    22ea:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    22ee:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    22f2:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <_ZL8staccato>
    22f6:	a4 e0       	ldi	r26, 0x04	; 4
    22f8:	9a 2e       	mov	r9, r26
    22fa:	d7 cf       	rjmp	.-82     	; 0x22aa <_ZL8nextNotev+0x78>
    22fc:	83 36       	cpi	r24, 0x63	; 99
    22fe:	a1 f1       	breq	.+104    	; 0x2368 <_ZL8nextNotev+0x136>
    2300:	0c f4       	brge	.+2      	; 0x2304 <_ZL8nextNotev+0xd2>
    2302:	78 c0       	rjmp	.+240    	; 0x23f4 <_ZL8nextNotev+0x1c2>
    2304:	10 e0       	ldi	r17, 0x00	; 0
    2306:	82 e0       	ldi	r24, 0x02	; 2
    2308:	77 c0       	rjmp	.+238    	; 0x23f8 <_ZL8nextNotev+0x1c6>
    230a:	8d 36       	cpi	r24, 0x6D	; 109
    230c:	c1 f1       	breq	.+112    	; 0x237e <_ZL8nextNotev+0x14c>
    230e:	94 f4       	brge	.+36     	; 0x2334 <_ZL8nextNotev+0x102>
    2310:	87 36       	cpi	r24, 0x67	; 103
    2312:	91 f1       	breq	.+100    	; 0x2378 <_ZL8nextNotev+0x146>
    2314:	74 f1       	brlt	.+92     	; 0x2372 <_ZL8nextNotev+0x140>
    2316:	8c 36       	cpi	r24, 0x6C	; 108
    2318:	09 f0       	breq	.+2      	; 0x231c <_ZL8nextNotev+0xea>
    231a:	64 c0       	rjmp	.+200    	; 0x23e4 <_ZL8nextNotev+0x1b2>
    231c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZL9getNumberv>
    2320:	bc 01       	movw	r22, r24
    2322:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    2326:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    232a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    232e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2332:	51 c0       	rjmp	.+162    	; 0x23d6 <_ZL8nextNotev+0x1a4>
    2334:	82 37       	cpi	r24, 0x72	; 114
    2336:	c9 f1       	breq	.+114    	; 0x23aa <_ZL8nextNotev+0x178>
    2338:	4c f4       	brge	.+18     	; 0x234c <_ZL8nextNotev+0x11a>
    233a:	8f 36       	cpi	r24, 0x6F	; 111
    233c:	09 f0       	breq	.+2      	; 0x2340 <_ZL8nextNotev+0x10e>
    233e:	52 c0       	rjmp	.+164    	; 0x23e4 <_ZL8nextNotev+0x1b2>
    2340:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZL9getNumberv>
    2344:	98 2e       	mov	r9, r24
    2346:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    234a:	af cf       	rjmp	.-162    	; 0x22aa <_ZL8nextNotev+0x78>
    234c:	84 37       	cpi	r24, 0x74	; 116
    234e:	81 f1       	breq	.+96     	; 0x23b0 <_ZL8nextNotev+0x17e>
    2350:	86 37       	cpi	r24, 0x76	; 118
    2352:	09 f0       	breq	.+2      	; 0x2356 <_ZL8nextNotev+0x124>
    2354:	47 c0       	rjmp	.+142    	; 0x23e4 <_ZL8nextNotev+0x1b2>
    2356:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZL9getNumberv>
    235a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    235e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    2362:	a3 cf       	rjmp	.-186    	; 0x22aa <_ZL8nextNotev+0x78>
    2364:	9a 94       	dec	r9
    2366:	a1 cf       	rjmp	.-190    	; 0x22aa <_ZL8nextNotev+0x78>
    2368:	10 e0       	ldi	r17, 0x00	; 0
    236a:	20 c0       	rjmp	.+64     	; 0x23ac <_ZL8nextNotev+0x17a>
    236c:	10 e0       	ldi	r17, 0x00	; 0
    236e:	84 e0       	ldi	r24, 0x04	; 4
    2370:	43 c0       	rjmp	.+134    	; 0x23f8 <_ZL8nextNotev+0x1c6>
    2372:	10 e0       	ldi	r17, 0x00	; 0
    2374:	85 e0       	ldi	r24, 0x05	; 5
    2376:	40 c0       	rjmp	.+128    	; 0x23f8 <_ZL8nextNotev+0x1c6>
    2378:	10 e0       	ldi	r17, 0x00	; 0
    237a:	87 e0       	ldi	r24, 0x07	; 7
    237c:	3d c0       	rjmp	.+122    	; 0x23f8 <_ZL8nextNotev+0x1c6>
    237e:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZL16currentCharacterv>
    2382:	8c 36       	cpi	r24, 0x6C	; 108
    2384:	19 f4       	brne	.+6      	; 0x238c <_ZL8nextNotev+0x15a>
    2386:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <_ZL8staccato>
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <_ZL8nextNotev+0x162>
    238c:	70 92 90 01 	sts	0x0190, r7	; 0x800190 <_ZL8staccato>
    2390:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    2394:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    2398:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    239c:	2f 5f       	subi	r18, 0xFF	; 255
    239e:	3f 4f       	sbci	r19, 0xFF	; 255
    23a0:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    23a4:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    23a8:	80 cf       	rjmp	.-256    	; 0x22aa <_ZL8nextNotev+0x78>
    23aa:	11 e0       	ldi	r17, 0x01	; 1
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	24 c0       	rjmp	.+72     	; 0x23f8 <_ZL8nextNotev+0x1c6>
    23b0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZL9getNumberv>
    23b4:	bc 01       	movw	r22, r24
    23b6:	c5 01       	movw	r24, r10
    23b8:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    23bc:	66 9e       	mul	r6, r22
    23be:	c0 01       	movw	r24, r0
    23c0:	67 9e       	mul	r6, r23
    23c2:	90 0d       	add	r25, r0
    23c4:	11 24       	eor	r1, r1
    23c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    23ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    23ce:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    23d2:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    23d6:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    23da:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    23de:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    23e2:	63 cf       	rjmp	.-314    	; 0x22aa <_ZL8nextNotev+0x78>
    23e4:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <__data_end+0x1>
    23e8:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__data_end>
    23ec:	69 c0       	rjmp	.+210    	; 0x24c0 <_ZL8nextNotev+0x28e>
    23ee:	10 e0       	ldi	r17, 0x00	; 0
    23f0:	89 e0       	ldi	r24, 0x09	; 9
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <_ZL8nextNotev+0x1c6>
    23f4:	10 e0       	ldi	r17, 0x00	; 0
    23f6:	8b e0       	ldi	r24, 0x0B	; 11
    23f8:	08 2f       	mov	r16, r24
    23fa:	9c e0       	ldi	r25, 0x0C	; 12
    23fc:	99 9e       	mul	r9, r25
    23fe:	00 0d       	add	r16, r0
    2400:	11 24       	eor	r1, r1
    2402:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZL16currentCharacterv>
    2406:	98 2f       	mov	r25, r24
    2408:	97 7f       	andi	r25, 0xF7	; 247
    240a:	93 32       	cpi	r25, 0x23	; 35
    240c:	61 f4       	brne	.+24     	; 0x2426 <_ZL8nextNotev+0x1f4>
    240e:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    2412:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    2416:	2f 5f       	subi	r18, 0xFF	; 255
    2418:	3f 4f       	sbci	r19, 0xFF	; 255
    241a:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    241e:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    2422:	0f 5f       	subi	r16, 0xFF	; 255
    2424:	ee cf       	rjmp	.-36     	; 0x2402 <_ZL8nextNotev+0x1d0>
    2426:	8d 32       	cpi	r24, 0x2D	; 45
    2428:	71 f4       	brne	.+28     	; 0x2446 <_ZL8nextNotev+0x214>
    242a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    242e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    2432:	2f 5f       	subi	r18, 0xFF	; 255
    2434:	3f 4f       	sbci	r19, 0xFF	; 255
    2436:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    243a:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    243e:	01 50       	subi	r16, 0x01	; 1
    2440:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZL16currentCharacterv>
    2444:	f0 cf       	rjmp	.-32     	; 0x2426 <_ZL8nextNotev+0x1f4>
    2446:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    244a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    244e:	81 53       	subi	r24, 0x31	; 49
    2450:	88 30       	cpi	r24, 0x08	; 8
    2452:	50 f4       	brcc	.+20     	; 0x2468 <_ZL8nextNotev+0x236>
    2454:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2458:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    245c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <_ZL9getNumberv>
    2460:	bc 01       	movw	r22, r24
    2462:	c7 01       	movw	r24, r14
    2464:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    2468:	7b 01       	movw	r14, r22
    246a:	f6 94       	lsr	r15
    246c:	e7 94       	ror	r14
    246e:	69 83       	std	Y+1, r22	; 0x01
    2470:	7a 83       	std	Y+2, r23	; 0x02
    2472:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <_ZL16currentCharacterv>
    2476:	69 81       	ldd	r22, Y+1	; 0x01
    2478:	7a 81       	ldd	r23, Y+2	; 0x02
    247a:	8e 32       	cpi	r24, 0x2E	; 46
    247c:	69 f4       	brne	.+26     	; 0x2498 <_ZL8nextNotev+0x266>
    247e:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    2482:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    2486:	2f 5f       	subi	r18, 0xFF	; 255
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    248e:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    2492:	6e 0d       	add	r22, r14
    2494:	7f 1d       	adc	r23, r15
    2496:	e9 cf       	rjmp	.-46     	; 0x246a <_ZL8nextNotev+0x238>
    2498:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL8staccato>
    249c:	88 23       	and	r24, r24
    249e:	39 f0       	breq	.+14     	; 0x24ae <_ZL8nextNotev+0x27c>
    24a0:	9b 01       	movw	r18, r22
    24a2:	36 95       	lsr	r19
    24a4:	27 95       	ror	r18
    24a6:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <_ZL22staccato_rest_duration>
    24aa:	62 1b       	sub	r22, r18
    24ac:	71 09       	sbc	r23, r1
    24ae:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    24b2:	11 23       	and	r17, r17
    24b4:	11 f0       	breq	.+4      	; 0x24ba <_ZL8nextNotev+0x288>
    24b6:	8f ef       	ldi	r24, 0xFF	; 255
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <_ZL8nextNotev+0x28a>
    24ba:	80 2f       	mov	r24, r16
    24bc:	0e 94 c5 10 	call	0x218a	; 0x218a <_ZN15OrangutanBuzzer8playNoteEhjh>
    24c0:	22 96       	adiw	r28, 0x02	; 2
    24c2:	e0 e1       	ldi	r30, 0x10	; 16
    24c4:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <__epilogue_restores__+0x4>

000024c8 <__vector_13>:
    24c8:	1f 92       	push	r1
    24ca:	0f 92       	push	r0
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	0f 92       	push	r0
    24d0:	11 24       	eor	r1, r1
    24d2:	2f 93       	push	r18
    24d4:	3f 93       	push	r19
    24d6:	4f 93       	push	r20
    24d8:	5f 93       	push	r21
    24da:	6f 93       	push	r22
    24dc:	7f 93       	push	r23
    24de:	8f 93       	push	r24
    24e0:	9f 93       	push	r25
    24e2:	af 93       	push	r26
    24e4:	bf 93       	push	r27
    24e6:	ef 93       	push	r30
    24e8:	ff 93       	push	r31
    24ea:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_ZL13buzzerTimeout>
    24ee:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_ZL13buzzerTimeout+0x1>
    24f2:	9c 01       	movw	r18, r24
    24f4:	21 50       	subi	r18, 0x01	; 1
    24f6:	31 09       	sbc	r19, r1
    24f8:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <_ZL13buzzerTimeout+0x1>
    24fc:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <_ZL13buzzerTimeout>
    2500:	89 2b       	or	r24, r25
    2502:	11 f5       	brne	.+68     	; 0x2548 <__vector_13+0x80>
    2504:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2508:	78 94       	sei
    250a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    250e:	88 7f       	andi	r24, 0xF8	; 248
    2510:	81 60       	ori	r24, 0x01	; 1
    2512:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2516:	80 e1       	ldi	r24, 0x10	; 16
    2518:	97 e2       	ldi	r25, 0x27	; 39
    251a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    251e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2522:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2526:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    2530:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
    2534:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
    2538:	89 2b       	or	r24, r25
    253a:	31 f0       	breq	.+12     	; 0x2548 <__vector_13+0x80>
    253c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL17play_mode_setting>
    2540:	81 11       	cpse	r24, r1
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <__vector_13+0x80>
    2544:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZL8nextNotev>
    2548:	ff 91       	pop	r31
    254a:	ef 91       	pop	r30
    254c:	bf 91       	pop	r27
    254e:	af 91       	pop	r26
    2550:	9f 91       	pop	r25
    2552:	8f 91       	pop	r24
    2554:	7f 91       	pop	r23
    2556:	6f 91       	pop	r22
    2558:	5f 91       	pop	r21
    255a:	4f 91       	pop	r20
    255c:	3f 91       	pop	r19
    255e:	2f 91       	pop	r18
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	0f 90       	pop	r0
    2566:	1f 90       	pop	r1
    2568:	18 95       	reti

0000256a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    256a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    256e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
    2572:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <_ZL17use_program_space>
    257c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    2580:	0e 94 19 11 	call	0x2232	; 0x2232 <_ZL8nextNotev>
    2584:	08 95       	ret

00002586 <play_from_program_space>:
    2586:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    258a:	08 95       	ret

0000258c <delay_us.constprop.0>:
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	6f 93       	push	r22
    2592:	64 e0       	ldi	r22, 0x04	; 4
    2594:	6a 95       	dec	r22
    2596:	f1 f7       	brne	.-4      	; 0x2594 <delay_us.constprop.0+0x8>
    2598:	6f 91       	pop	r22
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	c9 f7       	brne	.-14     	; 0x2590 <delay_us.constprop.0+0x4>
    259e:	08 95       	ret

000025a0 <_ZN12OrangutanLCD8busyWaitEv>:
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	1a b1       	in	r17, 0x0a	; 10
    25aa:	57 98       	cbi	0x0a, 7	; 10
    25ac:	5a 98       	cbi	0x0b, 2	; 11
    25ae:	28 9a       	sbi	0x05, 0	; 5
    25b0:	c0 e0       	ldi	r28, 0x00	; 0
    25b2:	d0 e0       	ldi	r29, 0x00	; 0
    25b4:	0e 94 c6 12 	call	0x258c	; 0x258c <delay_us.constprop.0>
    25b8:	5c 9a       	sbi	0x0b, 4	; 11
    25ba:	0e 94 c6 12 	call	0x258c	; 0x258c <delay_us.constprop.0>
    25be:	09 b1       	in	r16, 0x09	; 9
    25c0:	5c 98       	cbi	0x0b, 4	; 11
    25c2:	0e 94 c6 12 	call	0x258c	; 0x258c <delay_us.constprop.0>
    25c6:	5c 9a       	sbi	0x0b, 4	; 11
    25c8:	0e 94 c6 12 	call	0x258c	; 0x258c <delay_us.constprop.0>
    25cc:	5c 98       	cbi	0x0b, 4	; 11
    25ce:	24 96       	adiw	r28, 0x04	; 4
    25d0:	07 ff       	sbrs	r16, 7
    25d2:	10 c0       	rjmp	.+32     	; 0x25f4 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    25d4:	ae 01       	movw	r20, r28
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <lcdTimeout>
    25de:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <lcdTimeout+0x1>
    25e2:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <lcdTimeout+0x2>
    25e6:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <lcdTimeout+0x3>
    25ea:	48 17       	cp	r20, r24
    25ec:	59 07       	cpc	r21, r25
    25ee:	6a 07       	cpc	r22, r26
    25f0:	7b 07       	cpc	r23, r27
    25f2:	00 f3       	brcs	.-64     	; 0x25b4 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    25f4:	1a b9       	out	0x0a, r17	; 10
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	08 95       	ret

00002600 <_ZN12OrangutanLCD8sendDataEh>:
    2600:	95 b1       	in	r25, 0x05	; 5
    2602:	28 2f       	mov	r18, r24
    2604:	21 70       	andi	r18, 0x01	; 1
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	22 0f       	add	r18, r18
    260a:	33 1f       	adc	r19, r19
    260c:	48 2f       	mov	r20, r24
    260e:	46 70       	andi	r20, 0x06	; 6
    2610:	68 e0       	ldi	r22, 0x08	; 8
    2612:	46 9f       	mul	r20, r22
    2614:	a0 01       	movw	r20, r0
    2616:	11 24       	eor	r1, r1
    2618:	24 2b       	or	r18, r20
    261a:	9d 7c       	andi	r25, 0xCD	; 205
    261c:	29 2b       	or	r18, r25
    261e:	25 b9       	out	0x05, r18	; 5
    2620:	9b b1       	in	r25, 0x0b	; 11
    2622:	88 70       	andi	r24, 0x08	; 8
    2624:	82 95       	swap	r24
    2626:	80 7f       	andi	r24, 0xF0	; 240
    2628:	9f 77       	andi	r25, 0x7F	; 127
    262a:	89 2b       	or	r24, r25
    262c:	8b b9       	out	0x0b, r24	; 11
    262e:	5c 9a       	sbi	0x0b, 4	; 11
    2630:	0e 94 c6 12 	call	0x258c	; 0x258c <delay_us.constprop.0>
    2634:	5c 98       	cbi	0x0b, 4	; 11
    2636:	0e 94 c6 12 	call	0x258c	; 0x258c <delay_us.constprop.0>
    263a:	08 95       	ret

0000263c <_ZN12OrangutanLCD4sendEhhh>:
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e4 e2       	ldi	r30, 0x24	; 36
    2642:	f3 e1       	ldi	r31, 0x13	; 19
    2644:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__prologue_saves__+0x16>
    2648:	c8 2f       	mov	r28, r24
    264a:	d6 2e       	mov	r13, r22
    264c:	e4 2e       	mov	r14, r20
    264e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    2652:	81 11       	cpse	r24, r1
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <_ZN12OrangutanLCD4sendEhhh+0x24>
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    265c:	0e 94 67 13 	call	0x26ce	; 0x26ce <_ZN12OrangutanLCD5init2Ev>
    2660:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN12OrangutanLCD8busyWaitEv>
    2664:	14 b1       	in	r17, 0x04	; 4
    2666:	d5 b1       	in	r29, 0x05	; 5
    2668:	fa b0       	in	r15, 0x0a	; 10
    266a:	0b b1       	in	r16, 0x0b	; 11
    266c:	28 98       	cbi	0x05, 0	; 5
    266e:	dd 20       	and	r13, r13
    2670:	11 f0       	breq	.+4      	; 0x2676 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2672:	5a 9a       	sbi	0x0b, 2	; 11
    2674:	01 c0       	rjmp	.+2      	; 0x2678 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2676:	5a 98       	cbi	0x0b, 2	; 11
    2678:	94 b1       	in	r25, 0x04	; 4
    267a:	92 63       	ori	r25, 0x32	; 50
    267c:	94 b9       	out	0x04, r25	; 4
    267e:	57 9a       	sbi	0x0a, 7	; 10
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	e8 16       	cp	r14, r24
    2684:	29 f0       	breq	.+10     	; 0x2690 <_ZN12OrangutanLCD4sendEhhh+0x54>
    2686:	8c 2f       	mov	r24, r28
    2688:	82 95       	swap	r24
    268a:	8f 70       	andi	r24, 0x0F	; 15
    268c:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN12OrangutanLCD8sendDataEh>
    2690:	8c 2f       	mov	r24, r28
    2692:	8f 70       	andi	r24, 0x0F	; 15
    2694:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN12OrangutanLCD8sendDataEh>
    2698:	fa b8       	out	0x0a, r15	; 10
    269a:	0b b9       	out	0x0b, r16	; 11
    269c:	14 b9       	out	0x04, r17	; 4
    269e:	d5 b9       	out	0x05, r29	; 5
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	e7 e0       	ldi	r30, 0x07	; 7
    26a6:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__epilogue_restores__+0x16>

000026aa <_ZN12OrangutanLCD8send_cmdEh>:
    26aa:	42 e0       	ldi	r20, 0x02	; 2
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 1e 13 	call	0x263c	; 0x263c <_ZN12OrangutanLCD4sendEhhh>
    26b2:	08 95       	ret

000026b4 <_ZN12OrangutanLCD9send_dataEh>:
    26b4:	42 e0       	ldi	r20, 0x02	; 2
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	0e 94 1e 13 	call	0x263c	; 0x263c <_ZN12OrangutanLCD4sendEhhh>
    26bc:	08 95       	ret

000026be <print_character>:
    26be:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZN12OrangutanLCD9send_dataEh>
    26c2:	08 95       	ret

000026c4 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	60 e0       	ldi	r22, 0x00	; 0
    26c8:	0e 94 1e 13 	call	0x263c	; 0x263c <_ZN12OrangutanLCD4sendEhhh>
    26cc:	08 95       	ret

000026ce <_ZN12OrangutanLCD5init2Ev>:
    26ce:	80 e1       	ldi	r24, 0x10	; 16
    26d0:	97 e2       	ldi	r25, 0x27	; 39
    26d2:	a0 e0       	ldi	r26, 0x00	; 0
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <lcdTimeout>
    26da:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <lcdTimeout+0x1>
    26de:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <lcdTimeout+0x2>
    26e2:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <lcdTimeout+0x3>
    26e6:	52 9a       	sbi	0x0a, 2	; 10
    26e8:	20 9a       	sbi	0x04, 0	; 4
    26ea:	54 9a       	sbi	0x0a, 4	; 10
    26ec:	8e e1       	ldi	r24, 0x1E	; 30
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
    26f4:	83 e0       	ldi	r24, 0x03	; 3
    26f6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    26fa:	86 e0       	ldi	r24, 0x06	; 6
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
    2702:	83 e0       	ldi	r24, 0x03	; 3
    2704:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
    272c:	88 e2       	ldi	r24, 0x28	; 40
    272e:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN12OrangutanLCD8send_cmdEh>
    2732:	88 e0       	ldi	r24, 0x08	; 8
    2734:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN12OrangutanLCD8send_cmdEh>
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN12OrangutanLCD8send_cmdEh>
    273e:	86 e0       	ldi	r24, 0x06	; 6
    2740:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN12OrangutanLCD8send_cmdEh>
    2744:	8c e0       	ldi	r24, 0x0C	; 12
    2746:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN12OrangutanLCD8send_cmdEh>
    274a:	08 95       	ret

0000274c <_ZN12OrangutanLCD5clearEv>:
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN12OrangutanLCD8send_cmdEh>
    2752:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <printf_chars>
    2756:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <printf_chars+0x1>
    275a:	89 2b       	or	r24, r25
    275c:	f9 f0       	breq	.+62     	; 0x279c <_ZN12OrangutanLCD5clearEv+0x50>
    275e:	60 e0       	ldi	r22, 0x00	; 0
    2760:	a0 e2       	ldi	r26, 0x20	; 32
    2762:	26 2f       	mov	r18, r22
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    276a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	78 9f       	mul	r23, r24
    2774:	a0 01       	movw	r20, r0
    2776:	79 9f       	mul	r23, r25
    2778:	50 0d       	add	r21, r0
    277a:	11 24       	eor	r1, r1
    277c:	24 17       	cp	r18, r20
    277e:	35 07       	cpc	r19, r21
    2780:	4c f4       	brge	.+18     	; 0x2794 <_ZN12OrangutanLCD5clearEv+0x48>
    2782:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <printf_chars>
    2786:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <printf_chars+0x1>
    278a:	e2 0f       	add	r30, r18
    278c:	f3 1f       	adc	r31, r19
    278e:	a0 83       	st	Z, r26
    2790:	6f 5f       	subi	r22, 0xFF	; 255
    2792:	e7 cf       	rjmp	.-50     	; 0x2762 <_ZN12OrangutanLCD5clearEv+0x16>
    2794:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <col>
    2798:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <row>
    279c:	08 95       	ret

0000279e <clear>:
    279e:	0e 94 a6 13 	call	0x274c	; 0x274c <_ZN12OrangutanLCD5clearEv>
    27a2:	08 95       	ret

000027a4 <_ZN12OrangutanLCD5printEPKc>:
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	ec 01       	movw	r28, r24
    27aa:	89 91       	ld	r24, Y+
    27ac:	88 23       	and	r24, r24
    27ae:	19 f0       	breq	.+6      	; 0x27b6 <_ZN12OrangutanLCD5printEPKc+0x12>
    27b0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZN12OrangutanLCD9send_dataEh>
    27b4:	fa cf       	rjmp	.-12     	; 0x27aa <_ZN12OrangutanLCD5printEPKc+0x6>
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	08 95       	ret

000027bc <print>:
    27bc:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_ZN12OrangutanLCD5printEPKc>
    27c0:	08 95       	ret

000027c2 <_ZN12OrangutanLCD5printEm>:
    27c2:	aa e0       	ldi	r26, 0x0A	; 10
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e7 ee       	ldi	r30, 0xE7	; 231
    27c8:	f3 e1       	ldi	r31, 0x13	; 19
    27ca:	0c 94 61 1d 	jmp	0x3ac2	; 0x3ac2 <__prologue_saves__+0x14>
    27ce:	1a e0       	ldi	r17, 0x0A	; 10
    27d0:	5a e0       	ldi	r21, 0x0A	; 10
    27d2:	c5 2e       	mov	r12, r21
    27d4:	d1 2c       	mov	r13, r1
    27d6:	e1 2c       	mov	r14, r1
    27d8:	f1 2c       	mov	r15, r1
    27da:	06 2f       	mov	r16, r22
    27dc:	a7 01       	movw	r20, r14
    27de:	96 01       	movw	r18, r12
    27e0:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__udivmodsi4>
    27e4:	ca 01       	movw	r24, r20
    27e6:	b9 01       	movw	r22, r18
    27e8:	11 50       	subi	r17, 0x01	; 1
    27ea:	e1 e0       	ldi	r30, 0x01	; 1
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	ec 0f       	add	r30, r28
    27f0:	fd 1f       	adc	r31, r29
    27f2:	e1 0f       	add	r30, r17
    27f4:	f1 1d       	adc	r31, r1
    27f6:	00 5d       	subi	r16, 0xD0	; 208
    27f8:	2a e0       	ldi	r18, 0x0A	; 10
    27fa:	62 9f       	mul	r22, r18
    27fc:	00 19       	sub	r16, r0
    27fe:	11 24       	eor	r1, r1
    2800:	00 83       	st	Z, r16
    2802:	61 15       	cp	r22, r1
    2804:	71 05       	cpc	r23, r1
    2806:	81 05       	cpc	r24, r1
    2808:	91 05       	cpc	r25, r1
    280a:	39 f7       	brne	.-50     	; 0x27da <_ZN12OrangutanLCD5printEm+0x18>
    280c:	1a 30       	cpi	r17, 0x0A	; 10
    280e:	58 f4       	brcc	.+22     	; 0x2826 <_ZN12OrangutanLCD5printEm+0x64>
    2810:	e1 e0       	ldi	r30, 0x01	; 1
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	ec 0f       	add	r30, r28
    2816:	fd 1f       	adc	r31, r29
    2818:	e1 0f       	add	r30, r17
    281a:	f1 1d       	adc	r31, r1
    281c:	80 81       	ld	r24, Z
    281e:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZN12OrangutanLCD9send_dataEh>
    2822:	1f 5f       	subi	r17, 0xFF	; 255
    2824:	f3 cf       	rjmp	.-26     	; 0x280c <_ZN12OrangutanLCD5printEm+0x4a>
    2826:	2a 96       	adiw	r28, 0x0a	; 10
    2828:	e8 e0       	ldi	r30, 0x08	; 8
    282a:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <__epilogue_restores__+0x14>

0000282e <_ZN12OrangutanLCD5printEl>:
    282e:	cf 92       	push	r12
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	6b 01       	movw	r12, r22
    2838:	7c 01       	movw	r14, r24
    283a:	97 ff       	sbrs	r25, 7
    283c:	0b c0       	rjmp	.+22     	; 0x2854 <_ZN12OrangutanLCD5printEl+0x26>
    283e:	f0 94       	com	r15
    2840:	e0 94       	com	r14
    2842:	d0 94       	com	r13
    2844:	c0 94       	com	r12
    2846:	c1 1c       	adc	r12, r1
    2848:	d1 1c       	adc	r13, r1
    284a:	e1 1c       	adc	r14, r1
    284c:	f1 1c       	adc	r15, r1
    284e:	8d e2       	ldi	r24, 0x2D	; 45
    2850:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZN12OrangutanLCD9send_dataEh>
    2854:	c7 01       	movw	r24, r14
    2856:	b6 01       	movw	r22, r12
    2858:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <_ZN12OrangutanLCD5printEm>
    285c:	ff 90       	pop	r15
    285e:	ef 90       	pop	r14
    2860:	df 90       	pop	r13
    2862:	cf 90       	pop	r12
    2864:	08 95       	ret

00002866 <print_long>:
    2866:	0e 94 17 14 	call	0x282e	; 0x282e <_ZN12OrangutanLCD5printEl>
    286a:	08 95       	ret

0000286c <_ZN12OrangutanLCD6gotoXYEhh>:
    286c:	a5 e0       	ldi	r26, 0x05	; 5
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	ec e3       	ldi	r30, 0x3C	; 60
    2872:	f4 e1       	ldi	r31, 0x14	; 20
    2874:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <__prologue_saves__+0x1e>
    2878:	18 2f       	mov	r17, r24
    287a:	80 e8       	ldi	r24, 0x80	; 128
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	80 ec       	ldi	r24, 0xC0	; 192
    2880:	8a 83       	std	Y+2, r24	; 0x02
    2882:	84 e9       	ldi	r24, 0x94	; 148
    2884:	8b 83       	std	Y+3, r24	; 0x03
    2886:	84 ed       	ldi	r24, 0xD4	; 212
    2888:	8c 83       	std	Y+4, r24	; 0x04
    288a:	fe 01       	movw	r30, r28
    288c:	e6 0f       	add	r30, r22
    288e:	f1 1d       	adc	r31, r1
    2890:	81 81       	ldd	r24, Z+1	; 0x01
    2892:	81 0f       	add	r24, r17
    2894:	6d 83       	std	Y+5, r22	; 0x05
    2896:	0e 94 55 13 	call	0x26aa	; 0x26aa <_ZN12OrangutanLCD8send_cmdEh>
    289a:	10 93 99 01 	sts	0x0199, r17	; 0x800199 <col>
    289e:	6d 81       	ldd	r22, Y+5	; 0x05
    28a0:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <row>
    28a4:	25 96       	adiw	r28, 0x05	; 5
    28a6:	e3 e0       	ldi	r30, 0x03	; 3
    28a8:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <__epilogue_restores__+0x1e>

000028ac <lcd_goto_xy>:
    28ac:	0e 94 36 14 	call	0x286c	; 0x286c <_ZN12OrangutanLCD6gotoXYEhh>
    28b0:	08 95       	ret

000028b2 <_ZN16OrangutanDigital9setOutputEhh>:
    28b2:	88 30       	cpi	r24, 0x08	; 8
    28b4:	58 f4       	brcc	.+22     	; 0x28cc <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	01 c0       	rjmp	.+2      	; 0x28bc <_ZN16OrangutanDigital9setOutputEhh+0xa>
    28ba:	99 0f       	add	r25, r25
    28bc:	8a 95       	dec	r24
    28be:	ea f7       	brpl	.-6      	; 0x28ba <_ZN16OrangutanDigital9setOutputEhh+0x8>
    28c0:	89 2f       	mov	r24, r25
    28c2:	aa e2       	ldi	r26, 0x2A	; 42
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	eb e2       	ldi	r30, 0x2B	; 43
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	21 c0       	rjmp	.+66     	; 0x290e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    28cc:	8e 30       	cpi	r24, 0x0E	; 14
    28ce:	60 f4       	brcc	.+24     	; 0x28e8 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    28d0:	98 ef       	ldi	r25, 0xF8	; 248
    28d2:	98 0f       	add	r25, r24
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	01 c0       	rjmp	.+2      	; 0x28da <_ZN16OrangutanDigital9setOutputEhh+0x28>
    28d8:	88 0f       	add	r24, r24
    28da:	9a 95       	dec	r25
    28dc:	ea f7       	brpl	.-6      	; 0x28d8 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    28de:	a4 e2       	ldi	r26, 0x24	; 36
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e5 e2       	ldi	r30, 0x25	; 37
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	13 c0       	rjmp	.+38     	; 0x290e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    28e8:	85 31       	cpi	r24, 0x15	; 21
    28ea:	60 f4       	brcc	.+24     	; 0x2904 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    28ec:	92 ef       	ldi	r25, 0xF2	; 242
    28ee:	98 0f       	add	r25, r24
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    28f4:	88 0f       	add	r24, r24
    28f6:	9a 95       	dec	r25
    28f8:	ea f7       	brpl	.-6      	; 0x28f4 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    28fa:	a7 e2       	ldi	r26, 0x27	; 39
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e8 e2       	ldi	r30, 0x28	; 40
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	05 c0       	rjmp	.+10     	; 0x290e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	a0 e0       	ldi	r26, 0x00	; 0
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e0 e0       	ldi	r30, 0x00	; 0
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	6f 3f       	cpi	r22, 0xFF	; 255
    2910:	19 f4       	brne	.+6      	; 0x2918 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    2912:	90 81       	ld	r25, Z
    2914:	98 27       	eor	r25, r24
    2916:	09 c0       	rjmp	.+18     	; 0x292a <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2918:	66 23       	and	r22, r22
    291a:	19 f0       	breq	.+6      	; 0x2922 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    291c:	90 81       	ld	r25, Z
    291e:	98 2b       	or	r25, r24
    2920:	04 c0       	rjmp	.+8      	; 0x292a <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2922:	20 81       	ld	r18, Z
    2924:	98 2f       	mov	r25, r24
    2926:	90 95       	com	r25
    2928:	92 23       	and	r25, r18
    292a:	90 83       	st	Z, r25
    292c:	9c 91       	ld	r25, X
    292e:	98 2b       	or	r25, r24
    2930:	9c 93       	st	X, r25
    2932:	08 95       	ret

00002934 <_ZN15OrangutanMotors5init2Ev>:
    2934:	83 ef       	ldi	r24, 0xF3	; 243
    2936:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    293a:	84 bd       	out	0x24, r24	; 36
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2942:	85 bd       	out	0x25, r24	; 37
    2944:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2948:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    294c:	18 bc       	out	0x28, r1	; 40
    294e:	17 bc       	out	0x27, r1	; 39
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	86 e0       	ldi	r24, 0x06	; 6
    2954:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN16OrangutanDigital9setOutputEhh>
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	85 e0       	ldi	r24, 0x05	; 5
    295c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN16OrangutanDigital9setOutputEhh>
    2960:	60 e0       	ldi	r22, 0x00	; 0
    2962:	8b e0       	ldi	r24, 0x0B	; 11
    2964:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN16OrangutanDigital9setOutputEhh>
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	83 e0       	ldi	r24, 0x03	; 3
    296c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_ZN16OrangutanDigital9setOutputEhh>
    2970:	08 95       	ret

00002972 <_ZN15OrangutanMotors4initEv>:
    2972:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    2976:	81 11       	cpse	r24, r1
    2978:	05 c0       	rjmp	.+10     	; 0x2984 <_ZN15OrangutanMotors4initEv+0x12>
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    2980:	0e 94 9a 14 	call	0x2934	; 0x2934 <_ZN15OrangutanMotors5init2Ev>
    2984:	08 95       	ret

00002986 <_ZN15OrangutanMotors10setM1SpeedEi>:
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	ec 01       	movw	r28, r24
    298c:	0e 94 b9 14 	call	0x2972	; 0x2972 <_ZN15OrangutanMotors4initEv>
    2990:	d7 ff       	sbrs	r29, 7
    2992:	05 c0       	rjmp	.+10     	; 0x299e <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    2994:	d1 95       	neg	r29
    2996:	c1 95       	neg	r28
    2998:	d1 09       	sbc	r29, r1
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	01 c0       	rjmp	.+2      	; 0x29a0 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	cf 3f       	cpi	r28, 0xFF	; 255
    29a2:	d1 05       	cpc	r29, r1
    29a4:	19 f0       	breq	.+6      	; 0x29ac <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    29a6:	14 f0       	brlt	.+4      	; 0x29ac <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    29a8:	cf ef       	ldi	r28, 0xFF	; 255
    29aa:	d0 e0       	ldi	r29, 0x00	; 0
    29ac:	88 23       	and	r24, r24
    29ae:	19 f0       	breq	.+6      	; 0x29b6 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    29b0:	18 bc       	out	0x28, r1	; 40
    29b2:	c7 bd       	out	0x27, r28	; 39
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    29b6:	c8 bd       	out	0x28, r28	; 40
    29b8:	17 bc       	out	0x27, r1	; 39
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <_ZN15OrangutanMotors10setM2SpeedEi>:
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	ec 01       	movw	r28, r24
    29c6:	0e 94 b9 14 	call	0x2972	; 0x2972 <_ZN15OrangutanMotors4initEv>
    29ca:	d7 ff       	sbrs	r29, 7
    29cc:	05 c0       	rjmp	.+10     	; 0x29d8 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    29ce:	d1 95       	neg	r29
    29d0:	c1 95       	neg	r28
    29d2:	d1 09       	sbc	r29, r1
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	cf 3f       	cpi	r28, 0xFF	; 255
    29dc:	d1 05       	cpc	r29, r1
    29de:	19 f0       	breq	.+6      	; 0x29e6 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    29e0:	14 f0       	brlt	.+4      	; 0x29e6 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    29e2:	cf ef       	ldi	r28, 0xFF	; 255
    29e4:	d0 e0       	ldi	r29, 0x00	; 0
    29e6:	88 23       	and	r24, r24
    29e8:	29 f0       	breq	.+10     	; 0x29f4 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    29ea:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    29ee:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    29f2:	04 c0       	rjmp	.+8      	; 0x29fc <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    29f4:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    29f8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	08 95       	ret

00002a02 <_ZN15OrangutanMotors9setSpeedsEii>:
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	eb 01       	movw	r28, r22
    2a08:	0e 94 c3 14 	call	0x2986	; 0x2986 <_ZN15OrangutanMotors10setM1SpeedEi>
    2a0c:	ce 01       	movw	r24, r28
    2a0e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <_ZN15OrangutanMotors10setM2SpeedEi>
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	08 95       	ret

00002a18 <set_motors>:
    2a18:	0e 94 01 15 	call	0x2a02	; 0x2a02 <_ZN15OrangutanMotors9setSpeedsEii>
    2a1c:	08 95       	ret

00002a1e <_ZN20OrangutanPushbuttons5init2Ev>:
    2a1e:	84 b1       	in	r24, 0x04	; 4
    2a20:	8d 7c       	andi	r24, 0xCD	; 205
    2a22:	84 b9       	out	0x04, r24	; 4
    2a24:	85 b1       	in	r24, 0x05	; 5
    2a26:	82 63       	ori	r24, 0x32	; 50
    2a28:	85 b9       	out	0x05, r24	; 5
    2a2a:	85 e0       	ldi	r24, 0x05	; 5
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	6f 93       	push	r22
    2a30:	64 e0       	ldi	r22, 0x04	; 4
    2a32:	6a 95       	dec	r22
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2a36:	6f 91       	pop	r22
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	c9 f7       	brne	.-14     	; 0x2a2e <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2a3c:	08 95       	ret

00002a3e <_ZN20OrangutanPushbuttons4initEv>:
    2a3e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2a42:	81 11       	cpse	r24, r1
    2a44:	05 c0       	rjmp	.+10     	; 0x2a50 <_ZN20OrangutanPushbuttons4initEv+0x12>
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2a4c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <_ZN20OrangutanPushbuttons5init2Ev>
    2a50:	08 95       	ret

00002a52 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2a52:	cf 93       	push	r28
    2a54:	c8 2f       	mov	r28, r24
    2a56:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_ZN20OrangutanPushbuttons4initEv>
    2a5a:	83 b1       	in	r24, 0x03	; 3
    2a5c:	8c 23       	and	r24, r28
    2a5e:	e9 f3       	breq	.-6      	; 0x2a5a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2a60:	8a e0       	ldi	r24, 0x0A	; 10
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <delay_ms>
    2a68:	83 b1       	in	r24, 0x03	; 3
    2a6a:	8c 23       	and	r24, r28
    2a6c:	b1 f3       	breq	.-20     	; 0x2a5a <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2a6e:	83 b1       	in	r24, 0x03	; 3
    2a70:	8c 23       	and	r24, r28
    2a72:	cf 91       	pop	r28
    2a74:	08 95       	ret

00002a76 <wait_for_button_release>:
    2a76:	0e 94 29 15 	call	0x2a52	; 0x2a52 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2a7a:	08 95       	ret

00002a7c <_ZN20OrangutanPushbuttons9isPressedEh>:
    2a7c:	a1 e0       	ldi	r26, 0x01	; 1
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e4 e4       	ldi	r30, 0x44	; 68
    2a82:	f5 e1       	ldi	r31, 0x15	; 21
    2a84:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__prologue_saves__+0x20>
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <_ZN20OrangutanPushbuttons4initEv>
    2a8e:	93 b1       	in	r25, 0x03	; 3
    2a90:	90 95       	com	r25
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	89 23       	and	r24, r25
    2a96:	21 96       	adiw	r28, 0x01	; 1
    2a98:	e2 e0       	ldi	r30, 0x02	; 2
    2a9a:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <__epilogue_restores__+0x20>

00002a9e <button_is_pressed>:
    2a9e:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <_ZN20OrangutanPushbuttons9isPressedEh>
    2aa2:	08 95       	ret

00002aa4 <serial_receive_buffer_full>:
    2aa4:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <_ZN15OrangutanSerial5portsE+0x2>
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZN15OrangutanSerial5portsE+0x4>
    2aae:	29 13       	cpse	r18, r25
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	08 95       	ret

00002ab4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	9a e0       	ldi	r25, 0x0A	; 10
    2aba:	89 9f       	mul	r24, r25
    2abc:	f0 01       	movw	r30, r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	e3 56       	subi	r30, 0x63	; 99
    2ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac4:	80 85       	ldd	r24, Z+8	; 0x08
    2ac6:	91 85       	ldd	r25, Z+9	; 0x09
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	21 f0       	breq	.+8      	; 0x2ad4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2acc:	52 81       	ldd	r21, Z+2	; 0x02
    2ace:	44 81       	ldd	r20, Z+4	; 0x04
    2ad0:	54 17       	cp	r21, r20
    2ad2:	80 f0       	brcs	.+32     	; 0x2af4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    2ad4:	8a e0       	ldi	r24, 0x0A	; 10
    2ad6:	82 9f       	mul	r24, r18
    2ad8:	f0 01       	movw	r30, r0
    2ada:	83 9f       	mul	r24, r19
    2adc:	f0 0d       	add	r31, r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	e3 56       	subi	r30, 0x63	; 99
    2ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae4:	92 81       	ldd	r25, Z+2	; 0x02
    2ae6:	84 81       	ldd	r24, Z+4	; 0x04
    2ae8:	98 13       	cpse	r25, r24
    2aea:	0e c0       	rjmp	.+28     	; 0x2b08 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    2aec:	85 81       	ldd	r24, Z+5	; 0x05
    2aee:	81 11       	cpse	r24, r1
    2af0:	0a c0       	rjmp	.+20     	; 0x2b06 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    2af2:	08 95       	ret
    2af4:	42 81       	ldd	r20, Z+2	; 0x02
    2af6:	dc 01       	movw	r26, r24
    2af8:	a4 0f       	add	r26, r20
    2afa:	b1 1d       	adc	r27, r1
    2afc:	6c 93       	st	X, r22
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	8f 5f       	subi	r24, 0xFF	; 255
    2b02:	82 83       	std	Z+2, r24	; 0x02
    2b04:	e7 cf       	rjmp	.-50     	; 0x2ad4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2b06:	12 82       	std	Z+2, r1	; 0x02
    2b08:	08 95       	ret

00002b0a <_ZN15OrangutanSerial15serial_rx_checkEh>:
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b12:	9f 77       	andi	r25, 0x7F	; 127
    2b14:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b18:	c8 2f       	mov	r28, r24
    2b1a:	d0 e0       	ldi	r29, 0x00	; 0
    2b1c:	9a e0       	ldi	r25, 0x0A	; 10
    2b1e:	89 9f       	mul	r24, r25
    2b20:	f0 01       	movw	r30, r0
    2b22:	11 24       	eor	r1, r1
    2b24:	e3 56       	subi	r30, 0x63	; 99
    2b26:	fe 4f       	sbci	r31, 0xFE	; 254
    2b28:	20 85       	ldd	r18, Z+8	; 0x08
    2b2a:	31 85       	ldd	r19, Z+9	; 0x09
    2b2c:	23 2b       	or	r18, r19
    2b2e:	41 f0       	breq	.+16     	; 0x2b40 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2b30:	22 81       	ldd	r18, Z+2	; 0x02
    2b32:	94 81       	ldd	r25, Z+4	; 0x04
    2b34:	29 17       	cp	r18, r25
    2b36:	20 f4       	brcc	.+8      	; 0x2b40 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2b38:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2b3c:	97 fd       	sbrc	r25, 7
    2b3e:	11 c0       	rjmp	.+34     	; 0x2b62 <_ZN15OrangutanSerial15serial_rx_checkEh+0x58>
    2b40:	8a e0       	ldi	r24, 0x0A	; 10
    2b42:	8c 9f       	mul	r24, r28
    2b44:	f0 01       	movw	r30, r0
    2b46:	8d 9f       	mul	r24, r29
    2b48:	f0 0d       	add	r31, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	e3 56       	subi	r30, 0x63	; 99
    2b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b50:	80 81       	ld	r24, Z
    2b52:	81 11       	cpse	r24, r1
    2b54:	0b c0       	rjmp	.+22     	; 0x2b6c <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2b56:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b5a:	80 68       	ori	r24, 0x80	; 128
    2b5c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2b62:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2b66:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2b6a:	ea cf       	rjmp	.-44     	; 0x2b40 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    2b72:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b76:	9f 77       	andi	r25, 0x7F	; 127
    2b78:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b7c:	9a e0       	ldi	r25, 0x0A	; 10
    2b7e:	89 9f       	mul	r24, r25
    2b80:	f0 01       	movw	r30, r0
    2b82:	11 24       	eor	r1, r1
    2b84:	e3 56       	subi	r30, 0x63	; 99
    2b86:	fe 4f       	sbci	r31, 0xFE	; 254
    2b88:	71 87       	std	Z+9, r23	; 0x09
    2b8a:	60 87       	std	Z+8, r22	; 0x08
    2b8c:	12 82       	std	Z+2, r1	; 0x02
    2b8e:	44 83       	std	Z+4, r20	; 0x04
    2b90:	25 83       	std	Z+5, r18	; 0x05
    2b92:	80 81       	ld	r24, Z
    2b94:	81 11       	cpse	r24, r1
    2b96:	05 c0       	rjmp	.+10     	; 0x2ba2 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x30>
    2b98:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b9c:	80 68       	ori	r24, 0x80	; 128
    2b9e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ba2:	08 95       	ret

00002ba4 <_ZN15OrangutanSerial7receiveEPch>:
    2ba4:	46 2f       	mov	r20, r22
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	bc 01       	movw	r22, r24
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN15OrangutanSerial14receive_inlineEhPchh>
    2bb0:	08 95       	ret

00002bb2 <serial_receive>:
    2bb2:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <_ZN15OrangutanSerial7receiveEPch>
    2bb6:	08 95       	ret

00002bb8 <__vector_18>:
    2bb8:	1f 92       	push	r1
    2bba:	0f 92       	push	r0
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	0f 92       	push	r0
    2bc0:	11 24       	eor	r1, r1
    2bc2:	2f 93       	push	r18
    2bc4:	3f 93       	push	r19
    2bc6:	4f 93       	push	r20
    2bc8:	5f 93       	push	r21
    2bca:	6f 93       	push	r22
    2bcc:	7f 93       	push	r23
    2bce:	8f 93       	push	r24
    2bd0:	9f 93       	push	r25
    2bd2:	af 93       	push	r26
    2bd4:	bf 93       	push	r27
    2bd6:	ef 93       	push	r30
    2bd8:	ff 93       	push	r31
    2bda:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2be4:	ff 91       	pop	r31
    2be6:	ef 91       	pop	r30
    2be8:	bf 91       	pop	r27
    2bea:	af 91       	pop	r26
    2bec:	9f 91       	pop	r25
    2bee:	8f 91       	pop	r24
    2bf0:	7f 91       	pop	r23
    2bf2:	6f 91       	pop	r22
    2bf4:	5f 91       	pop	r21
    2bf6:	4f 91       	pop	r20
    2bf8:	3f 91       	pop	r19
    2bfa:	2f 91       	pop	r18
    2bfc:	0f 90       	pop	r0
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	0f 90       	pop	r0
    2c02:	1f 90       	pop	r1
    2c04:	18 95       	reti

00002c06 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2c06:	9a e0       	ldi	r25, 0x0A	; 10
    2c08:	89 9f       	mul	r24, r25
    2c0a:	f0 01       	movw	r30, r0
    2c0c:	11 24       	eor	r1, r1
    2c0e:	e3 56       	subi	r30, 0x63	; 99
    2c10:	fe 4f       	sbci	r31, 0xFE	; 254
    2c12:	86 81       	ldd	r24, Z+6	; 0x06
    2c14:	97 81       	ldd	r25, Z+7	; 0x07
    2c16:	89 2b       	or	r24, r25
    2c18:	59 f0       	breq	.+22     	; 0x2c30 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2c1a:	91 81       	ldd	r25, Z+1	; 0x01
    2c1c:	83 81       	ldd	r24, Z+3	; 0x03
    2c1e:	98 17       	cp	r25, r24
    2c20:	38 f4       	brcc	.+14     	; 0x2c30 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2c22:	80 81       	ld	r24, Z
    2c24:	81 11       	cpse	r24, r1
    2c26:	04 c0       	rjmp	.+8      	; 0x2c30 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2c28:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c2c:	80 62       	ori	r24, 0x20	; 32
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    2c30:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c34:	8f 7d       	andi	r24, 0xDF	; 223
    2c36:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c3a:	08 95       	ret

00002c3c <_ZN15OrangutanSerial15initUART_inlineEh>:
    2c3c:	9a e0       	ldi	r25, 0x0A	; 10
    2c3e:	89 9f       	mul	r24, r25
    2c40:	f0 01       	movw	r30, r0
    2c42:	11 24       	eor	r1, r1
    2c44:	e3 56       	subi	r30, 0x63	; 99
    2c46:	fe 4f       	sbci	r31, 0xFE	; 254
    2c48:	90 81       	ld	r25, Z
    2c4a:	91 11       	cpse	r25, r1
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2c4e:	98 e9       	ldi	r25, 0x98	; 152
    2c50:	01 c0       	rjmp	.+2      	; 0x2c54 <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    2c52:	98 e1       	ldi	r25, 0x18	; 24
    2c54:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c58:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2c5c:	78 94       	sei
    2c5e:	08 95       	ret

00002c60 <serial_set_baud_rate>:
    2c60:	cf 92       	push	r12
    2c62:	df 92       	push	r13
    2c64:	ef 92       	push	r14
    2c66:	ff 92       	push	r15
    2c68:	6b 01       	movw	r12, r22
    2c6a:	7c 01       	movw	r14, r24
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <_ZN15OrangutanSerial15initUART_inlineEh>
    2c72:	a8 ef       	ldi	r26, 0xF8	; 248
    2c74:	bf ef       	ldi	r27, 0xFF	; 255
    2c76:	a7 01       	movw	r20, r14
    2c78:	96 01       	movw	r18, r12
    2c7a:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <__mulohisi3>
    2c7e:	73 5d       	subi	r23, 0xD3	; 211
    2c80:	8e 4c       	sbci	r24, 0xCE	; 206
    2c82:	9e 4f       	sbci	r25, 0xFE	; 254
    2c84:	e4 e0       	ldi	r30, 0x04	; 4
    2c86:	22 0f       	add	r18, r18
    2c88:	33 1f       	adc	r19, r19
    2c8a:	44 1f       	adc	r20, r20
    2c8c:	55 1f       	adc	r21, r21
    2c8e:	ea 95       	dec	r30
    2c90:	d1 f7       	brne	.-12     	; 0x2c86 <serial_set_baud_rate+0x26>
    2c92:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__udivmodsi4>
    2c96:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2c9a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    2c9e:	ff 90       	pop	r15
    2ca0:	ef 90       	pop	r14
    2ca2:	df 90       	pop	r13
    2ca4:	cf 90       	pop	r12
    2ca6:	08 95       	ret

00002ca8 <_ZN15OrangutanSerial4sendEPch>:
    2ca8:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_ZN15OrangutanSerial5portsE+0x7>
    2cac:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZN15OrangutanSerial5portsE+0x6>
    2cb0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2cb4:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2cbe:	08 95       	ret

00002cc0 <serial_send>:
    2cc0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <_ZN15OrangutanSerial4sendEPch>
    2cc4:	08 95       	ret

00002cc6 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    2cc6:	9a e0       	ldi	r25, 0x0A	; 10
    2cc8:	89 9f       	mul	r24, r25
    2cca:	f0 01       	movw	r30, r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	e3 56       	subi	r30, 0x63	; 99
    2cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd2:	26 81       	ldd	r18, Z+6	; 0x06
    2cd4:	37 81       	ldd	r19, Z+7	; 0x07
    2cd6:	21 15       	cp	r18, r1
    2cd8:	31 05       	cpc	r19, r1
    2cda:	41 f0       	breq	.+16     	; 0x2cec <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2cdc:	41 81       	ldd	r20, Z+1	; 0x01
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	49 17       	cp	r20, r25
    2ce2:	20 f4       	brcc	.+8      	; 0x2cec <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2ce4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2ce8:	95 fd       	sbrc	r25, 5
    2cea:	03 c0       	rjmp	.+6      	; 0x2cf2 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    2cec:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2cf0:	08 95       	ret
    2cf2:	91 81       	ldd	r25, Z+1	; 0x01
    2cf4:	d9 01       	movw	r26, r18
    2cf6:	a9 0f       	add	r26, r25
    2cf8:	b1 1d       	adc	r27, r1
    2cfa:	9c 91       	ld	r25, X
    2cfc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2d00:	91 81       	ldd	r25, Z+1	; 0x01
    2d02:	9f 5f       	subi	r25, 0xFF	; 255
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	f2 cf       	rjmp	.-28     	; 0x2cec <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

00002d08 <_ZN15OrangutanSerial5checkEv>:
    2d08:	e1 ec       	ldi	r30, 0xC1	; 193
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	8f 7d       	andi	r24, 0xDF	; 223
    2d10:	80 83       	st	Z, r24
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <_ZN15OrangutanSerial15serial_rx_checkEh>
    2d1e:	08 95       	ret

00002d20 <_ZN15OrangutanSerial12sendBlockingEPch>:
    2d20:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_ZN15OrangutanSerial5portsE+0x7>
    2d24:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZN15OrangutanSerial5portsE+0x6>
    2d28:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2d2c:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	0e 94 03 16 	call	0x2c06	; 0x2c06 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2d36:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2d3a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2d3e:	98 17       	cp	r25, r24
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <_ZN15OrangutanSerial12sendBlockingEPch+0x28>
    2d42:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_ZN15OrangutanSerial5checkEv>
    2d46:	f7 cf       	rjmp	.-18     	; 0x2d36 <_ZN15OrangutanSerial12sendBlockingEPch+0x16>
    2d48:	08 95       	ret

00002d4a <serial_send_blocking>:
    2d4a:	0e 94 90 16 	call	0x2d20	; 0x2d20 <_ZN15OrangutanSerial12sendBlockingEPch>
    2d4e:	08 95       	ret

00002d50 <__vector_19>:
    2d50:	1f 92       	push	r1
    2d52:	0f 92       	push	r0
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	0f 92       	push	r0
    2d58:	11 24       	eor	r1, r1
    2d5a:	2f 93       	push	r18
    2d5c:	3f 93       	push	r19
    2d5e:	4f 93       	push	r20
    2d60:	5f 93       	push	r21
    2d62:	6f 93       	push	r22
    2d64:	7f 93       	push	r23
    2d66:	8f 93       	push	r24
    2d68:	9f 93       	push	r25
    2d6a:	af 93       	push	r26
    2d6c:	bf 93       	push	r27
    2d6e:	ef 93       	push	r30
    2d70:	ff 93       	push	r31
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2d78:	ff 91       	pop	r31
    2d7a:	ef 91       	pop	r30
    2d7c:	bf 91       	pop	r27
    2d7e:	af 91       	pop	r26
    2d80:	9f 91       	pop	r25
    2d82:	8f 91       	pop	r24
    2d84:	7f 91       	pop	r23
    2d86:	6f 91       	pop	r22
    2d88:	5f 91       	pop	r21
    2d8a:	4f 91       	pop	r20
    2d8c:	3f 91       	pop	r19
    2d8e:	2f 91       	pop	r18
    2d90:	0f 90       	pop	r0
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	0f 90       	pop	r0
    2d96:	1f 90       	pop	r1
    2d98:	18 95       	reti

00002d9a <__vector_9>:
    2d9a:	2f 92       	push	r2
    2d9c:	8f 93       	push	r24
    2d9e:	9f 93       	push	r25
    2da0:	2f b6       	in	r2, 0x3f	; 63
    2da2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <tickCount+0x1>
    2da6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <tickCount+0x2>
    2daa:	01 96       	adiw	r24, 0x01	; 1
    2dac:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <tickCount+0x1>
    2db0:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <tickCount+0x2>
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <tickCount+0x3>
    2dba:	89 1f       	adc	r24, r25
    2dbc:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <tickCount+0x3>
    2dc0:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <us_over_10+0x1>
    2dc4:	9c 5f       	subi	r25, 0xFC	; 252
    2dc6:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <us_over_10+0x1>
    2dca:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <us_over_10>
    2dce:	80 51       	subi	r24, 0x10	; 16
    2dd0:	97 42       	sbci	r25, 0x27	; 39
    2dd2:	c0 f0       	brcs	.+48     	; 0x2e04 <end>
    2dd4:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <us_over_10+0x1>
    2dd8:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <us_over_10>
    2ddc:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <msCounter>
    2de0:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <msCounter+0x1>
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <msCounter>
    2dea:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <msCounter+0x1>
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <msCounter+0x2>
    2df4:	89 1f       	adc	r24, r25
    2df6:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <msCounter+0x2>
    2dfa:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <msCounter+0x3>
    2dfe:	89 1f       	adc	r24, r25
    2e00:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <msCounter+0x3>

00002e04 <end>:
    2e04:	2f be       	out	0x3f, r2	; 63
    2e06:	9f 91       	pop	r25
    2e08:	8f 91       	pop	r24
    2e0a:	2f 90       	pop	r2
    2e0c:	18 95       	reti

00002e0e <_ZN13OrangutanTime17delayMillisecondsEj>:
    2e0e:	28 ee       	ldi	r18, 0xE8	; 232
    2e10:	33 e0       	ldi	r19, 0x03	; 3
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	48 f0       	brcs	.+18     	; 0x2e28 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2e16:	f9 01       	movw	r30, r18
    2e18:	6f 93       	push	r22
    2e1a:	64 e0       	ldi	r22, 0x04	; 4
    2e1c:	6a 95       	dec	r22
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2e20:	6f 91       	pop	r22
    2e22:	31 97       	sbiw	r30, 0x01	; 1
    2e24:	c9 f7       	brne	.-14     	; 0x2e18 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2e26:	f5 cf       	rjmp	.-22     	; 0x2e12 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2e28:	08 95       	ret

00002e2a <delay_ms>:
    2e2a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN13OrangutanTime17delayMillisecondsEj>
    2e2e:	08 95       	ret

00002e30 <_ZN13OrangutanTime5init2Ev>:
    2e30:	e0 e7       	ldi	r30, 0x70	; 112
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	8e 7f       	andi	r24, 0xFE	; 254
    2e38:	80 83       	st	Z, r24
    2e3a:	a0 eb       	ldi	r26, 0xB0	; 176
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	8c 91       	ld	r24, X
    2e40:	83 60       	ori	r24, 0x03	; 3
    2e42:	8c 93       	st	X, r24
    2e44:	a1 eb       	ldi	r26, 0xB1	; 177
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	8c 91       	ld	r24, X
    2e4a:	80 7f       	andi	r24, 0xF0	; 240
    2e4c:	8c 93       	st	X, r24
    2e4e:	8c 91       	ld	r24, X
    2e50:	82 60       	ori	r24, 0x02	; 2
    2e52:	8c 93       	st	X, r24
    2e54:	b8 9a       	sbi	0x17, 0	; 23
    2e56:	80 81       	ld	r24, Z
    2e58:	81 60       	ori	r24, 0x01	; 1
    2e5a:	80 83       	st	Z, r24
    2e5c:	78 94       	sei
    2e5e:	08 95       	ret

00002e60 <_ZN13OrangutanTime4initEv>:
    2e60:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2e64:	81 11       	cpse	r24, r1
    2e66:	05 c0       	rjmp	.+10     	; 0x2e72 <_ZN13OrangutanTime4initEv+0x12>
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2e6e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_ZN13OrangutanTime5init2Ev>
    2e72:	08 95       	ret

00002e74 <_ZN13OrangutanTime2msEv>:
    2e74:	0e 94 30 17 	call	0x2e60	; 0x2e60 <_ZN13OrangutanTime4initEv>
    2e78:	e0 e7       	ldi	r30, 0x70	; 112
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	8e 7f       	andi	r24, 0xFE	; 254
    2e80:	80 83       	st	Z, r24
    2e82:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <msCounter>
    2e86:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <msCounter+0x1>
    2e8a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <msCounter+0x2>
    2e8e:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <msCounter+0x3>
    2e92:	20 81       	ld	r18, Z
    2e94:	21 60       	ori	r18, 0x01	; 1
    2e96:	20 83       	st	Z, r18
    2e98:	08 95       	ret

00002e9a <get_ms>:
    2e9a:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN13OrangutanTime2msEv>
    2e9e:	08 95       	ret

00002ea0 <_ZN13OrangutanTime5resetEv>:
    2ea0:	0e 94 30 17 	call	0x2e60	; 0x2e60 <_ZN13OrangutanTime4initEv>
    2ea4:	e0 e7       	ldi	r30, 0x70	; 112
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	8e 7f       	andi	r24, 0xFE	; 254
    2eac:	80 83       	st	Z, r24
    2eae:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <msCounter>
    2eb2:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <msCounter+0x1>
    2eb6:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <msCounter+0x2>
    2eba:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <msCounter+0x3>
    2ebe:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <us_over_10+0x1>
    2ec2:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <us_over_10>
    2ec6:	80 81       	ld	r24, Z
    2ec8:	81 60       	ori	r24, 0x01	; 1
    2eca:	80 83       	st	Z, r24
    2ecc:	08 95       	ret

00002ece <calibrate_line_sensors>:
    2ece:	68 2f       	mov	r22, r24
    2ed0:	81 eb       	ldi	r24, 0xB1	; 177
    2ed2:	91 e0       	ldi	r25, 0x01	; 1
    2ed4:	0e 94 56 1b 	call	0x36ac	; 0x36ac <_ZN16PololuQTRSensors9calibrateEh>
    2ed8:	08 95       	ret

00002eda <read_line_sensors_calibrated>:
    2eda:	46 2f       	mov	r20, r22
    2edc:	bc 01       	movw	r22, r24
    2ede:	81 eb       	ldi	r24, 0xB1	; 177
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2ee6:	08 95       	ret

00002ee8 <read_line>:
    2ee8:	46 2f       	mov	r20, r22
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	bc 01       	movw	r22, r24
    2eee:	81 eb       	ldi	r24, 0xB1	; 177
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	0e 94 27 1c 	call	0x384e	; 0x384e <_ZN16PololuQTRSensors8readLineEPjhh>
    2ef6:	08 95       	ret

00002ef8 <_ZN9Pololu3pi4initEjh>:
    2ef8:	0f 93       	push	r16
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <_ZN9Pololu3pi4initEjh+0x8>
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <_ZN9Pololu3pi4initEjh+0xa>
    2f02:	1f 92       	push	r1
    2f04:	cd b7       	in	r28, 0x3d	; 61
    2f06:	de b7       	in	r29, 0x3e	; 62
    2f08:	9c 01       	movw	r18, r24
    2f0a:	85 e0       	ldi	r24, 0x05	; 5
    2f0c:	e0 e5       	ldi	r30, 0x50	; 80
    2f0e:	f1 e0       	ldi	r31, 0x01	; 1
    2f10:	de 01       	movw	r26, r28
    2f12:	11 96       	adiw	r26, 0x01	; 1
    2f14:	01 90       	ld	r0, Z+
    2f16:	0d 92       	st	X+, r0
    2f18:	8a 95       	dec	r24
    2f1a:	e1 f7       	brne	.-8      	; 0x2f14 <_ZN9Pololu3pi4initEjh+0x1c>
    2f1c:	66 23       	and	r22, r22
    2f1e:	11 f0       	breq	.+4      	; 0x2f24 <_ZN9Pololu3pi4initEjh+0x2c>
    2f20:	0f ef       	ldi	r16, 0xFF	; 255
    2f22:	01 c0       	rjmp	.+2      	; 0x2f26 <_ZN9Pololu3pi4initEjh+0x2e>
    2f24:	03 e1       	ldi	r16, 0x13	; 19
    2f26:	45 e0       	ldi	r20, 0x05	; 5
    2f28:	be 01       	movw	r22, r28
    2f2a:	6f 5f       	subi	r22, 0xFF	; 255
    2f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f2e:	81 eb       	ldi	r24, 0xB1	; 177
    2f30:	91 e0       	ldi	r25, 0x01	; 1
    2f32:	0e 94 4e 18 	call	0x309c	; 0x309c <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2f36:	81 eb       	ldi	r24, 0xB1	; 177
    2f38:	91 e0       	ldi	r25, 0x01	; 1
    2f3a:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16PololuQTRSensors11emittersOffEv>
    2f3e:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <_ZN13OrangutanTime5resetEv>
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	df 91       	pop	r29
    2f4e:	cf 91       	pop	r28
    2f50:	0f 91       	pop	r16
    2f52:	08 95       	ret

00002f54 <pololu_3pi_init>:
    2f54:	60 e0       	ldi	r22, 0x00	; 0
    2f56:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <_ZN9Pololu3pi4initEjh>
    2f5a:	08 95       	ret

00002f5c <_GLOBAL__sub_D_pololu_3pi_init>:
    2f5c:	81 eb       	ldi	r24, 0xB1	; 177
    2f5e:	91 e0       	ldi	r25, 0x01	; 1
    2f60:	0e 94 9c 1c 	call	0x3938	; 0x3938 <_ZN16PololuQTRSensorsD1Ev>
    2f64:	08 95       	ret

00002f66 <delay_us>:
    2f66:	6f 93       	push	r22
    2f68:	64 e0       	ldi	r22, 0x04	; 4
    2f6a:	6a 95       	dec	r22
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <delay_us+0x4>
    2f6e:	6f 91       	pop	r22
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	c9 f7       	brne	.-14     	; 0x2f66 <delay_us>
    2f74:	08 95       	ret

00002f76 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2f76:	fc 01       	movw	r30, r24
    2f78:	11 82       	std	Z+1, r1	; 0x01
    2f7a:	10 82       	st	Z, r1
    2f7c:	13 82       	std	Z+3, r1	; 0x03
    2f7e:	12 82       	std	Z+2, r1	; 0x02
    2f80:	15 82       	std	Z+5, r1	; 0x05
    2f82:	14 82       	std	Z+4, r1	; 0x04
    2f84:	16 82       	std	Z+6, r1	; 0x06
    2f86:	68 30       	cpi	r22, 0x08	; 8
    2f88:	68 f4       	brcc	.+26     	; 0x2fa4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2f8a:	89 e2       	ldi	r24, 0x29	; 41
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	80 83       	st	Z, r24
    2f92:	8b e2       	ldi	r24, 0x2B	; 43
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	93 83       	std	Z+3, r25	; 0x03
    2f98:	82 83       	std	Z+2, r24	; 0x02
    2f9a:	8a e2       	ldi	r24, 0x2A	; 42
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	95 83       	std	Z+5, r25	; 0x05
    2fa0:	84 83       	std	Z+4, r24	; 0x04
    2fa2:	1f c0       	rjmp	.+62     	; 0x2fe2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2fa4:	6e 30       	cpi	r22, 0x0E	; 14
    2fa6:	70 f4       	brcc	.+28     	; 0x2fc4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2fa8:	83 e2       	ldi	r24, 0x23	; 35
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	91 83       	std	Z+1, r25	; 0x01
    2fae:	80 83       	st	Z, r24
    2fb0:	85 e2       	ldi	r24, 0x25	; 37
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	93 83       	std	Z+3, r25	; 0x03
    2fb6:	82 83       	std	Z+2, r24	; 0x02
    2fb8:	84 e2       	ldi	r24, 0x24	; 36
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	95 83       	std	Z+5, r25	; 0x05
    2fbe:	84 83       	std	Z+4, r24	; 0x04
    2fc0:	68 50       	subi	r22, 0x08	; 8
    2fc2:	0f c0       	rjmp	.+30     	; 0x2fe2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2fc4:	65 31       	cpi	r22, 0x15	; 21
    2fc6:	98 f4       	brcc	.+38     	; 0x2fee <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2fc8:	86 e2       	ldi	r24, 0x26	; 38
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
    2fd0:	88 e2       	ldi	r24, 0x28	; 40
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	93 83       	std	Z+3, r25	; 0x03
    2fd6:	82 83       	std	Z+2, r24	; 0x02
    2fd8:	87 e2       	ldi	r24, 0x27	; 39
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	95 83       	std	Z+5, r25	; 0x05
    2fde:	84 83       	std	Z+4, r24	; 0x04
    2fe0:	6e 50       	subi	r22, 0x0E	; 14
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	01 c0       	rjmp	.+2      	; 0x2fe8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2fe6:	88 0f       	add	r24, r24
    2fe8:	6a 95       	dec	r22
    2fea:	ea f7       	brpl	.-6      	; 0x2fe6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2fec:	86 83       	std	Z+6, r24	; 0x06
    2fee:	08 95       	ret

00002ff0 <_ZN16PololuQTRSensors4initEhhh>:
    2ff0:	a7 e0       	ldi	r26, 0x07	; 7
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	ee ef       	ldi	r30, 0xFE	; 254
    2ff6:	f7 e1       	ldi	r31, 0x17	; 23
    2ff8:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__+0x1c>
    2ffc:	8c 01       	movw	r16, r24
    2ffe:	fc 01       	movw	r30, r24
    3000:	11 82       	std	Z+1, r1	; 0x01
    3002:	10 82       	st	Z, r1
    3004:	13 82       	std	Z+3, r1	; 0x03
    3006:	12 82       	std	Z+2, r1	; 0x02
    3008:	15 82       	std	Z+5, r1	; 0x05
    300a:	14 82       	std	Z+4, r1	; 0x04
    300c:	17 82       	std	Z+7, r1	; 0x07
    300e:	16 82       	std	Z+6, r1	; 0x06
    3010:	61 31       	cpi	r22, 0x11	; 17
    3012:	18 f0       	brcs	.+6      	; 0x301a <_ZN16PololuQTRSensors4initEhhh+0x2a>
    3014:	80 e1       	ldi	r24, 0x10	; 16
    3016:	80 87       	std	Z+8, r24	; 0x08
    3018:	02 c0       	rjmp	.+4      	; 0x301e <_ZN16PololuQTRSensors4initEhhh+0x2e>
    301a:	fc 01       	movw	r30, r24
    301c:	60 87       	std	Z+8, r22	; 0x08
    301e:	f8 01       	movw	r30, r16
    3020:	20 8b       	std	Z+16, r18	; 0x10
    3022:	64 2f       	mov	r22, r20
    3024:	ce 01       	movw	r24, r28
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    302c:	8f 81       	ldd	r24, Y+7	; 0x07
    302e:	f8 01       	movw	r30, r16
    3030:	81 87       	std	Z+9, r24	; 0x09
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	9c 81       	ldd	r25, Y+4	; 0x04
    3036:	93 87       	std	Z+11, r25	; 0x0b
    3038:	82 87       	std	Z+10, r24	; 0x0a
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	9e 81       	ldd	r25, Y+6	; 0x06
    303e:	95 87       	std	Z+13, r25	; 0x0d
    3040:	84 87       	std	Z+12, r24	; 0x0c
    3042:	27 96       	adiw	r28, 0x07	; 7
    3044:	e4 e0       	ldi	r30, 0x04	; 4
    3046:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x1c>

0000304a <_ZN16PololuQTRSensors11emittersOffEv>:
    304a:	fc 01       	movw	r30, r24
    304c:	a4 85       	ldd	r26, Z+12	; 0x0c
    304e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3050:	10 97       	sbiw	r26, 0x00	; 0
    3052:	79 f0       	breq	.+30     	; 0x3072 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    3054:	8c 91       	ld	r24, X
    3056:	91 85       	ldd	r25, Z+9	; 0x09
    3058:	89 2b       	or	r24, r25
    305a:	8c 93       	st	X, r24
    305c:	a2 85       	ldd	r26, Z+10	; 0x0a
    305e:	b3 85       	ldd	r27, Z+11	; 0x0b
    3060:	9c 91       	ld	r25, X
    3062:	81 85       	ldd	r24, Z+9	; 0x09
    3064:	80 95       	com	r24
    3066:	89 23       	and	r24, r25
    3068:	8c 93       	st	X, r24
    306a:	88 ec       	ldi	r24, 0xC8	; 200
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <delay_us>
    3072:	08 95       	ret

00003074 <_ZN16PololuQTRSensors10emittersOnEv>:
    3074:	fc 01       	movw	r30, r24
    3076:	a4 85       	ldd	r26, Z+12	; 0x0c
    3078:	b5 85       	ldd	r27, Z+13	; 0x0d
    307a:	10 97       	sbiw	r26, 0x00	; 0
    307c:	71 f0       	breq	.+28     	; 0x309a <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    307e:	8c 91       	ld	r24, X
    3080:	91 85       	ldd	r25, Z+9	; 0x09
    3082:	89 2b       	or	r24, r25
    3084:	8c 93       	st	X, r24
    3086:	a2 85       	ldd	r26, Z+10	; 0x0a
    3088:	b3 85       	ldd	r27, Z+11	; 0x0b
    308a:	8c 91       	ld	r24, X
    308c:	91 85       	ldd	r25, Z+9	; 0x09
    308e:	89 2b       	or	r24, r25
    3090:	8c 93       	st	X, r24
    3092:	88 ec       	ldi	r24, 0xC8	; 200
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <delay_us>
    309a:	08 95       	ret

0000309c <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    309c:	a7 e0       	ldi	r26, 0x07	; 7
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	e4 e5       	ldi	r30, 0x54	; 84
    30a2:	f8 e1       	ldi	r31, 0x18	; 24
    30a4:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__prologue_saves__+0x6>
    30a8:	7c 01       	movw	r14, r24
    30aa:	4b 01       	movw	r8, r22
    30ac:	64 2f       	mov	r22, r20
    30ae:	39 01       	movw	r6, r18
    30b0:	40 2f       	mov	r20, r16
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <_ZN16PololuQTRSensors4initEhhh>
    30b8:	87 01       	movw	r16, r14
    30ba:	0f 5b       	subi	r16, 0xBF	; 191
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	f8 01       	movw	r30, r16
    30c0:	10 82       	st	Z, r1
    30c2:	67 01       	movw	r12, r14
    30c4:	f2 e4       	ldi	r31, 0x42	; 66
    30c6:	cf 0e       	add	r12, r31
    30c8:	d1 1c       	adc	r13, r1
    30ca:	f6 01       	movw	r30, r12
    30cc:	10 82       	st	Z, r1
    30ce:	57 01       	movw	r10, r14
    30d0:	f3 e4       	ldi	r31, 0x43	; 67
    30d2:	af 0e       	add	r10, r31
    30d4:	b1 1c       	adc	r11, r1
    30d6:	f5 01       	movw	r30, r10
    30d8:	10 82       	st	Z, r1
    30da:	f7 01       	movw	r30, r14
    30dc:	77 86       	std	Z+15, r7	; 0x0f
    30de:	66 86       	std	Z+14, r6	; 0x0e
    30e0:	51 2c       	mov	r5, r1
    30e2:	f7 01       	movw	r30, r14
    30e4:	80 85       	ldd	r24, Z+8	; 0x08
    30e6:	58 16       	cp	r5, r24
    30e8:	50 f5       	brcc	.+84     	; 0x313e <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    30ea:	65 2c       	mov	r6, r5
    30ec:	71 2c       	mov	r7, r1
    30ee:	f4 01       	movw	r30, r8
    30f0:	e6 0d       	add	r30, r6
    30f2:	f7 1d       	adc	r31, r7
    30f4:	60 81       	ld	r22, Z
    30f6:	ce 01       	movw	r24, r28
    30f8:	01 96       	adiw	r24, 0x01	; 1
    30fa:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    30fe:	2f 81       	ldd	r18, Y+7	; 0x07
    3100:	f7 01       	movw	r30, r14
    3102:	e6 0d       	add	r30, r6
    3104:	f7 1d       	adc	r31, r7
    3106:	21 8b       	std	Z+17, r18	; 0x11
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	9a 81       	ldd	r25, Y+2	; 0x02
    310c:	f3 01       	movw	r30, r6
    310e:	ee 0f       	add	r30, r30
    3110:	ff 1f       	adc	r31, r31
    3112:	ee 0d       	add	r30, r14
    3114:	ff 1d       	adc	r31, r15
    3116:	92 a3       	std	Z+34, r25	; 0x22
    3118:	81 a3       	std	Z+33, r24	; 0x21
    311a:	83 32       	cpi	r24, 0x23	; 35
    311c:	91 05       	cpc	r25, r1
    311e:	11 f4       	brne	.+4      	; 0x3124 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    3120:	f8 01       	movw	r30, r16
    3122:	08 c0       	rjmp	.+16     	; 0x3134 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    3124:	86 32       	cpi	r24, 0x26	; 38
    3126:	91 05       	cpc	r25, r1
    3128:	11 f4       	brne	.+4      	; 0x312e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    312a:	f6 01       	movw	r30, r12
    312c:	03 c0       	rjmp	.+6      	; 0x3134 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    312e:	89 97       	sbiw	r24, 0x29	; 41
    3130:	21 f4       	brne	.+8      	; 0x313a <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    3132:	f5 01       	movw	r30, r10
    3134:	80 81       	ld	r24, Z
    3136:	82 2b       	or	r24, r18
    3138:	80 83       	st	Z, r24
    313a:	53 94       	inc	r5
    313c:	d2 cf       	rjmp	.-92     	; 0x30e2 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    313e:	27 96       	adiw	r28, 0x07	; 7
    3140:	ef e0       	ldi	r30, 0x0F	; 15
    3142:	0c 94 76 1d 	jmp	0x3aec	; 0x3aec <__epilogue_restores__+0x6>

00003146 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    3146:	a0 e0       	ldi	r26, 0x00	; 0
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e9 ea       	ldi	r30, 0xA9	; 169
    314c:	f8 e1       	ldi	r31, 0x18	; 24
    314e:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__prologue_saves__+0xa>
    3152:	ec 01       	movw	r28, r24
    3154:	5b 01       	movw	r10, r22
    3156:	6c 01       	movw	r12, r24
    3158:	81 e4       	ldi	r24, 0x41	; 65
    315a:	c8 0e       	add	r12, r24
    315c:	d1 1c       	adc	r13, r1
    315e:	f6 01       	movw	r30, r12
    3160:	80 80       	ld	r8, Z
    3162:	7e 01       	movw	r14, r28
    3164:	f2 e4       	ldi	r31, 0x42	; 66
    3166:	ef 0e       	add	r14, r31
    3168:	f1 1c       	adc	r15, r1
    316a:	f7 01       	movw	r30, r14
    316c:	70 80       	ld	r7, Z
    316e:	8e 01       	movw	r16, r28
    3170:	0d 5b       	subi	r16, 0xBD	; 189
    3172:	1f 4f       	sbci	r17, 0xFF	; 255
    3174:	f8 01       	movw	r30, r16
    3176:	90 80       	ld	r9, Z
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	98 85       	ldd	r25, Y+8	; 0x08
    317c:	89 17       	cp	r24, r25
    317e:	48 f4       	brcc	.+18     	; 0x3192 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    3180:	f5 01       	movw	r30, r10
    3182:	e8 0f       	add	r30, r24
    3184:	f1 1d       	adc	r31, r1
    3186:	e8 0f       	add	r30, r24
    3188:	f1 1d       	adc	r31, r1
    318a:	11 82       	std	Z+1, r1	; 0x01
    318c:	10 82       	st	Z, r1
    318e:	8f 5f       	subi	r24, 0xFF	; 255
    3190:	f4 cf       	rjmp	.-24     	; 0x317a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    3192:	84 b1       	in	r24, 0x04	; 4
    3194:	f6 01       	movw	r30, r12
    3196:	90 81       	ld	r25, Z
    3198:	89 2b       	or	r24, r25
    319a:	84 b9       	out	0x04, r24	; 4
    319c:	87 b1       	in	r24, 0x07	; 7
    319e:	f7 01       	movw	r30, r14
    31a0:	90 81       	ld	r25, Z
    31a2:	89 2b       	or	r24, r25
    31a4:	87 b9       	out	0x07, r24	; 7
    31a6:	8a b1       	in	r24, 0x0a	; 10
    31a8:	f8 01       	movw	r30, r16
    31aa:	90 81       	ld	r25, Z
    31ac:	89 2b       	or	r24, r25
    31ae:	8a b9       	out	0x0a, r24	; 10
    31b0:	85 b1       	in	r24, 0x05	; 5
    31b2:	f6 01       	movw	r30, r12
    31b4:	90 81       	ld	r25, Z
    31b6:	89 2b       	or	r24, r25
    31b8:	85 b9       	out	0x05, r24	; 5
    31ba:	88 b1       	in	r24, 0x08	; 8
    31bc:	f7 01       	movw	r30, r14
    31be:	90 81       	ld	r25, Z
    31c0:	89 2b       	or	r24, r25
    31c2:	88 b9       	out	0x08, r24	; 8
    31c4:	8b b1       	in	r24, 0x0b	; 11
    31c6:	f8 01       	movw	r30, r16
    31c8:	90 81       	ld	r25, Z
    31ca:	89 2b       	or	r24, r25
    31cc:	8b b9       	out	0x0b, r24	; 11
    31ce:	8a e0       	ldi	r24, 0x0A	; 10
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <delay_us>
    31d6:	94 b1       	in	r25, 0x04	; 4
    31d8:	f6 01       	movw	r30, r12
    31da:	80 81       	ld	r24, Z
    31dc:	80 95       	com	r24
    31de:	89 23       	and	r24, r25
    31e0:	84 b9       	out	0x04, r24	; 4
    31e2:	97 b1       	in	r25, 0x07	; 7
    31e4:	f7 01       	movw	r30, r14
    31e6:	80 81       	ld	r24, Z
    31e8:	80 95       	com	r24
    31ea:	89 23       	and	r24, r25
    31ec:	87 b9       	out	0x07, r24	; 7
    31ee:	9a b1       	in	r25, 0x0a	; 10
    31f0:	f8 01       	movw	r30, r16
    31f2:	80 81       	ld	r24, Z
    31f4:	80 95       	com	r24
    31f6:	89 23       	and	r24, r25
    31f8:	8a b9       	out	0x0a, r24	; 10
    31fa:	95 b1       	in	r25, 0x05	; 5
    31fc:	f6 01       	movw	r30, r12
    31fe:	80 81       	ld	r24, Z
    3200:	80 95       	com	r24
    3202:	89 23       	and	r24, r25
    3204:	85 b9       	out	0x05, r24	; 5
    3206:	98 b1       	in	r25, 0x08	; 8
    3208:	f7 01       	movw	r30, r14
    320a:	80 81       	ld	r24, Z
    320c:	80 95       	com	r24
    320e:	89 23       	and	r24, r25
    3210:	88 b9       	out	0x08, r24	; 8
    3212:	9b b1       	in	r25, 0x0b	; 11
    3214:	f8 01       	movw	r30, r16
    3216:	80 81       	ld	r24, Z
    3218:	80 95       	com	r24
    321a:	89 23       	and	r24, r25
    321c:	8b b9       	out	0x0b, r24	; 11
    321e:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3222:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3226:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    322a:	83 60       	ori	r24, 0x03	; 3
    322c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3230:	82 e0       	ldi	r24, 0x02	; 2
    3232:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3236:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3240:	3f 85       	ldd	r19, Y+15	; 0x0f
    3242:	82 17       	cp	r24, r18
    3244:	93 07       	cpc	r25, r19
    3246:	20 f5       	brcc	.+72     	; 0x3290 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    3248:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    324c:	2c 2d       	mov	r18, r12
    324e:	24 1b       	sub	r18, r20
    3250:	82 0f       	add	r24, r18
    3252:	91 1d       	adc	r25, r1
    3254:	03 b1       	in	r16, 0x03	; 3
    3256:	08 11       	cpse	r16, r8
    3258:	32 c0       	rjmp	.+100    	; 0x32be <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    325a:	f6 b0       	in	r15, 0x06	; 6
    325c:	f7 10       	cpse	r15, r7
    325e:	2f c0       	rjmp	.+94     	; 0x32be <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    3260:	29 b1       	in	r18, 0x09	; 9
    3262:	29 11       	cpse	r18, r9
    3264:	2c c0       	rjmp	.+88     	; 0x32be <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    3266:	10 c0       	rjmp	.+32     	; 0x3288 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    3268:	21 2f       	mov	r18, r17
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	a9 01       	movw	r20, r18
    326e:	44 0f       	add	r20, r20
    3270:	55 1f       	adc	r21, r21
    3272:	f5 01       	movw	r30, r10
    3274:	e4 0f       	add	r30, r20
    3276:	f5 1f       	adc	r31, r21
    3278:	60 81       	ld	r22, Z
    327a:	71 81       	ldd	r23, Z+1	; 0x01
    327c:	67 2b       	or	r22, r23
    327e:	21 f1       	breq	.+72     	; 0x32c8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    3280:	1f 5f       	subi	r17, 0xFF	; 255
    3282:	28 85       	ldd	r18, Y+8	; 0x08
    3284:	12 17       	cp	r17, r18
    3286:	80 f3       	brcs	.-32     	; 0x3268 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    3288:	7f 2c       	mov	r7, r15
    328a:	80 2e       	mov	r8, r16
    328c:	4c 2d       	mov	r20, r12
    328e:	d7 cf       	rjmp	.-82     	; 0x323e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    3290:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3294:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	88 85       	ldd	r24, Y+8	; 0x08
    329c:	28 17       	cp	r18, r24
    329e:	30 f5       	brcc	.+76     	; 0x32ec <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    32a0:	f5 01       	movw	r30, r10
    32a2:	e2 0f       	add	r30, r18
    32a4:	f1 1d       	adc	r31, r1
    32a6:	e2 0f       	add	r30, r18
    32a8:	f1 1d       	adc	r31, r1
    32aa:	80 81       	ld	r24, Z
    32ac:	91 81       	ldd	r25, Z+1	; 0x01
    32ae:	89 2b       	or	r24, r25
    32b0:	21 f4       	brne	.+8      	; 0x32ba <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    32b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	80 83       	st	Z, r24
    32ba:	2f 5f       	subi	r18, 0xFF	; 255
    32bc:	ee cf       	rjmp	.-36     	; 0x329a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    32be:	03 b1       	in	r16, 0x03	; 3
    32c0:	f6 b0       	in	r15, 0x06	; 6
    32c2:	99 b0       	in	r9, 0x09	; 9
    32c4:	10 e0       	ldi	r17, 0x00	; 0
    32c6:	dd cf       	rjmp	.-70     	; 0x3282 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    32c8:	de 01       	movw	r26, r28
    32ca:	a4 0f       	add	r26, r20
    32cc:	b5 1f       	adc	r27, r21
    32ce:	91 96       	adiw	r26, 0x21	; 33
    32d0:	0d 90       	ld	r0, X+
    32d2:	bc 91       	ld	r27, X
    32d4:	a0 2d       	mov	r26, r0
    32d6:	4c 91       	ld	r20, X
    32d8:	de 01       	movw	r26, r28
    32da:	a2 0f       	add	r26, r18
    32dc:	b3 1f       	adc	r27, r19
    32de:	51 96       	adiw	r26, 0x11	; 17
    32e0:	2c 91       	ld	r18, X
    32e2:	42 23       	and	r20, r18
    32e4:	69 f6       	brne	.-102    	; 0x3280 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	80 83       	st	Z, r24
    32ea:	ca cf       	rjmp	.-108    	; 0x3280 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	ed e0       	ldi	r30, 0x0D	; 13
    32f2:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__epilogue_restores__+0xa>

000032f6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    32f6:	ef 92       	push	r14
    32f8:	ff 92       	push	r15
    32fa:	0f 93       	push	r16
    32fc:	1f 93       	push	r17
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	fc 01       	movw	r30, r24
    3304:	9b 01       	movw	r18, r22
    3306:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    330a:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    330e:	47 b1       	in	r20, 0x07	; 7
    3310:	18 b1       	in	r17, 0x08	; 8
    3312:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3316:	86 fd       	sbrc	r24, 6
    3318:	fc cf       	rjmp	.-8      	; 0x3312 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 85       	ldd	r25, Z+8	; 0x08
    331e:	89 17       	cp	r24, r25
    3320:	48 f4       	brcc	.+18     	; 0x3334 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    3322:	d9 01       	movw	r26, r18
    3324:	a8 0f       	add	r26, r24
    3326:	b1 1d       	adc	r27, r1
    3328:	a8 0f       	add	r26, r24
    332a:	b1 1d       	adc	r27, r1
    332c:	1d 92       	st	X+, r1
    332e:	1c 92       	st	X, r1
    3330:	8f 5f       	subi	r24, 0xFF	; 255
    3332:	f4 cf       	rjmp	.-24     	; 0x331c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    3334:	97 b1       	in	r25, 0x07	; 7
    3336:	82 a1       	ldd	r24, Z+34	; 0x22
    3338:	80 95       	com	r24
    333a:	89 23       	and	r24, r25
    333c:	87 b9       	out	0x07, r24	; 7
    333e:	98 b1       	in	r25, 0x08	; 8
    3340:	82 a1       	ldd	r24, Z+34	; 0x22
    3342:	80 95       	com	r24
    3344:	89 23       	and	r24, r25
    3346:	88 b9       	out	0x08, r24	; 8
    3348:	87 e8       	ldi	r24, 0x87	; 135
    334a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    334e:	e1 2c       	mov	r14, r1
    3350:	81 a1       	ldd	r24, Z+33	; 0x21
    3352:	e8 16       	cp	r14, r24
    3354:	10 f0       	brcs	.+4      	; 0x335a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    3356:	e1 2c       	mov	r14, r1
    3358:	29 c0       	rjmp	.+82     	; 0x33ac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	80 85       	ldd	r24, Z+8	; 0x08
    335e:	58 17       	cp	r21, r24
    3360:	18 f5       	brcc	.+70     	; 0x33a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    3362:	a5 2f       	mov	r26, r21
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	ef 01       	movw	r28, r30
    3368:	ca 0f       	add	r28, r26
    336a:	db 1f       	adc	r29, r27
    336c:	89 89       	ldd	r24, Y+17	; 0x11
    336e:	80 64       	ori	r24, 0x40	; 64
    3370:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    3374:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3378:	80 64       	ori	r24, 0x40	; 64
    337a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    337e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3382:	86 fd       	sbrc	r24, 6
    3384:	fc cf       	rjmp	.-8      	; 0x337e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    3386:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    338a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    338e:	aa 0f       	add	r26, r26
    3390:	bb 1f       	adc	r27, r27
    3392:	a2 0f       	add	r26, r18
    3394:	b3 1f       	adc	r27, r19
    3396:	8d 91       	ld	r24, X+
    3398:	9c 91       	ld	r25, X
    339a:	11 97       	sbiw	r26, 0x01	; 1
    339c:	86 0f       	add	r24, r22
    339e:	97 1f       	adc	r25, r23
    33a0:	8d 93       	st	X+, r24
    33a2:	9c 93       	st	X, r25
    33a4:	5f 5f       	subi	r21, 0xFF	; 255
    33a6:	da cf       	rjmp	.-76     	; 0x335c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    33a8:	e3 94       	inc	r14
    33aa:	d2 cf       	rjmp	.-92     	; 0x3350 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    33ac:	80 85       	ldd	r24, Z+8	; 0x08
    33ae:	e8 16       	cp	r14, r24
    33b0:	a0 f4       	brcc	.+40     	; 0x33da <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    33b2:	e9 01       	movw	r28, r18
    33b4:	ce 0d       	add	r28, r14
    33b6:	d1 1d       	adc	r29, r1
    33b8:	ce 0d       	add	r28, r14
    33ba:	d1 1d       	adc	r29, r1
    33bc:	61 a1       	ldd	r22, Z+33	; 0x21
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	cb 01       	movw	r24, r22
    33c2:	95 95       	asr	r25
    33c4:	87 95       	ror	r24
    33c6:	a8 81       	ld	r26, Y
    33c8:	b9 81       	ldd	r27, Y+1	; 0x01
    33ca:	8a 0f       	add	r24, r26
    33cc:	9b 1f       	adc	r25, r27
    33ce:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    33d2:	79 83       	std	Y+1, r23	; 0x01
    33d4:	68 83       	st	Y, r22
    33d6:	e3 94       	inc	r14
    33d8:	e9 cf       	rjmp	.-46     	; 0x33ac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    33da:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    33de:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    33e2:	18 b9       	out	0x08, r17	; 8
    33e4:	47 b9       	out	0x07, r20	; 7
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	e6 e0       	ldi	r30, 0x06	; 6
    33ec:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__epilogue_restores__+0x18>

000033f0 <_ZN16PololuQTRSensors4readEPjh>:
    33f0:	a0 e2       	ldi	r26, 0x20	; 32
    33f2:	b0 e0       	ldi	r27, 0x00	; 0
    33f4:	ee ef       	ldi	r30, 0xFE	; 254
    33f6:	f9 e1       	ldi	r31, 0x19	; 25
    33f8:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__prologue_saves__+0x16>
    33fc:	8c 01       	movw	r16, r24
    33fe:	7b 01       	movw	r14, r22
    3400:	d4 2e       	mov	r13, r20
    3402:	8f ef       	ldi	r24, 0xFF	; 255
    3404:	84 0f       	add	r24, r20
    3406:	82 30       	cpi	r24, 0x02	; 2
    3408:	18 f4       	brcc	.+6      	; 0x3410 <_ZN16PololuQTRSensors4readEPjh+0x20>
    340a:	c8 01       	movw	r24, r16
    340c:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN16PololuQTRSensors10emittersOnEv>
    3410:	d8 01       	movw	r26, r16
    3412:	50 96       	adiw	r26, 0x10	; 16
    3414:	8c 91       	ld	r24, X
    3416:	b7 01       	movw	r22, r14
    3418:	81 11       	cpse	r24, r1
    341a:	10 c0       	rjmp	.+32     	; 0x343c <_ZN16PololuQTRSensors4readEPjh+0x4c>
    341c:	c8 01       	movw	r24, r16
    341e:	0e 94 a3 18 	call	0x3146	; 0x3146 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    3422:	c8 01       	movw	r24, r16
    3424:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16PololuQTRSensors11emittersOffEv>
    3428:	b2 e0       	ldi	r27, 0x02	; 2
    342a:	db 12       	cpse	r13, r27
    342c:	3a c0       	rjmp	.+116    	; 0x34a2 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    342e:	be 01       	movw	r22, r28
    3430:	6f 5f       	subi	r22, 0xFF	; 255
    3432:	7f 4f       	sbci	r23, 0xFF	; 255
    3434:	c8 01       	movw	r24, r16
    3436:	0e 94 a3 18 	call	0x3146	; 0x3146 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    343a:	0f c0       	rjmp	.+30     	; 0x345a <_ZN16PololuQTRSensors4readEPjh+0x6a>
    343c:	c8 01       	movw	r24, r16
    343e:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    3442:	c8 01       	movw	r24, r16
    3444:	0e 94 25 18 	call	0x304a	; 0x304a <_ZN16PololuQTRSensors11emittersOffEv>
    3448:	e2 e0       	ldi	r30, 0x02	; 2
    344a:	de 12       	cpse	r13, r30
    344c:	2a c0       	rjmp	.+84     	; 0x34a2 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    344e:	be 01       	movw	r22, r28
    3450:	6f 5f       	subi	r22, 0xFF	; 255
    3452:	7f 4f       	sbci	r23, 0xFF	; 255
    3454:	c8 01       	movw	r24, r16
    3456:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    345a:	40 e0       	ldi	r20, 0x00	; 0
    345c:	f8 01       	movw	r30, r16
    345e:	80 85       	ldd	r24, Z+8	; 0x08
    3460:	48 17       	cp	r20, r24
    3462:	f8 f4       	brcc	.+62     	; 0x34a2 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    3464:	84 2f       	mov	r24, r20
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	f7 01       	movw	r30, r14
    346e:	e8 0f       	add	r30, r24
    3470:	f9 1f       	adc	r31, r25
    3472:	21 e0       	ldi	r18, 0x01	; 1
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	2c 0f       	add	r18, r28
    3478:	3d 1f       	adc	r19, r29
    347a:	82 0f       	add	r24, r18
    347c:	93 1f       	adc	r25, r19
    347e:	d8 01       	movw	r26, r16
    3480:	1e 96       	adiw	r26, 0x0e	; 14
    3482:	2d 91       	ld	r18, X+
    3484:	3c 91       	ld	r19, X
    3486:	1f 97       	sbiw	r26, 0x0f	; 15
    3488:	dc 01       	movw	r26, r24
    348a:	8d 91       	ld	r24, X+
    348c:	9c 91       	ld	r25, X
    348e:	28 1b       	sub	r18, r24
    3490:	39 0b       	sbc	r19, r25
    3492:	80 81       	ld	r24, Z
    3494:	91 81       	ldd	r25, Z+1	; 0x01
    3496:	82 0f       	add	r24, r18
    3498:	93 1f       	adc	r25, r19
    349a:	91 83       	std	Z+1, r25	; 0x01
    349c:	80 83       	st	Z, r24
    349e:	4f 5f       	subi	r20, 0xFF	; 255
    34a0:	dd cf       	rjmp	.-70     	; 0x345c <_ZN16PololuQTRSensors4readEPjh+0x6c>
    34a2:	a0 96       	adiw	r28, 0x20	; 32
    34a4:	e7 e0       	ldi	r30, 0x07	; 7
    34a6:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__epilogue_restores__+0x16>

000034aa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    34aa:	2f 92       	push	r2
    34ac:	3f 92       	push	r3
    34ae:	5f 92       	push	r5
    34b0:	6f 92       	push	r6
    34b2:	7f 92       	push	r7
    34b4:	8f 92       	push	r8
    34b6:	9f 92       	push	r9
    34b8:	af 92       	push	r10
    34ba:	bf 92       	push	r11
    34bc:	cf 92       	push	r12
    34be:	df 92       	push	r13
    34c0:	ef 92       	push	r14
    34c2:	ff 92       	push	r15
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	c0 56       	subi	r28, 0x60	; 96
    34d2:	d1 09       	sbc	r29, r1
    34d4:	0f b6       	in	r0, 0x3f	; 63
    34d6:	f8 94       	cli
    34d8:	de bf       	out	0x3e, r29	; 62
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	cd bf       	out	0x3d, r28	; 61
    34de:	8c 01       	movw	r16, r24
    34e0:	4b 01       	movw	r8, r22
    34e2:	5a 01       	movw	r10, r20
    34e4:	52 2e       	mov	r5, r18
    34e6:	da 01       	movw	r26, r20
    34e8:	8d 91       	ld	r24, X+
    34ea:	9c 91       	ld	r25, X
    34ec:	89 2b       	or	r24, r25
    34ee:	31 f0       	breq	.+12     	; 0x34fc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    34f0:	f4 01       	movw	r30, r8
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	89 2b       	or	r24, r25
    34f8:	f1 f4       	brne	.+60     	; 0x3536 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    34fa:	24 c0       	rjmp	.+72     	; 0x3544 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    34fc:	d8 01       	movw	r26, r16
    34fe:	18 96       	adiw	r26, 0x08	; 8
    3500:	8c 91       	ld	r24, X
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <malloc>
    350c:	f5 01       	movw	r30, r10
    350e:	91 83       	std	Z+1, r25	; 0x01
    3510:	80 83       	st	Z, r24
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	09 f4       	brne	.+2      	; 0x3518 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    3516:	b1 c0       	rjmp	.+354    	; 0x367a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    3518:	fc 01       	movw	r30, r24
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	d8 01       	movw	r26, r16
    3520:	18 96       	adiw	r26, 0x08	; 8
    3522:	8c 91       	ld	r24, X
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	28 17       	cp	r18, r24
    3528:	39 07       	cpc	r19, r25
    352a:	14 f7       	brge	.-60     	; 0x34f0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    352c:	11 92       	st	Z+, r1
    352e:	11 92       	st	Z+, r1
    3530:	2f 5f       	subi	r18, 0xFF	; 255
    3532:	3f 4f       	sbci	r19, 0xFF	; 255
    3534:	f4 cf       	rjmp	.-24     	; 0x351e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    3536:	e1 2c       	mov	r14, r1
    3538:	f1 2c       	mov	r15, r1
    353a:	6e 01       	movw	r12, r28
    353c:	b1 e2       	ldi	r27, 0x21	; 33
    353e:	cb 0e       	add	r12, r27
    3540:	d1 1c       	adc	r13, r1
    3542:	21 c0       	rjmp	.+66     	; 0x3586 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3544:	f8 01       	movw	r30, r16
    3546:	80 85       	ldd	r24, Z+8	; 0x08
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <malloc>
    3552:	d4 01       	movw	r26, r8
    3554:	8d 93       	st	X+, r24
    3556:	9c 93       	st	X, r25
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	09 f4       	brne	.+2      	; 0x355e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    355c:	8e c0       	rjmp	.+284    	; 0x367a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    355e:	fc 01       	movw	r30, r24
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	d8 01       	movw	r26, r16
    3566:	18 96       	adiw	r26, 0x08	; 8
    3568:	8c 91       	ld	r24, X
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	28 17       	cp	r18, r24
    356e:	39 07       	cpc	r19, r25
    3570:	14 f7       	brge	.-60     	; 0x3536 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    3572:	d8 01       	movw	r26, r16
    3574:	1e 96       	adiw	r26, 0x0e	; 14
    3576:	8d 91       	ld	r24, X+
    3578:	9c 91       	ld	r25, X
    357a:	1f 97       	sbiw	r26, 0x0f	; 15
    357c:	81 93       	st	Z+, r24
    357e:	91 93       	st	Z+, r25
    3580:	2f 5f       	subi	r18, 0xFF	; 255
    3582:	3f 4f       	sbci	r19, 0xFF	; 255
    3584:	ef cf       	rjmp	.-34     	; 0x3564 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    3586:	45 2d       	mov	r20, r5
    3588:	be 01       	movw	r22, r28
    358a:	6f 5b       	subi	r22, 0xBF	; 191
    358c:	7f 4f       	sbci	r23, 0xFF	; 255
    358e:	c8 01       	movw	r24, r16
    3590:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZN16PololuQTRSensors4readEPjh>
    3594:	f8 01       	movw	r30, r16
    3596:	60 84       	ldd	r6, Z+8	; 0x08
    3598:	71 2c       	mov	r7, r1
    359a:	fe 01       	movw	r30, r28
    359c:	ef 5b       	subi	r30, 0xBF	; 191
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	c6 01       	movw	r24, r12
    35a2:	9e 01       	movw	r18, r28
    35a4:	2f 5f       	subi	r18, 0xFF	; 255
    35a6:	3f 4f       	sbci	r19, 0xFF	; 255
    35a8:	19 01       	movw	r2, r18
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	26 15       	cp	r18, r6
    35b0:	37 05       	cpc	r19, r7
    35b2:	4c f5       	brge	.+82     	; 0x3606 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    35b4:	e1 14       	cp	r14, r1
    35b6:	f1 04       	cpc	r15, r1
    35b8:	89 f0       	breq	.+34     	; 0x35dc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    35ba:	dc 01       	movw	r26, r24
    35bc:	6d 91       	ld	r22, X+
    35be:	7c 91       	ld	r23, X
    35c0:	40 81       	ld	r20, Z
    35c2:	51 81       	ldd	r21, Z+1	; 0x01
    35c4:	64 17       	cp	r22, r20
    35c6:	75 07       	cpc	r23, r21
    35c8:	48 f0       	brcs	.+18     	; 0x35dc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    35ca:	d1 01       	movw	r26, r2
    35cc:	6d 91       	ld	r22, X+
    35ce:	7c 91       	ld	r23, X
    35d0:	40 81       	ld	r20, Z
    35d2:	51 81       	ldd	r21, Z+1	; 0x01
    35d4:	46 17       	cp	r20, r22
    35d6:	57 07       	cpc	r21, r23
    35d8:	48 f0       	brcs	.+18     	; 0x35ec <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    35da:	0d c0       	rjmp	.+26     	; 0x35f6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    35dc:	40 81       	ld	r20, Z
    35de:	51 81       	ldd	r21, Z+1	; 0x01
    35e0:	dc 01       	movw	r26, r24
    35e2:	4d 93       	st	X+, r20
    35e4:	5c 93       	st	X, r21
    35e6:	e1 14       	cp	r14, r1
    35e8:	f1 04       	cpc	r15, r1
    35ea:	79 f7       	brne	.-34     	; 0x35ca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    35ec:	40 81       	ld	r20, Z
    35ee:	51 81       	ldd	r21, Z+1	; 0x01
    35f0:	d1 01       	movw	r26, r2
    35f2:	4d 93       	st	X+, r20
    35f4:	5c 93       	st	X, r21
    35f6:	2f 5f       	subi	r18, 0xFF	; 255
    35f8:	3f 4f       	sbci	r19, 0xFF	; 255
    35fa:	b2 e0       	ldi	r27, 0x02	; 2
    35fc:	2b 0e       	add	r2, r27
    35fe:	31 1c       	adc	r3, r1
    3600:	32 96       	adiw	r30, 0x02	; 2
    3602:	02 96       	adiw	r24, 0x02	; 2
    3604:	d4 cf       	rjmp	.-88     	; 0x35ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    3606:	ef ef       	ldi	r30, 0xFF	; 255
    3608:	ee 1a       	sub	r14, r30
    360a:	fe 0a       	sbc	r15, r30
    360c:	fa e0       	ldi	r31, 0x0A	; 10
    360e:	ef 16       	cp	r14, r31
    3610:	f1 04       	cpc	r15, r1
    3612:	09 f0       	breq	.+2      	; 0x3616 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    3614:	b8 cf       	rjmp	.-144    	; 0x3586 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3616:	9e 01       	movw	r18, r28
    3618:	2f 5f       	subi	r18, 0xFF	; 255
    361a:	3f 4f       	sbci	r19, 0xFF	; 255
    361c:	79 01       	movw	r14, r18
    361e:	36 01       	movw	r6, r12
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	f8 01       	movw	r30, r16
    3626:	20 85       	ldd	r18, Z+8	; 0x08
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	82 17       	cp	r24, r18
    362c:	93 07       	cpc	r25, r19
    362e:	2c f5       	brge	.+74     	; 0x367a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    3630:	d7 01       	movw	r26, r14
    3632:	2d 91       	ld	r18, X+
    3634:	3d 91       	ld	r19, X+
    3636:	7d 01       	movw	r14, r26
    3638:	b3 01       	movw	r22, r6
    363a:	6c 19       	sub	r22, r12
    363c:	7d 09       	sbc	r23, r13
    363e:	d5 01       	movw	r26, r10
    3640:	ed 91       	ld	r30, X+
    3642:	fc 91       	ld	r31, X
    3644:	e6 0f       	add	r30, r22
    3646:	f7 1f       	adc	r31, r23
    3648:	40 81       	ld	r20, Z
    364a:	51 81       	ldd	r21, Z+1	; 0x01
    364c:	42 17       	cp	r20, r18
    364e:	53 07       	cpc	r21, r19
    3650:	10 f4       	brcc	.+4      	; 0x3656 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    3652:	31 83       	std	Z+1, r19	; 0x01
    3654:	20 83       	st	Z, r18
    3656:	f3 01       	movw	r30, r6
    3658:	21 91       	ld	r18, Z+
    365a:	31 91       	ld	r19, Z+
    365c:	3f 01       	movw	r6, r30
    365e:	d4 01       	movw	r26, r8
    3660:	ed 91       	ld	r30, X+
    3662:	fc 91       	ld	r31, X
    3664:	e6 0f       	add	r30, r22
    3666:	f7 1f       	adc	r31, r23
    3668:	40 81       	ld	r20, Z
    366a:	51 81       	ldd	r21, Z+1	; 0x01
    366c:	24 17       	cp	r18, r20
    366e:	35 07       	cpc	r19, r21
    3670:	10 f4       	brcc	.+4      	; 0x3676 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    3672:	31 83       	std	Z+1, r19	; 0x01
    3674:	20 83       	st	Z, r18
    3676:	01 96       	adiw	r24, 0x01	; 1
    3678:	d5 cf       	rjmp	.-86     	; 0x3624 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    367a:	c0 5a       	subi	r28, 0xA0	; 160
    367c:	df 4f       	sbci	r29, 0xFF	; 255
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	df 91       	pop	r29
    368a:	cf 91       	pop	r28
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	ff 90       	pop	r15
    3692:	ef 90       	pop	r14
    3694:	df 90       	pop	r13
    3696:	cf 90       	pop	r12
    3698:	bf 90       	pop	r11
    369a:	af 90       	pop	r10
    369c:	9f 90       	pop	r9
    369e:	8f 90       	pop	r8
    36a0:	7f 90       	pop	r7
    36a2:	6f 90       	pop	r6
    36a4:	5f 90       	pop	r5
    36a6:	3f 90       	pop	r3
    36a8:	2f 90       	pop	r2
    36aa:	08 95       	ret

000036ac <_ZN16PololuQTRSensors9calibrateEh>:
    36ac:	1f 93       	push	r17
    36ae:	cf 93       	push	r28
    36b0:	df 93       	push	r29
    36b2:	ec 01       	movw	r28, r24
    36b4:	16 2f       	mov	r17, r22
    36b6:	8f ef       	ldi	r24, 0xFF	; 255
    36b8:	86 0f       	add	r24, r22
    36ba:	82 30       	cpi	r24, 0x02	; 2
    36bc:	18 f0       	brcs	.+6      	; 0x36c4 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    36be:	66 23       	and	r22, r22
    36c0:	59 f0       	breq	.+22     	; 0x36d8 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <_ZN16PololuQTRSensors9calibrateEh+0x40>
    36c4:	21 e0       	ldi	r18, 0x01	; 1
    36c6:	ae 01       	movw	r20, r28
    36c8:	4e 5f       	subi	r20, 0xFE	; 254
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255
    36cc:	be 01       	movw	r22, r28
    36ce:	ce 01       	movw	r24, r28
    36d0:	0e 94 55 1a 	call	0x34aa	; 0x34aa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    36d4:	12 30       	cpi	r17, 0x02	; 2
    36d6:	51 f4       	brne	.+20     	; 0x36ec <_ZN16PololuQTRSensors9calibrateEh+0x40>
    36d8:	ae 01       	movw	r20, r28
    36da:	4a 5f       	subi	r20, 0xFA	; 250
    36dc:	5f 4f       	sbci	r21, 0xFF	; 255
    36de:	be 01       	movw	r22, r28
    36e0:	6c 5f       	subi	r22, 0xFC	; 252
    36e2:	7f 4f       	sbci	r23, 0xFF	; 255
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	ce 01       	movw	r24, r28
    36e8:	0e 94 55 1a 	call	0x34aa	; 0x34aa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	1f 91       	pop	r17
    36f2:	08 95       	ret

000036f4 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    36f4:	a0 e0       	ldi	r26, 0x00	; 0
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e0 e8       	ldi	r30, 0x80	; 128
    36fa:	fb e1       	ldi	r31, 0x1B	; 27
    36fc:	0c 94 60 1d 	jmp	0x3ac0	; 0x3ac0 <__prologue_saves__+0x12>
    3700:	ec 01       	movw	r28, r24
    3702:	8b 01       	movw	r16, r22
    3704:	b4 2e       	mov	r11, r20
    3706:	84 2f       	mov	r24, r20
    3708:	8d 7f       	andi	r24, 0xFD	; 253
    370a:	51 f4       	brne	.+20     	; 0x3720 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    370c:	8c 81       	ldd	r24, Y+4	; 0x04
    370e:	9d 81       	ldd	r25, Y+5	; 0x05
    3710:	89 2b       	or	r24, r25
    3712:	09 f4       	brne	.+2      	; 0x3716 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    3714:	97 c0       	rjmp	.+302    	; 0x3844 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3716:	8e 81       	ldd	r24, Y+6	; 0x06
    3718:	9f 81       	ldd	r25, Y+7	; 0x07
    371a:	89 2b       	or	r24, r25
    371c:	09 f4       	brne	.+2      	; 0x3720 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    371e:	92 c0       	rjmp	.+292    	; 0x3844 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3720:	8f ef       	ldi	r24, 0xFF	; 255
    3722:	8b 0d       	add	r24, r11
    3724:	82 30       	cpi	r24, 0x02	; 2
    3726:	50 f4       	brcc	.+20     	; 0x373c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3728:	88 81       	ld	r24, Y
    372a:	99 81       	ldd	r25, Y+1	; 0x01
    372c:	89 2b       	or	r24, r25
    372e:	09 f4       	brne	.+2      	; 0x3732 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    3730:	89 c0       	rjmp	.+274    	; 0x3844 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	9b 81       	ldd	r25, Y+3	; 0x03
    3736:	89 2b       	or	r24, r25
    3738:	09 f4       	brne	.+2      	; 0x373c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    373a:	84 c0       	rjmp	.+264    	; 0x3844 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    373c:	4b 2d       	mov	r20, r11
    373e:	b8 01       	movw	r22, r16
    3740:	ce 01       	movw	r24, r28
    3742:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <_ZN16PololuQTRSensors4readEPjh>
    3746:	78 01       	movw	r14, r16
    3748:	00 e0       	ldi	r16, 0x00	; 0
    374a:	10 e0       	ldi	r17, 0x00	; 0
    374c:	c1 2c       	mov	r12, r1
    374e:	d1 2c       	mov	r13, r1
    3750:	88 85       	ldd	r24, Y+8	; 0x08
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	c8 16       	cp	r12, r24
    3756:	d9 06       	cpc	r13, r25
    3758:	0c f0       	brlt	.+2      	; 0x375c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    375a:	74 c0       	rjmp	.+232    	; 0x3844 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	b8 12       	cpse	r11, r24
    3760:	0a c0       	rjmp	.+20     	; 0x3776 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    3762:	ea 81       	ldd	r30, Y+2	; 0x02
    3764:	fb 81       	ldd	r31, Y+3	; 0x03
    3766:	e0 0f       	add	r30, r16
    3768:	f1 1f       	adc	r31, r17
    376a:	01 90       	ld	r0, Z+
    376c:	f0 81       	ld	r31, Z
    376e:	e0 2d       	mov	r30, r0
    3770:	a8 81       	ld	r26, Y
    3772:	b9 81       	ldd	r27, Y+1	; 0x01
    3774:	0d c0       	rjmp	.+26     	; 0x3790 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3776:	8c 81       	ldd	r24, Y+4	; 0x04
    3778:	9d 81       	ldd	r25, Y+5	; 0x05
    377a:	2e 81       	ldd	r18, Y+6	; 0x06
    377c:	3f 81       	ldd	r19, Y+7	; 0x07
    377e:	b1 10       	cpse	r11, r1
    3780:	0c c0       	rjmp	.+24     	; 0x379a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    3782:	f9 01       	movw	r30, r18
    3784:	e0 0f       	add	r30, r16
    3786:	f1 1f       	adc	r31, r17
    3788:	01 90       	ld	r0, Z+
    378a:	f0 81       	ld	r31, Z
    378c:	e0 2d       	mov	r30, r0
    378e:	dc 01       	movw	r26, r24
    3790:	a0 0f       	add	r26, r16
    3792:	b1 1f       	adc	r27, r17
    3794:	8d 91       	ld	r24, X+
    3796:	9c 91       	ld	r25, X
    3798:	28 c0       	rjmp	.+80     	; 0x37ea <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    379a:	fc 01       	movw	r30, r24
    379c:	e0 0f       	add	r30, r16
    379e:	f1 1f       	adc	r31, r17
    37a0:	40 81       	ld	r20, Z
    37a2:	51 81       	ldd	r21, Z+1	; 0x01
    37a4:	e8 81       	ld	r30, Y
    37a6:	f9 81       	ldd	r31, Y+1	; 0x01
    37a8:	e0 0f       	add	r30, r16
    37aa:	f1 1f       	adc	r31, r17
    37ac:	80 81       	ld	r24, Z
    37ae:	91 81       	ldd	r25, Z+1	; 0x01
    37b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    37b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    37b4:	48 17       	cp	r20, r24
    37b6:	59 07       	cpc	r21, r25
    37b8:	10 f4       	brcc	.+4      	; 0x37be <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    37ba:	cf 01       	movw	r24, r30
    37bc:	04 c0       	rjmp	.+8      	; 0x37c6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    37be:	8e 0f       	add	r24, r30
    37c0:	9f 1f       	adc	r25, r31
    37c2:	84 1b       	sub	r24, r20
    37c4:	95 0b       	sbc	r25, r21
    37c6:	d9 01       	movw	r26, r18
    37c8:	a0 0f       	add	r26, r16
    37ca:	b1 1f       	adc	r27, r17
    37cc:	2d 91       	ld	r18, X+
    37ce:	3c 91       	ld	r19, X
    37d0:	aa 81       	ldd	r26, Y+2	; 0x02
    37d2:	bb 81       	ldd	r27, Y+3	; 0x03
    37d4:	a0 0f       	add	r26, r16
    37d6:	b1 1f       	adc	r27, r17
    37d8:	4d 91       	ld	r20, X+
    37da:	5c 91       	ld	r21, X
    37dc:	24 17       	cp	r18, r20
    37de:	35 07       	cpc	r19, r21
    37e0:	20 f0       	brcs	.+8      	; 0x37ea <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    37e2:	e4 0f       	add	r30, r20
    37e4:	f5 1f       	adc	r31, r21
    37e6:	e2 1b       	sub	r30, r18
    37e8:	f3 0b       	sbc	r31, r19
    37ea:	e8 1b       	sub	r30, r24
    37ec:	f9 0b       	sbc	r31, r25
    37ee:	a9 f0       	breq	.+42     	; 0x381a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    37f0:	d7 01       	movw	r26, r14
    37f2:	2d 91       	ld	r18, X+
    37f4:	3c 91       	ld	r19, X
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	28 1b       	sub	r18, r24
    37fc:	39 0b       	sbc	r19, r25
    37fe:	41 09       	sbc	r20, r1
    3800:	51 09       	sbc	r21, r1
    3802:	a8 ee       	ldi	r26, 0xE8	; 232
    3804:	b3 e0       	ldi	r27, 0x03	; 3
    3806:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__muluhisi3>
    380a:	9f 01       	movw	r18, r30
    380c:	40 e0       	ldi	r20, 0x00	; 0
    380e:	50 e0       	ldi	r21, 0x00	; 0
    3810:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <__divmodsi4>
    3814:	37 fd       	sbrc	r19, 7
    3816:	0a c0       	rjmp	.+20     	; 0x382c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    3818:	02 c0       	rjmp	.+4      	; 0x381e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	29 3e       	cpi	r18, 0xE9	; 233
    3820:	b3 e0       	ldi	r27, 0x03	; 3
    3822:	3b 07       	cpc	r19, r27
    3824:	2c f0       	brlt	.+10     	; 0x3830 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3826:	28 ee       	ldi	r18, 0xE8	; 232
    3828:	33 e0       	ldi	r19, 0x03	; 3
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    382c:	20 e0       	ldi	r18, 0x00	; 0
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	f7 01       	movw	r30, r14
    3832:	21 93       	st	Z+, r18
    3834:	31 93       	st	Z+, r19
    3836:	7f 01       	movw	r14, r30
    3838:	ff ef       	ldi	r31, 0xFF	; 255
    383a:	cf 1a       	sub	r12, r31
    383c:	df 0a       	sbc	r13, r31
    383e:	0e 5f       	subi	r16, 0xFE	; 254
    3840:	1f 4f       	sbci	r17, 0xFF	; 255
    3842:	86 cf       	rjmp	.-244    	; 0x3750 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	e9 e0       	ldi	r30, 0x09	; 9
    384a:	0c 94 7c 1d 	jmp	0x3af8	; 0x3af8 <__epilogue_restores__+0x12>

0000384e <_ZN16PololuQTRSensors8readLineEPjhh>:
    384e:	a0 e0       	ldi	r26, 0x00	; 0
    3850:	b0 e0       	ldi	r27, 0x00	; 0
    3852:	ed e2       	ldi	r30, 0x2D	; 45
    3854:	fc e1       	ldi	r31, 0x1C	; 28
    3856:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__prologue_saves__>
    385a:	ec 01       	movw	r28, r24
    385c:	8b 01       	movw	r16, r22
    385e:	82 2e       	mov	r8, r18
    3860:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    3864:	28 84       	ldd	r2, Y+8	; 0x08
    3866:	e8 01       	movw	r28, r16
    3868:	41 2c       	mov	r4, r1
    386a:	51 2c       	mov	r5, r1
    386c:	32 01       	movw	r6, r4
    386e:	00 e0       	ldi	r16, 0x00	; 0
    3870:	10 e0       	ldi	r17, 0x00	; 0
    3872:	c1 2c       	mov	r12, r1
    3874:	d1 2c       	mov	r13, r1
    3876:	76 01       	movw	r14, r12
    3878:	31 2c       	mov	r3, r1
    387a:	91 2c       	mov	r9, r1
    387c:	58 ee       	ldi	r21, 0xE8	; 232
    387e:	a5 2e       	mov	r10, r21
    3880:	53 e0       	ldi	r21, 0x03	; 3
    3882:	b5 2e       	mov	r11, r21
    3884:	92 14       	cp	r9, r2
    3886:	21 f1       	breq	.+72     	; 0x38d0 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3888:	e9 91       	ld	r30, Y+
    388a:	f9 91       	ld	r31, Y+
    388c:	88 20       	and	r8, r8
    388e:	21 f0       	breq	.+8      	; 0x3898 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    3890:	c5 01       	movw	r24, r10
    3892:	8e 1b       	sub	r24, r30
    3894:	9f 0b       	sbc	r25, r31
    3896:	fc 01       	movw	r30, r24
    3898:	e9 3c       	cpi	r30, 0xC9	; 201
    389a:	f1 05       	cpc	r31, r1
    389c:	24 f4       	brge	.+8      	; 0x38a6 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    389e:	e3 33       	cpi	r30, 0x33	; 51
    38a0:	f1 05       	cpc	r31, r1
    38a2:	74 f0       	brlt	.+28     	; 0x38c0 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    38a4:	02 c0       	rjmp	.+4      	; 0x38aa <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    38a6:	33 24       	eor	r3, r3
    38a8:	33 94       	inc	r3
    38aa:	df 01       	movw	r26, r30
    38ac:	a3 01       	movw	r20, r6
    38ae:	92 01       	movw	r18, r4
    38b0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__mulshisi3>
    38b4:	c6 0e       	add	r12, r22
    38b6:	d7 1e       	adc	r13, r23
    38b8:	e8 1e       	adc	r14, r24
    38ba:	f9 1e       	adc	r15, r25
    38bc:	0e 0f       	add	r16, r30
    38be:	1f 1f       	adc	r17, r31
    38c0:	93 94       	inc	r9
    38c2:	98 ee       	ldi	r25, 0xE8	; 232
    38c4:	49 0e       	add	r4, r25
    38c6:	93 e0       	ldi	r25, 0x03	; 3
    38c8:	59 1e       	adc	r5, r25
    38ca:	61 1c       	adc	r6, r1
    38cc:	71 1c       	adc	r7, r1
    38ce:	da cf       	rjmp	.-76     	; 0x3884 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    38d0:	31 10       	cpse	r3, r1
    38d2:	1e c0       	rjmp	.+60     	; 0x3910 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    38d4:	49 2d       	mov	r20, r9
    38d6:	50 e0       	ldi	r21, 0x00	; 0
    38d8:	41 50       	subi	r20, 0x01	; 1
    38da:	51 09       	sbc	r21, r1
    38dc:	24 ef       	ldi	r18, 0xF4	; 244
    38de:	31 e0       	ldi	r19, 0x01	; 1
    38e0:	42 9f       	mul	r20, r18
    38e2:	c0 01       	movw	r24, r0
    38e4:	43 9f       	mul	r20, r19
    38e6:	90 0d       	add	r25, r0
    38e8:	52 9f       	mul	r21, r18
    38ea:	90 0d       	add	r25, r0
    38ec:	11 24       	eor	r1, r1
    38ee:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    38f2:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    38f6:	28 17       	cp	r18, r24
    38f8:	39 07       	cpc	r19, r25
    38fa:	b4 f0       	brlt	.+44     	; 0x3928 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    38fc:	88 ee       	ldi	r24, 0xE8	; 232
    38fe:	93 e0       	ldi	r25, 0x03	; 3
    3900:	48 9f       	mul	r20, r24
    3902:	90 01       	movw	r18, r0
    3904:	49 9f       	mul	r20, r25
    3906:	30 0d       	add	r19, r0
    3908:	58 9f       	mul	r21, r24
    390a:	30 0d       	add	r19, r0
    390c:	11 24       	eor	r1, r1
    390e:	0e c0       	rjmp	.+28     	; 0x392c <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3910:	98 01       	movw	r18, r16
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	50 e0       	ldi	r21, 0x00	; 0
    3916:	c7 01       	movw	r24, r14
    3918:	b6 01       	movw	r22, r12
    391a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__udivmodsi4>
    391e:	30 93 f6 01 	sts	0x01F6, r19	; 0x8001f6 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3922:	20 93 f5 01 	sts	0x01F5, r18	; 0x8001f5 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3926:	02 c0       	rjmp	.+4      	; 0x392c <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	c9 01       	movw	r24, r18
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	e2 e1       	ldi	r30, 0x12	; 18
    3934:	0c 94 73 1d 	jmp	0x3ae6	; 0x3ae6 <__epilogue_restores__>

00003938 <_ZN16PololuQTRSensorsD1Ev>:
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	ec 01       	movw	r28, r24
    393e:	8a 81       	ldd	r24, Y+2	; 0x02
    3940:	9b 81       	ldd	r25, Y+3	; 0x03
    3942:	00 97       	sbiw	r24, 0x00	; 0
    3944:	11 f0       	breq	.+4      	; 0x394a <_ZN16PololuQTRSensorsD1Ev+0x12>
    3946:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <free>
    394a:	8e 81       	ldd	r24, Y+6	; 0x06
    394c:	9f 81       	ldd	r25, Y+7	; 0x07
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	11 f0       	breq	.+4      	; 0x3956 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    3952:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <free>
    3956:	88 81       	ld	r24, Y
    3958:	99 81       	ldd	r25, Y+1	; 0x01
    395a:	00 97       	sbiw	r24, 0x00	; 0
    395c:	11 f0       	breq	.+4      	; 0x3962 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    395e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <free>
    3962:	8c 81       	ldd	r24, Y+4	; 0x04
    3964:	9d 81       	ldd	r25, Y+5	; 0x05
    3966:	00 97       	sbiw	r24, 0x00	; 0
    3968:	11 f0       	breq	.+4      	; 0x396e <_ZN16PololuQTRSensorsD1Ev+0x36>
    396a:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <free>
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	08 95       	ret

00003974 <__udivmodqi4>:
    3974:	99 1b       	sub	r25, r25
    3976:	79 e0       	ldi	r23, 0x09	; 9
    3978:	04 c0       	rjmp	.+8      	; 0x3982 <__udivmodqi4_ep>

0000397a <__udivmodqi4_loop>:
    397a:	99 1f       	adc	r25, r25
    397c:	96 17       	cp	r25, r22
    397e:	08 f0       	brcs	.+2      	; 0x3982 <__udivmodqi4_ep>
    3980:	96 1b       	sub	r25, r22

00003982 <__udivmodqi4_ep>:
    3982:	88 1f       	adc	r24, r24
    3984:	7a 95       	dec	r23
    3986:	c9 f7       	brne	.-14     	; 0x397a <__udivmodqi4_loop>
    3988:	80 95       	com	r24
    398a:	08 95       	ret

0000398c <__udivmodhi4>:
    398c:	aa 1b       	sub	r26, r26
    398e:	bb 1b       	sub	r27, r27
    3990:	51 e1       	ldi	r21, 0x11	; 17
    3992:	07 c0       	rjmp	.+14     	; 0x39a2 <__udivmodhi4_ep>

00003994 <__udivmodhi4_loop>:
    3994:	aa 1f       	adc	r26, r26
    3996:	bb 1f       	adc	r27, r27
    3998:	a6 17       	cp	r26, r22
    399a:	b7 07       	cpc	r27, r23
    399c:	10 f0       	brcs	.+4      	; 0x39a2 <__udivmodhi4_ep>
    399e:	a6 1b       	sub	r26, r22
    39a0:	b7 0b       	sbc	r27, r23

000039a2 <__udivmodhi4_ep>:
    39a2:	88 1f       	adc	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	5a 95       	dec	r21
    39a8:	a9 f7       	brne	.-22     	; 0x3994 <__udivmodhi4_loop>
    39aa:	80 95       	com	r24
    39ac:	90 95       	com	r25
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	08 95       	ret

000039b4 <__divmodhi4>:
    39b4:	97 fb       	bst	r25, 7
    39b6:	07 2e       	mov	r0, r23
    39b8:	16 f4       	brtc	.+4      	; 0x39be <__divmodhi4+0xa>
    39ba:	00 94       	com	r0
    39bc:	07 d0       	rcall	.+14     	; 0x39cc <__divmodhi4_neg1>
    39be:	77 fd       	sbrc	r23, 7
    39c0:	09 d0       	rcall	.+18     	; 0x39d4 <__divmodhi4_neg2>
    39c2:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    39c6:	07 fc       	sbrc	r0, 7
    39c8:	05 d0       	rcall	.+10     	; 0x39d4 <__divmodhi4_neg2>
    39ca:	3e f4       	brtc	.+14     	; 0x39da <__divmodhi4_exit>

000039cc <__divmodhi4_neg1>:
    39cc:	90 95       	com	r25
    39ce:	81 95       	neg	r24
    39d0:	9f 4f       	sbci	r25, 0xFF	; 255
    39d2:	08 95       	ret

000039d4 <__divmodhi4_neg2>:
    39d4:	70 95       	com	r23
    39d6:	61 95       	neg	r22
    39d8:	7f 4f       	sbci	r23, 0xFF	; 255

000039da <__divmodhi4_exit>:
    39da:	08 95       	ret

000039dc <__udivmodsi4>:
    39dc:	a1 e2       	ldi	r26, 0x21	; 33
    39de:	1a 2e       	mov	r1, r26
    39e0:	aa 1b       	sub	r26, r26
    39e2:	bb 1b       	sub	r27, r27
    39e4:	fd 01       	movw	r30, r26
    39e6:	0d c0       	rjmp	.+26     	; 0x3a02 <__udivmodsi4_ep>

000039e8 <__udivmodsi4_loop>:
    39e8:	aa 1f       	adc	r26, r26
    39ea:	bb 1f       	adc	r27, r27
    39ec:	ee 1f       	adc	r30, r30
    39ee:	ff 1f       	adc	r31, r31
    39f0:	a2 17       	cp	r26, r18
    39f2:	b3 07       	cpc	r27, r19
    39f4:	e4 07       	cpc	r30, r20
    39f6:	f5 07       	cpc	r31, r21
    39f8:	20 f0       	brcs	.+8      	; 0x3a02 <__udivmodsi4_ep>
    39fa:	a2 1b       	sub	r26, r18
    39fc:	b3 0b       	sbc	r27, r19
    39fe:	e4 0b       	sbc	r30, r20
    3a00:	f5 0b       	sbc	r31, r21

00003a02 <__udivmodsi4_ep>:
    3a02:	66 1f       	adc	r22, r22
    3a04:	77 1f       	adc	r23, r23
    3a06:	88 1f       	adc	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	1a 94       	dec	r1
    3a0c:	69 f7       	brne	.-38     	; 0x39e8 <__udivmodsi4_loop>
    3a0e:	60 95       	com	r22
    3a10:	70 95       	com	r23
    3a12:	80 95       	com	r24
    3a14:	90 95       	com	r25
    3a16:	9b 01       	movw	r18, r22
    3a18:	ac 01       	movw	r20, r24
    3a1a:	bd 01       	movw	r22, r26
    3a1c:	cf 01       	movw	r24, r30
    3a1e:	08 95       	ret

00003a20 <__divmodsi4>:
    3a20:	05 2e       	mov	r0, r21
    3a22:	97 fb       	bst	r25, 7
    3a24:	1e f4       	brtc	.+6      	; 0x3a2c <__divmodsi4+0xc>
    3a26:	00 94       	com	r0
    3a28:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__negsi2>
    3a2c:	57 fd       	sbrc	r21, 7
    3a2e:	07 d0       	rcall	.+14     	; 0x3a3e <__divmodsi4_neg2>
    3a30:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <__udivmodsi4>
    3a34:	07 fc       	sbrc	r0, 7
    3a36:	03 d0       	rcall	.+6      	; 0x3a3e <__divmodsi4_neg2>
    3a38:	4e f4       	brtc	.+18     	; 0x3a4c <__divmodsi4_exit>
    3a3a:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__negsi2>

00003a3e <__divmodsi4_neg2>:
    3a3e:	50 95       	com	r21
    3a40:	40 95       	com	r20
    3a42:	30 95       	com	r19
    3a44:	21 95       	neg	r18
    3a46:	3f 4f       	sbci	r19, 0xFF	; 255
    3a48:	4f 4f       	sbci	r20, 0xFF	; 255
    3a4a:	5f 4f       	sbci	r21, 0xFF	; 255

00003a4c <__divmodsi4_exit>:
    3a4c:	08 95       	ret

00003a4e <__negsi2>:
    3a4e:	90 95       	com	r25
    3a50:	80 95       	com	r24
    3a52:	70 95       	com	r23
    3a54:	61 95       	neg	r22
    3a56:	7f 4f       	sbci	r23, 0xFF	; 255
    3a58:	8f 4f       	sbci	r24, 0xFF	; 255
    3a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5c:	08 95       	ret

00003a5e <__tablejump2__>:
    3a5e:	ee 0f       	add	r30, r30
    3a60:	ff 1f       	adc	r31, r31
    3a62:	05 90       	lpm	r0, Z+
    3a64:	f4 91       	lpm	r31, Z
    3a66:	e0 2d       	mov	r30, r0
    3a68:	09 94       	ijmp

00003a6a <__umulhisi3>:
    3a6a:	a2 9f       	mul	r26, r18
    3a6c:	b0 01       	movw	r22, r0
    3a6e:	b3 9f       	mul	r27, r19
    3a70:	c0 01       	movw	r24, r0
    3a72:	a3 9f       	mul	r26, r19
    3a74:	70 0d       	add	r23, r0
    3a76:	81 1d       	adc	r24, r1
    3a78:	11 24       	eor	r1, r1
    3a7a:	91 1d       	adc	r25, r1
    3a7c:	b2 9f       	mul	r27, r18
    3a7e:	70 0d       	add	r23, r0
    3a80:	81 1d       	adc	r24, r1
    3a82:	11 24       	eor	r1, r1
    3a84:	91 1d       	adc	r25, r1
    3a86:	08 95       	ret

00003a88 <__muluhisi3>:
    3a88:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__umulhisi3>
    3a8c:	a5 9f       	mul	r26, r21
    3a8e:	90 0d       	add	r25, r0
    3a90:	b4 9f       	mul	r27, r20
    3a92:	90 0d       	add	r25, r0
    3a94:	a4 9f       	mul	r26, r20
    3a96:	80 0d       	add	r24, r0
    3a98:	91 1d       	adc	r25, r1
    3a9a:	11 24       	eor	r1, r1
    3a9c:	08 95       	ret

00003a9e <__mulshisi3>:
    3a9e:	b7 ff       	sbrs	r27, 7
    3aa0:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__muluhisi3>

00003aa4 <__mulohisi3>:
    3aa4:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <__muluhisi3>
    3aa8:	82 1b       	sub	r24, r18
    3aaa:	93 0b       	sbc	r25, r19
    3aac:	08 95       	ret

00003aae <__prologue_saves__>:
    3aae:	2f 92       	push	r2
    3ab0:	3f 92       	push	r3
    3ab2:	4f 92       	push	r4
    3ab4:	5f 92       	push	r5
    3ab6:	6f 92       	push	r6
    3ab8:	7f 92       	push	r7
    3aba:	8f 92       	push	r8
    3abc:	9f 92       	push	r9
    3abe:	af 92       	push	r10
    3ac0:	bf 92       	push	r11
    3ac2:	cf 92       	push	r12
    3ac4:	df 92       	push	r13
    3ac6:	ef 92       	push	r14
    3ac8:	ff 92       	push	r15
    3aca:	0f 93       	push	r16
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	cd b7       	in	r28, 0x3d	; 61
    3ad4:	de b7       	in	r29, 0x3e	; 62
    3ad6:	ca 1b       	sub	r28, r26
    3ad8:	db 0b       	sbc	r29, r27
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	09 94       	ijmp

00003ae6 <__epilogue_restores__>:
    3ae6:	2a 88       	ldd	r2, Y+18	; 0x12
    3ae8:	39 88       	ldd	r3, Y+17	; 0x11
    3aea:	48 88       	ldd	r4, Y+16	; 0x10
    3aec:	5f 84       	ldd	r5, Y+15	; 0x0f
    3aee:	6e 84       	ldd	r6, Y+14	; 0x0e
    3af0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3af2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3af4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3af6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3af8:	b9 84       	ldd	r11, Y+9	; 0x09
    3afa:	c8 84       	ldd	r12, Y+8	; 0x08
    3afc:	df 80       	ldd	r13, Y+7	; 0x07
    3afe:	ee 80       	ldd	r14, Y+6	; 0x06
    3b00:	fd 80       	ldd	r15, Y+5	; 0x05
    3b02:	0c 81       	ldd	r16, Y+4	; 0x04
    3b04:	1b 81       	ldd	r17, Y+3	; 0x03
    3b06:	aa 81       	ldd	r26, Y+2	; 0x02
    3b08:	b9 81       	ldd	r27, Y+1	; 0x01
    3b0a:	ce 0f       	add	r28, r30
    3b0c:	d1 1d       	adc	r29, r1
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	ed 01       	movw	r28, r26
    3b1a:	08 95       	ret

00003b1c <malloc>:
    3b1c:	0f 93       	push	r16
    3b1e:	1f 93       	push	r17
    3b20:	cf 93       	push	r28
    3b22:	df 93       	push	r29
    3b24:	82 30       	cpi	r24, 0x02	; 2
    3b26:	91 05       	cpc	r25, r1
    3b28:	10 f4       	brcc	.+4      	; 0x3b2e <malloc+0x12>
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <__flp>
    3b32:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <__flp+0x1>
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	30 e0       	ldi	r19, 0x00	; 0
    3b3a:	a0 e0       	ldi	r26, 0x00	; 0
    3b3c:	b0 e0       	ldi	r27, 0x00	; 0
    3b3e:	30 97       	sbiw	r30, 0x00	; 0
    3b40:	19 f1       	breq	.+70     	; 0x3b88 <malloc+0x6c>
    3b42:	40 81       	ld	r20, Z
    3b44:	51 81       	ldd	r21, Z+1	; 0x01
    3b46:	02 81       	ldd	r16, Z+2	; 0x02
    3b48:	13 81       	ldd	r17, Z+3	; 0x03
    3b4a:	48 17       	cp	r20, r24
    3b4c:	59 07       	cpc	r21, r25
    3b4e:	c8 f0       	brcs	.+50     	; 0x3b82 <malloc+0x66>
    3b50:	84 17       	cp	r24, r20
    3b52:	95 07       	cpc	r25, r21
    3b54:	69 f4       	brne	.+26     	; 0x3b70 <malloc+0x54>
    3b56:	10 97       	sbiw	r26, 0x00	; 0
    3b58:	31 f0       	breq	.+12     	; 0x3b66 <malloc+0x4a>
    3b5a:	12 96       	adiw	r26, 0x02	; 2
    3b5c:	0c 93       	st	X, r16
    3b5e:	12 97       	sbiw	r26, 0x02	; 2
    3b60:	13 96       	adiw	r26, 0x03	; 3
    3b62:	1c 93       	st	X, r17
    3b64:	27 c0       	rjmp	.+78     	; 0x3bb4 <malloc+0x98>
    3b66:	00 93 1d 02 	sts	0x021D, r16	; 0x80021d <__flp>
    3b6a:	10 93 1e 02 	sts	0x021E, r17	; 0x80021e <__flp+0x1>
    3b6e:	22 c0       	rjmp	.+68     	; 0x3bb4 <malloc+0x98>
    3b70:	21 15       	cp	r18, r1
    3b72:	31 05       	cpc	r19, r1
    3b74:	19 f0       	breq	.+6      	; 0x3b7c <malloc+0x60>
    3b76:	42 17       	cp	r20, r18
    3b78:	53 07       	cpc	r21, r19
    3b7a:	18 f4       	brcc	.+6      	; 0x3b82 <malloc+0x66>
    3b7c:	9a 01       	movw	r18, r20
    3b7e:	bd 01       	movw	r22, r26
    3b80:	ef 01       	movw	r28, r30
    3b82:	df 01       	movw	r26, r30
    3b84:	f8 01       	movw	r30, r16
    3b86:	db cf       	rjmp	.-74     	; 0x3b3e <malloc+0x22>
    3b88:	21 15       	cp	r18, r1
    3b8a:	31 05       	cpc	r19, r1
    3b8c:	f9 f0       	breq	.+62     	; 0x3bcc <malloc+0xb0>
    3b8e:	28 1b       	sub	r18, r24
    3b90:	39 0b       	sbc	r19, r25
    3b92:	24 30       	cpi	r18, 0x04	; 4
    3b94:	31 05       	cpc	r19, r1
    3b96:	80 f4       	brcc	.+32     	; 0x3bb8 <malloc+0x9c>
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b9c:	61 15       	cp	r22, r1
    3b9e:	71 05       	cpc	r23, r1
    3ba0:	21 f0       	breq	.+8      	; 0x3baa <malloc+0x8e>
    3ba2:	fb 01       	movw	r30, r22
    3ba4:	93 83       	std	Z+3, r25	; 0x03
    3ba6:	82 83       	std	Z+2, r24	; 0x02
    3ba8:	04 c0       	rjmp	.+8      	; 0x3bb2 <malloc+0x96>
    3baa:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <__flp+0x1>
    3bae:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <__flp>
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	32 96       	adiw	r30, 0x02	; 2
    3bb6:	44 c0       	rjmp	.+136    	; 0x3c40 <malloc+0x124>
    3bb8:	fe 01       	movw	r30, r28
    3bba:	e2 0f       	add	r30, r18
    3bbc:	f3 1f       	adc	r31, r19
    3bbe:	81 93       	st	Z+, r24
    3bc0:	91 93       	st	Z+, r25
    3bc2:	22 50       	subi	r18, 0x02	; 2
    3bc4:	31 09       	sbc	r19, r1
    3bc6:	39 83       	std	Y+1, r19	; 0x01
    3bc8:	28 83       	st	Y, r18
    3bca:	3a c0       	rjmp	.+116    	; 0x3c40 <malloc+0x124>
    3bcc:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3bd0:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3bd4:	23 2b       	or	r18, r19
    3bd6:	41 f4       	brne	.+16     	; 0x3be8 <malloc+0xcc>
    3bd8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3bdc:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3be0:	30 93 1c 02 	sts	0x021C, r19	; 0x80021c <__brkval+0x1>
    3be4:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <__brkval>
    3be8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3bec:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3bf0:	21 15       	cp	r18, r1
    3bf2:	31 05       	cpc	r19, r1
    3bf4:	41 f4       	brne	.+16     	; 0x3c06 <malloc+0xea>
    3bf6:	2d b7       	in	r18, 0x3d	; 61
    3bf8:	3e b7       	in	r19, 0x3e	; 62
    3bfa:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3bfe:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3c02:	24 1b       	sub	r18, r20
    3c04:	35 0b       	sbc	r19, r21
    3c06:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <__brkval>
    3c0a:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <__brkval+0x1>
    3c0e:	e2 17       	cp	r30, r18
    3c10:	f3 07       	cpc	r31, r19
    3c12:	a0 f4       	brcc	.+40     	; 0x3c3c <malloc+0x120>
    3c14:	2e 1b       	sub	r18, r30
    3c16:	3f 0b       	sbc	r19, r31
    3c18:	28 17       	cp	r18, r24
    3c1a:	39 07       	cpc	r19, r25
    3c1c:	78 f0       	brcs	.+30     	; 0x3c3c <malloc+0x120>
    3c1e:	ac 01       	movw	r20, r24
    3c20:	4e 5f       	subi	r20, 0xFE	; 254
    3c22:	5f 4f       	sbci	r21, 0xFF	; 255
    3c24:	24 17       	cp	r18, r20
    3c26:	35 07       	cpc	r19, r21
    3c28:	48 f0       	brcs	.+18     	; 0x3c3c <malloc+0x120>
    3c2a:	4e 0f       	add	r20, r30
    3c2c:	5f 1f       	adc	r21, r31
    3c2e:	50 93 1c 02 	sts	0x021C, r21	; 0x80021c <__brkval+0x1>
    3c32:	40 93 1b 02 	sts	0x021B, r20	; 0x80021b <__brkval>
    3c36:	81 93       	st	Z+, r24
    3c38:	91 93       	st	Z+, r25
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <malloc+0x124>
    3c3c:	e0 e0       	ldi	r30, 0x00	; 0
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	cf 01       	movw	r24, r30
    3c42:	df 91       	pop	r29
    3c44:	cf 91       	pop	r28
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	08 95       	ret

00003c4c <free>:
    3c4c:	cf 93       	push	r28
    3c4e:	df 93       	push	r29
    3c50:	00 97       	sbiw	r24, 0x00	; 0
    3c52:	09 f4       	brne	.+2      	; 0x3c56 <free+0xa>
    3c54:	81 c0       	rjmp	.+258    	; 0x3d58 <free+0x10c>
    3c56:	fc 01       	movw	r30, r24
    3c58:	32 97       	sbiw	r30, 0x02	; 2
    3c5a:	13 82       	std	Z+3, r1	; 0x03
    3c5c:	12 82       	std	Z+2, r1	; 0x02
    3c5e:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <__flp>
    3c62:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <__flp+0x1>
    3c66:	10 97       	sbiw	r26, 0x00	; 0
    3c68:	81 f4       	brne	.+32     	; 0x3c8a <free+0x3e>
    3c6a:	20 81       	ld	r18, Z
    3c6c:	31 81       	ldd	r19, Z+1	; 0x01
    3c6e:	82 0f       	add	r24, r18
    3c70:	93 1f       	adc	r25, r19
    3c72:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3c76:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3c7a:	28 17       	cp	r18, r24
    3c7c:	39 07       	cpc	r19, r25
    3c7e:	51 f5       	brne	.+84     	; 0x3cd4 <free+0x88>
    3c80:	f0 93 1c 02 	sts	0x021C, r31	; 0x80021c <__brkval+0x1>
    3c84:	e0 93 1b 02 	sts	0x021B, r30	; 0x80021b <__brkval>
    3c88:	67 c0       	rjmp	.+206    	; 0x3d58 <free+0x10c>
    3c8a:	ed 01       	movw	r28, r26
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	ce 17       	cp	r28, r30
    3c92:	df 07       	cpc	r29, r31
    3c94:	40 f4       	brcc	.+16     	; 0x3ca6 <free+0x5a>
    3c96:	4a 81       	ldd	r20, Y+2	; 0x02
    3c98:	5b 81       	ldd	r21, Y+3	; 0x03
    3c9a:	9e 01       	movw	r18, r28
    3c9c:	41 15       	cp	r20, r1
    3c9e:	51 05       	cpc	r21, r1
    3ca0:	f1 f0       	breq	.+60     	; 0x3cde <free+0x92>
    3ca2:	ea 01       	movw	r28, r20
    3ca4:	f5 cf       	rjmp	.-22     	; 0x3c90 <free+0x44>
    3ca6:	d3 83       	std	Z+3, r29	; 0x03
    3ca8:	c2 83       	std	Z+2, r28	; 0x02
    3caa:	40 81       	ld	r20, Z
    3cac:	51 81       	ldd	r21, Z+1	; 0x01
    3cae:	84 0f       	add	r24, r20
    3cb0:	95 1f       	adc	r25, r21
    3cb2:	c8 17       	cp	r28, r24
    3cb4:	d9 07       	cpc	r29, r25
    3cb6:	59 f4       	brne	.+22     	; 0x3cce <free+0x82>
    3cb8:	88 81       	ld	r24, Y
    3cba:	99 81       	ldd	r25, Y+1	; 0x01
    3cbc:	84 0f       	add	r24, r20
    3cbe:	95 1f       	adc	r25, r21
    3cc0:	02 96       	adiw	r24, 0x02	; 2
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	80 83       	st	Z, r24
    3cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    3cca:	93 83       	std	Z+3, r25	; 0x03
    3ccc:	82 83       	std	Z+2, r24	; 0x02
    3cce:	21 15       	cp	r18, r1
    3cd0:	31 05       	cpc	r19, r1
    3cd2:	29 f4       	brne	.+10     	; 0x3cde <free+0x92>
    3cd4:	f0 93 1e 02 	sts	0x021E, r31	; 0x80021e <__flp+0x1>
    3cd8:	e0 93 1d 02 	sts	0x021D, r30	; 0x80021d <__flp>
    3cdc:	3d c0       	rjmp	.+122    	; 0x3d58 <free+0x10c>
    3cde:	e9 01       	movw	r28, r18
    3ce0:	fb 83       	std	Y+3, r31	; 0x03
    3ce2:	ea 83       	std	Y+2, r30	; 0x02
    3ce4:	49 91       	ld	r20, Y+
    3ce6:	59 91       	ld	r21, Y+
    3ce8:	c4 0f       	add	r28, r20
    3cea:	d5 1f       	adc	r29, r21
    3cec:	ec 17       	cp	r30, r28
    3cee:	fd 07       	cpc	r31, r29
    3cf0:	61 f4       	brne	.+24     	; 0x3d0a <free+0xbe>
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
    3cf6:	84 0f       	add	r24, r20
    3cf8:	95 1f       	adc	r25, r21
    3cfa:	02 96       	adiw	r24, 0x02	; 2
    3cfc:	e9 01       	movw	r28, r18
    3cfe:	99 83       	std	Y+1, r25	; 0x01
    3d00:	88 83       	st	Y, r24
    3d02:	82 81       	ldd	r24, Z+2	; 0x02
    3d04:	93 81       	ldd	r25, Z+3	; 0x03
    3d06:	9b 83       	std	Y+3, r25	; 0x03
    3d08:	8a 83       	std	Y+2, r24	; 0x02
    3d0a:	e0 e0       	ldi	r30, 0x00	; 0
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	12 96       	adiw	r26, 0x02	; 2
    3d10:	8d 91       	ld	r24, X+
    3d12:	9c 91       	ld	r25, X
    3d14:	13 97       	sbiw	r26, 0x03	; 3
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	19 f0       	breq	.+6      	; 0x3d20 <free+0xd4>
    3d1a:	fd 01       	movw	r30, r26
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	f7 cf       	rjmp	.-18     	; 0x3d0e <free+0xc2>
    3d20:	8d 91       	ld	r24, X+
    3d22:	9c 91       	ld	r25, X
    3d24:	11 97       	sbiw	r26, 0x01	; 1
    3d26:	9d 01       	movw	r18, r26
    3d28:	2e 5f       	subi	r18, 0xFE	; 254
    3d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d2c:	82 0f       	add	r24, r18
    3d2e:	93 1f       	adc	r25, r19
    3d30:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3d34:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3d38:	28 17       	cp	r18, r24
    3d3a:	39 07       	cpc	r19, r25
    3d3c:	69 f4       	brne	.+26     	; 0x3d58 <free+0x10c>
    3d3e:	30 97       	sbiw	r30, 0x00	; 0
    3d40:	29 f4       	brne	.+10     	; 0x3d4c <free+0x100>
    3d42:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__flp+0x1>
    3d46:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp>
    3d4a:	02 c0       	rjmp	.+4      	; 0x3d50 <free+0x104>
    3d4c:	13 82       	std	Z+3, r1	; 0x03
    3d4e:	12 82       	std	Z+2, r1	; 0x02
    3d50:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <__brkval+0x1>
    3d54:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <__brkval>
    3d58:	df 91       	pop	r29
    3d5a:	cf 91       	pop	r28
    3d5c:	08 95       	ret

00003d5e <strncat>:
    3d5e:	fb 01       	movw	r30, r22
    3d60:	dc 01       	movw	r26, r24
    3d62:	0d 90       	ld	r0, X+
    3d64:	00 20       	and	r0, r0
    3d66:	e9 f7       	brne	.-6      	; 0x3d62 <strncat+0x4>
    3d68:	11 97       	sbiw	r26, 0x01	; 1
    3d6a:	41 50       	subi	r20, 0x01	; 1
    3d6c:	50 40       	sbci	r21, 0x00	; 0
    3d6e:	28 f0       	brcs	.+10     	; 0x3d7a <strncat+0x1c>
    3d70:	01 90       	ld	r0, Z+
    3d72:	00 20       	and	r0, r0
    3d74:	0d 92       	st	X+, r0
    3d76:	c9 f7       	brne	.-14     	; 0x3d6a <strncat+0xc>
    3d78:	08 95       	ret
    3d7a:	1c 92       	st	X, r1
    3d7c:	08 95       	ret

00003d7e <__do_global_dtors>:
    3d7e:	10 e0       	ldi	r17, 0x00	; 0
    3d80:	c2 e4       	ldi	r28, 0x42	; 66
    3d82:	d0 e0       	ldi	r29, 0x00	; 0
    3d84:	04 c0       	rjmp	.+8      	; 0x3d8e <__do_global_dtors+0x10>
    3d86:	fe 01       	movw	r30, r28
    3d88:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <__tablejump2__>
    3d8c:	21 96       	adiw	r28, 0x01	; 1
    3d8e:	c3 34       	cpi	r28, 0x43	; 67
    3d90:	d1 07       	cpc	r29, r17
    3d92:	c9 f7       	brne	.-14     	; 0x3d86 <__do_global_dtors+0x8>
    3d94:	f8 94       	cli

00003d96 <__stop_program>:
    3d96:	ff cf       	rjmp	.-2      	; 0x3d96 <__stop_program>
