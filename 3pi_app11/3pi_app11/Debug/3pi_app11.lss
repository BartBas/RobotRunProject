
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00003c08  00003c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  00800194  00800194  00003d30  2**0
                  ALLOC
  3 .stab         00007998  00000000  00000000  00003d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0001574e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00015790  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000001c0  00000000  00000000  000157d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003511  00000000  00000000  00015990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000011e9  00000000  00000000  00018ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000207f  00000000  00000000  0001a08a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000564  00000000  00000000  0001c10c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a05  00000000  00000000  0001c670  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000016ad  00000000  00000000  0001d075  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001d8  00000000  00000000  0001e722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 23 01 	jmp	0x246	; 0x246 <__dtors_end>
       4:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
       8:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
       c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      10:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      14:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      18:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      1c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      20:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      24:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_9>
      28:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      2c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      30:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      34:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__vector_13>
      38:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      3c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      40:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      44:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      48:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__vector_18>
      4c:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_19>
      50:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      54:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      58:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      5c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      60:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      64:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      68:	e1 07       	cpc	r30, r17
      6a:	0f 08       	sbc	r0, r15
      6c:	7a 08       	sbc	r7, r10
      6e:	e5 07       	cpc	r30, r21
      70:	f4 07       	cpc	r31, r20
      72:	03 08       	sbc	r0, r3
      74:	e5 07       	cpc	r30, r21
      76:	e5 07       	cpc	r30, r21
      78:	e5 07       	cpc	r30, r21

0000007a <__trampolines_end>:
      7a:	21 20       	and	r2, r1
      7c:	4f 35       	cpi	r20, 0x5F	; 95
      7e:	20 4c       	sbci	r18, 0xC0	; 192
      80:	31 36       	cpi	r19, 0x61	; 97
      82:	20 61       	ori	r18, 0x10	; 16
      84:	67 61       	ori	r22, 0x17	; 23
      86:	66 61       	ori	r22, 0x16	; 22
      88:	65 61       	ori	r22, 0x15	; 21
      8a:	20 64       	ori	r18, 0x40	; 64
      8c:	61 63       	ori	r22, 0x31	; 49
      8e:	2b 61       	ori	r18, 0x1B	; 27
      90:	64 61       	ori	r22, 0x14	; 20
      92:	65 61       	ori	r22, 0x15	; 21
      94:	20 66       	ori	r18, 0x60	; 96
      96:	61 3c       	cpi	r22, 0xC1	; 193
      98:	61 61       	ori	r22, 0x11	; 17
      9a:	3c 62       	ori	r19, 0x2C	; 44
      9c:	61 63       	ori	r22, 0x31	; 49
      9e:	23 61       	ori	r18, 0x13	; 19
      a0:	20 64       	ori	r18, 0x40	; 64
      a2:	61 63       	ori	r22, 0x31	; 49
      a4:	23 61       	ori	r18, 0x13	; 19
      a6:	64 61       	ori	r22, 0x14	; 20
      a8:	65 61       	ori	r22, 0x15	; 21
      aa:	20 66       	ori	r18, 0x60	; 96
      ac:	4f 36       	cpi	r20, 0x6F	; 111
      ae:	20 64       	ori	r18, 0x40	; 64
      b0:	63 64       	ori	r22, 0x43	; 67
      b2:	3c 62       	ori	r19, 0x2C	; 44
      b4:	2d 64       	ori	r18, 0x4D	; 77
      b6:	3c 61       	ori	r19, 0x1C	; 28
      b8:	64 3c       	cpi	r22, 0xC4	; 196
      ba:	67 20       	and	r6, r7
      bc:	64 3c       	cpi	r22, 0xC4	; 196
      be:	66 2b       	or	r22, r22
      c0:	64 3c       	cpi	r22, 0xC4	; 196
      c2:	67 64       	ori	r22, 0x47	; 71
      c4:	3c 61       	ori	r19, 0x1C	; 28
      c6:	64 3c       	cpi	r22, 0xC4	; 196
      c8:	62 2d       	mov	r22, r2
      ca:	20 64       	ori	r18, 0x40	; 64
      cc:	3c 64       	ori	r19, 0x4C	; 76
      ce:	64 3c       	cpi	r22, 0xC4	; 196
      d0:	65 64       	ori	r22, 0x45	; 69
      d2:	3c 66       	ori	r19, 0x6C	; 108
      d4:	2b 64       	ori	r18, 0x4B	; 75
      d6:	3c 67       	ori	r19, 0x7C	; 124
      d8:	20 64       	ori	r18, 0x40	; 64
      da:	3c 66       	ori	r19, 0x6C	; 108
      dc:	2b 64       	ori	r18, 0x4B	; 75
      de:	3c 67       	ori	r19, 0x7C	; 124
      e0:	64 3c       	cpi	r22, 0xC4	; 196
      e2:	61 64       	ori	r22, 0x41	; 65
      e4:	4c 38       	cpi	r20, 0x8C	; 140
      e6:	20 4d       	sbci	r18, 0xD0	; 208
      e8:	53 20       	and	r5, r3
      ea:	3c 62       	ori	r19, 0x2C	; 44
      ec:	2d 64       	ori	r18, 0x4D	; 77
      ee:	3c 62       	ori	r19, 0x2C	; 44
      f0:	2d 64       	ori	r18, 0x4D	; 77
      f2:	20 4d       	sbci	r18, 0xD0	; 208
      f4:	4c 65       	ori	r20, 0x5C	; 92
      f6:	2d 3c       	cpi	r18, 0xCD	; 205
      f8:	67 65       	ori	r22, 0x57	; 87
      fa:	2d 3c       	cpi	r18, 0xCD	; 205
      fc:	67 20       	and	r6, r7
      fe:	4d 53       	subi	r20, 0x3D	; 61
     100:	63 3c       	cpi	r22, 0xC3	; 195
     102:	61 63       	ori	r22, 0x31	; 49
     104:	3c 61       	ori	r19, 0x1C	; 28
     106:	20 4d       	sbci	r18, 0xD0	; 208
     108:	4c 20       	and	r4, r12
     10a:	64 3c       	cpi	r22, 0xC4	; 196
     10c:	66 64       	ori	r22, 0x46	; 70
     10e:	3c 66       	ori	r19, 0x6C	; 108
     110:	20 4f       	sbci	r18, 0xF0	; 240
     112:	35 20       	and	r3, r5
     114:	4d 53       	subi	r20, 0x3D	; 61
     116:	20 62       	ori	r18, 0x20	; 32
     118:	2d 67       	ori	r18, 0x7D	; 125
     11a:	62 2d       	mov	r22, r2
     11c:	67 4d       	sbci	r22, 0xD7	; 215
     11e:	4c 20       	and	r4, r12
     120:	3e 63       	ori	r19, 0x3E	; 62
     122:	23 65       	ori	r18, 0x53	; 83
     124:	3e 63       	ori	r19, 0x3E	; 62
     126:	23 65       	ori	r18, 0x53	; 83
     128:	20 4d       	sbci	r18, 0xD0	; 208
     12a:	53 20       	and	r5, r3
     12c:	61 66       	ori	r22, 0x61	; 97
     12e:	61 66       	ori	r22, 0x61	; 97
     130:	20 4d       	sbci	r18, 0xD0	; 208
     132:	4c 20       	and	r4, r12
     134:	67 63       	ori	r22, 0x37	; 55
     136:	23 67       	ori	r18, 0x73	; 115
     138:	63 23       	and	r22, r19
     13a:	20 4d       	sbci	r18, 0xD0	; 208
     13c:	53 20       	and	r5, r3
     13e:	66 64       	ori	r22, 0x46	; 70
     140:	66 64       	ori	r22, 0x46	; 70
     142:	20 4d       	sbci	r18, 0xD0	; 208
     144:	4c 20       	and	r4, r12
     146:	65 3c       	cpi	r22, 0xC5	; 197
     148:	62 2d       	mov	r22, r2
     14a:	65 3c       	cpi	r22, 0xC5	; 197
     14c:	62 2d       	mov	r22, r2
     14e:	4f 36       	cpi	r20, 0x6F	; 111
     150:	20 4c       	sbci	r18, 0xC0	; 192
     152:	31 36       	cpi	r19, 0x61	; 97
     154:	72 61       	ori	r23, 0x12	; 18
     156:	67 61       	ori	r22, 0x17	; 23
     158:	66 61       	ori	r22, 0x16	; 22
     15a:	65 61       	ori	r22, 0x15	; 21
     15c:	20 64       	ori	r18, 0x40	; 64
     15e:	61 63       	ori	r22, 0x31	; 49
     160:	23 61       	ori	r18, 0x13	; 19
     162:	64 61       	ori	r22, 0x14	; 20
     164:	65 61       	ori	r22, 0x15	; 21
     166:	20 66       	ori	r18, 0x60	; 96
     168:	61 3c       	cpi	r22, 0xC1	; 193
     16a:	61 61       	ori	r22, 0x11	; 17
     16c:	3c 62       	ori	r19, 0x2C	; 44
     16e:	61 63       	ori	r22, 0x31	; 49
     170:	23 61       	ori	r18, 0x13	; 19
     172:	20 64       	ori	r18, 0x40	; 64
     174:	61 63       	ori	r22, 0x31	; 49
     176:	23 61       	ori	r18, 0x13	; 19
     178:	64 61       	ori	r22, 0x14	; 20
     17a:	65 61       	ori	r22, 0x15	; 21
     17c:	20 66       	ori	r18, 0x60	; 96
     17e:	61 65       	ori	r22, 0x51	; 81
     180:	61 64       	ori	r22, 0x41	; 65
     182:	61 63       	ori	r22, 0x31	; 49
     184:	61 3c       	cpi	r22, 0xC1	; 193
     186:	62 2d       	mov	r22, r2
     188:	61 63       	ori	r22, 0x31	; 49
     18a:	61 64       	ori	r22, 0x41	; 65
     18c:	67 3c       	cpi	r22, 0xC7	; 199
     18e:	62 2d       	mov	r22, r2
     190:	67 20       	and	r6, r7
     192:	65 67       	ori	r22, 0x75	; 117
     194:	64 67       	ori	r22, 0x74	; 116
     196:	63 67       	ori	r22, 0x73	; 115
     198:	3c 62       	ori	r19, 0x2C	; 44
     19a:	2d 67       	ori	r18, 0x7D	; 125
     19c:	20 3c       	cpi	r18, 0xC0	; 192
     19e:	61 67       	ori	r22, 0x71	; 113
     1a0:	3c 62       	ori	r19, 0x2C	; 44
     1a2:	2d 67       	ori	r18, 0x7D	; 125
     1a4:	63 66       	ori	r22, 0x63	; 99
     1a6:	3c 61       	ori	r19, 0x1C	; 28
     1a8:	66 20       	and	r6, r6
     1aa:	64 66       	ori	r22, 0x64	; 100
     1ac:	63 66       	ori	r22, 0x63	; 99
     1ae:	3c 62       	ori	r19, 0x2C	; 44
     1b0:	2d 66       	ori	r18, 0x6D	; 109
     1b2:	3c 61       	ori	r19, 0x1C	; 28
     1b4:	66 3c       	cpi	r22, 0xC6	; 198
     1b6:	67 66       	ori	r22, 0x67	; 103
     1b8:	3c 61       	ori	r19, 0x1C	; 28
     1ba:	66 3c       	cpi	r22, 0xC6	; 198
     1bc:	62 2d       	mov	r22, r2
     1be:	65 3c       	cpi	r22, 0xC5	; 197
     1c0:	67 65       	ori	r22, 0x57	; 87
     1c2:	20 63       	ori	r18, 0x30	; 48
     1c4:	23 65       	ori	r18, 0x53	; 83
     1c6:	3c 62       	ori	r19, 0x2C	; 44
     1c8:	2d 65       	ori	r18, 0x5D	; 93
     1ca:	3c 61       	ori	r19, 0x1C	; 28
     1cc:	65 3c       	cpi	r22, 0xC5	; 197
     1ce:	67 65       	ori	r22, 0x57	; 87
     1d0:	20 3c       	cpi	r18, 0xC0	; 192
     1d2:	66 65       	ori	r22, 0x56	; 86
     1d4:	3c 67       	ori	r19, 0x7C	; 124
     1d6:	65 3c       	cpi	r22, 0xC5	; 197
     1d8:	61 64       	ori	r22, 0x41	; 65
     1da:	3c 66       	ori	r19, 0x6C	; 108
     1dc:	64 4f       	sbci	r22, 0xF4	; 244
     1de:	35 20       	and	r3, r5
     1e0:	65 3e       	cpi	r22, 0xE5	; 229
     1e2:	65 65       	ori	r22, 0x55	; 85
     1e4:	3e 65       	ori	r19, 0x5E	; 94
     1e6:	66 3e       	cpi	r22, 0xE6	; 230
     1e8:	64 66       	ori	r22, 0x64	; 100
     1ea:	3e 64       	ori	r19, 0x4E	; 78
     1ec:	20 62       	ori	r18, 0x20	; 32
     1ee:	2d 3e       	cpi	r18, 0xED	; 237
     1f0:	63 23       	and	r22, r19
     1f2:	62 2d       	mov	r22, r2
     1f4:	3e 63       	ori	r19, 0x3E	; 62
     1f6:	23 61       	ori	r18, 0x13	; 19
     1f8:	3e 64       	ori	r19, 0x4E	; 78
     1fa:	66 3e       	cpi	r22, 0xE6	; 230
     1fc:	64 20       	and	r6, r4
     1fe:	65 3e       	cpi	r22, 0xE5	; 229
     200:	65 65       	ori	r22, 0x55	; 85
     202:	3e 65       	ori	r19, 0x5E	; 94
     204:	66 3e       	cpi	r22, 0xE6	; 230
     206:	64 66       	ori	r22, 0x64	; 100
     208:	3e 64       	ori	r19, 0x4E	; 78
     20a:	65 3e       	cpi	r22, 0xE5	; 229
     20c:	64 3e       	cpi	r22, 0xE4	; 228
     20e:	63 23       	and	r22, r19
     210:	3e 64       	ori	r19, 0x4E	; 78
     212:	62 3e       	cpi	r22, 0xE2	; 226
     214:	64 3e       	cpi	r22, 0xE4	; 228
     216:	63 23       	and	r22, r19
     218:	62 20       	and	r6, r2
     21a:	3e 63       	ori	r19, 0x3E	; 62
     21c:	23 61       	ori	r18, 0x13	; 19
     21e:	67 61       	ori	r22, 0x17	; 23
     220:	65 67       	ori	r22, 0x75	; 117
     222:	66 65       	ori	r22, 0x56	; 86
     224:	20 66       	ori	r18, 0x60	; 96
     226:	20 4f       	sbci	r18, 0xF0	; 240
     228:	36 20       	and	r3, r6
     22a:	64 63       	ori	r22, 0x34	; 52
     22c:	23 64       	ori	r18, 0x43	; 67
     22e:	66 64       	ori	r22, 0x46	; 70
     230:	63 23       	and	r22, r19
     232:	3c 62       	ori	r19, 0x2C	; 44
     234:	20 63       	ori	r18, 0x30	; 48
     236:	23 34       	cpi	r18, 0x43	; 67
	...

00000239 <welcome>:
     239:	3e 67 33 32 3e 3e 63 33 32 00 00                    >g32>>c32..

00000244 <__ctors_end>:
     244:	e6 16       	cp	r14, r22

00000246 <__dtors_end>:
     246:	11 24       	eor	r1, r1
     248:	1f be       	out	0x3f, r1	; 63
     24a:	cf ef       	ldi	r28, 0xFF	; 255
     24c:	d8 e0       	ldi	r29, 0x08	; 8
     24e:	de bf       	out	0x3e, r29	; 62
     250:	cd bf       	out	0x3d, r28	; 61

00000252 <__do_copy_data>:
     252:	11 e0       	ldi	r17, 0x01	; 1
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	e8 e0       	ldi	r30, 0x08	; 8
     25a:	fc e3       	ldi	r31, 0x3C	; 60
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x10>
     25e:	05 90       	lpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	a4 39       	cpi	r26, 0x94	; 148
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0xc>

00000268 <__do_clear_bss>:
     268:	22 e0       	ldi	r18, 0x02	; 2
     26a:	a4 e9       	ldi	r26, 0x94	; 148
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	af 31       	cpi	r26, 0x1F	; 31
     274:	b2 07       	cpc	r27, r18
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	0e 94 4a 04 	call	0x894	; 0x894 <main>
     27c:	0c 94 f7 1d 	jmp	0x3bee	; 0x3bee <__do_global_dtors>

00000280 <__bad_interrupt>:
     280:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000284 <filllocationarrays>:


#define START 010
#define STOP 101

void filllocationarrays(Communications *self){
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	e2 97       	sbiw	r28, 0x32	; 50
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	dc 01       	movw	r26, r24
	char arrx[25];
	char arry[25];
	char set;
	int placement=0;

	for (int i=0;i<25;i++){
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	1a c0       	rjmp	.+52     	; 0x2d4 <filllocationarrays+0x50>
	arrx[i]=arry[i]=self->Orderary[i]=self->Orderarx[i]=0;
     2a0:	ad 01       	movw	r20, r26
     2a2:	42 0f       	add	r20, r18
     2a4:	53 1f       	adc	r21, r19
     2a6:	ca 01       	movw	r24, r20
     2a8:	8e 5a       	subi	r24, 0xAE	; 174
     2aa:	9f 4f       	sbci	r25, 0xFF	; 255
     2ac:	fc 01       	movw	r30, r24
     2ae:	10 82       	st	Z, r1
     2b0:	fa 01       	movw	r30, r20
     2b2:	11 ae       	std	Z+57, r1	; 0x39
     2b4:	ea e1       	ldi	r30, 0x1A	; 26
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	ec 0f       	add	r30, r28
     2ba:	fd 1f       	adc	r31, r29
     2bc:	e2 0f       	add	r30, r18
     2be:	f3 1f       	adc	r31, r19
     2c0:	10 82       	st	Z, r1
     2c2:	e1 e0       	ldi	r30, 0x01	; 1
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	ec 0f       	add	r30, r28
     2c8:	fd 1f       	adc	r31, r29
     2ca:	e2 0f       	add	r30, r18
     2cc:	f3 1f       	adc	r31, r19
     2ce:	10 82       	st	Z, r1
	char arrx[25];
	char arry[25];
	char set;
	int placement=0;

	for (int i=0;i<25;i++){
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	29 31       	cpi	r18, 0x19	; 25
     2d6:	31 05       	cpc	r19, r1
     2d8:	1c f3       	brlt	.-58     	; 0x2a0 <filllocationarrays+0x1c>
	arrx[i]=arry[i]=self->Orderary[i]=self->Orderarx[i]=0;
}

	if (self->Recieved[1]==1){
     2da:	5c 96       	adiw	r26, 0x1c	; 28
     2dc:	8c 91       	ld	r24, X
     2de:	5c 97       	sbiw	r26, 0x1c	; 28
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	29 f4       	brne	.+10     	; 0x2ee <filllocationarrays+0x6a>
		arrx[placement]=1;
     2e4:	89 83       	std	Y+1, r24	; 0x01
		arry[placement]=1;
     2e6:	8a 8f       	std	Y+26, r24	; 0x1a
		placement++;
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <filllocationarrays+0x6e>

void filllocationarrays(Communications *self){
	char arrx[25];
	char arry[25];
	char set;
	int placement=0;
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	3b c0       	rjmp	.+118    	; 0x36e <filllocationarrays+0xea>
		arrx[placement]=1;
		arry[placement]=1;
		placement++;
	}
	for (int i=0;i<8;i++){
		set = ((self->Recieved[2] >> i)  & 0x01);
     2f8:	5d 96       	adiw	r26, 0x1d	; 29
     2fa:	8c 91       	ld	r24, X
     2fc:	5d 97       	sbiw	r26, 0x1d	; 29
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	04 2e       	mov	r0, r20
     302:	02 c0       	rjmp	.+4      	; 0x308 <filllocationarrays+0x84>
     304:	95 95       	asr	r25
     306:	87 95       	ror	r24
     308:	0a 94       	dec	r0
     30a:	e2 f7       	brpl	.-8      	; 0x304 <filllocationarrays+0x80>
     30c:	81 70       	andi	r24, 0x01	; 1
		if (i<4){
     30e:	44 30       	cpi	r20, 0x04	; 4
     310:	51 05       	cpc	r21, r1
     312:	b4 f4       	brge	.+44     	; 0x340 <filllocationarrays+0xbc>
			if (set == 1){
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	49 f5       	brne	.+82     	; 0x36a <filllocationarrays+0xe6>
			arrx[placement]=i+1+1;
     318:	e1 e0       	ldi	r30, 0x01	; 1
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	ec 0f       	add	r30, r28
     31e:	fd 1f       	adc	r31, r29
     320:	e2 0f       	add	r30, r18
     322:	f3 1f       	adc	r31, r19
     324:	82 e0       	ldi	r24, 0x02	; 2
     326:	84 0f       	add	r24, r20
     328:	80 83       	st	Z, r24
			arry[placement]=0+1;
     32a:	ea e1       	ldi	r30, 0x1A	; 26
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	ec 0f       	add	r30, r28
     330:	fd 1f       	adc	r31, r29
     332:	e2 0f       	add	r30, r18
     334:	f3 1f       	adc	r31, r19
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 83       	st	Z, r24
			placement++;}
     33a:	2f 5f       	subi	r18, 0xFF	; 255
     33c:	3f 4f       	sbci	r19, 0xFF	; 255
     33e:	15 c0       	rjmp	.+42     	; 0x36a <filllocationarrays+0xe6>
		}else{
			if (set == 1){
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	99 f4       	brne	.+38     	; 0x36a <filllocationarrays+0xe6>
			arrx[placement]=i-4+1;
     344:	e1 e0       	ldi	r30, 0x01	; 1
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	ec 0f       	add	r30, r28
     34a:	fd 1f       	adc	r31, r29
     34c:	e2 0f       	add	r30, r18
     34e:	f3 1f       	adc	r31, r19
     350:	8d ef       	ldi	r24, 0xFD	; 253
     352:	84 0f       	add	r24, r20
     354:	80 83       	st	Z, r24
			arry[placement]=1+1;
     356:	ea e1       	ldi	r30, 0x1A	; 26
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ec 0f       	add	r30, r28
     35c:	fd 1f       	adc	r31, r29
     35e:	e2 0f       	add	r30, r18
     360:	f3 1f       	adc	r31, r19
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	80 83       	st	Z, r24
			placement++;}
     366:	2f 5f       	subi	r18, 0xFF	; 255
     368:	3f 4f       	sbci	r19, 0xFF	; 255
	if (self->Recieved[1]==1){
		arrx[placement]=1;
		arry[placement]=1;
		placement++;
	}
	for (int i=0;i<8;i++){
     36a:	4f 5f       	subi	r20, 0xFF	; 255
     36c:	5f 4f       	sbci	r21, 0xFF	; 255
     36e:	48 30       	cpi	r20, 0x08	; 8
     370:	51 05       	cpc	r21, r1
     372:	14 f2       	brlt	.-124    	; 0x2f8 <filllocationarrays+0x74>
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	53 c0       	rjmp	.+166    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			arry[placement]=1+1;
			placement++;}
		}
	}
		for (int i=0;i<8;i++){
			set = ((self->Recieved[3] >> i)  & 0x01);
     37a:	5e 96       	adiw	r26, 0x1e	; 30
     37c:	8c 91       	ld	r24, X
     37e:	5e 97       	sbiw	r26, 0x1e	; 30
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	04 2e       	mov	r0, r20
     384:	02 c0       	rjmp	.+4      	; 0x38a <filllocationarrays+0x106>
     386:	95 95       	asr	r25
     388:	87 95       	ror	r24
     38a:	0a 94       	dec	r0
     38c:	e2 f7       	brpl	.-8      	; 0x386 <filllocationarrays+0x102>
     38e:	81 70       	andi	r24, 0x01	; 1
			if (i==0){
     390:	41 15       	cp	r20, r1
     392:	51 05       	cpc	r21, r1
     394:	b9 f4       	brne	.+46     	; 0x3c4 <filllocationarrays+0x140>
				if (set == 1){
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	09 f0       	breq	.+2      	; 0x39c <filllocationarrays+0x118>
     39a:	40 c0       	rjmp	.+128    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
				arrx[placement]=i+4+1;
     39c:	e1 e0       	ldi	r30, 0x01	; 1
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	ec 0f       	add	r30, r28
     3a2:	fd 1f       	adc	r31, r29
     3a4:	e2 0f       	add	r30, r18
     3a6:	f3 1f       	adc	r31, r19
     3a8:	85 e0       	ldi	r24, 0x05	; 5
     3aa:	84 0f       	add	r24, r20
     3ac:	80 83       	st	Z, r24
				arry[placement]=1+1;
     3ae:	ea e1       	ldi	r30, 0x1A	; 26
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	ec 0f       	add	r30, r28
     3b4:	fd 1f       	adc	r31, r29
     3b6:	e2 0f       	add	r30, r18
     3b8:	f3 1f       	adc	r31, r19
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	80 83       	st	Z, r24
				placement++;}
     3be:	2f 5f       	subi	r18, 0xFF	; 255
     3c0:	3f 4f       	sbci	r19, 0xFF	; 255
     3c2:	2c c0       	rjmp	.+88     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			}else if(i<6){
     3c4:	46 30       	cpi	r20, 0x06	; 6
     3c6:	51 05       	cpc	r21, r1
     3c8:	a4 f4       	brge	.+40     	; 0x3f2 <filllocationarrays+0x16e>
				if (set == 1){
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	39 f5       	brne	.+78     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
				arrx[placement]=i-1+1;
     3ce:	e1 e0       	ldi	r30, 0x01	; 1
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	ec 0f       	add	r30, r28
     3d4:	fd 1f       	adc	r31, r29
     3d6:	e2 0f       	add	r30, r18
     3d8:	f3 1f       	adc	r31, r19
     3da:	40 83       	st	Z, r20
				arry[placement]=2+1;
     3dc:	ea e1       	ldi	r30, 0x1A	; 26
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	ec 0f       	add	r30, r28
     3e2:	fd 1f       	adc	r31, r29
     3e4:	e2 0f       	add	r30, r18
     3e6:	f3 1f       	adc	r31, r19
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	80 83       	st	Z, r24
				placement++;}
     3ec:	2f 5f       	subi	r18, 0xFF	; 255
     3ee:	3f 4f       	sbci	r19, 0xFF	; 255
     3f0:	15 c0       	rjmp	.+42     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			}else{
				if (set == 1){
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	99 f4       	brne	.+38     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
				arrx[placement]=i-6+1;
     3f6:	e1 e0       	ldi	r30, 0x01	; 1
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	ec 0f       	add	r30, r28
     3fc:	fd 1f       	adc	r31, r29
     3fe:	e2 0f       	add	r30, r18
     400:	f3 1f       	adc	r31, r19
     402:	8b ef       	ldi	r24, 0xFB	; 251
     404:	84 0f       	add	r24, r20
     406:	80 83       	st	Z, r24
				arry[placement]=3+1;
     408:	ea e1       	ldi	r30, 0x1A	; 26
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ec 0f       	add	r30, r28
     40e:	fd 1f       	adc	r31, r29
     410:	e2 0f       	add	r30, r18
     412:	f3 1f       	adc	r31, r19
     414:	84 e0       	ldi	r24, 0x04	; 4
     416:	80 83       	st	Z, r24
				placement++;}
     418:	2f 5f       	subi	r18, 0xFF	; 255
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
			arrx[placement]=i-4+1;
			arry[placement]=1+1;
			placement++;}
		}
	}
		for (int i=0;i<8;i++){
     41c:	4f 5f       	subi	r20, 0xFF	; 255
     41e:	5f 4f       	sbci	r21, 0xFF	; 255
     420:	48 30       	cpi	r20, 0x08	; 8
     422:	51 05       	cpc	r21, r1
     424:	0c f4       	brge	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     426:	a9 cf       	rjmp	.-174    	; 0x37a <filllocationarrays+0xf6>
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	3b c0       	rjmp	.+118    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				arry[placement]=3+1;
				placement++;}
			}
		}
		for (int i=0;i<8;i++){
			set = ((self->Recieved[4] >> i)  & 0x01);
     42e:	5f 96       	adiw	r26, 0x1f	; 31
     430:	8c 91       	ld	r24, X
     432:	5f 97       	sbiw	r26, 0x1f	; 31
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	04 2e       	mov	r0, r20
     438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	0a 94       	dec	r0
     440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     442:	81 70       	andi	r24, 0x01	; 1
			if (i<3){
     444:	43 30       	cpi	r20, 0x03	; 3
     446:	51 05       	cpc	r21, r1
     448:	b4 f4       	brge	.+44     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
				if (set == 1){
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	49 f5       	brne	.+82     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
				arrx[placement]=i+2+1;
     44e:	e1 e0       	ldi	r30, 0x01	; 1
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	ec 0f       	add	r30, r28
     454:	fd 1f       	adc	r31, r29
     456:	e2 0f       	add	r30, r18
     458:	f3 1f       	adc	r31, r19
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	84 0f       	add	r24, r20
     45e:	80 83       	st	Z, r24
				arry[placement]=3+1;
     460:	ea e1       	ldi	r30, 0x1A	; 26
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ec 0f       	add	r30, r28
     466:	fd 1f       	adc	r31, r29
     468:	e2 0f       	add	r30, r18
     46a:	f3 1f       	adc	r31, r19
     46c:	84 e0       	ldi	r24, 0x04	; 4
     46e:	80 83       	st	Z, r24
				placement++;}
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	15 c0       	rjmp	.+42     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			}else{
				if (set == 1){
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	99 f4       	brne	.+38     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
				arrx[placement]=i-3+1;
     47a:	e1 e0       	ldi	r30, 0x01	; 1
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	ec 0f       	add	r30, r28
     480:	fd 1f       	adc	r31, r29
     482:	e2 0f       	add	r30, r18
     484:	f3 1f       	adc	r31, r19
     486:	8e ef       	ldi	r24, 0xFE	; 254
     488:	84 0f       	add	r24, r20
     48a:	80 83       	st	Z, r24
				arry[placement]=4+1;
     48c:	ea e1       	ldi	r30, 0x1A	; 26
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	ec 0f       	add	r30, r28
     492:	fd 1f       	adc	r31, r29
     494:	e2 0f       	add	r30, r18
     496:	f3 1f       	adc	r31, r19
     498:	85 e0       	ldi	r24, 0x05	; 5
     49a:	80 83       	st	Z, r24
				placement++;}
     49c:	2f 5f       	subi	r18, 0xFF	; 255
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
				arrx[placement]=i-6+1;
				arry[placement]=3+1;
				placement++;}
			}
		}
		for (int i=0;i<8;i++){
     4a0:	4f 5f       	subi	r20, 0xFF	; 255
     4a2:	5f 4f       	sbci	r21, 0xFF	; 255
     4a4:	48 30       	cpi	r20, 0x08	; 8
     4a6:	51 05       	cpc	r21, r1
     4a8:	14 f2       	brlt	.-124    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	19 c0       	rjmp	.+50     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				arry[placement]=4+1;
				placement++;}
			}
		}
	for (int i=0;i<25;i++){
		self->Orderarx[i]=arrx[i];
     4b0:	e1 e0       	ldi	r30, 0x01	; 1
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	ec 0f       	add	r30, r28
     4b6:	fd 1f       	adc	r31, r29
     4b8:	e2 0f       	add	r30, r18
     4ba:	f3 1f       	adc	r31, r19
     4bc:	40 81       	ld	r20, Z
     4be:	cd 01       	movw	r24, r26
     4c0:	82 0f       	add	r24, r18
     4c2:	93 1f       	adc	r25, r19
     4c4:	fc 01       	movw	r30, r24
     4c6:	ee 5a       	subi	r30, 0xAE	; 174
     4c8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ca:	40 83       	st	Z, r20
		self->Orderary[i]=arry[i];
     4cc:	ea e1       	ldi	r30, 0x1A	; 26
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ec 0f       	add	r30, r28
     4d2:	fd 1f       	adc	r31, r29
     4d4:	e2 0f       	add	r30, r18
     4d6:	f3 1f       	adc	r31, r19
     4d8:	40 81       	ld	r20, Z
     4da:	fc 01       	movw	r30, r24
     4dc:	41 af       	std	Z+57, r20	; 0x39
				arrx[placement]=i-3+1;
				arry[placement]=4+1;
				placement++;}
			}
		}
	for (int i=0;i<25;i++){
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	29 31       	cpi	r18, 0x19	; 25
     4e4:	31 05       	cpc	r19, r1
     4e6:	24 f3       	brlt	.-56     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
		self->Orderarx[i]=arrx[i];
		self->Orderary[i]=arry[i];
	}
}
     4e8:	e2 96       	adiw	r28, 0x32	; 50
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <sendACK>:
			


void sendACK(Communications *self ){
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	00 d0       	rcall	.+0      	; 0x500 <sendACK+0x6>
     500:	1f 92       	push	r1
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
						char tmp[3];
						tmp[0]=START;
     506:	28 e0       	ldi	r18, 0x08	; 8
     508:	29 83       	std	Y+1, r18	; 0x01
						tmp[1]=255;
     50a:	2f ef       	ldi	r18, 0xFF	; 255
     50c:	2a 83       	std	Y+2, r18	; 0x02
						tmp[2]=STOP;
     50e:	25 e6       	ldi	r18, 0x65	; 101
     510:	2b 83       	std	Y+3, r18	; 0x03
						serial_send_blocking(tmp,self->val);
     512:	fc 01       	movw	r30, r24
     514:	60 81       	ld	r22, Z
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <serial_send_blocking>
}
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <Update>:

void Update(Communications *self){
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
	char Flag =0;
			if (serial_receive_buffer_full()==1){
     532:	0e 94 a0 14 	call	0x2940	; 0x2940 <serial_receive_buffer_full>
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	09 f0       	breq	.+2      	; 0x53c <Update+0x12>
     53a:	5e c0       	rjmp	.+188    	; 0x5f8 <Update+0xce>
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
     53c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     53e:	88 30       	cpi	r24, 0x08	; 8
     540:	09 f0       	breq	.+2      	; 0x544 <Update+0x1a>
     542:	5c c0       	rjmp	.+184    	; 0x5fc <Update+0xd2>
     544:	e8 81       	ld	r30, Y
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	ec 0f       	add	r30, r28
     54c:	fd 1f       	adc	r31, r29
     54e:	83 8d       	ldd	r24, Z+27	; 0x1b
     550:	85 36       	cpi	r24, 0x65	; 101
     552:	09 f0       	breq	.+2      	; 0x556 <Update+0x2c>
     554:	55 c0       	rjmp	.+170    	; 0x600 <Update+0xd6>
				Flag = 1;
				//play_from_program_space(fugue);
				
				sendACK(self); // stops here to send acknowledge
     556:	ce 01       	movw	r24, r28
     558:	0e 94 7d 02 	call	0x4fa	; 0x4fa <sendACK>
				if (self->Recieved[5]==254 || self->EmergencyStop==1){	//enter emergency stop
     55c:	88 a1       	ldd	r24, Y+32	; 0x20
     55e:	8e 3f       	cpi	r24, 0xFE	; 254
     560:	31 f0       	breq	.+12     	; 0x56e <Update+0x44>
     562:	fe 01       	movw	r30, r28
     564:	e5 59       	subi	r30, 0x95	; 149
     566:	ff 4f       	sbci	r31, 0xFF	; 255
     568:	80 81       	ld	r24, Z
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	49 f4       	brne	.+18     	; 0x580 <Update+0x56>
									play_from_program_space(fugue);
     56e:	8a e7       	ldi	r24, 0x7A	; 122
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 11 12 	call	0x2422	; 0x2422 <play_from_program_space>
					self->EmergencyStop=1;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	fe 01       	movw	r30, r28
     57a:	e5 59       	subi	r30, 0x95	; 149
     57c:	ff 4f       	sbci	r31, 0xFF	; 255
     57e:	80 83       	st	Z, r24
				}
				
				if (self->Recieved[8]==250 && self->EmergencyStop==1){	// Leave emergency stop
     580:	8b a1       	ldd	r24, Y+35	; 0x23
     582:	8a 3f       	cpi	r24, 0xFA	; 250
     584:	39 f4       	brne	.+14     	; 0x594 <Update+0x6a>
     586:	fe 01       	movw	r30, r28
     588:	e5 59       	subi	r30, 0x95	; 149
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	90 81       	ld	r25, Z
     58e:	91 30       	cpi	r25, 0x01	; 1
     590:	09 f4       	brne	.+2      	; 0x594 <Update+0x6a>
					self->EmergencyStop=0;
     592:	10 82       	st	Z, r1
				}
				
				if (self->Recieved[8]==245){							// Enter Spin Mode
     594:	85 3f       	cpi	r24, 0xF5	; 245
     596:	29 f4       	brne	.+10     	; 0x5a2 <Update+0x78>
					self->EmergencyStop=3;
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	fe 01       	movw	r30, r28
     59c:	e5 59       	subi	r30, 0x95	; 149
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	90 83       	st	Z, r25
				}
				if (self->Recieved[8]==240){							// Enter Manual Mode
     5a2:	80 3f       	cpi	r24, 0xF0	; 240
     5a4:	a9 f4       	brne	.+42     	; 0x5d0 <Update+0xa6>
					self->EmergencyStop=4;
     5a6:	84 e0       	ldi	r24, 0x04	; 4
     5a8:	fe 01       	movw	r30, r28
     5aa:	e5 59       	subi	r30, 0x95	; 149
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	80 83       	st	Z, r24
					for (int i = 0; i < 4; i++){
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0a c0       	rjmp	.+20     	; 0x5ca <Update+0xa0>
						self->Direction[i]=self->Recieved[i+9];
     5b6:	fc 01       	movw	r30, r24
     5b8:	39 96       	adiw	r30, 0x09	; 9
     5ba:	ec 0f       	add	r30, r28
     5bc:	fd 1f       	adc	r31, r29
     5be:	23 8d       	ldd	r18, Z+27	; 0x1b
     5c0:	fe 01       	movw	r30, r28
     5c2:	e8 0f       	add	r30, r24
     5c4:	f9 1f       	adc	r31, r25
     5c6:	25 ab       	std	Z+53, r18	; 0x35
				if (self->Recieved[8]==245){							// Enter Spin Mode
					self->EmergencyStop=3;
				}
				if (self->Recieved[8]==240){							// Enter Manual Mode
					self->EmergencyStop=4;
					for (int i = 0; i < 4; i++){
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	84 30       	cpi	r24, 0x04	; 4
     5cc:	91 05       	cpc	r25, r1
     5ce:	9c f3       	brlt	.-26     	; 0x5b6 <Update+0x8c>
						self->Direction[i]=self->Recieved[i+9];
					}
				}
				
				if (self->locationx==255 && self->locationy==255){
     5d0:	fe 01       	movw	r30, r28
     5d2:	e2 59       	subi	r30, 0x92	; 146
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	80 81       	ld	r24, Z
     5d8:	8f 3f       	cpi	r24, 0xFF	; 255
     5da:	a1 f4       	brne	.+40     	; 0x604 <Update+0xda>
     5dc:	31 96       	adiw	r30, 0x01	; 1
     5de:	80 81       	ld	r24, Z
     5e0:	8f 3f       	cpi	r24, 0xFF	; 255
     5e2:	91 f4       	brne	.+36     	; 0x608 <Update+0xde>
					filllocationarrays(self);
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 42 01 	call	0x284	; 0x284 <filllocationarrays>
					self->flag =1;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	fe 01       	movw	r30, r28
     5ee:	e0 59       	subi	r30, 0x90	; 144
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	80 83       	st	Z, r24

void Update(Communications *self){
	char Flag =0;
			if (serial_receive_buffer_full()==1){
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
				Flag = 1;
     5f4:	11 e0       	ldi	r17, 0x01	; 1
     5f6:	09 c0       	rjmp	.+18     	; 0x60a <Update+0xe0>
						tmp[2]=STOP;
						serial_send_blocking(tmp,self->val);
}

void Update(Communications *self){
	char Flag =0;
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	07 c0       	rjmp	.+14     	; 0x60a <Update+0xe0>
     5fc:	10 e0       	ldi	r17, 0x00	; 0
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <Update+0xe0>
     600:	10 e0       	ldi	r17, 0x00	; 0
     602:	03 c0       	rjmp	.+6      	; 0x60a <Update+0xe0>
			if (serial_receive_buffer_full()==1){
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
				Flag = 1;
     604:	11 e0       	ldi	r17, 0x01	; 1
     606:	01 c0       	rjmp	.+2      	; 0x60a <Update+0xe0>
     608:	11 e0       	ldi	r17, 0x01	; 1
					self->flag =1;
				}
				}
			}
			
				for (char i=0;i<self->val;i++){
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	05 c0       	rjmp	.+10     	; 0x618 <Update+0xee>
					self->msgBuffer[i]=i;
     60e:	fe 01       	movw	r30, r28
     610:	e8 0f       	add	r30, r24
     612:	f1 1d       	adc	r31, r1
     614:	81 83       	std	Z+1, r24	; 0x01
					self->flag =1;
				}
				}
			}
			
				for (char i=0;i<self->val;i++){
     616:	8f 5f       	subi	r24, 0xFF	; 255
     618:	68 81       	ld	r22, Y
     61a:	86 17       	cp	r24, r22
     61c:	c0 f3       	brcs	.-16     	; 0x60e <Update+0xe4>
					self->msgBuffer[i]=i;
				}
				self->msgBuffer[0]=START;
     61e:	88 e0       	ldi	r24, 0x08	; 8
     620:	89 83       	std	Y+1, r24	; 0x01
				self->msgBuffer[1]=self->batterylvl;
     622:	fe 01       	movw	r30, r28
     624:	e4 59       	subi	r30, 0x94	; 148
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	80 81       	ld	r24, Z
     62a:	8a 83       	std	Y+2, r24	; 0x02
				self->msgBuffer[2]=self->magprocess;
     62c:	31 96       	adiw	r30, 0x01	; 1
     62e:	80 81       	ld	r24, Z
     630:	8b 83       	std	Y+3, r24	; 0x03
				self->msgBuffer[3]=self->locationx;
     632:	31 96       	adiw	r30, 0x01	; 1
     634:	80 81       	ld	r24, Z
     636:	8c 83       	std	Y+4, r24	; 0x04
				self->msgBuffer[4]=self->locationy;
     638:	31 96       	adiw	r30, 0x01	; 1
     63a:	80 81       	ld	r24, Z
     63c:	8d 83       	std	Y+5, r24	; 0x05
				self->msgBuffer[5]=self->EmergencyStop;
     63e:	34 97       	sbiw	r30, 0x04	; 4
     640:	80 81       	ld	r24, Z
     642:	8e 83       	std	Y+6, r24	; 0x06
				self->msgBuffer[self->val-1]=STOP;
     644:	e6 2f       	mov	r30, r22
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	ec 0f       	add	r30, r28
     64c:	fd 1f       	adc	r31, r29
     64e:	85 e6       	ldi	r24, 0x65	; 101
     650:	81 83       	std	Z+1, r24	; 0x01
				serial_send(self->msgBuffer, self->val);
     652:	ce 01       	movw	r24, r28
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <serial_send>

				//delay_ms(10000); // test
				if (Flag == 1){
     65a:	11 30       	cpi	r17, 0x01	; 1
     65c:	29 f4       	brne	.+10     	; 0x668 <Update+0x13e>
					serial_receive(self->Recieved,self->val);
     65e:	68 81       	ld	r22, Y
     660:	ce 01       	movw	r24, r28
     662:	4b 96       	adiw	r24, 0x1b	; 27
     664:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <serial_receive>
				}		
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	08 95       	ret

00000670 <fillarrays>:

void fillarrays(Communications *self){
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	60 97       	sbiw	r28, 0x10	; 16
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	ac 01       	movw	r20, r24
	//temp
		char arrx[]={2,5,4,2,1,6,1,5};
     686:	88 e0       	ldi	r24, 0x08	; 8
     688:	e8 e2       	ldi	r30, 0x28	; 40
     68a:	f1 e0       	ldi	r31, 0x01	; 1
     68c:	de 01       	movw	r26, r28
     68e:	11 96       	adiw	r26, 0x01	; 1
     690:	01 90       	ld	r0, Z+
     692:	0d 92       	st	X+, r0
     694:	8a 95       	dec	r24
     696:	e1 f7       	brne	.-8      	; 0x690 <fillarrays+0x20>
		char arry[]={0,1,3,5,2,4,1,2};
     698:	88 e0       	ldi	r24, 0x08	; 8
     69a:	e0 e3       	ldi	r30, 0x30	; 48
     69c:	f1 e0       	ldi	r31, 0x01	; 1
     69e:	de 01       	movw	r26, r28
     6a0:	19 96       	adiw	r26, 0x09	; 9
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	8a 95       	dec	r24
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <fillarrays+0x32>
		for (int i=0;i<8;i++){
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	19 c0       	rjmp	.+50     	; 0x6e2 <fillarrays+0x72>
			self->Orderarx[i]=arrx[i];
     6b0:	e1 e0       	ldi	r30, 0x01	; 1
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	ec 0f       	add	r30, r28
     6b6:	fd 1f       	adc	r31, r29
     6b8:	e2 0f       	add	r30, r18
     6ba:	f3 1f       	adc	r31, r19
     6bc:	90 81       	ld	r25, Z
     6be:	da 01       	movw	r26, r20
     6c0:	a2 0f       	add	r26, r18
     6c2:	b3 1f       	adc	r27, r19
     6c4:	fd 01       	movw	r30, r26
     6c6:	ee 5a       	subi	r30, 0xAE	; 174
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	90 83       	st	Z, r25
			self->Orderary[i]=arry[i];
     6cc:	e9 e0       	ldi	r30, 0x09	; 9
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	ec 0f       	add	r30, r28
     6d2:	fd 1f       	adc	r31, r29
     6d4:	e2 0f       	add	r30, r18
     6d6:	f3 1f       	adc	r31, r19
     6d8:	90 81       	ld	r25, Z
     6da:	d9 96       	adiw	r26, 0x39	; 57
     6dc:	9c 93       	st	X, r25

void fillarrays(Communications *self){
	//temp
		char arrx[]={2,5,4,2,1,6,1,5};
		char arry[]={0,1,3,5,2,4,1,2};
		for (int i=0;i<8;i++){
     6de:	2f 5f       	subi	r18, 0xFF	; 255
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	28 30       	cpi	r18, 0x08	; 8
     6e4:	31 05       	cpc	r19, r1
     6e6:	24 f3       	brlt	.-56     	; 0x6b0 <fillarrays+0x40>
			self->Orderarx[i]=arrx[i];
			self->Orderary[i]=arry[i];
		}
}
     6e8:	60 96       	adiw	r28, 0x10	; 16
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <Communications_INIT>:

void Communications_INIT(Communications * myCom){
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	ec 01       	movw	r28, r24
	myCom->val = Max_Bytes;	
     700:	8a e1       	ldi	r24, 0x1A	; 26
     702:	88 83       	st	Y, r24


	//Setup Communications
	serial_set_baud_rate(9600);
     704:	60 e8       	ldi	r22, 0x80	; 128
     706:	75 e2       	ldi	r23, 0x25	; 37
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 7e 15 	call	0x2afc	; 0x2afc <serial_set_baud_rate>
	serial_receive(myCom->Recieved,myCom->val);
     710:	68 81       	ld	r22, Y
     712:	ce 01       	movw	r24, r28
     714:	4b 96       	adiw	r24, 0x1b	; 27
     716:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <serial_receive>

	//filling in functions
	myCom->Update		 = Update;
     71a:	fe 01       	movw	r30, r28
     71c:	ef 58       	subi	r30, 0x8F	; 143
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	85 e9       	ldi	r24, 0x95	; 149
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	91 83       	std	Z+1, r25	; 0x01
     726:	80 83       	st	Z, r24
		
	//filling in default values
	myCom->EmergencyStop = 0;
     728:	36 97       	sbiw	r30, 0x06	; 6
     72a:	10 82       	st	Z, r1
	myCom->batterylvl	 = 55;
     72c:	31 96       	adiw	r30, 0x01	; 1
     72e:	87 e3       	ldi	r24, 0x37	; 55
     730:	80 83       	st	Z, r24
	myCom->magprocess	 = 20;
     732:	31 96       	adiw	r30, 0x01	; 1
     734:	84 e1       	ldi	r24, 0x14	; 20
     736:	80 83       	st	Z, r24
	myCom->locationx	 = 4;
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	80 83       	st	Z, r24
	myCom->locationy	 = 5;
     73e:	31 96       	adiw	r30, 0x01	; 1
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	80 83       	st	Z, r24
	
	
	fillarrays(myCom);
     744:	ce 01       	movw	r24, r28
     746:	0e 94 38 03 	call	0x670	; 0x670 <fillarrays>
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <batteryPercentage>:
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     758:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <read_battery_millivolts_3pi>
     75c:	bc 01       	movw	r22, r24
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__floatunsisf>
     766:	6b 01       	movw	r12, r22
     768:	7c 01       	movw	r14, r24
     76a:	9b 01       	movw	r18, r22
     76c:	ac 01       	movw	r20, r24
     76e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__mulsf3>
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
     776:	c7 01       	movw	r24, r14
     778:	b6 01       	movw	r22, r12
     77a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__mulsf3>
     77e:	2c e0       	ldi	r18, 0x0C	; 12
     780:	39 eb       	ldi	r19, 0xB9	; 185
     782:	4d e2       	ldi	r20, 0x2D	; 45
     784:	50 e3       	ldi	r21, 0x30	; 48
     786:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__mulsf3>
     78a:	ff 90       	pop	r15
     78c:	ef 90       	pop	r14
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	08 95       	ret

00000794 <updateDisplay>:
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	7c 01       	movw	r14, r24
     7a0:	8b 01       	movw	r16, r22
     7a2:	c4 2f       	mov	r28, r20
     7a4:	0e 94 1d 13 	call	0x263a	; 0x263a <clear>
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
     7b0:	85 e5       	ldi	r24, 0x55	; 85
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     7b8:	b7 01       	movw	r22, r14
     7ba:	ff 0c       	add	r15, r15
     7bc:	88 0b       	sbc	r24, r24
     7be:	99 0b       	sbc	r25, r25
     7c0:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
     7c4:	8a e5       	ldi	r24, 0x5A	; 90
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
     7d4:	8c e5       	ldi	r24, 0x5C	; 92
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     7dc:	b8 01       	movw	r22, r16
     7de:	11 0f       	add	r17, r17
     7e0:	88 0b       	sbc	r24, r24
     7e2:	99 0b       	sbc	r25, r25
     7e4:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
     7e8:	8a e5       	ldi	r24, 0x5A	; 90
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     7f0:	c2 30       	cpi	r28, 0x02	; 2
     7f2:	a9 f0       	breq	.+42     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7f4:	28 f4       	brcc	.+10     	; 0x800 <__DATA_REGION_LENGTH__>
     7f6:	cc 23       	and	r28, r28
     7f8:	41 f0       	breq	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7fa:	c1 30       	cpi	r28, 0x01	; 1
     7fc:	59 f0       	breq	.+22     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     7fe:	1d c0       	rjmp	.+58     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     800:	c3 30       	cpi	r28, 0x03	; 3
     802:	91 f0       	breq	.+36     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     804:	c4 30       	cpi	r28, 0x04	; 4
     806:	a9 f0       	breq	.+42     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     808:	18 c0       	rjmp	.+48     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     80a:	81 e6       	ldi	r24, 0x61	; 97
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     812:	13 c0       	rjmp	.+38     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     814:	83 e6       	ldi	r24, 0x63	; 99
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     81c:	0e c0       	rjmp	.+28     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     81e:	85 e6       	ldi	r24, 0x65	; 101
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     826:	09 c0       	rjmp	.+18     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     828:	87 e6       	ldi	r24, 0x67	; 103
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     830:	04 c0       	rjmp	.+8      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     832:	89 e6       	ldi	r24, 0x69	; 105
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 2c 13 	call	0x2658	; 0x2658 <print>
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	08 95       	ret

00000846 <whileBarcode>:
	whileBarcode();
	updateDisplay(0, batteryPercentage(), mazeSolver);
	parcours('B', communications);
	whileLineEnd();
	motorControl('L');
}
     846:	03 c0       	rjmp	.+6      	; 0x84e <whileBarcode+0x8>
     848:	83 e5       	ldi	r24, 0x53	; 83
     84a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
     84e:	0e 94 73 06 	call	0xce6	; 0xce6 <lineType>
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	c9 f7       	brne	.-14     	; 0x848 <whileBarcode+0x2>
     856:	08 95       	ret

00000858 <whileLineEnd>:
     858:	03 c0       	rjmp	.+6      	; 0x860 <whileLineEnd+0x8>
     85a:	83 e5       	ldi	r24, 0x53	; 83
     85c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
     860:	0e 94 73 06 	call	0xce6	; 0xce6 <lineType>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	c9 f7       	brne	.-14     	; 0x85a <whileLineEnd+0x2>
     868:	08 95       	ret

0000086a <pickOrder>:

void pickOrder(Communications *communications)
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	whileBarcode();
     870:	0e 94 23 04 	call	0x846	; 0x846 <whileBarcode>
	//parcours('T', communications);
	warehouse(orderPicking, communications); 	
     874:	be 01       	movw	r22, r28
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 bb 0a 	call	0x1576	; 0x1576 <warehouse>
	parcours('B', communications);
     87c:	be 01       	movw	r22, r28
     87e:	82 e4       	ldi	r24, 0x42	; 66
     880:	0e 94 cd 08 	call	0x119a	; 0x119a <parcours>
	whileLineEnd();
     884:	0e 94 2c 04 	call	0x858	; 0x858 <whileLineEnd>
	motorControl('L');
     888:	8c e4       	ldi	r24, 0x4C	; 76
     88a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <main>:

int main()
{
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	cd b7       	in	r28, 0x3d	; 61
     89a:	de b7       	in	r29, 0x3e	; 62
     89c:	c3 57       	subi	r28, 0x73	; 115
     89e:	d1 09       	sbc	r29, r1
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
	play_from_program_space(welcome);
     8aa:	89 e3       	ldi	r24, 0x39	; 57
     8ac:	92 e0       	ldi	r25, 0x02	; 2
     8ae:	0e 94 11 12 	call	0x2422	; 0x2422 <play_from_program_space>
	
	Communications communications;
	Communications_INIT(&communications);
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Communications_INIT>
	
	initialize(&communications);
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	0e 94 b8 04 	call	0x970	; 0x970 <initialize>
	
		
	while(1) 
	{
		//updateDisplay(0, batteryPercentage(), homingMode);
		communications.Update(&communications);
     8c2:	e4 96       	adiw	r28, 0x34	; 52
     8c4:	ee ad       	ldd	r30, Y+62	; 0x3e
     8c6:	ff ad       	ldd	r31, Y+63	; 0x3f
     8c8:	e4 97       	sbiw	r28, 0x34	; 52
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	09 95       	icall
		
		communications.locationx = -1;
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	e0 96       	adiw	r28, 0x30	; 48
     8d4:	8f af       	std	Y+63, r24	; 0x3f
     8d6:	e0 97       	sbiw	r28, 0x30	; 48
		communications.locationy = -1;
     8d8:	e1 96       	adiw	r28, 0x31	; 49
     8da:	8f af       	std	Y+63, r24	; 0x3f
     8dc:	e1 97       	sbiw	r28, 0x31	; 49
		
		lcd_goto_xy(0, 0);
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
		print_long(communications.EmergencyStop);
     8e6:	ad 96       	adiw	r28, 0x2d	; 45
     8e8:	6f ad       	ldd	r22, Y+63	; 0x3f
     8ea:	ad 97       	sbiw	r28, 0x2d	; 45
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
		
		switch (communications.EmergencyStop) {
     8f6:	ad 96       	adiw	r28, 0x2d	; 45
     8f8:	8f ad       	ldd	r24, Y+63	; 0x3f
     8fa:	ad 97       	sbiw	r28, 0x2d	; 45
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	91 f1       	breq	.+100    	; 0x964 <__stack+0x65>
     900:	83 30       	cpi	r24, 0x03	; 3
     902:	99 f1       	breq	.+102    	; 0x96a <__stack+0x6b>
     904:	81 11       	cpse	r24, r1
     906:	dd cf       	rjmp	.-70     	; 0x8c2 <main+0x2e>
				/*if (read_battery_millivolts_3pi() < 0.6 * 5200)
				{
					charge_3pi(&communications);
				}
				else*/
				print_long(communications.locationx);
     908:	e0 96       	adiw	r28, 0x30	; 48
     90a:	6f ad       	ldd	r22, Y+63	; 0x3f
     90c:	e0 97       	sbiw	r28, 0x30	; 48
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
				print_long(communications.locationy);
     918:	e1 96       	adiw	r28, 0x31	; 49
     91a:	6f ad       	ldd	r22, Y+63	; 0x3f
     91c:	e1 97       	sbiw	r28, 0x31	; 49
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
				if (communications.flag==1)
     928:	e2 96       	adiw	r28, 0x32	; 50
     92a:	8f ad       	ldd	r24, Y+63	; 0x3f
     92c:	e2 97       	sbiw	r28, 0x32	; 50
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	41 f6       	brne	.-112    	; 0x8c2 <main+0x2e>
				{
					communications.flag=0;
     932:	e2 96       	adiw	r28, 0x32	; 50
     934:	1f ae       	std	Y+63, r1	; 0x3f
     936:	e2 97       	sbiw	r28, 0x32	; 50
					
					play_from_program_space(welcome);
     938:	89 e3       	ldi	r24, 0x39	; 57
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	0e 94 11 12 	call	0x2422	; 0x2422 <play_from_program_space>
					communications.locationx = 0;
     940:	e0 96       	adiw	r28, 0x30	; 48
     942:	1f ae       	std	Y+63, r1	; 0x3f
     944:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = 0;
     946:	e1 96       	adiw	r28, 0x31	; 49
     948:	1f ae       	std	Y+63, r1	; 0x3f
     94a:	e1 97       	sbiw	r28, 0x31	; 49
					pickOrder(&communications);
     94c:	ce 01       	movw	r24, r28
     94e:	01 96       	adiw	r24, 0x01	; 1
     950:	0e 94 35 04 	call	0x86a	; 0x86a <pickOrder>
					communications.locationx = -1;
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	e0 96       	adiw	r28, 0x30	; 48
     958:	8f af       	std	Y+63, r24	; 0x3f
     95a:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = -1;
     95c:	e1 96       	adiw	r28, 0x31	; 49
     95e:	8f af       	std	Y+63, r24	; 0x3f
     960:	e1 97       	sbiw	r28, 0x31	; 49
     962:	af cf       	rjmp	.-162    	; 0x8c2 <main+0x2e>
				}
				break;
				delay(100);
			case 2:
				Spin();
     964:	0e 94 c2 07 	call	0xf84	; 0xf84 <Spin>
				break;
     968:	ac cf       	rjmp	.-168    	; 0x8c2 <main+0x2e>
			case 3:
				manualControl();
     96a:	0e 94 7b 07 	call	0xef6	; 0xef6 <manualControl>
				break;
     96e:	a9 cf       	rjmp	.-174    	; 0x8c2 <main+0x2e>

00000970 <initialize>:
void inch(){
	set_motors(50,50);
	delay(200);
	set_motors(0,0);
}
void println(int x){
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <myComs+0x1>
     978:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <myComs>
     97c:	80 ed       	ldi	r24, 0xD0	; 208
     97e:	97 e0       	ldi	r25, 0x07	; 7
     980:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <pololu_3pi_init>
     984:	0d c0       	rjmp	.+26     	; 0x9a0 <initialize+0x30>
     986:	0e 94 1d 13 	call	0x263a	; 0x263a <clear>
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
     992:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <read_battery_millivolts_3pi>
     996:	bc 01       	movw	r22, r24
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
     9a0:	80 e1       	ldi	r24, 0x10	; 16
     9a2:	0e 94 9d 14 	call	0x293a	; 0x293a <button_is_pressed>
     9a6:	88 23       	and	r24, r24
     9a8:	71 f3       	breq	.-36     	; 0x986 <initialize+0x16>
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	0e 94 89 14 	call	0x2912	; 0x2912 <wait_for_button_release>
     9b0:	88 ee       	ldi	r24, 0xE8	; 232
     9b2:	93 e0       	ldi	r25, 0x03	; 3
     9b4:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
     9b8:	c0 e0       	ldi	r28, 0x00	; 0
     9ba:	d0 e0       	ldi	r29, 0x00	; 0
     9bc:	19 c0       	rjmp	.+50     	; 0x9f0 <initialize+0x80>
     9be:	ce 01       	movw	r24, r28
     9c0:	44 97       	sbiw	r24, 0x14	; 20
     9c2:	88 97       	sbiw	r24, 0x28	; 40
     9c4:	38 f0       	brcs	.+14     	; 0x9d4 <initialize+0x64>
     9c6:	68 ed       	ldi	r22, 0xD8	; 216
     9c8:	7f ef       	ldi	r23, 0xFF	; 255
     9ca:	88 e2       	ldi	r24, 0x28	; 40
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <initialize+0x70>
     9d4:	68 e2       	ldi	r22, 0x28	; 40
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	88 ed       	ldi	r24, 0xD8	; 216
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <calibrate_line_sensors>
     9e6:	84 e1       	ldi	r24, 0x14	; 20
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
     9ee:	21 96       	adiw	r28, 0x01	; 1
     9f0:	c0 35       	cpi	r28, 0x50	; 80
     9f2:	d1 05       	cpc	r29, r1
     9f4:	20 f3       	brcs	.-56     	; 0x9be <initialize+0x4e>
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     a02:	80 e1       	ldi	r24, 0x10	; 16
     a04:	0e 94 9d 14 	call	0x293a	; 0x293a <button_is_pressed>
     a08:	88 23       	and	r24, r24
     a0a:	d9 f3       	breq	.-10     	; 0xa02 <initialize+0x92>
     a0c:	80 e1       	ldi	r24, 0x10	; 16
     a0e:	0e 94 89 14 	call	0x2912	; 0x2912 <wait_for_button_release>
     a12:	0e 94 1d 13 	call	0x263a	; 0x263a <clear>
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <inch>:
     a1c:	62 e3       	ldi	r22, 0x32	; 50
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	82 e3       	ldi	r24, 0x32	; 50
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     a28:	88 ec       	ldi	r24, 0xC8	; 200
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     a3c:	08 95       	ret

00000a3e <wait>:
	lcd_goto_xy(0,0);
	print_long(x);	*/
}

void wait(){
	set_motors(0,0);
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
						
	while(!button_is_pressed(BUTTON_B)){}
     a4a:	80 e1       	ldi	r24, 0x10	; 16
     a4c:	0e 94 9d 14 	call	0x293a	; 0x293a <button_is_pressed>
     a50:	88 23       	and	r24, r24
     a52:	d9 f3       	breq	.-10     	; 0xa4a <wait+0xc>
	wait_for_button_release(BUTTON_B);
     a54:	80 e1       	ldi	r24, 0x10	; 16
     a56:	0e 94 89 14 	call	0x2912	; 0x2912 <wait_for_button_release>
     a5a:	08 95       	ret

00000a5c <motorControl>:
		
	
	}
}

void motorControl(char x){													// function that controlls the motor movement and the turns
     a5c:	8f 92       	push	r8
     a5e:	9f 92       	push	r9
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	c8 2f       	mov	r28, r24
	myComs->Update(myComs);
     a76:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <myComs>
     a7a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <myComs+0x1>
     a7e:	fc 01       	movw	r30, r24
     a80:	ef 58       	subi	r30, 0x8F	; 143
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	01 90       	ld	r0, Z+
     a86:	f0 81       	ld	r31, Z
     a88:	e0 2d       	mov	r30, r0
     a8a:	09 95       	icall
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	81 e1       	ldi	r24, 0x11	; 17
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <read_line>
     a96:	8c 01       	movw	r16, r24
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	81 e1       	ldi	r24, 0x11	; 17
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
	
	if(myComs->EmergencyStop == 1)															//Emergency Brake
     aa2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     aa6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     aaa:	e5 59       	subi	r30, 0x95	; 149
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	80 81       	ld	r24, Z
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	39 f4       	brne	.+14     	; 0xac2 <motorControl+0x66>
		set_motors(0,0);	
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     ac0:	05 c1       	rjmp	.+522    	; 0xccc <motorControl+0x270>
	
	
	else if(x == 'L'){														//Turn Left
     ac2:	cc 34       	cpi	r28, 0x4C	; 76
     ac4:	39 f5       	brne	.+78     	; 0xb14 <motorControl+0xb8>
		set_motors(-turn_value,turn_value);
     ac6:	6c e3       	ldi	r22, 0x3C	; 60
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	84 ec       	ldi	r24, 0xC4	; 196
     acc:	9f ef       	ldi	r25, 0xFF	; 255
     ace:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
		
		while (sensors[2] >=Refrence_value)
     ad2:	05 c0       	rjmp	.+10     	; 0xade <motorControl+0x82>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	81 e1       	ldi	r24, 0x11	; 17
     ad8:	92 e0       	ldi	r25, 0x02	; 2
     ada:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
	
	
	else if(x == 'L'){														//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
     ade:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     ae2:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     ae6:	80 39       	cpi	r24, 0x90	; 144
     ae8:	91 40       	sbci	r25, 0x01	; 1
     aea:	a0 f7       	brcc	.-24     	; 0xad4 <motorControl+0x78>
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <motorControl+0x9c>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	81 e1       	ldi	r24, 0x11	; 17
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
	else if(x == 'L'){														//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     af8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     afc:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b00:	81 39       	cpi	r24, 0x91	; 145
     b02:	91 40       	sbci	r25, 0x01	; 1
     b04:	a0 f3       	brcs	.-24     	; 0xaee <motorControl+0x92>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     b12:	dc c0       	rjmp	.+440    	; 0xccc <motorControl+0x270>
	}
	
	
	else if(x == 'R'){														//Turn Right
     b14:	c2 35       	cpi	r28, 0x52	; 82
     b16:	39 f5       	brne	.+78     	; 0xb66 <motorControl+0x10a>
		set_motors(turn_value,-turn_value);
     b18:	64 ec       	ldi	r22, 0xC4	; 196
     b1a:	7f ef       	ldi	r23, 0xFF	; 255
     b1c:	8c e3       	ldi	r24, 0x3C	; 60
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
		
		while (sensors[2] >=Refrence_value)
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <motorControl+0xd4>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	81 e1       	ldi	r24, 0x11	; 17
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
	
	
	else if(x == 'R'){														//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
     b30:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b34:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b38:	80 39       	cpi	r24, 0x90	; 144
     b3a:	91 40       	sbci	r25, 0x01	; 1
     b3c:	a0 f7       	brcc	.-24     	; 0xb26 <motorControl+0xca>
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <motorControl+0xee>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	81 e1       	ldi	r24, 0x11	; 17
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
	else if(x == 'R'){														//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     b4a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b4e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b52:	81 39       	cpi	r24, 0x91	; 145
     b54:	91 40       	sbci	r25, 0x01	; 1
     b56:	a0 f3       	brcs	.-24     	; 0xb40 <motorControl+0xe4>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     b64:	b3 c0       	rjmp	.+358    	; 0xccc <motorControl+0x270>
	}
		
			
	else if(x == 'S'){												//drive straight and adjusts the robot so it follows the line
     b66:	c3 35       	cpi	r28, 0x53	; 83
     b68:	09 f0       	breq	.+2      	; 0xb6c <motorControl+0x110>
     b6a:	66 c0       	rjmp	.+204    	; 0xc38 <motorControl+0x1dc>
		// are not interested in the individual sensor readings.
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     b6c:	c8 01       	movw	r24, r16
     b6e:	80 5d       	subi	r24, 0xD0	; 208
     b70:	97 40       	sbci	r25, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     b72:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <last_proportional>
     b76:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <last_proportional+0x1>
     b7a:	ec 01       	movw	r28, r24
     b7c:	c2 1b       	sub	r28, r18
     b7e:	d3 0b       	sbc	r29, r19
		integral = integral + proportional;
     b80:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <integral>
     b84:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <integral+0x1>
     b88:	fc 01       	movw	r30, r24
     b8a:	e6 0f       	add	r30, r22
     b8c:	f7 1f       	adc	r31, r23
     b8e:	f0 93 10 02 	sts	0x0210, r31	; 0x800210 <integral+0x1>
     b92:	e0 93 0f 02 	sts	0x020F, r30	; 0x80020f <integral>

		// Remember the last position.
		 last_proportional = proportional;
     b96:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <last_proportional+0x1>
     b9a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <last_proportional>
 
 
		int power_difference = proportional/10 + integral/40000 + derivative*0.50;						// derivative == stuur snelheid
     b9e:	6a e0       	ldi	r22, 0x0A	; 10
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	0e 94 12 1c 	call	0x3824	; 0x3824 <__divmodhi4>
     ba6:	6b 01       	movw	r12, r22
     ba8:	bf 01       	movw	r22, r30
     baa:	ff 0f       	add	r31, r31
     bac:	88 0b       	sbc	r24, r24
     bae:	99 0b       	sbc	r25, r25
     bb0:	20 e4       	ldi	r18, 0x40	; 64
     bb2:	3c e9       	ldi	r19, 0x9C	; 156
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	0e 94 48 1c 	call	0x3890	; 0x3890 <__divmodsi4>
     bbc:	0d 2c       	mov	r0, r13
     bbe:	00 0c       	add	r0, r0
     bc0:	ee 08       	sbc	r14, r14
     bc2:	ff 08       	sbc	r15, r15
     bc4:	c2 0e       	add	r12, r18
     bc6:	d3 1e       	adc	r13, r19
     bc8:	e4 1e       	adc	r14, r20
     bca:	f5 1e       	adc	r15, r21
     bcc:	be 01       	movw	r22, r28
     bce:	dd 0f       	add	r29, r29
     bd0:	88 0b       	sbc	r24, r24
     bd2:	99 0b       	sbc	r25, r25
     bd4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__floatsisf>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__mulsf3>
     be4:	4b 01       	movw	r8, r22
     be6:	5c 01       	movw	r10, r24
     be8:	c7 01       	movw	r24, r14
     bea:	b6 01       	movw	r22, r12
     bec:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__floatsisf>
     bf0:	a5 01       	movw	r20, r10
     bf2:	94 01       	movw	r18, r8
     bf4:	0e 94 18 0c 	call	0x1830	; 0x1830 <__addsf3>
     bf8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fixsfsi>
     bfc:	cb 01       	movw	r24, r22

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 70;
		if(power_difference > max)
     bfe:	67 34       	cpi	r22, 0x47	; 71
     c00:	71 05       	cpc	r23, r1
     c02:	14 f0       	brlt	.+4      	; 0xc08 <motorControl+0x1ac>
			power_difference = max;
     c04:	86 e4       	ldi	r24, 0x46	; 70
     c06:	90 e0       	ldi	r25, 0x00	; 0
		if(power_difference < -max)
     c08:	8a 3b       	cpi	r24, 0xBA	; 186
     c0a:	2f ef       	ldi	r18, 0xFF	; 255
     c0c:	92 07       	cpc	r25, r18
     c0e:	14 f4       	brge	.+4      	; 0xc14 <motorControl+0x1b8>
			power_difference = -max;
     c10:	8a eb       	ldi	r24, 0xBA	; 186
     c12:	9f ef       	ldi	r25, 0xFF	; 255

		if(power_difference < 0)
     c14:	99 23       	and	r25, r25
     c16:	3c f4       	brge	.+14     	; 0xc26 <motorControl+0x1ca>
			set_motors(max+power_difference, max);
     c18:	66 e4       	ldi	r22, 0x46	; 70
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	8a 5b       	subi	r24, 0xBA	; 186
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     c24:	53 c0       	rjmp	.+166    	; 0xccc <motorControl+0x270>
		else
			set_motors(max, max-power_difference);
     c26:	66 e4       	ldi	r22, 0x46	; 70
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	68 1b       	sub	r22, r24
     c2c:	79 0b       	sbc	r23, r25
     c2e:	86 e4       	ldi	r24, 0x46	; 70
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     c36:	4a c0       	rjmp	.+148    	; 0xccc <motorControl+0x270>
		
	}
	
	
	else if(x == 'B'){														//Reverse while following the line
     c38:	c2 34       	cpi	r28, 0x42	; 66
     c3a:	09 f5       	brne	.+66     	; 0xc7e <motorControl+0x222>
		set_motors(-50,-50);
     c3c:	6e ec       	ldi	r22, 0xCE	; 206
     c3e:	7f ef       	ldi	r23, 0xFF	; 255
     c40:	8e ec       	ldi	r24, 0xCE	; 206
     c42:	9f ef       	ldi	r25, 0xFF	; 255
     c44:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
		
		if (sensors[3] >=Refrence_value)
     c48:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     c4c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     c50:	80 39       	cpi	r24, 0x90	; 144
     c52:	91 40       	sbci	r25, 0x01	; 1
     c54:	30 f0       	brcs	.+12     	; 0xc62 <motorControl+0x206>
			set_motors(-50,-55);
     c56:	69 ec       	ldi	r22, 0xC9	; 201
     c58:	7f ef       	ldi	r23, 0xFF	; 255
     c5a:	8e ec       	ldi	r24, 0xCE	; 206
     c5c:	9f ef       	ldi	r25, 0xFF	; 255
     c5e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
		if (sensors[1] >=Refrence_value)
     c62:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     c66:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     c6a:	80 39       	cpi	r24, 0x90	; 144
     c6c:	91 40       	sbci	r25, 0x01	; 1
     c6e:	70 f1       	brcs	.+92     	; 0xccc <motorControl+0x270>
			set_motors(-55,-50);
     c70:	6e ec       	ldi	r22, 0xCE	; 206
     c72:	7f ef       	ldi	r23, 0xFF	; 255
     c74:	89 ec       	ldi	r24, 0xC9	; 201
     c76:	9f ef       	ldi	r25, 0xFF	; 255
     c78:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
     c7c:	27 c0       	rjmp	.+78     	; 0xccc <motorControl+0x270>
	}
	
	
	else if(x == 'T'){														// Turn around
     c7e:	c4 35       	cpi	r28, 0x54	; 84
     c80:	a1 f4       	brne	.+40     	; 0xcaa <motorControl+0x24e>
		set_motors(-turn_value,turn_value);
     c82:	6c e3       	ldi	r22, 0x3C	; 60
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	84 ec       	ldi	r24, 0xC4	; 196
     c88:	9f ef       	ldi	r25, 0xFF	; 255
     c8a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
		
		while (sensors[2] <=Refrence_value)
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <motorControl+0x23e>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	81 e1       	ldi	r24, 0x11	; 17
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
	
	
	else if(x == 'T'){														// Turn around
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] <=Refrence_value)
     c9a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     c9e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     ca2:	81 39       	cpi	r24, 0x91	; 145
     ca4:	91 40       	sbci	r25, 0x01	; 1
     ca6:	a0 f3       	brcs	.-24     	; 0xc90 <motorControl+0x234>
     ca8:	11 c0       	rjmp	.+34     	; 0xccc <motorControl+0x270>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
     caa:	c0 35       	cpi	r28, 0x50	; 80
     cac:	79 f4       	brne	.+30     	; 0xccc <motorControl+0x270>
     cae:	0a c0       	rjmp	.+20     	; 0xcc4 <motorControl+0x268>
		for( int i=50;i>=0;i-=3)
		{
			set_motors(i,i);
     cb0:	be 01       	movw	r22, r28
     cb2:	ce 01       	movw	r24, r28
     cb4:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
		for( int i=50;i>=0;i-=3)
     cc0:	23 97       	sbiw	r28, 0x03	; 3
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <motorControl+0x26c>
     cc4:	c2 e3       	ldi	r28, 0x32	; 50
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
     cc8:	dd 23       	and	r29, r29
     cca:	94 f7       	brge	.-28     	; 0xcb0 <motorControl+0x254>
			set_motors(i,i);
			delay(4);
		}
		
		
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	bf 90       	pop	r11
     cde:	af 90       	pop	r10
     ce0:	9f 90       	pop	r9
     ce2:	8f 90       	pop	r8
     ce4:	08 95       	ret

00000ce6 <lineType>:
						
	while(!button_is_pressed(BUTTON_B)){}
	wait_for_button_release(BUTTON_B);
}

char lineType(){																																	// function that returns the type of junction it detects
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
	while(1){																																		// >= 500 = black line		<=500 = white
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	81 e1       	ldi	r24, 0x11	; 17
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
					
		if (sensors[0] >=Refrence_value && sensors[1] >= Refrence_value && sensors[4] <= Refrence_value ){																							//Checks if its a left corner or a straight with left corner
     cf4:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <sensors>
     cf8:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <sensors+0x1>
     cfc:	20 39       	cpi	r18, 0x90	; 144
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	34 07       	cpc	r19, r20
     d02:	38 f1       	brcs	.+78     	; 0xd52 <lineType+0x6c>
     d04:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     d08:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     d0c:	80 39       	cpi	r24, 0x90	; 144
     d0e:	91 40       	sbci	r25, 0x01	; 1
     d10:	00 f1       	brcs	.+64     	; 0xd52 <lineType+0x6c>
     d12:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     d16:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     d1a:	81 39       	cpi	r24, 0x91	; 145
     d1c:	91 40       	sbci	r25, 0x01	; 1
     d1e:	c8 f4       	brcc	.+50     	; 0xd52 <lineType+0x6c>
			inch();
     d20:	0e 94 0e 05 	call	0xa1c	; 0xa1c <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	81 e1       	ldi	r24, 0x11	; 17
     d28:	92 e0       	ldi	r25, 0x02	; 2
     d2a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
     d2e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     d32:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     d36:	80 39       	cpi	r24, 0x90	; 144
     d38:	91 40       	sbci	r25, 0x01	; 1
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <lineType+0x58>
     d3c:	ca c0       	rjmp	.+404    	; 0xed2 <lineType+0x1ec>
     d3e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     d42:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     d46:	80 39       	cpi	r24, 0x90	; 144
     d48:	91 40       	sbci	r25, 0x01	; 1
     d4a:	08 f4       	brcc	.+2      	; 0xd4e <lineType+0x68>
     d4c:	c4 c0       	rjmp	.+392    	; 0xed6 <lineType+0x1f0>
				println(Straight_left_junction);
				return Straight_left_junction;
     d4e:	86 e0       	ldi	r24, 0x06	; 6
     d50:	cf c0       	rjmp	.+414    	; 0xef0 <lineType+0x20a>
				return Left_corner;
			}
		}
		
		
		else if (sensors[3] >=Refrence_value && sensors[4] >= Refrence_value && sensors[0] <= Refrence_value){																							//Checks if its a right corner or a straight with right corner
     d52:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     d56:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     d5a:	80 39       	cpi	r24, 0x90	; 144
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	94 07       	cpc	r25, r20
     d60:	18 f1       	brcs	.+70     	; 0xda8 <lineType+0xc2>
     d62:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <sensors+0x8>
     d66:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <sensors+0x9>
     d6a:	40 39       	cpi	r20, 0x90	; 144
     d6c:	51 40       	sbci	r21, 0x01	; 1
     d6e:	e0 f0       	brcs	.+56     	; 0xda8 <lineType+0xc2>
     d70:	21 39       	cpi	r18, 0x91	; 145
     d72:	31 40       	sbci	r19, 0x01	; 1
     d74:	c8 f4       	brcc	.+50     	; 0xda8 <lineType+0xc2>
			inch();
     d76:	0e 94 0e 05 	call	0xa1c	; 0xa1c <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	81 e1       	ldi	r24, 0x11	; 17
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
     d84:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     d88:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     d8c:	80 39       	cpi	r24, 0x90	; 144
     d8e:	91 40       	sbci	r25, 0x01	; 1
     d90:	08 f0       	brcs	.+2      	; 0xd94 <lineType+0xae>
     d92:	a3 c0       	rjmp	.+326    	; 0xeda <lineType+0x1f4>
     d94:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     d98:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     d9c:	80 39       	cpi	r24, 0x90	; 144
     d9e:	91 40       	sbci	r25, 0x01	; 1
     da0:	08 f4       	brcc	.+2      	; 0xda4 <lineType+0xbe>
     da2:	9d c0       	rjmp	.+314    	; 0xede <lineType+0x1f8>
				println(Straight_right_junction);
				return Straight_right_junction;
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	a4 c0       	rjmp	.+328    	; 0xef0 <lineType+0x20a>
				println(Straight_left_junction);
				return Right_corner;
			}
		}
		
				else if (sensors[1] >=Refrence_value && sensors[3] >= Refrence_value){																									//Checks if its a X junction or a T junction
     da8:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <sensors+0x2>
     dac:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <sensors+0x3>
     db0:	20 39       	cpi	r18, 0x90	; 144
     db2:	41 e0       	ldi	r20, 0x01	; 1
     db4:	34 07       	cpc	r19, r20
     db6:	08 f4       	brcc	.+2      	; 0xdba <lineType+0xd4>
     db8:	7d c0       	rjmp	.+250    	; 0xeb4 <lineType+0x1ce>
     dba:	80 39       	cpi	r24, 0x90	; 144
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	96 07       	cpc	r25, r22
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <lineType+0xde>
     dc2:	78 c0       	rjmp	.+240    	; 0xeb4 <lineType+0x1ce>
					inch();
     dc4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <inch>
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	81 e1       	ldi	r24, 0x11	; 17
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
					if (sensors[0] >=Refrence_value && sensors[1] >=Refrence_value && sensors[3] >= Refrence_value && sensors[4] >=Refrence_value){
     dd2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     dd6:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     dda:	80 39       	cpi	r24, 0x90	; 144
     ddc:	91 40       	sbci	r25, 0x01	; 1
     dde:	08 f4       	brcc	.+2      	; 0xde2 <lineType+0xfc>
     de0:	60 c0       	rjmp	.+192    	; 0xea2 <lineType+0x1bc>
     de2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     de6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     dea:	80 39       	cpi	r24, 0x90	; 144
     dec:	91 40       	sbci	r25, 0x01	; 1
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <lineType+0x10c>
     df0:	58 c0       	rjmp	.+176    	; 0xea2 <lineType+0x1bc>
     df2:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     df6:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     dfa:	80 39       	cpi	r24, 0x90	; 144
     dfc:	91 40       	sbci	r25, 0x01	; 1
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <lineType+0x11c>
     e00:	50 c0       	rjmp	.+160    	; 0xea2 <lineType+0x1bc>
     e02:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     e06:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     e0a:	80 39       	cpi	r24, 0x90	; 144
     e0c:	91 40       	sbci	r25, 0x01	; 1
     e0e:	08 f4       	brcc	.+2      	; 0xe12 <lineType+0x12c>
     e10:	48 c0       	rjmp	.+144    	; 0xea2 <lineType+0x1bc>
						clear();
     e12:	0e 94 1d 13 	call	0x263a	; 0x263a <clear>
						while(sensors[0] >= 400 || sensors[4] >=400)
     e16:	31 c0       	rjmp	.+98     	; 0xe7a <lineType+0x194>
						{
							lcd_goto_xy(0,0);
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
							print_long(sensors[1]);
     e20:	c1 e1       	ldi	r28, 0x11	; 17
     e22:	d2 e0       	ldi	r29, 0x02	; 2
     e24:	6a 81       	ldd	r22, Y+2	; 0x02
     e26:	7b 81       	ldd	r23, Y+3	; 0x03
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
							lcd_goto_xy(0,1);
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
							print_long(sensors[3]);
     e38:	6e 81       	ldd	r22, Y+6	; 0x06
     e3a:	7f 81       	ldd	r23, Y+7	; 0x07
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
							lcd_goto_xy(5,0);
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
							print_long(sensors[0]);
     e4c:	68 81       	ld	r22, Y
     e4e:	79 81       	ldd	r23, Y+1	; 0x01
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
							lcd_goto_xy(5,1);
     e58:	61 e0       	ldi	r22, 0x01	; 1
     e5a:	85 e0       	ldi	r24, 0x05	; 5
     e5c:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
							print_long(sensors[4]);
     e60:	68 85       	ldd	r22, Y+8	; 0x08
     e62:	79 85       	ldd	r23, Y+9	; 0x09
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 81 13 	call	0x2702	; 0x2702 <print_long>
							
							read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <read_line_sensors_calibrated>
							motorControl('S');
     e74:	83 e5       	ldi	r24, 0x53	; 83
     e76:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
				else if (sensors[1] >=Refrence_value && sensors[3] >= Refrence_value){																									//Checks if its a X junction or a T junction
					inch();
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
					if (sensors[0] >=Refrence_value && sensors[1] >=Refrence_value && sensors[3] >= Refrence_value && sensors[4] >=Refrence_value){
						clear();
						while(sensors[0] >= 400 || sensors[4] >=400)
     e7a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     e7e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     e82:	80 39       	cpi	r24, 0x90	; 144
     e84:	91 40       	sbci	r25, 0x01	; 1
     e86:	40 f6       	brcc	.-112    	; 0xe18 <lineType+0x132>
     e88:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     e8c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     e90:	80 39       	cpi	r24, 0x90	; 144
     e92:	91 40       	sbci	r25, 0x01	; 1
     e94:	08 f6       	brcc	.-126    	; 0xe18 <lineType+0x132>
							print_long(sensors[4]);
							
							read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
							motorControl('S');
						}
						wait();
     e96:	0e 94 1f 05 	call	0xa3e	; 0xa3e <wait>
						clear();
     e9a:	0e 94 1d 13 	call	0x263a	; 0x263a <clear>
					return Barcode;
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	27 c0       	rjmp	.+78     	; 0xef0 <lineType+0x20a>
					}
					else if (sensors[2] >=Refrence_value){
     ea2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     ea6:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     eaa:	80 39       	cpi	r24, 0x90	; 144
     eac:	91 40       	sbci	r25, 0x01	; 1
     eae:	c8 f0       	brcs	.+50     	; 0xee2 <lineType+0x1fc>
						println(X_junction);
						return X_junction;
     eb0:	88 e0       	ldi	r24, 0x08	; 8
     eb2:	1e c0       	rjmp	.+60     	; 0xef0 <lineType+0x20a>
						println(T_junction);
						return T_junction;
					}
				}
				
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){
     eb4:	40 91 15 02 	lds	r20, 0x0215	; 0x800215 <sensors+0x4>
     eb8:	50 91 16 02 	lds	r21, 0x0216	; 0x800216 <sensors+0x5>
     ebc:	49 3c       	cpi	r20, 0xC9	; 201
     ebe:	51 05       	cpc	r21, r1
     ec0:	90 f4       	brcc	.+36     	; 0xee6 <lineType+0x200>
     ec2:	29 3c       	cpi	r18, 0xC9	; 201
     ec4:	31 05       	cpc	r19, r1
     ec6:	88 f4       	brcc	.+34     	; 0xeea <lineType+0x204>
     ec8:	89 3c       	cpi	r24, 0xC9	; 201
     eca:	91 05       	cpc	r25, r1
     ecc:	80 f0       	brcs	.+32     	; 0xeee <lineType+0x208>
			}
			else{
				println(Straight);
				return Straight;
			}				*/																					// check if its straight without any corners
			return Straight;
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <lineType+0x20a>
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
				println(Straight_left_junction);
				return Straight_left_junction;
     ed2:	86 e0       	ldi	r24, 0x06	; 6
     ed4:	0d c0       	rjmp	.+26     	; 0xef0 <lineType+0x20a>
			}
			else{
				println(Left_corner);
				return Left_corner;
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	0b c0       	rjmp	.+22     	; 0xef0 <lineType+0x20a>
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
				println(Straight_right_junction);
				return Straight_right_junction;
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	09 c0       	rjmp	.+18     	; 0xef0 <lineType+0x20a>
			}
			else{
				println(Straight_left_junction);
				return Right_corner;
     ede:	84 e0       	ldi	r24, 0x04	; 4
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <lineType+0x20a>
						println(X_junction);
						return X_junction;
					}
					else {
						println(T_junction);
						return T_junction;
     ee2:	87 e0       	ldi	r24, 0x07	; 7
     ee4:	05 c0       	rjmp	.+10     	; 0xef0 <lineType+0x20a>
			}
			else{
				println(Straight);
				return Straight;
			}				*/																					// check if its straight without any corners
			return Straight;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <lineType+0x20a>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <lineType+0x20a>
					}
				}
				
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){
					println(Line_end);																													// check if the line ends
					return Line_end;
     eee:	81 e0       	ldi	r24, 0x01	; 1
			return Straight;
		}
		
	
	}
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	08 95       	ret

00000ef6 <manualControl>:
}




void manualControl(){
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
int speed = 0;

	if(myComs->Direction[0] == 1){
     efa:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     efe:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     f02:	85 a9       	ldd	r24, Z+53	; 0x35
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	49 f4       	brne	.+18     	; 0xf1a <manualControl+0x24>
		set_motors(speed,speed);
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
		speed++;
     f14:	c1 e0       	ldi	r28, 0x01	; 1
     f16:	d0 e0       	ldi	r29, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <manualControl+0x28>




void manualControl(){
int speed = 0;
     f1a:	c0 e0       	ldi	r28, 0x00	; 0
     f1c:	d0 e0       	ldi	r29, 0x00	; 0
	if(myComs->Direction[0] == 1){
		set_motors(speed,speed);
		speed++;
	}
	
	if(myComs->Direction[1] == 1){
     f1e:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     f22:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     f26:	86 a9       	ldd	r24, Z+54	; 0x36
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	41 f4       	brne	.+16     	; 0xf3c <manualControl+0x46>
		set_motors(-speed,-speed);
     f2c:	88 27       	eor	r24, r24
     f2e:	99 27       	eor	r25, r25
     f30:	8c 1b       	sub	r24, r28
     f32:	9d 0b       	sbc	r25, r29
     f34:	bc 01       	movw	r22, r24
     f36:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
		speed--;
     f3a:	21 97       	sbiw	r28, 0x01	; 1
	}
	
	if(myComs->Direction[2] == 1){
     f3c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     f40:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     f44:	87 a9       	ldd	r24, Z+55	; 0x37
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	49 f4       	brne	.+18     	; 0xf5c <manualControl+0x66>
		set_motors(speed/2,speed);
     f4a:	ce 01       	movw	r24, r28
     f4c:	dd 23       	and	r29, r29
     f4e:	0c f4       	brge	.+2      	; 0xf52 <manualControl+0x5c>
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	be 01       	movw	r22, r28
     f54:	95 95       	asr	r25
     f56:	87 95       	ror	r24
     f58:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
	}
	
	if(myComs->Direction[3] == 1){
     f5c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     f60:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     f64:	80 ad       	ldd	r24, Z+56	; 0x38
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	51 f4       	brne	.+20     	; 0xf7e <manualControl+0x88>
		set_motors(speed,speed/2);
     f6a:	be 01       	movw	r22, r28
     f6c:	dd 23       	and	r29, r29
     f6e:	14 f4       	brge	.+4      	; 0xf74 <manualControl+0x7e>
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	75 95       	asr	r23
     f76:	67 95       	ror	r22
     f78:	ce 01       	movw	r24, r28
     f7a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <set_motors>
	}
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <Spin>:
void Spin(){
	
	for(int i = 0;i>=255;i++){
	set_motors(i,-i);	
	}
	while(myComs->EmergencyStop == 1){}
     f84:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     f88:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     f8c:	e5 59       	subi	r30, 0x95	; 149
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 81       	ld	r24, Z
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	b9 f3       	breq	.-18     	; 0xf84 <Spin>
	for(int i = 255;i<=0;i--){
		set_motors(i,-i);
	}
     f96:	08 95       	ret

00000f98 <parcoursSearch>:
char route[20] = "_"; // hardcode SLR
char routeBack[20];
int routea = 1;

int parcoursSearch(Communications *communications) 
{
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <parcoursSearch+0xa>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	char richting;
	while(1) 
	{
		situatie = lineType();
     fa6:	0e 94 73 06 	call	0xce6	; 0xce6 <lineType>
     faa:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <situatie>
		
		switch (situatie) 
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	89 30       	cpi	r24, 0x09	; 9
     fb2:	91 05       	cpc	r25, r1
     fb4:	08 f0       	brcs	.+2      	; 0xfb8 <parcoursSearch+0x20>
     fb6:	41 c0       	rjmp	.+130    	; 0x103a <parcoursSearch+0xa2>
     fb8:	fc 01       	movw	r30, r24
     fba:	ec 5c       	subi	r30, 0xCC	; 204
     fbc:	ff 4f       	sbci	r31, 0xFF	; 255
     fbe:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__tablejump2__>
		{
			case Straight:
				motorControl('S');
     fc2:	83 e5       	ldi	r24, 0x53	; 83
     fc4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
				break;
     fc8:	38 c0       	rjmp	.+112    	; 0x103a <parcoursSearch+0xa2>
			
			case X_junction:
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
				motorControl('L');
     fca:	8c e4       	ldi	r24, 0x4C	; 76
     fcc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
				richting = 'L';
     fd0:	8c e4       	ldi	r24, 0x4C	; 76
     fd2:	89 83       	std	Y+1, r24	; 0x01
				////print_character('L');
				strncat(route, &richting, 1);
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	be 01       	movw	r22, r28
     fda:	6f 5f       	subi	r22, 0xFF	; 255
     fdc:	7f 4f       	sbci	r23, 0xFF	; 255
     fde:	84 e1       	ldi	r24, 0x14	; 20
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <strncat>
				break;
     fe6:	29 c0       	rjmp	.+82     	; 0x103a <parcoursSearch+0xa2>
			
			case Right_corner:
				motorControl('R');
     fe8:	82 e5       	ldi	r24, 0x52	; 82
     fea:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
				richting = 'R';
     fee:	82 e5       	ldi	r24, 0x52	; 82
     ff0:	89 83       	std	Y+1, r24	; 0x01
				//print_character('R');
				strncat(route, &richting, 1);
     ff2:	41 e0       	ldi	r20, 0x01	; 1
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	be 01       	movw	r22, r28
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	84 e1       	ldi	r24, 0x14	; 20
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <strncat>
				break;
    1004:	1a c0       	rjmp	.+52     	; 0x103a <parcoursSearch+0xa2>
			
			case Straight_right_junction:
				richting = 'S';
    1006:	83 e5       	ldi	r24, 0x53	; 83
    1008:	89 83       	std	Y+1, r24	; 0x01
				//print_character('S');
				strncat(route, &richting, 1);
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	be 01       	movw	r22, r28
    1010:	6f 5f       	subi	r22, 0xFF	; 255
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	84 e1       	ldi	r24, 0x14	; 20
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <strncat>
				break;
    101c:	0e c0       	rjmp	.+28     	; 0x103a <parcoursSearch+0xa2>
				
			case Line_end:
				motorControl('T');
    101e:	84 e5       	ldi	r24, 0x54	; 84
    1020:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
				richting = 'T';
    1024:	84 e5       	ldi	r24, 0x54	; 84
    1026:	89 83       	std	Y+1, r24	; 0x01
				//print_character('T');
				strncat(route, &richting, 1);
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	be 01       	movw	r22, r28
    102e:	6f 5f       	subi	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	84 e1       	ldi	r24, 0x14	; 20
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <strncat>
				motorControl('P');
				//print_character('B');
				return 0;
		}
		
		clear();
    103a:	0e 94 1d 13 	call	0x263a	; 0x263a <clear>
		lcd_goto_xy(0,0);
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	0e 94 a4 13 	call	0x2748	; 0x2748 <lcd_goto_xy>
		for (int i=0; i <= strlen(route);i++ ){
    1046:	00 e0       	ldi	r16, 0x00	; 0
    1048:	10 e0       	ldi	r17, 0x00	; 0
    104a:	08 c0       	rjmp	.+16     	; 0x105c <parcoursSearch+0xc4>
		print_character(route[i]);
    104c:	f8 01       	movw	r30, r16
    104e:	ec 5e       	subi	r30, 0xEC	; 236
    1050:	fe 4f       	sbci	r31, 0xFE	; 254
    1052:	80 81       	ld	r24, Z
    1054:	0e 94 ad 12 	call	0x255a	; 0x255a <print_character>
				return 0;
		}
		
		clear();
		lcd_goto_xy(0,0);
		for (int i=0; i <= strlen(route);i++ ){
    1058:	0f 5f       	subi	r16, 0xFF	; 255
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	e4 e1       	ldi	r30, 0x14	; 20
    105e:	f1 e0       	ldi	r31, 0x01	; 1
    1060:	01 90       	ld	r0, Z+
    1062:	00 20       	and	r0, r0
    1064:	e9 f7       	brne	.-6      	; 0x1060 <parcoursSearch+0xc8>
    1066:	31 97       	sbiw	r30, 0x01	; 1
    1068:	e4 51       	subi	r30, 0x14	; 20
    106a:	f1 40       	sbci	r31, 0x01	; 1
    106c:	e0 17       	cp	r30, r16
    106e:	f1 07       	cpc	r31, r17
    1070:	68 f7       	brcc	.-38     	; 0x104c <parcoursSearch+0xb4>
		print_character(route[i]);
		}
		
		char richting;	
		if (route[strlen(route)-2] == 'T') 
    1072:	df 01       	movw	r26, r30
    1074:	ae 5e       	subi	r26, 0xEE	; 238
    1076:	be 4f       	sbci	r27, 0xFE	; 254
    1078:	8c 91       	ld	r24, X
    107a:	84 35       	cpi	r24, 0x54	; 84
    107c:	09 f0       	breq	.+2      	; 0x1080 <parcoursSearch+0xe8>
    107e:	93 cf       	rjmp	.-218    	; 0xfa6 <parcoursSearch+0xe>
		{
			char char_1 = route[strlen(route)-3];
    1080:	df 01       	movw	r26, r30
    1082:	af 5e       	subi	r26, 0xEF	; 239
    1084:	be 4f       	sbci	r27, 0xFE	; 254
    1086:	8c 91       	ld	r24, X
			char char_2 = route[strlen(route)-1];
    1088:	ed 5e       	subi	r30, 0xED	; 237
    108a:	fe 4f       	sbci	r31, 0xFE	; 254
    108c:	90 81       	ld	r25, Z

			if (char_1 == 'L' && char_2 == 'L') 
    108e:	8c 34       	cpi	r24, 0x4C	; 76
    1090:	29 f4       	brne	.+10     	; 0x109c <parcoursSearch+0x104>
    1092:	9c 34       	cpi	r25, 0x4C	; 76
    1094:	19 f4       	brne	.+6      	; 0x109c <parcoursSearch+0x104>
			{
				richting = 'S';
    1096:	83 e5       	ldi	r24, 0x53	; 83
    1098:	8a 83       	std	Y+2, r24	; 0x02
    109a:	1b c0       	rjmp	.+54     	; 0x10d2 <parcoursSearch+0x13a>
			}
			else if (char_1 == 'S' && char_2 == 'L')
    109c:	83 35       	cpi	r24, 0x53	; 83
    109e:	29 f4       	brne	.+10     	; 0x10aa <parcoursSearch+0x112>
    10a0:	9c 34       	cpi	r25, 0x4C	; 76
    10a2:	19 f4       	brne	.+6      	; 0x10aa <parcoursSearch+0x112>
			{
				richting = 'R';
    10a4:	82 e5       	ldi	r24, 0x52	; 82
    10a6:	8a 83       	std	Y+2, r24	; 0x02
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <parcoursSearch+0x13a>
			}
			else if (char_1 == 'R' && char_2 == 'L')
    10aa:	82 35       	cpi	r24, 0x52	; 82
    10ac:	29 f4       	brne	.+10     	; 0x10b8 <parcoursSearch+0x120>
    10ae:	9c 34       	cpi	r25, 0x4C	; 76
    10b0:	19 f4       	brne	.+6      	; 0x10b8 <parcoursSearch+0x120>
			{
				richting = 'T';
    10b2:	84 e5       	ldi	r24, 0x54	; 84
    10b4:	8a 83       	std	Y+2, r24	; 0x02
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <parcoursSearch+0x13a>
			}
			else if (char_1 == 'L' && char_2 == 'R')
    10b8:	8c 34       	cpi	r24, 0x4C	; 76
    10ba:	29 f4       	brne	.+10     	; 0x10c6 <parcoursSearch+0x12e>
    10bc:	92 35       	cpi	r25, 0x52	; 82
    10be:	19 f4       	brne	.+6      	; 0x10c6 <parcoursSearch+0x12e>
			{
				richting = 'T';
    10c0:	84 e5       	ldi	r24, 0x54	; 84
    10c2:	8a 83       	std	Y+2, r24	; 0x02
    10c4:	06 c0       	rjmp	.+12     	; 0x10d2 <parcoursSearch+0x13a>
			}
			else if (char_1 == 'L' && char_2 == 'S')
    10c6:	8c 34       	cpi	r24, 0x4C	; 76
    10c8:	21 f4       	brne	.+8      	; 0x10d2 <parcoursSearch+0x13a>
    10ca:	93 35       	cpi	r25, 0x53	; 83
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <parcoursSearch+0x13a>
			{
				richting = 'R';
    10ce:	82 e5       	ldi	r24, 0x52	; 82
    10d0:	8a 83       	std	Y+2, r24	; 0x02
			}
			route[strlen(route)-3] = '\0';
    10d2:	e4 e1       	ldi	r30, 0x14	; 20
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	01 90       	ld	r0, Z+
    10d8:	00 20       	and	r0, r0
    10da:	e9 f7       	brne	.-6      	; 0x10d6 <parcoursSearch+0x13e>
    10dc:	34 97       	sbiw	r30, 0x04	; 4
    10de:	10 82       	st	Z, r1
			strncat(route, &richting, 1);
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	be 01       	movw	r22, r28
    10e6:	6e 5f       	subi	r22, 0xFE	; 254
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	84 e1       	ldi	r24, 0x14	; 20
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <strncat>
		}
	}
    10f2:	59 cf       	rjmp	.-334    	; 0xfa6 <parcoursSearch+0xe>
				//print_character('T');
				strncat(route, &richting, 1);
				break;
				
			case Barcode: // end of parcour
				motorControl('P');
    10f4:	80 e5       	ldi	r24, 0x50	; 80
    10f6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
			strncat(route, &richting, 1);
		}
	}
	routea = 0;	
	return 0;
}
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	08 95       	ret

0000110c <parcoursRun>:

int parcoursRun(char way, Communications *communications) 
{
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	18 2f       	mov	r17, r24
	char richting;
	for (int i = 0; i < strlen(route); i++) 
    1118:	c0 e0       	ldi	r28, 0x00	; 0
    111a:	d0 e0       	ldi	r29, 0x00	; 0
    111c:	2a c0       	rjmp	.+84     	; 0x1172 <parcoursRun+0x66>
	{
		while (lineType() == Straight)
		{
			motorControl('S');
    111e:	83 e5       	ldi	r24, 0x53	; 83
    1120:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
int parcoursRun(char way, Communications *communications) 
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
	{
		while (lineType() == Straight)
    1124:	0e 94 73 06 	call	0xce6	; 0xce6 <lineType>
    1128:	88 23       	and	r24, r24
    112a:	c9 f3       	breq	.-14     	; 0x111e <parcoursRun+0x12>
		{
			motorControl('S');
		}
		if (way == 'T') {
    112c:	14 35       	cpi	r17, 0x54	; 84
    112e:	39 f4       	brne	.+14     	; 0x113e <parcoursRun+0x32>
			motorControl(route[i]);
    1130:	fe 01       	movw	r30, r28
    1132:	ec 5e       	subi	r30, 0xEC	; 236
    1134:	fe 4f       	sbci	r31, 0xFE	; 254
    1136:	80 81       	ld	r24, Z
    1138:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
    113c:	19 c0       	rjmp	.+50     	; 0x1170 <parcoursRun+0x64>
		} 
		else if (way == 'B') 
    113e:	12 34       	cpi	r17, 0x42	; 66
    1140:	b9 f4       	brne	.+46     	; 0x1170 <parcoursRun+0x64>
		{
			richting = route[strlen(route)-i-1];
    1142:	e4 e1       	ldi	r30, 0x14	; 20
    1144:	f1 e0       	ldi	r31, 0x01	; 1
    1146:	01 90       	ld	r0, Z+
    1148:	00 20       	and	r0, r0
    114a:	e9 f7       	brne	.-6      	; 0x1146 <parcoursRun+0x3a>
    114c:	31 97       	sbiw	r30, 0x01	; 1
    114e:	e4 51       	subi	r30, 0x14	; 20
    1150:	f1 40       	sbci	r31, 0x01	; 1
    1152:	ee 19       	sub	r30, r14
    1154:	ff 09       	sbc	r31, r15
    1156:	ed 5e       	subi	r30, 0xED	; 237
    1158:	fe 4f       	sbci	r31, 0xFE	; 254
    115a:	80 81       	ld	r24, Z
			switch (richting)
    115c:	8c 34       	cpi	r24, 0x4C	; 76
    115e:	19 f0       	breq	.+6      	; 0x1166 <parcoursRun+0x5a>
    1160:	82 35       	cpi	r24, 0x52	; 82
    1162:	19 f0       	breq	.+6      	; 0x116a <parcoursRun+0x5e>
    1164:	03 c0       	rjmp	.+6      	; 0x116c <parcoursRun+0x60>
			{
				case 'R':
					richting = 'L';
					break;
				case 'L':
					richting = 'R';
    1166:	82 e5       	ldi	r24, 0x52	; 82
					break;
    1168:	01 c0       	rjmp	.+2      	; 0x116c <parcoursRun+0x60>
		{
			richting = route[strlen(route)-i-1];
			switch (richting)
			{
				case 'R':
					richting = 'L';
    116a:	8c e4       	ldi	r24, 0x4C	; 76
					break;
				case 'L':
					richting = 'R';
					break;
			}
			motorControl(richting);
    116c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
}

int parcoursRun(char way, Communications *communications) 
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
    1170:	21 96       	adiw	r28, 0x01	; 1
    1172:	e4 e1       	ldi	r30, 0x14	; 20
    1174:	f1 e0       	ldi	r31, 0x01	; 1
    1176:	01 90       	ld	r0, Z+
    1178:	00 20       	and	r0, r0
    117a:	e9 f7       	brne	.-6      	; 0x1176 <parcoursRun+0x6a>
    117c:	31 97       	sbiw	r30, 0x01	; 1
    117e:	e4 51       	subi	r30, 0x14	; 20
    1180:	f1 40       	sbci	r31, 0x01	; 1
    1182:	7e 01       	movw	r14, r28
    1184:	ce 17       	cp	r28, r30
    1186:	df 07       	cpc	r29, r31
    1188:	68 f2       	brcs	.-102    	; 0x1124 <parcoursRun+0x18>
			}
			motorControl(richting);
		}
	}
	return 0;
}
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	08 95       	ret

0000119a <parcours>:

int parcours(char way, Communications *communications) 
{
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <parcours+0x8>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	18 2f       	mov	r17, r24
    11a8:	7a 83       	std	Y+2, r23	; 0x02
    11aa:	69 83       	std	Y+1, r22	; 0x01
	updateDisplay(0, batteryPercentage(), mazeSolver);
    11ac:	0e 94 a8 03 	call	0x750	; 0x750 <batteryPercentage>
    11b0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fixsfsi>
    11b4:	41 e0       	ldi	r20, 0x01	; 1
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 ca 03 	call	0x794	; 0x794 <updateDisplay>
	if (route[0] == '_'){
    11be:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <route>
    11c2:	8f 35       	cpi	r24, 0x5F	; 95
    11c4:	61 f4       	brne	.+24     	; 0x11de <parcours+0x44>
		memset(route,0,sizeof route);
    11c6:	84 e1       	ldi	r24, 0x14	; 20
    11c8:	e4 e1       	ldi	r30, 0x14	; 20
    11ca:	f1 e0       	ldi	r31, 0x01	; 1
    11cc:	df 01       	movw	r26, r30
    11ce:	1d 92       	st	X+, r1
    11d0:	8a 95       	dec	r24
    11d2:	e9 f7       	brne	.-6      	; 0x11ce <parcours+0x34>
		parcoursSearch(&communications);
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	0e 94 cc 07 	call	0xf98	; 0xf98 <parcoursSearch>
    11dc:	05 c0       	rjmp	.+10     	; 0x11e8 <parcours+0x4e>
	} 
	else 
	{
		parcoursRun(way, communications);
    11de:	69 81       	ldd	r22, Y+1	; 0x01
    11e0:	7a 81       	ldd	r23, Y+2	; 0x02
    11e2:	81 2f       	mov	r24, r17
    11e4:	0e 94 86 08 	call	0x110c	; 0x110c <parcoursRun>
	} 
	return 0;
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	08 95       	ret

000011f8 <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(char *a, char *b) {
    int temp = *a;
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 81       	ld	r18, Z
    *a = *b;
    11fc:	fb 01       	movw	r30, r22
    11fe:	30 81       	ld	r19, Z
    1200:	fc 01       	movw	r30, r24
    1202:	30 83       	st	Z, r19
    *b = temp;
    1204:	fb 01       	movw	r30, r22
    1206:	20 83       	st	Z, r18
    1208:	08 95       	ret

0000120a <bubbleSort>:
}

void bubbleSort(char arr[],char orderY[], int n) {
    120a:	8f 92       	push	r8
    120c:	9f 92       	push	r9
    120e:	af 92       	push	r10
    1210:	bf 92       	push	r11
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	8c 01       	movw	r16, r24
    1224:	5b 01       	movw	r10, r22
    1226:	6a 01       	movw	r12, r20
    for (int i = 0; i < n - 1; i++) {
    1228:	e1 2c       	mov	r14, r1
    122a:	f1 2c       	mov	r15, r1
    122c:	28 c0       	rjmp	.+80     	; 0x127e <bubbleSort+0x74>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
    122e:	f8 01       	movw	r30, r16
    1230:	ec 0f       	add	r30, r28
    1232:	fd 1f       	adc	r31, r29
    1234:	90 81       	ld	r25, Z
    1236:	4e 01       	movw	r8, r28
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	88 1a       	sub	r8, r24
    123c:	98 0a       	sbc	r9, r24
    123e:	d8 01       	movw	r26, r16
    1240:	a8 0d       	add	r26, r8
    1242:	b9 1d       	adc	r27, r9
    1244:	8c 91       	ld	r24, X
    1246:	89 17       	cp	r24, r25
    1248:	60 f4       	brcc	.+24     	; 0x1262 <bubbleSort+0x58>
                swap(&arr[j], &arr[j + 1]);
    124a:	bd 01       	movw	r22, r26
    124c:	cf 01       	movw	r24, r30
    124e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <swap>
                swap(&orderY[j], &orderY[j + 1]);
    1252:	b5 01       	movw	r22, r10
    1254:	68 0d       	add	r22, r8
    1256:	79 1d       	adc	r23, r9
    1258:	c5 01       	movw	r24, r10
    125a:	8c 0f       	add	r24, r28
    125c:	9d 1f       	adc	r25, r29
    125e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <swap>
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
    1262:	21 96       	adiw	r28, 0x01	; 1
    1264:	02 c0       	rjmp	.+4      	; 0x126a <bubbleSort+0x60>
    1266:	c0 e0       	ldi	r28, 0x00	; 0
    1268:	d0 e0       	ldi	r29, 0x00	; 0
    126a:	c6 01       	movw	r24, r12
    126c:	8e 19       	sub	r24, r14
    126e:	9f 09       	sbc	r25, r15
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	c8 17       	cp	r28, r24
    1274:	d9 07       	cpc	r29, r25
    1276:	dc f2       	brlt	.-74     	; 0x122e <bubbleSort+0x24>
    *a = *b;
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	e8 1a       	sub	r14, r24
    127c:	f8 0a       	sbc	r15, r24
    127e:	c6 01       	movw	r24, r12
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	e8 16       	cp	r14, r24
    1284:	f9 06       	cpc	r15, r25
    1286:	7c f3       	brlt	.-34     	; 0x1266 <bubbleSort+0x5c>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	08 95       	ret

000012a2 <drive>:



void drive(int junctions, piRobot *robot, Communications *myCom)
{
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	6c 01       	movw	r12, r24
    12b4:	7a 01       	movw	r14, r20
	Junctions situatie;
	
	motorControl('S');
    12b6:	83 e5       	ldi	r24, 0x53	; 83
    12b8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
	int driving = 1;
	int count = 0;
    12bc:	00 e0       	ldi	r16, 0x00	; 0
    12be:	10 e0       	ldi	r17, 0x00	; 0
void drive(int junctions, piRobot *robot, Communications *myCom)
{
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
    12c0:	c1 e0       	ldi	r28, 0x01	; 1
    12c2:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;
	while(driving) {
    12c4:	22 c0       	rjmp	.+68     	; 0x130a <drive+0x68>
		situatie = lineType();
    12c6:	0e 94 73 06 	call	0xce6	; 0xce6 <lineType>
		//clear();
		switch (situatie) {
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	49 f0       	breq	.+18     	; 0x12e0 <drive+0x3e>
    12ce:	20 f0       	brcs	.+8      	; 0x12d8 <drive+0x36>
    12d0:	83 50       	subi	r24, 0x03	; 3
    12d2:	86 30       	cpi	r24, 0x06	; 6
    12d4:	d0 f4       	brcc	.+52     	; 0x130a <drive+0x68>
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <drive+0x3e>
			case Barcode: // end of parcour
			//motorControl('N');
			break;
			
			case Straight:
			motorControl('S');
    12d8:	83 e5       	ldi	r24, 0x53	; 83
    12da:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
			break;
    12de:	15 c0       	rjmp	.+42     	; 0x130a <drive+0x68>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
    12e0:	0f 5f       	subi	r16, 0xFF	; 255
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
					//case 'S':
					//robot->posY--;
					//myCom->locationy = robot->posY;
					//break;
				//}
				motorControl('S');
    12e4:	83 e5       	ldi	r24, 0x53	; 83
    12e6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
				if(count == junctions)
    12ea:	0c 15       	cp	r16, r12
    12ec:	1d 05       	cpc	r17, r13
    12ee:	29 f4       	brne	.+10     	; 0x12fa <drive+0x58>
				{
					motorControl('P');
    12f0:	80 e5       	ldi	r24, 0x50	; 80
    12f2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					driving = 0;
    12f6:	c0 e0       	ldi	r28, 0x00	; 0
    12f8:	d0 e0       	ldi	r29, 0x00	; 0
				}
				myCom->Update(myCom);
    12fa:	f7 01       	movw	r30, r14
    12fc:	ef 58       	subi	r30, 0x8F	; 143
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	01 90       	ld	r0, Z+
    1302:	f0 81       	ld	r31, Z
    1304:	e0 2d       	mov	r30, r0
    1306:	c7 01       	movw	r24, r14
    1308:	09 95       	icall
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
	int count = 0;
	while(driving) {
    130a:	20 97       	sbiw	r28, 0x00	; 0
    130c:	e1 f6       	brne	.-72     	; 0x12c6 <drive+0x24>
				}
				myCom->Update(myCom);
				break;	
		}
	}
}
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	0f 91       	pop	r16
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	08 95       	ret

00001320 <waitForTurn>:

void waitForTurn()
{
    1320:	cf 93       	push	r28
	Junctions line;
	line = lineType();
    1322:	0e 94 73 06 	call	0xce6	; 0xce6 <lineType>
    1326:	c8 2f       	mov	r28, r24
    1328:	8f e0       	ldi	r24, 0x0F	; 15
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <waitForTurn+0x18>
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
	{
		line  = lineType();
    1332:	0e 94 73 06 	call	0xce6	; 0xce6 <lineType>
    1336:	c8 2f       	mov	r28, r24
void waitForTurn()
{
	Junctions line;
	line = lineType();
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
    1338:	c1 11       	cpse	r28, r1
    133a:	fb cf       	rjmp	.-10     	; 0x1332 <waitForTurn+0x12>
	{
		line  = lineType();
	}
	motorControl('N');
    133c:	8e e4       	ldi	r24, 0x4E	; 78
    133e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
}
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <turnRobot>:

void turnRobot(char tdirection, piRobot *myRobot)
{
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	c8 2f       	mov	r28, r24
    1352:	8b 01       	movw	r16, r22
    int changing = 1;
    1354:	ee 24       	eor	r14, r14
    1356:	e3 94       	inc	r14
    1358:	f1 2c       	mov	r15, r1

    while(changing==1)
    135a:	a6 c0       	rjmp	.+332    	; 0x14a8 <turnRobot+0x162>
    {
		
        switch(myRobot->direction)
    135c:	f8 01       	movw	r30, r16
    135e:	84 81       	ldd	r24, Z+4	; 0x04
    1360:	8e 34       	cpi	r24, 0x4E	; 78
    1362:	59 f0       	breq	.+22     	; 0x137a <turnRobot+0x34>
    1364:	18 f4       	brcc	.+6      	; 0x136c <turnRobot+0x26>
    1366:	85 34       	cpi	r24, 0x45	; 69
    1368:	69 f1       	breq	.+90     	; 0x13c4 <turnRobot+0x7e>
    136a:	98 c0       	rjmp	.+304    	; 0x149c <turnRobot+0x156>
    136c:	83 35       	cpi	r24, 0x53	; 83
    136e:	09 f4       	brne	.+2      	; 0x1372 <turnRobot+0x2c>
    1370:	4e c0       	rjmp	.+156    	; 0x140e <turnRobot+0xc8>
    1372:	87 35       	cpi	r24, 0x57	; 87
    1374:	09 f4       	brne	.+2      	; 0x1378 <turnRobot+0x32>
    1376:	6f c0       	rjmp	.+222    	; 0x1456 <turnRobot+0x110>
    1378:	91 c0       	rjmp	.+290    	; 0x149c <turnRobot+0x156>
        {
            case 'N':
                if(tdirection == 'E')
    137a:	c5 34       	cpi	r28, 0x45	; 69
    137c:	49 f4       	brne	.+18     	; 0x1390 <turnRobot+0x4a>
                {
                    motorControl('R');
    137e:	82 e5       	ldi	r24, 0x52	; 82
    1380:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    1384:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'E';
    1388:	85 e4       	ldi	r24, 0x45	; 69
    138a:	f8 01       	movw	r30, r16
    138c:	84 83       	std	Z+4, r24	; 0x04
    138e:	86 c0       	rjmp	.+268    	; 0x149c <turnRobot+0x156>
                }
                else if(tdirection == 'W')
    1390:	c7 35       	cpi	r28, 0x57	; 87
    1392:	49 f4       	brne	.+18     	; 0x13a6 <turnRobot+0x60>
                {
                    motorControl('L');
    1394:	8c e4       	ldi	r24, 0x4C	; 76
    1396:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    139a:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'W';
    139e:	87 e5       	ldi	r24, 0x57	; 87
    13a0:	f8 01       	movw	r30, r16
    13a2:	84 83       	std	Z+4, r24	; 0x04
    13a4:	7b c0       	rjmp	.+246    	; 0x149c <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    13a6:	c3 35       	cpi	r28, 0x53	; 83
    13a8:	09 f0       	breq	.+2      	; 0x13ac <turnRobot+0x66>
    13aa:	78 c0       	rjmp	.+240    	; 0x149c <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    13ac:	8c e4       	ldi	r24, 0x4C	; 76
    13ae:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
    13b2:	8c e4       	ldi	r24, 0x4C	; 76
    13b4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    13b8:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'S';
    13bc:	83 e5       	ldi	r24, 0x53	; 83
    13be:	f8 01       	movw	r30, r16
    13c0:	84 83       	std	Z+4, r24	; 0x04
    13c2:	6c c0       	rjmp	.+216    	; 0x149c <turnRobot+0x156>
                }
                break;
            case 'E':
                if(tdirection == 'S')
    13c4:	c3 35       	cpi	r28, 0x53	; 83
    13c6:	49 f4       	brne	.+18     	; 0x13da <turnRobot+0x94>
                {
                    motorControl('R');
    13c8:	82 e5       	ldi	r24, 0x52	; 82
    13ca:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    13ce:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'S';
    13d2:	83 e5       	ldi	r24, 0x53	; 83
    13d4:	f8 01       	movw	r30, r16
    13d6:	84 83       	std	Z+4, r24	; 0x04
    13d8:	61 c0       	rjmp	.+194    	; 0x149c <turnRobot+0x156>
                }
                else if(tdirection == 'W')
    13da:	c7 35       	cpi	r28, 0x57	; 87
    13dc:	49 f4       	brne	.+18     	; 0x13f0 <turnRobot+0xaa>
                {
                    motorControl('L');
    13de:	8c e4       	ldi	r24, 0x4C	; 76
    13e0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    13e4:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'W';
    13e8:	87 e5       	ldi	r24, 0x57	; 87
    13ea:	f8 01       	movw	r30, r16
    13ec:	84 83       	std	Z+4, r24	; 0x04
    13ee:	56 c0       	rjmp	.+172    	; 0x149c <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    13f0:	c3 35       	cpi	r28, 0x53	; 83
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <turnRobot+0xb0>
    13f4:	53 c0       	rjmp	.+166    	; 0x149c <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    13f6:	8c e4       	ldi	r24, 0x4C	; 76
    13f8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
    13fc:	8c e4       	ldi	r24, 0x4C	; 76
    13fe:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    1402:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'S';
    1406:	83 e5       	ldi	r24, 0x53	; 83
    1408:	f8 01       	movw	r30, r16
    140a:	84 83       	std	Z+4, r24	; 0x04
    140c:	47 c0       	rjmp	.+142    	; 0x149c <turnRobot+0x156>
                }
                break;
            case 'S':
                if(tdirection == 'W')
    140e:	c7 35       	cpi	r28, 0x57	; 87
    1410:	49 f4       	brne	.+18     	; 0x1424 <turnRobot+0xde>
                {
                    motorControl('R');
    1412:	82 e5       	ldi	r24, 0x52	; 82
    1414:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    1418:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'W';
    141c:	87 e5       	ldi	r24, 0x57	; 87
    141e:	f8 01       	movw	r30, r16
    1420:	84 83       	std	Z+4, r24	; 0x04
    1422:	3c c0       	rjmp	.+120    	; 0x149c <turnRobot+0x156>
                }
                else if(tdirection == 'E')
    1424:	c5 34       	cpi	r28, 0x45	; 69
    1426:	49 f4       	brne	.+18     	; 0x143a <turnRobot+0xf4>
                {
                    motorControl('L');
    1428:	8c e4       	ldi	r24, 0x4C	; 76
    142a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    142e:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'E';
    1432:	85 e4       	ldi	r24, 0x45	; 69
    1434:	f8 01       	movw	r30, r16
    1436:	84 83       	std	Z+4, r24	; 0x04
    1438:	31 c0       	rjmp	.+98     	; 0x149c <turnRobot+0x156>
                }
                else if(tdirection == 'N')
    143a:	ce 34       	cpi	r28, 0x4E	; 78
    143c:	79 f5       	brne	.+94     	; 0x149c <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    143e:	8c e4       	ldi	r24, 0x4C	; 76
    1440:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
    1444:	8c e4       	ldi	r24, 0x4C	; 76
    1446:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    144a:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'N';
    144e:	8e e4       	ldi	r24, 0x4E	; 78
    1450:	f8 01       	movw	r30, r16
    1452:	84 83       	std	Z+4, r24	; 0x04
    1454:	23 c0       	rjmp	.+70     	; 0x149c <turnRobot+0x156>
                }
                break;
            case 'W':
                if(tdirection == 'N')
    1456:	ce 34       	cpi	r28, 0x4E	; 78
    1458:	49 f4       	brne	.+18     	; 0x146c <turnRobot+0x126>
                {
					
                    motorControl('R');
    145a:	82 e5       	ldi	r24, 0x52	; 82
    145c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    1460:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'N';
    1464:	8e e4       	ldi	r24, 0x4E	; 78
    1466:	f8 01       	movw	r30, r16
    1468:	84 83       	std	Z+4, r24	; 0x04
    146a:	18 c0       	rjmp	.+48     	; 0x149c <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    146c:	c3 35       	cpi	r28, 0x53	; 83
    146e:	49 f4       	brne	.+18     	; 0x1482 <turnRobot+0x13c>
                {
	                motorControl('L');
    1470:	8c e4       	ldi	r24, 0x4C	; 76
    1472:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
	                waitForTurn();
    1476:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
	                myRobot->direction = 'S';
    147a:	83 e5       	ldi	r24, 0x53	; 83
    147c:	f8 01       	movw	r30, r16
    147e:	84 83       	std	Z+4, r24	; 0x04
    1480:	0d c0       	rjmp	.+26     	; 0x149c <turnRobot+0x156>
                }
                else if(tdirection == 'E')
    1482:	c5 34       	cpi	r28, 0x45	; 69
    1484:	59 f4       	brne	.+22     	; 0x149c <turnRobot+0x156>
                {
                    motorControl('L');
    1486:	8c e4       	ldi	r24, 0x4C	; 76
    1488:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					motorControl('L');
    148c:	8c e4       	ldi	r24, 0x4C	; 76
    148e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
					waitForTurn();
    1492:	0e 94 90 09 	call	0x1320	; 0x1320 <waitForTurn>
                    myRobot->direction = 'E';
    1496:	85 e4       	ldi	r24, 0x45	; 69
    1498:	f8 01       	movw	r30, r16
    149a:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
				if(myRobot->direction == tdirection)
    149c:	f8 01       	movw	r30, r16
    149e:	84 81       	ldd	r24, Z+4	; 0x04
    14a0:	c8 13       	cpse	r28, r24
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <turnRobot+0x162>
				{
					changing = 0;
    14a4:	e1 2c       	mov	r14, r1
    14a6:	f1 2c       	mov	r15, r1

void turnRobot(char tdirection, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
    14a8:	f1 e0       	ldi	r31, 0x01	; 1
    14aa:	ef 16       	cp	r14, r31
    14ac:	f1 04       	cpc	r15, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <turnRobot+0x16c>
    14b0:	55 cf       	rjmp	.-342    	; 0x135c <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	08 95       	ret

000014be <moveX>:


void moveX(int orderPos, piRobot *robot, Communications *myCom)
{
    14be:	ef 92       	push	r14
    14c0:	ff 92       	push	r15
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
	
    int junctions;
	
	
    if(robot->posX != orderPos)
    14ca:	fb 01       	movw	r30, r22
    14cc:	20 81       	ld	r18, Z
    14ce:	31 81       	ldd	r19, Z+1	; 0x01
    14d0:	28 17       	cp	r18, r24
    14d2:	39 07       	cpc	r19, r25
    14d4:	d9 f0       	breq	.+54     	; 0x150c <moveX+0x4e>
    14d6:	7a 01       	movw	r14, r20
    14d8:	eb 01       	movw	r28, r22
    14da:	8c 01       	movw	r16, r24
    {
		
        if(robot->posX < orderPos)
    14dc:	28 17       	cp	r18, r24
    14de:	39 07       	cpc	r19, r25
    14e0:	54 f4       	brge	.+20     	; 0x14f6 <moveX+0x38>
        {
            turnRobot('W', robot);
    14e2:	87 e5       	ldi	r24, 0x57	; 87
    14e4:	0e 94 a3 09 	call	0x1346	; 0x1346 <turnRobot>
            junctions = orderPos-robot->posX;
    14e8:	88 81       	ld	r24, Y
    14ea:	99 81       	ldd	r25, Y+1	; 0x01
    14ec:	98 01       	movw	r18, r16
    14ee:	28 1b       	sub	r18, r24
    14f0:	39 0b       	sbc	r19, r25
    14f2:	c9 01       	movw	r24, r18
    14f4:	07 c0       	rjmp	.+14     	; 0x1504 <moveX+0x46>
        }
        else{
            turnRobot('E', robot);
    14f6:	85 e4       	ldi	r24, 0x45	; 69
    14f8:	0e 94 a3 09 	call	0x1346	; 0x1346 <turnRobot>
            junctions = robot->posX - orderPos;
    14fc:	88 81       	ld	r24, Y
    14fe:	99 81       	ldd	r25, Y+1	; 0x01
    1500:	80 1b       	sub	r24, r16
    1502:	91 0b       	sbc	r25, r17
        }
		drive(junctions, robot, myCom);
    1504:	a7 01       	movw	r20, r14
    1506:	be 01       	movw	r22, r28
    1508:	0e 94 51 09 	call	0x12a2	; 0x12a2 <drive>
        
		
        

    }
}
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	08 95       	ret

0000151a <moveY>:

void moveY(int orderPos, piRobot *robot, Communications *myCom)
{
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
    1526:	fb 01       	movw	r30, r22
    1528:	22 81       	ldd	r18, Z+2	; 0x02
    152a:	33 81       	ldd	r19, Z+3	; 0x03
    152c:	28 17       	cp	r18, r24
    152e:	39 07       	cpc	r19, r25
    1530:	d9 f0       	breq	.+54     	; 0x1568 <moveY+0x4e>
    1532:	7a 01       	movw	r14, r20
    1534:	eb 01       	movw	r28, r22
    1536:	8c 01       	movw	r16, r24
    {
        if(robot->posY < orderPos)
    1538:	28 17       	cp	r18, r24
    153a:	39 07       	cpc	r19, r25
    153c:	54 f4       	brge	.+20     	; 0x1552 <moveY+0x38>
        {
            turnRobot('N', robot);
    153e:	8e e4       	ldi	r24, 0x4E	; 78
    1540:	0e 94 a3 09 	call	0x1346	; 0x1346 <turnRobot>
            junctions = orderPos-robot->posY;
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	9b 81       	ldd	r25, Y+3	; 0x03
    1548:	98 01       	movw	r18, r16
    154a:	28 1b       	sub	r18, r24
    154c:	39 0b       	sbc	r19, r25
    154e:	c9 01       	movw	r24, r18
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <moveY+0x46>
        }
        else{
            turnRobot('S', robot);
    1552:	83 e5       	ldi	r24, 0x53	; 83
    1554:	0e 94 a3 09 	call	0x1346	; 0x1346 <turnRobot>
            junctions = robot->posY - orderPos;
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	80 1b       	sub	r24, r16
    155e:	91 0b       	sbc	r25, r17
        }

            drive(junctions, robot, myCom);
    1560:	a7 01       	movw	r20, r14
    1562:	be 01       	movw	r22, r28
    1564:	0e 94 51 09 	call	0x12a2	; 0x12a2 <drive>
        

    }
}
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	08 95       	ret

00001576 <warehouse>:


void warehouse(objective objective, Communications *myCom)
{
    1576:	2f 92       	push	r2
    1578:	3f 92       	push	r3
    157a:	4f 92       	push	r4
    157c:	5f 92       	push	r5
    157e:	6f 92       	push	r6
    1580:	7f 92       	push	r7
    1582:	8f 92       	push	r8
    1584:	9f 92       	push	r9
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	e7 97       	sbiw	r28, 0x37	; 55
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	f8 2e       	mov	r15, r24
    15ac:	8b 01       	movw	r16, r22
 piRobot robot;
 robot.direction = 'W';
    15ae:	87 e5       	ldi	r24, 0x57	; 87
    15b0:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = 0;
    15b2:	1a 82       	std	Y+2, r1	; 0x02
    15b4:	19 82       	std	Y+1, r1	; 0x01
 robot.posY = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
 //char orderX[]={2,5,4,3,1};
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
    15c2:	c1 2c       	mov	r12, r1
    15c4:	d1 2c       	mov	r13, r1
 for(int i = 0; i<25;i++)
    15c6:	0c c0       	rjmp	.+24     	; 0x15e0 <warehouse+0x6a>
 {
 	if(myCom->Orderarx[i] != 0)
    15c8:	f8 01       	movw	r30, r16
    15ca:	e8 0f       	add	r30, r24
    15cc:	f9 1f       	adc	r31, r25
    15ce:	ee 5a       	subi	r30, 0xAE	; 174
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	20 81       	ld	r18, Z
    15d4:	22 23       	and	r18, r18
    15d6:	19 f0       	breq	.+6      	; 0x15de <warehouse+0x68>
 	{
 		arraySize++;
    15d8:	2f ef       	ldi	r18, 0xFF	; 255
    15da:	c2 1a       	sub	r12, r18
    15dc:	d2 0a       	sbc	r13, r18
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	89 31       	cpi	r24, 0x19	; 25
    15e2:	91 05       	cpc	r25, r1
    15e4:	8c f3       	brlt	.-30     	; 0x15c8 <warehouse+0x52>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	18 c0       	rjmp	.+48     	; 0x161c <warehouse+0xa6>
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
 {
 	orderX[i] = myCom->Orderarx[i];
    15ec:	d8 01       	movw	r26, r16
    15ee:	a8 0f       	add	r26, r24
    15f0:	b9 1f       	adc	r27, r25
    15f2:	fd 01       	movw	r30, r26
    15f4:	ee 5a       	subi	r30, 0xAE	; 174
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	20 81       	ld	r18, Z
    15fa:	e6 e0       	ldi	r30, 0x06	; 6
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	ec 0f       	add	r30, r28
    1600:	fd 1f       	adc	r31, r29
    1602:	e8 0f       	add	r30, r24
    1604:	f9 1f       	adc	r31, r25
    1606:	20 83       	st	Z, r18
 	orderY[i] = myCom->Orderary[i];
    1608:	d9 96       	adiw	r26, 0x39	; 57
    160a:	2c 91       	ld	r18, X
    160c:	ef e1       	ldi	r30, 0x1F	; 31
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	ec 0f       	add	r30, r28
    1612:	fd 1f       	adc	r31, r29
    1614:	e8 0f       	add	r30, r24
    1616:	f9 1f       	adc	r31, r25
    1618:	20 83       	st	Z, r18
 	if(myCom->Orderarx[i] != 0)
 	{
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    161a:	01 96       	adiw	r24, 0x01	; 1
    161c:	8c 15       	cp	r24, r12
    161e:	9d 05       	cpc	r25, r13
    1620:	2c f3       	brlt	.-54     	; 0x15ec <warehouse+0x76>
 {
 	orderX[i] = myCom->Orderarx[i];
 	orderY[i] = myCom->Orderary[i];
 }
clear();
    1622:	0e 94 1d 13 	call	0x263a	; 0x263a <clear>

    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
    1626:	a6 01       	movw	r20, r12
    1628:	be 01       	movw	r22, r28
    162a:	61 5e       	subi	r22, 0xE1	; 225
    162c:	7f 4f       	sbci	r23, 0xFF	; 255
    162e:	ce 01       	movw	r24, r28
    1630:	06 96       	adiw	r24, 0x06	; 6
    1632:	0e 94 05 09 	call	0x120a	; 0x120a <bubbleSort>
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
    1636:	ff 20       	and	r15, r15
    1638:	09 f4       	brne	.+2      	; 0x163c <warehouse+0xc6>
    163a:	85 c0       	rjmp	.+266    	; 0x1746 <warehouse+0x1d0>
    163c:	9b c0       	rjmp	.+310    	; 0x1774 <warehouse+0x1fe>
	{
		for(int locations = 0; locations<arraySize;locations++)
		{
			float completed = locations;
    163e:	b1 01       	movw	r22, r2
    1640:	03 2c       	mov	r0, r3
    1642:	00 0c       	add	r0, r0
    1644:	88 0b       	sbc	r24, r24
    1646:	99 0b       	sbc	r25, r25
    1648:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__floatsisf>
    164c:	2b 01       	movw	r4, r22
    164e:	3c 01       	movw	r6, r24
			float total = arraySize;
    1650:	b6 01       	movw	r22, r12
    1652:	0d 2c       	mov	r0, r13
    1654:	00 0c       	add	r0, r0
    1656:	88 0b       	sbc	r24, r24
    1658:	99 0b       	sbc	r25, r25
    165a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__floatsisf>
    165e:	4b 01       	movw	r8, r22
    1660:	5c 01       	movw	r10, r24
			
			moveX(orderX[locations], &robot, myCom);
    1662:	0f 2e       	mov	r0, r31
    1664:	f6 e0       	ldi	r31, 0x06	; 6
    1666:	ef 2e       	mov	r14, r31
    1668:	f1 2c       	mov	r15, r1
    166a:	f0 2d       	mov	r31, r0
    166c:	ec 0e       	add	r14, r28
    166e:	fd 1e       	adc	r15, r29
    1670:	e2 0c       	add	r14, r2
    1672:	f3 1c       	adc	r15, r3
    1674:	f7 01       	movw	r30, r14
    1676:	80 81       	ld	r24, Z
    1678:	a8 01       	movw	r20, r16
    167a:	be 01       	movw	r22, r28
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 5f 0a 	call	0x14be	; 0x14be <moveX>
			robot.posX = orderX[locations];
    1686:	f7 01       	movw	r30, r14
    1688:	80 81       	ld	r24, Z
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9a 83       	std	Y+2, r25	; 0x02
    168e:	89 83       	std	Y+1, r24	; 0x01
			moveY(orderY[locations], &robot, myCom);
    1690:	0f 2e       	mov	r0, r31
    1692:	ff e1       	ldi	r31, 0x1F	; 31
    1694:	ef 2e       	mov	r14, r31
    1696:	f1 2c       	mov	r15, r1
    1698:	f0 2d       	mov	r31, r0
    169a:	ec 0e       	add	r14, r28
    169c:	fd 1e       	adc	r15, r29
    169e:	e2 0c       	add	r14, r2
    16a0:	f3 1c       	adc	r15, r3
    16a2:	f7 01       	movw	r30, r14
    16a4:	80 81       	ld	r24, Z
    16a6:	a8 01       	movw	r20, r16
    16a8:	be 01       	movw	r22, r28
    16aa:	6f 5f       	subi	r22, 0xFF	; 255
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 8d 0a 	call	0x151a	; 0x151a <moveY>
			robot.posY = orderY[locations];
    16b4:	f7 01       	movw	r30, r14
    16b6:	80 81       	ld	r24, Z
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
    16be:	88 ee       	ldi	r24, 0xE8	; 232
    16c0:	93 e0       	ldi	r25, 0x03	; 3
    16c2:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
			delay(1000);//wait 1 second
			
			myCom->batterylvl = batteryPercentage();
    16c6:	0e 94 a8 03 	call	0x750	; 0x750 <batteryPercentage>
    16ca:	78 01       	movw	r14, r16
    16cc:	fc e6       	ldi	r31, 0x6C	; 108
    16ce:	ef 0e       	add	r14, r31
    16d0:	f1 1c       	adc	r15, r1
    16d2:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fixunssfsi>
    16d6:	f7 01       	movw	r30, r14
    16d8:	60 83       	st	Z, r22
			myCom->magprocess = (((completed+1)/total)*100);
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	c3 01       	movw	r24, r6
    16e4:	b2 01       	movw	r22, r4
    16e6:	0e 94 18 0c 	call	0x1830	; 0x1830 <__addsf3>
    16ea:	a5 01       	movw	r20, r10
    16ec:	94 01       	movw	r18, r8
    16ee:	0e 94 84 0c 	call	0x1908	; 0x1908 <__divsf3>
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	48 ec       	ldi	r20, 0xC8	; 200
    16f8:	52 e4       	ldi	r21, 0x42	; 66
    16fa:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <__mulsf3>
    16fe:	4b 01       	movw	r8, r22
    1700:	5c 01       	movw	r10, r24
    1702:	78 01       	movw	r14, r16
    1704:	fd e6       	ldi	r31, 0x6D	; 109
    1706:	ef 0e       	add	r14, r31
    1708:	f1 1c       	adc	r15, r1
    170a:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fixunssfsi>
    170e:	f7 01       	movw	r30, r14
    1710:	60 83       	st	Z, r22
			myCom->Update(myCom);
    1712:	34 96       	adiw	r30, 0x04	; 4
    1714:	01 90       	ld	r0, Z+
    1716:	f0 81       	ld	r31, Z
    1718:	e0 2d       	mov	r30, r0
    171a:	c8 01       	movw	r24, r16
    171c:	09 95       	icall
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
    171e:	0e 94 a8 03 	call	0x750	; 0x750 <batteryPercentage>
    1722:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fixsfsi>
    1726:	2b 01       	movw	r4, r22
    1728:	3c 01       	movw	r6, r24
    172a:	c5 01       	movw	r24, r10
    172c:	b4 01       	movw	r22, r8
    172e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fixsfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	42 e0       	ldi	r20, 0x02	; 2
    1738:	b2 01       	movw	r22, r4
    173a:	0e 94 ca 03 	call	0x794	; 0x794 <updateDisplay>

    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
	{
		for(int locations = 0; locations<arraySize;locations++)
    173e:	ff ef       	ldi	r31, 0xFF	; 255
    1740:	2f 1a       	sub	r2, r31
    1742:	3f 0a       	sbc	r3, r31
    1744:	02 c0       	rjmp	.+4      	; 0x174a <warehouse+0x1d4>
    1746:	21 2c       	mov	r2, r1
    1748:	31 2c       	mov	r3, r1
    174a:	2c 14       	cp	r2, r12
    174c:	3d 04       	cpc	r3, r13
    174e:	0c f4       	brge	.+2      	; 0x1752 <warehouse+0x1dc>
    1750:	76 cf       	rjmp	.-276    	; 0x163e <warehouse+0xc8>
			myCom->batterylvl = batteryPercentage();
			myCom->magprocess = (((completed+1)/total)*100);
			myCom->Update(myCom);
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
		}
		moveY(1, &robot, myCom);
    1752:	a8 01       	movw	r20, r16
    1754:	be 01       	movw	r22, r28
    1756:	6f 5f       	subi	r22, 0xFF	; 255
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 8d 0a 	call	0x151a	; 0x151a <moveY>
			moveX(1, &robot, myCom);
    1762:	a8 01       	movw	r20, r16
    1764:	be 01       	movw	r22, r28
    1766:	6f 5f       	subi	r22, 0xFF	; 255
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 5f 0a 	call	0x14be	; 0x14be <moveX>
    1772:	44 c0       	rjmp	.+136    	; 0x17fc <warehouse+0x286>
			
	}
	else
	{
		static int charged = 0;
		if(charged == 0)
    1774:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <charged.2339>
    1778:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <charged.2339+0x1>
    177c:	89 2b       	or	r24, r25
    177e:	29 f5       	brne	.+74     	; 0x17ca <warehouse+0x254>
		{
			drive(1, &robot, myCom);
    1780:	a8 01       	movw	r20, r16
    1782:	be 01       	movw	r22, r28
    1784:	6f 5f       	subi	r22, 0xFF	; 255
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <drive>
			motorControl('R');
    1790:	82 e5       	ldi	r24, 0x52	; 82
    1792:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
			drive(3, &robot, myCom);
    1796:	a8 01       	movw	r20, r16
    1798:	be 01       	movw	r22, r28
    179a:	6f 5f       	subi	r22, 0xFF	; 255
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	83 e0       	ldi	r24, 0x03	; 3
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <drive>
			motorControl('R');
    17a6:	82 e5       	ldi	r24, 0x52	; 82
    17a8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
			drive(1, &robot, myCom);
    17ac:	a8 01       	movw	r20, r16
    17ae:	be 01       	movw	r22, r28
    17b0:	6f 5f       	subi	r22, 0xFF	; 255
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <drive>
			charged = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <charged.2339+0x1>
    17c4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <charged.2339>
    17c8:	19 c0       	rjmp	.+50     	; 0x17fc <warehouse+0x286>
		}
		else
		{
			motorControl('T');
    17ca:	84 e5       	ldi	r24, 0x54	; 84
    17cc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
			drive(1, &robot, myCom);
    17d0:	a8 01       	movw	r20, r16
    17d2:	be 01       	movw	r22, r28
    17d4:	6f 5f       	subi	r22, 0xFF	; 255
    17d6:	7f 4f       	sbci	r23, 0xFF	; 255
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <drive>
			motorControl('L');
    17e0:	8c e4       	ldi	r24, 0x4C	; 76
    17e2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
			drive(3, &robot, myCom);
    17e6:	a8 01       	movw	r20, r16
    17e8:	be 01       	movw	r22, r28
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <drive>
			motorControl('L');
    17f6:	8c e4       	ldi	r24, 0x4C	; 76
    17f8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <motorControl>
			
		}
		
	}
}
    17fc:	e7 96       	adiw	r28, 0x37	; 55
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	9f 90       	pop	r9
    181e:	8f 90       	pop	r8
    1820:	7f 90       	pop	r7
    1822:	6f 90       	pop	r6
    1824:	5f 90       	pop	r5
    1826:	4f 90       	pop	r4
    1828:	3f 90       	pop	r3
    182a:	2f 90       	pop	r2
    182c:	08 95       	ret

0000182e <__subsf3>:
    182e:	50 58       	subi	r21, 0x80	; 128

00001830 <__addsf3>:
    1830:	bb 27       	eor	r27, r27
    1832:	aa 27       	eor	r26, r26
    1834:	0e 94 2f 0c 	call	0x185e	; 0x185e <__addsf3x>
    1838:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__fp_round>
    183c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__fp_pscA>
    1840:	38 f0       	brcs	.+14     	; 0x1850 <__addsf3+0x20>
    1842:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__fp_pscB>
    1846:	20 f0       	brcs	.+8      	; 0x1850 <__addsf3+0x20>
    1848:	39 f4       	brne	.+14     	; 0x1858 <__addsf3+0x28>
    184a:	9f 3f       	cpi	r25, 0xFF	; 255
    184c:	19 f4       	brne	.+6      	; 0x1854 <__addsf3+0x24>
    184e:	26 f4       	brtc	.+8      	; 0x1858 <__addsf3+0x28>
    1850:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_nan>
    1854:	0e f4       	brtc	.+2      	; 0x1858 <__addsf3+0x28>
    1856:	e0 95       	com	r30
    1858:	e7 fb       	bst	r30, 7
    185a:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_inf>

0000185e <__addsf3x>:
    185e:	e9 2f       	mov	r30, r25
    1860:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fp_split3>
    1864:	58 f3       	brcs	.-42     	; 0x183c <__addsf3+0xc>
    1866:	ba 17       	cp	r27, r26
    1868:	62 07       	cpc	r22, r18
    186a:	73 07       	cpc	r23, r19
    186c:	84 07       	cpc	r24, r20
    186e:	95 07       	cpc	r25, r21
    1870:	20 f0       	brcs	.+8      	; 0x187a <__addsf3x+0x1c>
    1872:	79 f4       	brne	.+30     	; 0x1892 <__addsf3x+0x34>
    1874:	a6 f5       	brtc	.+104    	; 0x18de <__addsf3x+0x80>
    1876:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_zero>
    187a:	0e f4       	brtc	.+2      	; 0x187e <__addsf3x+0x20>
    187c:	e0 95       	com	r30
    187e:	0b 2e       	mov	r0, r27
    1880:	ba 2f       	mov	r27, r26
    1882:	a0 2d       	mov	r26, r0
    1884:	0b 01       	movw	r0, r22
    1886:	b9 01       	movw	r22, r18
    1888:	90 01       	movw	r18, r0
    188a:	0c 01       	movw	r0, r24
    188c:	ca 01       	movw	r24, r20
    188e:	a0 01       	movw	r20, r0
    1890:	11 24       	eor	r1, r1
    1892:	ff 27       	eor	r31, r31
    1894:	59 1b       	sub	r21, r25
    1896:	99 f0       	breq	.+38     	; 0x18be <__addsf3x+0x60>
    1898:	59 3f       	cpi	r21, 0xF9	; 249
    189a:	50 f4       	brcc	.+20     	; 0x18b0 <__addsf3x+0x52>
    189c:	50 3e       	cpi	r21, 0xE0	; 224
    189e:	68 f1       	brcs	.+90     	; 0x18fa <__addsf3x+0x9c>
    18a0:	1a 16       	cp	r1, r26
    18a2:	f0 40       	sbci	r31, 0x00	; 0
    18a4:	a2 2f       	mov	r26, r18
    18a6:	23 2f       	mov	r18, r19
    18a8:	34 2f       	mov	r19, r20
    18aa:	44 27       	eor	r20, r20
    18ac:	58 5f       	subi	r21, 0xF8	; 248
    18ae:	f3 cf       	rjmp	.-26     	; 0x1896 <__addsf3x+0x38>
    18b0:	46 95       	lsr	r20
    18b2:	37 95       	ror	r19
    18b4:	27 95       	ror	r18
    18b6:	a7 95       	ror	r26
    18b8:	f0 40       	sbci	r31, 0x00	; 0
    18ba:	53 95       	inc	r21
    18bc:	c9 f7       	brne	.-14     	; 0x18b0 <__addsf3x+0x52>
    18be:	7e f4       	brtc	.+30     	; 0x18de <__addsf3x+0x80>
    18c0:	1f 16       	cp	r1, r31
    18c2:	ba 0b       	sbc	r27, r26
    18c4:	62 0b       	sbc	r22, r18
    18c6:	73 0b       	sbc	r23, r19
    18c8:	84 0b       	sbc	r24, r20
    18ca:	ba f0       	brmi	.+46     	; 0x18fa <__addsf3x+0x9c>
    18cc:	91 50       	subi	r25, 0x01	; 1
    18ce:	a1 f0       	breq	.+40     	; 0x18f8 <__addsf3x+0x9a>
    18d0:	ff 0f       	add	r31, r31
    18d2:	bb 1f       	adc	r27, r27
    18d4:	66 1f       	adc	r22, r22
    18d6:	77 1f       	adc	r23, r23
    18d8:	88 1f       	adc	r24, r24
    18da:	c2 f7       	brpl	.-16     	; 0x18cc <__addsf3x+0x6e>
    18dc:	0e c0       	rjmp	.+28     	; 0x18fa <__addsf3x+0x9c>
    18de:	ba 0f       	add	r27, r26
    18e0:	62 1f       	adc	r22, r18
    18e2:	73 1f       	adc	r23, r19
    18e4:	84 1f       	adc	r24, r20
    18e6:	48 f4       	brcc	.+18     	; 0x18fa <__addsf3x+0x9c>
    18e8:	87 95       	ror	r24
    18ea:	77 95       	ror	r23
    18ec:	67 95       	ror	r22
    18ee:	b7 95       	ror	r27
    18f0:	f7 95       	ror	r31
    18f2:	9e 3f       	cpi	r25, 0xFE	; 254
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <__addsf3x+0x9a>
    18f6:	b0 cf       	rjmp	.-160    	; 0x1858 <__addsf3+0x28>
    18f8:	93 95       	inc	r25
    18fa:	88 0f       	add	r24, r24
    18fc:	08 f0       	brcs	.+2      	; 0x1900 <__addsf3x+0xa2>
    18fe:	99 27       	eor	r25, r25
    1900:	ee 0f       	add	r30, r30
    1902:	97 95       	ror	r25
    1904:	87 95       	ror	r24
    1906:	08 95       	ret

00001908 <__divsf3>:
    1908:	0e 94 98 0c 	call	0x1930	; 0x1930 <__divsf3x>
    190c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__fp_round>
    1910:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__fp_pscB>
    1914:	58 f0       	brcs	.+22     	; 0x192c <__divsf3+0x24>
    1916:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__fp_pscA>
    191a:	40 f0       	brcs	.+16     	; 0x192c <__divsf3+0x24>
    191c:	29 f4       	brne	.+10     	; 0x1928 <__divsf3+0x20>
    191e:	5f 3f       	cpi	r21, 0xFF	; 255
    1920:	29 f0       	breq	.+10     	; 0x192c <__divsf3+0x24>
    1922:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_inf>
    1926:	51 11       	cpse	r21, r1
    1928:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_szero>
    192c:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_nan>

00001930 <__divsf3x>:
    1930:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fp_split3>
    1934:	68 f3       	brcs	.-38     	; 0x1910 <__divsf3+0x8>

00001936 <__divsf3_pse>:
    1936:	99 23       	and	r25, r25
    1938:	b1 f3       	breq	.-20     	; 0x1926 <__divsf3+0x1e>
    193a:	55 23       	and	r21, r21
    193c:	91 f3       	breq	.-28     	; 0x1922 <__divsf3+0x1a>
    193e:	95 1b       	sub	r25, r21
    1940:	55 0b       	sbc	r21, r21
    1942:	bb 27       	eor	r27, r27
    1944:	aa 27       	eor	r26, r26
    1946:	62 17       	cp	r22, r18
    1948:	73 07       	cpc	r23, r19
    194a:	84 07       	cpc	r24, r20
    194c:	38 f0       	brcs	.+14     	; 0x195c <__divsf3_pse+0x26>
    194e:	9f 5f       	subi	r25, 0xFF	; 255
    1950:	5f 4f       	sbci	r21, 0xFF	; 255
    1952:	22 0f       	add	r18, r18
    1954:	33 1f       	adc	r19, r19
    1956:	44 1f       	adc	r20, r20
    1958:	aa 1f       	adc	r26, r26
    195a:	a9 f3       	breq	.-22     	; 0x1946 <__divsf3_pse+0x10>
    195c:	35 d0       	rcall	.+106    	; 0x19c8 <__divsf3_pse+0x92>
    195e:	0e 2e       	mov	r0, r30
    1960:	3a f0       	brmi	.+14     	; 0x1970 <__divsf3_pse+0x3a>
    1962:	e0 e8       	ldi	r30, 0x80	; 128
    1964:	32 d0       	rcall	.+100    	; 0x19ca <__divsf3_pse+0x94>
    1966:	91 50       	subi	r25, 0x01	; 1
    1968:	50 40       	sbci	r21, 0x00	; 0
    196a:	e6 95       	lsr	r30
    196c:	00 1c       	adc	r0, r0
    196e:	ca f7       	brpl	.-14     	; 0x1962 <__divsf3_pse+0x2c>
    1970:	2b d0       	rcall	.+86     	; 0x19c8 <__divsf3_pse+0x92>
    1972:	fe 2f       	mov	r31, r30
    1974:	29 d0       	rcall	.+82     	; 0x19c8 <__divsf3_pse+0x92>
    1976:	66 0f       	add	r22, r22
    1978:	77 1f       	adc	r23, r23
    197a:	88 1f       	adc	r24, r24
    197c:	bb 1f       	adc	r27, r27
    197e:	26 17       	cp	r18, r22
    1980:	37 07       	cpc	r19, r23
    1982:	48 07       	cpc	r20, r24
    1984:	ab 07       	cpc	r26, r27
    1986:	b0 e8       	ldi	r27, 0x80	; 128
    1988:	09 f0       	breq	.+2      	; 0x198c <__divsf3_pse+0x56>
    198a:	bb 0b       	sbc	r27, r27
    198c:	80 2d       	mov	r24, r0
    198e:	bf 01       	movw	r22, r30
    1990:	ff 27       	eor	r31, r31
    1992:	93 58       	subi	r25, 0x83	; 131
    1994:	5f 4f       	sbci	r21, 0xFF	; 255
    1996:	3a f0       	brmi	.+14     	; 0x19a6 <__divsf3_pse+0x70>
    1998:	9e 3f       	cpi	r25, 0xFE	; 254
    199a:	51 05       	cpc	r21, r1
    199c:	78 f0       	brcs	.+30     	; 0x19bc <__divsf3_pse+0x86>
    199e:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_inf>
    19a2:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_szero>
    19a6:	5f 3f       	cpi	r21, 0xFF	; 255
    19a8:	e4 f3       	brlt	.-8      	; 0x19a2 <__divsf3_pse+0x6c>
    19aa:	98 3e       	cpi	r25, 0xE8	; 232
    19ac:	d4 f3       	brlt	.-12     	; 0x19a2 <__divsf3_pse+0x6c>
    19ae:	86 95       	lsr	r24
    19b0:	77 95       	ror	r23
    19b2:	67 95       	ror	r22
    19b4:	b7 95       	ror	r27
    19b6:	f7 95       	ror	r31
    19b8:	9f 5f       	subi	r25, 0xFF	; 255
    19ba:	c9 f7       	brne	.-14     	; 0x19ae <__divsf3_pse+0x78>
    19bc:	88 0f       	add	r24, r24
    19be:	91 1d       	adc	r25, r1
    19c0:	96 95       	lsr	r25
    19c2:	87 95       	ror	r24
    19c4:	97 f9       	bld	r25, 7
    19c6:	08 95       	ret
    19c8:	e1 e0       	ldi	r30, 0x01	; 1
    19ca:	66 0f       	add	r22, r22
    19cc:	77 1f       	adc	r23, r23
    19ce:	88 1f       	adc	r24, r24
    19d0:	bb 1f       	adc	r27, r27
    19d2:	62 17       	cp	r22, r18
    19d4:	73 07       	cpc	r23, r19
    19d6:	84 07       	cpc	r24, r20
    19d8:	ba 07       	cpc	r27, r26
    19da:	20 f0       	brcs	.+8      	; 0x19e4 <__divsf3_pse+0xae>
    19dc:	62 1b       	sub	r22, r18
    19de:	73 0b       	sbc	r23, r19
    19e0:	84 0b       	sbc	r24, r20
    19e2:	ba 0b       	sbc	r27, r26
    19e4:	ee 1f       	adc	r30, r30
    19e6:	88 f7       	brcc	.-30     	; 0x19ca <__divsf3_pse+0x94>
    19e8:	e0 95       	com	r30
    19ea:	08 95       	ret

000019ec <__fixsfsi>:
    19ec:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <__fixunssfsi>
    19f0:	68 94       	set
    19f2:	b1 11       	cpse	r27, r1
    19f4:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_szero>
    19f8:	08 95       	ret

000019fa <__fixunssfsi>:
    19fa:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <__fp_splitA>
    19fe:	88 f0       	brcs	.+34     	; 0x1a22 <__fixunssfsi+0x28>
    1a00:	9f 57       	subi	r25, 0x7F	; 127
    1a02:	98 f0       	brcs	.+38     	; 0x1a2a <__fixunssfsi+0x30>
    1a04:	b9 2f       	mov	r27, r25
    1a06:	99 27       	eor	r25, r25
    1a08:	b7 51       	subi	r27, 0x17	; 23
    1a0a:	b0 f0       	brcs	.+44     	; 0x1a38 <__fixunssfsi+0x3e>
    1a0c:	e1 f0       	breq	.+56     	; 0x1a46 <__fixunssfsi+0x4c>
    1a0e:	66 0f       	add	r22, r22
    1a10:	77 1f       	adc	r23, r23
    1a12:	88 1f       	adc	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	1a f0       	brmi	.+6      	; 0x1a1e <__fixunssfsi+0x24>
    1a18:	ba 95       	dec	r27
    1a1a:	c9 f7       	brne	.-14     	; 0x1a0e <__fixunssfsi+0x14>
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <__fixunssfsi+0x4c>
    1a1e:	b1 30       	cpi	r27, 0x01	; 1
    1a20:	91 f0       	breq	.+36     	; 0x1a46 <__fixunssfsi+0x4c>
    1a22:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__fp_zero>
    1a26:	b1 e0       	ldi	r27, 0x01	; 1
    1a28:	08 95       	ret
    1a2a:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__fp_zero>
    1a2e:	67 2f       	mov	r22, r23
    1a30:	78 2f       	mov	r23, r24
    1a32:	88 27       	eor	r24, r24
    1a34:	b8 5f       	subi	r27, 0xF8	; 248
    1a36:	39 f0       	breq	.+14     	; 0x1a46 <__fixunssfsi+0x4c>
    1a38:	b9 3f       	cpi	r27, 0xF9	; 249
    1a3a:	cc f3       	brlt	.-14     	; 0x1a2e <__fixunssfsi+0x34>
    1a3c:	86 95       	lsr	r24
    1a3e:	77 95       	ror	r23
    1a40:	67 95       	ror	r22
    1a42:	b3 95       	inc	r27
    1a44:	d9 f7       	brne	.-10     	; 0x1a3c <__fixunssfsi+0x42>
    1a46:	3e f4       	brtc	.+14     	; 0x1a56 <__fixunssfsi+0x5c>
    1a48:	90 95       	com	r25
    1a4a:	80 95       	com	r24
    1a4c:	70 95       	com	r23
    1a4e:	61 95       	neg	r22
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	8f 4f       	sbci	r24, 0xFF	; 255
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	08 95       	ret

00001a58 <__floatunsisf>:
    1a58:	e8 94       	clt
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <__floatsisf+0x12>

00001a5c <__floatsisf>:
    1a5c:	97 fb       	bst	r25, 7
    1a5e:	3e f4       	brtc	.+14     	; 0x1a6e <__floatsisf+0x12>
    1a60:	90 95       	com	r25
    1a62:	80 95       	com	r24
    1a64:	70 95       	com	r23
    1a66:	61 95       	neg	r22
    1a68:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	99 23       	and	r25, r25
    1a70:	a9 f0       	breq	.+42     	; 0x1a9c <__floatsisf+0x40>
    1a72:	f9 2f       	mov	r31, r25
    1a74:	96 e9       	ldi	r25, 0x96	; 150
    1a76:	bb 27       	eor	r27, r27
    1a78:	93 95       	inc	r25
    1a7a:	f6 95       	lsr	r31
    1a7c:	87 95       	ror	r24
    1a7e:	77 95       	ror	r23
    1a80:	67 95       	ror	r22
    1a82:	b7 95       	ror	r27
    1a84:	f1 11       	cpse	r31, r1
    1a86:	f8 cf       	rjmp	.-16     	; 0x1a78 <__floatsisf+0x1c>
    1a88:	fa f4       	brpl	.+62     	; 0x1ac8 <__floatsisf+0x6c>
    1a8a:	bb 0f       	add	r27, r27
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <__floatsisf+0x36>
    1a8e:	60 ff       	sbrs	r22, 0
    1a90:	1b c0       	rjmp	.+54     	; 0x1ac8 <__floatsisf+0x6c>
    1a92:	6f 5f       	subi	r22, 0xFF	; 255
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	8f 4f       	sbci	r24, 0xFF	; 255
    1a98:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9a:	16 c0       	rjmp	.+44     	; 0x1ac8 <__floatsisf+0x6c>
    1a9c:	88 23       	and	r24, r24
    1a9e:	11 f0       	breq	.+4      	; 0x1aa4 <__floatsisf+0x48>
    1aa0:	96 e9       	ldi	r25, 0x96	; 150
    1aa2:	11 c0       	rjmp	.+34     	; 0x1ac6 <__floatsisf+0x6a>
    1aa4:	77 23       	and	r23, r23
    1aa6:	21 f0       	breq	.+8      	; 0x1ab0 <__floatsisf+0x54>
    1aa8:	9e e8       	ldi	r25, 0x8E	; 142
    1aaa:	87 2f       	mov	r24, r23
    1aac:	76 2f       	mov	r23, r22
    1aae:	05 c0       	rjmp	.+10     	; 0x1aba <__floatsisf+0x5e>
    1ab0:	66 23       	and	r22, r22
    1ab2:	71 f0       	breq	.+28     	; 0x1ad0 <__floatsisf+0x74>
    1ab4:	96 e8       	ldi	r25, 0x86	; 134
    1ab6:	86 2f       	mov	r24, r22
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	2a f0       	brmi	.+10     	; 0x1ac8 <__floatsisf+0x6c>
    1abe:	9a 95       	dec	r25
    1ac0:	66 0f       	add	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	da f7       	brpl	.-10     	; 0x1abe <__floatsisf+0x62>
    1ac8:	88 0f       	add	r24, r24
    1aca:	96 95       	lsr	r25
    1acc:	87 95       	ror	r24
    1ace:	97 f9       	bld	r25, 7
    1ad0:	08 95       	ret

00001ad2 <__fp_inf>:
    1ad2:	97 f9       	bld	r25, 7
    1ad4:	9f 67       	ori	r25, 0x7F	; 127
    1ad6:	80 e8       	ldi	r24, 0x80	; 128
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	08 95       	ret

00001ade <__fp_nan>:
    1ade:	9f ef       	ldi	r25, 0xFF	; 255
    1ae0:	80 ec       	ldi	r24, 0xC0	; 192
    1ae2:	08 95       	ret

00001ae4 <__fp_pscA>:
    1ae4:	00 24       	eor	r0, r0
    1ae6:	0a 94       	dec	r0
    1ae8:	16 16       	cp	r1, r22
    1aea:	17 06       	cpc	r1, r23
    1aec:	18 06       	cpc	r1, r24
    1aee:	09 06       	cpc	r0, r25
    1af0:	08 95       	ret

00001af2 <__fp_pscB>:
    1af2:	00 24       	eor	r0, r0
    1af4:	0a 94       	dec	r0
    1af6:	12 16       	cp	r1, r18
    1af8:	13 06       	cpc	r1, r19
    1afa:	14 06       	cpc	r1, r20
    1afc:	05 06       	cpc	r0, r21
    1afe:	08 95       	ret

00001b00 <__fp_round>:
    1b00:	09 2e       	mov	r0, r25
    1b02:	03 94       	inc	r0
    1b04:	00 0c       	add	r0, r0
    1b06:	11 f4       	brne	.+4      	; 0x1b0c <__fp_round+0xc>
    1b08:	88 23       	and	r24, r24
    1b0a:	52 f0       	brmi	.+20     	; 0x1b20 <__fp_round+0x20>
    1b0c:	bb 0f       	add	r27, r27
    1b0e:	40 f4       	brcc	.+16     	; 0x1b20 <__fp_round+0x20>
    1b10:	bf 2b       	or	r27, r31
    1b12:	11 f4       	brne	.+4      	; 0x1b18 <__fp_round+0x18>
    1b14:	60 ff       	sbrs	r22, 0
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <__fp_round+0x20>
    1b18:	6f 5f       	subi	r22, 0xFF	; 255
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	08 95       	ret

00001b22 <__fp_split3>:
    1b22:	57 fd       	sbrc	r21, 7
    1b24:	90 58       	subi	r25, 0x80	; 128
    1b26:	44 0f       	add	r20, r20
    1b28:	55 1f       	adc	r21, r21
    1b2a:	59 f0       	breq	.+22     	; 0x1b42 <__fp_splitA+0x10>
    1b2c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b2e:	71 f0       	breq	.+28     	; 0x1b4c <__fp_splitA+0x1a>
    1b30:	47 95       	ror	r20

00001b32 <__fp_splitA>:
    1b32:	88 0f       	add	r24, r24
    1b34:	97 fb       	bst	r25, 7
    1b36:	99 1f       	adc	r25, r25
    1b38:	61 f0       	breq	.+24     	; 0x1b52 <__fp_splitA+0x20>
    1b3a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b3c:	79 f0       	breq	.+30     	; 0x1b5c <__fp_splitA+0x2a>
    1b3e:	87 95       	ror	r24
    1b40:	08 95       	ret
    1b42:	12 16       	cp	r1, r18
    1b44:	13 06       	cpc	r1, r19
    1b46:	14 06       	cpc	r1, r20
    1b48:	55 1f       	adc	r21, r21
    1b4a:	f2 cf       	rjmp	.-28     	; 0x1b30 <__fp_split3+0xe>
    1b4c:	46 95       	lsr	r20
    1b4e:	f1 df       	rcall	.-30     	; 0x1b32 <__fp_splitA>
    1b50:	08 c0       	rjmp	.+16     	; 0x1b62 <__fp_splitA+0x30>
    1b52:	16 16       	cp	r1, r22
    1b54:	17 06       	cpc	r1, r23
    1b56:	18 06       	cpc	r1, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	f1 cf       	rjmp	.-30     	; 0x1b3e <__fp_splitA+0xc>
    1b5c:	86 95       	lsr	r24
    1b5e:	71 05       	cpc	r23, r1
    1b60:	61 05       	cpc	r22, r1
    1b62:	08 94       	sec
    1b64:	08 95       	ret

00001b66 <__fp_zero>:
    1b66:	e8 94       	clt

00001b68 <__fp_szero>:
    1b68:	bb 27       	eor	r27, r27
    1b6a:	66 27       	eor	r22, r22
    1b6c:	77 27       	eor	r23, r23
    1b6e:	cb 01       	movw	r24, r22
    1b70:	97 f9       	bld	r25, 7
    1b72:	08 95       	ret

00001b74 <__mulsf3>:
    1b74:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <__mulsf3x>
    1b78:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__fp_round>
    1b7c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <__fp_pscA>
    1b80:	38 f0       	brcs	.+14     	; 0x1b90 <__mulsf3+0x1c>
    1b82:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__fp_pscB>
    1b86:	20 f0       	brcs	.+8      	; 0x1b90 <__mulsf3+0x1c>
    1b88:	95 23       	and	r25, r21
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <__mulsf3+0x1c>
    1b8c:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_inf>
    1b90:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_nan>
    1b94:	11 24       	eor	r1, r1
    1b96:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_szero>

00001b9a <__mulsf3x>:
    1b9a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <__fp_split3>
    1b9e:	70 f3       	brcs	.-36     	; 0x1b7c <__mulsf3+0x8>

00001ba0 <__mulsf3_pse>:
    1ba0:	95 9f       	mul	r25, r21
    1ba2:	c1 f3       	breq	.-16     	; 0x1b94 <__mulsf3+0x20>
    1ba4:	95 0f       	add	r25, r21
    1ba6:	50 e0       	ldi	r21, 0x00	; 0
    1ba8:	55 1f       	adc	r21, r21
    1baa:	62 9f       	mul	r22, r18
    1bac:	f0 01       	movw	r30, r0
    1bae:	72 9f       	mul	r23, r18
    1bb0:	bb 27       	eor	r27, r27
    1bb2:	f0 0d       	add	r31, r0
    1bb4:	b1 1d       	adc	r27, r1
    1bb6:	63 9f       	mul	r22, r19
    1bb8:	aa 27       	eor	r26, r26
    1bba:	f0 0d       	add	r31, r0
    1bbc:	b1 1d       	adc	r27, r1
    1bbe:	aa 1f       	adc	r26, r26
    1bc0:	64 9f       	mul	r22, r20
    1bc2:	66 27       	eor	r22, r22
    1bc4:	b0 0d       	add	r27, r0
    1bc6:	a1 1d       	adc	r26, r1
    1bc8:	66 1f       	adc	r22, r22
    1bca:	82 9f       	mul	r24, r18
    1bcc:	22 27       	eor	r18, r18
    1bce:	b0 0d       	add	r27, r0
    1bd0:	a1 1d       	adc	r26, r1
    1bd2:	62 1f       	adc	r22, r18
    1bd4:	73 9f       	mul	r23, r19
    1bd6:	b0 0d       	add	r27, r0
    1bd8:	a1 1d       	adc	r26, r1
    1bda:	62 1f       	adc	r22, r18
    1bdc:	83 9f       	mul	r24, r19
    1bde:	a0 0d       	add	r26, r0
    1be0:	61 1d       	adc	r22, r1
    1be2:	22 1f       	adc	r18, r18
    1be4:	74 9f       	mul	r23, r20
    1be6:	33 27       	eor	r19, r19
    1be8:	a0 0d       	add	r26, r0
    1bea:	61 1d       	adc	r22, r1
    1bec:	23 1f       	adc	r18, r19
    1bee:	84 9f       	mul	r24, r20
    1bf0:	60 0d       	add	r22, r0
    1bf2:	21 1d       	adc	r18, r1
    1bf4:	82 2f       	mov	r24, r18
    1bf6:	76 2f       	mov	r23, r22
    1bf8:	6a 2f       	mov	r22, r26
    1bfa:	11 24       	eor	r1, r1
    1bfc:	9f 57       	subi	r25, 0x7F	; 127
    1bfe:	50 40       	sbci	r21, 0x00	; 0
    1c00:	9a f0       	brmi	.+38     	; 0x1c28 <__mulsf3_pse+0x88>
    1c02:	f1 f0       	breq	.+60     	; 0x1c40 <__mulsf3_pse+0xa0>
    1c04:	88 23       	and	r24, r24
    1c06:	4a f0       	brmi	.+18     	; 0x1c1a <__mulsf3_pse+0x7a>
    1c08:	ee 0f       	add	r30, r30
    1c0a:	ff 1f       	adc	r31, r31
    1c0c:	bb 1f       	adc	r27, r27
    1c0e:	66 1f       	adc	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	88 1f       	adc	r24, r24
    1c14:	91 50       	subi	r25, 0x01	; 1
    1c16:	50 40       	sbci	r21, 0x00	; 0
    1c18:	a9 f7       	brne	.-22     	; 0x1c04 <__mulsf3_pse+0x64>
    1c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c1c:	51 05       	cpc	r21, r1
    1c1e:	80 f0       	brcs	.+32     	; 0x1c40 <__mulsf3_pse+0xa0>
    1c20:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <__fp_inf>
    1c24:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__fp_szero>
    1c28:	5f 3f       	cpi	r21, 0xFF	; 255
    1c2a:	e4 f3       	brlt	.-8      	; 0x1c24 <__mulsf3_pse+0x84>
    1c2c:	98 3e       	cpi	r25, 0xE8	; 232
    1c2e:	d4 f3       	brlt	.-12     	; 0x1c24 <__mulsf3_pse+0x84>
    1c30:	86 95       	lsr	r24
    1c32:	77 95       	ror	r23
    1c34:	67 95       	ror	r22
    1c36:	b7 95       	ror	r27
    1c38:	f7 95       	ror	r31
    1c3a:	e7 95       	ror	r30
    1c3c:	9f 5f       	subi	r25, 0xFF	; 255
    1c3e:	c1 f7       	brne	.-16     	; 0x1c30 <__mulsf3_pse+0x90>
    1c40:	fe 2b       	or	r31, r30
    1c42:	88 0f       	add	r24, r24
    1c44:	91 1d       	adc	r25, r1
    1c46:	96 95       	lsr	r25
    1c48:	87 95       	ror	r24
    1c4a:	97 f9       	bld	r25, 7
    1c4c:	08 95       	ret

00001c4e <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1c4e:	ec e7       	ldi	r30, 0x7C	; 124
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7d       	andi	r24, 0xDF	; 223
    1c56:	80 83       	st	Z, r24
    1c58:	08 95       	ret

00001c5a <_ZN15OrangutanAnalog7setModeEh>:
    1c5a:	81 11       	cpse	r24, r1
    1c5c:	03 c0       	rjmp	.+6      	; 0x1c64 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1c5e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN15OrangutanAnalog7setModeEh.part.0>
    1c62:	08 95       	ret
    1c64:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1c68:	80 62       	ori	r24, 0x20	; 32
    1c6a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1c6e:	08 95       	ret

00001c70 <_ZN15OrangutanAnalog7getModeEv>:
    1c70:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1c74:	85 fb       	bst	r24, 5
    1c76:	88 27       	eor	r24, r24
    1c78:	80 f9       	bld	r24, 0
    1c7a:	08 95       	ret

00001c7c <_ZN15OrangutanAnalog16conversionResultEv>:
    1c7c:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_ZN15OrangutanAnalog7getModeEv>
    1c80:	88 23       	and	r24, r24
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1c84:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	08 95       	ret
    1c8c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1c90:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1c94:	08 95       	ret

00001c96 <_ZN15OrangutanAnalog15startConversionEhh>:
    1c96:	80 32       	cpi	r24, 0x20	; 32
    1c98:	a0 f4       	brcc	.+40     	; 0x1cc2 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1c9a:	97 e8       	ldi	r25, 0x87	; 135
    1c9c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ca0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1ca4:	66 23       	and	r22, r22
    1ca6:	11 f0       	breq	.+4      	; 0x1cac <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1ca8:	90 6c       	ori	r25, 0xC0	; 192
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1cac:	9f 77       	andi	r25, 0x7F	; 127
    1cae:	90 64       	ori	r25, 0x40	; 64
    1cb0:	90 7e       	andi	r25, 0xE0	; 224
    1cb2:	98 2b       	or	r25, r24
    1cb4:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1cb8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1cbc:	80 64       	ori	r24, 0x40	; 64
    1cbe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1cc2:	08 95       	ret

00001cc4 <_ZN15OrangutanAnalog11readAverageEhj>:
    1cc4:	a0 e0       	ldi	r26, 0x00	; 0
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e8 e6       	ldi	r30, 0x68	; 104
    1cca:	fe e0       	ldi	r31, 0x0E	; 14
    1ccc:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x14>
    1cd0:	eb 01       	movw	r28, r22
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_ZN15OrangutanAnalog15startConversionEhh>
    1cd8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1cdc:	86 fd       	sbrc	r24, 6
    1cde:	fc cf       	rjmp	.-8      	; 0x1cd8 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1ce0:	8e 01       	movw	r16, r28
    1ce2:	c1 2c       	mov	r12, r1
    1ce4:	d1 2c       	mov	r13, r1
    1ce6:	76 01       	movw	r14, r12
    1ce8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1cec:	80 64       	ori	r24, 0x40	; 64
    1cee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1cf2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1cf6:	86 fd       	sbrc	r24, 6
    1cf8:	fc cf       	rjmp	.-8      	; 0x1cf2 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1cfa:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_ZN15OrangutanAnalog16conversionResultEv>
    1cfe:	c8 0e       	add	r12, r24
    1d00:	d9 1e       	adc	r13, r25
    1d02:	e1 1c       	adc	r14, r1
    1d04:	f1 1c       	adc	r15, r1
    1d06:	01 50       	subi	r16, 0x01	; 1
    1d08:	11 09       	sbc	r17, r1
    1d0a:	01 15       	cp	r16, r1
    1d0c:	11 05       	cpc	r17, r1
    1d0e:	61 f7       	brne	.-40     	; 0x1ce8 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1d10:	ce 01       	movw	r24, r28
    1d12:	96 95       	lsr	r25
    1d14:	87 95       	ror	r24
    1d16:	c0 34       	cpi	r28, 0x40	; 64
    1d18:	d1 05       	cpc	r29, r1
    1d1a:	38 f4       	brcc	.+14     	; 0x1d2a <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1d1c:	8c 0d       	add	r24, r12
    1d1e:	9d 1d       	adc	r25, r13
    1d20:	be 01       	movw	r22, r28
    1d22:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__udivmodhi4>
    1d26:	cb 01       	movw	r24, r22
    1d28:	0e c0       	rjmp	.+28     	; 0x1d46 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1d2a:	a7 01       	movw	r20, r14
    1d2c:	96 01       	movw	r18, r12
    1d2e:	28 0f       	add	r18, r24
    1d30:	39 1f       	adc	r19, r25
    1d32:	41 1d       	adc	r20, r1
    1d34:	51 1d       	adc	r21, r1
    1d36:	ca 01       	movw	r24, r20
    1d38:	b9 01       	movw	r22, r18
    1d3a:	9e 01       	movw	r18, r28
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	50 e0       	ldi	r21, 0x00	; 0
    1d40:	0e 94 26 1c 	call	0x384c	; 0x384c <__udivmodsi4>
    1d44:	c9 01       	movw	r24, r18
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	e8 e0       	ldi	r30, 0x08	; 8
    1d4c:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x14>

00001d50 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d5c:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1d60:	9c 01       	movw	r18, r24
    1d62:	0e 94 6d 1c 	call	0x38da	; 0x38da <__umulhisi3>
    1d66:	6b 01       	movw	r12, r22
    1d68:	7c 01       	movw	r14, r24
    1d6a:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_ZN15OrangutanAnalog7getModeEv>
    1d6e:	88 23       	and	r24, r24
    1d70:	59 f0       	breq	.+22     	; 0x1d88 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1d72:	c7 01       	movw	r24, r14
    1d74:	b6 01       	movw	r22, r12
    1d76:	61 58       	subi	r22, 0x81	; 129
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7e:	2f ef       	ldi	r18, 0xFF	; 255
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	0a c0       	rjmp	.+20     	; 0x1d9c <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1d88:	c7 01       	movw	r24, r14
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	61 50       	subi	r22, 0x01	; 1
    1d8e:	7e 4f       	sbci	r23, 0xFE	; 254
    1d90:	8f 4f       	sbci	r24, 0xFF	; 255
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	2f ef       	ldi	r18, 0xFF	; 255
    1d96:	33 e0       	ldi	r19, 0x03	; 3
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	0e 94 26 1c 	call	0x384c	; 0x384c <__udivmodsi4>
    1da0:	c9 01       	movw	r24, r18
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	08 95       	ret

00001dac <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1dac:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <_ZN15OrangutanAnalog11readAverageEhj>
    1db0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1db4:	08 95       	ret

00001db6 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_ZN15OrangutanAnalog7getModeEv>
    1dc0:	18 2f       	mov	r17, r24
    1dc2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN15OrangutanAnalog7setModeEh.part.0>
    1dc6:	6a e0       	ldi	r22, 0x0A	; 10
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	86 e0       	ldi	r24, 0x06	; 6
    1dcc:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1dd0:	ec 01       	movw	r28, r24
    1dd2:	81 2f       	mov	r24, r17
    1dd4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZN15OrangutanAnalog7setModeEh>
    1dd8:	ce 01       	movw	r24, r28
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	8c 0f       	add	r24, r28
    1de0:	9d 1f       	adc	r25, r29
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	96 95       	lsr	r25
    1de6:	87 95       	ror	r24
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	08 95       	ret

00001df0 <read_battery_millivolts_3pi>:
    1df0:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1df4:	08 95       	ret

00001df6 <_ZL16currentCharacterv>:
    1df6:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <_ZL17use_program_space>
    1dfa:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <__data_end>
    1dfe:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <__data_end+0x1>
    1e02:	99 23       	and	r25, r25
    1e04:	11 f0       	breq	.+4      	; 0x1e0a <_ZL16currentCharacterv+0x14>
    1e06:	84 91       	lpm	r24, Z
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <_ZL16currentCharacterv+0x16>
    1e0a:	80 81       	ld	r24, Z
    1e0c:	2f eb       	ldi	r18, 0xBF	; 191
    1e0e:	28 0f       	add	r18, r24
    1e10:	2a 31       	cpi	r18, 0x1A	; 26
    1e12:	10 f4       	brcc	.+4      	; 0x1e18 <_ZL16currentCharacterv+0x22>
    1e14:	80 5e       	subi	r24, 0xE0	; 224
    1e16:	08 95       	ret
    1e18:	80 32       	cpi	r24, 0x20	; 32
    1e1a:	49 f4       	brne	.+18     	; 0x1e2e <_ZL16currentCharacterv+0x38>
    1e1c:	9f 01       	movw	r18, r30
    1e1e:	2f 5f       	subi	r18, 0xFF	; 255
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1e26:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1e2a:	ef 2b       	or	r30, r31
    1e2c:	31 f7       	brne	.-52     	; 0x1dfa <_ZL16currentCharacterv+0x4>
    1e2e:	08 95       	ret

00001e30 <_ZL9getNumberv>:
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZL16currentCharacterv>
    1e3a:	c0 e0       	ldi	r28, 0x00	; 0
    1e3c:	d0 e0       	ldi	r29, 0x00	; 0
    1e3e:	1a e0       	ldi	r17, 0x0A	; 10
    1e40:	90 ed       	ldi	r25, 0xD0	; 208
    1e42:	98 0f       	add	r25, r24
    1e44:	9a 30       	cpi	r25, 0x0A	; 10
    1e46:	b8 f4       	brcc	.+46     	; 0x1e76 <_ZL9getNumberv+0x46>
    1e48:	9e 01       	movw	r18, r28
    1e4a:	12 9f       	mul	r17, r18
    1e4c:	e0 01       	movw	r28, r0
    1e4e:	13 9f       	mul	r17, r19
    1e50:	d0 0d       	add	r29, r0
    1e52:	11 24       	eor	r1, r1
    1e54:	c8 0f       	add	r28, r24
    1e56:	d1 1d       	adc	r29, r1
    1e58:	87 fd       	sbrc	r24, 7
    1e5a:	da 95       	dec	r29
    1e5c:	e0 97       	sbiw	r28, 0x30	; 48
    1e5e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    1e62:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    1e6c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    1e70:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZL16currentCharacterv>
    1e74:	e5 cf       	rjmp	.-54     	; 0x1e40 <_ZL9getNumberv+0x10>
    1e76:	ce 01       	movw	r24, r28
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	08 95       	ret

00001e80 <_ZN15OrangutanBuzzer5init2Ev>:
    1e80:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1e84:	83 e2       	ldi	r24, 0x23	; 35
    1e86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1e8a:	81 e1       	ldi	r24, 0x11	; 17
    1e8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1e90:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    1e94:	80 e1       	ldi	r24, 0x10	; 16
    1e96:	97 e2       	ldi	r25, 0x27	; 39
    1e98:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1e9c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1ea0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1ea4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1ea8:	22 9a       	sbi	0x04, 2	; 4
    1eaa:	78 94       	sei
    1eac:	08 95       	ret

00001eae <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1eae:	8f 92       	push	r8
    1eb0:	9f 92       	push	r9
    1eb2:	af 92       	push	r10
    1eb4:	bf 92       	push	r11
    1eb6:	df 92       	push	r13
    1eb8:	ef 92       	push	r14
    1eba:	ff 92       	push	r15
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	5c 01       	movw	r10, r24
    1ec6:	8b 01       	movw	r16, r22
    1ec8:	d4 2e       	mov	r13, r20
    1eca:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <buzzerInitialized>
    1ece:	81 11       	cpse	r24, r1
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <buzzerInitialized>
    1ed8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZN15OrangutanBuzzer5init2Ev>
    1edc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1ee0:	b7 fe       	sbrs	r11, 7
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1ee4:	e8 94       	clt
    1ee6:	b7 f8       	bld	r11, 7
    1ee8:	2a e0       	ldi	r18, 0x0A	; 10
    1eea:	f2 2e       	mov	r15, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1eee:	ff 24       	eor	r15, r15
    1ef0:	f3 94       	inc	r15
    1ef2:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1ef6:	2e 2d       	mov	r18, r14
    1ef8:	28 7f       	andi	r18, 0xF8	; 248
    1efa:	e2 2e       	mov	r14, r18
    1efc:	48 ec       	ldi	r20, 0xC8	; 200
    1efe:	f4 9e       	mul	r15, r20
    1f00:	c0 01       	movw	r24, r0
    1f02:	11 24       	eor	r1, r1
    1f04:	8a 15       	cp	r24, r10
    1f06:	9b 05       	cpc	r25, r11
    1f08:	e0 f4       	brcc	.+56     	; 0x1f42 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1f0a:	e5 01       	movw	r28, r10
    1f0c:	51 e1       	ldi	r21, 0x11	; 17
    1f0e:	a5 16       	cp	r10, r21
    1f10:	57 e2       	ldi	r21, 0x27	; 39
    1f12:	b5 06       	cpc	r11, r21
    1f14:	10 f0       	brcs	.+4      	; 0x1f1a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1f16:	c0 e1       	ldi	r28, 0x10	; 16
    1f18:	d7 e2       	ldi	r29, 0x27	; 39
    1f1a:	be 01       	movw	r22, r28
    1f1c:	76 95       	lsr	r23
    1f1e:	67 95       	ror	r22
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	60 58       	subi	r22, 0x80	; 128
    1f26:	79 46       	sbci	r23, 0x69	; 105
    1f28:	87 46       	sbci	r24, 0x67	; 103
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	4e 01       	movw	r8, r28
    1f2e:	a1 2c       	mov	r10, r1
    1f30:	b1 2c       	mov	r11, r1
    1f32:	a5 01       	movw	r20, r10
    1f34:	94 01       	movw	r18, r8
    1f36:	0e 94 26 1c 	call	0x384c	; 0x384c <__udivmodsi4>
    1f3a:	59 01       	movw	r10, r18
    1f3c:	8e 2d       	mov	r24, r14
    1f3e:	81 60       	ori	r24, 0x01	; 1
    1f40:	24 c0       	rjmp	.+72     	; 0x1f8a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1f42:	c8 e2       	ldi	r28, 0x28	; 40
    1f44:	fc 9e       	mul	r15, r28
    1f46:	c0 2d       	mov	r28, r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	d0 e0       	ldi	r29, 0x00	; 0
    1f4c:	ca 15       	cp	r28, r10
    1f4e:	db 05       	cpc	r29, r11
    1f50:	08 f4       	brcc	.+2      	; 0x1f54 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1f52:	e5 01       	movw	r28, r10
    1f54:	be 01       	movw	r22, r28
    1f56:	76 95       	lsr	r23
    1f58:	67 95       	ror	r22
    1f5a:	9e 01       	movw	r18, r28
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	8a e0       	ldi	r24, 0x0A	; 10
    1f62:	f8 12       	cpse	r15, r24
    1f64:	07 c0       	rjmp	.+14     	; 0x1f74 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	60 5e       	subi	r22, 0xE0	; 224
    1f6c:	73 44       	sbci	r23, 0x43	; 67
    1f6e:	81 44       	sbci	r24, 0x41	; 65
    1f70:	9f 4f       	sbci	r25, 0xFF	; 255
    1f72:	06 c0       	rjmp	.+12     	; 0x1f80 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	60 53       	subi	r22, 0x30	; 48
    1f7a:	7d 4e       	sbci	r23, 0xED	; 237
    1f7c:	8c 4e       	sbci	r24, 0xEC	; 236
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	0e 94 26 1c 	call	0x384c	; 0x384c <__udivmodsi4>
    1f84:	59 01       	movw	r10, r18
    1f86:	8e 2d       	mov	r24, r14
    1f88:	82 60       	ori	r24, 0x02	; 2
    1f8a:	88 2e       	mov	r8, r24
    1f8c:	2a e0       	ldi	r18, 0x0A	; 10
    1f8e:	f2 12       	cpse	r15, r18
    1f90:	07 c0       	rjmp	.+14     	; 0x1fa0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1f92:	ce 01       	movw	r24, r28
    1f94:	05 96       	adiw	r24, 0x05	; 5
    1f96:	6a e0       	ldi	r22, 0x0A	; 10
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__udivmodhi4>
    1f9e:	eb 01       	movw	r28, r22
    1fa0:	c8 3e       	cpi	r28, 0xE8	; 232
    1fa2:	43 e0       	ldi	r20, 0x03	; 3
    1fa4:	d4 07       	cpc	r29, r20
    1fa6:	59 f0       	breq	.+22     	; 0x1fbe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1fa8:	98 01       	movw	r18, r16
    1faa:	de 01       	movw	r26, r28
    1fac:	0e 94 6d 1c 	call	0x38da	; 0x38da <__umulhisi3>
    1fb0:	28 ee       	ldi	r18, 0xE8	; 232
    1fb2:	33 e0       	ldi	r19, 0x03	; 3
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	0e 94 48 1c 	call	0x3890	; 0x3890 <__divmodsi4>
    1fbc:	89 01       	movw	r16, r18
    1fbe:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1fc2:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1fc6:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1fca:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1fce:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1fd2:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1fd6:	4d 2d       	mov	r20, r13
    1fd8:	40 31       	cpi	r20, 0x10	; 16
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1fdc:	4f e0       	ldi	r20, 0x0F	; 15
    1fde:	80 e1       	ldi	r24, 0x10	; 16
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	84 1b       	sub	r24, r20
    1fe4:	91 09       	sbc	r25, r1
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1fea:	56 95       	lsr	r21
    1fec:	47 95       	ror	r20
    1fee:	8a 95       	dec	r24
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1ff2:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1ff6:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1ffa:	10 93 9c 01 	sts	0x019C, r17	; 0x80019c <_ZL13buzzerTimeout+0x1>
    1ffe:	00 93 9b 01 	sts	0x019B, r16	; 0x80019b <_ZL13buzzerTimeout>
    2002:	86 b3       	in	r24, 0x16	; 22
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	86 bb       	out	0x16, r24	; 22
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ff 90       	pop	r15
    2018:	ef 90       	pop	r14
    201a:	df 90       	pop	r13
    201c:	bf 90       	pop	r11
    201e:	af 90       	pop	r10
    2020:	9f 90       	pop	r9
    2022:	8f 90       	pop	r8
    2024:	08 95       	ret

00002026 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    2026:	cf 93       	push	r28
    2028:	df 93       	push	r29
    202a:	eb 01       	movw	r28, r22
    202c:	8f 3f       	cpi	r24, 0xFF	; 255
    202e:	11 f0       	breq	.+4      	; 0x2034 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    2030:	41 11       	cpse	r20, r1
    2032:	05 c0       	rjmp	.+10     	; 0x203e <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	be 01       	movw	r22, r28
    2038:	88 ee       	ldi	r24, 0xE8	; 232
    203a:	93 e0       	ldi	r25, 0x03	; 3
    203c:	43 c0       	rjmp	.+134    	; 0x20c4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    203e:	81 31       	cpi	r24, 0x11	; 17
    2040:	30 f0       	brcs	.+12     	; 0x204e <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    2042:	50 ef       	ldi	r21, 0xF0	; 240
    2044:	58 0f       	add	r21, r24
    2046:	50 36       	cpi	r21, 0x60	; 96
    2048:	18 f0       	brcs	.+6      	; 0x2050 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    204a:	5f e5       	ldi	r21, 0x5F	; 95
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    204e:	50 e0       	ldi	r21, 0x00	; 0
    2050:	85 2f       	mov	r24, r21
    2052:	6c e0       	ldi	r22, 0x0C	; 12
    2054:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__udivmodqi4>
    2058:	68 2f       	mov	r22, r24
    205a:	74 ef       	ldi	r23, 0xF4	; 244
    205c:	76 03       	mulsu	r23, r22
    205e:	90 01       	movw	r18, r0
    2060:	11 24       	eor	r1, r1
    2062:	25 0f       	add	r18, r21
    2064:	31 1d       	adc	r19, r1
    2066:	2c 30       	cpi	r18, 0x0C	; 12
    2068:	31 05       	cpc	r19, r1
    206a:	40 f4       	brcc	.+16     	; 0x207c <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    206c:	f9 01       	movw	r30, r18
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	e8 5c       	subi	r30, 0xC8	; 200
    2074:	fe 4f       	sbci	r31, 0xFE	; 254
    2076:	20 81       	ld	r18, Z
    2078:	31 81       	ldd	r19, Z+1	; 0x01
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	87 30       	cpi	r24, 0x07	; 7
    2082:	81 f0       	breq	.+32     	; 0x20a4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    2084:	08 2e       	mov	r0, r24
    2086:	02 c0       	rjmp	.+4      	; 0x208c <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    2088:	22 0f       	add	r18, r18
    208a:	33 1f       	adc	r19, r19
    208c:	0a 94       	dec	r0
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    2090:	82 30       	cpi	r24, 0x02	; 2
    2092:	28 f0       	brcs	.+10     	; 0x209e <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    2094:	c9 01       	movw	r24, r18
    2096:	05 96       	adiw	r24, 0x05	; 5
    2098:	6a e0       	ldi	r22, 0x0A	; 10
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	0c c0       	rjmp	.+24     	; 0x20b6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    209e:	c9 01       	movw	r24, r18
    20a0:	90 58       	subi	r25, 0x80	; 128
    20a2:	0c c0       	rjmp	.+24     	; 0x20bc <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    20a4:	c9 01       	movw	r24, r18
    20a6:	36 e0       	ldi	r19, 0x06	; 6
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	3a 95       	dec	r19
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    20b0:	02 96       	adiw	r24, 0x02	; 2
    20b2:	65 e0       	ldi	r22, 0x05	; 5
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__udivmodhi4>
    20ba:	cb 01       	movw	r24, r22
    20bc:	40 31       	cpi	r20, 0x10	; 16
    20be:	08 f0       	brcs	.+2      	; 0x20c2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    20c0:	4f e0       	ldi	r20, 0x0F	; 15
    20c2:	be 01       	movw	r22, r28
    20c4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	08 95       	ret

000020ce <_ZL8nextNotev>:
    20ce:	a2 e0       	ldi	r26, 0x02	; 2
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	ed e6       	ldi	r30, 0x6D	; 109
    20d4:	f0 e1       	ldi	r31, 0x10	; 16
    20d6:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__prologue_saves__+0x4>
    20da:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    20de:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL8staccato>
    20e2:	88 23       	and	r24, r24
    20e4:	21 f0       	breq	.+8      	; 0x20ee <_ZL8nextNotev+0x20>
    20e6:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <_ZL22staccato_rest_duration>
    20ea:	61 11       	cpse	r22, r1
    20ec:	17 c0       	rjmp	.+46     	; 0x211c <_ZL8nextNotev+0x4e>
    20ee:	77 24       	eor	r7, r7
    20f0:	73 94       	inc	r7
    20f2:	b0 ec       	ldi	r27, 0xC0	; 192
    20f4:	ab 2e       	mov	r10, r27
    20f6:	bd e5       	ldi	r27, 0x5D	; 93
    20f8:	bb 2e       	mov	r11, r27
    20fa:	1a e0       	ldi	r17, 0x0A	; 10
    20fc:	61 2e       	mov	r6, r17
    20fe:	04 e0       	ldi	r16, 0x04	; 4
    2100:	80 2e       	mov	r8, r16
    2102:	80 ed       	ldi	r24, 0xD0	; 208
    2104:	c8 2e       	mov	r12, r24
    2106:	87 e0       	ldi	r24, 0x07	; 7
    2108:	d8 2e       	mov	r13, r24
    210a:	94 e0       	ldi	r25, 0x04	; 4
    210c:	e9 2e       	mov	r14, r25
    210e:	f1 2c       	mov	r15, r1
    2110:	04 ef       	ldi	r16, 0xF4	; 244
    2112:	11 e0       	ldi	r17, 0x01	; 1
    2114:	2f e0       	ldi	r18, 0x0F	; 15
    2116:	42 2e       	mov	r4, r18
    2118:	51 2c       	mov	r5, r1
    211a:	15 c0       	rjmp	.+42     	; 0x2146 <_ZL8nextNotev+0x78>
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	88 ee       	ldi	r24, 0xE8	; 232
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	0e 94 57 0f 	call	0x1eae	; 0x1eae <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    2128:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    212c:	17 c1       	rjmp	.+558    	; 0x235c <_ZL8nextNotev+0x28e>
    212e:	86 36       	cpi	r24, 0x66	; 102
    2130:	d4 f5       	brge	.+116    	; 0x21a6 <_ZL8nextNotev+0xd8>
    2132:	81 36       	cpi	r24, 0x61	; 97
    2134:	09 f4       	brne	.+2      	; 0x2138 <_ZL8nextNotev+0x6a>
    2136:	a9 c0       	rjmp	.+338    	; 0x228a <_ZL8nextNotev+0x1bc>
    2138:	7c f5       	brge	.+94     	; 0x2198 <_ZL8nextNotev+0xca>
    213a:	8c 33       	cpi	r24, 0x3C	; 60
    213c:	09 f4       	brne	.+2      	; 0x2140 <_ZL8nextNotev+0x72>
    213e:	60 c0       	rjmp	.+192    	; 0x2200 <_ZL8nextNotev+0x132>
    2140:	8e 33       	cpi	r24, 0x3E	; 62
    2142:	81 f4       	brne	.+32     	; 0x2164 <_ZL8nextNotev+0x96>
    2144:	93 94       	inc	r9
    2146:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZL16currentCharacterv>
    214a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    214e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    2152:	2f 5f       	subi	r18, 0xFF	; 255
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    215a:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    215e:	85 36       	cpi	r24, 0x65	; 101
    2160:	31 f7       	brne	.-52     	; 0x212e <_ZL8nextNotev+0x60>
    2162:	52 c0       	rjmp	.+164    	; 0x2208 <_ZL8nextNotev+0x13a>
    2164:	81 32       	cpi	r24, 0x21	; 33
    2166:	09 f0       	breq	.+2      	; 0x216a <_ZL8nextNotev+0x9c>
    2168:	8b c0       	rjmp	.+278    	; 0x2280 <_ZL8nextNotev+0x1b2>
    216a:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    216e:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    2172:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    2176:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    217a:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    217e:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    2182:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    2186:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    218a:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    218e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_ZL8staccato>
    2192:	a4 e0       	ldi	r26, 0x04	; 4
    2194:	9a 2e       	mov	r9, r26
    2196:	d7 cf       	rjmp	.-82     	; 0x2146 <_ZL8nextNotev+0x78>
    2198:	83 36       	cpi	r24, 0x63	; 99
    219a:	a1 f1       	breq	.+104    	; 0x2204 <_ZL8nextNotev+0x136>
    219c:	0c f4       	brge	.+2      	; 0x21a0 <_ZL8nextNotev+0xd2>
    219e:	78 c0       	rjmp	.+240    	; 0x2290 <_ZL8nextNotev+0x1c2>
    21a0:	10 e0       	ldi	r17, 0x00	; 0
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	77 c0       	rjmp	.+238    	; 0x2294 <_ZL8nextNotev+0x1c6>
    21a6:	8d 36       	cpi	r24, 0x6D	; 109
    21a8:	c1 f1       	breq	.+112    	; 0x221a <_ZL8nextNotev+0x14c>
    21aa:	94 f4       	brge	.+36     	; 0x21d0 <_ZL8nextNotev+0x102>
    21ac:	87 36       	cpi	r24, 0x67	; 103
    21ae:	91 f1       	breq	.+100    	; 0x2214 <_ZL8nextNotev+0x146>
    21b0:	74 f1       	brlt	.+92     	; 0x220e <_ZL8nextNotev+0x140>
    21b2:	8c 36       	cpi	r24, 0x6C	; 108
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <_ZL8nextNotev+0xea>
    21b6:	64 c0       	rjmp	.+200    	; 0x2280 <_ZL8nextNotev+0x1b2>
    21b8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZL9getNumberv>
    21bc:	bc 01       	movw	r22, r24
    21be:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    21c2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    21c6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    21ca:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    21ce:	51 c0       	rjmp	.+162    	; 0x2272 <_ZL8nextNotev+0x1a4>
    21d0:	82 37       	cpi	r24, 0x72	; 114
    21d2:	c9 f1       	breq	.+114    	; 0x2246 <_ZL8nextNotev+0x178>
    21d4:	4c f4       	brge	.+18     	; 0x21e8 <_ZL8nextNotev+0x11a>
    21d6:	8f 36       	cpi	r24, 0x6F	; 111
    21d8:	09 f0       	breq	.+2      	; 0x21dc <_ZL8nextNotev+0x10e>
    21da:	52 c0       	rjmp	.+164    	; 0x2280 <_ZL8nextNotev+0x1b2>
    21dc:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZL9getNumberv>
    21e0:	98 2e       	mov	r9, r24
    21e2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    21e6:	af cf       	rjmp	.-162    	; 0x2146 <_ZL8nextNotev+0x78>
    21e8:	84 37       	cpi	r24, 0x74	; 116
    21ea:	81 f1       	breq	.+96     	; 0x224c <_ZL8nextNotev+0x17e>
    21ec:	86 37       	cpi	r24, 0x76	; 118
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <_ZL8nextNotev+0x124>
    21f0:	47 c0       	rjmp	.+142    	; 0x2280 <_ZL8nextNotev+0x1b2>
    21f2:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZL9getNumberv>
    21f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    21fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    21fe:	a3 cf       	rjmp	.-186    	; 0x2146 <_ZL8nextNotev+0x78>
    2200:	9a 94       	dec	r9
    2202:	a1 cf       	rjmp	.-190    	; 0x2146 <_ZL8nextNotev+0x78>
    2204:	10 e0       	ldi	r17, 0x00	; 0
    2206:	20 c0       	rjmp	.+64     	; 0x2248 <_ZL8nextNotev+0x17a>
    2208:	10 e0       	ldi	r17, 0x00	; 0
    220a:	84 e0       	ldi	r24, 0x04	; 4
    220c:	43 c0       	rjmp	.+134    	; 0x2294 <_ZL8nextNotev+0x1c6>
    220e:	10 e0       	ldi	r17, 0x00	; 0
    2210:	85 e0       	ldi	r24, 0x05	; 5
    2212:	40 c0       	rjmp	.+128    	; 0x2294 <_ZL8nextNotev+0x1c6>
    2214:	10 e0       	ldi	r17, 0x00	; 0
    2216:	87 e0       	ldi	r24, 0x07	; 7
    2218:	3d c0       	rjmp	.+122    	; 0x2294 <_ZL8nextNotev+0x1c6>
    221a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZL16currentCharacterv>
    221e:	8c 36       	cpi	r24, 0x6C	; 108
    2220:	19 f4       	brne	.+6      	; 0x2228 <_ZL8nextNotev+0x15a>
    2222:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_ZL8staccato>
    2226:	04 c0       	rjmp	.+8      	; 0x2230 <_ZL8nextNotev+0x162>
    2228:	70 92 98 01 	sts	0x0198, r7	; 0x800198 <_ZL8staccato>
    222c:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    2230:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    2234:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    2238:	2f 5f       	subi	r18, 0xFF	; 255
    223a:	3f 4f       	sbci	r19, 0xFF	; 255
    223c:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    2240:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    2244:	80 cf       	rjmp	.-256    	; 0x2146 <_ZL8nextNotev+0x78>
    2246:	11 e0       	ldi	r17, 0x01	; 1
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	24 c0       	rjmp	.+72     	; 0x2294 <_ZL8nextNotev+0x1c6>
    224c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZL9getNumberv>
    2250:	bc 01       	movw	r22, r24
    2252:	c5 01       	movw	r24, r10
    2254:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__udivmodhi4>
    2258:	66 9e       	mul	r6, r22
    225a:	c0 01       	movw	r24, r0
    225c:	67 9e       	mul	r6, r23
    225e:	90 0d       	add	r25, r0
    2260:	11 24       	eor	r1, r1
    2262:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    2266:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    226a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    226e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    2272:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__udivmodhi4>
    2276:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    227a:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    227e:	63 cf       	rjmp	.-314    	; 0x2146 <_ZL8nextNotev+0x78>
    2280:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
    2284:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
    2288:	69 c0       	rjmp	.+210    	; 0x235c <_ZL8nextNotev+0x28e>
    228a:	10 e0       	ldi	r17, 0x00	; 0
    228c:	89 e0       	ldi	r24, 0x09	; 9
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <_ZL8nextNotev+0x1c6>
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	8b e0       	ldi	r24, 0x0B	; 11
    2294:	08 2f       	mov	r16, r24
    2296:	9c e0       	ldi	r25, 0x0C	; 12
    2298:	99 9e       	mul	r9, r25
    229a:	00 0d       	add	r16, r0
    229c:	11 24       	eor	r1, r1
    229e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZL16currentCharacterv>
    22a2:	98 2f       	mov	r25, r24
    22a4:	97 7f       	andi	r25, 0xF7	; 247
    22a6:	93 32       	cpi	r25, 0x23	; 35
    22a8:	61 f4       	brne	.+24     	; 0x22c2 <_ZL8nextNotev+0x1f4>
    22aa:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    22ae:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    22b2:	2f 5f       	subi	r18, 0xFF	; 255
    22b4:	3f 4f       	sbci	r19, 0xFF	; 255
    22b6:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    22ba:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    22be:	0f 5f       	subi	r16, 0xFF	; 255
    22c0:	ee cf       	rjmp	.-36     	; 0x229e <_ZL8nextNotev+0x1d0>
    22c2:	8d 32       	cpi	r24, 0x2D	; 45
    22c4:	71 f4       	brne	.+28     	; 0x22e2 <_ZL8nextNotev+0x214>
    22c6:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    22ca:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    22ce:	2f 5f       	subi	r18, 0xFF	; 255
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    22d6:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    22da:	01 50       	subi	r16, 0x01	; 1
    22dc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZL16currentCharacterv>
    22e0:	f0 cf       	rjmp	.-32     	; 0x22c2 <_ZL8nextNotev+0x1f4>
    22e2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    22e6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    22ea:	81 53       	subi	r24, 0x31	; 49
    22ec:	88 30       	cpi	r24, 0x08	; 8
    22ee:	50 f4       	brcc	.+20     	; 0x2304 <_ZL8nextNotev+0x236>
    22f0:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    22f4:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    22f8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZL9getNumberv>
    22fc:	bc 01       	movw	r22, r24
    22fe:	c7 01       	movw	r24, r14
    2300:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__udivmodhi4>
    2304:	7b 01       	movw	r14, r22
    2306:	f6 94       	lsr	r15
    2308:	e7 94       	ror	r14
    230a:	69 83       	std	Y+1, r22	; 0x01
    230c:	7a 83       	std	Y+2, r23	; 0x02
    230e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <_ZL16currentCharacterv>
    2312:	69 81       	ldd	r22, Y+1	; 0x01
    2314:	7a 81       	ldd	r23, Y+2	; 0x02
    2316:	8e 32       	cpi	r24, 0x2E	; 46
    2318:	69 f4       	brne	.+26     	; 0x2334 <_ZL8nextNotev+0x266>
    231a:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    231e:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    2322:	2f 5f       	subi	r18, 0xFF	; 255
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    232a:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    232e:	6e 0d       	add	r22, r14
    2330:	7f 1d       	adc	r23, r15
    2332:	e9 cf       	rjmp	.-46     	; 0x2306 <_ZL8nextNotev+0x238>
    2334:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL8staccato>
    2338:	88 23       	and	r24, r24
    233a:	39 f0       	breq	.+14     	; 0x234a <_ZL8nextNotev+0x27c>
    233c:	9b 01       	movw	r18, r22
    233e:	36 95       	lsr	r19
    2340:	27 95       	ror	r18
    2342:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <_ZL22staccato_rest_duration>
    2346:	62 1b       	sub	r22, r18
    2348:	71 09       	sbc	r23, r1
    234a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    234e:	11 23       	and	r17, r17
    2350:	11 f0       	breq	.+4      	; 0x2356 <_ZL8nextNotev+0x288>
    2352:	8f ef       	ldi	r24, 0xFF	; 255
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <_ZL8nextNotev+0x28a>
    2356:	80 2f       	mov	r24, r16
    2358:	0e 94 13 10 	call	0x2026	; 0x2026 <_ZN15OrangutanBuzzer8playNoteEhjh>
    235c:	22 96       	adiw	r28, 0x02	; 2
    235e:	e0 e1       	ldi	r30, 0x10	; 16
    2360:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__epilogue_restores__+0x4>

00002364 <__vector_13>:
    2364:	1f 92       	push	r1
    2366:	0f 92       	push	r0
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	0f 92       	push	r0
    236c:	11 24       	eor	r1, r1
    236e:	2f 93       	push	r18
    2370:	3f 93       	push	r19
    2372:	4f 93       	push	r20
    2374:	5f 93       	push	r21
    2376:	6f 93       	push	r22
    2378:	7f 93       	push	r23
    237a:	8f 93       	push	r24
    237c:	9f 93       	push	r25
    237e:	af 93       	push	r26
    2380:	bf 93       	push	r27
    2382:	ef 93       	push	r30
    2384:	ff 93       	push	r31
    2386:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_ZL13buzzerTimeout>
    238a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <_ZL13buzzerTimeout+0x1>
    238e:	9c 01       	movw	r18, r24
    2390:	21 50       	subi	r18, 0x01	; 1
    2392:	31 09       	sbc	r19, r1
    2394:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <_ZL13buzzerTimeout+0x1>
    2398:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <_ZL13buzzerTimeout>
    239c:	89 2b       	or	r24, r25
    239e:	11 f5       	brne	.+68     	; 0x23e4 <__vector_13+0x80>
    23a0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    23a4:	78 94       	sei
    23a6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    23aa:	88 7f       	andi	r24, 0xF8	; 248
    23ac:	81 60       	ori	r24, 0x01	; 1
    23ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    23b2:	80 e1       	ldi	r24, 0x10	; 16
    23b4:	97 e2       	ldi	r25, 0x27	; 39
    23b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    23ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    23be:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    23c2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    23cc:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    23d0:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    23d4:	89 2b       	or	r24, r25
    23d6:	31 f0       	breq	.+12     	; 0x23e4 <__vector_13+0x80>
    23d8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL17play_mode_setting>
    23dc:	81 11       	cpse	r24, r1
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <__vector_13+0x80>
    23e0:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZL8nextNotev>
    23e4:	ff 91       	pop	r31
    23e6:	ef 91       	pop	r30
    23e8:	bf 91       	pop	r27
    23ea:	af 91       	pop	r26
    23ec:	9f 91       	pop	r25
    23ee:	8f 91       	pop	r24
    23f0:	7f 91       	pop	r23
    23f2:	6f 91       	pop	r22
    23f4:	5f 91       	pop	r21
    23f6:	4f 91       	pop	r20
    23f8:	3f 91       	pop	r19
    23fa:	2f 91       	pop	r18
    23fc:	0f 90       	pop	r0
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	0f 90       	pop	r0
    2402:	1f 90       	pop	r1
    2404:	18 95       	reti

00002406 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    2406:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    240a:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    240e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_ZL17use_program_space>
    2418:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    241c:	0e 94 67 10 	call	0x20ce	; 0x20ce <_ZL8nextNotev>
    2420:	08 95       	ret

00002422 <play_from_program_space>:
    2422:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    2426:	08 95       	ret

00002428 <delay_us.constprop.0>:
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	6f 93       	push	r22
    242e:	64 e0       	ldi	r22, 0x04	; 4
    2430:	6a 95       	dec	r22
    2432:	f1 f7       	brne	.-4      	; 0x2430 <delay_us.constprop.0+0x8>
    2434:	6f 91       	pop	r22
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	c9 f7       	brne	.-14     	; 0x242c <delay_us.constprop.0+0x4>
    243a:	08 95       	ret

0000243c <_ZN12OrangutanLCD8busyWaitEv>:
    243c:	0f 93       	push	r16
    243e:	1f 93       	push	r17
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	1a b1       	in	r17, 0x0a	; 10
    2446:	57 98       	cbi	0x0a, 7	; 10
    2448:	5a 98       	cbi	0x0b, 2	; 11
    244a:	28 9a       	sbi	0x05, 0	; 5
    244c:	c0 e0       	ldi	r28, 0x00	; 0
    244e:	d0 e0       	ldi	r29, 0x00	; 0
    2450:	0e 94 14 12 	call	0x2428	; 0x2428 <delay_us.constprop.0>
    2454:	5c 9a       	sbi	0x0b, 4	; 11
    2456:	0e 94 14 12 	call	0x2428	; 0x2428 <delay_us.constprop.0>
    245a:	09 b1       	in	r16, 0x09	; 9
    245c:	5c 98       	cbi	0x0b, 4	; 11
    245e:	0e 94 14 12 	call	0x2428	; 0x2428 <delay_us.constprop.0>
    2462:	5c 9a       	sbi	0x0b, 4	; 11
    2464:	0e 94 14 12 	call	0x2428	; 0x2428 <delay_us.constprop.0>
    2468:	5c 98       	cbi	0x0b, 4	; 11
    246a:	24 96       	adiw	r28, 0x04	; 4
    246c:	07 ff       	sbrs	r16, 7
    246e:	10 c0       	rjmp	.+32     	; 0x2490 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    2470:	ae 01       	movw	r20, r28
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <lcdTimeout>
    247a:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <lcdTimeout+0x1>
    247e:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <lcdTimeout+0x2>
    2482:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <lcdTimeout+0x3>
    2486:	48 17       	cp	r20, r24
    2488:	59 07       	cpc	r21, r25
    248a:	6a 07       	cpc	r22, r26
    248c:	7b 07       	cpc	r23, r27
    248e:	00 f3       	brcs	.-64     	; 0x2450 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    2490:	1a b9       	out	0x0a, r17	; 10
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	08 95       	ret

0000249c <_ZN12OrangutanLCD8sendDataEh>:
    249c:	95 b1       	in	r25, 0x05	; 5
    249e:	28 2f       	mov	r18, r24
    24a0:	21 70       	andi	r18, 0x01	; 1
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	22 0f       	add	r18, r18
    24a6:	33 1f       	adc	r19, r19
    24a8:	48 2f       	mov	r20, r24
    24aa:	46 70       	andi	r20, 0x06	; 6
    24ac:	68 e0       	ldi	r22, 0x08	; 8
    24ae:	46 9f       	mul	r20, r22
    24b0:	a0 01       	movw	r20, r0
    24b2:	11 24       	eor	r1, r1
    24b4:	24 2b       	or	r18, r20
    24b6:	9d 7c       	andi	r25, 0xCD	; 205
    24b8:	29 2b       	or	r18, r25
    24ba:	25 b9       	out	0x05, r18	; 5
    24bc:	9b b1       	in	r25, 0x0b	; 11
    24be:	88 70       	andi	r24, 0x08	; 8
    24c0:	82 95       	swap	r24
    24c2:	80 7f       	andi	r24, 0xF0	; 240
    24c4:	9f 77       	andi	r25, 0x7F	; 127
    24c6:	89 2b       	or	r24, r25
    24c8:	8b b9       	out	0x0b, r24	; 11
    24ca:	5c 9a       	sbi	0x0b, 4	; 11
    24cc:	0e 94 14 12 	call	0x2428	; 0x2428 <delay_us.constprop.0>
    24d0:	5c 98       	cbi	0x0b, 4	; 11
    24d2:	0e 94 14 12 	call	0x2428	; 0x2428 <delay_us.constprop.0>
    24d6:	08 95       	ret

000024d8 <_ZN12OrangutanLCD4sendEhhh>:
    24d8:	a0 e0       	ldi	r26, 0x00	; 0
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e2 e7       	ldi	r30, 0x72	; 114
    24de:	f2 e1       	ldi	r31, 0x12	; 18
    24e0:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__prologue_saves__+0x16>
    24e4:	c8 2f       	mov	r28, r24
    24e6:	d6 2e       	mov	r13, r22
    24e8:	e4 2e       	mov	r14, r20
    24ea:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    24ee:	81 11       	cpse	r24, r1
    24f0:	05 c0       	rjmp	.+10     	; 0x24fc <_ZN12OrangutanLCD4sendEhhh+0x24>
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    24f8:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN12OrangutanLCD5init2Ev>
    24fc:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN12OrangutanLCD8busyWaitEv>
    2500:	14 b1       	in	r17, 0x04	; 4
    2502:	d5 b1       	in	r29, 0x05	; 5
    2504:	fa b0       	in	r15, 0x0a	; 10
    2506:	0b b1       	in	r16, 0x0b	; 11
    2508:	28 98       	cbi	0x05, 0	; 5
    250a:	dd 20       	and	r13, r13
    250c:	11 f0       	breq	.+4      	; 0x2512 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    250e:	5a 9a       	sbi	0x0b, 2	; 11
    2510:	01 c0       	rjmp	.+2      	; 0x2514 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2512:	5a 98       	cbi	0x0b, 2	; 11
    2514:	94 b1       	in	r25, 0x04	; 4
    2516:	92 63       	ori	r25, 0x32	; 50
    2518:	94 b9       	out	0x04, r25	; 4
    251a:	57 9a       	sbi	0x0a, 7	; 10
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	e8 16       	cp	r14, r24
    2520:	29 f0       	breq	.+10     	; 0x252c <_ZN12OrangutanLCD4sendEhhh+0x54>
    2522:	8c 2f       	mov	r24, r28
    2524:	82 95       	swap	r24
    2526:	8f 70       	andi	r24, 0x0F	; 15
    2528:	0e 94 4e 12 	call	0x249c	; 0x249c <_ZN12OrangutanLCD8sendDataEh>
    252c:	8c 2f       	mov	r24, r28
    252e:	8f 70       	andi	r24, 0x0F	; 15
    2530:	0e 94 4e 12 	call	0x249c	; 0x249c <_ZN12OrangutanLCD8sendDataEh>
    2534:	fa b8       	out	0x0a, r15	; 10
    2536:	0b b9       	out	0x0b, r16	; 11
    2538:	14 b9       	out	0x04, r17	; 4
    253a:	d5 b9       	out	0x05, r29	; 5
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	e7 e0       	ldi	r30, 0x07	; 7
    2542:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__epilogue_restores__+0x16>

00002546 <_ZN12OrangutanLCD8send_cmdEh>:
    2546:	42 e0       	ldi	r20, 0x02	; 2
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN12OrangutanLCD4sendEhhh>
    254e:	08 95       	ret

00002550 <_ZN12OrangutanLCD9send_dataEh>:
    2550:	42 e0       	ldi	r20, 0x02	; 2
    2552:	61 e0       	ldi	r22, 0x01	; 1
    2554:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN12OrangutanLCD4sendEhhh>
    2558:	08 95       	ret

0000255a <print_character>:
    255a:	0e 94 a8 12 	call	0x2550	; 0x2550 <_ZN12OrangutanLCD9send_dataEh>
    255e:	08 95       	ret

00002560 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN12OrangutanLCD4sendEhhh>
    2568:	08 95       	ret

0000256a <_ZN12OrangutanLCD5init2Ev>:
    256a:	80 e1       	ldi	r24, 0x10	; 16
    256c:	97 e2       	ldi	r25, 0x27	; 39
    256e:	a0 e0       	ldi	r26, 0x00	; 0
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <lcdTimeout>
    2576:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <lcdTimeout+0x1>
    257a:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <lcdTimeout+0x2>
    257e:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <lcdTimeout+0x3>
    2582:	52 9a       	sbi	0x0a, 2	; 10
    2584:	20 9a       	sbi	0x04, 0	; 4
    2586:	54 9a       	sbi	0x0a, 4	; 10
    2588:	8e e1       	ldi	r24, 0x1E	; 30
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
    2590:	83 e0       	ldi	r24, 0x03	; 3
    2592:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2596:	86 e0       	ldi	r24, 0x06	; 6
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
    259e:	83 e0       	ldi	r24, 0x03	; 3
    25a0:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	0e 94 b0 12 	call	0x2560	; 0x2560 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
    25c8:	88 e2       	ldi	r24, 0x28	; 40
    25ca:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN12OrangutanLCD8send_cmdEh>
    25ce:	88 e0       	ldi	r24, 0x08	; 8
    25d0:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN12OrangutanLCD8send_cmdEh>
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN12OrangutanLCD8send_cmdEh>
    25da:	86 e0       	ldi	r24, 0x06	; 6
    25dc:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN12OrangutanLCD8send_cmdEh>
    25e0:	8c e0       	ldi	r24, 0x0C	; 12
    25e2:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN12OrangutanLCD8send_cmdEh>
    25e6:	08 95       	ret

000025e8 <_ZN12OrangutanLCD5clearEv>:
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN12OrangutanLCD8send_cmdEh>
    25ee:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <printf_chars>
    25f2:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <printf_chars+0x1>
    25f6:	89 2b       	or	r24, r25
    25f8:	f9 f0       	breq	.+62     	; 0x2638 <_ZN12OrangutanLCD5clearEv+0x50>
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	a0 e2       	ldi	r26, 0x20	; 32
    25fe:	26 2f       	mov	r18, r22
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2606:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	78 9f       	mul	r23, r24
    2610:	a0 01       	movw	r20, r0
    2612:	79 9f       	mul	r23, r25
    2614:	50 0d       	add	r21, r0
    2616:	11 24       	eor	r1, r1
    2618:	24 17       	cp	r18, r20
    261a:	35 07       	cpc	r19, r21
    261c:	4c f4       	brge	.+18     	; 0x2630 <_ZN12OrangutanLCD5clearEv+0x48>
    261e:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <printf_chars>
    2622:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <printf_chars+0x1>
    2626:	e2 0f       	add	r30, r18
    2628:	f3 1f       	adc	r31, r19
    262a:	a0 83       	st	Z, r26
    262c:	6f 5f       	subi	r22, 0xFF	; 255
    262e:	e7 cf       	rjmp	.-50     	; 0x25fe <_ZN12OrangutanLCD5clearEv+0x16>
    2630:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <col>
    2634:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <row>
    2638:	08 95       	ret

0000263a <clear>:
    263a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <_ZN12OrangutanLCD5clearEv>
    263e:	08 95       	ret

00002640 <_ZN12OrangutanLCD5printEPKc>:
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	ec 01       	movw	r28, r24
    2646:	89 91       	ld	r24, Y+
    2648:	88 23       	and	r24, r24
    264a:	19 f0       	breq	.+6      	; 0x2652 <_ZN12OrangutanLCD5printEPKc+0x12>
    264c:	0e 94 a8 12 	call	0x2550	; 0x2550 <_ZN12OrangutanLCD9send_dataEh>
    2650:	fa cf       	rjmp	.-12     	; 0x2646 <_ZN12OrangutanLCD5printEPKc+0x6>
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <print>:
    2658:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN12OrangutanLCD5printEPKc>
    265c:	08 95       	ret

0000265e <_ZN12OrangutanLCD5printEm>:
    265e:	aa e0       	ldi	r26, 0x0A	; 10
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e5 e3       	ldi	r30, 0x35	; 53
    2664:	f3 e1       	ldi	r31, 0x13	; 19
    2666:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__prologue_saves__+0x14>
    266a:	1a e0       	ldi	r17, 0x0A	; 10
    266c:	5a e0       	ldi	r21, 0x0A	; 10
    266e:	c5 2e       	mov	r12, r21
    2670:	d1 2c       	mov	r13, r1
    2672:	e1 2c       	mov	r14, r1
    2674:	f1 2c       	mov	r15, r1
    2676:	06 2f       	mov	r16, r22
    2678:	a7 01       	movw	r20, r14
    267a:	96 01       	movw	r18, r12
    267c:	0e 94 26 1c 	call	0x384c	; 0x384c <__udivmodsi4>
    2680:	ca 01       	movw	r24, r20
    2682:	b9 01       	movw	r22, r18
    2684:	11 50       	subi	r17, 0x01	; 1
    2686:	e1 e0       	ldi	r30, 0x01	; 1
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	ec 0f       	add	r30, r28
    268c:	fd 1f       	adc	r31, r29
    268e:	e1 0f       	add	r30, r17
    2690:	f1 1d       	adc	r31, r1
    2692:	00 5d       	subi	r16, 0xD0	; 208
    2694:	2a e0       	ldi	r18, 0x0A	; 10
    2696:	62 9f       	mul	r22, r18
    2698:	00 19       	sub	r16, r0
    269a:	11 24       	eor	r1, r1
    269c:	00 83       	st	Z, r16
    269e:	61 15       	cp	r22, r1
    26a0:	71 05       	cpc	r23, r1
    26a2:	81 05       	cpc	r24, r1
    26a4:	91 05       	cpc	r25, r1
    26a6:	39 f7       	brne	.-50     	; 0x2676 <_ZN12OrangutanLCD5printEm+0x18>
    26a8:	1a 30       	cpi	r17, 0x0A	; 10
    26aa:	58 f4       	brcc	.+22     	; 0x26c2 <_ZN12OrangutanLCD5printEm+0x64>
    26ac:	e1 e0       	ldi	r30, 0x01	; 1
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	ec 0f       	add	r30, r28
    26b2:	fd 1f       	adc	r31, r29
    26b4:	e1 0f       	add	r30, r17
    26b6:	f1 1d       	adc	r31, r1
    26b8:	80 81       	ld	r24, Z
    26ba:	0e 94 a8 12 	call	0x2550	; 0x2550 <_ZN12OrangutanLCD9send_dataEh>
    26be:	1f 5f       	subi	r17, 0xFF	; 255
    26c0:	f3 cf       	rjmp	.-26     	; 0x26a8 <_ZN12OrangutanLCD5printEm+0x4a>
    26c2:	2a 96       	adiw	r28, 0x0a	; 10
    26c4:	e8 e0       	ldi	r30, 0x08	; 8
    26c6:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <__epilogue_restores__+0x14>

000026ca <_ZN12OrangutanLCD5printEl>:
    26ca:	cf 92       	push	r12
    26cc:	df 92       	push	r13
    26ce:	ef 92       	push	r14
    26d0:	ff 92       	push	r15
    26d2:	6b 01       	movw	r12, r22
    26d4:	7c 01       	movw	r14, r24
    26d6:	97 ff       	sbrs	r25, 7
    26d8:	0b c0       	rjmp	.+22     	; 0x26f0 <_ZN12OrangutanLCD5printEl+0x26>
    26da:	f0 94       	com	r15
    26dc:	e0 94       	com	r14
    26de:	d0 94       	com	r13
    26e0:	c0 94       	com	r12
    26e2:	c1 1c       	adc	r12, r1
    26e4:	d1 1c       	adc	r13, r1
    26e6:	e1 1c       	adc	r14, r1
    26e8:	f1 1c       	adc	r15, r1
    26ea:	8d e2       	ldi	r24, 0x2D	; 45
    26ec:	0e 94 a8 12 	call	0x2550	; 0x2550 <_ZN12OrangutanLCD9send_dataEh>
    26f0:	c7 01       	movw	r24, r14
    26f2:	b6 01       	movw	r22, r12
    26f4:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN12OrangutanLCD5printEm>
    26f8:	ff 90       	pop	r15
    26fa:	ef 90       	pop	r14
    26fc:	df 90       	pop	r13
    26fe:	cf 90       	pop	r12
    2700:	08 95       	ret

00002702 <print_long>:
    2702:	0e 94 65 13 	call	0x26ca	; 0x26ca <_ZN12OrangutanLCD5printEl>
    2706:	08 95       	ret

00002708 <_ZN12OrangutanLCD6gotoXYEhh>:
    2708:	a5 e0       	ldi	r26, 0x05	; 5
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ea e8       	ldi	r30, 0x8A	; 138
    270e:	f3 e1       	ldi	r31, 0x13	; 19
    2710:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <__prologue_saves__+0x1e>
    2714:	18 2f       	mov	r17, r24
    2716:	80 e8       	ldi	r24, 0x80	; 128
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	80 ec       	ldi	r24, 0xC0	; 192
    271c:	8a 83       	std	Y+2, r24	; 0x02
    271e:	84 e9       	ldi	r24, 0x94	; 148
    2720:	8b 83       	std	Y+3, r24	; 0x03
    2722:	84 ed       	ldi	r24, 0xD4	; 212
    2724:	8c 83       	std	Y+4, r24	; 0x04
    2726:	fe 01       	movw	r30, r28
    2728:	e6 0f       	add	r30, r22
    272a:	f1 1d       	adc	r31, r1
    272c:	81 81       	ldd	r24, Z+1	; 0x01
    272e:	81 0f       	add	r24, r17
    2730:	6d 83       	std	Y+5, r22	; 0x05
    2732:	0e 94 a3 12 	call	0x2546	; 0x2546 <_ZN12OrangutanLCD8send_cmdEh>
    2736:	10 93 a1 01 	sts	0x01A1, r17	; 0x8001a1 <col>
    273a:	6d 81       	ldd	r22, Y+5	; 0x05
    273c:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <row>
    2740:	25 96       	adiw	r28, 0x05	; 5
    2742:	e3 e0       	ldi	r30, 0x03	; 3
    2744:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__epilogue_restores__+0x1e>

00002748 <lcd_goto_xy>:
    2748:	0e 94 84 13 	call	0x2708	; 0x2708 <_ZN12OrangutanLCD6gotoXYEhh>
    274c:	08 95       	ret

0000274e <_ZN16OrangutanDigital9setOutputEhh>:
    274e:	88 30       	cpi	r24, 0x08	; 8
    2750:	58 f4       	brcc	.+22     	; 0x2768 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    2752:	91 e0       	ldi	r25, 0x01	; 1
    2754:	01 c0       	rjmp	.+2      	; 0x2758 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    2756:	99 0f       	add	r25, r25
    2758:	8a 95       	dec	r24
    275a:	ea f7       	brpl	.-6      	; 0x2756 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    275c:	89 2f       	mov	r24, r25
    275e:	aa e2       	ldi	r26, 0x2A	; 42
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	eb e2       	ldi	r30, 0x2B	; 43
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	21 c0       	rjmp	.+66     	; 0x27aa <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2768:	8e 30       	cpi	r24, 0x0E	; 14
    276a:	60 f4       	brcc	.+24     	; 0x2784 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    276c:	98 ef       	ldi	r25, 0xF8	; 248
    276e:	98 0f       	add	r25, r24
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	01 c0       	rjmp	.+2      	; 0x2776 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    2774:	88 0f       	add	r24, r24
    2776:	9a 95       	dec	r25
    2778:	ea f7       	brpl	.-6      	; 0x2774 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    277a:	a4 e2       	ldi	r26, 0x24	; 36
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e5 e2       	ldi	r30, 0x25	; 37
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	13 c0       	rjmp	.+38     	; 0x27aa <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2784:	85 31       	cpi	r24, 0x15	; 21
    2786:	60 f4       	brcc	.+24     	; 0x27a0 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2788:	92 ef       	ldi	r25, 0xF2	; 242
    278a:	98 0f       	add	r25, r24
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	01 c0       	rjmp	.+2      	; 0x2792 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    2790:	88 0f       	add	r24, r24
    2792:	9a 95       	dec	r25
    2794:	ea f7       	brpl	.-6      	; 0x2790 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    2796:	a7 e2       	ldi	r26, 0x27	; 39
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e8 e2       	ldi	r30, 0x28	; 40
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	05 c0       	rjmp	.+10     	; 0x27aa <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	a0 e0       	ldi	r26, 0x00	; 0
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e0 e0       	ldi	r30, 0x00	; 0
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	6f 3f       	cpi	r22, 0xFF	; 255
    27ac:	19 f4       	brne	.+6      	; 0x27b4 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    27ae:	90 81       	ld	r25, Z
    27b0:	98 27       	eor	r25, r24
    27b2:	09 c0       	rjmp	.+18     	; 0x27c6 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    27b4:	66 23       	and	r22, r22
    27b6:	19 f0       	breq	.+6      	; 0x27be <_ZN16OrangutanDigital9setOutputEhh+0x70>
    27b8:	90 81       	ld	r25, Z
    27ba:	98 2b       	or	r25, r24
    27bc:	04 c0       	rjmp	.+8      	; 0x27c6 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    27be:	20 81       	ld	r18, Z
    27c0:	98 2f       	mov	r25, r24
    27c2:	90 95       	com	r25
    27c4:	92 23       	and	r25, r18
    27c6:	90 83       	st	Z, r25
    27c8:	9c 91       	ld	r25, X
    27ca:	98 2b       	or	r25, r24
    27cc:	9c 93       	st	X, r25
    27ce:	08 95       	ret

000027d0 <_ZN15OrangutanMotors5init2Ev>:
    27d0:	83 ef       	ldi	r24, 0xF3	; 243
    27d2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    27d6:	84 bd       	out	0x24, r24	; 36
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    27de:	85 bd       	out	0x25, r24	; 37
    27e0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    27e4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    27e8:	18 bc       	out	0x28, r1	; 40
    27ea:	17 bc       	out	0x27, r1	; 39
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	86 e0       	ldi	r24, 0x06	; 6
    27f0:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN16OrangutanDigital9setOutputEhh>
    27f4:	60 e0       	ldi	r22, 0x00	; 0
    27f6:	85 e0       	ldi	r24, 0x05	; 5
    27f8:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN16OrangutanDigital9setOutputEhh>
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	8b e0       	ldi	r24, 0x0B	; 11
    2800:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN16OrangutanDigital9setOutputEhh>
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	83 e0       	ldi	r24, 0x03	; 3
    2808:	0e 94 a7 13 	call	0x274e	; 0x274e <_ZN16OrangutanDigital9setOutputEhh>
    280c:	08 95       	ret

0000280e <_ZN15OrangutanMotors4initEv>:
    280e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    2812:	81 11       	cpse	r24, r1
    2814:	05 c0       	rjmp	.+10     	; 0x2820 <_ZN15OrangutanMotors4initEv+0x12>
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    281c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <_ZN15OrangutanMotors5init2Ev>
    2820:	08 95       	ret

00002822 <_ZN15OrangutanMotors10setM1SpeedEi>:
    2822:	cf 93       	push	r28
    2824:	df 93       	push	r29
    2826:	ec 01       	movw	r28, r24
    2828:	0e 94 07 14 	call	0x280e	; 0x280e <_ZN15OrangutanMotors4initEv>
    282c:	d7 ff       	sbrs	r29, 7
    282e:	05 c0       	rjmp	.+10     	; 0x283a <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    2830:	d1 95       	neg	r29
    2832:	c1 95       	neg	r28
    2834:	d1 09       	sbc	r29, r1
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	01 c0       	rjmp	.+2      	; 0x283c <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	cf 3f       	cpi	r28, 0xFF	; 255
    283e:	d1 05       	cpc	r29, r1
    2840:	19 f0       	breq	.+6      	; 0x2848 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2842:	14 f0       	brlt	.+4      	; 0x2848 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2844:	cf ef       	ldi	r28, 0xFF	; 255
    2846:	d0 e0       	ldi	r29, 0x00	; 0
    2848:	88 23       	and	r24, r24
    284a:	19 f0       	breq	.+6      	; 0x2852 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    284c:	18 bc       	out	0x28, r1	; 40
    284e:	c7 bd       	out	0x27, r28	; 39
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    2852:	c8 bd       	out	0x28, r28	; 40
    2854:	17 bc       	out	0x27, r1	; 39
    2856:	df 91       	pop	r29
    2858:	cf 91       	pop	r28
    285a:	08 95       	ret

0000285c <_ZN15OrangutanMotors10setM2SpeedEi>:
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	ec 01       	movw	r28, r24
    2862:	0e 94 07 14 	call	0x280e	; 0x280e <_ZN15OrangutanMotors4initEv>
    2866:	d7 ff       	sbrs	r29, 7
    2868:	05 c0       	rjmp	.+10     	; 0x2874 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    286a:	d1 95       	neg	r29
    286c:	c1 95       	neg	r28
    286e:	d1 09       	sbc	r29, r1
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	01 c0       	rjmp	.+2      	; 0x2876 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	cf 3f       	cpi	r28, 0xFF	; 255
    2878:	d1 05       	cpc	r29, r1
    287a:	19 f0       	breq	.+6      	; 0x2882 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    287c:	14 f0       	brlt	.+4      	; 0x2882 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    287e:	cf ef       	ldi	r28, 0xFF	; 255
    2880:	d0 e0       	ldi	r29, 0x00	; 0
    2882:	88 23       	and	r24, r24
    2884:	29 f0       	breq	.+10     	; 0x2890 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2886:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    288a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    2890:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2894:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	08 95       	ret

0000289e <_ZN15OrangutanMotors9setSpeedsEii>:
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	eb 01       	movw	r28, r22
    28a4:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN15OrangutanMotors10setM1SpeedEi>
    28a8:	ce 01       	movw	r24, r28
    28aa:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN15OrangutanMotors10setM2SpeedEi>
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	08 95       	ret

000028b4 <set_motors>:
    28b4:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN15OrangutanMotors9setSpeedsEii>
    28b8:	08 95       	ret

000028ba <_ZN20OrangutanPushbuttons5init2Ev>:
    28ba:	84 b1       	in	r24, 0x04	; 4
    28bc:	8d 7c       	andi	r24, 0xCD	; 205
    28be:	84 b9       	out	0x04, r24	; 4
    28c0:	85 b1       	in	r24, 0x05	; 5
    28c2:	82 63       	ori	r24, 0x32	; 50
    28c4:	85 b9       	out	0x05, r24	; 5
    28c6:	85 e0       	ldi	r24, 0x05	; 5
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	6f 93       	push	r22
    28cc:	64 e0       	ldi	r22, 0x04	; 4
    28ce:	6a 95       	dec	r22
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    28d2:	6f 91       	pop	r22
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	c9 f7       	brne	.-14     	; 0x28ca <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    28d8:	08 95       	ret

000028da <_ZN20OrangutanPushbuttons4initEv>:
    28da:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    28de:	81 11       	cpse	r24, r1
    28e0:	05 c0       	rjmp	.+10     	; 0x28ec <_ZN20OrangutanPushbuttons4initEv+0x12>
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    28e8:	0e 94 5d 14 	call	0x28ba	; 0x28ba <_ZN20OrangutanPushbuttons5init2Ev>
    28ec:	08 95       	ret

000028ee <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    28ee:	cf 93       	push	r28
    28f0:	c8 2f       	mov	r28, r24
    28f2:	0e 94 6d 14 	call	0x28da	; 0x28da <_ZN20OrangutanPushbuttons4initEv>
    28f6:	83 b1       	in	r24, 0x03	; 3
    28f8:	8c 23       	and	r24, r28
    28fa:	e9 f3       	breq	.-6      	; 0x28f6 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    28fc:	8a e0       	ldi	r24, 0x0A	; 10
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <delay_ms>
    2904:	83 b1       	in	r24, 0x03	; 3
    2906:	8c 23       	and	r24, r28
    2908:	b1 f3       	breq	.-20     	; 0x28f6 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    290a:	83 b1       	in	r24, 0x03	; 3
    290c:	8c 23       	and	r24, r28
    290e:	cf 91       	pop	r28
    2910:	08 95       	ret

00002912 <wait_for_button_release>:
    2912:	0e 94 77 14 	call	0x28ee	; 0x28ee <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2916:	08 95       	ret

00002918 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2918:	a1 e0       	ldi	r26, 0x01	; 1
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e2 e9       	ldi	r30, 0x92	; 146
    291e:	f4 e1       	ldi	r31, 0x14	; 20
    2920:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__prologue_saves__+0x20>
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	0e 94 6d 14 	call	0x28da	; 0x28da <_ZN20OrangutanPushbuttons4initEv>
    292a:	93 b1       	in	r25, 0x03	; 3
    292c:	90 95       	com	r25
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	89 23       	and	r24, r25
    2932:	21 96       	adiw	r28, 0x01	; 1
    2934:	e2 e0       	ldi	r30, 0x02	; 2
    2936:	0c 94 bb 1c 	jmp	0x3976	; 0x3976 <__epilogue_restores__+0x20>

0000293a <button_is_pressed>:
    293a:	0e 94 8c 14 	call	0x2918	; 0x2918 <_ZN20OrangutanPushbuttons9isPressedEh>
    293e:	08 95       	ret

00002940 <serial_receive_buffer_full>:
    2940:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <_ZN15OrangutanSerial5portsE+0x2>
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <_ZN15OrangutanSerial5portsE+0x4>
    294a:	29 13       	cpse	r18, r25
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	08 95       	ret

00002950 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	9a e0       	ldi	r25, 0x0A	; 10
    2956:	89 9f       	mul	r24, r25
    2958:	f0 01       	movw	r30, r0
    295a:	11 24       	eor	r1, r1
    295c:	eb 55       	subi	r30, 0x5B	; 91
    295e:	fe 4f       	sbci	r31, 0xFE	; 254
    2960:	80 85       	ldd	r24, Z+8	; 0x08
    2962:	91 85       	ldd	r25, Z+9	; 0x09
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	21 f0       	breq	.+8      	; 0x2970 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2968:	52 81       	ldd	r21, Z+2	; 0x02
    296a:	44 81       	ldd	r20, Z+4	; 0x04
    296c:	54 17       	cp	r21, r20
    296e:	80 f0       	brcs	.+32     	; 0x2990 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    2970:	8a e0       	ldi	r24, 0x0A	; 10
    2972:	82 9f       	mul	r24, r18
    2974:	f0 01       	movw	r30, r0
    2976:	83 9f       	mul	r24, r19
    2978:	f0 0d       	add	r31, r0
    297a:	11 24       	eor	r1, r1
    297c:	eb 55       	subi	r30, 0x5B	; 91
    297e:	fe 4f       	sbci	r31, 0xFE	; 254
    2980:	92 81       	ldd	r25, Z+2	; 0x02
    2982:	84 81       	ldd	r24, Z+4	; 0x04
    2984:	98 13       	cpse	r25, r24
    2986:	0e c0       	rjmp	.+28     	; 0x29a4 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    2988:	85 81       	ldd	r24, Z+5	; 0x05
    298a:	81 11       	cpse	r24, r1
    298c:	0a c0       	rjmp	.+20     	; 0x29a2 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    298e:	08 95       	ret
    2990:	42 81       	ldd	r20, Z+2	; 0x02
    2992:	dc 01       	movw	r26, r24
    2994:	a4 0f       	add	r26, r20
    2996:	b1 1d       	adc	r27, r1
    2998:	6c 93       	st	X, r22
    299a:	82 81       	ldd	r24, Z+2	; 0x02
    299c:	8f 5f       	subi	r24, 0xFF	; 255
    299e:	82 83       	std	Z+2, r24	; 0x02
    29a0:	e7 cf       	rjmp	.-50     	; 0x2970 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    29a2:	12 82       	std	Z+2, r1	; 0x02
    29a4:	08 95       	ret

000029a6 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    29a6:	cf 93       	push	r28
    29a8:	df 93       	push	r29
    29aa:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    29ae:	9f 77       	andi	r25, 0x7F	; 127
    29b0:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    29b4:	c8 2f       	mov	r28, r24
    29b6:	d0 e0       	ldi	r29, 0x00	; 0
    29b8:	9a e0       	ldi	r25, 0x0A	; 10
    29ba:	89 9f       	mul	r24, r25
    29bc:	f0 01       	movw	r30, r0
    29be:	11 24       	eor	r1, r1
    29c0:	eb 55       	subi	r30, 0x5B	; 91
    29c2:	fe 4f       	sbci	r31, 0xFE	; 254
    29c4:	20 85       	ldd	r18, Z+8	; 0x08
    29c6:	31 85       	ldd	r19, Z+9	; 0x09
    29c8:	23 2b       	or	r18, r19
    29ca:	41 f0       	breq	.+16     	; 0x29dc <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    29cc:	22 81       	ldd	r18, Z+2	; 0x02
    29ce:	94 81       	ldd	r25, Z+4	; 0x04
    29d0:	29 17       	cp	r18, r25
    29d2:	20 f4       	brcc	.+8      	; 0x29dc <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    29d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    29d8:	97 fd       	sbrc	r25, 7
    29da:	11 c0       	rjmp	.+34     	; 0x29fe <_ZN15OrangutanSerial15serial_rx_checkEh+0x58>
    29dc:	8a e0       	ldi	r24, 0x0A	; 10
    29de:	8c 9f       	mul	r24, r28
    29e0:	f0 01       	movw	r30, r0
    29e2:	8d 9f       	mul	r24, r29
    29e4:	f0 0d       	add	r31, r0
    29e6:	11 24       	eor	r1, r1
    29e8:	eb 55       	subi	r30, 0x5B	; 91
    29ea:	fe 4f       	sbci	r31, 0xFE	; 254
    29ec:	80 81       	ld	r24, Z
    29ee:	81 11       	cpse	r24, r1
    29f0:	0b c0       	rjmp	.+22     	; 0x2a08 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    29f2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    29f6:	80 68       	ori	r24, 0x80	; 128
    29f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    29fc:	05 c0       	rjmp	.+10     	; 0x2a08 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    29fe:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2a02:	0e 94 a8 14 	call	0x2950	; 0x2950 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2a06:	ea cf       	rjmp	.-44     	; 0x29dc <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	08 95       	ret

00002a0e <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    2a0e:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2a12:	9f 77       	andi	r25, 0x7F	; 127
    2a14:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2a18:	9a e0       	ldi	r25, 0x0A	; 10
    2a1a:	89 9f       	mul	r24, r25
    2a1c:	f0 01       	movw	r30, r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	eb 55       	subi	r30, 0x5B	; 91
    2a22:	fe 4f       	sbci	r31, 0xFE	; 254
    2a24:	71 87       	std	Z+9, r23	; 0x09
    2a26:	60 87       	std	Z+8, r22	; 0x08
    2a28:	12 82       	std	Z+2, r1	; 0x02
    2a2a:	44 83       	std	Z+4, r20	; 0x04
    2a2c:	25 83       	std	Z+5, r18	; 0x05
    2a2e:	80 81       	ld	r24, Z
    2a30:	81 11       	cpse	r24, r1
    2a32:	05 c0       	rjmp	.+10     	; 0x2a3e <_ZN15OrangutanSerial14receive_inlineEhPchh+0x30>
    2a34:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2a38:	80 68       	ori	r24, 0x80	; 128
    2a3a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2a3e:	08 95       	ret

00002a40 <_ZN15OrangutanSerial7receiveEPch>:
    2a40:	46 2f       	mov	r20, r22
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	bc 01       	movw	r22, r24
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <_ZN15OrangutanSerial14receive_inlineEhPchh>
    2a4c:	08 95       	ret

00002a4e <serial_receive>:
    2a4e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <_ZN15OrangutanSerial7receiveEPch>
    2a52:	08 95       	ret

00002a54 <__vector_18>:
    2a54:	1f 92       	push	r1
    2a56:	0f 92       	push	r0
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	0f 92       	push	r0
    2a5c:	11 24       	eor	r1, r1
    2a5e:	2f 93       	push	r18
    2a60:	3f 93       	push	r19
    2a62:	4f 93       	push	r20
    2a64:	5f 93       	push	r21
    2a66:	6f 93       	push	r22
    2a68:	7f 93       	push	r23
    2a6a:	8f 93       	push	r24
    2a6c:	9f 93       	push	r25
    2a6e:	af 93       	push	r26
    2a70:	bf 93       	push	r27
    2a72:	ef 93       	push	r30
    2a74:	ff 93       	push	r31
    2a76:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	0e 94 a8 14 	call	0x2950	; 0x2950 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2a80:	ff 91       	pop	r31
    2a82:	ef 91       	pop	r30
    2a84:	bf 91       	pop	r27
    2a86:	af 91       	pop	r26
    2a88:	9f 91       	pop	r25
    2a8a:	8f 91       	pop	r24
    2a8c:	7f 91       	pop	r23
    2a8e:	6f 91       	pop	r22
    2a90:	5f 91       	pop	r21
    2a92:	4f 91       	pop	r20
    2a94:	3f 91       	pop	r19
    2a96:	2f 91       	pop	r18
    2a98:	0f 90       	pop	r0
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	0f 90       	pop	r0
    2a9e:	1f 90       	pop	r1
    2aa0:	18 95       	reti

00002aa2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2aa2:	9a e0       	ldi	r25, 0x0A	; 10
    2aa4:	89 9f       	mul	r24, r25
    2aa6:	f0 01       	movw	r30, r0
    2aa8:	11 24       	eor	r1, r1
    2aaa:	eb 55       	subi	r30, 0x5B	; 91
    2aac:	fe 4f       	sbci	r31, 0xFE	; 254
    2aae:	86 81       	ldd	r24, Z+6	; 0x06
    2ab0:	97 81       	ldd	r25, Z+7	; 0x07
    2ab2:	89 2b       	or	r24, r25
    2ab4:	59 f0       	breq	.+22     	; 0x2acc <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2ab6:	91 81       	ldd	r25, Z+1	; 0x01
    2ab8:	83 81       	ldd	r24, Z+3	; 0x03
    2aba:	98 17       	cp	r25, r24
    2abc:	38 f4       	brcc	.+14     	; 0x2acc <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2abe:	80 81       	ld	r24, Z
    2ac0:	81 11       	cpse	r24, r1
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2ac4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ac8:	80 62       	ori	r24, 0x20	; 32
    2aca:	03 c0       	rjmp	.+6      	; 0x2ad2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    2acc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ad0:	8f 7d       	andi	r24, 0xDF	; 223
    2ad2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ad6:	08 95       	ret

00002ad8 <_ZN15OrangutanSerial15initUART_inlineEh>:
    2ad8:	9a e0       	ldi	r25, 0x0A	; 10
    2ada:	89 9f       	mul	r24, r25
    2adc:	f0 01       	movw	r30, r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	eb 55       	subi	r30, 0x5B	; 91
    2ae2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae4:	90 81       	ld	r25, Z
    2ae6:	91 11       	cpse	r25, r1
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2aea:	98 e9       	ldi	r25, 0x98	; 152
    2aec:	01 c0       	rjmp	.+2      	; 0x2af0 <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    2aee:	98 e1       	ldi	r25, 0x18	; 24
    2af0:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2af4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2af8:	78 94       	sei
    2afa:	08 95       	ret

00002afc <serial_set_baud_rate>:
    2afc:	cf 92       	push	r12
    2afe:	df 92       	push	r13
    2b00:	ef 92       	push	r14
    2b02:	ff 92       	push	r15
    2b04:	6b 01       	movw	r12, r22
    2b06:	7c 01       	movw	r14, r24
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_ZN15OrangutanSerial15initUART_inlineEh>
    2b0e:	a8 ef       	ldi	r26, 0xF8	; 248
    2b10:	bf ef       	ldi	r27, 0xFF	; 255
    2b12:	a7 01       	movw	r20, r14
    2b14:	96 01       	movw	r18, r12
    2b16:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__mulohisi3>
    2b1a:	73 5d       	subi	r23, 0xD3	; 211
    2b1c:	8e 4c       	sbci	r24, 0xCE	; 206
    2b1e:	9e 4f       	sbci	r25, 0xFE	; 254
    2b20:	e4 e0       	ldi	r30, 0x04	; 4
    2b22:	22 0f       	add	r18, r18
    2b24:	33 1f       	adc	r19, r19
    2b26:	44 1f       	adc	r20, r20
    2b28:	55 1f       	adc	r21, r21
    2b2a:	ea 95       	dec	r30
    2b2c:	d1 f7       	brne	.-12     	; 0x2b22 <serial_set_baud_rate+0x26>
    2b2e:	0e 94 26 1c 	call	0x384c	; 0x384c <__udivmodsi4>
    2b32:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2b36:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    2b3a:	ff 90       	pop	r15
    2b3c:	ef 90       	pop	r14
    2b3e:	df 90       	pop	r13
    2b40:	cf 90       	pop	r12
    2b42:	08 95       	ret

00002b44 <_ZN15OrangutanSerial4sendEPch>:
    2b44:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x7>
    2b48:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_ZN15OrangutanSerial5portsE+0x6>
    2b4c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    2b50:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2b5a:	08 95       	ret

00002b5c <serial_send>:
    2b5c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN15OrangutanSerial4sendEPch>
    2b60:	08 95       	ret

00002b62 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    2b62:	9a e0       	ldi	r25, 0x0A	; 10
    2b64:	89 9f       	mul	r24, r25
    2b66:	f0 01       	movw	r30, r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	eb 55       	subi	r30, 0x5B	; 91
    2b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2b6e:	26 81       	ldd	r18, Z+6	; 0x06
    2b70:	37 81       	ldd	r19, Z+7	; 0x07
    2b72:	21 15       	cp	r18, r1
    2b74:	31 05       	cpc	r19, r1
    2b76:	41 f0       	breq	.+16     	; 0x2b88 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2b78:	41 81       	ldd	r20, Z+1	; 0x01
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	49 17       	cp	r20, r25
    2b7e:	20 f4       	brcc	.+8      	; 0x2b88 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2b80:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2b84:	95 fd       	sbrc	r25, 5
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    2b88:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2b8c:	08 95       	ret
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	d9 01       	movw	r26, r18
    2b92:	a9 0f       	add	r26, r25
    2b94:	b1 1d       	adc	r27, r1
    2b96:	9c 91       	ld	r25, X
    2b98:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2b9c:	91 81       	ldd	r25, Z+1	; 0x01
    2b9e:	9f 5f       	subi	r25, 0xFF	; 255
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	f2 cf       	rjmp	.-28     	; 0x2b88 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

00002ba4 <_ZN15OrangutanSerial5checkEv>:
    2ba4:	e1 ec       	ldi	r30, 0xC1	; 193
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	8f 7d       	andi	r24, 0xDF	; 223
    2bac:	80 83       	st	Z, r24
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <_ZN15OrangutanSerial15serial_rx_checkEh>
    2bba:	08 95       	ret

00002bbc <_ZN15OrangutanSerial12sendBlockingEPch>:
    2bbc:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x7>
    2bc0:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_ZN15OrangutanSerial5portsE+0x6>
    2bc4:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    2bc8:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2bd2:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    2bd6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    2bda:	98 17       	cp	r25, r24
    2bdc:	19 f0       	breq	.+6      	; 0x2be4 <_ZN15OrangutanSerial12sendBlockingEPch+0x28>
    2bde:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <_ZN15OrangutanSerial5checkEv>
    2be2:	f7 cf       	rjmp	.-18     	; 0x2bd2 <_ZN15OrangutanSerial12sendBlockingEPch+0x16>
    2be4:	08 95       	ret

00002be6 <serial_send_blocking>:
    2be6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <_ZN15OrangutanSerial12sendBlockingEPch>
    2bea:	08 95       	ret

00002bec <__vector_19>:
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	2f 93       	push	r18
    2bf8:	3f 93       	push	r19
    2bfa:	4f 93       	push	r20
    2bfc:	5f 93       	push	r21
    2bfe:	6f 93       	push	r22
    2c00:	7f 93       	push	r23
    2c02:	8f 93       	push	r24
    2c04:	9f 93       	push	r25
    2c06:	af 93       	push	r26
    2c08:	bf 93       	push	r27
    2c0a:	ef 93       	push	r30
    2c0c:	ff 93       	push	r31
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2c14:	ff 91       	pop	r31
    2c16:	ef 91       	pop	r30
    2c18:	bf 91       	pop	r27
    2c1a:	af 91       	pop	r26
    2c1c:	9f 91       	pop	r25
    2c1e:	8f 91       	pop	r24
    2c20:	7f 91       	pop	r23
    2c22:	6f 91       	pop	r22
    2c24:	5f 91       	pop	r21
    2c26:	4f 91       	pop	r20
    2c28:	3f 91       	pop	r19
    2c2a:	2f 91       	pop	r18
    2c2c:	0f 90       	pop	r0
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	0f 90       	pop	r0
    2c32:	1f 90       	pop	r1
    2c34:	18 95       	reti

00002c36 <__vector_9>:
    2c36:	2f 92       	push	r2
    2c38:	8f 93       	push	r24
    2c3a:	9f 93       	push	r25
    2c3c:	2f b6       	in	r2, 0x3f	; 63
    2c3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <tickCount+0x1>
    2c42:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <tickCount+0x2>
    2c46:	01 96       	adiw	r24, 0x01	; 1
    2c48:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <tickCount+0x1>
    2c4c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <tickCount+0x2>
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <tickCount+0x3>
    2c56:	89 1f       	adc	r24, r25
    2c58:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <tickCount+0x3>
    2c5c:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <us_over_10+0x1>
    2c60:	9c 5f       	subi	r25, 0xFC	; 252
    2c62:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <us_over_10+0x1>
    2c66:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <us_over_10>
    2c6a:	80 51       	subi	r24, 0x10	; 16
    2c6c:	97 42       	sbci	r25, 0x27	; 39
    2c6e:	c0 f0       	brcs	.+48     	; 0x2ca0 <end>
    2c70:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <us_over_10+0x1>
    2c74:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <us_over_10>
    2c78:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <msCounter>
    2c7c:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <msCounter+0x1>
    2c80:	01 96       	adiw	r24, 0x01	; 1
    2c82:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <msCounter>
    2c86:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <msCounter+0x1>
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <msCounter+0x2>
    2c90:	89 1f       	adc	r24, r25
    2c92:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <msCounter+0x2>
    2c96:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <msCounter+0x3>
    2c9a:	89 1f       	adc	r24, r25
    2c9c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <msCounter+0x3>

00002ca0 <end>:
    2ca0:	2f be       	out	0x3f, r2	; 63
    2ca2:	9f 91       	pop	r25
    2ca4:	8f 91       	pop	r24
    2ca6:	2f 90       	pop	r2
    2ca8:	18 95       	reti

00002caa <_ZN13OrangutanTime17delayMillisecondsEj>:
    2caa:	28 ee       	ldi	r18, 0xE8	; 232
    2cac:	33 e0       	ldi	r19, 0x03	; 3
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	48 f0       	brcs	.+18     	; 0x2cc4 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2cb2:	f9 01       	movw	r30, r18
    2cb4:	6f 93       	push	r22
    2cb6:	64 e0       	ldi	r22, 0x04	; 4
    2cb8:	6a 95       	dec	r22
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2cbc:	6f 91       	pop	r22
    2cbe:	31 97       	sbiw	r30, 0x01	; 1
    2cc0:	c9 f7       	brne	.-14     	; 0x2cb4 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2cc2:	f5 cf       	rjmp	.-22     	; 0x2cae <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2cc4:	08 95       	ret

00002cc6 <delay_ms>:
    2cc6:	0e 94 55 16 	call	0x2caa	; 0x2caa <_ZN13OrangutanTime17delayMillisecondsEj>
    2cca:	08 95       	ret

00002ccc <_ZN13OrangutanTime5init2Ev>:
    2ccc:	e0 e7       	ldi	r30, 0x70	; 112
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8e 7f       	andi	r24, 0xFE	; 254
    2cd4:	80 83       	st	Z, r24
    2cd6:	a0 eb       	ldi	r26, 0xB0	; 176
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	8c 91       	ld	r24, X
    2cdc:	83 60       	ori	r24, 0x03	; 3
    2cde:	8c 93       	st	X, r24
    2ce0:	a1 eb       	ldi	r26, 0xB1	; 177
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	8c 91       	ld	r24, X
    2ce6:	80 7f       	andi	r24, 0xF0	; 240
    2ce8:	8c 93       	st	X, r24
    2cea:	8c 91       	ld	r24, X
    2cec:	82 60       	ori	r24, 0x02	; 2
    2cee:	8c 93       	st	X, r24
    2cf0:	b8 9a       	sbi	0x17, 0	; 23
    2cf2:	80 81       	ld	r24, Z
    2cf4:	81 60       	ori	r24, 0x01	; 1
    2cf6:	80 83       	st	Z, r24
    2cf8:	78 94       	sei
    2cfa:	08 95       	ret

00002cfc <_ZN13OrangutanTime4initEv>:
    2cfc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2d00:	81 11       	cpse	r24, r1
    2d02:	05 c0       	rjmp	.+10     	; 0x2d0e <_ZN13OrangutanTime4initEv+0x12>
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2d0a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <_ZN13OrangutanTime5init2Ev>
    2d0e:	08 95       	ret

00002d10 <_ZN13OrangutanTime5resetEv>:
    2d10:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <_ZN13OrangutanTime4initEv>
    2d14:	e0 e7       	ldi	r30, 0x70	; 112
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	80 81       	ld	r24, Z
    2d1a:	8e 7f       	andi	r24, 0xFE	; 254
    2d1c:	80 83       	st	Z, r24
    2d1e:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <msCounter>
    2d22:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <msCounter+0x1>
    2d26:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <msCounter+0x2>
    2d2a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <msCounter+0x3>
    2d2e:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <us_over_10+0x1>
    2d32:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <us_over_10>
    2d36:	80 81       	ld	r24, Z
    2d38:	81 60       	ori	r24, 0x01	; 1
    2d3a:	80 83       	st	Z, r24
    2d3c:	08 95       	ret

00002d3e <calibrate_line_sensors>:
    2d3e:	68 2f       	mov	r22, r24
    2d40:	89 eb       	ldi	r24, 0xB9	; 185
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	0e 94 8e 1a 	call	0x351c	; 0x351c <_ZN16PololuQTRSensors9calibrateEh>
    2d48:	08 95       	ret

00002d4a <read_line_sensors_calibrated>:
    2d4a:	46 2f       	mov	r20, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	89 eb       	ldi	r24, 0xB9	; 185
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2d56:	08 95       	ret

00002d58 <read_line>:
    2d58:	46 2f       	mov	r20, r22
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	89 eb       	ldi	r24, 0xB9	; 185
    2d60:	91 e0       	ldi	r25, 0x01	; 1
    2d62:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN16PololuQTRSensors8readLineEPjhh>
    2d66:	08 95       	ret

00002d68 <_ZN9Pololu3pi4initEjh>:
    2d68:	0f 93       	push	r16
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <_ZN9Pololu3pi4initEjh+0x8>
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <_ZN9Pololu3pi4initEjh+0xa>
    2d72:	1f 92       	push	r1
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	9c 01       	movw	r18, r24
    2d7a:	85 e0       	ldi	r24, 0x05	; 5
    2d7c:	e0 e5       	ldi	r30, 0x50	; 80
    2d7e:	f1 e0       	ldi	r31, 0x01	; 1
    2d80:	de 01       	movw	r26, r28
    2d82:	11 96       	adiw	r26, 0x01	; 1
    2d84:	01 90       	ld	r0, Z+
    2d86:	0d 92       	st	X+, r0
    2d88:	8a 95       	dec	r24
    2d8a:	e1 f7       	brne	.-8      	; 0x2d84 <_ZN9Pololu3pi4initEjh+0x1c>
    2d8c:	66 23       	and	r22, r22
    2d8e:	11 f0       	breq	.+4      	; 0x2d94 <_ZN9Pololu3pi4initEjh+0x2c>
    2d90:	0f ef       	ldi	r16, 0xFF	; 255
    2d92:	01 c0       	rjmp	.+2      	; 0x2d96 <_ZN9Pololu3pi4initEjh+0x2e>
    2d94:	03 e1       	ldi	r16, 0x13	; 19
    2d96:	45 e0       	ldi	r20, 0x05	; 5
    2d98:	be 01       	movw	r22, r28
    2d9a:	6f 5f       	subi	r22, 0xFF	; 255
    2d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9e:	89 eb       	ldi	r24, 0xB9	; 185
    2da0:	91 e0       	ldi	r25, 0x01	; 1
    2da2:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2da6:	89 eb       	ldi	r24, 0xB9	; 185
    2da8:	91 e0       	ldi	r25, 0x01	; 1
    2daa:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN16PololuQTRSensors11emittersOffEv>
    2dae:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN13OrangutanTime5resetEv>
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	0f 91       	pop	r16
    2dc2:	08 95       	ret

00002dc4 <pololu_3pi_init>:
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN9Pololu3pi4initEjh>
    2dca:	08 95       	ret

00002dcc <_GLOBAL__sub_D_pololu_3pi_init>:
    2dcc:	89 eb       	ldi	r24, 0xB9	; 185
    2dce:	91 e0       	ldi	r25, 0x01	; 1
    2dd0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <_ZN16PololuQTRSensorsD1Ev>
    2dd4:	08 95       	ret

00002dd6 <delay_us>:
    2dd6:	6f 93       	push	r22
    2dd8:	64 e0       	ldi	r22, 0x04	; 4
    2dda:	6a 95       	dec	r22
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <delay_us+0x4>
    2dde:	6f 91       	pop	r22
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	c9 f7       	brne	.-14     	; 0x2dd6 <delay_us>
    2de4:	08 95       	ret

00002de6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2de6:	fc 01       	movw	r30, r24
    2de8:	11 82       	std	Z+1, r1	; 0x01
    2dea:	10 82       	st	Z, r1
    2dec:	13 82       	std	Z+3, r1	; 0x03
    2dee:	12 82       	std	Z+2, r1	; 0x02
    2df0:	15 82       	std	Z+5, r1	; 0x05
    2df2:	14 82       	std	Z+4, r1	; 0x04
    2df4:	16 82       	std	Z+6, r1	; 0x06
    2df6:	68 30       	cpi	r22, 0x08	; 8
    2df8:	68 f4       	brcc	.+26     	; 0x2e14 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2dfa:	89 e2       	ldi	r24, 0x29	; 41
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	91 83       	std	Z+1, r25	; 0x01
    2e00:	80 83       	st	Z, r24
    2e02:	8b e2       	ldi	r24, 0x2B	; 43
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	93 83       	std	Z+3, r25	; 0x03
    2e08:	82 83       	std	Z+2, r24	; 0x02
    2e0a:	8a e2       	ldi	r24, 0x2A	; 42
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	95 83       	std	Z+5, r25	; 0x05
    2e10:	84 83       	std	Z+4, r24	; 0x04
    2e12:	1f c0       	rjmp	.+62     	; 0x2e52 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2e14:	6e 30       	cpi	r22, 0x0E	; 14
    2e16:	70 f4       	brcc	.+28     	; 0x2e34 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2e18:	83 e2       	ldi	r24, 0x23	; 35
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	80 83       	st	Z, r24
    2e20:	85 e2       	ldi	r24, 0x25	; 37
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	93 83       	std	Z+3, r25	; 0x03
    2e26:	82 83       	std	Z+2, r24	; 0x02
    2e28:	84 e2       	ldi	r24, 0x24	; 36
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	95 83       	std	Z+5, r25	; 0x05
    2e2e:	84 83       	std	Z+4, r24	; 0x04
    2e30:	68 50       	subi	r22, 0x08	; 8
    2e32:	0f c0       	rjmp	.+30     	; 0x2e52 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2e34:	65 31       	cpi	r22, 0x15	; 21
    2e36:	98 f4       	brcc	.+38     	; 0x2e5e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2e38:	86 e2       	ldi	r24, 0x26	; 38
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	80 83       	st	Z, r24
    2e40:	88 e2       	ldi	r24, 0x28	; 40
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	93 83       	std	Z+3, r25	; 0x03
    2e46:	82 83       	std	Z+2, r24	; 0x02
    2e48:	87 e2       	ldi	r24, 0x27	; 39
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	95 83       	std	Z+5, r25	; 0x05
    2e4e:	84 83       	std	Z+4, r24	; 0x04
    2e50:	6e 50       	subi	r22, 0x0E	; 14
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2e56:	88 0f       	add	r24, r24
    2e58:	6a 95       	dec	r22
    2e5a:	ea f7       	brpl	.-6      	; 0x2e56 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2e5c:	86 83       	std	Z+6, r24	; 0x06
    2e5e:	08 95       	ret

00002e60 <_ZN16PololuQTRSensors4initEhhh>:
    2e60:	a7 e0       	ldi	r26, 0x07	; 7
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e6 e3       	ldi	r30, 0x36	; 54
    2e66:	f7 e1       	ldi	r31, 0x17	; 23
    2e68:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__+0x1c>
    2e6c:	8c 01       	movw	r16, r24
    2e6e:	fc 01       	movw	r30, r24
    2e70:	11 82       	std	Z+1, r1	; 0x01
    2e72:	10 82       	st	Z, r1
    2e74:	13 82       	std	Z+3, r1	; 0x03
    2e76:	12 82       	std	Z+2, r1	; 0x02
    2e78:	15 82       	std	Z+5, r1	; 0x05
    2e7a:	14 82       	std	Z+4, r1	; 0x04
    2e7c:	17 82       	std	Z+7, r1	; 0x07
    2e7e:	16 82       	std	Z+6, r1	; 0x06
    2e80:	61 31       	cpi	r22, 0x11	; 17
    2e82:	18 f0       	brcs	.+6      	; 0x2e8a <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2e84:	80 e1       	ldi	r24, 0x10	; 16
    2e86:	80 87       	std	Z+8, r24	; 0x08
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	60 87       	std	Z+8, r22	; 0x08
    2e8e:	f8 01       	movw	r30, r16
    2e90:	20 8b       	std	Z+16, r18	; 0x10
    2e92:	64 2f       	mov	r22, r20
    2e94:	ce 01       	movw	r24, r28
    2e96:	01 96       	adiw	r24, 0x01	; 1
    2e98:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2e9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	81 87       	std	Z+9, r24	; 0x09
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea6:	93 87       	std	Z+11, r25	; 0x0b
    2ea8:	82 87       	std	Z+10, r24	; 0x0a
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	95 87       	std	Z+13, r25	; 0x0d
    2eb0:	84 87       	std	Z+12, r24	; 0x0c
    2eb2:	27 96       	adiw	r28, 0x07	; 7
    2eb4:	e4 e0       	ldi	r30, 0x04	; 4
    2eb6:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__+0x1c>

00002eba <_ZN16PololuQTRSensors11emittersOffEv>:
    2eba:	fc 01       	movw	r30, r24
    2ebc:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ebe:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ec0:	10 97       	sbiw	r26, 0x00	; 0
    2ec2:	79 f0       	breq	.+30     	; 0x2ee2 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2ec4:	8c 91       	ld	r24, X
    2ec6:	91 85       	ldd	r25, Z+9	; 0x09
    2ec8:	89 2b       	or	r24, r25
    2eca:	8c 93       	st	X, r24
    2ecc:	a2 85       	ldd	r26, Z+10	; 0x0a
    2ece:	b3 85       	ldd	r27, Z+11	; 0x0b
    2ed0:	9c 91       	ld	r25, X
    2ed2:	81 85       	ldd	r24, Z+9	; 0x09
    2ed4:	80 95       	com	r24
    2ed6:	89 23       	and	r24, r25
    2ed8:	8c 93       	st	X, r24
    2eda:	88 ec       	ldi	r24, 0xC8	; 200
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delay_us>
    2ee2:	08 95       	ret

00002ee4 <_ZN16PololuQTRSensors10emittersOnEv>:
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ee8:	b5 85       	ldd	r27, Z+13	; 0x0d
    2eea:	10 97       	sbiw	r26, 0x00	; 0
    2eec:	71 f0       	breq	.+28     	; 0x2f0a <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2eee:	8c 91       	ld	r24, X
    2ef0:	91 85       	ldd	r25, Z+9	; 0x09
    2ef2:	89 2b       	or	r24, r25
    2ef4:	8c 93       	st	X, r24
    2ef6:	a2 85       	ldd	r26, Z+10	; 0x0a
    2ef8:	b3 85       	ldd	r27, Z+11	; 0x0b
    2efa:	8c 91       	ld	r24, X
    2efc:	91 85       	ldd	r25, Z+9	; 0x09
    2efe:	89 2b       	or	r24, r25
    2f00:	8c 93       	st	X, r24
    2f02:	88 ec       	ldi	r24, 0xC8	; 200
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delay_us>
    2f0a:	08 95       	ret

00002f0c <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2f0c:	a7 e0       	ldi	r26, 0x07	; 7
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ec e8       	ldi	r30, 0x8C	; 140
    2f12:	f7 e1       	ldi	r31, 0x17	; 23
    2f14:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__prologue_saves__+0x6>
    2f18:	7c 01       	movw	r14, r24
    2f1a:	4b 01       	movw	r8, r22
    2f1c:	64 2f       	mov	r22, r20
    2f1e:	39 01       	movw	r6, r18
    2f20:	40 2f       	mov	r20, r16
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	0e 94 30 17 	call	0x2e60	; 0x2e60 <_ZN16PololuQTRSensors4initEhhh>
    2f28:	87 01       	movw	r16, r14
    2f2a:	0f 5b       	subi	r16, 0xBF	; 191
    2f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2e:	f8 01       	movw	r30, r16
    2f30:	10 82       	st	Z, r1
    2f32:	67 01       	movw	r12, r14
    2f34:	f2 e4       	ldi	r31, 0x42	; 66
    2f36:	cf 0e       	add	r12, r31
    2f38:	d1 1c       	adc	r13, r1
    2f3a:	f6 01       	movw	r30, r12
    2f3c:	10 82       	st	Z, r1
    2f3e:	57 01       	movw	r10, r14
    2f40:	f3 e4       	ldi	r31, 0x43	; 67
    2f42:	af 0e       	add	r10, r31
    2f44:	b1 1c       	adc	r11, r1
    2f46:	f5 01       	movw	r30, r10
    2f48:	10 82       	st	Z, r1
    2f4a:	f7 01       	movw	r30, r14
    2f4c:	77 86       	std	Z+15, r7	; 0x0f
    2f4e:	66 86       	std	Z+14, r6	; 0x0e
    2f50:	51 2c       	mov	r5, r1
    2f52:	f7 01       	movw	r30, r14
    2f54:	80 85       	ldd	r24, Z+8	; 0x08
    2f56:	58 16       	cp	r5, r24
    2f58:	50 f5       	brcc	.+84     	; 0x2fae <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2f5a:	65 2c       	mov	r6, r5
    2f5c:	71 2c       	mov	r7, r1
    2f5e:	f4 01       	movw	r30, r8
    2f60:	e6 0d       	add	r30, r6
    2f62:	f7 1d       	adc	r31, r7
    2f64:	60 81       	ld	r22, Z
    2f66:	ce 01       	movw	r24, r28
    2f68:	01 96       	adiw	r24, 0x01	; 1
    2f6a:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2f6e:	2f 81       	ldd	r18, Y+7	; 0x07
    2f70:	f7 01       	movw	r30, r14
    2f72:	e6 0d       	add	r30, r6
    2f74:	f7 1d       	adc	r31, r7
    2f76:	21 8b       	std	Z+17, r18	; 0x11
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	f3 01       	movw	r30, r6
    2f7e:	ee 0f       	add	r30, r30
    2f80:	ff 1f       	adc	r31, r31
    2f82:	ee 0d       	add	r30, r14
    2f84:	ff 1d       	adc	r31, r15
    2f86:	92 a3       	std	Z+34, r25	; 0x22
    2f88:	81 a3       	std	Z+33, r24	; 0x21
    2f8a:	83 32       	cpi	r24, 0x23	; 35
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	11 f4       	brne	.+4      	; 0x2f94 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2f90:	f8 01       	movw	r30, r16
    2f92:	08 c0       	rjmp	.+16     	; 0x2fa4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2f94:	86 32       	cpi	r24, 0x26	; 38
    2f96:	91 05       	cpc	r25, r1
    2f98:	11 f4       	brne	.+4      	; 0x2f9e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2f9a:	f6 01       	movw	r30, r12
    2f9c:	03 c0       	rjmp	.+6      	; 0x2fa4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2f9e:	89 97       	sbiw	r24, 0x29	; 41
    2fa0:	21 f4       	brne	.+8      	; 0x2faa <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2fa2:	f5 01       	movw	r30, r10
    2fa4:	80 81       	ld	r24, Z
    2fa6:	82 2b       	or	r24, r18
    2fa8:	80 83       	st	Z, r24
    2faa:	53 94       	inc	r5
    2fac:	d2 cf       	rjmp	.-92     	; 0x2f52 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2fae:	27 96       	adiw	r28, 0x07	; 7
    2fb0:	ef e0       	ldi	r30, 0x0F	; 15
    2fb2:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__epilogue_restores__+0x6>

00002fb6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2fb6:	a0 e0       	ldi	r26, 0x00	; 0
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e1 ee       	ldi	r30, 0xE1	; 225
    2fbc:	f7 e1       	ldi	r31, 0x17	; 23
    2fbe:	0c 94 94 1c 	jmp	0x3928	; 0x3928 <__prologue_saves__+0xa>
    2fc2:	ec 01       	movw	r28, r24
    2fc4:	5b 01       	movw	r10, r22
    2fc6:	6c 01       	movw	r12, r24
    2fc8:	81 e4       	ldi	r24, 0x41	; 65
    2fca:	c8 0e       	add	r12, r24
    2fcc:	d1 1c       	adc	r13, r1
    2fce:	f6 01       	movw	r30, r12
    2fd0:	80 80       	ld	r8, Z
    2fd2:	7e 01       	movw	r14, r28
    2fd4:	f2 e4       	ldi	r31, 0x42	; 66
    2fd6:	ef 0e       	add	r14, r31
    2fd8:	f1 1c       	adc	r15, r1
    2fda:	f7 01       	movw	r30, r14
    2fdc:	70 80       	ld	r7, Z
    2fde:	8e 01       	movw	r16, r28
    2fe0:	0d 5b       	subi	r16, 0xBD	; 189
    2fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe4:	f8 01       	movw	r30, r16
    2fe6:	90 80       	ld	r9, Z
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	98 85       	ldd	r25, Y+8	; 0x08
    2fec:	89 17       	cp	r24, r25
    2fee:	48 f4       	brcc	.+18     	; 0x3002 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2ff0:	f5 01       	movw	r30, r10
    2ff2:	e8 0f       	add	r30, r24
    2ff4:	f1 1d       	adc	r31, r1
    2ff6:	e8 0f       	add	r30, r24
    2ff8:	f1 1d       	adc	r31, r1
    2ffa:	11 82       	std	Z+1, r1	; 0x01
    2ffc:	10 82       	st	Z, r1
    2ffe:	8f 5f       	subi	r24, 0xFF	; 255
    3000:	f4 cf       	rjmp	.-24     	; 0x2fea <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    3002:	84 b1       	in	r24, 0x04	; 4
    3004:	f6 01       	movw	r30, r12
    3006:	90 81       	ld	r25, Z
    3008:	89 2b       	or	r24, r25
    300a:	84 b9       	out	0x04, r24	; 4
    300c:	87 b1       	in	r24, 0x07	; 7
    300e:	f7 01       	movw	r30, r14
    3010:	90 81       	ld	r25, Z
    3012:	89 2b       	or	r24, r25
    3014:	87 b9       	out	0x07, r24	; 7
    3016:	8a b1       	in	r24, 0x0a	; 10
    3018:	f8 01       	movw	r30, r16
    301a:	90 81       	ld	r25, Z
    301c:	89 2b       	or	r24, r25
    301e:	8a b9       	out	0x0a, r24	; 10
    3020:	85 b1       	in	r24, 0x05	; 5
    3022:	f6 01       	movw	r30, r12
    3024:	90 81       	ld	r25, Z
    3026:	89 2b       	or	r24, r25
    3028:	85 b9       	out	0x05, r24	; 5
    302a:	88 b1       	in	r24, 0x08	; 8
    302c:	f7 01       	movw	r30, r14
    302e:	90 81       	ld	r25, Z
    3030:	89 2b       	or	r24, r25
    3032:	88 b9       	out	0x08, r24	; 8
    3034:	8b b1       	in	r24, 0x0b	; 11
    3036:	f8 01       	movw	r30, r16
    3038:	90 81       	ld	r25, Z
    303a:	89 2b       	or	r24, r25
    303c:	8b b9       	out	0x0b, r24	; 11
    303e:	8a e0       	ldi	r24, 0x0A	; 10
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <delay_us>
    3046:	94 b1       	in	r25, 0x04	; 4
    3048:	f6 01       	movw	r30, r12
    304a:	80 81       	ld	r24, Z
    304c:	80 95       	com	r24
    304e:	89 23       	and	r24, r25
    3050:	84 b9       	out	0x04, r24	; 4
    3052:	97 b1       	in	r25, 0x07	; 7
    3054:	f7 01       	movw	r30, r14
    3056:	80 81       	ld	r24, Z
    3058:	80 95       	com	r24
    305a:	89 23       	and	r24, r25
    305c:	87 b9       	out	0x07, r24	; 7
    305e:	9a b1       	in	r25, 0x0a	; 10
    3060:	f8 01       	movw	r30, r16
    3062:	80 81       	ld	r24, Z
    3064:	80 95       	com	r24
    3066:	89 23       	and	r24, r25
    3068:	8a b9       	out	0x0a, r24	; 10
    306a:	95 b1       	in	r25, 0x05	; 5
    306c:	f6 01       	movw	r30, r12
    306e:	80 81       	ld	r24, Z
    3070:	80 95       	com	r24
    3072:	89 23       	and	r24, r25
    3074:	85 b9       	out	0x05, r24	; 5
    3076:	98 b1       	in	r25, 0x08	; 8
    3078:	f7 01       	movw	r30, r14
    307a:	80 81       	ld	r24, Z
    307c:	80 95       	com	r24
    307e:	89 23       	and	r24, r25
    3080:	88 b9       	out	0x08, r24	; 8
    3082:	9b b1       	in	r25, 0x0b	; 11
    3084:	f8 01       	movw	r30, r16
    3086:	80 81       	ld	r24, Z
    3088:	80 95       	com	r24
    308a:	89 23       	and	r24, r25
    308c:	8b b9       	out	0x0b, r24	; 11
    308e:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3092:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3096:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    309a:	83 60       	ori	r24, 0x03	; 3
    309c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    30a6:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	2e 85       	ldd	r18, Y+14	; 0x0e
    30b0:	3f 85       	ldd	r19, Y+15	; 0x0f
    30b2:	82 17       	cp	r24, r18
    30b4:	93 07       	cpc	r25, r19
    30b6:	20 f5       	brcc	.+72     	; 0x3100 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    30b8:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    30bc:	2c 2d       	mov	r18, r12
    30be:	24 1b       	sub	r18, r20
    30c0:	82 0f       	add	r24, r18
    30c2:	91 1d       	adc	r25, r1
    30c4:	03 b1       	in	r16, 0x03	; 3
    30c6:	08 11       	cpse	r16, r8
    30c8:	32 c0       	rjmp	.+100    	; 0x312e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    30ca:	f6 b0       	in	r15, 0x06	; 6
    30cc:	f7 10       	cpse	r15, r7
    30ce:	2f c0       	rjmp	.+94     	; 0x312e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    30d0:	29 b1       	in	r18, 0x09	; 9
    30d2:	29 11       	cpse	r18, r9
    30d4:	2c c0       	rjmp	.+88     	; 0x312e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    30d6:	10 c0       	rjmp	.+32     	; 0x30f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    30d8:	21 2f       	mov	r18, r17
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	a9 01       	movw	r20, r18
    30de:	44 0f       	add	r20, r20
    30e0:	55 1f       	adc	r21, r21
    30e2:	f5 01       	movw	r30, r10
    30e4:	e4 0f       	add	r30, r20
    30e6:	f5 1f       	adc	r31, r21
    30e8:	60 81       	ld	r22, Z
    30ea:	71 81       	ldd	r23, Z+1	; 0x01
    30ec:	67 2b       	or	r22, r23
    30ee:	21 f1       	breq	.+72     	; 0x3138 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    30f0:	1f 5f       	subi	r17, 0xFF	; 255
    30f2:	28 85       	ldd	r18, Y+8	; 0x08
    30f4:	12 17       	cp	r17, r18
    30f6:	80 f3       	brcs	.-32     	; 0x30d8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    30f8:	7f 2c       	mov	r7, r15
    30fa:	80 2e       	mov	r8, r16
    30fc:	4c 2d       	mov	r20, r12
    30fe:	d7 cf       	rjmp	.-82     	; 0x30ae <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    3100:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3104:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	88 85       	ldd	r24, Y+8	; 0x08
    310c:	28 17       	cp	r18, r24
    310e:	30 f5       	brcc	.+76     	; 0x315c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    3110:	f5 01       	movw	r30, r10
    3112:	e2 0f       	add	r30, r18
    3114:	f1 1d       	adc	r31, r1
    3116:	e2 0f       	add	r30, r18
    3118:	f1 1d       	adc	r31, r1
    311a:	80 81       	ld	r24, Z
    311c:	91 81       	ldd	r25, Z+1	; 0x01
    311e:	89 2b       	or	r24, r25
    3120:	21 f4       	brne	.+8      	; 0x312a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    3122:	8e 85       	ldd	r24, Y+14	; 0x0e
    3124:	9f 85       	ldd	r25, Y+15	; 0x0f
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	80 83       	st	Z, r24
    312a:	2f 5f       	subi	r18, 0xFF	; 255
    312c:	ee cf       	rjmp	.-36     	; 0x310a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    312e:	03 b1       	in	r16, 0x03	; 3
    3130:	f6 b0       	in	r15, 0x06	; 6
    3132:	99 b0       	in	r9, 0x09	; 9
    3134:	10 e0       	ldi	r17, 0x00	; 0
    3136:	dd cf       	rjmp	.-70     	; 0x30f2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    3138:	de 01       	movw	r26, r28
    313a:	a4 0f       	add	r26, r20
    313c:	b5 1f       	adc	r27, r21
    313e:	91 96       	adiw	r26, 0x21	; 33
    3140:	0d 90       	ld	r0, X+
    3142:	bc 91       	ld	r27, X
    3144:	a0 2d       	mov	r26, r0
    3146:	4c 91       	ld	r20, X
    3148:	de 01       	movw	r26, r28
    314a:	a2 0f       	add	r26, r18
    314c:	b3 1f       	adc	r27, r19
    314e:	51 96       	adiw	r26, 0x11	; 17
    3150:	2c 91       	ld	r18, X
    3152:	42 23       	and	r20, r18
    3154:	69 f6       	brne	.-102    	; 0x30f0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    3156:	91 83       	std	Z+1, r25	; 0x01
    3158:	80 83       	st	Z, r24
    315a:	ca cf       	rjmp	.-108    	; 0x30f0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	ed e0       	ldi	r30, 0x0D	; 13
    3162:	0c 94 b0 1c 	jmp	0x3960	; 0x3960 <__epilogue_restores__+0xa>

00003166 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    3166:	ef 92       	push	r14
    3168:	ff 92       	push	r15
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	fc 01       	movw	r30, r24
    3174:	9b 01       	movw	r18, r22
    3176:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    317a:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    317e:	47 b1       	in	r20, 0x07	; 7
    3180:	18 b1       	in	r17, 0x08	; 8
    3182:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3186:	86 fd       	sbrc	r24, 6
    3188:	fc cf       	rjmp	.-8      	; 0x3182 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 85       	ldd	r25, Z+8	; 0x08
    318e:	89 17       	cp	r24, r25
    3190:	48 f4       	brcc	.+18     	; 0x31a4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    3192:	d9 01       	movw	r26, r18
    3194:	a8 0f       	add	r26, r24
    3196:	b1 1d       	adc	r27, r1
    3198:	a8 0f       	add	r26, r24
    319a:	b1 1d       	adc	r27, r1
    319c:	1d 92       	st	X+, r1
    319e:	1c 92       	st	X, r1
    31a0:	8f 5f       	subi	r24, 0xFF	; 255
    31a2:	f4 cf       	rjmp	.-24     	; 0x318c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    31a4:	97 b1       	in	r25, 0x07	; 7
    31a6:	82 a1       	ldd	r24, Z+34	; 0x22
    31a8:	80 95       	com	r24
    31aa:	89 23       	and	r24, r25
    31ac:	87 b9       	out	0x07, r24	; 7
    31ae:	98 b1       	in	r25, 0x08	; 8
    31b0:	82 a1       	ldd	r24, Z+34	; 0x22
    31b2:	80 95       	com	r24
    31b4:	89 23       	and	r24, r25
    31b6:	88 b9       	out	0x08, r24	; 8
    31b8:	87 e8       	ldi	r24, 0x87	; 135
    31ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    31be:	e1 2c       	mov	r14, r1
    31c0:	81 a1       	ldd	r24, Z+33	; 0x21
    31c2:	e8 16       	cp	r14, r24
    31c4:	10 f0       	brcs	.+4      	; 0x31ca <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    31c6:	e1 2c       	mov	r14, r1
    31c8:	29 c0       	rjmp	.+82     	; 0x321c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	80 85       	ldd	r24, Z+8	; 0x08
    31ce:	58 17       	cp	r21, r24
    31d0:	18 f5       	brcc	.+70     	; 0x3218 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    31d2:	a5 2f       	mov	r26, r21
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	ef 01       	movw	r28, r30
    31d8:	ca 0f       	add	r28, r26
    31da:	db 1f       	adc	r29, r27
    31dc:	89 89       	ldd	r24, Y+17	; 0x11
    31de:	80 64       	ori	r24, 0x40	; 64
    31e0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    31e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    31e8:	80 64       	ori	r24, 0x40	; 64
    31ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    31ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    31f2:	86 fd       	sbrc	r24, 6
    31f4:	fc cf       	rjmp	.-8      	; 0x31ee <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    31f6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    31fa:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    31fe:	aa 0f       	add	r26, r26
    3200:	bb 1f       	adc	r27, r27
    3202:	a2 0f       	add	r26, r18
    3204:	b3 1f       	adc	r27, r19
    3206:	8d 91       	ld	r24, X+
    3208:	9c 91       	ld	r25, X
    320a:	11 97       	sbiw	r26, 0x01	; 1
    320c:	86 0f       	add	r24, r22
    320e:	97 1f       	adc	r25, r23
    3210:	8d 93       	st	X+, r24
    3212:	9c 93       	st	X, r25
    3214:	5f 5f       	subi	r21, 0xFF	; 255
    3216:	da cf       	rjmp	.-76     	; 0x31cc <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    3218:	e3 94       	inc	r14
    321a:	d2 cf       	rjmp	.-92     	; 0x31c0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    321c:	80 85       	ldd	r24, Z+8	; 0x08
    321e:	e8 16       	cp	r14, r24
    3220:	a0 f4       	brcc	.+40     	; 0x324a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    3222:	e9 01       	movw	r28, r18
    3224:	ce 0d       	add	r28, r14
    3226:	d1 1d       	adc	r29, r1
    3228:	ce 0d       	add	r28, r14
    322a:	d1 1d       	adc	r29, r1
    322c:	61 a1       	ldd	r22, Z+33	; 0x21
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	cb 01       	movw	r24, r22
    3232:	95 95       	asr	r25
    3234:	87 95       	ror	r24
    3236:	a8 81       	ld	r26, Y
    3238:	b9 81       	ldd	r27, Y+1	; 0x01
    323a:	8a 0f       	add	r24, r26
    323c:	9b 1f       	adc	r25, r27
    323e:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__udivmodhi4>
    3242:	79 83       	std	Y+1, r23	; 0x01
    3244:	68 83       	st	Y, r22
    3246:	e3 94       	inc	r14
    3248:	e9 cf       	rjmp	.-46     	; 0x321c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    324a:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    324e:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3252:	18 b9       	out	0x08, r17	; 8
    3254:	47 b9       	out	0x07, r20	; 7
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	e6 e0       	ldi	r30, 0x06	; 6
    325c:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__epilogue_restores__+0x18>

00003260 <_ZN16PololuQTRSensors4readEPjh>:
    3260:	a0 e2       	ldi	r26, 0x20	; 32
    3262:	b0 e0       	ldi	r27, 0x00	; 0
    3264:	e6 e3       	ldi	r30, 0x36	; 54
    3266:	f9 e1       	ldi	r31, 0x19	; 25
    3268:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__prologue_saves__+0x16>
    326c:	8c 01       	movw	r16, r24
    326e:	7b 01       	movw	r14, r22
    3270:	d4 2e       	mov	r13, r20
    3272:	8f ef       	ldi	r24, 0xFF	; 255
    3274:	84 0f       	add	r24, r20
    3276:	82 30       	cpi	r24, 0x02	; 2
    3278:	18 f4       	brcc	.+6      	; 0x3280 <_ZN16PololuQTRSensors4readEPjh+0x20>
    327a:	c8 01       	movw	r24, r16
    327c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <_ZN16PololuQTRSensors10emittersOnEv>
    3280:	d8 01       	movw	r26, r16
    3282:	50 96       	adiw	r26, 0x10	; 16
    3284:	8c 91       	ld	r24, X
    3286:	b7 01       	movw	r22, r14
    3288:	81 11       	cpse	r24, r1
    328a:	10 c0       	rjmp	.+32     	; 0x32ac <_ZN16PololuQTRSensors4readEPjh+0x4c>
    328c:	c8 01       	movw	r24, r16
    328e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    3292:	c8 01       	movw	r24, r16
    3294:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN16PololuQTRSensors11emittersOffEv>
    3298:	b2 e0       	ldi	r27, 0x02	; 2
    329a:	db 12       	cpse	r13, r27
    329c:	3a c0       	rjmp	.+116    	; 0x3312 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    329e:	be 01       	movw	r22, r28
    32a0:	6f 5f       	subi	r22, 0xFF	; 255
    32a2:	7f 4f       	sbci	r23, 0xFF	; 255
    32a4:	c8 01       	movw	r24, r16
    32a6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    32aa:	0f c0       	rjmp	.+30     	; 0x32ca <_ZN16PololuQTRSensors4readEPjh+0x6a>
    32ac:	c8 01       	movw	r24, r16
    32ae:	0e 94 b3 18 	call	0x3166	; 0x3166 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    32b2:	c8 01       	movw	r24, r16
    32b4:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN16PololuQTRSensors11emittersOffEv>
    32b8:	e2 e0       	ldi	r30, 0x02	; 2
    32ba:	de 12       	cpse	r13, r30
    32bc:	2a c0       	rjmp	.+84     	; 0x3312 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    32be:	be 01       	movw	r22, r28
    32c0:	6f 5f       	subi	r22, 0xFF	; 255
    32c2:	7f 4f       	sbci	r23, 0xFF	; 255
    32c4:	c8 01       	movw	r24, r16
    32c6:	0e 94 b3 18 	call	0x3166	; 0x3166 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	f8 01       	movw	r30, r16
    32ce:	80 85       	ldd	r24, Z+8	; 0x08
    32d0:	48 17       	cp	r20, r24
    32d2:	f8 f4       	brcc	.+62     	; 0x3312 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    32d4:	84 2f       	mov	r24, r20
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	f7 01       	movw	r30, r14
    32de:	e8 0f       	add	r30, r24
    32e0:	f9 1f       	adc	r31, r25
    32e2:	21 e0       	ldi	r18, 0x01	; 1
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	2c 0f       	add	r18, r28
    32e8:	3d 1f       	adc	r19, r29
    32ea:	82 0f       	add	r24, r18
    32ec:	93 1f       	adc	r25, r19
    32ee:	d8 01       	movw	r26, r16
    32f0:	1e 96       	adiw	r26, 0x0e	; 14
    32f2:	2d 91       	ld	r18, X+
    32f4:	3c 91       	ld	r19, X
    32f6:	1f 97       	sbiw	r26, 0x0f	; 15
    32f8:	dc 01       	movw	r26, r24
    32fa:	8d 91       	ld	r24, X+
    32fc:	9c 91       	ld	r25, X
    32fe:	28 1b       	sub	r18, r24
    3300:	39 0b       	sbc	r19, r25
    3302:	80 81       	ld	r24, Z
    3304:	91 81       	ldd	r25, Z+1	; 0x01
    3306:	82 0f       	add	r24, r18
    3308:	93 1f       	adc	r25, r19
    330a:	91 83       	std	Z+1, r25	; 0x01
    330c:	80 83       	st	Z, r24
    330e:	4f 5f       	subi	r20, 0xFF	; 255
    3310:	dd cf       	rjmp	.-70     	; 0x32cc <_ZN16PololuQTRSensors4readEPjh+0x6c>
    3312:	a0 96       	adiw	r28, 0x20	; 32
    3314:	e7 e0       	ldi	r30, 0x07	; 7
    3316:	0c 94 b6 1c 	jmp	0x396c	; 0x396c <__epilogue_restores__+0x16>

0000331a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    331a:	2f 92       	push	r2
    331c:	3f 92       	push	r3
    331e:	5f 92       	push	r5
    3320:	6f 92       	push	r6
    3322:	7f 92       	push	r7
    3324:	8f 92       	push	r8
    3326:	9f 92       	push	r9
    3328:	af 92       	push	r10
    332a:	bf 92       	push	r11
    332c:	cf 92       	push	r12
    332e:	df 92       	push	r13
    3330:	ef 92       	push	r14
    3332:	ff 92       	push	r15
    3334:	0f 93       	push	r16
    3336:	1f 93       	push	r17
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	c0 56       	subi	r28, 0x60	; 96
    3342:	d1 09       	sbc	r29, r1
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	8c 01       	movw	r16, r24
    3350:	4b 01       	movw	r8, r22
    3352:	5a 01       	movw	r10, r20
    3354:	52 2e       	mov	r5, r18
    3356:	da 01       	movw	r26, r20
    3358:	8d 91       	ld	r24, X+
    335a:	9c 91       	ld	r25, X
    335c:	89 2b       	or	r24, r25
    335e:	31 f0       	breq	.+12     	; 0x336c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    3360:	f4 01       	movw	r30, r8
    3362:	80 81       	ld	r24, Z
    3364:	91 81       	ldd	r25, Z+1	; 0x01
    3366:	89 2b       	or	r24, r25
    3368:	f1 f4       	brne	.+60     	; 0x33a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    336a:	24 c0       	rjmp	.+72     	; 0x33b4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    336c:	d8 01       	movw	r26, r16
    336e:	18 96       	adiw	r26, 0x08	; 8
    3370:	8c 91       	ld	r24, X
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	88 0f       	add	r24, r24
    3376:	99 1f       	adc	r25, r25
    3378:	0e 94 c6 1c 	call	0x398c	; 0x398c <malloc>
    337c:	f5 01       	movw	r30, r10
    337e:	91 83       	std	Z+1, r25	; 0x01
    3380:	80 83       	st	Z, r24
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	09 f4       	brne	.+2      	; 0x3388 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    3386:	b1 c0       	rjmp	.+354    	; 0x34ea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    3388:	fc 01       	movw	r30, r24
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	d8 01       	movw	r26, r16
    3390:	18 96       	adiw	r26, 0x08	; 8
    3392:	8c 91       	ld	r24, X
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	28 17       	cp	r18, r24
    3398:	39 07       	cpc	r19, r25
    339a:	14 f7       	brge	.-60     	; 0x3360 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    339c:	11 92       	st	Z+, r1
    339e:	11 92       	st	Z+, r1
    33a0:	2f 5f       	subi	r18, 0xFF	; 255
    33a2:	3f 4f       	sbci	r19, 0xFF	; 255
    33a4:	f4 cf       	rjmp	.-24     	; 0x338e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    33a6:	e1 2c       	mov	r14, r1
    33a8:	f1 2c       	mov	r15, r1
    33aa:	6e 01       	movw	r12, r28
    33ac:	b1 e2       	ldi	r27, 0x21	; 33
    33ae:	cb 0e       	add	r12, r27
    33b0:	d1 1c       	adc	r13, r1
    33b2:	21 c0       	rjmp	.+66     	; 0x33f6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    33b4:	f8 01       	movw	r30, r16
    33b6:	80 85       	ldd	r24, Z+8	; 0x08
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	0e 94 c6 1c 	call	0x398c	; 0x398c <malloc>
    33c2:	d4 01       	movw	r26, r8
    33c4:	8d 93       	st	X+, r24
    33c6:	9c 93       	st	X, r25
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	09 f4       	brne	.+2      	; 0x33ce <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    33cc:	8e c0       	rjmp	.+284    	; 0x34ea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    33ce:	fc 01       	movw	r30, r24
    33d0:	20 e0       	ldi	r18, 0x00	; 0
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	d8 01       	movw	r26, r16
    33d6:	18 96       	adiw	r26, 0x08	; 8
    33d8:	8c 91       	ld	r24, X
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	28 17       	cp	r18, r24
    33de:	39 07       	cpc	r19, r25
    33e0:	14 f7       	brge	.-60     	; 0x33a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    33e2:	d8 01       	movw	r26, r16
    33e4:	1e 96       	adiw	r26, 0x0e	; 14
    33e6:	8d 91       	ld	r24, X+
    33e8:	9c 91       	ld	r25, X
    33ea:	1f 97       	sbiw	r26, 0x0f	; 15
    33ec:	81 93       	st	Z+, r24
    33ee:	91 93       	st	Z+, r25
    33f0:	2f 5f       	subi	r18, 0xFF	; 255
    33f2:	3f 4f       	sbci	r19, 0xFF	; 255
    33f4:	ef cf       	rjmp	.-34     	; 0x33d4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    33f6:	45 2d       	mov	r20, r5
    33f8:	be 01       	movw	r22, r28
    33fa:	6f 5b       	subi	r22, 0xBF	; 191
    33fc:	7f 4f       	sbci	r23, 0xFF	; 255
    33fe:	c8 01       	movw	r24, r16
    3400:	0e 94 30 19 	call	0x3260	; 0x3260 <_ZN16PololuQTRSensors4readEPjh>
    3404:	f8 01       	movw	r30, r16
    3406:	60 84       	ldd	r6, Z+8	; 0x08
    3408:	71 2c       	mov	r7, r1
    340a:	fe 01       	movw	r30, r28
    340c:	ef 5b       	subi	r30, 0xBF	; 191
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	c6 01       	movw	r24, r12
    3412:	9e 01       	movw	r18, r28
    3414:	2f 5f       	subi	r18, 0xFF	; 255
    3416:	3f 4f       	sbci	r19, 0xFF	; 255
    3418:	19 01       	movw	r2, r18
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	26 15       	cp	r18, r6
    3420:	37 05       	cpc	r19, r7
    3422:	4c f5       	brge	.+82     	; 0x3476 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    3424:	e1 14       	cp	r14, r1
    3426:	f1 04       	cpc	r15, r1
    3428:	89 f0       	breq	.+34     	; 0x344c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    342a:	dc 01       	movw	r26, r24
    342c:	6d 91       	ld	r22, X+
    342e:	7c 91       	ld	r23, X
    3430:	40 81       	ld	r20, Z
    3432:	51 81       	ldd	r21, Z+1	; 0x01
    3434:	64 17       	cp	r22, r20
    3436:	75 07       	cpc	r23, r21
    3438:	48 f0       	brcs	.+18     	; 0x344c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    343a:	d1 01       	movw	r26, r2
    343c:	6d 91       	ld	r22, X+
    343e:	7c 91       	ld	r23, X
    3440:	40 81       	ld	r20, Z
    3442:	51 81       	ldd	r21, Z+1	; 0x01
    3444:	46 17       	cp	r20, r22
    3446:	57 07       	cpc	r21, r23
    3448:	48 f0       	brcs	.+18     	; 0x345c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    344a:	0d c0       	rjmp	.+26     	; 0x3466 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    344c:	40 81       	ld	r20, Z
    344e:	51 81       	ldd	r21, Z+1	; 0x01
    3450:	dc 01       	movw	r26, r24
    3452:	4d 93       	st	X+, r20
    3454:	5c 93       	st	X, r21
    3456:	e1 14       	cp	r14, r1
    3458:	f1 04       	cpc	r15, r1
    345a:	79 f7       	brne	.-34     	; 0x343a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    345c:	40 81       	ld	r20, Z
    345e:	51 81       	ldd	r21, Z+1	; 0x01
    3460:	d1 01       	movw	r26, r2
    3462:	4d 93       	st	X+, r20
    3464:	5c 93       	st	X, r21
    3466:	2f 5f       	subi	r18, 0xFF	; 255
    3468:	3f 4f       	sbci	r19, 0xFF	; 255
    346a:	b2 e0       	ldi	r27, 0x02	; 2
    346c:	2b 0e       	add	r2, r27
    346e:	31 1c       	adc	r3, r1
    3470:	32 96       	adiw	r30, 0x02	; 2
    3472:	02 96       	adiw	r24, 0x02	; 2
    3474:	d4 cf       	rjmp	.-88     	; 0x341e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    3476:	ef ef       	ldi	r30, 0xFF	; 255
    3478:	ee 1a       	sub	r14, r30
    347a:	fe 0a       	sbc	r15, r30
    347c:	fa e0       	ldi	r31, 0x0A	; 10
    347e:	ef 16       	cp	r14, r31
    3480:	f1 04       	cpc	r15, r1
    3482:	09 f0       	breq	.+2      	; 0x3486 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    3484:	b8 cf       	rjmp	.-144    	; 0x33f6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3486:	9e 01       	movw	r18, r28
    3488:	2f 5f       	subi	r18, 0xFF	; 255
    348a:	3f 4f       	sbci	r19, 0xFF	; 255
    348c:	79 01       	movw	r14, r18
    348e:	36 01       	movw	r6, r12
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	f8 01       	movw	r30, r16
    3496:	20 85       	ldd	r18, Z+8	; 0x08
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	82 17       	cp	r24, r18
    349c:	93 07       	cpc	r25, r19
    349e:	2c f5       	brge	.+74     	; 0x34ea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    34a0:	d7 01       	movw	r26, r14
    34a2:	2d 91       	ld	r18, X+
    34a4:	3d 91       	ld	r19, X+
    34a6:	7d 01       	movw	r14, r26
    34a8:	b3 01       	movw	r22, r6
    34aa:	6c 19       	sub	r22, r12
    34ac:	7d 09       	sbc	r23, r13
    34ae:	d5 01       	movw	r26, r10
    34b0:	ed 91       	ld	r30, X+
    34b2:	fc 91       	ld	r31, X
    34b4:	e6 0f       	add	r30, r22
    34b6:	f7 1f       	adc	r31, r23
    34b8:	40 81       	ld	r20, Z
    34ba:	51 81       	ldd	r21, Z+1	; 0x01
    34bc:	42 17       	cp	r20, r18
    34be:	53 07       	cpc	r21, r19
    34c0:	10 f4       	brcc	.+4      	; 0x34c6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    34c2:	31 83       	std	Z+1, r19	; 0x01
    34c4:	20 83       	st	Z, r18
    34c6:	f3 01       	movw	r30, r6
    34c8:	21 91       	ld	r18, Z+
    34ca:	31 91       	ld	r19, Z+
    34cc:	3f 01       	movw	r6, r30
    34ce:	d4 01       	movw	r26, r8
    34d0:	ed 91       	ld	r30, X+
    34d2:	fc 91       	ld	r31, X
    34d4:	e6 0f       	add	r30, r22
    34d6:	f7 1f       	adc	r31, r23
    34d8:	40 81       	ld	r20, Z
    34da:	51 81       	ldd	r21, Z+1	; 0x01
    34dc:	24 17       	cp	r18, r20
    34de:	35 07       	cpc	r19, r21
    34e0:	10 f4       	brcc	.+4      	; 0x34e6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    34e2:	31 83       	std	Z+1, r19	; 0x01
    34e4:	20 83       	st	Z, r18
    34e6:	01 96       	adiw	r24, 0x01	; 1
    34e8:	d5 cf       	rjmp	.-86     	; 0x3494 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    34ea:	c0 5a       	subi	r28, 0xA0	; 160
    34ec:	df 4f       	sbci	r29, 0xFF	; 255
    34ee:	0f b6       	in	r0, 0x3f	; 63
    34f0:	f8 94       	cli
    34f2:	de bf       	out	0x3e, r29	; 62
    34f4:	0f be       	out	0x3f, r0	; 63
    34f6:	cd bf       	out	0x3d, r28	; 61
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	ff 90       	pop	r15
    3502:	ef 90       	pop	r14
    3504:	df 90       	pop	r13
    3506:	cf 90       	pop	r12
    3508:	bf 90       	pop	r11
    350a:	af 90       	pop	r10
    350c:	9f 90       	pop	r9
    350e:	8f 90       	pop	r8
    3510:	7f 90       	pop	r7
    3512:	6f 90       	pop	r6
    3514:	5f 90       	pop	r5
    3516:	3f 90       	pop	r3
    3518:	2f 90       	pop	r2
    351a:	08 95       	ret

0000351c <_ZN16PololuQTRSensors9calibrateEh>:
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	ec 01       	movw	r28, r24
    3524:	16 2f       	mov	r17, r22
    3526:	8f ef       	ldi	r24, 0xFF	; 255
    3528:	86 0f       	add	r24, r22
    352a:	82 30       	cpi	r24, 0x02	; 2
    352c:	18 f0       	brcs	.+6      	; 0x3534 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    352e:	66 23       	and	r22, r22
    3530:	59 f0       	breq	.+22     	; 0x3548 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    3532:	14 c0       	rjmp	.+40     	; 0x355c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    3534:	21 e0       	ldi	r18, 0x01	; 1
    3536:	ae 01       	movw	r20, r28
    3538:	4e 5f       	subi	r20, 0xFE	; 254
    353a:	5f 4f       	sbci	r21, 0xFF	; 255
    353c:	be 01       	movw	r22, r28
    353e:	ce 01       	movw	r24, r28
    3540:	0e 94 8d 19 	call	0x331a	; 0x331a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    3544:	12 30       	cpi	r17, 0x02	; 2
    3546:	51 f4       	brne	.+20     	; 0x355c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    3548:	ae 01       	movw	r20, r28
    354a:	4a 5f       	subi	r20, 0xFA	; 250
    354c:	5f 4f       	sbci	r21, 0xFF	; 255
    354e:	be 01       	movw	r22, r28
    3550:	6c 5f       	subi	r22, 0xFC	; 252
    3552:	7f 4f       	sbci	r23, 0xFF	; 255
    3554:	20 e0       	ldi	r18, 0x00	; 0
    3556:	ce 01       	movw	r24, r28
    3558:	0e 94 8d 19 	call	0x331a	; 0x331a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    355c:	df 91       	pop	r29
    355e:	cf 91       	pop	r28
    3560:	1f 91       	pop	r17
    3562:	08 95       	ret

00003564 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    3564:	a0 e0       	ldi	r26, 0x00	; 0
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	e8 eb       	ldi	r30, 0xB8	; 184
    356a:	fa e1       	ldi	r31, 0x1A	; 26
    356c:	0c 94 98 1c 	jmp	0x3930	; 0x3930 <__prologue_saves__+0x12>
    3570:	ec 01       	movw	r28, r24
    3572:	8b 01       	movw	r16, r22
    3574:	b4 2e       	mov	r11, r20
    3576:	84 2f       	mov	r24, r20
    3578:	8d 7f       	andi	r24, 0xFD	; 253
    357a:	51 f4       	brne	.+20     	; 0x3590 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    357c:	8c 81       	ldd	r24, Y+4	; 0x04
    357e:	9d 81       	ldd	r25, Y+5	; 0x05
    3580:	89 2b       	or	r24, r25
    3582:	09 f4       	brne	.+2      	; 0x3586 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    3584:	97 c0       	rjmp	.+302    	; 0x36b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3586:	8e 81       	ldd	r24, Y+6	; 0x06
    3588:	9f 81       	ldd	r25, Y+7	; 0x07
    358a:	89 2b       	or	r24, r25
    358c:	09 f4       	brne	.+2      	; 0x3590 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    358e:	92 c0       	rjmp	.+292    	; 0x36b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3590:	8f ef       	ldi	r24, 0xFF	; 255
    3592:	8b 0d       	add	r24, r11
    3594:	82 30       	cpi	r24, 0x02	; 2
    3596:	50 f4       	brcc	.+20     	; 0x35ac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3598:	88 81       	ld	r24, Y
    359a:	99 81       	ldd	r25, Y+1	; 0x01
    359c:	89 2b       	or	r24, r25
    359e:	09 f4       	brne	.+2      	; 0x35a2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    35a0:	89 c0       	rjmp	.+274    	; 0x36b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	9b 81       	ldd	r25, Y+3	; 0x03
    35a6:	89 2b       	or	r24, r25
    35a8:	09 f4       	brne	.+2      	; 0x35ac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    35aa:	84 c0       	rjmp	.+264    	; 0x36b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    35ac:	4b 2d       	mov	r20, r11
    35ae:	b8 01       	movw	r22, r16
    35b0:	ce 01       	movw	r24, r28
    35b2:	0e 94 30 19 	call	0x3260	; 0x3260 <_ZN16PololuQTRSensors4readEPjh>
    35b6:	78 01       	movw	r14, r16
    35b8:	00 e0       	ldi	r16, 0x00	; 0
    35ba:	10 e0       	ldi	r17, 0x00	; 0
    35bc:	c1 2c       	mov	r12, r1
    35be:	d1 2c       	mov	r13, r1
    35c0:	88 85       	ldd	r24, Y+8	; 0x08
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	c8 16       	cp	r12, r24
    35c6:	d9 06       	cpc	r13, r25
    35c8:	0c f0       	brlt	.+2      	; 0x35cc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    35ca:	74 c0       	rjmp	.+232    	; 0x36b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	b8 12       	cpse	r11, r24
    35d0:	0a c0       	rjmp	.+20     	; 0x35e6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    35d2:	ea 81       	ldd	r30, Y+2	; 0x02
    35d4:	fb 81       	ldd	r31, Y+3	; 0x03
    35d6:	e0 0f       	add	r30, r16
    35d8:	f1 1f       	adc	r31, r17
    35da:	01 90       	ld	r0, Z+
    35dc:	f0 81       	ld	r31, Z
    35de:	e0 2d       	mov	r30, r0
    35e0:	a8 81       	ld	r26, Y
    35e2:	b9 81       	ldd	r27, Y+1	; 0x01
    35e4:	0d c0       	rjmp	.+26     	; 0x3600 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    35e6:	8c 81       	ldd	r24, Y+4	; 0x04
    35e8:	9d 81       	ldd	r25, Y+5	; 0x05
    35ea:	2e 81       	ldd	r18, Y+6	; 0x06
    35ec:	3f 81       	ldd	r19, Y+7	; 0x07
    35ee:	b1 10       	cpse	r11, r1
    35f0:	0c c0       	rjmp	.+24     	; 0x360a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    35f2:	f9 01       	movw	r30, r18
    35f4:	e0 0f       	add	r30, r16
    35f6:	f1 1f       	adc	r31, r17
    35f8:	01 90       	ld	r0, Z+
    35fa:	f0 81       	ld	r31, Z
    35fc:	e0 2d       	mov	r30, r0
    35fe:	dc 01       	movw	r26, r24
    3600:	a0 0f       	add	r26, r16
    3602:	b1 1f       	adc	r27, r17
    3604:	8d 91       	ld	r24, X+
    3606:	9c 91       	ld	r25, X
    3608:	28 c0       	rjmp	.+80     	; 0x365a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    360a:	fc 01       	movw	r30, r24
    360c:	e0 0f       	add	r30, r16
    360e:	f1 1f       	adc	r31, r17
    3610:	40 81       	ld	r20, Z
    3612:	51 81       	ldd	r21, Z+1	; 0x01
    3614:	e8 81       	ld	r30, Y
    3616:	f9 81       	ldd	r31, Y+1	; 0x01
    3618:	e0 0f       	add	r30, r16
    361a:	f1 1f       	adc	r31, r17
    361c:	80 81       	ld	r24, Z
    361e:	91 81       	ldd	r25, Z+1	; 0x01
    3620:	ee 85       	ldd	r30, Y+14	; 0x0e
    3622:	ff 85       	ldd	r31, Y+15	; 0x0f
    3624:	48 17       	cp	r20, r24
    3626:	59 07       	cpc	r21, r25
    3628:	10 f4       	brcc	.+4      	; 0x362e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    362a:	cf 01       	movw	r24, r30
    362c:	04 c0       	rjmp	.+8      	; 0x3636 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    362e:	8e 0f       	add	r24, r30
    3630:	9f 1f       	adc	r25, r31
    3632:	84 1b       	sub	r24, r20
    3634:	95 0b       	sbc	r25, r21
    3636:	d9 01       	movw	r26, r18
    3638:	a0 0f       	add	r26, r16
    363a:	b1 1f       	adc	r27, r17
    363c:	2d 91       	ld	r18, X+
    363e:	3c 91       	ld	r19, X
    3640:	aa 81       	ldd	r26, Y+2	; 0x02
    3642:	bb 81       	ldd	r27, Y+3	; 0x03
    3644:	a0 0f       	add	r26, r16
    3646:	b1 1f       	adc	r27, r17
    3648:	4d 91       	ld	r20, X+
    364a:	5c 91       	ld	r21, X
    364c:	24 17       	cp	r18, r20
    364e:	35 07       	cpc	r19, r21
    3650:	20 f0       	brcs	.+8      	; 0x365a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    3652:	e4 0f       	add	r30, r20
    3654:	f5 1f       	adc	r31, r21
    3656:	e2 1b       	sub	r30, r18
    3658:	f3 0b       	sbc	r31, r19
    365a:	e8 1b       	sub	r30, r24
    365c:	f9 0b       	sbc	r31, r25
    365e:	a9 f0       	breq	.+42     	; 0x368a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    3660:	d7 01       	movw	r26, r14
    3662:	2d 91       	ld	r18, X+
    3664:	3c 91       	ld	r19, X
    3666:	40 e0       	ldi	r20, 0x00	; 0
    3668:	50 e0       	ldi	r21, 0x00	; 0
    366a:	28 1b       	sub	r18, r24
    366c:	39 0b       	sbc	r19, r25
    366e:	41 09       	sbc	r20, r1
    3670:	51 09       	sbc	r21, r1
    3672:	a8 ee       	ldi	r26, 0xE8	; 232
    3674:	b3 e0       	ldi	r27, 0x03	; 3
    3676:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__muluhisi3>
    367a:	9f 01       	movw	r18, r30
    367c:	40 e0       	ldi	r20, 0x00	; 0
    367e:	50 e0       	ldi	r21, 0x00	; 0
    3680:	0e 94 48 1c 	call	0x3890	; 0x3890 <__divmodsi4>
    3684:	37 fd       	sbrc	r19, 7
    3686:	0a c0       	rjmp	.+20     	; 0x369c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    3688:	02 c0       	rjmp	.+4      	; 0x368e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	29 3e       	cpi	r18, 0xE9	; 233
    3690:	b3 e0       	ldi	r27, 0x03	; 3
    3692:	3b 07       	cpc	r19, r27
    3694:	2c f0       	brlt	.+10     	; 0x36a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3696:	28 ee       	ldi	r18, 0xE8	; 232
    3698:	33 e0       	ldi	r19, 0x03	; 3
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	f7 01       	movw	r30, r14
    36a2:	21 93       	st	Z+, r18
    36a4:	31 93       	st	Z+, r19
    36a6:	7f 01       	movw	r14, r30
    36a8:	ff ef       	ldi	r31, 0xFF	; 255
    36aa:	cf 1a       	sub	r12, r31
    36ac:	df 0a       	sbc	r13, r31
    36ae:	0e 5f       	subi	r16, 0xFE	; 254
    36b0:	1f 4f       	sbci	r17, 0xFF	; 255
    36b2:	86 cf       	rjmp	.-244    	; 0x35c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
    36b8:	e9 e0       	ldi	r30, 0x09	; 9
    36ba:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__epilogue_restores__+0x12>

000036be <_ZN16PololuQTRSensors8readLineEPjhh>:
    36be:	a0 e0       	ldi	r26, 0x00	; 0
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	e5 e6       	ldi	r30, 0x65	; 101
    36c4:	fb e1       	ldi	r31, 0x1B	; 27
    36c6:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__prologue_saves__>
    36ca:	ec 01       	movw	r28, r24
    36cc:	8b 01       	movw	r16, r22
    36ce:	82 2e       	mov	r8, r18
    36d0:	0e 94 b2 1a 	call	0x3564	; 0x3564 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    36d4:	28 84       	ldd	r2, Y+8	; 0x08
    36d6:	e8 01       	movw	r28, r16
    36d8:	41 2c       	mov	r4, r1
    36da:	51 2c       	mov	r5, r1
    36dc:	32 01       	movw	r6, r4
    36de:	00 e0       	ldi	r16, 0x00	; 0
    36e0:	10 e0       	ldi	r17, 0x00	; 0
    36e2:	c1 2c       	mov	r12, r1
    36e4:	d1 2c       	mov	r13, r1
    36e6:	76 01       	movw	r14, r12
    36e8:	31 2c       	mov	r3, r1
    36ea:	91 2c       	mov	r9, r1
    36ec:	58 ee       	ldi	r21, 0xE8	; 232
    36ee:	a5 2e       	mov	r10, r21
    36f0:	53 e0       	ldi	r21, 0x03	; 3
    36f2:	b5 2e       	mov	r11, r21
    36f4:	92 14       	cp	r9, r2
    36f6:	21 f1       	breq	.+72     	; 0x3740 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    36f8:	e9 91       	ld	r30, Y+
    36fa:	f9 91       	ld	r31, Y+
    36fc:	88 20       	and	r8, r8
    36fe:	21 f0       	breq	.+8      	; 0x3708 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    3700:	c5 01       	movw	r24, r10
    3702:	8e 1b       	sub	r24, r30
    3704:	9f 0b       	sbc	r25, r31
    3706:	fc 01       	movw	r30, r24
    3708:	e9 3c       	cpi	r30, 0xC9	; 201
    370a:	f1 05       	cpc	r31, r1
    370c:	24 f4       	brge	.+8      	; 0x3716 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    370e:	e3 33       	cpi	r30, 0x33	; 51
    3710:	f1 05       	cpc	r31, r1
    3712:	74 f0       	brlt	.+28     	; 0x3730 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    3714:	02 c0       	rjmp	.+4      	; 0x371a <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    3716:	33 24       	eor	r3, r3
    3718:	33 94       	inc	r3
    371a:	df 01       	movw	r26, r30
    371c:	a3 01       	movw	r20, r6
    371e:	92 01       	movw	r18, r4
    3720:	0e 94 87 1c 	call	0x390e	; 0x390e <__mulshisi3>
    3724:	c6 0e       	add	r12, r22
    3726:	d7 1e       	adc	r13, r23
    3728:	e8 1e       	adc	r14, r24
    372a:	f9 1e       	adc	r15, r25
    372c:	0e 0f       	add	r16, r30
    372e:	1f 1f       	adc	r17, r31
    3730:	93 94       	inc	r9
    3732:	98 ee       	ldi	r25, 0xE8	; 232
    3734:	49 0e       	add	r4, r25
    3736:	93 e0       	ldi	r25, 0x03	; 3
    3738:	59 1e       	adc	r5, r25
    373a:	61 1c       	adc	r6, r1
    373c:	71 1c       	adc	r7, r1
    373e:	da cf       	rjmp	.-76     	; 0x36f4 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    3740:	31 10       	cpse	r3, r1
    3742:	1e c0       	rjmp	.+60     	; 0x3780 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    3744:	49 2d       	mov	r20, r9
    3746:	50 e0       	ldi	r21, 0x00	; 0
    3748:	41 50       	subi	r20, 0x01	; 1
    374a:	51 09       	sbc	r21, r1
    374c:	24 ef       	ldi	r18, 0xF4	; 244
    374e:	31 e0       	ldi	r19, 0x01	; 1
    3750:	42 9f       	mul	r20, r18
    3752:	c0 01       	movw	r24, r0
    3754:	43 9f       	mul	r20, r19
    3756:	90 0d       	add	r25, r0
    3758:	52 9f       	mul	r21, r18
    375a:	90 0d       	add	r25, r0
    375c:	11 24       	eor	r1, r1
    375e:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3762:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3766:	28 17       	cp	r18, r24
    3768:	39 07       	cpc	r19, r25
    376a:	b4 f0       	brlt	.+44     	; 0x3798 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    376c:	88 ee       	ldi	r24, 0xE8	; 232
    376e:	93 e0       	ldi	r25, 0x03	; 3
    3770:	48 9f       	mul	r20, r24
    3772:	90 01       	movw	r18, r0
    3774:	49 9f       	mul	r20, r25
    3776:	30 0d       	add	r19, r0
    3778:	58 9f       	mul	r21, r24
    377a:	30 0d       	add	r19, r0
    377c:	11 24       	eor	r1, r1
    377e:	0e c0       	rjmp	.+28     	; 0x379c <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3780:	98 01       	movw	r18, r16
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	c7 01       	movw	r24, r14
    3788:	b6 01       	movw	r22, r12
    378a:	0e 94 26 1c 	call	0x384c	; 0x384c <__udivmodsi4>
    378e:	30 93 fe 01 	sts	0x01FE, r19	; 0x8001fe <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3792:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3796:	02 c0       	rjmp	.+4      	; 0x379c <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	c9 01       	movw	r24, r18
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	e2 e1       	ldi	r30, 0x12	; 18
    37a4:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__epilogue_restores__>

000037a8 <_ZN16PololuQTRSensorsD1Ev>:
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	ec 01       	movw	r28, r24
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	00 97       	sbiw	r24, 0x00	; 0
    37b4:	11 f0       	breq	.+4      	; 0x37ba <_ZN16PololuQTRSensorsD1Ev+0x12>
    37b6:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <free>
    37ba:	8e 81       	ldd	r24, Y+6	; 0x06
    37bc:	9f 81       	ldd	r25, Y+7	; 0x07
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	11 f0       	breq	.+4      	; 0x37c6 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    37c2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <free>
    37c6:	88 81       	ld	r24, Y
    37c8:	99 81       	ldd	r25, Y+1	; 0x01
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	11 f0       	breq	.+4      	; 0x37d2 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    37ce:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <free>
    37d2:	8c 81       	ldd	r24, Y+4	; 0x04
    37d4:	9d 81       	ldd	r25, Y+5	; 0x05
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	11 f0       	breq	.+4      	; 0x37de <_ZN16PololuQTRSensorsD1Ev+0x36>
    37da:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <free>
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	08 95       	ret

000037e4 <__udivmodqi4>:
    37e4:	99 1b       	sub	r25, r25
    37e6:	79 e0       	ldi	r23, 0x09	; 9
    37e8:	04 c0       	rjmp	.+8      	; 0x37f2 <__udivmodqi4_ep>

000037ea <__udivmodqi4_loop>:
    37ea:	99 1f       	adc	r25, r25
    37ec:	96 17       	cp	r25, r22
    37ee:	08 f0       	brcs	.+2      	; 0x37f2 <__udivmodqi4_ep>
    37f0:	96 1b       	sub	r25, r22

000037f2 <__udivmodqi4_ep>:
    37f2:	88 1f       	adc	r24, r24
    37f4:	7a 95       	dec	r23
    37f6:	c9 f7       	brne	.-14     	; 0x37ea <__udivmodqi4_loop>
    37f8:	80 95       	com	r24
    37fa:	08 95       	ret

000037fc <__udivmodhi4>:
    37fc:	aa 1b       	sub	r26, r26
    37fe:	bb 1b       	sub	r27, r27
    3800:	51 e1       	ldi	r21, 0x11	; 17
    3802:	07 c0       	rjmp	.+14     	; 0x3812 <__udivmodhi4_ep>

00003804 <__udivmodhi4_loop>:
    3804:	aa 1f       	adc	r26, r26
    3806:	bb 1f       	adc	r27, r27
    3808:	a6 17       	cp	r26, r22
    380a:	b7 07       	cpc	r27, r23
    380c:	10 f0       	brcs	.+4      	; 0x3812 <__udivmodhi4_ep>
    380e:	a6 1b       	sub	r26, r22
    3810:	b7 0b       	sbc	r27, r23

00003812 <__udivmodhi4_ep>:
    3812:	88 1f       	adc	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	5a 95       	dec	r21
    3818:	a9 f7       	brne	.-22     	; 0x3804 <__udivmodhi4_loop>
    381a:	80 95       	com	r24
    381c:	90 95       	com	r25
    381e:	bc 01       	movw	r22, r24
    3820:	cd 01       	movw	r24, r26
    3822:	08 95       	ret

00003824 <__divmodhi4>:
    3824:	97 fb       	bst	r25, 7
    3826:	07 2e       	mov	r0, r23
    3828:	16 f4       	brtc	.+4      	; 0x382e <__divmodhi4+0xa>
    382a:	00 94       	com	r0
    382c:	07 d0       	rcall	.+14     	; 0x383c <__divmodhi4_neg1>
    382e:	77 fd       	sbrc	r23, 7
    3830:	09 d0       	rcall	.+18     	; 0x3844 <__divmodhi4_neg2>
    3832:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__udivmodhi4>
    3836:	07 fc       	sbrc	r0, 7
    3838:	05 d0       	rcall	.+10     	; 0x3844 <__divmodhi4_neg2>
    383a:	3e f4       	brtc	.+14     	; 0x384a <__divmodhi4_exit>

0000383c <__divmodhi4_neg1>:
    383c:	90 95       	com	r25
    383e:	81 95       	neg	r24
    3840:	9f 4f       	sbci	r25, 0xFF	; 255
    3842:	08 95       	ret

00003844 <__divmodhi4_neg2>:
    3844:	70 95       	com	r23
    3846:	61 95       	neg	r22
    3848:	7f 4f       	sbci	r23, 0xFF	; 255

0000384a <__divmodhi4_exit>:
    384a:	08 95       	ret

0000384c <__udivmodsi4>:
    384c:	a1 e2       	ldi	r26, 0x21	; 33
    384e:	1a 2e       	mov	r1, r26
    3850:	aa 1b       	sub	r26, r26
    3852:	bb 1b       	sub	r27, r27
    3854:	fd 01       	movw	r30, r26
    3856:	0d c0       	rjmp	.+26     	; 0x3872 <__udivmodsi4_ep>

00003858 <__udivmodsi4_loop>:
    3858:	aa 1f       	adc	r26, r26
    385a:	bb 1f       	adc	r27, r27
    385c:	ee 1f       	adc	r30, r30
    385e:	ff 1f       	adc	r31, r31
    3860:	a2 17       	cp	r26, r18
    3862:	b3 07       	cpc	r27, r19
    3864:	e4 07       	cpc	r30, r20
    3866:	f5 07       	cpc	r31, r21
    3868:	20 f0       	brcs	.+8      	; 0x3872 <__udivmodsi4_ep>
    386a:	a2 1b       	sub	r26, r18
    386c:	b3 0b       	sbc	r27, r19
    386e:	e4 0b       	sbc	r30, r20
    3870:	f5 0b       	sbc	r31, r21

00003872 <__udivmodsi4_ep>:
    3872:	66 1f       	adc	r22, r22
    3874:	77 1f       	adc	r23, r23
    3876:	88 1f       	adc	r24, r24
    3878:	99 1f       	adc	r25, r25
    387a:	1a 94       	dec	r1
    387c:	69 f7       	brne	.-38     	; 0x3858 <__udivmodsi4_loop>
    387e:	60 95       	com	r22
    3880:	70 95       	com	r23
    3882:	80 95       	com	r24
    3884:	90 95       	com	r25
    3886:	9b 01       	movw	r18, r22
    3888:	ac 01       	movw	r20, r24
    388a:	bd 01       	movw	r22, r26
    388c:	cf 01       	movw	r24, r30
    388e:	08 95       	ret

00003890 <__divmodsi4>:
    3890:	05 2e       	mov	r0, r21
    3892:	97 fb       	bst	r25, 7
    3894:	1e f4       	brtc	.+6      	; 0x389c <__divmodsi4+0xc>
    3896:	00 94       	com	r0
    3898:	0e 94 5f 1c 	call	0x38be	; 0x38be <__negsi2>
    389c:	57 fd       	sbrc	r21, 7
    389e:	07 d0       	rcall	.+14     	; 0x38ae <__divmodsi4_neg2>
    38a0:	0e 94 26 1c 	call	0x384c	; 0x384c <__udivmodsi4>
    38a4:	07 fc       	sbrc	r0, 7
    38a6:	03 d0       	rcall	.+6      	; 0x38ae <__divmodsi4_neg2>
    38a8:	4e f4       	brtc	.+18     	; 0x38bc <__divmodsi4_exit>
    38aa:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__negsi2>

000038ae <__divmodsi4_neg2>:
    38ae:	50 95       	com	r21
    38b0:	40 95       	com	r20
    38b2:	30 95       	com	r19
    38b4:	21 95       	neg	r18
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	4f 4f       	sbci	r20, 0xFF	; 255
    38ba:	5f 4f       	sbci	r21, 0xFF	; 255

000038bc <__divmodsi4_exit>:
    38bc:	08 95       	ret

000038be <__negsi2>:
    38be:	90 95       	com	r25
    38c0:	80 95       	com	r24
    38c2:	70 95       	com	r23
    38c4:	61 95       	neg	r22
    38c6:	7f 4f       	sbci	r23, 0xFF	; 255
    38c8:	8f 4f       	sbci	r24, 0xFF	; 255
    38ca:	9f 4f       	sbci	r25, 0xFF	; 255
    38cc:	08 95       	ret

000038ce <__tablejump2__>:
    38ce:	ee 0f       	add	r30, r30
    38d0:	ff 1f       	adc	r31, r31
    38d2:	05 90       	lpm	r0, Z+
    38d4:	f4 91       	lpm	r31, Z
    38d6:	e0 2d       	mov	r30, r0
    38d8:	09 94       	ijmp

000038da <__umulhisi3>:
    38da:	a2 9f       	mul	r26, r18
    38dc:	b0 01       	movw	r22, r0
    38de:	b3 9f       	mul	r27, r19
    38e0:	c0 01       	movw	r24, r0
    38e2:	a3 9f       	mul	r26, r19
    38e4:	70 0d       	add	r23, r0
    38e6:	81 1d       	adc	r24, r1
    38e8:	11 24       	eor	r1, r1
    38ea:	91 1d       	adc	r25, r1
    38ec:	b2 9f       	mul	r27, r18
    38ee:	70 0d       	add	r23, r0
    38f0:	81 1d       	adc	r24, r1
    38f2:	11 24       	eor	r1, r1
    38f4:	91 1d       	adc	r25, r1
    38f6:	08 95       	ret

000038f8 <__muluhisi3>:
    38f8:	0e 94 6d 1c 	call	0x38da	; 0x38da <__umulhisi3>
    38fc:	a5 9f       	mul	r26, r21
    38fe:	90 0d       	add	r25, r0
    3900:	b4 9f       	mul	r27, r20
    3902:	90 0d       	add	r25, r0
    3904:	a4 9f       	mul	r26, r20
    3906:	80 0d       	add	r24, r0
    3908:	91 1d       	adc	r25, r1
    390a:	11 24       	eor	r1, r1
    390c:	08 95       	ret

0000390e <__mulshisi3>:
    390e:	b7 ff       	sbrs	r27, 7
    3910:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <__muluhisi3>

00003914 <__mulohisi3>:
    3914:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__muluhisi3>
    3918:	82 1b       	sub	r24, r18
    391a:	93 0b       	sbc	r25, r19
    391c:	08 95       	ret

0000391e <__prologue_saves__>:
    391e:	2f 92       	push	r2
    3920:	3f 92       	push	r3
    3922:	4f 92       	push	r4
    3924:	5f 92       	push	r5
    3926:	6f 92       	push	r6
    3928:	7f 92       	push	r7
    392a:	8f 92       	push	r8
    392c:	9f 92       	push	r9
    392e:	af 92       	push	r10
    3930:	bf 92       	push	r11
    3932:	cf 92       	push	r12
    3934:	df 92       	push	r13
    3936:	ef 92       	push	r14
    3938:	ff 92       	push	r15
    393a:	0f 93       	push	r16
    393c:	1f 93       	push	r17
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	cd b7       	in	r28, 0x3d	; 61
    3944:	de b7       	in	r29, 0x3e	; 62
    3946:	ca 1b       	sub	r28, r26
    3948:	db 0b       	sbc	r29, r27
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	de bf       	out	0x3e, r29	; 62
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	cd bf       	out	0x3d, r28	; 61
    3954:	09 94       	ijmp

00003956 <__epilogue_restores__>:
    3956:	2a 88       	ldd	r2, Y+18	; 0x12
    3958:	39 88       	ldd	r3, Y+17	; 0x11
    395a:	48 88       	ldd	r4, Y+16	; 0x10
    395c:	5f 84       	ldd	r5, Y+15	; 0x0f
    395e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3960:	7d 84       	ldd	r7, Y+13	; 0x0d
    3962:	8c 84       	ldd	r8, Y+12	; 0x0c
    3964:	9b 84       	ldd	r9, Y+11	; 0x0b
    3966:	aa 84       	ldd	r10, Y+10	; 0x0a
    3968:	b9 84       	ldd	r11, Y+9	; 0x09
    396a:	c8 84       	ldd	r12, Y+8	; 0x08
    396c:	df 80       	ldd	r13, Y+7	; 0x07
    396e:	ee 80       	ldd	r14, Y+6	; 0x06
    3970:	fd 80       	ldd	r15, Y+5	; 0x05
    3972:	0c 81       	ldd	r16, Y+4	; 0x04
    3974:	1b 81       	ldd	r17, Y+3	; 0x03
    3976:	aa 81       	ldd	r26, Y+2	; 0x02
    3978:	b9 81       	ldd	r27, Y+1	; 0x01
    397a:	ce 0f       	add	r28, r30
    397c:	d1 1d       	adc	r29, r1
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	ed 01       	movw	r28, r26
    398a:	08 95       	ret

0000398c <malloc>:
    398c:	0f 93       	push	r16
    398e:	1f 93       	push	r17
    3990:	cf 93       	push	r28
    3992:	df 93       	push	r29
    3994:	82 30       	cpi	r24, 0x02	; 2
    3996:	91 05       	cpc	r25, r1
    3998:	10 f4       	brcc	.+4      	; 0x399e <malloc+0x12>
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <__flp>
    39a2:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <__flp+0x1>
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	a0 e0       	ldi	r26, 0x00	; 0
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	30 97       	sbiw	r30, 0x00	; 0
    39b0:	19 f1       	breq	.+70     	; 0x39f8 <malloc+0x6c>
    39b2:	40 81       	ld	r20, Z
    39b4:	51 81       	ldd	r21, Z+1	; 0x01
    39b6:	02 81       	ldd	r16, Z+2	; 0x02
    39b8:	13 81       	ldd	r17, Z+3	; 0x03
    39ba:	48 17       	cp	r20, r24
    39bc:	59 07       	cpc	r21, r25
    39be:	c8 f0       	brcs	.+50     	; 0x39f2 <malloc+0x66>
    39c0:	84 17       	cp	r24, r20
    39c2:	95 07       	cpc	r25, r21
    39c4:	69 f4       	brne	.+26     	; 0x39e0 <malloc+0x54>
    39c6:	10 97       	sbiw	r26, 0x00	; 0
    39c8:	31 f0       	breq	.+12     	; 0x39d6 <malloc+0x4a>
    39ca:	12 96       	adiw	r26, 0x02	; 2
    39cc:	0c 93       	st	X, r16
    39ce:	12 97       	sbiw	r26, 0x02	; 2
    39d0:	13 96       	adiw	r26, 0x03	; 3
    39d2:	1c 93       	st	X, r17
    39d4:	27 c0       	rjmp	.+78     	; 0x3a24 <malloc+0x98>
    39d6:	00 93 1d 02 	sts	0x021D, r16	; 0x80021d <__flp>
    39da:	10 93 1e 02 	sts	0x021E, r17	; 0x80021e <__flp+0x1>
    39de:	22 c0       	rjmp	.+68     	; 0x3a24 <malloc+0x98>
    39e0:	21 15       	cp	r18, r1
    39e2:	31 05       	cpc	r19, r1
    39e4:	19 f0       	breq	.+6      	; 0x39ec <malloc+0x60>
    39e6:	42 17       	cp	r20, r18
    39e8:	53 07       	cpc	r21, r19
    39ea:	18 f4       	brcc	.+6      	; 0x39f2 <malloc+0x66>
    39ec:	9a 01       	movw	r18, r20
    39ee:	bd 01       	movw	r22, r26
    39f0:	ef 01       	movw	r28, r30
    39f2:	df 01       	movw	r26, r30
    39f4:	f8 01       	movw	r30, r16
    39f6:	db cf       	rjmp	.-74     	; 0x39ae <malloc+0x22>
    39f8:	21 15       	cp	r18, r1
    39fa:	31 05       	cpc	r19, r1
    39fc:	f9 f0       	breq	.+62     	; 0x3a3c <malloc+0xb0>
    39fe:	28 1b       	sub	r18, r24
    3a00:	39 0b       	sbc	r19, r25
    3a02:	24 30       	cpi	r18, 0x04	; 4
    3a04:	31 05       	cpc	r19, r1
    3a06:	80 f4       	brcc	.+32     	; 0x3a28 <malloc+0x9c>
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0c:	61 15       	cp	r22, r1
    3a0e:	71 05       	cpc	r23, r1
    3a10:	21 f0       	breq	.+8      	; 0x3a1a <malloc+0x8e>
    3a12:	fb 01       	movw	r30, r22
    3a14:	93 83       	std	Z+3, r25	; 0x03
    3a16:	82 83       	std	Z+2, r24	; 0x02
    3a18:	04 c0       	rjmp	.+8      	; 0x3a22 <malloc+0x96>
    3a1a:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <__flp+0x1>
    3a1e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <__flp>
    3a22:	fe 01       	movw	r30, r28
    3a24:	32 96       	adiw	r30, 0x02	; 2
    3a26:	44 c0       	rjmp	.+136    	; 0x3ab0 <malloc+0x124>
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e2 0f       	add	r30, r18
    3a2c:	f3 1f       	adc	r31, r19
    3a2e:	81 93       	st	Z+, r24
    3a30:	91 93       	st	Z+, r25
    3a32:	22 50       	subi	r18, 0x02	; 2
    3a34:	31 09       	sbc	r19, r1
    3a36:	39 83       	std	Y+1, r19	; 0x01
    3a38:	28 83       	st	Y, r18
    3a3a:	3a c0       	rjmp	.+116    	; 0x3ab0 <malloc+0x124>
    3a3c:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3a40:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3a44:	23 2b       	or	r18, r19
    3a46:	41 f4       	brne	.+16     	; 0x3a58 <malloc+0xcc>
    3a48:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3a4c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3a50:	30 93 1c 02 	sts	0x021C, r19	; 0x80021c <__brkval+0x1>
    3a54:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <__brkval>
    3a58:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3a5c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3a60:	21 15       	cp	r18, r1
    3a62:	31 05       	cpc	r19, r1
    3a64:	41 f4       	brne	.+16     	; 0x3a76 <malloc+0xea>
    3a66:	2d b7       	in	r18, 0x3d	; 61
    3a68:	3e b7       	in	r19, 0x3e	; 62
    3a6a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3a6e:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3a72:	24 1b       	sub	r18, r20
    3a74:	35 0b       	sbc	r19, r21
    3a76:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <__brkval>
    3a7a:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <__brkval+0x1>
    3a7e:	e2 17       	cp	r30, r18
    3a80:	f3 07       	cpc	r31, r19
    3a82:	a0 f4       	brcc	.+40     	; 0x3aac <malloc+0x120>
    3a84:	2e 1b       	sub	r18, r30
    3a86:	3f 0b       	sbc	r19, r31
    3a88:	28 17       	cp	r18, r24
    3a8a:	39 07       	cpc	r19, r25
    3a8c:	78 f0       	brcs	.+30     	; 0x3aac <malloc+0x120>
    3a8e:	ac 01       	movw	r20, r24
    3a90:	4e 5f       	subi	r20, 0xFE	; 254
    3a92:	5f 4f       	sbci	r21, 0xFF	; 255
    3a94:	24 17       	cp	r18, r20
    3a96:	35 07       	cpc	r19, r21
    3a98:	48 f0       	brcs	.+18     	; 0x3aac <malloc+0x120>
    3a9a:	4e 0f       	add	r20, r30
    3a9c:	5f 1f       	adc	r21, r31
    3a9e:	50 93 1c 02 	sts	0x021C, r21	; 0x80021c <__brkval+0x1>
    3aa2:	40 93 1b 02 	sts	0x021B, r20	; 0x80021b <__brkval>
    3aa6:	81 93       	st	Z+, r24
    3aa8:	91 93       	st	Z+, r25
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <malloc+0x124>
    3aac:	e0 e0       	ldi	r30, 0x00	; 0
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	cf 01       	movw	r24, r30
    3ab2:	df 91       	pop	r29
    3ab4:	cf 91       	pop	r28
    3ab6:	1f 91       	pop	r17
    3ab8:	0f 91       	pop	r16
    3aba:	08 95       	ret

00003abc <free>:
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	00 97       	sbiw	r24, 0x00	; 0
    3ac2:	09 f4       	brne	.+2      	; 0x3ac6 <free+0xa>
    3ac4:	81 c0       	rjmp	.+258    	; 0x3bc8 <free+0x10c>
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	32 97       	sbiw	r30, 0x02	; 2
    3aca:	13 82       	std	Z+3, r1	; 0x03
    3acc:	12 82       	std	Z+2, r1	; 0x02
    3ace:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <__flp>
    3ad2:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <__flp+0x1>
    3ad6:	10 97       	sbiw	r26, 0x00	; 0
    3ad8:	81 f4       	brne	.+32     	; 0x3afa <free+0x3e>
    3ada:	20 81       	ld	r18, Z
    3adc:	31 81       	ldd	r19, Z+1	; 0x01
    3ade:	82 0f       	add	r24, r18
    3ae0:	93 1f       	adc	r25, r19
    3ae2:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3ae6:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3aea:	28 17       	cp	r18, r24
    3aec:	39 07       	cpc	r19, r25
    3aee:	51 f5       	brne	.+84     	; 0x3b44 <free+0x88>
    3af0:	f0 93 1c 02 	sts	0x021C, r31	; 0x80021c <__brkval+0x1>
    3af4:	e0 93 1b 02 	sts	0x021B, r30	; 0x80021b <__brkval>
    3af8:	67 c0       	rjmp	.+206    	; 0x3bc8 <free+0x10c>
    3afa:	ed 01       	movw	r28, r26
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	ce 17       	cp	r28, r30
    3b02:	df 07       	cpc	r29, r31
    3b04:	40 f4       	brcc	.+16     	; 0x3b16 <free+0x5a>
    3b06:	4a 81       	ldd	r20, Y+2	; 0x02
    3b08:	5b 81       	ldd	r21, Y+3	; 0x03
    3b0a:	9e 01       	movw	r18, r28
    3b0c:	41 15       	cp	r20, r1
    3b0e:	51 05       	cpc	r21, r1
    3b10:	f1 f0       	breq	.+60     	; 0x3b4e <free+0x92>
    3b12:	ea 01       	movw	r28, r20
    3b14:	f5 cf       	rjmp	.-22     	; 0x3b00 <free+0x44>
    3b16:	d3 83       	std	Z+3, r29	; 0x03
    3b18:	c2 83       	std	Z+2, r28	; 0x02
    3b1a:	40 81       	ld	r20, Z
    3b1c:	51 81       	ldd	r21, Z+1	; 0x01
    3b1e:	84 0f       	add	r24, r20
    3b20:	95 1f       	adc	r25, r21
    3b22:	c8 17       	cp	r28, r24
    3b24:	d9 07       	cpc	r29, r25
    3b26:	59 f4       	brne	.+22     	; 0x3b3e <free+0x82>
    3b28:	88 81       	ld	r24, Y
    3b2a:	99 81       	ldd	r25, Y+1	; 0x01
    3b2c:	84 0f       	add	r24, r20
    3b2e:	95 1f       	adc	r25, r21
    3b30:	02 96       	adiw	r24, 0x02	; 2
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	80 83       	st	Z, r24
    3b36:	8a 81       	ldd	r24, Y+2	; 0x02
    3b38:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3a:	93 83       	std	Z+3, r25	; 0x03
    3b3c:	82 83       	std	Z+2, r24	; 0x02
    3b3e:	21 15       	cp	r18, r1
    3b40:	31 05       	cpc	r19, r1
    3b42:	29 f4       	brne	.+10     	; 0x3b4e <free+0x92>
    3b44:	f0 93 1e 02 	sts	0x021E, r31	; 0x80021e <__flp+0x1>
    3b48:	e0 93 1d 02 	sts	0x021D, r30	; 0x80021d <__flp>
    3b4c:	3d c0       	rjmp	.+122    	; 0x3bc8 <free+0x10c>
    3b4e:	e9 01       	movw	r28, r18
    3b50:	fb 83       	std	Y+3, r31	; 0x03
    3b52:	ea 83       	std	Y+2, r30	; 0x02
    3b54:	49 91       	ld	r20, Y+
    3b56:	59 91       	ld	r21, Y+
    3b58:	c4 0f       	add	r28, r20
    3b5a:	d5 1f       	adc	r29, r21
    3b5c:	ec 17       	cp	r30, r28
    3b5e:	fd 07       	cpc	r31, r29
    3b60:	61 f4       	brne	.+24     	; 0x3b7a <free+0xbe>
    3b62:	80 81       	ld	r24, Z
    3b64:	91 81       	ldd	r25, Z+1	; 0x01
    3b66:	84 0f       	add	r24, r20
    3b68:	95 1f       	adc	r25, r21
    3b6a:	02 96       	adiw	r24, 0x02	; 2
    3b6c:	e9 01       	movw	r28, r18
    3b6e:	99 83       	std	Y+1, r25	; 0x01
    3b70:	88 83       	st	Y, r24
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	93 81       	ldd	r25, Z+3	; 0x03
    3b76:	9b 83       	std	Y+3, r25	; 0x03
    3b78:	8a 83       	std	Y+2, r24	; 0x02
    3b7a:	e0 e0       	ldi	r30, 0x00	; 0
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	12 96       	adiw	r26, 0x02	; 2
    3b80:	8d 91       	ld	r24, X+
    3b82:	9c 91       	ld	r25, X
    3b84:	13 97       	sbiw	r26, 0x03	; 3
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	19 f0       	breq	.+6      	; 0x3b90 <free+0xd4>
    3b8a:	fd 01       	movw	r30, r26
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	f7 cf       	rjmp	.-18     	; 0x3b7e <free+0xc2>
    3b90:	8d 91       	ld	r24, X+
    3b92:	9c 91       	ld	r25, X
    3b94:	11 97       	sbiw	r26, 0x01	; 1
    3b96:	9d 01       	movw	r18, r26
    3b98:	2e 5f       	subi	r18, 0xFE	; 254
    3b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b9c:	82 0f       	add	r24, r18
    3b9e:	93 1f       	adc	r25, r19
    3ba0:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3ba4:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3ba8:	28 17       	cp	r18, r24
    3baa:	39 07       	cpc	r19, r25
    3bac:	69 f4       	brne	.+26     	; 0x3bc8 <free+0x10c>
    3bae:	30 97       	sbiw	r30, 0x00	; 0
    3bb0:	29 f4       	brne	.+10     	; 0x3bbc <free+0x100>
    3bb2:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__flp+0x1>
    3bb6:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp>
    3bba:	02 c0       	rjmp	.+4      	; 0x3bc0 <free+0x104>
    3bbc:	13 82       	std	Z+3, r1	; 0x03
    3bbe:	12 82       	std	Z+2, r1	; 0x02
    3bc0:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <__brkval+0x1>
    3bc4:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <__brkval>
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	08 95       	ret

00003bce <strncat>:
    3bce:	fb 01       	movw	r30, r22
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	0d 90       	ld	r0, X+
    3bd4:	00 20       	and	r0, r0
    3bd6:	e9 f7       	brne	.-6      	; 0x3bd2 <strncat+0x4>
    3bd8:	11 97       	sbiw	r26, 0x01	; 1
    3bda:	41 50       	subi	r20, 0x01	; 1
    3bdc:	50 40       	sbci	r21, 0x00	; 0
    3bde:	28 f0       	brcs	.+10     	; 0x3bea <strncat+0x1c>
    3be0:	01 90       	ld	r0, Z+
    3be2:	00 20       	and	r0, r0
    3be4:	0d 92       	st	X+, r0
    3be6:	c9 f7       	brne	.-14     	; 0x3bda <strncat+0xc>
    3be8:	08 95       	ret
    3bea:	1c 92       	st	X, r1
    3bec:	08 95       	ret

00003bee <__do_global_dtors>:
    3bee:	11 e0       	ldi	r17, 0x01	; 1
    3bf0:	c2 e2       	ldi	r28, 0x22	; 34
    3bf2:	d1 e0       	ldi	r29, 0x01	; 1
    3bf4:	04 c0       	rjmp	.+8      	; 0x3bfe <__do_global_dtors+0x10>
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	0e 94 67 1c 	call	0x38ce	; 0x38ce <__tablejump2__>
    3bfc:	21 96       	adiw	r28, 0x01	; 1
    3bfe:	c3 32       	cpi	r28, 0x23	; 35
    3c00:	d1 07       	cpc	r29, r17
    3c02:	c9 f7       	brne	.-14     	; 0x3bf6 <__do_global_dtors+0x8>
    3c04:	f8 94       	cli

00003c06 <__stop_program>:
    3c06:	ff cf       	rjmp	.-2      	; 0x3c06 <__stop_program>
