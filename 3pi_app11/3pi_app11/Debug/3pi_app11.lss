
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00003e28  00003ebc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  0080018c  0080018c  00003f48  2**0
                  ALLOC
  3 .stab         00007b00  00000000  00000000  00003f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000ba48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00015ace  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00015b10  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000001c8  00000000  00000000  00015b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000036b6  00000000  00000000  00015d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001257  00000000  00000000  000193ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000020fc  00000000  00000000  0001a625  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000564  00000000  00000000  0001c724  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a99  00000000  00000000  0001cc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000016ae  00000000  00000000  0001d721  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001e0  00000000  00000000  0001edcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__dtors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__vector_9>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 af 12 	jmp	0x255e	; 0x255e <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__vector_18>
      4c:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__vector_19>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	e5 08       	sbc	r14, r5
      6a:	e9 08       	sbc	r14, r9
      6c:	6a 09       	sbc	r22, r10
      6e:	04 09       	sbc	r16, r4
      70:	13 09       	sbc	r17, r3
      72:	f8 08       	sbc	r15, r8
      74:	04 09       	sbc	r16, r4
      76:	04 09       	sbc	r16, r4
      78:	04 09       	sbc	r16, r4

0000007a <__trampolines_end>:
      7a:	3e 67       	ori	r19, 0x7E	; 126
      7c:	33 32       	cpi	r19, 0x23	; 35
      7e:	3e 3e       	cpi	r19, 0xEE	; 238
      80:	63 33       	cpi	r22, 0x33	; 51
      82:	32 00       	.word	0x0032	; ????

00000084 <sound>:
      84:	3e 67 33 32 3e 3e 63 33 32 00                       >g32>>c32.

0000008e <__ctors_end>:
      8e:	f6 17       	cp	r31, r22

00000090 <__dtors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	e8 e2       	ldi	r30, 0x28	; 40
      a4:	fe e3       	ldi	r31, 0x3E	; 62
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 38       	cpi	r26, 0x8C	; 140
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	ac e8       	ldi	r26, 0x8C	; 140
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 31       	cpi	r26, 0x1F	; 31
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 1b 04 	call	0x836	; 0x836 <main>
      c6:	0c 94 07 1f 	jmp	0x3e0e	; 0x3e0e <__do_global_dtors>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <filllocationarrays>:
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
      d6:	e2 97       	sbiw	r28, 0x32	; 50
      d8:	0f b6       	in	r0, 0x3f	; 63
      da:	f8 94       	cli
      dc:	de bf       	out	0x3e, r29	; 62
      de:	0f be       	out	0x3f, r0	; 63
      e0:	cd bf       	out	0x3d, r28	; 61
      e2:	dc 01       	movw	r26, r24
      e4:	20 e0       	ldi	r18, 0x00	; 0
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	1a c0       	rjmp	.+52     	; 0x11e <filllocationarrays+0x50>
      ea:	ad 01       	movw	r20, r26
      ec:	42 0f       	add	r20, r18
      ee:	53 1f       	adc	r21, r19
      f0:	ca 01       	movw	r24, r20
      f2:	8e 5a       	subi	r24, 0xAE	; 174
      f4:	9f 4f       	sbci	r25, 0xFF	; 255
      f6:	fc 01       	movw	r30, r24
      f8:	10 82       	st	Z, r1
      fa:	fa 01       	movw	r30, r20
      fc:	11 ae       	std	Z+57, r1	; 0x39
      fe:	ea e1       	ldi	r30, 0x1A	; 26
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	ec 0f       	add	r30, r28
     104:	fd 1f       	adc	r31, r29
     106:	e2 0f       	add	r30, r18
     108:	f3 1f       	adc	r31, r19
     10a:	10 82       	st	Z, r1
     10c:	e1 e0       	ldi	r30, 0x01	; 1
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	ec 0f       	add	r30, r28
     112:	fd 1f       	adc	r31, r29
     114:	e2 0f       	add	r30, r18
     116:	f3 1f       	adc	r31, r19
     118:	10 82       	st	Z, r1
     11a:	2f 5f       	subi	r18, 0xFF	; 255
     11c:	3f 4f       	sbci	r19, 0xFF	; 255
     11e:	29 31       	cpi	r18, 0x19	; 25
     120:	31 05       	cpc	r19, r1
     122:	1c f3       	brlt	.-58     	; 0xea <filllocationarrays+0x1c>
     124:	5c 96       	adiw	r26, 0x1c	; 28
     126:	8c 91       	ld	r24, X
     128:	5c 97       	sbiw	r26, 0x1c	; 28
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	29 f4       	brne	.+10     	; 0x138 <filllocationarrays+0x6a>
     12e:	89 83       	std	Y+1, r24	; 0x01
     130:	8a 8f       	std	Y+26, r24	; 0x1a
     132:	21 e0       	ldi	r18, 0x01	; 1
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	02 c0       	rjmp	.+4      	; 0x13c <filllocationarrays+0x6e>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e0       	ldi	r20, 0x00	; 0
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	3b c0       	rjmp	.+118    	; 0x1b8 <filllocationarrays+0xea>
     142:	5d 96       	adiw	r26, 0x1d	; 29
     144:	8c 91       	ld	r24, X
     146:	5d 97       	sbiw	r26, 0x1d	; 29
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	04 2e       	mov	r0, r20
     14c:	02 c0       	rjmp	.+4      	; 0x152 <filllocationarrays+0x84>
     14e:	95 95       	asr	r25
     150:	87 95       	ror	r24
     152:	0a 94       	dec	r0
     154:	e2 f7       	brpl	.-8      	; 0x14e <filllocationarrays+0x80>
     156:	81 70       	andi	r24, 0x01	; 1
     158:	44 30       	cpi	r20, 0x04	; 4
     15a:	51 05       	cpc	r21, r1
     15c:	b4 f4       	brge	.+44     	; 0x18a <filllocationarrays+0xbc>
     15e:	81 30       	cpi	r24, 0x01	; 1
     160:	49 f5       	brne	.+82     	; 0x1b4 <filllocationarrays+0xe6>
     162:	e1 e0       	ldi	r30, 0x01	; 1
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	ec 0f       	add	r30, r28
     168:	fd 1f       	adc	r31, r29
     16a:	e2 0f       	add	r30, r18
     16c:	f3 1f       	adc	r31, r19
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	84 0f       	add	r24, r20
     172:	80 83       	st	Z, r24
     174:	ea e1       	ldi	r30, 0x1A	; 26
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	ec 0f       	add	r30, r28
     17a:	fd 1f       	adc	r31, r29
     17c:	e2 0f       	add	r30, r18
     17e:	f3 1f       	adc	r31, r19
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 83       	st	Z, r24
     184:	2f 5f       	subi	r18, 0xFF	; 255
     186:	3f 4f       	sbci	r19, 0xFF	; 255
     188:	15 c0       	rjmp	.+42     	; 0x1b4 <filllocationarrays+0xe6>
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	99 f4       	brne	.+38     	; 0x1b4 <filllocationarrays+0xe6>
     18e:	e1 e0       	ldi	r30, 0x01	; 1
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	ec 0f       	add	r30, r28
     194:	fd 1f       	adc	r31, r29
     196:	e2 0f       	add	r30, r18
     198:	f3 1f       	adc	r31, r19
     19a:	8d ef       	ldi	r24, 0xFD	; 253
     19c:	84 0f       	add	r24, r20
     19e:	80 83       	st	Z, r24
     1a0:	ea e1       	ldi	r30, 0x1A	; 26
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	ec 0f       	add	r30, r28
     1a6:	fd 1f       	adc	r31, r29
     1a8:	e2 0f       	add	r30, r18
     1aa:	f3 1f       	adc	r31, r19
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	80 83       	st	Z, r24
     1b0:	2f 5f       	subi	r18, 0xFF	; 255
     1b2:	3f 4f       	sbci	r19, 0xFF	; 255
     1b4:	4f 5f       	subi	r20, 0xFF	; 255
     1b6:	5f 4f       	sbci	r21, 0xFF	; 255
     1b8:	48 30       	cpi	r20, 0x08	; 8
     1ba:	51 05       	cpc	r21, r1
     1bc:	14 f2       	brlt	.-124    	; 0x142 <filllocationarrays+0x74>
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	53 c0       	rjmp	.+166    	; 0x26a <filllocationarrays+0x19c>
     1c4:	5e 96       	adiw	r26, 0x1e	; 30
     1c6:	8c 91       	ld	r24, X
     1c8:	5e 97       	sbiw	r26, 0x1e	; 30
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	04 2e       	mov	r0, r20
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <filllocationarrays+0x106>
     1d0:	95 95       	asr	r25
     1d2:	87 95       	ror	r24
     1d4:	0a 94       	dec	r0
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <filllocationarrays+0x102>
     1d8:	81 70       	andi	r24, 0x01	; 1
     1da:	41 15       	cp	r20, r1
     1dc:	51 05       	cpc	r21, r1
     1de:	b9 f4       	brne	.+46     	; 0x20e <filllocationarrays+0x140>
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <filllocationarrays+0x118>
     1e4:	40 c0       	rjmp	.+128    	; 0x266 <filllocationarrays+0x198>
     1e6:	e1 e0       	ldi	r30, 0x01	; 1
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ec 0f       	add	r30, r28
     1ec:	fd 1f       	adc	r31, r29
     1ee:	e2 0f       	add	r30, r18
     1f0:	f3 1f       	adc	r31, r19
     1f2:	85 e0       	ldi	r24, 0x05	; 5
     1f4:	84 0f       	add	r24, r20
     1f6:	80 83       	st	Z, r24
     1f8:	ea e1       	ldi	r30, 0x1A	; 26
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	ec 0f       	add	r30, r28
     1fe:	fd 1f       	adc	r31, r29
     200:	e2 0f       	add	r30, r18
     202:	f3 1f       	adc	r31, r19
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 83       	st	Z, r24
     208:	2f 5f       	subi	r18, 0xFF	; 255
     20a:	3f 4f       	sbci	r19, 0xFF	; 255
     20c:	2c c0       	rjmp	.+88     	; 0x266 <filllocationarrays+0x198>
     20e:	46 30       	cpi	r20, 0x06	; 6
     210:	51 05       	cpc	r21, r1
     212:	a4 f4       	brge	.+40     	; 0x23c <filllocationarrays+0x16e>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	39 f5       	brne	.+78     	; 0x266 <filllocationarrays+0x198>
     218:	e1 e0       	ldi	r30, 0x01	; 1
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ec 0f       	add	r30, r28
     21e:	fd 1f       	adc	r31, r29
     220:	e2 0f       	add	r30, r18
     222:	f3 1f       	adc	r31, r19
     224:	40 83       	st	Z, r20
     226:	ea e1       	ldi	r30, 0x1A	; 26
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	ec 0f       	add	r30, r28
     22c:	fd 1f       	adc	r31, r29
     22e:	e2 0f       	add	r30, r18
     230:	f3 1f       	adc	r31, r19
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	80 83       	st	Z, r24
     236:	2f 5f       	subi	r18, 0xFF	; 255
     238:	3f 4f       	sbci	r19, 0xFF	; 255
     23a:	15 c0       	rjmp	.+42     	; 0x266 <filllocationarrays+0x198>
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	99 f4       	brne	.+38     	; 0x266 <filllocationarrays+0x198>
     240:	e1 e0       	ldi	r30, 0x01	; 1
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	ec 0f       	add	r30, r28
     246:	fd 1f       	adc	r31, r29
     248:	e2 0f       	add	r30, r18
     24a:	f3 1f       	adc	r31, r19
     24c:	8b ef       	ldi	r24, 0xFB	; 251
     24e:	84 0f       	add	r24, r20
     250:	80 83       	st	Z, r24
     252:	ea e1       	ldi	r30, 0x1A	; 26
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	ec 0f       	add	r30, r28
     258:	fd 1f       	adc	r31, r29
     25a:	e2 0f       	add	r30, r18
     25c:	f3 1f       	adc	r31, r19
     25e:	84 e0       	ldi	r24, 0x04	; 4
     260:	80 83       	st	Z, r24
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	4f 5f       	subi	r20, 0xFF	; 255
     268:	5f 4f       	sbci	r21, 0xFF	; 255
     26a:	48 30       	cpi	r20, 0x08	; 8
     26c:	51 05       	cpc	r21, r1
     26e:	0c f4       	brge	.+2      	; 0x272 <filllocationarrays+0x1a4>
     270:	a9 cf       	rjmp	.-174    	; 0x1c4 <filllocationarrays+0xf6>
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	3b c0       	rjmp	.+118    	; 0x2ee <filllocationarrays+0x220>
     278:	5f 96       	adiw	r26, 0x1f	; 31
     27a:	8c 91       	ld	r24, X
     27c:	5f 97       	sbiw	r26, 0x1f	; 31
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	04 2e       	mov	r0, r20
     282:	02 c0       	rjmp	.+4      	; 0x288 <filllocationarrays+0x1ba>
     284:	95 95       	asr	r25
     286:	87 95       	ror	r24
     288:	0a 94       	dec	r0
     28a:	e2 f7       	brpl	.-8      	; 0x284 <filllocationarrays+0x1b6>
     28c:	81 70       	andi	r24, 0x01	; 1
     28e:	43 30       	cpi	r20, 0x03	; 3
     290:	51 05       	cpc	r21, r1
     292:	b4 f4       	brge	.+44     	; 0x2c0 <filllocationarrays+0x1f2>
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	49 f5       	brne	.+82     	; 0x2ea <filllocationarrays+0x21c>
     298:	e1 e0       	ldi	r30, 0x01	; 1
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ec 0f       	add	r30, r28
     29e:	fd 1f       	adc	r31, r29
     2a0:	e2 0f       	add	r30, r18
     2a2:	f3 1f       	adc	r31, r19
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	84 0f       	add	r24, r20
     2a8:	80 83       	st	Z, r24
     2aa:	ea e1       	ldi	r30, 0x1A	; 26
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	ec 0f       	add	r30, r28
     2b0:	fd 1f       	adc	r31, r29
     2b2:	e2 0f       	add	r30, r18
     2b4:	f3 1f       	adc	r31, r19
     2b6:	84 e0       	ldi	r24, 0x04	; 4
     2b8:	80 83       	st	Z, r24
     2ba:	2f 5f       	subi	r18, 0xFF	; 255
     2bc:	3f 4f       	sbci	r19, 0xFF	; 255
     2be:	15 c0       	rjmp	.+42     	; 0x2ea <filllocationarrays+0x21c>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	99 f4       	brne	.+38     	; 0x2ea <filllocationarrays+0x21c>
     2c4:	e1 e0       	ldi	r30, 0x01	; 1
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	ec 0f       	add	r30, r28
     2ca:	fd 1f       	adc	r31, r29
     2cc:	e2 0f       	add	r30, r18
     2ce:	f3 1f       	adc	r31, r19
     2d0:	8e ef       	ldi	r24, 0xFE	; 254
     2d2:	84 0f       	add	r24, r20
     2d4:	80 83       	st	Z, r24
     2d6:	ea e1       	ldi	r30, 0x1A	; 26
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	ec 0f       	add	r30, r28
     2dc:	fd 1f       	adc	r31, r29
     2de:	e2 0f       	add	r30, r18
     2e0:	f3 1f       	adc	r31, r19
     2e2:	85 e0       	ldi	r24, 0x05	; 5
     2e4:	80 83       	st	Z, r24
     2e6:	2f 5f       	subi	r18, 0xFF	; 255
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	4f 5f       	subi	r20, 0xFF	; 255
     2ec:	5f 4f       	sbci	r21, 0xFF	; 255
     2ee:	48 30       	cpi	r20, 0x08	; 8
     2f0:	51 05       	cpc	r21, r1
     2f2:	14 f2       	brlt	.-124    	; 0x278 <filllocationarrays+0x1aa>
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	19 c0       	rjmp	.+50     	; 0x32c <filllocationarrays+0x25e>
     2fa:	e1 e0       	ldi	r30, 0x01	; 1
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ec 0f       	add	r30, r28
     300:	fd 1f       	adc	r31, r29
     302:	e2 0f       	add	r30, r18
     304:	f3 1f       	adc	r31, r19
     306:	40 81       	ld	r20, Z
     308:	cd 01       	movw	r24, r26
     30a:	82 0f       	add	r24, r18
     30c:	93 1f       	adc	r25, r19
     30e:	fc 01       	movw	r30, r24
     310:	ee 5a       	subi	r30, 0xAE	; 174
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	40 83       	st	Z, r20
     316:	ea e1       	ldi	r30, 0x1A	; 26
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 0f       	add	r30, r28
     31c:	fd 1f       	adc	r31, r29
     31e:	e2 0f       	add	r30, r18
     320:	f3 1f       	adc	r31, r19
     322:	40 81       	ld	r20, Z
     324:	fc 01       	movw	r30, r24
     326:	41 af       	std	Z+57, r20	; 0x39
     328:	2f 5f       	subi	r18, 0xFF	; 255
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	29 31       	cpi	r18, 0x19	; 25
     32e:	31 05       	cpc	r19, r1
     330:	24 f3       	brlt	.-56     	; 0x2fa <filllocationarrays+0x22c>
     332:	e2 96       	adiw	r28, 0x32	; 50
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	de bf       	out	0x3e, r29	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	cd bf       	out	0x3d, r28	; 61
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <sendACK>:
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	00 d0       	rcall	.+0      	; 0x34a <sendACK+0x6>
     34a:	1f 92       	push	r1
     34c:	cd b7       	in	r28, 0x3d	; 61
     34e:	de b7       	in	r29, 0x3e	; 62
     350:	88 e0       	ldi	r24, 0x08	; 8
     352:	89 83       	std	Y+1, r24	; 0x01
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	8a 83       	std	Y+2, r24	; 0x02
     358:	85 e6       	ldi	r24, 0x65	; 101
     35a:	8b 83       	std	Y+3, r24	; 0x03
     35c:	64 e0       	ldi	r22, 0x04	; 4
     35e:	ce 01       	movw	r24, r28
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	0e 94 ed 16 	call	0x2dda	; 0x2dda <serial_send_blocking>
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <Update>:
     372:	cf 92       	push	r12
     374:	df 92       	push	r13
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	ec 01       	movw	r28, r24
     382:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <serial_receive_buffer_full>
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	09 f0       	breq	.+2      	; 0x38c <Update+0x1a>
     38a:	5e c0       	rjmp	.+188    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     38c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     38e:	88 30       	cpi	r24, 0x08	; 8
     390:	09 f0       	breq	.+2      	; 0x394 <Update+0x22>
     392:	5c c0       	rjmp	.+184    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     394:	e8 81       	ld	r30, Y
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	ec 0f       	add	r30, r28
     39c:	fd 1f       	adc	r31, r29
     39e:	83 8d       	ldd	r24, Z+27	; 0x1b
     3a0:	85 36       	cpi	r24, 0x65	; 101
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <Update+0x34>
     3a4:	55 c0       	rjmp	.+170    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     3a6:	ce 01       	movw	r24, r28
     3a8:	0e 94 a2 01 	call	0x344	; 0x344 <sendACK>
     3ac:	88 a1       	ldd	r24, Y+32	; 0x20
     3ae:	8e 3f       	cpi	r24, 0xFE	; 254
     3b0:	19 f0       	breq	.+6      	; 0x3b8 <Update+0x46>
     3b2:	8b a1       	ldd	r24, Y+35	; 0x23
     3b4:	8e 3f       	cpi	r24, 0xFE	; 254
     3b6:	29 f4       	brne	.+10     	; 0x3c2 <Update+0x50>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	fe 01       	movw	r30, r28
     3bc:	e5 59       	subi	r30, 0x95	; 149
     3be:	ff 4f       	sbci	r31, 0xFF	; 255
     3c0:	80 83       	st	Z, r24
     3c2:	8b a1       	ldd	r24, Y+35	; 0x23
     3c4:	8a 3f       	cpi	r24, 0xFA	; 250
     3c6:	29 f4       	brne	.+10     	; 0x3d2 <Update+0x60>
     3c8:	94 e0       	ldi	r25, 0x04	; 4
     3ca:	fe 01       	movw	r30, r28
     3cc:	e5 59       	subi	r30, 0x95	; 149
     3ce:	ff 4f       	sbci	r31, 0xFF	; 255
     3d0:	90 83       	st	Z, r25
     3d2:	85 3f       	cpi	r24, 0xF5	; 245
     3d4:	29 f4       	brne	.+10     	; 0x3e0 <Update+0x6e>
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	fe 01       	movw	r30, r28
     3da:	e5 59       	subi	r30, 0x95	; 149
     3dc:	ff 4f       	sbci	r31, 0xFF	; 255
     3de:	90 83       	st	Z, r25
     3e0:	86 3e       	cpi	r24, 0xE6	; 230
     3e2:	39 f4       	brne	.+14     	; 0x3f2 <Update+0x80>
     3e4:	9f ef       	ldi	r25, 0xFF	; 255
     3e6:	fe 01       	movw	r30, r28
     3e8:	e2 59       	subi	r30, 0x92	; 146
     3ea:	ff 4f       	sbci	r31, 0xFF	; 255
     3ec:	90 83       	st	Z, r25
     3ee:	31 96       	adiw	r30, 0x01	; 1
     3f0:	90 83       	st	Z, r25
     3f2:	80 3f       	cpi	r24, 0xF0	; 240
     3f4:	a9 f4       	brne	.+42     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	fe 01       	movw	r30, r28
     3fa:	e5 59       	subi	r30, 0x95	; 149
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	80 83       	st	Z, r24
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0a c0       	rjmp	.+20     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     406:	fc 01       	movw	r30, r24
     408:	39 96       	adiw	r30, 0x09	; 9
     40a:	ec 0f       	add	r30, r28
     40c:	fd 1f       	adc	r31, r29
     40e:	23 8d       	ldd	r18, Z+27	; 0x1b
     410:	fe 01       	movw	r30, r28
     412:	e8 0f       	add	r30, r24
     414:	f9 1f       	adc	r31, r25
     416:	25 ab       	std	Z+53, r18	; 0x35
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	91 05       	cpc	r25, r1
     41e:	9c f3       	brlt	.-26     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     420:	fe 01       	movw	r30, r28
     422:	e2 59       	subi	r30, 0x92	; 146
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	80 81       	ld	r24, Z
     428:	8f 3f       	cpi	r24, 0xFF	; 255
     42a:	a1 f4       	brne	.+40     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     42c:	31 96       	adiw	r30, 0x01	; 1
     42e:	80 81       	ld	r24, Z
     430:	8f 3f       	cpi	r24, 0xFF	; 255
     432:	91 f4       	brne	.+36     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     434:	ce 01       	movw	r24, r28
     436:	0e 94 67 00 	call	0xce	; 0xce <filllocationarrays>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	fe 01       	movw	r30, r28
     43e:	e0 59       	subi	r30, 0x90	; 144
     440:	ff 4f       	sbci	r31, 0xFF	; 255
     442:	80 83       	st	Z, r24
     444:	11 e0       	ldi	r17, 0x01	; 1
     446:	09 c0       	rjmp	.+18     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     448:	10 e0       	ldi	r17, 0x00	; 0
     44a:	07 c0       	rjmp	.+14     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     44c:	10 e0       	ldi	r17, 0x00	; 0
     44e:	05 c0       	rjmp	.+10     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     450:	10 e0       	ldi	r17, 0x00	; 0
     452:	03 c0       	rjmp	.+6      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     454:	11 e0       	ldi	r17, 0x01	; 1
     456:	01 c0       	rjmp	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     458:	11 e0       	ldi	r17, 0x01	; 1
     45a:	c0 90 f9 01 	lds	r12, 0x01F9	; 0x8001f9 <timesincelastsend.2232>
     45e:	d0 90 fa 01 	lds	r13, 0x01FA	; 0x8001fa <timesincelastsend.2232+0x1>
     462:	e0 90 fb 01 	lds	r14, 0x01FB	; 0x8001fb <timesincelastsend.2232+0x2>
     466:	f0 90 fc 01 	lds	r15, 0x01FC	; 0x8001fc <timesincelastsend.2232+0x3>
     46a:	8e ee       	ldi	r24, 0xEE	; 238
     46c:	c8 0e       	add	r12, r24
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	d8 1e       	adc	r13, r24
     472:	e1 1c       	adc	r14, r1
     474:	f1 1c       	adc	r15, r1
     476:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <get_ms>
     47a:	6c 15       	cp	r22, r12
     47c:	7d 05       	cpc	r23, r13
     47e:	8e 05       	cpc	r24, r14
     480:	9f 05       	cpc	r25, r15
     482:	c8 f1       	brcs	.+114    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     484:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <get_ms>
     488:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <timesincelastsend.2232>
     48c:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <timesincelastsend.2232+0x1>
     490:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <timesincelastsend.2232+0x2>
     494:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <timesincelastsend.2232+0x3>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     49c:	fe 01       	movw	r30, r28
     49e:	e8 0f       	add	r30, r24
     4a0:	f1 1d       	adc	r31, r1
     4a2:	81 83       	std	Z+1, r24	; 0x01
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	68 81       	ld	r22, Y
     4a8:	86 17       	cp	r24, r22
     4aa:	c0 f3       	brcs	.-16     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     4ac:	88 e0       	ldi	r24, 0x08	; 8
     4ae:	89 83       	std	Y+1, r24	; 0x01
     4b0:	fe 01       	movw	r30, r28
     4b2:	e4 59       	subi	r30, 0x94	; 148
     4b4:	ff 4f       	sbci	r31, 0xFF	; 255
     4b6:	80 81       	ld	r24, Z
     4b8:	8a 83       	std	Y+2, r24	; 0x02
     4ba:	31 96       	adiw	r30, 0x01	; 1
     4bc:	80 81       	ld	r24, Z
     4be:	8b 83       	std	Y+3, r24	; 0x03
     4c0:	31 96       	adiw	r30, 0x01	; 1
     4c2:	80 81       	ld	r24, Z
     4c4:	8c 83       	std	Y+4, r24	; 0x04
     4c6:	31 96       	adiw	r30, 0x01	; 1
     4c8:	80 81       	ld	r24, Z
     4ca:	8d 83       	std	Y+5, r24	; 0x05
     4cc:	34 97       	sbiw	r30, 0x04	; 4
     4ce:	80 81       	ld	r24, Z
     4d0:	8e 83       	std	Y+6, r24	; 0x06
     4d2:	e6 2f       	mov	r30, r22
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	31 97       	sbiw	r30, 0x01	; 1
     4d8:	ec 0f       	add	r30, r28
     4da:	fd 1f       	adc	r31, r29
     4dc:	85 e6       	ldi	r24, 0x65	; 101
     4de:	81 83       	std	Z+1, r24	; 0x01
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <serial_send>
     4e8:	11 30       	cpi	r17, 0x01	; 1
     4ea:	29 f4       	brne	.+10     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4ec:	68 81       	ld	r22, Y
     4ee:	ce 01       	movw	r24, r28
     4f0:	4b 96       	adiw	r24, 0x1b	; 27
     4f2:	0e 94 21 16 	call	0x2c42	; 0x2c42 <serial_receive>
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	08 95       	ret

00000506 <fillarrays>:
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	60 97       	sbiw	r28, 0x10	; 16
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	ac 01       	movw	r20, r24
     51c:	88 e0       	ldi	r24, 0x08	; 8
     51e:	e8 e2       	ldi	r30, 0x28	; 40
     520:	f1 e0       	ldi	r31, 0x01	; 1
     522:	de 01       	movw	r26, r28
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	01 90       	ld	r0, Z+
     528:	0d 92       	st	X+, r0
     52a:	8a 95       	dec	r24
     52c:	e1 f7       	brne	.-8      	; 0x526 <fillarrays+0x20>
     52e:	88 e0       	ldi	r24, 0x08	; 8
     530:	e0 e3       	ldi	r30, 0x30	; 48
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	de 01       	movw	r26, r28
     536:	19 96       	adiw	r26, 0x09	; 9
     538:	01 90       	ld	r0, Z+
     53a:	0d 92       	st	X+, r0
     53c:	8a 95       	dec	r24
     53e:	e1 f7       	brne	.-8      	; 0x538 <fillarrays+0x32>
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	19 c0       	rjmp	.+50     	; 0x578 <fillarrays+0x72>
     546:	e1 e0       	ldi	r30, 0x01	; 1
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	ec 0f       	add	r30, r28
     54c:	fd 1f       	adc	r31, r29
     54e:	e2 0f       	add	r30, r18
     550:	f3 1f       	adc	r31, r19
     552:	90 81       	ld	r25, Z
     554:	da 01       	movw	r26, r20
     556:	a2 0f       	add	r26, r18
     558:	b3 1f       	adc	r27, r19
     55a:	fd 01       	movw	r30, r26
     55c:	ee 5a       	subi	r30, 0xAE	; 174
     55e:	ff 4f       	sbci	r31, 0xFF	; 255
     560:	90 83       	st	Z, r25
     562:	e9 e0       	ldi	r30, 0x09	; 9
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	ec 0f       	add	r30, r28
     568:	fd 1f       	adc	r31, r29
     56a:	e2 0f       	add	r30, r18
     56c:	f3 1f       	adc	r31, r19
     56e:	90 81       	ld	r25, Z
     570:	d9 96       	adiw	r26, 0x39	; 57
     572:	9c 93       	st	X, r25
     574:	2f 5f       	subi	r18, 0xFF	; 255
     576:	3f 4f       	sbci	r19, 0xFF	; 255
     578:	28 30       	cpi	r18, 0x08	; 8
     57a:	31 05       	cpc	r19, r1
     57c:	24 f3       	brlt	.-56     	; 0x546 <fillarrays+0x40>
     57e:	60 96       	adiw	r28, 0x10	; 16
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <Communications_INIT>:
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	ec 01       	movw	r28, r24
     59a:	8a e1       	ldi	r24, 0x1A	; 26
     59c:	88 83       	st	Y, r24
     59e:	60 e8       	ldi	r22, 0x80	; 128
     5a0:	75 e2       	ldi	r23, 0x25	; 37
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <serial_set_baud_rate>
     5aa:	68 81       	ld	r22, Y
     5ac:	ce 01       	movw	r24, r28
     5ae:	4b 96       	adiw	r24, 0x1b	; 27
     5b0:	0e 94 21 16 	call	0x2c42	; 0x2c42 <serial_receive>
     5b4:	fe 01       	movw	r30, r28
     5b6:	ef 58       	subi	r30, 0x8F	; 143
     5b8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ba:	89 eb       	ldi	r24, 0xB9	; 185
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	80 83       	st	Z, r24
     5c2:	36 97       	sbiw	r30, 0x06	; 6
     5c4:	10 82       	st	Z, r1
     5c6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
     5ca:	8e 01       	movw	r16, r28
     5cc:	04 59       	subi	r16, 0x94	; 148
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
     5d4:	f8 01       	movw	r30, r16
     5d6:	60 83       	st	Z, r22
     5d8:	31 96       	adiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 96       	adiw	r30, 0x01	; 1
     5de:	84 e0       	ldi	r24, 0x04	; 4
     5e0:	80 83       	st	Z, r24
     5e2:	31 96       	adiw	r30, 0x01	; 1
     5e4:	85 e0       	ldi	r24, 0x05	; 5
     5e6:	80 83       	st	Z, r24
     5e8:	ce 01       	movw	r24, r28
     5ea:	0e 94 83 02 	call	0x506	; 0x506 <fillarrays>
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <batteryPercentage>:
     5f8:	cf 92       	push	r12
     5fa:	df 92       	push	r13
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     600:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <read_battery_millivolts_3pi>
     604:	bc 01       	movw	r22, r24
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__floatunsisf>
     60e:	6b 01       	movw	r12, r22
     610:	7c 01       	movw	r14, r24
     612:	9b 01       	movw	r18, r22
     614:	ac 01       	movw	r20, r24
     616:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__mulsf3>
     61a:	9b 01       	movw	r18, r22
     61c:	ac 01       	movw	r20, r24
     61e:	c7 01       	movw	r24, r14
     620:	b6 01       	movw	r22, r12
     622:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__mulsf3>
     626:	2c e0       	ldi	r18, 0x0C	; 12
     628:	39 eb       	ldi	r19, 0xB9	; 185
     62a:	4d e2       	ldi	r20, 0x2D	; 45
     62c:	50 e3       	ldi	r21, 0x30	; 48
     62e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__mulsf3>
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	08 95       	ret

0000063c <updateDisplay>:
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	7c 01       	movw	r14, r24
     648:	8b 01       	movw	r16, r22
     64a:	c4 2f       	mov	r28, r20
     64c:	0e 94 17 14 	call	0x282e	; 0x282e <clear>
     650:	60 e0       	ldi	r22, 0x00	; 0
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 9e 14 	call	0x293c	; 0x293c <lcd_goto_xy>
     658:	85 e5       	ldi	r24, 0x55	; 85
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     660:	b7 01       	movw	r22, r14
     662:	ff 0c       	add	r15, r15
     664:	88 0b       	sbc	r24, r24
     666:	99 0b       	sbc	r25, r25
     668:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <print_long>
     66c:	8a e5       	ldi	r24, 0x5A	; 90
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 9e 14 	call	0x293c	; 0x293c <lcd_goto_xy>
     67c:	8c e5       	ldi	r24, 0x5C	; 92
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     684:	b8 01       	movw	r22, r16
     686:	11 0f       	add	r17, r17
     688:	88 0b       	sbc	r24, r24
     68a:	99 0b       	sbc	r25, r25
     68c:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <print_long>
     690:	8a e5       	ldi	r24, 0x5A	; 90
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     698:	c2 30       	cpi	r28, 0x02	; 2
     69a:	a9 f0       	breq	.+42     	; 0x6c6 <updateDisplay+0x8a>
     69c:	28 f4       	brcc	.+10     	; 0x6a8 <updateDisplay+0x6c>
     69e:	cc 23       	and	r28, r28
     6a0:	41 f0       	breq	.+16     	; 0x6b2 <updateDisplay+0x76>
     6a2:	c1 30       	cpi	r28, 0x01	; 1
     6a4:	59 f0       	breq	.+22     	; 0x6bc <updateDisplay+0x80>
     6a6:	1d c0       	rjmp	.+58     	; 0x6e2 <updateDisplay+0xa6>
     6a8:	c3 30       	cpi	r28, 0x03	; 3
     6aa:	91 f0       	breq	.+36     	; 0x6d0 <updateDisplay+0x94>
     6ac:	c4 30       	cpi	r28, 0x04	; 4
     6ae:	a9 f0       	breq	.+42     	; 0x6da <updateDisplay+0x9e>
     6b0:	18 c0       	rjmp	.+48     	; 0x6e2 <updateDisplay+0xa6>
     6b2:	81 e6       	ldi	r24, 0x61	; 97
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <updateDisplay+0xa6>
     6bc:	83 e6       	ldi	r24, 0x63	; 99
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     6c4:	0e c0       	rjmp	.+28     	; 0x6e2 <updateDisplay+0xa6>
     6c6:	85 e6       	ldi	r24, 0x65	; 101
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <updateDisplay+0xa6>
     6d0:	87 e6       	ldi	r24, 0x67	; 103
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <updateDisplay+0xa6>
     6da:	89 e6       	ldi	r24, 0x69	; 105
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	08 95       	ret

000006ee <errorDisplay>:
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	18 2f       	mov	r17, r24
     6f6:	eb 01       	movw	r28, r22
     6f8:	0e 94 17 14 	call	0x282e	; 0x282e <clear>
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	0e 94 9e 14 	call	0x293c	; 0x293c <lcd_goto_xy>
     704:	8c e5       	ldi	r24, 0x5C	; 92
     706:	91 e0       	ldi	r25, 0x01	; 1
     708:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     70c:	be 01       	movw	r22, r28
     70e:	dd 0f       	add	r29, r29
     710:	88 0b       	sbc	r24, r24
     712:	99 0b       	sbc	r25, r25
     714:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <print_long>
     718:	8a e5       	ldi	r24, 0x5A	; 90
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 9e 14 	call	0x293c	; 0x293c <lcd_goto_xy>
     728:	11 30       	cpi	r17, 0x01	; 1
     72a:	59 f0       	breq	.+22     	; 0x742 <errorDisplay+0x54>
     72c:	28 f0       	brcs	.+10     	; 0x738 <errorDisplay+0x4a>
     72e:	12 30       	cpi	r17, 0x02	; 2
     730:	69 f0       	breq	.+26     	; 0x74c <errorDisplay+0x5e>
     732:	13 30       	cpi	r17, 0x03	; 3
     734:	81 f0       	breq	.+32     	; 0x756 <errorDisplay+0x68>
     736:	13 c0       	rjmp	.+38     	; 0x75e <errorDisplay+0x70>
     738:	8b e6       	ldi	r24, 0x6B	; 107
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     740:	0e c0       	rjmp	.+28     	; 0x75e <errorDisplay+0x70>
     742:	84 e7       	ldi	r24, 0x74	; 116
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     74a:	09 c0       	rjmp	.+18     	; 0x75e <errorDisplay+0x70>
     74c:	8c e7       	ldi	r24, 0x7C	; 124
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     754:	04 c0       	rjmp	.+8      	; 0x75e <errorDisplay+0x70>
     756:	83 e8       	ldi	r24, 0x83	; 131
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 26 14 	call	0x284c	; 0x284c <print>
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	08 95       	ret

00000766 <whileBarcode>:

const char welcome[] PROGMEM = ">g32>>c32";

void whileBarcode()
{
	while (lineType() != Barcode)
     766:	03 c0       	rjmp	.+6      	; 0x76e <whileBarcode+0x8>
	{
		motorControl('S');
     768:	83 e5       	ldi	r24, 0x53	; 83
     76a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>

const char welcome[] PROGMEM = ">g32>>c32";

void whileBarcode()
{
	while (lineType() != Barcode)
     76e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lineType>
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	c9 f7       	brne	.-14     	; 0x768 <whileBarcode+0x2>
	{
		motorControl('S');
	}
}
     776:	08 95       	ret

00000778 <whileLineEnd>:

void whileLineEnd()
{
	while (lineType() != Line_end)
     778:	03 c0       	rjmp	.+6      	; 0x780 <whileLineEnd+0x8>
	{
		motorControl('S');
     77a:	83 e5       	ldi	r24, 0x53	; 83
     77c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
	}
}

void whileLineEnd()
{
	while (lineType() != Line_end)
     780:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lineType>
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	c9 f7       	brne	.-14     	; 0x77a <whileLineEnd+0x2>
	{
		motorControl('S');
	}
}
     788:	08 95       	ret

0000078a <charge_3pi>:

void charge_3pi(Communications *communications)
{
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	8c 01       	movw	r16, r24
	whileBarcode();
     794:	0e 94 b3 03 	call	0x766	; 0x766 <whileBarcode>
	parcours('T', communications);
     798:	b8 01       	movw	r22, r16
     79a:	84 e5       	ldi	r24, 0x54	; 84
     79c:	0e 94 c6 09 	call	0x138c	; 0x138c <parcours>
	updateDisplay(0, batteryPercentage(), chargeMode);
     7a0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
     7a4:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
     7a8:	43 e0       	ldi	r20, 0x03	; 3
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 1e 03 	call	0x63c	; 0x63c <updateDisplay>
	warehouse(charging, communications);
     7b2:	b8 01       	movw	r22, r16
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 99 0b 	call	0x1732	; 0x1732 <warehouse>
	for (int i = 0; i < 10; i++) {// wacht totdat de robot vol is
     7ba:	c0 e0       	ldi	r28, 0x00	; 0
     7bc:	d0 e0       	ldi	r29, 0x00	; 0
     7be:	09 c0       	rjmp	.+18     	; 0x7d2 <charge_3pi+0x48>
		play_from_program_space(welcome);
     7c0:	8a e7       	ldi	r24, 0x7A	; 122
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 0e 13 	call	0x261c	; 0x261c <play_from_program_space>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     7c8:	84 ef       	ldi	r24, 0xF4	; 244
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
{
	whileBarcode();
	parcours('T', communications);
	updateDisplay(0, batteryPercentage(), chargeMode);
	warehouse(charging, communications);
	for (int i = 0; i < 10; i++) {// wacht totdat de robot vol is
     7d0:	21 96       	adiw	r28, 0x01	; 1
     7d2:	ca 30       	cpi	r28, 0x0A	; 10
     7d4:	d1 05       	cpc	r29, r1
     7d6:	a4 f3       	brlt	.-24     	; 0x7c0 <charge_3pi+0x36>
		play_from_program_space(welcome);
		delay(500);
	}								
	warehouse(charging, communications);
     7d8:	b8 01       	movw	r22, r16
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	0e 94 99 0b 	call	0x1732	; 0x1732 <warehouse>
	whileBarcode();
     7e0:	0e 94 b3 03 	call	0x766	; 0x766 <whileBarcode>
	parcours('B', communications);
     7e4:	b8 01       	movw	r22, r16
     7e6:	82 e4       	ldi	r24, 0x42	; 66
     7e8:	0e 94 c6 09 	call	0x138c	; 0x138c <parcours>
	whileLineEnd();
     7ec:	0e 94 bc 03 	call	0x778	; 0x778 <whileLineEnd>
	motorControl('L');
     7f0:	8c e4       	ldi	r24, 0x4C	; 76
     7f2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret

00000800 <pickOrder>:

void pickOrder(Communications *communications)
{
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ec 01       	movw	r28, r24
	whileBarcode();
     806:	0e 94 b3 03 	call	0x766	; 0x766 <whileBarcode>
	parcours('T', communications);
     80a:	be 01       	movw	r22, r28
     80c:	84 e5       	ldi	r24, 0x54	; 84
     80e:	0e 94 c6 09 	call	0x138c	; 0x138c <parcours>
	warehouse(orderPicking, communications); 	
     812:	be 01       	movw	r22, r28
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	0e 94 99 0b 	call	0x1732	; 0x1732 <warehouse>
	whileBarcode();
     81a:	0e 94 b3 03 	call	0x766	; 0x766 <whileBarcode>
	parcours('B', communications);
     81e:	be 01       	movw	r22, r28
     820:	82 e4       	ldi	r24, 0x42	; 66
     822:	0e 94 c6 09 	call	0x138c	; 0x138c <parcours>
	whileLineEnd();
     826:	0e 94 bc 03 	call	0x778	; 0x778 <whileLineEnd>
	motorControl('L');
     82a:	8c e4       	ldi	r24, 0x4C	; 76
     82c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <main>:

int main()
{ 
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	c3 57       	subi	r28, 0x73	; 115
     840:	d1 09       	sbc	r29, r1
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
	
	play_from_program_space(welcome);
     84c:	8a e7       	ldi	r24, 0x7A	; 122
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 0e 13 	call	0x261c	; 0x261c <play_from_program_space>
	
	Communications communications;
	Communications_INIT(&communications);
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	0e 94 c8 02 	call	0x590	; 0x590 <Communications_INIT>
	
	initialize(&communications);
     85c:	ce 01       	movw	r24, r28
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	0e 94 87 04 	call	0x90e	; 0x90e <initialize>
		
		
		unsigned int sensors[5];	
	while(1) 
	{
		updateDisplay(0, batteryPercentage(), homingMode);
     864:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
     868:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
     86c:	44 e0       	ldi	r20, 0x04	; 4
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 1e 03 	call	0x63c	; 0x63c <updateDisplay>
		communications.Update(&communications);
     876:	e4 96       	adiw	r28, 0x34	; 52
     878:	ee ad       	ldd	r30, Y+62	; 0x3e
     87a:	ff ad       	ldd	r31, Y+63	; 0x3f
     87c:	e4 97       	sbiw	r28, 0x34	; 52
     87e:	ce 01       	movw	r24, r28
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	09 95       	icall
		
		communications.locationx = -1;
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	e0 96       	adiw	r28, 0x30	; 48
     888:	8f af       	std	Y+63, r24	; 0x3f
     88a:	e0 97       	sbiw	r28, 0x30	; 48
		communications.locationy = -1;		
     88c:	e1 96       	adiw	r28, 0x31	; 49
     88e:	8f af       	std	Y+63, r24	; 0x3f
     890:	e1 97       	sbiw	r28, 0x31	; 49
						
		switch (communications.EmergencyStop)  // bits from gui
     892:	ad 96       	adiw	r28, 0x2d	; 45
     894:	8f ad       	ldd	r24, Y+63	; 0x3f
     896:	ad 97       	sbiw	r28, 0x2d	; 45
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	41 f1       	breq	.+80     	; 0x8ec <main+0xb6>
     89c:	28 f0       	brcs	.+10     	; 0x8a8 <main+0x72>
     89e:	83 30       	cpi	r24, 0x03	; 3
     8a0:	41 f1       	breq	.+80     	; 0x8f2 <main+0xbc>
     8a2:	84 30       	cpi	r24, 0x04	; 4
     8a4:	49 f1       	breq	.+82     	; 0x8f8 <main+0xc2>
     8a6:	de cf       	rjmp	.-68     	; 0x864 <main+0x2e>
		{  
			case 0:
			case 1: 				
				if (communications.flag==1) // if order is true
     8a8:	e2 96       	adiw	r28, 0x32	; 50
     8aa:	8f ad       	ldd	r24, Y+63	; 0x3f
     8ac:	e2 97       	sbiw	r28, 0x32	; 50
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	c1 f4       	brne	.+48     	; 0x8e2 <main+0xac>
				{
					communications.flag=0;
     8b2:	e2 96       	adiw	r28, 0x32	; 50
     8b4:	1f ae       	std	Y+63, r1	; 0x3f
     8b6:	e2 97       	sbiw	r28, 0x32	; 50
					
					play_from_program_space(welcome);
     8b8:	8a e7       	ldi	r24, 0x7A	; 122
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 0e 13 	call	0x261c	; 0x261c <play_from_program_space>
					communications.locationx = 0;
     8c0:	e0 96       	adiw	r28, 0x30	; 48
     8c2:	1f ae       	std	Y+63, r1	; 0x3f
     8c4:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = 0;
     8c6:	e1 96       	adiw	r28, 0x31	; 49
     8c8:	1f ae       	std	Y+63, r1	; 0x3f
     8ca:	e1 97       	sbiw	r28, 0x31	; 49
					pickOrder(&communications);
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 00 04 	call	0x800	; 0x800 <pickOrder>
					communications.locationx = -1;
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e0 96       	adiw	r28, 0x30	; 48
     8d8:	8f af       	std	Y+63, r24	; 0x3f
     8da:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = -1;
     8dc:	e1 96       	adiw	r28, 0x31	; 49
     8de:	8f af       	std	Y+63, r24	; 0x3f
     8e0:	e1 97       	sbiw	r28, 0x31	; 49
     8e2:	84 e6       	ldi	r24, 0x64	; 100
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
     8ea:	bc cf       	rjmp	.-136    	; 0x864 <main+0x2e>
				}
				delay(100);
				break;
			case 2:
			Spin();
     8ec:	0e 94 87 08 	call	0x110e	; 0x110e <Spin>
			break;
     8f0:	b9 cf       	rjmp	.-142    	; 0x864 <main+0x2e>
			case 3:
				manualControl();
     8f2:	0e 94 4e 07 	call	0xe9c	; 0xe9c <manualControl>
				break;
     8f6:	b6 cf       	rjmp	.-148    	; 0x864 <main+0x2e>
			case 4:
				charge_3pi(&communications);
     8f8:	ce 01       	movw	r24, r28
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	0e 94 c5 03 	call	0x78a	; 0x78a <charge_3pi>
				communications.EmergencyStop = 0;
     900:	ad 96       	adiw	r28, 0x2d	; 45
     902:	1f ae       	std	Y+63, r1	; 0x3f
     904:	ad 97       	sbiw	r28, 0x2d	; 45
				communications.flag=0;
     906:	e2 96       	adiw	r28, 0x32	; 50
     908:	1f ae       	std	Y+63, r1	; 0x3f
     90a:	e2 97       	sbiw	r28, 0x32	; 50
				break;
     90c:	ab cf       	rjmp	.-170    	; 0x864 <main+0x2e>

0000090e <initialize>:
						
	while(!button_is_pressed(BUTTON_B)){}
		wait_for_button_release(BUTTON_B);
}

void blub() {
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <myComs+0x1>
     916:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <myComs>
     91a:	80 ed       	ldi	r24, 0xD0	; 208
     91c:	97 e0       	ldi	r25, 0x07	; 7
     91e:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <pololu_3pi_init>
     922:	0d c0       	rjmp	.+26     	; 0x93e <initialize+0x30>
     924:	0e 94 17 14 	call	0x282e	; 0x282e <clear>
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 9e 14 	call	0x293c	; 0x293c <lcd_goto_xy>
     930:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <read_battery_millivolts_3pi>
     934:	bc 01       	movw	r22, r24
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <print_long>
     93e:	80 e1       	ldi	r24, 0x10	; 16
     940:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <button_is_pressed>
     944:	88 23       	and	r24, r24
     946:	71 f3       	breq	.-36     	; 0x924 <initialize+0x16>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <wait_for_button_release>
     94e:	88 ee       	ldi	r24, 0xE8	; 232
     950:	93 e0       	ldi	r25, 0x03	; 3
     952:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
     956:	c0 e0       	ldi	r28, 0x00	; 0
     958:	d0 e0       	ldi	r29, 0x00	; 0
     95a:	19 c0       	rjmp	.+50     	; 0x98e <initialize+0x80>
     95c:	ce 01       	movw	r24, r28
     95e:	44 97       	sbiw	r24, 0x14	; 20
     960:	88 97       	sbiw	r24, 0x28	; 40
     962:	38 f0       	brcs	.+14     	; 0x972 <initialize+0x64>
     964:	68 ed       	ldi	r22, 0xD8	; 216
     966:	7f ef       	ldi	r23, 0xFF	; 255
     968:	88 e2       	ldi	r24, 0x28	; 40
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     970:	06 c0       	rjmp	.+12     	; 0x97e <initialize+0x70>
     972:	68 e2       	ldi	r22, 0x28	; 40
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	88 ed       	ldi	r24, 0xD8	; 216
     978:	9f ef       	ldi	r25, 0xFF	; 255
     97a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <calibrate_line_sensors>
     984:	84 e1       	ldi	r24, 0x14	; 20
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
     98c:	21 96       	adiw	r28, 0x01	; 1
     98e:	c0 35       	cpi	r28, 0x50	; 80
     990:	d1 05       	cpc	r29, r1
     992:	20 f3       	brcs	.-56     	; 0x95c <initialize+0x4e>
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     9a0:	80 e1       	ldi	r24, 0x10	; 16
     9a2:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <button_is_pressed>
     9a6:	88 23       	and	r24, r24
     9a8:	d9 f3       	breq	.-10     	; 0x9a0 <initialize+0x92>
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	0e 94 83 15 	call	0x2b06	; 0x2b06 <wait_for_button_release>
     9b0:	0e 94 17 14 	call	0x282e	; 0x282e <clear>
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <inch>:
     9ba:	62 e3       	ldi	r22, 0x32	; 50
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	82 e3       	ldi	r24, 0x32	; 50
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     9c6:	88 ec       	ldi	r24, 0xC8	; 200
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     9da:	08 95       	ret

000009dc <lineType>:
	
}

char lineType(){																																								// function that returns the type of junction it detects																																								// >= black line		<=white
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	81 e1       	ldi	r24, 0x11	; 17
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
	
		if (sensors[1] >= Refrence_value_boven && sensors[3] >= Refrence_value_boven){																									//Checks if its A "Barcode", a X junction or a T junction and returns the junction
     9e6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     9ea:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     9ee:	80 39       	cpi	r24, 0x90	; 144
     9f0:	21 e0       	ldi	r18, 0x01	; 1
     9f2:	92 07       	cpc	r25, r18
     9f4:	08 f4       	brcc	.+2      	; 0x9f8 <lineType+0x1c>
     9f6:	6c c0       	rjmp	.+216    	; 0xad0 <lineType+0xf4>
     9f8:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <sensors+0x6>
     9fc:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <sensors+0x7>
     a00:	20 39       	cpi	r18, 0x90	; 144
     a02:	31 40       	sbci	r19, 0x01	; 1
     a04:	08 f4       	brcc	.+2      	; 0xa08 <lineType+0x2c>
     a06:	64 c0       	rjmp	.+200    	; 0xad0 <lineType+0xf4>
				inch();
     a08:	0e 94 dd 04 	call	0x9ba	; 0x9ba <inch>
				read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	81 e1       	ldi	r24, 0x11	; 17
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
				
				if (sensors[0] > Refrence_value_boven && sensors[1] > Refrence_value_boven && sensors[3] > Refrence_value_boven && sensors[4] > Refrence_value_boven){
     a16:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     a1a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     a1e:	81 39       	cpi	r24, 0x91	; 145
     a20:	91 40       	sbci	r25, 0x01	; 1
     a22:	b8 f1       	brcs	.+110    	; 0xa92 <lineType+0xb6>
     a24:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     a28:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     a2c:	81 39       	cpi	r24, 0x91	; 145
     a2e:	91 40       	sbci	r25, 0x01	; 1
     a30:	80 f1       	brcs	.+96     	; 0xa92 <lineType+0xb6>
     a32:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     a36:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     a3a:	81 39       	cpi	r24, 0x91	; 145
     a3c:	91 40       	sbci	r25, 0x01	; 1
     a3e:	48 f1       	brcs	.+82     	; 0xa92 <lineType+0xb6>
     a40:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     a44:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     a48:	81 39       	cpi	r24, 0x91	; 145
     a4a:	91 40       	sbci	r25, 0x01	; 1
     a4c:	10 f1       	brcs	.+68     	; 0xa92 <lineType+0xb6>
					set_motors(75,75);
     a4e:	6b e4       	ldi	r22, 0x4B	; 75
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	8b e4       	ldi	r24, 0x4B	; 75
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
						while(sensors[0] > Refrence_value_boven || sensors[4]  > Refrence_value_boven)
     a5a:	05 c0       	rjmp	.+10     	; 0xa66 <lineType+0x8a>
						{
							read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	81 e1       	ldi	r24, 0x11	; 17
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
				inch();
				read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
				
				if (sensors[0] > Refrence_value_boven && sensors[1] > Refrence_value_boven && sensors[3] > Refrence_value_boven && sensors[4] > Refrence_value_boven){
					set_motors(75,75);
						while(sensors[0] > Refrence_value_boven || sensors[4]  > Refrence_value_boven)
     a66:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     a6a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     a6e:	81 39       	cpi	r24, 0x91	; 145
     a70:	91 40       	sbci	r25, 0x01	; 1
     a72:	a0 f7       	brcc	.-24     	; 0xa5c <lineType+0x80>
     a74:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     a78:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     a7c:	81 39       	cpi	r24, 0x91	; 145
     a7e:	91 40       	sbci	r25, 0x01	; 1
     a80:	68 f7       	brcc	.-38     	; 0xa5c <lineType+0x80>
						{
							read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
						}
					inch();
     a82:	0e 94 dd 04 	call	0x9ba	; 0x9ba <inch>
     a86:	88 ee       	ldi	r24, 0xE8	; 232
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
					delay(1000);
					return Barcode;
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	08 95       	ret
				}
				
				else if (sensors[2] > Refrence_value_boven || (sensors[1] > Refrence_value_boven || sensors[3]  > Refrence_value_boven)){
     a92:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     a96:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     a9a:	81 39       	cpi	r24, 0x91	; 145
     a9c:	21 e0       	ldi	r18, 0x01	; 1
     a9e:	92 07       	cpc	r25, r18
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <lineType+0xc8>
     aa2:	84 c0       	rjmp	.+264    	; 0xbac <lineType+0x1d0>
     aa4:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <sensors+0x2>
     aa8:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <sensors+0x3>
     aac:	21 39       	cpi	r18, 0x91	; 145
     aae:	31 40       	sbci	r19, 0x01	; 1
     ab0:	08 f0       	brcs	.+2      	; 0xab4 <lineType+0xd8>
     ab2:	7e c0       	rjmp	.+252    	; 0xbb0 <lineType+0x1d4>
     ab4:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <sensors+0x6>
     ab8:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <sensors+0x7>
     abc:	21 39       	cpi	r18, 0x91	; 145
     abe:	31 40       	sbci	r19, 0x01	; 1
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <lineType+0xe8>
     ac2:	78 c0       	rjmp	.+240    	; 0xbb4 <lineType+0x1d8>
					println(X_junction);
					return X_junction;
				}
				else if(sensors[2] < Refrence_value_onder){
     ac4:	88 3c       	cpi	r24, 0xC8	; 200
     ac6:	91 05       	cpc	r25, r1
     ac8:	08 f4       	brcc	.+2      	; 0xacc <lineType+0xf0>
     aca:	76 c0       	rjmp	.+236    	; 0xbb8 <lineType+0x1dc>
	else if(sensors[0] < End_Line_Value && sensors[1] < End_Line_Value && sensors[2] < End_Line_Value &&sensors[3] < End_Line_Value &&sensors[4] < End_Line_Value){															// check if the line ends and returns the junction
		println(Line_end);																													
		return Line_end;
	}
																																										// else its a straight
		return Straight;
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	08 95       	ret
				
			}
			
	
							
	else if (sensors[0] > Refrence_value_boven && sensors[1] > Refrence_value_boven && sensors[4] < Refrence_value ){																	//Checks if its a left corner or a straight with left corner and returns the junction
     ad0:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <sensors>
     ad4:	30 91 12 02 	lds	r19, 0x0212	; 0x800212 <sensors+0x1>
     ad8:	21 39       	cpi	r18, 0x91	; 145
     ada:	e1 e0       	ldi	r30, 0x01	; 1
     adc:	3e 07       	cpc	r19, r30
     ade:	20 f1       	brcs	.+72     	; 0xb28 <lineType+0x14c>
     ae0:	81 39       	cpi	r24, 0x91	; 145
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	94 07       	cpc	r25, r20
     ae6:	00 f1       	brcs	.+64     	; 0xb28 <lineType+0x14c>
     ae8:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <sensors+0x8>
     aec:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <sensors+0x9>
     af0:	4e 35       	cpi	r20, 0x5E	; 94
     af2:	51 40       	sbci	r21, 0x01	; 1
     af4:	c8 f4       	brcc	.+50     	; 0xb28 <lineType+0x14c>
		inch();
     af6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <inch>
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	81 e1       	ldi	r24, 0x11	; 17
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
			
		if (sensors[2] > Refrence_value_boven || sensors[3]  > Refrence_value_boven){
     b04:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b08:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b0c:	81 39       	cpi	r24, 0x91	; 145
     b0e:	91 40       	sbci	r25, 0x01	; 1
     b10:	08 f0       	brcs	.+2      	; 0xb14 <lineType+0x138>
     b12:	54 c0       	rjmp	.+168    	; 0xbbc <lineType+0x1e0>
     b14:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     b18:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     b1c:	81 39       	cpi	r24, 0x91	; 145
     b1e:	91 40       	sbci	r25, 0x01	; 1
     b20:	08 f4       	brcc	.+2      	; 0xb24 <lineType+0x148>
     b22:	4e c0       	rjmp	.+156    	; 0xbc0 <lineType+0x1e4>
			println(Straight_left_junction);
			return Straight_left_junction;
     b24:	86 e0       	ldi	r24, 0x06	; 6
     b26:	08 95       	ret
			return Left_corner;
		}
	}
		
		
	else if (sensors[3] > 300 && sensors[4] > 300 && sensors[0] < Refrence_value_onder){																	//Checks if its a right corner or a straight with right corner and returns the junction
     b28:	40 91 17 02 	lds	r20, 0x0217	; 0x800217 <sensors+0x6>
     b2c:	50 91 18 02 	lds	r21, 0x0218	; 0x800218 <sensors+0x7>
     b30:	4d 32       	cpi	r20, 0x2D	; 45
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	56 07       	cpc	r21, r22
     b36:	08 f1       	brcs	.+66     	; 0xb7a <lineType+0x19e>
     b38:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <sensors+0x8>
     b3c:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <sensors+0x9>
     b40:	6d 32       	cpi	r22, 0x2D	; 45
     b42:	71 40       	sbci	r23, 0x01	; 1
     b44:	d0 f0       	brcs	.+52     	; 0xb7a <lineType+0x19e>
     b46:	28 3c       	cpi	r18, 0xC8	; 200
     b48:	31 05       	cpc	r19, r1
     b4a:	b8 f4       	brcc	.+46     	; 0xb7a <lineType+0x19e>
		inch();
     b4c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <inch>
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	81 e1       	ldi	r24, 0x11	; 17
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
			
		if (sensors[2] > Refrence_value_boven || sensors[1]  > Refrence_value_boven){
     b5a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b5e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b62:	81 39       	cpi	r24, 0x91	; 145
     b64:	91 40       	sbci	r25, 0x01	; 1
     b66:	70 f5       	brcc	.+92     	; 0xbc4 <lineType+0x1e8>
     b68:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     b6c:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     b70:	81 39       	cpi	r24, 0x91	; 145
     b72:	91 40       	sbci	r25, 0x01	; 1
     b74:	48 f1       	brcs	.+82     	; 0xbc8 <lineType+0x1ec>
			println(Straight_right_junction);
			return Straight_right_junction;
     b76:	85 e0       	ldi	r24, 0x05	; 5
     b78:	08 95       	ret
			println(Straight_left_junction);
			return Right_corner;
		}
	}
	
	else if(sensors[0] < End_Line_Value && sensors[1] < End_Line_Value && sensors[2] < End_Line_Value &&sensors[3] < End_Line_Value &&sensors[4] < End_Line_Value){															// check if the line ends and returns the junction
     b7a:	2c 32       	cpi	r18, 0x2C	; 44
     b7c:	31 40       	sbci	r19, 0x01	; 1
     b7e:	30 f5       	brcc	.+76     	; 0xbcc <lineType+0x1f0>
     b80:	8c 32       	cpi	r24, 0x2C	; 44
     b82:	91 40       	sbci	r25, 0x01	; 1
     b84:	28 f5       	brcc	.+74     	; 0xbd0 <lineType+0x1f4>
     b86:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b8a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b8e:	8c 32       	cpi	r24, 0x2C	; 44
     b90:	91 40       	sbci	r25, 0x01	; 1
     b92:	00 f5       	brcc	.+64     	; 0xbd4 <lineType+0x1f8>
     b94:	4c 32       	cpi	r20, 0x2C	; 44
     b96:	51 40       	sbci	r21, 0x01	; 1
     b98:	f8 f4       	brcc	.+62     	; 0xbd8 <lineType+0x1fc>
     b9a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     b9e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     ba2:	8c 32       	cpi	r24, 0x2C	; 44
     ba4:	91 40       	sbci	r25, 0x01	; 1
     ba6:	d0 f0       	brcs	.+52     	; 0xbdc <lineType+0x200>
		println(Line_end);																													
		return Line_end;
	}
																																										// else its a straight
		return Straight;
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 95       	ret
					return Barcode;
				}
				
				else if (sensors[2] > Refrence_value_boven || (sensors[1] > Refrence_value_boven || sensors[3]  > Refrence_value_boven)){
					println(X_junction);
					return X_junction;
     bac:	88 e0       	ldi	r24, 0x08	; 8
     bae:	08 95       	ret
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	08 95       	ret
     bb4:	88 e0       	ldi	r24, 0x08	; 8
     bb6:	08 95       	ret
				}
				else if(sensors[2] < Refrence_value_onder){
					println(T_junction);
					return T_junction;
     bb8:	87 e0       	ldi	r24, 0x07	; 7
     bba:	08 95       	ret
		inch();
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
		if (sensors[2] > Refrence_value_boven || sensors[3]  > Refrence_value_boven){
			println(Straight_left_junction);
			return Straight_left_junction;
     bbc:	86 e0       	ldi	r24, 0x06	; 6
     bbe:	08 95       	ret
		}
		else{
			println(Left_corner);
			return Left_corner;
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	08 95       	ret
		inch();
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
		if (sensors[2] > Refrence_value_boven || sensors[1]  > Refrence_value_boven){
			println(Straight_right_junction);
			return Straight_right_junction;
     bc4:	85 e0       	ldi	r24, 0x05	; 5
     bc6:	08 95       	ret
		}
		else {
			println(Straight_left_junction);
			return Right_corner;
     bc8:	84 e0       	ldi	r24, 0x04	; 4
     bca:	08 95       	ret
	else if(sensors[0] < End_Line_Value && sensors[1] < End_Line_Value && sensors[2] < End_Line_Value &&sensors[3] < End_Line_Value &&sensors[4] < End_Line_Value){															// check if the line ends and returns the junction
		println(Line_end);																													
		return Line_end;
	}
																																										// else its a straight
		return Straight;
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	08 95       	ret
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	08 95       	ret
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	08 95       	ret
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	08 95       	ret
		}
	}
	
	else if(sensors[0] < End_Line_Value && sensors[1] < End_Line_Value && sensors[2] < End_Line_Value &&sensors[3] < End_Line_Value &&sensors[4] < End_Line_Value){															// check if the line ends and returns the junction
		println(Line_end);																													
		return Line_end;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
	}
																																										// else its a straight
		return Straight;
	
}
     bde:	08 95       	ret

00000be0 <motorControl>:

void motorControl(char x){																																					// function that controls the motor movement and the turns
     be0:	8f 92       	push	r8
     be2:	9f 92       	push	r9
     be4:	af 92       	push	r10
     be6:	bf 92       	push	r11
     be8:	cf 92       	push	r12
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	18 2f       	mov	r17, r24
	myComs->Update(myComs);
     bf8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <myComs>
     bfc:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <myComs+0x1>
     c00:	fc 01       	movw	r30, r24
     c02:	ef 58       	subi	r30, 0x8F	; 143
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	01 90       	ld	r0, Z+
     c08:	f0 81       	ld	r31, Z
     c0a:	e0 2d       	mov	r30, r0
     c0c:	09 95       	icall
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	81 e1       	ldi	r24, 0x11	; 17
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <read_line>
     c18:	ec 01       	movw	r28, r24
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	81 e1       	ldi	r24, 0x11	; 17
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
	
	while (analog_read(7) >= 200) {																																			// Checks if there is an object infront of it, if there is it stops the motor and gives feedback to the display
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <motorControl+0x60>
		set_motors(0, 0);
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		errorDisplay(object, batteryPercentage());
     c32:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
     c36:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
     c3a:	82 e0       	ldi	r24, 0x02	; 2
     c3c:	0e 94 77 03 	call	0x6ee	; 0x6ee <errorDisplay>
void motorControl(char x){																																					// function that controls the motor movement and the turns
	myComs->Update(myComs);
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	
	while (analog_read(7) >= 200) {																																			// Checks if there is an object infront of it, if there is it stops the motor and gives feedback to the display
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <analog_read>
     c46:	88 3c       	cpi	r24, 0xC8	; 200
     c48:	91 05       	cpc	r25, r1
     c4a:	68 f7       	brcc	.-38     	; 0xc26 <motorControl+0x46>
		set_motors(0, 0);
		errorDisplay(object, batteryPercentage());
	}

		
	if(myComs->EmergencyStop == 1){																																	//Emergency Brake
     c4c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     c50:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     c54:	e5 59       	subi	r30, 0x95	; 149
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	80 81       	ld	r24, Z
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	71 f4       	brne	.+28     	; 0xc7a <motorControl+0x9a>
		set_motors(0,0);
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		errorDisplay(emergency,batteryPercentage());	
     c6a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
     c6e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	0e 94 77 03 	call	0x6ee	; 0x6ee <errorDisplay>
     c78:	05 c1       	rjmp	.+522    	; 0xe84 <motorControl+0x2a4>
	}
	
	else if(x == 'L'){																																						//Turn Left
     c7a:	1c 34       	cpi	r17, 0x4C	; 76
     c7c:	39 f5       	brne	.+78     	; 0xccc <motorControl+0xec>
		set_motors(-turn_value,turn_value);
     c7e:	6c e3       	ldi	r22, 0x3C	; 60
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	84 ec       	ldi	r24, 0xC4	; 196
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		
		while (sensors[2] > Refrence_value_onder)
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <motorControl+0xb6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	81 e1       	ldi	r24, 0x11	; 17
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
	}
	
	else if(x == 'L'){																																						//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] > Refrence_value_onder)
     c96:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     c9a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     c9e:	89 3c       	cpi	r24, 0xC9	; 201
     ca0:	91 05       	cpc	r25, r1
     ca2:	a0 f7       	brcc	.-24     	; 0xc8c <motorControl+0xac>
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <motorControl+0xd0>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] < Refrence_value_boven)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	81 e1       	ldi	r24, 0x11	; 17
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
	else if(x == 'L'){																																						//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] > Refrence_value_onder)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] < Refrence_value_boven)
     cb0:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     cb4:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     cb8:	80 39       	cpi	r24, 0x90	; 144
     cba:	91 40       	sbci	r25, 0x01	; 1
     cbc:	a0 f3       	brcs	.-24     	; 0xca6 <motorControl+0xc6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     cca:	dc c0       	rjmp	.+440    	; 0xe84 <motorControl+0x2a4>
	}
	
	
	else if(x == 'R'){																																						//Turn Right
     ccc:	12 35       	cpi	r17, 0x52	; 82
     cce:	39 f5       	brne	.+78     	; 0xd1e <motorControl+0x13e>
		set_motors(turn_value,-turn_value);
     cd0:	64 ec       	ldi	r22, 0xC4	; 196
     cd2:	7f ef       	ldi	r23, 0xFF	; 255
     cd4:	8c e3       	ldi	r24, 0x3C	; 60
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		
		while (sensors[2] > Refrence_value_onder)
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <motorControl+0x108>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	81 e1       	ldi	r24, 0x11	; 17
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
	
	
	else if(x == 'R'){																																						//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] > Refrence_value_onder)
     ce8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     cec:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     cf0:	89 3c       	cpi	r24, 0xC9	; 201
     cf2:	91 05       	cpc	r25, r1
     cf4:	a0 f7       	brcc	.-24     	; 0xcde <motorControl+0xfe>
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <motorControl+0x122>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] < Refrence_value_boven)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	81 e1       	ldi	r24, 0x11	; 17
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
	else if(x == 'R'){																																						//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] > Refrence_value_onder)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] < Refrence_value_boven)
     d02:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     d06:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     d0a:	80 39       	cpi	r24, 0x90	; 144
     d0c:	91 40       	sbci	r25, 0x01	; 1
     d0e:	a0 f3       	brcs	.-24     	; 0xcf8 <motorControl+0x118>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     d1c:	b3 c0       	rjmp	.+358    	; 0xe84 <motorControl+0x2a4>
	}
		
			
	else if(x == 'S'){																																						//drive straight and adjusts the robot so it follows the line
     d1e:	13 35       	cpi	r17, 0x53	; 83
     d20:	09 f0       	breq	.+2      	; 0xd24 <motorControl+0x144>
     d22:	66 c0       	rjmp	.+204    	; 0xdf0 <motorControl+0x210>
		
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     d24:	ce 01       	movw	r24, r28
     d26:	80 5d       	subi	r24, 0xD0	; 208
     d28:	97 40       	sbci	r25, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     d2a:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <last_proportional>
     d2e:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <last_proportional+0x1>
     d32:	ec 01       	movw	r28, r24
     d34:	c2 1b       	sub	r28, r18
     d36:	d3 0b       	sbc	r29, r19
		integral = integral + proportional;
     d38:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <integral>
     d3c:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <integral+0x1>
     d40:	fc 01       	movw	r30, r24
     d42:	e6 0f       	add	r30, r22
     d44:	f7 1f       	adc	r31, r23
     d46:	f0 93 10 02 	sts	0x0210, r31	; 0x800210 <integral+0x1>
     d4a:	e0 93 0f 02 	sts	0x020F, r30	; 0x80020f <integral>

		// Remember the last position.
		 last_proportional = proportional;
     d4e:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <last_proportional+0x1>
     d52:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <last_proportional>
 
 		int power_difference = proportional/10 + integral/40000 + derivative*0.50;						
     d56:	6a e0       	ldi	r22, 0x0A	; 10
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__divmodhi4>
     d5e:	6b 01       	movw	r12, r22
     d60:	bf 01       	movw	r22, r30
     d62:	ff 0f       	add	r31, r31
     d64:	88 0b       	sbc	r24, r24
     d66:	99 0b       	sbc	r25, r25
     d68:	20 e4       	ldi	r18, 0x40	; 64
     d6a:	3c e9       	ldi	r19, 0x9C	; 156
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__divmodsi4>
     d74:	0d 2c       	mov	r0, r13
     d76:	00 0c       	add	r0, r0
     d78:	ee 08       	sbc	r14, r14
     d7a:	ff 08       	sbc	r15, r15
     d7c:	c2 0e       	add	r12, r18
     d7e:	d3 1e       	adc	r13, r19
     d80:	e4 1e       	adc	r14, r20
     d82:	f5 1e       	adc	r15, r21
     d84:	be 01       	movw	r22, r28
     d86:	dd 0f       	add	r29, r29
     d88:	88 0b       	sbc	r24, r24
     d8a:	99 0b       	sbc	r25, r25
     d8c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__mulsf3>
     d9c:	4b 01       	movw	r8, r22
     d9e:	5c 01       	movw	r10, r24
     da0:	c7 01       	movw	r24, r14
     da2:	b6 01       	movw	r22, r12
     da4:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
     da8:	a5 01       	movw	r20, r10
     daa:	94 01       	movw	r18, r8
     dac:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__addsf3>
     db0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
     db4:	cb 01       	movw	r24, r22

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 70;
		if(power_difference > max)
     db6:	67 34       	cpi	r22, 0x47	; 71
     db8:	71 05       	cpc	r23, r1
     dba:	14 f0       	brlt	.+4      	; 0xdc0 <motorControl+0x1e0>
			power_difference = max;
     dbc:	86 e4       	ldi	r24, 0x46	; 70
     dbe:	90 e0       	ldi	r25, 0x00	; 0
		if(power_difference < -max)
     dc0:	8a 3b       	cpi	r24, 0xBA	; 186
     dc2:	2f ef       	ldi	r18, 0xFF	; 255
     dc4:	92 07       	cpc	r25, r18
     dc6:	14 f4       	brge	.+4      	; 0xdcc <motorControl+0x1ec>
			power_difference = -max;
     dc8:	8a eb       	ldi	r24, 0xBA	; 186
     dca:	9f ef       	ldi	r25, 0xFF	; 255

		if(power_difference < 0)
     dcc:	99 23       	and	r25, r25
     dce:	3c f4       	brge	.+14     	; 0xdde <motorControl+0x1fe>
			set_motors(max+power_difference, max);
     dd0:	66 e4       	ldi	r22, 0x46	; 70
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	8a 5b       	subi	r24, 0xBA	; 186
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     ddc:	53 c0       	rjmp	.+166    	; 0xe84 <motorControl+0x2a4>
		else
			set_motors(max, max-power_difference);
     dde:	66 e4       	ldi	r22, 0x46	; 70
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	68 1b       	sub	r22, r24
     de4:	79 0b       	sbc	r23, r25
     de6:	86 e4       	ldi	r24, 0x46	; 70
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     dee:	4a c0       	rjmp	.+148    	; 0xe84 <motorControl+0x2a4>
		
	}
	
	
	else if(x == 'B'){																																							//Reverse while following the line
     df0:	12 34       	cpi	r17, 0x42	; 66
     df2:	09 f5       	brne	.+66     	; 0xe36 <motorControl+0x256>
		set_motors(-50,-50);
     df4:	6e ec       	ldi	r22, 0xCE	; 206
     df6:	7f ef       	ldi	r23, 0xFF	; 255
     df8:	8e ec       	ldi	r24, 0xCE	; 206
     dfa:	9f ef       	ldi	r25, 0xFF	; 255
     dfc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		
		if (sensors[3] >=Refrence_value)
     e00:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     e04:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     e08:	8e 35       	cpi	r24, 0x5E	; 94
     e0a:	91 40       	sbci	r25, 0x01	; 1
     e0c:	30 f0       	brcs	.+12     	; 0xe1a <motorControl+0x23a>
			set_motors(-50,-55);
     e0e:	69 ec       	ldi	r22, 0xC9	; 201
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	8e ec       	ldi	r24, 0xCE	; 206
     e14:	9f ef       	ldi	r25, 0xFF	; 255
     e16:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		if (sensors[1] >=Refrence_value)
     e1a:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     e1e:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     e22:	8e 35       	cpi	r24, 0x5E	; 94
     e24:	91 40       	sbci	r25, 0x01	; 1
     e26:	70 f1       	brcs	.+92     	; 0xe84 <motorControl+0x2a4>
			set_motors(-55,-50);
     e28:	6e ec       	ldi	r22, 0xCE	; 206
     e2a:	7f ef       	ldi	r23, 0xFF	; 255
     e2c:	89 ec       	ldi	r24, 0xC9	; 201
     e2e:	9f ef       	ldi	r25, 0xFF	; 255
     e30:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     e34:	27 c0       	rjmp	.+78     	; 0xe84 <motorControl+0x2a4>
	}
	
	
	else if(x == 'T'){																																							// Turn around
     e36:	14 35       	cpi	r17, 0x54	; 84
     e38:	a1 f4       	brne	.+40     	; 0xe62 <motorControl+0x282>
		set_motors(-turn_value,turn_value);
     e3a:	6c e3       	ldi	r22, 0x3C	; 60
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	84 ec       	ldi	r24, 0xC4	; 196
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		
		while (sensors[2] <=Refrence_value)
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <motorControl+0x272>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	81 e1       	ldi	r24, 0x11	; 17
     e4c:	92 e0       	ldi	r25, 0x02	; 2
     e4e:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <read_line_sensors_calibrated>
	
	
	else if(x == 'T'){																																							// Turn around
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] <=Refrence_value)
     e52:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     e56:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     e5a:	8f 35       	cpi	r24, 0x5F	; 95
     e5c:	91 40       	sbci	r25, 0x01	; 1
     e5e:	a0 f3       	brcs	.-24     	; 0xe48 <motorControl+0x268>
     e60:	11 c0       	rjmp	.+34     	; 0xe84 <motorControl+0x2a4>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
		
	else if(x == 'P')																																							//Robot stops slowly
     e62:	10 35       	cpi	r17, 0x50	; 80
     e64:	79 f4       	brne	.+30     	; 0xe84 <motorControl+0x2a4>
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <motorControl+0x29c>
		for( int i=50;i>=0;i-=3)
		{
			set_motors(i,i);
     e68:	be 01       	movw	r22, r28
     e6a:	ce 01       	movw	r24, r28
     e6c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
     e70:	84 e0       	ldi	r24, 0x04	; 4
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
		
	else if(x == 'P')																																							//Robot stops slowly
		for( int i=50;i>=0;i-=3)
     e78:	23 97       	sbiw	r28, 0x03	; 3
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <motorControl+0x2a0>
     e7c:	c2 e3       	ldi	r28, 0x32	; 50
     e7e:	d0 e0       	ldi	r29, 0x00	; 0
     e80:	dd 23       	and	r29, r29
     e82:	94 f7       	brge	.-28     	; 0xe68 <motorControl+0x288>
			set_motors(i,i);
			delay(4);
		}
		
		
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	9f 90       	pop	r9
     e98:	8f 90       	pop	r8
     e9a:	08 95       	ret

00000e9c <manualControl>:

void manualControl(){																																							// function for manual control of the robot
static int speed = 0;
static unsigned int counter = 0;

updateDisplay(0,batteryPercentage(),manual);
     e9c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
     ea0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 1e 03 	call	0x63c	; 0x63c <updateDisplay>
	myComs->Update(myComs);
     eae:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <myComs>
     eb2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <myComs+0x1>
     eb6:	fc 01       	movw	r30, r24
     eb8:	ef 58       	subi	r30, 0x8F	; 143
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	01 90       	ld	r0, Z+
     ebe:	f0 81       	ld	r31, Z
     ec0:	e0 2d       	mov	r30, r0
     ec2:	09 95       	icall
	if(myComs->Direction[0] == 1){											// increase speed
     ec4:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     ec8:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     ecc:	85 a9       	ldd	r24, Z+53	; 0x35
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	e1 f5       	brne	.+120    	; 0xf4a <manualControl+0xae>
		set_motors(speed,speed);
     ed2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
     ed6:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
     eda:	bc 01       	movw	r22, r24
     edc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		if(counter % 20 == 0)
     ee0:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2285>
     ee4:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2285+0x1>
     ee8:	9a 01       	movw	r18, r20
     eea:	ad ec       	ldi	r26, 0xCD	; 205
     eec:	bc ec       	ldi	r27, 0xCC	; 204
     eee:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__umulhisi3>
     ef2:	92 95       	swap	r25
     ef4:	82 95       	swap	r24
     ef6:	8f 70       	andi	r24, 0x0F	; 15
     ef8:	89 27       	eor	r24, r25
     efa:	9f 70       	andi	r25, 0x0F	; 15
     efc:	89 27       	eor	r24, r25
     efe:	64 e1       	ldi	r22, 0x14	; 20
     f00:	68 9f       	mul	r22, r24
     f02:	90 01       	movw	r18, r0
     f04:	69 9f       	mul	r22, r25
     f06:	30 0d       	add	r19, r0
     f08:	11 24       	eor	r1, r1
     f0a:	42 17       	cp	r20, r18
     f0c:	53 07       	cpc	r21, r19
     f0e:	49 f4       	brne	.+18     	; 0xf22 <manualControl+0x86>
		{
			speed +=10;
     f10:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
     f14:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
     f18:	0a 96       	adiw	r24, 0x0a	; 10
     f1a:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2284+0x1>
     f1e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2284>
		}
		if(speed > 100)
     f22:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
     f26:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
     f2a:	85 36       	cpi	r24, 0x65	; 101
     f2c:	91 05       	cpc	r25, r1
     f2e:	34 f0       	brlt	.+12     	; 0xf3c <manualControl+0xa0>
		{
			speed = 100;
     f30:	84 e6       	ldi	r24, 0x64	; 100
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2284+0x1>
     f38:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2284>
		}
		counter++;
     f3c:	4f 5f       	subi	r20, 0xFF	; 255
     f3e:	5f 4f       	sbci	r21, 0xFF	; 255
     f40:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2285+0x1>
     f44:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2285>
     f48:	ba c0       	rjmp	.+372    	; 0x10be <manualControl+0x222>
	}
	else if(myComs->Direction[0] == 0 && myComs->Direction[2] == 0)			// decrease speed without button press
     f4a:	81 11       	cpse	r24, r1
     f4c:	3d c0       	rjmp	.+122    	; 0xfc8 <manualControl+0x12c>
     f4e:	97 a9       	ldd	r25, Z+55	; 0x37
     f50:	91 11       	cpse	r25, r1
     f52:	3a c0       	rjmp	.+116    	; 0xfc8 <manualControl+0x12c>
	{
		set_motors(speed,speed);
     f54:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
     f58:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
     f5c:	bc 01       	movw	r22, r24
     f5e:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		if(counter % 20 == 0)
     f62:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2285>
     f66:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2285+0x1>
     f6a:	9a 01       	movw	r18, r20
     f6c:	ad ec       	ldi	r26, 0xCD	; 205
     f6e:	bc ec       	ldi	r27, 0xCC	; 204
     f70:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__umulhisi3>
     f74:	92 95       	swap	r25
     f76:	82 95       	swap	r24
     f78:	8f 70       	andi	r24, 0x0F	; 15
     f7a:	89 27       	eor	r24, r25
     f7c:	9f 70       	andi	r25, 0x0F	; 15
     f7e:	89 27       	eor	r24, r25
     f80:	64 e1       	ldi	r22, 0x14	; 20
     f82:	68 9f       	mul	r22, r24
     f84:	90 01       	movw	r18, r0
     f86:	69 9f       	mul	r22, r25
     f88:	30 0d       	add	r19, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	42 17       	cp	r20, r18
     f8e:	53 07       	cpc	r21, r19
     f90:	49 f4       	brne	.+18     	; 0xfa4 <manualControl+0x108>
		{
			speed-=10;
     f92:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
     f96:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
     f9a:	0a 97       	sbiw	r24, 0x0a	; 10
     f9c:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2284+0x1>
     fa0:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2284>
		}
		if(speed < 1)
     fa4:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
     fa8:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
     fac:	18 16       	cp	r1, r24
     fae:	19 06       	cpc	r1, r25
     fb0:	24 f0       	brlt	.+8      	; 0xfba <manualControl+0x11e>
		{
			speed = 0;
     fb2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <speed.2284+0x1>
     fb6:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <speed.2284>
		}
		counter++;
     fba:	4f 5f       	subi	r20, 0xFF	; 255
     fbc:	5f 4f       	sbci	r21, 0xFF	; 255
     fbe:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2285+0x1>
     fc2:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2285>
     fc6:	7b c0       	rjmp	.+246    	; 0x10be <manualControl+0x222>
	}
	
	else if(myComs->Direction[2] == 1){										// Backwards(decrease speed)				
     fc8:	97 a9       	ldd	r25, Z+55	; 0x37
     fca:	91 30       	cpi	r25, 0x01	; 1
     fcc:	e1 f5       	brne	.+120    	; 0x1046 <manualControl+0x1aa>
		set_motors(speed,speed);
     fce:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
     fd2:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
     fd6:	bc 01       	movw	r22, r24
     fd8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		if(counter % 20 == 0)
     fdc:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2285>
     fe0:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2285+0x1>
     fe4:	9a 01       	movw	r18, r20
     fe6:	ad ec       	ldi	r26, 0xCD	; 205
     fe8:	bc ec       	ldi	r27, 0xCC	; 204
     fea:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__umulhisi3>
     fee:	92 95       	swap	r25
     ff0:	82 95       	swap	r24
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	89 27       	eor	r24, r25
     ff6:	9f 70       	andi	r25, 0x0F	; 15
     ff8:	89 27       	eor	r24, r25
     ffa:	64 e1       	ldi	r22, 0x14	; 20
     ffc:	68 9f       	mul	r22, r24
     ffe:	90 01       	movw	r18, r0
    1000:	69 9f       	mul	r22, r25
    1002:	30 0d       	add	r19, r0
    1004:	11 24       	eor	r1, r1
    1006:	42 17       	cp	r20, r18
    1008:	53 07       	cpc	r21, r19
    100a:	49 f4       	brne	.+18     	; 0x101e <manualControl+0x182>
		{
			speed-=10;
    100c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
    1010:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
    1014:	0a 97       	sbiw	r24, 0x0a	; 10
    1016:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2284+0x1>
    101a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2284>
		}
		if(speed < -100)
    101e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
    1022:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
    1026:	8c 39       	cpi	r24, 0x9C	; 156
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	34 f4       	brge	.+12     	; 0x1038 <manualControl+0x19c>
		{
			speed = -100;
    102c:	8c e9       	ldi	r24, 0x9C	; 156
    102e:	9f ef       	ldi	r25, 0xFF	; 255
    1030:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2284+0x1>
    1034:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2284>
		}
		counter++;
    1038:	4f 5f       	subi	r20, 0xFF	; 255
    103a:	5f 4f       	sbci	r21, 0xFF	; 255
    103c:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2285+0x1>
    1040:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2285>
    1044:	3c c0       	rjmp	.+120    	; 0x10be <manualControl+0x222>
	}
	else if(myComs->Direction[0] == 1 && myComs->Direction[2] == 0)			// Increases button speed when below 0
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	d1 f5       	brne	.+116    	; 0x10be <manualControl+0x222>
    104a:	91 11       	cpse	r25, r1
    104c:	38 c0       	rjmp	.+112    	; 0x10be <manualControl+0x222>
	{
		set_motors(speed,speed);
    104e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
    1052:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
    1056:	bc 01       	movw	r22, r24
    1058:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
		if(counter % 20 == 0)
    105c:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2285>
    1060:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2285+0x1>
    1064:	9a 01       	movw	r18, r20
    1066:	ad ec       	ldi	r26, 0xCD	; 205
    1068:	bc ec       	ldi	r27, 0xCC	; 204
    106a:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__umulhisi3>
    106e:	92 95       	swap	r25
    1070:	82 95       	swap	r24
    1072:	8f 70       	andi	r24, 0x0F	; 15
    1074:	89 27       	eor	r24, r25
    1076:	9f 70       	andi	r25, 0x0F	; 15
    1078:	89 27       	eor	r24, r25
    107a:	64 e1       	ldi	r22, 0x14	; 20
    107c:	68 9f       	mul	r22, r24
    107e:	90 01       	movw	r18, r0
    1080:	69 9f       	mul	r22, r25
    1082:	30 0d       	add	r19, r0
    1084:	11 24       	eor	r1, r1
    1086:	42 17       	cp	r20, r18
    1088:	53 07       	cpc	r21, r19
    108a:	49 f4       	brne	.+18     	; 0x109e <manualControl+0x202>
		{
			speed += 10;
    108c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
    1090:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
    1094:	0a 96       	adiw	r24, 0x0a	; 10
    1096:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2284+0x1>
    109a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2284>
		}
		if(speed > -1)
    109e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
    10a2:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
    10a6:	99 23       	and	r25, r25
    10a8:	24 f0       	brlt	.+8      	; 0x10b2 <manualControl+0x216>
		{
			speed = 0;
    10aa:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <speed.2284+0x1>
    10ae:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <speed.2284>
		}
		counter++;
    10b2:	4f 5f       	subi	r20, 0xFF	; 255
    10b4:	5f 4f       	sbci	r21, 0xFF	; 255
    10b6:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2285+0x1>
    10ba:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2285>
	}
	
	if(myComs->Direction[1] == 1){											// turn left
    10be:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
    10c2:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
    10c6:	86 a9       	ldd	r24, Z+54	; 0x36
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	61 f4       	brne	.+24     	; 0x10e4 <manualControl+0x248>
		set_motors(speed/2,speed);
    10cc:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <speed.2284>
    10d0:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <speed.2284+0x1>
    10d4:	cb 01       	movw	r24, r22
    10d6:	77 23       	and	r23, r23
    10d8:	0c f4       	brge	.+2      	; 0x10dc <manualControl+0x240>
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	95 95       	asr	r25
    10de:	87 95       	ror	r24
    10e0:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
	}
	
	if(myComs->Direction[3] == 1){											// turn Right
    10e4:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
    10e8:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
    10ec:	80 ad       	ldd	r24, Z+56	; 0x38
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	69 f4       	brne	.+26     	; 0x110c <manualControl+0x270>
		set_motors(speed,speed/2);
    10f2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2284>
    10f6:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2284+0x1>
    10fa:	bc 01       	movw	r22, r24
    10fc:	99 23       	and	r25, r25
    10fe:	14 f4       	brge	.+4      	; 0x1104 <manualControl+0x268>
    1100:	6f 5f       	subi	r22, 0xFF	; 255
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	75 95       	asr	r23
    1106:	67 95       	ror	r22
    1108:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
    110c:	08 95       	ret

0000110e <Spin>:
	}
}

void Spin(){																// spin fuction 
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
	errorDisplay(slipped,batteryPercentage());
    1112:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
    1116:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 77 03 	call	0x6ee	; 0x6ee <errorDisplay>
	for(int i = 0;i<=255;i++){
    1120:	c0 e0       	ldi	r28, 0x00	; 0
    1122:	d0 e0       	ldi	r29, 0x00	; 0
    1124:	0c c0       	rjmp	.+24     	; 0x113e <Spin+0x30>
		set_motors(i,0-i);
    1126:	66 27       	eor	r22, r22
    1128:	77 27       	eor	r23, r23
    112a:	6c 1b       	sub	r22, r28
    112c:	7d 0b       	sbc	r23, r29
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
	}
}

void Spin(){																// spin fuction 
	errorDisplay(slipped,batteryPercentage());
	for(int i = 0;i<=255;i++){
    113c:	21 96       	adiw	r28, 0x01	; 1
    113e:	cf 3f       	cpi	r28, 0xFF	; 255
    1140:	d1 05       	cpc	r29, r1
    1142:	89 f3       	breq	.-30     	; 0x1126 <Spin+0x18>
    1144:	84 f3       	brlt	.-32     	; 0x1126 <Spin+0x18>
    1146:	c0 e0       	ldi	r28, 0x00	; 0
    1148:	d0 e0       	ldi	r29, 0x00	; 0
    114a:	10 c0       	rjmp	.+32     	; 0x116c <Spin+0x5e>
		set_motors(i,0-i);
		delay(2);
	}
	int count = 0;
	while(myComs->EmergencyStop == 2){
		count++;
    114c:	21 96       	adiw	r28, 0x01	; 1
		if(count % 10000 == 0)
    114e:	ce 01       	movw	r24, r28
    1150:	60 e1       	ldi	r22, 0x10	; 16
    1152:	77 e2       	ldi	r23, 0x27	; 39
    1154:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__divmodhi4>
    1158:	89 2b       	or	r24, r25
    115a:	41 f4       	brne	.+16     	; 0x116c <Spin+0x5e>
		{
			myComs->Update(myComs);
    115c:	f9 01       	movw	r30, r18
    115e:	ef 58       	subi	r30, 0x8F	; 143
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	01 90       	ld	r0, Z+
    1164:	f0 81       	ld	r31, Z
    1166:	e0 2d       	mov	r30, r0
    1168:	c9 01       	movw	r24, r18
    116a:	09 95       	icall
	for(int i = 0;i<=255;i++){
		set_motors(i,0-i);
		delay(2);
	}
	int count = 0;
	while(myComs->EmergencyStop == 2){
    116c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <myComs>
    1170:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <myComs+0x1>
    1174:	f9 01       	movw	r30, r18
    1176:	e5 59       	subi	r30, 0x95	; 149
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 81       	ld	r24, Z
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	31 f3       	breq	.-52     	; 0x114c <Spin+0x3e>
		if(count % 10000 == 0)
		{
			myComs->Update(myComs);
		}
	}
	set_motors(0,0);
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <set_motors>
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <parcoursSearch>:
char route[20] = "_"; 
char routeBack[20];
int routea = 1;

int parcoursSearch(Communications *communications) // go to parcour with left hand rule
{
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	00 d0       	rcall	.+0      	; 0x1198 <parcoursSearch+0x6>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	char richting;
	while(1) 
	{
		
		updateDisplay(0, batteryPercentage(), mazeSolver);
    119c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
    11a0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 1e 03 	call	0x63c	; 0x63c <updateDisplay>
		situatie = lineType();		
    11ae:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lineType>
    11b2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <situatie>
		switch (situatie) 
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	89 30       	cpi	r24, 0x09	; 9
    11ba:	91 05       	cpc	r25, r1
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <parcoursSearch+0x2e>
    11be:	41 c0       	rjmp	.+130    	; 0x1242 <parcoursSearch+0xb0>
    11c0:	fc 01       	movw	r30, r24
    11c2:	ec 5c       	subi	r30, 0xCC	; 204
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	0c 94 77 1d 	jmp	0x3aee	; 0x3aee <__tablejump2__>
		{
			case Straight:
				motorControl('S');
    11ca:	83 e5       	ldi	r24, 0x53	; 83
    11cc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
				break;
    11d0:	38 c0       	rjmp	.+112    	; 0x1242 <parcoursSearch+0xb0>
					
			case Line_end:
				motorControl('T');
    11d2:	84 e5       	ldi	r24, 0x54	; 84
    11d4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
				richting = 'T';
    11d8:	84 e5       	ldi	r24, 0x54	; 84
    11da:	89 83       	std	Y+1, r24	; 0x01
				strncat(route, &richting, 1);
    11dc:	41 e0       	ldi	r20, 0x01	; 1
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	be 01       	movw	r22, r28
    11e2:	6f 5f       	subi	r22, 0xFF	; 255
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	84 e1       	ldi	r24, 0x14	; 20
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strncat>
				break;
    11ee:	29 c0       	rjmp	.+82     	; 0x1242 <parcoursSearch+0xb0>
			case Barcode: // end of parcour
				motorControl('P');
				return 0;
			
			case Straight_right_junction:
				richting = 'S';
    11f0:	83 e5       	ldi	r24, 0x53	; 83
    11f2:	89 83       	std	Y+1, r24	; 0x01
				strncat(route, &richting, 1);
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	be 01       	movw	r22, r28
    11fa:	6f 5f       	subi	r22, 0xFF	; 255
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	84 e1       	ldi	r24, 0x14	; 20
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strncat>
				break;
    1206:	1d c0       	rjmp	.+58     	; 0x1242 <parcoursSearch+0xb0>
			
			case X_junction:
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
				motorControl('L');
    1208:	8c e4       	ldi	r24, 0x4C	; 76
    120a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
				richting = 'L';
    120e:	8c e4       	ldi	r24, 0x4C	; 76
    1210:	89 83       	std	Y+1, r24	; 0x01
				strncat(route, &richting, 1);
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	be 01       	movw	r22, r28
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	84 e1       	ldi	r24, 0x14	; 20
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strncat>
				break;
    1224:	0e c0       	rjmp	.+28     	; 0x1242 <parcoursSearch+0xb0>
			
			case Right_corner:
				motorControl('R');
    1226:	82 e5       	ldi	r24, 0x52	; 82
    1228:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
				richting = 'R';
    122c:	82 e5       	ldi	r24, 0x52	; 82
    122e:	89 83       	std	Y+1, r24	; 0x01
				strncat(route, &richting, 1);
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	be 01       	movw	r22, r28
    1236:	6f 5f       	subi	r22, 0xFF	; 255
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	84 e1       	ldi	r24, 0x14	; 20
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strncat>
		print_character(route[i]);
		}*/
		
		////// find shortest route
		char richting;	
		if (route[strlen(route)-2] == 'T') 
    1242:	e4 e1       	ldi	r30, 0x14	; 20
    1244:	f1 e0       	ldi	r31, 0x01	; 1
    1246:	01 90       	ld	r0, Z+
    1248:	00 20       	and	r0, r0
    124a:	e9 f7       	brne	.-6      	; 0x1246 <parcoursSearch+0xb4>
    124c:	31 97       	sbiw	r30, 0x01	; 1
    124e:	e4 51       	subi	r30, 0x14	; 20
    1250:	f1 40       	sbci	r31, 0x01	; 1
    1252:	df 01       	movw	r26, r30
    1254:	ae 5e       	subi	r26, 0xEE	; 238
    1256:	be 4f       	sbci	r27, 0xFE	; 254
    1258:	8c 91       	ld	r24, X
    125a:	84 35       	cpi	r24, 0x54	; 84
    125c:	09 f0       	breq	.+2      	; 0x1260 <parcoursSearch+0xce>
    125e:	9e cf       	rjmp	.-196    	; 0x119c <parcoursSearch+0xa>
		{
			char char_1 = route[strlen(route)-3];
    1260:	df 01       	movw	r26, r30
    1262:	af 5e       	subi	r26, 0xEF	; 239
    1264:	be 4f       	sbci	r27, 0xFE	; 254
    1266:	8c 91       	ld	r24, X
			char char_2 = route[strlen(route)-1];
    1268:	ed 5e       	subi	r30, 0xED	; 237
    126a:	fe 4f       	sbci	r31, 0xFE	; 254
    126c:	90 81       	ld	r25, Z

			if (char_1 == 'L' && char_2 == 'L') 
    126e:	8c 34       	cpi	r24, 0x4C	; 76
    1270:	29 f4       	brne	.+10     	; 0x127c <parcoursSearch+0xea>
    1272:	9c 34       	cpi	r25, 0x4C	; 76
    1274:	19 f4       	brne	.+6      	; 0x127c <parcoursSearch+0xea>
			{
				richting = 'S';
    1276:	83 e5       	ldi	r24, 0x53	; 83
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	1b c0       	rjmp	.+54     	; 0x12b2 <parcoursSearch+0x120>
			}
			else if (char_1 == 'S' && char_2 == 'L')
    127c:	83 35       	cpi	r24, 0x53	; 83
    127e:	29 f4       	brne	.+10     	; 0x128a <parcoursSearch+0xf8>
    1280:	9c 34       	cpi	r25, 0x4C	; 76
    1282:	19 f4       	brne	.+6      	; 0x128a <parcoursSearch+0xf8>
			{
				richting = 'R';
    1284:	82 e5       	ldi	r24, 0x52	; 82
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	14 c0       	rjmp	.+40     	; 0x12b2 <parcoursSearch+0x120>
			}
			else if (char_1 == 'R' && char_2 == 'L')
    128a:	82 35       	cpi	r24, 0x52	; 82
    128c:	29 f4       	brne	.+10     	; 0x1298 <parcoursSearch+0x106>
    128e:	9c 34       	cpi	r25, 0x4C	; 76
    1290:	19 f4       	brne	.+6      	; 0x1298 <parcoursSearch+0x106>
			{
				richting = 'T';
    1292:	84 e5       	ldi	r24, 0x54	; 84
    1294:	8a 83       	std	Y+2, r24	; 0x02
    1296:	0d c0       	rjmp	.+26     	; 0x12b2 <parcoursSearch+0x120>
			}
			else if (char_1 == 'L' && char_2 == 'R')
    1298:	8c 34       	cpi	r24, 0x4C	; 76
    129a:	29 f4       	brne	.+10     	; 0x12a6 <parcoursSearch+0x114>
    129c:	92 35       	cpi	r25, 0x52	; 82
    129e:	19 f4       	brne	.+6      	; 0x12a6 <parcoursSearch+0x114>
			{
				richting = 'T';
    12a0:	84 e5       	ldi	r24, 0x54	; 84
    12a2:	8a 83       	std	Y+2, r24	; 0x02
    12a4:	06 c0       	rjmp	.+12     	; 0x12b2 <parcoursSearch+0x120>
			}
			else if (char_1 == 'L' && char_2 == 'S')
    12a6:	8c 34       	cpi	r24, 0x4C	; 76
    12a8:	21 f4       	brne	.+8      	; 0x12b2 <parcoursSearch+0x120>
    12aa:	93 35       	cpi	r25, 0x53	; 83
    12ac:	11 f4       	brne	.+4      	; 0x12b2 <parcoursSearch+0x120>
			{
				richting = 'R';
    12ae:	82 e5       	ldi	r24, 0x52	; 82
    12b0:	8a 83       	std	Y+2, r24	; 0x02
			}
			route[strlen(route)-3] = '\0';
    12b2:	e4 e1       	ldi	r30, 0x14	; 20
    12b4:	f1 e0       	ldi	r31, 0x01	; 1
    12b6:	01 90       	ld	r0, Z+
    12b8:	00 20       	and	r0, r0
    12ba:	e9 f7       	brne	.-6      	; 0x12b6 <parcoursSearch+0x124>
    12bc:	34 97       	sbiw	r30, 0x04	; 4
    12be:	10 82       	st	Z, r1
			strncat(route, &richting, 1);
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	be 01       	movw	r22, r28
    12c6:	6e 5f       	subi	r22, 0xFE	; 254
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	84 e1       	ldi	r24, 0x14	; 20
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <strncat>
		}
	}
    12d2:	64 cf       	rjmp	.-312    	; 0x119c <parcoursSearch+0xa>
				richting = 'T';
				strncat(route, &richting, 1);
				break;
					
			case Barcode: // end of parcour
				motorControl('P');
    12d4:	80 e5       	ldi	r24, 0x50	; 80
    12d6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
			strncat(route, &richting, 1);
		}
	}
	routea = 0;	
	return 0;
}
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <parcoursRun>:

// run shortest route
int parcoursRun(char way, Communications *communications) 
{
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	18 2f       	mov	r17, r24
	char richting;
	for (int i = 0; i < strlen(route); i++) 
    12f4:	c0 e0       	ldi	r28, 0x00	; 0
    12f6:	d0 e0       	ldi	r29, 0x00	; 0
    12f8:	34 c0       	rjmp	.+104    	; 0x1362 <parcoursRun+0x7a>
	{
		updateDisplay(0, batteryPercentage(), mazeSolver);
    12fa:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
    12fe:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 1e 03 	call	0x63c	; 0x63c <updateDisplay>
		while (lineType() == Straight)
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <parcoursRun+0x2c>
		{
			motorControl('S');
    130e:	83 e5       	ldi	r24, 0x53	; 83
    1310:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
	{
		updateDisplay(0, batteryPercentage(), mazeSolver);
		while (lineType() == Straight)
    1314:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lineType>
    1318:	88 23       	and	r24, r24
    131a:	c9 f3       	breq	.-14     	; 0x130e <parcoursRun+0x26>
		{
			motorControl('S');
		}
		if (way == 'T') {
    131c:	14 35       	cpi	r17, 0x54	; 84
    131e:	39 f4       	brne	.+14     	; 0x132e <parcoursRun+0x46>
			motorControl(route[i]);
    1320:	fe 01       	movw	r30, r28
    1322:	ec 5e       	subi	r30, 0xEC	; 236
    1324:	fe 4f       	sbci	r31, 0xFE	; 254
    1326:	80 81       	ld	r24, Z
    1328:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
    132c:	19 c0       	rjmp	.+50     	; 0x1360 <parcoursRun+0x78>
		} 
		else if (way == 'B') 
    132e:	12 34       	cpi	r17, 0x42	; 66
    1330:	b9 f4       	brne	.+46     	; 0x1360 <parcoursRun+0x78>
		{
			richting = route[strlen(route)-i-1];
    1332:	e4 e1       	ldi	r30, 0x14	; 20
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	01 90       	ld	r0, Z+
    1338:	00 20       	and	r0, r0
    133a:	e9 f7       	brne	.-6      	; 0x1336 <parcoursRun+0x4e>
    133c:	31 97       	sbiw	r30, 0x01	; 1
    133e:	e4 51       	subi	r30, 0x14	; 20
    1340:	f1 40       	sbci	r31, 0x01	; 1
    1342:	ee 19       	sub	r30, r14
    1344:	ff 09       	sbc	r31, r15
    1346:	ed 5e       	subi	r30, 0xED	; 237
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	80 81       	ld	r24, Z
			switch (richting)
    134c:	8c 34       	cpi	r24, 0x4C	; 76
    134e:	19 f0       	breq	.+6      	; 0x1356 <parcoursRun+0x6e>
    1350:	82 35       	cpi	r24, 0x52	; 82
    1352:	19 f0       	breq	.+6      	; 0x135a <parcoursRun+0x72>
    1354:	03 c0       	rjmp	.+6      	; 0x135c <parcoursRun+0x74>
			{
				case 'R':
					richting = 'L';
					break;
				case 'L':
					richting = 'R';
    1356:	82 e5       	ldi	r24, 0x52	; 82
					break;
    1358:	01 c0       	rjmp	.+2      	; 0x135c <parcoursRun+0x74>
		{
			richting = route[strlen(route)-i-1];
			switch (richting)
			{
				case 'R':
					richting = 'L';
    135a:	8c e4       	ldi	r24, 0x4C	; 76
					break;
				case 'L':
					richting = 'R';
					break;
			}
			motorControl(richting);
    135c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>

// run shortest route
int parcoursRun(char way, Communications *communications) 
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
    1360:	21 96       	adiw	r28, 0x01	; 1
    1362:	e4 e1       	ldi	r30, 0x14	; 20
    1364:	f1 e0       	ldi	r31, 0x01	; 1
    1366:	01 90       	ld	r0, Z+
    1368:	00 20       	and	r0, r0
    136a:	e9 f7       	brne	.-6      	; 0x1366 <parcoursRun+0x7e>
    136c:	31 97       	sbiw	r30, 0x01	; 1
    136e:	e4 51       	subi	r30, 0x14	; 20
    1370:	f1 40       	sbci	r31, 0x01	; 1
    1372:	7e 01       	movw	r14, r28
    1374:	ce 17       	cp	r28, r30
    1376:	df 07       	cpc	r29, r31
    1378:	08 f4       	brcc	.+2      	; 0x137c <parcoursRun+0x94>
    137a:	bf cf       	rjmp	.-130    	; 0x12fa <parcoursRun+0x12>
			}
			motorControl(richting);
		}
	}
	return 0;
}
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	08 95       	ret

0000138c <parcours>:

int parcours(char way, Communications *communications) 
{
	if (route[0] == '_')// if it is the first time -> parcoursSearch
    138c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <route>
    1390:	9f 35       	cpi	r25, 0x5F	; 95
    1392:	59 f4       	brne	.+22     	; 0x13aa <parcours+0x1e>
	{		
		memset(route,0,sizeof route);
    1394:	84 e1       	ldi	r24, 0x14	; 20
    1396:	e4 e1       	ldi	r30, 0x14	; 20
    1398:	f1 e0       	ldi	r31, 0x01	; 1
    139a:	df 01       	movw	r26, r30
    139c:	1d 92       	st	X+, r1
    139e:	8a 95       	dec	r24
    13a0:	e9 f7       	brne	.-6      	; 0x139c <parcours+0x10>
		parcoursSearch(communications);
    13a2:	cb 01       	movw	r24, r22
    13a4:	0e 94 c9 08 	call	0x1192	; 0x1192 <parcoursSearch>
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <parcours+0x22>
	} 
	else						// if it isn't the fist time -> run shortest route
	{
		parcoursRun(way, communications); // run shortest route
    13aa:	0e 94 74 09 	call	0x12e8	; 0x12e8 <parcoursRun>
	//	parcoursSearch(communications);
	} 
	return 0;
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	08 95       	ret

000013b4 <swap>:

const char sound[] PROGMEM = ">g32>>c32";


void swap(char *a, char *b) {
    int temp = *a;
    13b4:	fc 01       	movw	r30, r24
    13b6:	20 81       	ld	r18, Z
    *a = *b;
    13b8:	fb 01       	movw	r30, r22
    13ba:	30 81       	ld	r19, Z
    13bc:	fc 01       	movw	r30, r24
    13be:	30 83       	st	Z, r19
    *b = temp;
    13c0:	fb 01       	movw	r30, r22
    13c2:	20 83       	st	Z, r18
    13c4:	08 95       	ret

000013c6 <bubbleSort>:
}

void bubbleSort(char arr[],char orderY[], int n) {
    13c6:	8f 92       	push	r8
    13c8:	9f 92       	push	r9
    13ca:	af 92       	push	r10
    13cc:	bf 92       	push	r11
    13ce:	cf 92       	push	r12
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	8c 01       	movw	r16, r24
    13e0:	5b 01       	movw	r10, r22
    13e2:	6a 01       	movw	r12, r20
    for (int i = 0; i < n - 1; i++) {
    13e4:	e1 2c       	mov	r14, r1
    13e6:	f1 2c       	mov	r15, r1
    13e8:	28 c0       	rjmp	.+80     	; 0x143a <bubbleSort+0x74>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
    13ea:	f8 01       	movw	r30, r16
    13ec:	ec 0f       	add	r30, r28
    13ee:	fd 1f       	adc	r31, r29
    13f0:	90 81       	ld	r25, Z
    13f2:	4e 01       	movw	r8, r28
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	88 1a       	sub	r8, r24
    13f8:	98 0a       	sbc	r9, r24
    13fa:	d8 01       	movw	r26, r16
    13fc:	a8 0d       	add	r26, r8
    13fe:	b9 1d       	adc	r27, r9
    1400:	8c 91       	ld	r24, X
    1402:	89 17       	cp	r24, r25
    1404:	60 f4       	brcc	.+24     	; 0x141e <bubbleSort+0x58>
                swap(&arr[j], &arr[j + 1]);
    1406:	bd 01       	movw	r22, r26
    1408:	cf 01       	movw	r24, r30
    140a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <swap>
                swap(&orderY[j], &orderY[j + 1]);
    140e:	b5 01       	movw	r22, r10
    1410:	68 0d       	add	r22, r8
    1412:	79 1d       	adc	r23, r9
    1414:	c5 01       	movw	r24, r10
    1416:	8c 0f       	add	r24, r28
    1418:	9d 1f       	adc	r25, r29
    141a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <swap>
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
    141e:	21 96       	adiw	r28, 0x01	; 1
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <bubbleSort+0x60>
    1422:	c0 e0       	ldi	r28, 0x00	; 0
    1424:	d0 e0       	ldi	r29, 0x00	; 0
    1426:	c6 01       	movw	r24, r12
    1428:	8e 19       	sub	r24, r14
    142a:	9f 09       	sbc	r25, r15
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	c8 17       	cp	r28, r24
    1430:	d9 07       	cpc	r29, r25
    1432:	dc f2       	brlt	.-74     	; 0x13ea <bubbleSort+0x24>
    *a = *b;
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	e8 1a       	sub	r14, r24
    1438:	f8 0a       	sbc	r15, r24
    143a:	c6 01       	movw	r24, r12
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	e8 16       	cp	r14, r24
    1440:	f9 06       	cpc	r15, r25
    1442:	7c f3       	brlt	.-34     	; 0x1422 <bubbleSort+0x5c>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	ff 90       	pop	r15
    144e:	ef 90       	pop	r14
    1450:	df 90       	pop	r13
    1452:	cf 90       	pop	r12
    1454:	bf 90       	pop	r11
    1456:	af 90       	pop	r10
    1458:	9f 90       	pop	r9
    145a:	8f 90       	pop	r8
    145c:	08 95       	ret

0000145e <drive>:



void drive(int junctions, piRobot *robot, Communications *myCom)
{
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	6c 01       	movw	r12, r24
    1470:	7a 01       	movw	r14, r20
	Junctions situatie;
	
	motorControl('S');
    1472:	83 e5       	ldi	r24, 0x53	; 83
    1474:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
	int driving = 1;
	int count = 0;//Count for number of junctions to pass
    1478:	00 e0       	ldi	r16, 0x00	; 0
    147a:	10 e0       	ldi	r17, 0x00	; 0
void drive(int junctions, piRobot *robot, Communications *myCom)
{
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
    147c:	c1 e0       	ldi	r28, 0x01	; 1
    147e:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;//Count for number of junctions to pass
	while(driving) {
    1480:	22 c0       	rjmp	.+68     	; 0x14c6 <drive+0x68>
		situatie = lineType();
    1482:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lineType>
		switch (situatie) {
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	49 f0       	breq	.+18     	; 0x149c <drive+0x3e>
    148a:	20 f0       	brcs	.+8      	; 0x1494 <drive+0x36>
    148c:	83 50       	subi	r24, 0x03	; 3
    148e:	86 30       	cpi	r24, 0x06	; 6
    1490:	d0 f4       	brcc	.+52     	; 0x14c6 <drive+0x68>
    1492:	04 c0       	rjmp	.+8      	; 0x149c <drive+0x3e>
			case Barcode: // end of parcour
			
				break;
			
			case Straight:
				motorControl('S');
    1494:	83 e5       	ldi	r24, 0x53	; 83
    1496:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
				break;
    149a:	15 c0       	rjmp	.+42     	; 0x14c6 <drive+0x68>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
    149c:	0f 5f       	subi	r16, 0xFF	; 255
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
				motorControl('S');
    14a0:	83 e5       	ldi	r24, 0x53	; 83
    14a2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
				if(count == junctions)
    14a6:	0c 15       	cp	r16, r12
    14a8:	1d 05       	cpc	r17, r13
    14aa:	29 f4       	brne	.+10     	; 0x14b6 <drive+0x58>
				{
					motorControl('P');
    14ac:	80 e5       	ldi	r24, 0x50	; 80
    14ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					driving = 0;
    14b2:	c0 e0       	ldi	r28, 0x00	; 0
    14b4:	d0 e0       	ldi	r29, 0x00	; 0
				}
				myCom->Update(myCom);
    14b6:	f7 01       	movw	r30, r14
    14b8:	ef 58       	subi	r30, 0x8F	; 143
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	01 90       	ld	r0, Z+
    14be:	f0 81       	ld	r31, Z
    14c0:	e0 2d       	mov	r30, r0
    14c2:	c7 01       	movw	r24, r14
    14c4:	09 95       	icall
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
	int count = 0;//Count for number of junctions to pass
	while(driving) {
    14c6:	20 97       	sbiw	r28, 0x00	; 0
    14c8:	e1 f6       	brne	.-72     	; 0x1482 <drive+0x24>
				}
				myCom->Update(myCom);
				break;	
		}
	}
}
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	cf 90       	pop	r12
    14da:	08 95       	ret

000014dc <waitForTurn>:

void waitForTurn()
{
    14dc:	cf 93       	push	r28
	Junctions line;
	line = lineType();
    14de:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lineType>
    14e2:	c8 2f       	mov	r28, r24
    14e4:	8f e0       	ldi	r24, 0x0F	; 15
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <waitForTurn+0x18>
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
	{
		line  = lineType();
    14ee:	0e 94 ee 04 	call	0x9dc	; 0x9dc <lineType>
    14f2:	c8 2f       	mov	r28, r24
void waitForTurn()
{
	Junctions line;
	line = lineType();
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
    14f4:	c1 11       	cpse	r28, r1
    14f6:	fb cf       	rjmp	.-10     	; 0x14ee <waitForTurn+0x12>
	{
		line  = lineType();
	}
	motorControl('N');
    14f8:	8e e4       	ldi	r24, 0x4E	; 78
    14fa:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
}
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <turnRobot>:

void turnRobot(char tdirection, piRobot *myRobot)
{
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	c8 2f       	mov	r28, r24
    150e:	8b 01       	movw	r16, r22
    int changing = 1;
    1510:	ee 24       	eor	r14, r14
    1512:	e3 94       	inc	r14
    1514:	f1 2c       	mov	r15, r1

    while(changing==1)
    1516:	a6 c0       	rjmp	.+332    	; 0x1664 <turnRobot+0x162>
    {
		
        switch(myRobot->direction)
    1518:	f8 01       	movw	r30, r16
    151a:	84 81       	ldd	r24, Z+4	; 0x04
    151c:	8e 34       	cpi	r24, 0x4E	; 78
    151e:	59 f0       	breq	.+22     	; 0x1536 <turnRobot+0x34>
    1520:	18 f4       	brcc	.+6      	; 0x1528 <turnRobot+0x26>
    1522:	85 34       	cpi	r24, 0x45	; 69
    1524:	69 f1       	breq	.+90     	; 0x1580 <turnRobot+0x7e>
    1526:	98 c0       	rjmp	.+304    	; 0x1658 <turnRobot+0x156>
    1528:	83 35       	cpi	r24, 0x53	; 83
    152a:	09 f4       	brne	.+2      	; 0x152e <turnRobot+0x2c>
    152c:	4e c0       	rjmp	.+156    	; 0x15ca <turnRobot+0xc8>
    152e:	87 35       	cpi	r24, 0x57	; 87
    1530:	09 f4       	brne	.+2      	; 0x1534 <turnRobot+0x32>
    1532:	6f c0       	rjmp	.+222    	; 0x1612 <turnRobot+0x110>
    1534:	91 c0       	rjmp	.+290    	; 0x1658 <turnRobot+0x156>
        {
            case 'N':
                if(tdirection == 'E')
    1536:	c5 34       	cpi	r28, 0x45	; 69
    1538:	49 f4       	brne	.+18     	; 0x154c <turnRobot+0x4a>
                {
                    motorControl('R');
    153a:	82 e5       	ldi	r24, 0x52	; 82
    153c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    1540:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'E';
    1544:	85 e4       	ldi	r24, 0x45	; 69
    1546:	f8 01       	movw	r30, r16
    1548:	84 83       	std	Z+4, r24	; 0x04
    154a:	86 c0       	rjmp	.+268    	; 0x1658 <turnRobot+0x156>
                }
                else if(tdirection == 'W')
    154c:	c7 35       	cpi	r28, 0x57	; 87
    154e:	49 f4       	brne	.+18     	; 0x1562 <turnRobot+0x60>
                {
                    motorControl('L');
    1550:	8c e4       	ldi	r24, 0x4C	; 76
    1552:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    1556:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'W';
    155a:	87 e5       	ldi	r24, 0x57	; 87
    155c:	f8 01       	movw	r30, r16
    155e:	84 83       	std	Z+4, r24	; 0x04
    1560:	7b c0       	rjmp	.+246    	; 0x1658 <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    1562:	c3 35       	cpi	r28, 0x53	; 83
    1564:	09 f0       	breq	.+2      	; 0x1568 <turnRobot+0x66>
    1566:	78 c0       	rjmp	.+240    	; 0x1658 <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    1568:	8c e4       	ldi	r24, 0x4C	; 76
    156a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
    156e:	8c e4       	ldi	r24, 0x4C	; 76
    1570:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    1574:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'S';
    1578:	83 e5       	ldi	r24, 0x53	; 83
    157a:	f8 01       	movw	r30, r16
    157c:	84 83       	std	Z+4, r24	; 0x04
    157e:	6c c0       	rjmp	.+216    	; 0x1658 <turnRobot+0x156>
                }
                break;
            case 'E':
                if(tdirection == 'S')
    1580:	c3 35       	cpi	r28, 0x53	; 83
    1582:	49 f4       	brne	.+18     	; 0x1596 <turnRobot+0x94>
                {
                    motorControl('R');
    1584:	82 e5       	ldi	r24, 0x52	; 82
    1586:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    158a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'S';
    158e:	83 e5       	ldi	r24, 0x53	; 83
    1590:	f8 01       	movw	r30, r16
    1592:	84 83       	std	Z+4, r24	; 0x04
    1594:	61 c0       	rjmp	.+194    	; 0x1658 <turnRobot+0x156>
                }
                else if(tdirection == 'W')
    1596:	c7 35       	cpi	r28, 0x57	; 87
    1598:	49 f4       	brne	.+18     	; 0x15ac <turnRobot+0xaa>
                {
                    motorControl('L');
    159a:	8c e4       	ldi	r24, 0x4C	; 76
    159c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    15a0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'W';
    15a4:	87 e5       	ldi	r24, 0x57	; 87
    15a6:	f8 01       	movw	r30, r16
    15a8:	84 83       	std	Z+4, r24	; 0x04
    15aa:	56 c0       	rjmp	.+172    	; 0x1658 <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    15ac:	c3 35       	cpi	r28, 0x53	; 83
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <turnRobot+0xb0>
    15b0:	53 c0       	rjmp	.+166    	; 0x1658 <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    15b2:	8c e4       	ldi	r24, 0x4C	; 76
    15b4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
    15b8:	8c e4       	ldi	r24, 0x4C	; 76
    15ba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    15be:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'S';
    15c2:	83 e5       	ldi	r24, 0x53	; 83
    15c4:	f8 01       	movw	r30, r16
    15c6:	84 83       	std	Z+4, r24	; 0x04
    15c8:	47 c0       	rjmp	.+142    	; 0x1658 <turnRobot+0x156>
                }
                break;
            case 'S':
                if(tdirection == 'W')
    15ca:	c7 35       	cpi	r28, 0x57	; 87
    15cc:	49 f4       	brne	.+18     	; 0x15e0 <turnRobot+0xde>
                {
                    motorControl('R');
    15ce:	82 e5       	ldi	r24, 0x52	; 82
    15d0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    15d4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'W';
    15d8:	87 e5       	ldi	r24, 0x57	; 87
    15da:	f8 01       	movw	r30, r16
    15dc:	84 83       	std	Z+4, r24	; 0x04
    15de:	3c c0       	rjmp	.+120    	; 0x1658 <turnRobot+0x156>
                }
                else if(tdirection == 'E')
    15e0:	c5 34       	cpi	r28, 0x45	; 69
    15e2:	49 f4       	brne	.+18     	; 0x15f6 <turnRobot+0xf4>
                {
                    motorControl('L');
    15e4:	8c e4       	ldi	r24, 0x4C	; 76
    15e6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    15ea:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'E';
    15ee:	85 e4       	ldi	r24, 0x45	; 69
    15f0:	f8 01       	movw	r30, r16
    15f2:	84 83       	std	Z+4, r24	; 0x04
    15f4:	31 c0       	rjmp	.+98     	; 0x1658 <turnRobot+0x156>
                }
                else if(tdirection == 'N')
    15f6:	ce 34       	cpi	r28, 0x4E	; 78
    15f8:	79 f5       	brne	.+94     	; 0x1658 <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    15fa:	8c e4       	ldi	r24, 0x4C	; 76
    15fc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
    1600:	8c e4       	ldi	r24, 0x4C	; 76
    1602:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    1606:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'N';
    160a:	8e e4       	ldi	r24, 0x4E	; 78
    160c:	f8 01       	movw	r30, r16
    160e:	84 83       	std	Z+4, r24	; 0x04
    1610:	23 c0       	rjmp	.+70     	; 0x1658 <turnRobot+0x156>
                }
                break;
            case 'W':
                if(tdirection == 'N')
    1612:	ce 34       	cpi	r28, 0x4E	; 78
    1614:	49 f4       	brne	.+18     	; 0x1628 <turnRobot+0x126>
                {
					
                    motorControl('R');
    1616:	82 e5       	ldi	r24, 0x52	; 82
    1618:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    161c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'N';
    1620:	8e e4       	ldi	r24, 0x4E	; 78
    1622:	f8 01       	movw	r30, r16
    1624:	84 83       	std	Z+4, r24	; 0x04
    1626:	18 c0       	rjmp	.+48     	; 0x1658 <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    1628:	c3 35       	cpi	r28, 0x53	; 83
    162a:	49 f4       	brne	.+18     	; 0x163e <turnRobot+0x13c>
                {
	                motorControl('L');
    162c:	8c e4       	ldi	r24, 0x4C	; 76
    162e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
	                waitForTurn();
    1632:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
	                myRobot->direction = 'S';
    1636:	83 e5       	ldi	r24, 0x53	; 83
    1638:	f8 01       	movw	r30, r16
    163a:	84 83       	std	Z+4, r24	; 0x04
    163c:	0d c0       	rjmp	.+26     	; 0x1658 <turnRobot+0x156>
                }
                else if(tdirection == 'E')
    163e:	c5 34       	cpi	r28, 0x45	; 69
    1640:	59 f4       	brne	.+22     	; 0x1658 <turnRobot+0x156>
                {
                    motorControl('L');
    1642:	8c e4       	ldi	r24, 0x4C	; 76
    1644:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					motorControl('L');
    1648:	8c e4       	ldi	r24, 0x4C	; 76
    164a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
					waitForTurn();
    164e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <waitForTurn>
                    myRobot->direction = 'E';
    1652:	85 e4       	ldi	r24, 0x45	; 69
    1654:	f8 01       	movw	r30, r16
    1656:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
				if(myRobot->direction == tdirection)
    1658:	f8 01       	movw	r30, r16
    165a:	84 81       	ldd	r24, Z+4	; 0x04
    165c:	c8 13       	cpse	r28, r24
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <turnRobot+0x162>
				{
					changing = 0;
    1660:	e1 2c       	mov	r14, r1
    1662:	f1 2c       	mov	r15, r1

void turnRobot(char tdirection, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	ef 16       	cp	r14, r31
    1668:	f1 04       	cpc	r15, r1
    166a:	09 f4       	brne	.+2      	; 0x166e <turnRobot+0x16c>
    166c:	55 cf       	rjmp	.-342    	; 0x1518 <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
    166e:	cf 91       	pop	r28
    1670:	1f 91       	pop	r17
    1672:	0f 91       	pop	r16
    1674:	ff 90       	pop	r15
    1676:	ef 90       	pop	r14
    1678:	08 95       	ret

0000167a <moveX>:


void moveX(int orderPos, piRobot *robot, Communications *myCom)
{
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
	
    int junctions;
	
    if(robot->posX != orderPos)
    1686:	fb 01       	movw	r30, r22
    1688:	20 81       	ld	r18, Z
    168a:	31 81       	ldd	r19, Z+1	; 0x01
    168c:	28 17       	cp	r18, r24
    168e:	39 07       	cpc	r19, r25
    1690:	d9 f0       	breq	.+54     	; 0x16c8 <moveX+0x4e>
    1692:	7a 01       	movw	r14, r20
    1694:	eb 01       	movw	r28, r22
    1696:	8c 01       	movw	r16, r24
    {
		
        if(robot->posX < orderPos)
    1698:	28 17       	cp	r18, r24
    169a:	39 07       	cpc	r19, r25
    169c:	54 f4       	brge	.+20     	; 0x16b2 <moveX+0x38>
        {
            turnRobot('W', robot);
    169e:	87 e5       	ldi	r24, 0x57	; 87
    16a0:	0e 94 81 0a 	call	0x1502	; 0x1502 <turnRobot>
            junctions = orderPos-robot->posX;
    16a4:	88 81       	ld	r24, Y
    16a6:	99 81       	ldd	r25, Y+1	; 0x01
    16a8:	98 01       	movw	r18, r16
    16aa:	28 1b       	sub	r18, r24
    16ac:	39 0b       	sbc	r19, r25
    16ae:	c9 01       	movw	r24, r18
    16b0:	07 c0       	rjmp	.+14     	; 0x16c0 <moveX+0x46>
        }
        else{
            turnRobot('E', robot);
    16b2:	85 e4       	ldi	r24, 0x45	; 69
    16b4:	0e 94 81 0a 	call	0x1502	; 0x1502 <turnRobot>
            junctions = robot->posX - orderPos;
    16b8:	88 81       	ld	r24, Y
    16ba:	99 81       	ldd	r25, Y+1	; 0x01
    16bc:	80 1b       	sub	r24, r16
    16be:	91 0b       	sbc	r25, r17
        }
		drive(junctions, robot, myCom);
    16c0:	a7 01       	movw	r20, r14
    16c2:	be 01       	movw	r22, r28
    16c4:	0e 94 2f 0a 	call	0x145e	; 0x145e <drive>
    }
}
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	ff 90       	pop	r15
    16d2:	ef 90       	pop	r14
    16d4:	08 95       	ret

000016d6 <moveY>:

void moveY(int orderPos, piRobot *robot, Communications *myCom)
{
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
    16e2:	fb 01       	movw	r30, r22
    16e4:	22 81       	ldd	r18, Z+2	; 0x02
    16e6:	33 81       	ldd	r19, Z+3	; 0x03
    16e8:	28 17       	cp	r18, r24
    16ea:	39 07       	cpc	r19, r25
    16ec:	d9 f0       	breq	.+54     	; 0x1724 <moveY+0x4e>
    16ee:	7a 01       	movw	r14, r20
    16f0:	eb 01       	movw	r28, r22
    16f2:	8c 01       	movw	r16, r24
    {
        if(robot->posY < orderPos)
    16f4:	28 17       	cp	r18, r24
    16f6:	39 07       	cpc	r19, r25
    16f8:	54 f4       	brge	.+20     	; 0x170e <moveY+0x38>
        {
            turnRobot('N', robot);
    16fa:	8e e4       	ldi	r24, 0x4E	; 78
    16fc:	0e 94 81 0a 	call	0x1502	; 0x1502 <turnRobot>
            junctions = orderPos-robot->posY;
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	9b 81       	ldd	r25, Y+3	; 0x03
    1704:	98 01       	movw	r18, r16
    1706:	28 1b       	sub	r18, r24
    1708:	39 0b       	sbc	r19, r25
    170a:	c9 01       	movw	r24, r18
    170c:	07 c0       	rjmp	.+14     	; 0x171c <moveY+0x46>
        }
        else{
            turnRobot('S', robot);
    170e:	83 e5       	ldi	r24, 0x53	; 83
    1710:	0e 94 81 0a 	call	0x1502	; 0x1502 <turnRobot>
            junctions = robot->posY - orderPos;
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	9b 81       	ldd	r25, Y+3	; 0x03
    1718:	80 1b       	sub	r24, r16
    171a:	91 0b       	sbc	r25, r17
        }
            drive(junctions, robot, myCom);
    171c:	a7 01       	movw	r20, r14
    171e:	be 01       	movw	r22, r28
    1720:	0e 94 2f 0a 	call	0x145e	; 0x145e <drive>
        
    }
}
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	08 95       	ret

00001732 <warehouse>:


void warehouse(objective objective, Communications *myCom)
{
    1732:	2f 92       	push	r2
    1734:	3f 92       	push	r3
    1736:	4f 92       	push	r4
    1738:	5f 92       	push	r5
    173a:	6f 92       	push	r6
    173c:	7f 92       	push	r7
    173e:	8f 92       	push	r8
    1740:	9f 92       	push	r9
    1742:	af 92       	push	r10
    1744:	bf 92       	push	r11
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	e7 97       	sbiw	r28, 0x37	; 55
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	f8 2e       	mov	r15, r24
    1768:	8b 01       	movw	r16, r22
 piRobot robot;
 robot.direction = 'W';
    176a:	87 e5       	ldi	r24, 0x57	; 87
    176c:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = 0;
    176e:	1a 82       	std	Y+2, r1	; 0x02
    1770:	19 82       	std	Y+1, r1	; 0x01
 robot.posY = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
 myCom->locationx = 0;
    177a:	fb 01       	movw	r30, r22
    177c:	e2 59       	subi	r30, 0x92	; 146
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	10 82       	st	Z, r1
 myCom-> locationy = 1;
    1782:	31 96       	adiw	r30, 0x01	; 1
    1784:	80 83       	st	Z, r24
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
 //char orderX[]={2,5,4,3,1};
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
    178a:	c1 2c       	mov	r12, r1
    178c:	d1 2c       	mov	r13, r1
 for(int i = 0; i<25;i++)
    178e:	0c c0       	rjmp	.+24     	; 0x17a8 <warehouse+0x76>
 {
 	if(myCom->Orderarx[i] != 0)
    1790:	f8 01       	movw	r30, r16
    1792:	e8 0f       	add	r30, r24
    1794:	f9 1f       	adc	r31, r25
    1796:	ee 5a       	subi	r30, 0xAE	; 174
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	20 81       	ld	r18, Z
    179c:	22 23       	and	r18, r18
    179e:	19 f0       	breq	.+6      	; 0x17a6 <warehouse+0x74>
 	{
 		arraySize++;
    17a0:	2f ef       	ldi	r18, 0xFF	; 255
    17a2:	c2 1a       	sub	r12, r18
    17a4:	d2 0a       	sbc	r13, r18
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	89 31       	cpi	r24, 0x19	; 25
    17aa:	91 05       	cpc	r25, r1
    17ac:	8c f3       	brlt	.-30     	; 0x1790 <warehouse+0x5e>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	18 c0       	rjmp	.+48     	; 0x17e4 <warehouse+0xb2>
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
 {
 	orderX[i] = myCom->Orderarx[i];
    17b4:	d8 01       	movw	r26, r16
    17b6:	a8 0f       	add	r26, r24
    17b8:	b9 1f       	adc	r27, r25
    17ba:	fd 01       	movw	r30, r26
    17bc:	ee 5a       	subi	r30, 0xAE	; 174
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	20 81       	ld	r18, Z
    17c2:	e6 e0       	ldi	r30, 0x06	; 6
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	ec 0f       	add	r30, r28
    17c8:	fd 1f       	adc	r31, r29
    17ca:	e8 0f       	add	r30, r24
    17cc:	f9 1f       	adc	r31, r25
    17ce:	20 83       	st	Z, r18
 	orderY[i] = myCom->Orderary[i];
    17d0:	d9 96       	adiw	r26, 0x39	; 57
    17d2:	2c 91       	ld	r18, X
    17d4:	ef e1       	ldi	r30, 0x1F	; 31
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	ec 0f       	add	r30, r28
    17da:	fd 1f       	adc	r31, r29
    17dc:	e8 0f       	add	r30, r24
    17de:	f9 1f       	adc	r31, r25
    17e0:	20 83       	st	Z, r18
 	if(myCom->Orderarx[i] != 0)
 	{
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	8c 15       	cp	r24, r12
    17e6:	9d 05       	cpc	r25, r13
    17e8:	2c f3       	brlt	.-54     	; 0x17b4 <warehouse+0x82>
 	orderX[i] = myCom->Orderarx[i];
 	orderY[i] = myCom->Orderary[i];
 }


    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
    17ea:	a6 01       	movw	r20, r12
    17ec:	be 01       	movw	r22, r28
    17ee:	61 5e       	subi	r22, 0xE1	; 225
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	ce 01       	movw	r24, r28
    17f4:	06 96       	adiw	r24, 0x06	; 6
    17f6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <bubbleSort>
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
    17fa:	ff 20       	and	r15, r15
    17fc:	09 f4       	brne	.+2      	; 0x1800 <warehouse+0xce>
    17fe:	93 c0       	rjmp	.+294    	; 0x1926 <warehouse+0x1f4>
    1800:	a9 c0       	rjmp	.+338    	; 0x1954 <warehouse+0x222>
	{
		for(int locations = 0; locations<arraySize;locations++)
		{
			float completed = locations;
    1802:	b1 01       	movw	r22, r2
    1804:	03 2c       	mov	r0, r3
    1806:	00 0c       	add	r0, r0
    1808:	88 0b       	sbc	r24, r24
    180a:	99 0b       	sbc	r25, r25
    180c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
    1810:	2b 01       	movw	r4, r22
    1812:	3c 01       	movw	r6, r24
			float total = arraySize;
    1814:	b6 01       	movw	r22, r12
    1816:	0d 2c       	mov	r0, r13
    1818:	00 0c       	add	r0, r0
    181a:	88 0b       	sbc	r24, r24
    181c:	99 0b       	sbc	r25, r25
    181e:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <__floatsisf>
    1822:	4b 01       	movw	r8, r22
    1824:	5c 01       	movw	r10, r24
			
			moveX(orderX[locations], &robot, myCom);
    1826:	0f 2e       	mov	r0, r31
    1828:	f6 e0       	ldi	r31, 0x06	; 6
    182a:	ef 2e       	mov	r14, r31
    182c:	f1 2c       	mov	r15, r1
    182e:	f0 2d       	mov	r31, r0
    1830:	ec 0e       	add	r14, r28
    1832:	fd 1e       	adc	r15, r29
    1834:	e2 0c       	add	r14, r2
    1836:	f3 1c       	adc	r15, r3
    1838:	f7 01       	movw	r30, r14
    183a:	80 81       	ld	r24, Z
    183c:	a8 01       	movw	r20, r16
    183e:	be 01       	movw	r22, r28
    1840:	6f 5f       	subi	r22, 0xFF	; 255
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 3d 0b 	call	0x167a	; 0x167a <moveX>
			robot.posX = orderX[locations];
    184a:	f7 01       	movw	r30, r14
    184c:	80 81       	ld	r24, Z
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	3a 83       	std	Y+2, r19	; 0x02
    1854:	29 83       	std	Y+1, r18	; 0x01
			myCom->locationx = robot.posX;
    1856:	f8 01       	movw	r30, r16
    1858:	e2 59       	subi	r30, 0x92	; 146
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 83       	st	Z, r24
			moveY(orderY[locations], &robot, myCom);
    185e:	0f 2e       	mov	r0, r31
    1860:	ff e1       	ldi	r31, 0x1F	; 31
    1862:	ef 2e       	mov	r14, r31
    1864:	f1 2c       	mov	r15, r1
    1866:	f0 2d       	mov	r31, r0
    1868:	ec 0e       	add	r14, r28
    186a:	fd 1e       	adc	r15, r29
    186c:	e2 0c       	add	r14, r2
    186e:	f3 1c       	adc	r15, r3
    1870:	f7 01       	movw	r30, r14
    1872:	80 81       	ld	r24, Z
    1874:	a8 01       	movw	r20, r16
    1876:	be 01       	movw	r22, r28
    1878:	6f 5f       	subi	r22, 0xFF	; 255
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <moveY>
			robot.posY = orderY[locations];
    1882:	f7 01       	movw	r30, r14
    1884:	80 81       	ld	r24, Z
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	3c 83       	std	Y+4, r19	; 0x04
    188c:	2b 83       	std	Y+3, r18	; 0x03
			myCom->locationy = robot.posY;
    188e:	f8 01       	movw	r30, r16
    1890:	e1 59       	subi	r30, 0x91	; 145
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	80 83       	st	Z, r24
			play_from_program_space(sound);
    1896:	84 e8       	ldi	r24, 0x84	; 132
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 0e 13 	call	0x261c	; 0x261c <play_from_program_space>
    189e:	88 ee       	ldi	r24, 0xE8	; 232
    18a0:	93 e0       	ldi	r25, 0x03	; 3
    18a2:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
			delay(1000);//wait 1 second
			
			myCom->batterylvl = batteryPercentage();
    18a6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
    18aa:	78 01       	movw	r14, r16
    18ac:	fc e6       	ldi	r31, 0x6C	; 108
    18ae:	ef 0e       	add	r14, r31
    18b0:	f1 1c       	adc	r15, r1
    18b2:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
    18b6:	f7 01       	movw	r30, r14
    18b8:	60 83       	st	Z, r22
			myCom->magprocess = (((completed+1)/total)*100);
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	c3 01       	movw	r24, r6
    18c4:	b2 01       	movw	r22, r4
    18c6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <__addsf3>
    18ca:	a5 01       	movw	r20, r10
    18cc:	94 01       	movw	r18, r8
    18ce:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__divsf3>
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	48 ec       	ldi	r20, 0xC8	; 200
    18d8:	52 e4       	ldi	r21, 0x42	; 66
    18da:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <__mulsf3>
    18de:	4b 01       	movw	r8, r22
    18e0:	5c 01       	movw	r10, r24
    18e2:	78 01       	movw	r14, r16
    18e4:	fd e6       	ldi	r31, 0x6D	; 109
    18e6:	ef 0e       	add	r14, r31
    18e8:	f1 1c       	adc	r15, r1
    18ea:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
    18ee:	f7 01       	movw	r30, r14
    18f0:	60 83       	st	Z, r22
			myCom->Update(myCom);
    18f2:	34 96       	adiw	r30, 0x04	; 4
    18f4:	01 90       	ld	r0, Z+
    18f6:	f0 81       	ld	r31, Z
    18f8:	e0 2d       	mov	r30, r0
    18fa:	c8 01       	movw	r24, r16
    18fc:	09 95       	icall
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
    18fe:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <batteryPercentage>
    1902:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
    1906:	2b 01       	movw	r4, r22
    1908:	3c 01       	movw	r6, r24
    190a:	c5 01       	movw	r24, r10
    190c:	b4 01       	movw	r22, r8
    190e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__fixsfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	42 e0       	ldi	r20, 0x02	; 2
    1918:	b2 01       	movw	r22, r4
    191a:	0e 94 1e 03 	call	0x63c	; 0x63c <updateDisplay>

    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
	{
		for(int locations = 0; locations<arraySize;locations++)
    191e:	ff ef       	ldi	r31, 0xFF	; 255
    1920:	2f 1a       	sub	r2, r31
    1922:	3f 0a       	sbc	r3, r31
    1924:	02 c0       	rjmp	.+4      	; 0x192a <warehouse+0x1f8>
    1926:	21 2c       	mov	r2, r1
    1928:	31 2c       	mov	r3, r1
    192a:	2c 14       	cp	r2, r12
    192c:	3d 04       	cpc	r3, r13
    192e:	0c f4       	brge	.+2      	; 0x1932 <warehouse+0x200>
    1930:	68 cf       	rjmp	.-304    	; 0x1802 <warehouse+0xd0>
			myCom->batterylvl = batteryPercentage();
			myCom->magprocess = (((completed+1)/total)*100);
			myCom->Update(myCom);
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
		}
		moveY(1, &robot, myCom);
    1932:	a8 01       	movw	r20, r16
    1934:	be 01       	movw	r22, r28
    1936:	6f 5f       	subi	r22, 0xFF	; 255
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <moveY>
			moveX(1, &robot, myCom);
    1942:	a8 01       	movw	r20, r16
    1944:	be 01       	movw	r22, r28
    1946:	6f 5f       	subi	r22, 0xFF	; 255
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 3d 0b 	call	0x167a	; 0x167a <moveX>
    1952:	44 c0       	rjmp	.+136    	; 0x19dc <warehouse+0x2aa>
			
	}
	else
	{
		static int charged = 0;
		if(charged == 0)
    1954:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <charged.2339>
    1958:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <charged.2339+0x1>
    195c:	89 2b       	or	r24, r25
    195e:	29 f5       	brne	.+74     	; 0x19aa <warehouse+0x278>
		{
			drive(1, &robot, myCom);
    1960:	a8 01       	movw	r20, r16
    1962:	be 01       	movw	r22, r28
    1964:	6f 5f       	subi	r22, 0xFF	; 255
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 2f 0a 	call	0x145e	; 0x145e <drive>
			motorControl('R');
    1970:	82 e5       	ldi	r24, 0x52	; 82
    1972:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
			drive(4, &robot, myCom);
    1976:	a8 01       	movw	r20, r16
    1978:	be 01       	movw	r22, r28
    197a:	6f 5f       	subi	r22, 0xFF	; 255
    197c:	7f 4f       	sbci	r23, 0xFF	; 255
    197e:	84 e0       	ldi	r24, 0x04	; 4
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 2f 0a 	call	0x145e	; 0x145e <drive>
			motorControl('R');
    1986:	82 e5       	ldi	r24, 0x52	; 82
    1988:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
			drive(1, &robot, myCom);
    198c:	a8 01       	movw	r20, r16
    198e:	be 01       	movw	r22, r28
    1990:	6f 5f       	subi	r22, 0xFF	; 255
    1992:	7f 4f       	sbci	r23, 0xFF	; 255
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 2f 0a 	call	0x145e	; 0x145e <drive>
			charged = 1;
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <charged.2339+0x1>
    19a4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <charged.2339>
    19a8:	19 c0       	rjmp	.+50     	; 0x19dc <warehouse+0x2aa>
		}
		else
		{
			motorControl('T');
    19aa:	84 e5       	ldi	r24, 0x54	; 84
    19ac:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
			drive(1, &robot, myCom);
    19b0:	a8 01       	movw	r20, r16
    19b2:	be 01       	movw	r22, r28
    19b4:	6f 5f       	subi	r22, 0xFF	; 255
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 2f 0a 	call	0x145e	; 0x145e <drive>
			motorControl('L');
    19c0:	8c e4       	ldi	r24, 0x4C	; 76
    19c2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
			drive(4, &robot, myCom);
    19c6:	a8 01       	movw	r20, r16
    19c8:	be 01       	movw	r22, r28
    19ca:	6f 5f       	subi	r22, 0xFF	; 255
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	84 e0       	ldi	r24, 0x04	; 4
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 2f 0a 	call	0x145e	; 0x145e <drive>
			motorControl('L');
    19d6:	8c e4       	ldi	r24, 0x4C	; 76
    19d8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <motorControl>
		}
	}
}
    19dc:	e7 96       	adiw	r28, 0x37	; 55
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	df 91       	pop	r29
    19ea:	cf 91       	pop	r28
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	9f 90       	pop	r9
    19fe:	8f 90       	pop	r8
    1a00:	7f 90       	pop	r7
    1a02:	6f 90       	pop	r6
    1a04:	5f 90       	pop	r5
    1a06:	4f 90       	pop	r4
    1a08:	3f 90       	pop	r3
    1a0a:	2f 90       	pop	r2
    1a0c:	08 95       	ret

00001a0e <__subsf3>:
    1a0e:	50 58       	subi	r21, 0x80	; 128

00001a10 <__addsf3>:
    1a10:	bb 27       	eor	r27, r27
    1a12:	aa 27       	eor	r26, r26
    1a14:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__addsf3x>
    1a18:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_round>
    1a1c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__fp_pscA>
    1a20:	38 f0       	brcs	.+14     	; 0x1a30 <__addsf3+0x20>
    1a22:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__fp_pscB>
    1a26:	20 f0       	brcs	.+8      	; 0x1a30 <__addsf3+0x20>
    1a28:	39 f4       	brne	.+14     	; 0x1a38 <__addsf3+0x28>
    1a2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a2c:	19 f4       	brne	.+6      	; 0x1a34 <__addsf3+0x24>
    1a2e:	26 f4       	brtc	.+8      	; 0x1a38 <__addsf3+0x28>
    1a30:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__fp_nan>
    1a34:	0e f4       	brtc	.+2      	; 0x1a38 <__addsf3+0x28>
    1a36:	e0 95       	com	r30
    1a38:	e7 fb       	bst	r30, 7
    1a3a:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_inf>

00001a3e <__addsf3x>:
    1a3e:	e9 2f       	mov	r30, r25
    1a40:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__fp_split3>
    1a44:	58 f3       	brcs	.-42     	; 0x1a1c <__addsf3+0xc>
    1a46:	ba 17       	cp	r27, r26
    1a48:	62 07       	cpc	r22, r18
    1a4a:	73 07       	cpc	r23, r19
    1a4c:	84 07       	cpc	r24, r20
    1a4e:	95 07       	cpc	r25, r21
    1a50:	20 f0       	brcs	.+8      	; 0x1a5a <__addsf3x+0x1c>
    1a52:	79 f4       	brne	.+30     	; 0x1a72 <__addsf3x+0x34>
    1a54:	a6 f5       	brtc	.+104    	; 0x1abe <__addsf3x+0x80>
    1a56:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_zero>
    1a5a:	0e f4       	brtc	.+2      	; 0x1a5e <__addsf3x+0x20>
    1a5c:	e0 95       	com	r30
    1a5e:	0b 2e       	mov	r0, r27
    1a60:	ba 2f       	mov	r27, r26
    1a62:	a0 2d       	mov	r26, r0
    1a64:	0b 01       	movw	r0, r22
    1a66:	b9 01       	movw	r22, r18
    1a68:	90 01       	movw	r18, r0
    1a6a:	0c 01       	movw	r0, r24
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	a0 01       	movw	r20, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	ff 27       	eor	r31, r31
    1a74:	59 1b       	sub	r21, r25
    1a76:	99 f0       	breq	.+38     	; 0x1a9e <__addsf3x+0x60>
    1a78:	59 3f       	cpi	r21, 0xF9	; 249
    1a7a:	50 f4       	brcc	.+20     	; 0x1a90 <__addsf3x+0x52>
    1a7c:	50 3e       	cpi	r21, 0xE0	; 224
    1a7e:	68 f1       	brcs	.+90     	; 0x1ada <__addsf3x+0x9c>
    1a80:	1a 16       	cp	r1, r26
    1a82:	f0 40       	sbci	r31, 0x00	; 0
    1a84:	a2 2f       	mov	r26, r18
    1a86:	23 2f       	mov	r18, r19
    1a88:	34 2f       	mov	r19, r20
    1a8a:	44 27       	eor	r20, r20
    1a8c:	58 5f       	subi	r21, 0xF8	; 248
    1a8e:	f3 cf       	rjmp	.-26     	; 0x1a76 <__addsf3x+0x38>
    1a90:	46 95       	lsr	r20
    1a92:	37 95       	ror	r19
    1a94:	27 95       	ror	r18
    1a96:	a7 95       	ror	r26
    1a98:	f0 40       	sbci	r31, 0x00	; 0
    1a9a:	53 95       	inc	r21
    1a9c:	c9 f7       	brne	.-14     	; 0x1a90 <__addsf3x+0x52>
    1a9e:	7e f4       	brtc	.+30     	; 0x1abe <__addsf3x+0x80>
    1aa0:	1f 16       	cp	r1, r31
    1aa2:	ba 0b       	sbc	r27, r26
    1aa4:	62 0b       	sbc	r22, r18
    1aa6:	73 0b       	sbc	r23, r19
    1aa8:	84 0b       	sbc	r24, r20
    1aaa:	ba f0       	brmi	.+46     	; 0x1ada <__addsf3x+0x9c>
    1aac:	91 50       	subi	r25, 0x01	; 1
    1aae:	a1 f0       	breq	.+40     	; 0x1ad8 <__addsf3x+0x9a>
    1ab0:	ff 0f       	add	r31, r31
    1ab2:	bb 1f       	adc	r27, r27
    1ab4:	66 1f       	adc	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	c2 f7       	brpl	.-16     	; 0x1aac <__addsf3x+0x6e>
    1abc:	0e c0       	rjmp	.+28     	; 0x1ada <__addsf3x+0x9c>
    1abe:	ba 0f       	add	r27, r26
    1ac0:	62 1f       	adc	r22, r18
    1ac2:	73 1f       	adc	r23, r19
    1ac4:	84 1f       	adc	r24, r20
    1ac6:	48 f4       	brcc	.+18     	; 0x1ada <__addsf3x+0x9c>
    1ac8:	87 95       	ror	r24
    1aca:	77 95       	ror	r23
    1acc:	67 95       	ror	r22
    1ace:	b7 95       	ror	r27
    1ad0:	f7 95       	ror	r31
    1ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad4:	08 f0       	brcs	.+2      	; 0x1ad8 <__addsf3x+0x9a>
    1ad6:	b0 cf       	rjmp	.-160    	; 0x1a38 <__addsf3+0x28>
    1ad8:	93 95       	inc	r25
    1ada:	88 0f       	add	r24, r24
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <__addsf3x+0xa2>
    1ade:	99 27       	eor	r25, r25
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	97 95       	ror	r25
    1ae4:	87 95       	ror	r24
    1ae6:	08 95       	ret

00001ae8 <__divsf3>:
    1ae8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__divsf3x>
    1aec:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_round>
    1af0:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__fp_pscB>
    1af4:	58 f0       	brcs	.+22     	; 0x1b0c <__divsf3+0x24>
    1af6:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__fp_pscA>
    1afa:	40 f0       	brcs	.+16     	; 0x1b0c <__divsf3+0x24>
    1afc:	29 f4       	brne	.+10     	; 0x1b08 <__divsf3+0x20>
    1afe:	5f 3f       	cpi	r21, 0xFF	; 255
    1b00:	29 f0       	breq	.+10     	; 0x1b0c <__divsf3+0x24>
    1b02:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_inf>
    1b06:	51 11       	cpse	r21, r1
    1b08:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__fp_szero>
    1b0c:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__fp_nan>

00001b10 <__divsf3x>:
    1b10:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__fp_split3>
    1b14:	68 f3       	brcs	.-38     	; 0x1af0 <__divsf3+0x8>

00001b16 <__divsf3_pse>:
    1b16:	99 23       	and	r25, r25
    1b18:	b1 f3       	breq	.-20     	; 0x1b06 <__divsf3+0x1e>
    1b1a:	55 23       	and	r21, r21
    1b1c:	91 f3       	breq	.-28     	; 0x1b02 <__divsf3+0x1a>
    1b1e:	95 1b       	sub	r25, r21
    1b20:	55 0b       	sbc	r21, r21
    1b22:	bb 27       	eor	r27, r27
    1b24:	aa 27       	eor	r26, r26
    1b26:	62 17       	cp	r22, r18
    1b28:	73 07       	cpc	r23, r19
    1b2a:	84 07       	cpc	r24, r20
    1b2c:	38 f0       	brcs	.+14     	; 0x1b3c <__divsf3_pse+0x26>
    1b2e:	9f 5f       	subi	r25, 0xFF	; 255
    1b30:	5f 4f       	sbci	r21, 0xFF	; 255
    1b32:	22 0f       	add	r18, r18
    1b34:	33 1f       	adc	r19, r19
    1b36:	44 1f       	adc	r20, r20
    1b38:	aa 1f       	adc	r26, r26
    1b3a:	a9 f3       	breq	.-22     	; 0x1b26 <__divsf3_pse+0x10>
    1b3c:	35 d0       	rcall	.+106    	; 0x1ba8 <__divsf3_pse+0x92>
    1b3e:	0e 2e       	mov	r0, r30
    1b40:	3a f0       	brmi	.+14     	; 0x1b50 <__divsf3_pse+0x3a>
    1b42:	e0 e8       	ldi	r30, 0x80	; 128
    1b44:	32 d0       	rcall	.+100    	; 0x1baa <__divsf3_pse+0x94>
    1b46:	91 50       	subi	r25, 0x01	; 1
    1b48:	50 40       	sbci	r21, 0x00	; 0
    1b4a:	e6 95       	lsr	r30
    1b4c:	00 1c       	adc	r0, r0
    1b4e:	ca f7       	brpl	.-14     	; 0x1b42 <__divsf3_pse+0x2c>
    1b50:	2b d0       	rcall	.+86     	; 0x1ba8 <__divsf3_pse+0x92>
    1b52:	fe 2f       	mov	r31, r30
    1b54:	29 d0       	rcall	.+82     	; 0x1ba8 <__divsf3_pse+0x92>
    1b56:	66 0f       	add	r22, r22
    1b58:	77 1f       	adc	r23, r23
    1b5a:	88 1f       	adc	r24, r24
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	26 17       	cp	r18, r22
    1b60:	37 07       	cpc	r19, r23
    1b62:	48 07       	cpc	r20, r24
    1b64:	ab 07       	cpc	r26, r27
    1b66:	b0 e8       	ldi	r27, 0x80	; 128
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <__divsf3_pse+0x56>
    1b6a:	bb 0b       	sbc	r27, r27
    1b6c:	80 2d       	mov	r24, r0
    1b6e:	bf 01       	movw	r22, r30
    1b70:	ff 27       	eor	r31, r31
    1b72:	93 58       	subi	r25, 0x83	; 131
    1b74:	5f 4f       	sbci	r21, 0xFF	; 255
    1b76:	3a f0       	brmi	.+14     	; 0x1b86 <__divsf3_pse+0x70>
    1b78:	9e 3f       	cpi	r25, 0xFE	; 254
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	78 f0       	brcs	.+30     	; 0x1b9c <__divsf3_pse+0x86>
    1b7e:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_inf>
    1b82:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__fp_szero>
    1b86:	5f 3f       	cpi	r21, 0xFF	; 255
    1b88:	e4 f3       	brlt	.-8      	; 0x1b82 <__divsf3_pse+0x6c>
    1b8a:	98 3e       	cpi	r25, 0xE8	; 232
    1b8c:	d4 f3       	brlt	.-12     	; 0x1b82 <__divsf3_pse+0x6c>
    1b8e:	86 95       	lsr	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	b7 95       	ror	r27
    1b96:	f7 95       	ror	r31
    1b98:	9f 5f       	subi	r25, 0xFF	; 255
    1b9a:	c9 f7       	brne	.-14     	; 0x1b8e <__divsf3_pse+0x78>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	91 1d       	adc	r25, r1
    1ba0:	96 95       	lsr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	97 f9       	bld	r25, 7
    1ba6:	08 95       	ret
    1ba8:	e1 e0       	ldi	r30, 0x01	; 1
    1baa:	66 0f       	add	r22, r22
    1bac:	77 1f       	adc	r23, r23
    1bae:	88 1f       	adc	r24, r24
    1bb0:	bb 1f       	adc	r27, r27
    1bb2:	62 17       	cp	r22, r18
    1bb4:	73 07       	cpc	r23, r19
    1bb6:	84 07       	cpc	r24, r20
    1bb8:	ba 07       	cpc	r27, r26
    1bba:	20 f0       	brcs	.+8      	; 0x1bc4 <__divsf3_pse+0xae>
    1bbc:	62 1b       	sub	r22, r18
    1bbe:	73 0b       	sbc	r23, r19
    1bc0:	84 0b       	sbc	r24, r20
    1bc2:	ba 0b       	sbc	r27, r26
    1bc4:	ee 1f       	adc	r30, r30
    1bc6:	88 f7       	brcc	.-30     	; 0x1baa <__divsf3_pse+0x94>
    1bc8:	e0 95       	com	r30
    1bca:	08 95       	ret

00001bcc <__fixsfsi>:
    1bcc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <__fixunssfsi>
    1bd0:	68 94       	set
    1bd2:	b1 11       	cpse	r27, r1
    1bd4:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__fp_szero>
    1bd8:	08 95       	ret

00001bda <__fixunssfsi>:
    1bda:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__fp_splitA>
    1bde:	88 f0       	brcs	.+34     	; 0x1c02 <__fixunssfsi+0x28>
    1be0:	9f 57       	subi	r25, 0x7F	; 127
    1be2:	98 f0       	brcs	.+38     	; 0x1c0a <__fixunssfsi+0x30>
    1be4:	b9 2f       	mov	r27, r25
    1be6:	99 27       	eor	r25, r25
    1be8:	b7 51       	subi	r27, 0x17	; 23
    1bea:	b0 f0       	brcs	.+44     	; 0x1c18 <__fixunssfsi+0x3e>
    1bec:	e1 f0       	breq	.+56     	; 0x1c26 <__fixunssfsi+0x4c>
    1bee:	66 0f       	add	r22, r22
    1bf0:	77 1f       	adc	r23, r23
    1bf2:	88 1f       	adc	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	1a f0       	brmi	.+6      	; 0x1bfe <__fixunssfsi+0x24>
    1bf8:	ba 95       	dec	r27
    1bfa:	c9 f7       	brne	.-14     	; 0x1bee <__fixunssfsi+0x14>
    1bfc:	14 c0       	rjmp	.+40     	; 0x1c26 <__fixunssfsi+0x4c>
    1bfe:	b1 30       	cpi	r27, 0x01	; 1
    1c00:	91 f0       	breq	.+36     	; 0x1c26 <__fixunssfsi+0x4c>
    1c02:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__fp_zero>
    1c06:	b1 e0       	ldi	r27, 0x01	; 1
    1c08:	08 95       	ret
    1c0a:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_zero>
    1c0e:	67 2f       	mov	r22, r23
    1c10:	78 2f       	mov	r23, r24
    1c12:	88 27       	eor	r24, r24
    1c14:	b8 5f       	subi	r27, 0xF8	; 248
    1c16:	39 f0       	breq	.+14     	; 0x1c26 <__fixunssfsi+0x4c>
    1c18:	b9 3f       	cpi	r27, 0xF9	; 249
    1c1a:	cc f3       	brlt	.-14     	; 0x1c0e <__fixunssfsi+0x34>
    1c1c:	86 95       	lsr	r24
    1c1e:	77 95       	ror	r23
    1c20:	67 95       	ror	r22
    1c22:	b3 95       	inc	r27
    1c24:	d9 f7       	brne	.-10     	; 0x1c1c <__fixunssfsi+0x42>
    1c26:	3e f4       	brtc	.+14     	; 0x1c36 <__fixunssfsi+0x5c>
    1c28:	90 95       	com	r25
    1c2a:	80 95       	com	r24
    1c2c:	70 95       	com	r23
    1c2e:	61 95       	neg	r22
    1c30:	7f 4f       	sbci	r23, 0xFF	; 255
    1c32:	8f 4f       	sbci	r24, 0xFF	; 255
    1c34:	9f 4f       	sbci	r25, 0xFF	; 255
    1c36:	08 95       	ret

00001c38 <__floatunsisf>:
    1c38:	e8 94       	clt
    1c3a:	09 c0       	rjmp	.+18     	; 0x1c4e <__floatsisf+0x12>

00001c3c <__floatsisf>:
    1c3c:	97 fb       	bst	r25, 7
    1c3e:	3e f4       	brtc	.+14     	; 0x1c4e <__floatsisf+0x12>
    1c40:	90 95       	com	r25
    1c42:	80 95       	com	r24
    1c44:	70 95       	com	r23
    1c46:	61 95       	neg	r22
    1c48:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4e:	99 23       	and	r25, r25
    1c50:	a9 f0       	breq	.+42     	; 0x1c7c <__floatsisf+0x40>
    1c52:	f9 2f       	mov	r31, r25
    1c54:	96 e9       	ldi	r25, 0x96	; 150
    1c56:	bb 27       	eor	r27, r27
    1c58:	93 95       	inc	r25
    1c5a:	f6 95       	lsr	r31
    1c5c:	87 95       	ror	r24
    1c5e:	77 95       	ror	r23
    1c60:	67 95       	ror	r22
    1c62:	b7 95       	ror	r27
    1c64:	f1 11       	cpse	r31, r1
    1c66:	f8 cf       	rjmp	.-16     	; 0x1c58 <__floatsisf+0x1c>
    1c68:	fa f4       	brpl	.+62     	; 0x1ca8 <__floatsisf+0x6c>
    1c6a:	bb 0f       	add	r27, r27
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <__floatsisf+0x36>
    1c6e:	60 ff       	sbrs	r22, 0
    1c70:	1b c0       	rjmp	.+54     	; 0x1ca8 <__floatsisf+0x6c>
    1c72:	6f 5f       	subi	r22, 0xFF	; 255
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	8f 4f       	sbci	r24, 0xFF	; 255
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	16 c0       	rjmp	.+44     	; 0x1ca8 <__floatsisf+0x6c>
    1c7c:	88 23       	and	r24, r24
    1c7e:	11 f0       	breq	.+4      	; 0x1c84 <__floatsisf+0x48>
    1c80:	96 e9       	ldi	r25, 0x96	; 150
    1c82:	11 c0       	rjmp	.+34     	; 0x1ca6 <__floatsisf+0x6a>
    1c84:	77 23       	and	r23, r23
    1c86:	21 f0       	breq	.+8      	; 0x1c90 <__floatsisf+0x54>
    1c88:	9e e8       	ldi	r25, 0x8E	; 142
    1c8a:	87 2f       	mov	r24, r23
    1c8c:	76 2f       	mov	r23, r22
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <__floatsisf+0x5e>
    1c90:	66 23       	and	r22, r22
    1c92:	71 f0       	breq	.+28     	; 0x1cb0 <__floatsisf+0x74>
    1c94:	96 e8       	ldi	r25, 0x86	; 134
    1c96:	86 2f       	mov	r24, r22
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	2a f0       	brmi	.+10     	; 0x1ca8 <__floatsisf+0x6c>
    1c9e:	9a 95       	dec	r25
    1ca0:	66 0f       	add	r22, r22
    1ca2:	77 1f       	adc	r23, r23
    1ca4:	88 1f       	adc	r24, r24
    1ca6:	da f7       	brpl	.-10     	; 0x1c9e <__floatsisf+0x62>
    1ca8:	88 0f       	add	r24, r24
    1caa:	96 95       	lsr	r25
    1cac:	87 95       	ror	r24
    1cae:	97 f9       	bld	r25, 7
    1cb0:	08 95       	ret

00001cb2 <__fp_inf>:
    1cb2:	97 f9       	bld	r25, 7
    1cb4:	9f 67       	ori	r25, 0x7F	; 127
    1cb6:	80 e8       	ldi	r24, 0x80	; 128
    1cb8:	70 e0       	ldi	r23, 0x00	; 0
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	08 95       	ret

00001cbe <__fp_nan>:
    1cbe:	9f ef       	ldi	r25, 0xFF	; 255
    1cc0:	80 ec       	ldi	r24, 0xC0	; 192
    1cc2:	08 95       	ret

00001cc4 <__fp_pscA>:
    1cc4:	00 24       	eor	r0, r0
    1cc6:	0a 94       	dec	r0
    1cc8:	16 16       	cp	r1, r22
    1cca:	17 06       	cpc	r1, r23
    1ccc:	18 06       	cpc	r1, r24
    1cce:	09 06       	cpc	r0, r25
    1cd0:	08 95       	ret

00001cd2 <__fp_pscB>:
    1cd2:	00 24       	eor	r0, r0
    1cd4:	0a 94       	dec	r0
    1cd6:	12 16       	cp	r1, r18
    1cd8:	13 06       	cpc	r1, r19
    1cda:	14 06       	cpc	r1, r20
    1cdc:	05 06       	cpc	r0, r21
    1cde:	08 95       	ret

00001ce0 <__fp_round>:
    1ce0:	09 2e       	mov	r0, r25
    1ce2:	03 94       	inc	r0
    1ce4:	00 0c       	add	r0, r0
    1ce6:	11 f4       	brne	.+4      	; 0x1cec <__fp_round+0xc>
    1ce8:	88 23       	and	r24, r24
    1cea:	52 f0       	brmi	.+20     	; 0x1d00 <__fp_round+0x20>
    1cec:	bb 0f       	add	r27, r27
    1cee:	40 f4       	brcc	.+16     	; 0x1d00 <__fp_round+0x20>
    1cf0:	bf 2b       	or	r27, r31
    1cf2:	11 f4       	brne	.+4      	; 0x1cf8 <__fp_round+0x18>
    1cf4:	60 ff       	sbrs	r22, 0
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <__fp_round+0x20>
    1cf8:	6f 5f       	subi	r22, 0xFF	; 255
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1d00:	08 95       	ret

00001d02 <__fp_split3>:
    1d02:	57 fd       	sbrc	r21, 7
    1d04:	90 58       	subi	r25, 0x80	; 128
    1d06:	44 0f       	add	r20, r20
    1d08:	55 1f       	adc	r21, r21
    1d0a:	59 f0       	breq	.+22     	; 0x1d22 <__fp_splitA+0x10>
    1d0c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d0e:	71 f0       	breq	.+28     	; 0x1d2c <__fp_splitA+0x1a>
    1d10:	47 95       	ror	r20

00001d12 <__fp_splitA>:
    1d12:	88 0f       	add	r24, r24
    1d14:	97 fb       	bst	r25, 7
    1d16:	99 1f       	adc	r25, r25
    1d18:	61 f0       	breq	.+24     	; 0x1d32 <__fp_splitA+0x20>
    1d1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d1c:	79 f0       	breq	.+30     	; 0x1d3c <__fp_splitA+0x2a>
    1d1e:	87 95       	ror	r24
    1d20:	08 95       	ret
    1d22:	12 16       	cp	r1, r18
    1d24:	13 06       	cpc	r1, r19
    1d26:	14 06       	cpc	r1, r20
    1d28:	55 1f       	adc	r21, r21
    1d2a:	f2 cf       	rjmp	.-28     	; 0x1d10 <__fp_split3+0xe>
    1d2c:	46 95       	lsr	r20
    1d2e:	f1 df       	rcall	.-30     	; 0x1d12 <__fp_splitA>
    1d30:	08 c0       	rjmp	.+16     	; 0x1d42 <__fp_splitA+0x30>
    1d32:	16 16       	cp	r1, r22
    1d34:	17 06       	cpc	r1, r23
    1d36:	18 06       	cpc	r1, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	f1 cf       	rjmp	.-30     	; 0x1d1e <__fp_splitA+0xc>
    1d3c:	86 95       	lsr	r24
    1d3e:	71 05       	cpc	r23, r1
    1d40:	61 05       	cpc	r22, r1
    1d42:	08 94       	sec
    1d44:	08 95       	ret

00001d46 <__fp_zero>:
    1d46:	e8 94       	clt

00001d48 <__fp_szero>:
    1d48:	bb 27       	eor	r27, r27
    1d4a:	66 27       	eor	r22, r22
    1d4c:	77 27       	eor	r23, r23
    1d4e:	cb 01       	movw	r24, r22
    1d50:	97 f9       	bld	r25, 7
    1d52:	08 95       	ret

00001d54 <__mulsf3>:
    1d54:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__mulsf3x>
    1d58:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__fp_round>
    1d5c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__fp_pscA>
    1d60:	38 f0       	brcs	.+14     	; 0x1d70 <__mulsf3+0x1c>
    1d62:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__fp_pscB>
    1d66:	20 f0       	brcs	.+8      	; 0x1d70 <__mulsf3+0x1c>
    1d68:	95 23       	and	r25, r21
    1d6a:	11 f0       	breq	.+4      	; 0x1d70 <__mulsf3+0x1c>
    1d6c:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_inf>
    1d70:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__fp_nan>
    1d74:	11 24       	eor	r1, r1
    1d76:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__fp_szero>

00001d7a <__mulsf3x>:
    1d7a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__fp_split3>
    1d7e:	70 f3       	brcs	.-36     	; 0x1d5c <__mulsf3+0x8>

00001d80 <__mulsf3_pse>:
    1d80:	95 9f       	mul	r25, r21
    1d82:	c1 f3       	breq	.-16     	; 0x1d74 <__mulsf3+0x20>
    1d84:	95 0f       	add	r25, r21
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	55 1f       	adc	r21, r21
    1d8a:	62 9f       	mul	r22, r18
    1d8c:	f0 01       	movw	r30, r0
    1d8e:	72 9f       	mul	r23, r18
    1d90:	bb 27       	eor	r27, r27
    1d92:	f0 0d       	add	r31, r0
    1d94:	b1 1d       	adc	r27, r1
    1d96:	63 9f       	mul	r22, r19
    1d98:	aa 27       	eor	r26, r26
    1d9a:	f0 0d       	add	r31, r0
    1d9c:	b1 1d       	adc	r27, r1
    1d9e:	aa 1f       	adc	r26, r26
    1da0:	64 9f       	mul	r22, r20
    1da2:	66 27       	eor	r22, r22
    1da4:	b0 0d       	add	r27, r0
    1da6:	a1 1d       	adc	r26, r1
    1da8:	66 1f       	adc	r22, r22
    1daa:	82 9f       	mul	r24, r18
    1dac:	22 27       	eor	r18, r18
    1dae:	b0 0d       	add	r27, r0
    1db0:	a1 1d       	adc	r26, r1
    1db2:	62 1f       	adc	r22, r18
    1db4:	73 9f       	mul	r23, r19
    1db6:	b0 0d       	add	r27, r0
    1db8:	a1 1d       	adc	r26, r1
    1dba:	62 1f       	adc	r22, r18
    1dbc:	83 9f       	mul	r24, r19
    1dbe:	a0 0d       	add	r26, r0
    1dc0:	61 1d       	adc	r22, r1
    1dc2:	22 1f       	adc	r18, r18
    1dc4:	74 9f       	mul	r23, r20
    1dc6:	33 27       	eor	r19, r19
    1dc8:	a0 0d       	add	r26, r0
    1dca:	61 1d       	adc	r22, r1
    1dcc:	23 1f       	adc	r18, r19
    1dce:	84 9f       	mul	r24, r20
    1dd0:	60 0d       	add	r22, r0
    1dd2:	21 1d       	adc	r18, r1
    1dd4:	82 2f       	mov	r24, r18
    1dd6:	76 2f       	mov	r23, r22
    1dd8:	6a 2f       	mov	r22, r26
    1dda:	11 24       	eor	r1, r1
    1ddc:	9f 57       	subi	r25, 0x7F	; 127
    1dde:	50 40       	sbci	r21, 0x00	; 0
    1de0:	9a f0       	brmi	.+38     	; 0x1e08 <__mulsf3_pse+0x88>
    1de2:	f1 f0       	breq	.+60     	; 0x1e20 <__mulsf3_pse+0xa0>
    1de4:	88 23       	and	r24, r24
    1de6:	4a f0       	brmi	.+18     	; 0x1dfa <__mulsf3_pse+0x7a>
    1de8:	ee 0f       	add	r30, r30
    1dea:	ff 1f       	adc	r31, r31
    1dec:	bb 1f       	adc	r27, r27
    1dee:	66 1f       	adc	r22, r22
    1df0:	77 1f       	adc	r23, r23
    1df2:	88 1f       	adc	r24, r24
    1df4:	91 50       	subi	r25, 0x01	; 1
    1df6:	50 40       	sbci	r21, 0x00	; 0
    1df8:	a9 f7       	brne	.-22     	; 0x1de4 <__mulsf3_pse+0x64>
    1dfa:	9e 3f       	cpi	r25, 0xFE	; 254
    1dfc:	51 05       	cpc	r21, r1
    1dfe:	80 f0       	brcs	.+32     	; 0x1e20 <__mulsf3_pse+0xa0>
    1e00:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__fp_inf>
    1e04:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__fp_szero>
    1e08:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0a:	e4 f3       	brlt	.-8      	; 0x1e04 <__mulsf3_pse+0x84>
    1e0c:	98 3e       	cpi	r25, 0xE8	; 232
    1e0e:	d4 f3       	brlt	.-12     	; 0x1e04 <__mulsf3_pse+0x84>
    1e10:	86 95       	lsr	r24
    1e12:	77 95       	ror	r23
    1e14:	67 95       	ror	r22
    1e16:	b7 95       	ror	r27
    1e18:	f7 95       	ror	r31
    1e1a:	e7 95       	ror	r30
    1e1c:	9f 5f       	subi	r25, 0xFF	; 255
    1e1e:	c1 f7       	brne	.-16     	; 0x1e10 <__mulsf3_pse+0x90>
    1e20:	fe 2b       	or	r31, r30
    1e22:	88 0f       	add	r24, r24
    1e24:	91 1d       	adc	r25, r1
    1e26:	96 95       	lsr	r25
    1e28:	87 95       	ror	r24
    1e2a:	97 f9       	bld	r25, 7
    1e2c:	08 95       	ret

00001e2e <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1e2e:	ec e7       	ldi	r30, 0x7C	; 124
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8f 7d       	andi	r24, 0xDF	; 223
    1e36:	80 83       	st	Z, r24
    1e38:	08 95       	ret

00001e3a <_ZN15OrangutanAnalog7setModeEh>:
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1e3e:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN15OrangutanAnalog7setModeEh.part.0>
    1e42:	08 95       	ret
    1e44:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1e48:	80 62       	ori	r24, 0x20	; 32
    1e4a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1e4e:	08 95       	ret

00001e50 <_ZN15OrangutanAnalog7getModeEv>:
    1e50:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1e54:	85 fb       	bst	r24, 5
    1e56:	88 27       	eor	r24, r24
    1e58:	80 f9       	bld	r24, 0
    1e5a:	08 95       	ret

00001e5c <_ZN15OrangutanAnalog16conversionResultEv>:
    1e5c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN15OrangutanAnalog7getModeEv>
    1e60:	88 23       	and	r24, r24
    1e62:	21 f0       	breq	.+8      	; 0x1e6c <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1e64:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	08 95       	ret
    1e6c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1e70:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1e74:	08 95       	ret

00001e76 <_ZN15OrangutanAnalog15startConversionEhh>:
    1e76:	80 32       	cpi	r24, 0x20	; 32
    1e78:	a0 f4       	brcc	.+40     	; 0x1ea2 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1e7a:	97 e8       	ldi	r25, 0x87	; 135
    1e7c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e80:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1e84:	66 23       	and	r22, r22
    1e86:	11 f0       	breq	.+4      	; 0x1e8c <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1e88:	90 6c       	ori	r25, 0xC0	; 192
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1e8c:	9f 77       	andi	r25, 0x7F	; 127
    1e8e:	90 64       	ori	r25, 0x40	; 64
    1e90:	90 7e       	andi	r25, 0xE0	; 224
    1e92:	98 2b       	or	r25, r24
    1e94:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1e98:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e9c:	80 64       	ori	r24, 0x40	; 64
    1e9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ea2:	08 95       	ret

00001ea4 <_ZN15OrangutanAnalog4readEh>:
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZN15OrangutanAnalog15startConversionEhh>
    1eaa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1eae:	86 fd       	sbrc	r24, 6
    1eb0:	fc cf       	rjmp	.-8      	; 0x1eaa <_ZN15OrangutanAnalog4readEh+0x6>
    1eb2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN15OrangutanAnalog16conversionResultEv>
    1eb6:	08 95       	ret

00001eb8 <analog_read>:
    1eb8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <_ZN15OrangutanAnalog4readEh>
    1ebc:	08 95       	ret

00001ebe <_ZN15OrangutanAnalog11readAverageEhj>:
    1ebe:	a0 e0       	ldi	r26, 0x00	; 0
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e5 e6       	ldi	r30, 0x65	; 101
    1ec4:	ff e0       	ldi	r31, 0x0F	; 15
    1ec6:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <__prologue_saves__+0x14>
    1eca:	eb 01       	movw	r28, r22
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZN15OrangutanAnalog15startConversionEhh>
    1ed2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ed6:	86 fd       	sbrc	r24, 6
    1ed8:	fc cf       	rjmp	.-8      	; 0x1ed2 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1eda:	8e 01       	movw	r16, r28
    1edc:	c1 2c       	mov	r12, r1
    1ede:	d1 2c       	mov	r13, r1
    1ee0:	76 01       	movw	r14, r12
    1ee2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ee6:	80 64       	ori	r24, 0x40	; 64
    1ee8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1eec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1ef0:	86 fd       	sbrc	r24, 6
    1ef2:	fc cf       	rjmp	.-8      	; 0x1eec <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1ef4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN15OrangutanAnalog16conversionResultEv>
    1ef8:	c8 0e       	add	r12, r24
    1efa:	d9 1e       	adc	r13, r25
    1efc:	e1 1c       	adc	r14, r1
    1efe:	f1 1c       	adc	r15, r1
    1f00:	01 50       	subi	r16, 0x01	; 1
    1f02:	11 09       	sbc	r17, r1
    1f04:	01 15       	cp	r16, r1
    1f06:	11 05       	cpc	r17, r1
    1f08:	61 f7       	brne	.-40     	; 0x1ee2 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	96 95       	lsr	r25
    1f0e:	87 95       	ror	r24
    1f10:	c0 34       	cpi	r28, 0x40	; 64
    1f12:	d1 05       	cpc	r29, r1
    1f14:	38 f4       	brcc	.+14     	; 0x1f24 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1f16:	8c 0d       	add	r24, r12
    1f18:	9d 1d       	adc	r25, r13
    1f1a:	be 01       	movw	r22, r28
    1f1c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__udivmodhi4>
    1f20:	cb 01       	movw	r24, r22
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1f24:	a7 01       	movw	r20, r14
    1f26:	96 01       	movw	r18, r12
    1f28:	28 0f       	add	r18, r24
    1f2a:	39 1f       	adc	r19, r25
    1f2c:	41 1d       	adc	r20, r1
    1f2e:	51 1d       	adc	r21, r1
    1f30:	ca 01       	movw	r24, r20
    1f32:	b9 01       	movw	r22, r18
    1f34:	9e 01       	movw	r18, r28
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    1f3e:	c9 01       	movw	r24, r18
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	e8 e0       	ldi	r30, 0x08	; 8
    1f46:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <__epilogue_restores__+0x14>

00001f4a <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f56:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f5a:	9c 01       	movw	r18, r24
    1f5c:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__umulhisi3>
    1f60:	6b 01       	movw	r12, r22
    1f62:	7c 01       	movw	r14, r24
    1f64:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN15OrangutanAnalog7getModeEv>
    1f68:	88 23       	and	r24, r24
    1f6a:	59 f0       	breq	.+22     	; 0x1f82 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1f6c:	c7 01       	movw	r24, r14
    1f6e:	b6 01       	movw	r22, r12
    1f70:	61 58       	subi	r22, 0x81	; 129
    1f72:	7f 4f       	sbci	r23, 0xFF	; 255
    1f74:	8f 4f       	sbci	r24, 0xFF	; 255
    1f76:	9f 4f       	sbci	r25, 0xFF	; 255
    1f78:	2f ef       	ldi	r18, 0xFF	; 255
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	0a c0       	rjmp	.+20     	; 0x1f96 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1f82:	c7 01       	movw	r24, r14
    1f84:	b6 01       	movw	r22, r12
    1f86:	61 50       	subi	r22, 0x01	; 1
    1f88:	7e 4f       	sbci	r23, 0xFE	; 254
    1f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8e:	2f ef       	ldi	r18, 0xFF	; 255
    1f90:	33 e0       	ldi	r19, 0x03	; 3
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	ff 90       	pop	r15
    1f9e:	ef 90       	pop	r14
    1fa0:	df 90       	pop	r13
    1fa2:	cf 90       	pop	r12
    1fa4:	08 95       	ret

00001fa6 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1fa6:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <_ZN15OrangutanAnalog11readAverageEhj>
    1faa:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN15OrangutanAnalog12toMillivoltsEj>
    1fae:	08 95       	ret

00001fb0 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1fb0:	1f 93       	push	r17
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN15OrangutanAnalog7getModeEv>
    1fba:	18 2f       	mov	r17, r24
    1fbc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <_ZN15OrangutanAnalog7setModeEh.part.0>
    1fc0:	6a e0       	ldi	r22, 0x0A	; 10
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	86 e0       	ldi	r24, 0x06	; 6
    1fc6:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1fca:	ec 01       	movw	r28, r24
    1fcc:	81 2f       	mov	r24, r17
    1fce:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <_ZN15OrangutanAnalog7setModeEh>
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	8c 0f       	add	r24, r28
    1fda:	9d 1f       	adc	r25, r29
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	96 95       	lsr	r25
    1fe0:	87 95       	ror	r24
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	08 95       	ret

00001fea <read_battery_millivolts_3pi>:
    1fea:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1fee:	08 95       	ret

00001ff0 <_ZL16currentCharacterv>:
    1ff0:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL17use_program_space>
    1ff4:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__data_end>
    1ff8:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <__data_end+0x1>
    1ffc:	99 23       	and	r25, r25
    1ffe:	11 f0       	breq	.+4      	; 0x2004 <_ZL16currentCharacterv+0x14>
    2000:	84 91       	lpm	r24, Z
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <_ZL16currentCharacterv+0x16>
    2004:	80 81       	ld	r24, Z
    2006:	2f eb       	ldi	r18, 0xBF	; 191
    2008:	28 0f       	add	r18, r24
    200a:	2a 31       	cpi	r18, 0x1A	; 26
    200c:	10 f4       	brcc	.+4      	; 0x2012 <_ZL16currentCharacterv+0x22>
    200e:	80 5e       	subi	r24, 0xE0	; 224
    2010:	08 95       	ret
    2012:	80 32       	cpi	r24, 0x20	; 32
    2014:	49 f4       	brne	.+18     	; 0x2028 <_ZL16currentCharacterv+0x38>
    2016:	9f 01       	movw	r18, r30
    2018:	2f 5f       	subi	r18, 0xFF	; 255
    201a:	3f 4f       	sbci	r19, 0xFF	; 255
    201c:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    2020:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    2024:	ef 2b       	or	r30, r31
    2026:	31 f7       	brne	.-52     	; 0x1ff4 <_ZL16currentCharacterv+0x4>
    2028:	08 95       	ret

0000202a <_ZL9getNumberv>:
    202a:	1f 93       	push	r17
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZL16currentCharacterv>
    2034:	c0 e0       	ldi	r28, 0x00	; 0
    2036:	d0 e0       	ldi	r29, 0x00	; 0
    2038:	1a e0       	ldi	r17, 0x0A	; 10
    203a:	90 ed       	ldi	r25, 0xD0	; 208
    203c:	98 0f       	add	r25, r24
    203e:	9a 30       	cpi	r25, 0x0A	; 10
    2040:	b8 f4       	brcc	.+46     	; 0x2070 <_ZL9getNumberv+0x46>
    2042:	9e 01       	movw	r18, r28
    2044:	12 9f       	mul	r17, r18
    2046:	e0 01       	movw	r28, r0
    2048:	13 9f       	mul	r17, r19
    204a:	d0 0d       	add	r29, r0
    204c:	11 24       	eor	r1, r1
    204e:	c8 0f       	add	r28, r24
    2050:	d1 1d       	adc	r29, r1
    2052:	87 fd       	sbrc	r24, 7
    2054:	da 95       	dec	r29
    2056:	e0 97       	sbiw	r28, 0x30	; 48
    2058:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
    205c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
    2066:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
    206a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZL16currentCharacterv>
    206e:	e5 cf       	rjmp	.-54     	; 0x203a <_ZL9getNumberv+0x10>
    2070:	ce 01       	movw	r24, r28
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	08 95       	ret

0000207a <_ZN15OrangutanBuzzer5init2Ev>:
    207a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    207e:	83 e2       	ldi	r24, 0x23	; 35
    2080:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    2084:	81 e1       	ldi	r24, 0x11	; 17
    2086:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    208a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    208e:	80 e1       	ldi	r24, 0x10	; 16
    2090:	97 e2       	ldi	r25, 0x27	; 39
    2092:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2096:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    209a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    209e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    20a2:	22 9a       	sbi	0x04, 2	; 4
    20a4:	78 94       	sei
    20a6:	08 95       	ret

000020a8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    20a8:	8f 92       	push	r8
    20aa:	9f 92       	push	r9
    20ac:	af 92       	push	r10
    20ae:	bf 92       	push	r11
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	5c 01       	movw	r10, r24
    20c0:	8b 01       	movw	r16, r22
    20c2:	d4 2e       	mov	r13, r20
    20c4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <buzzerInitialized>
    20c8:	81 11       	cpse	r24, r1
    20ca:	05 c0       	rjmp	.+10     	; 0x20d6 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <buzzerInitialized>
    20d2:	0e 94 3d 10 	call	0x207a	; 0x207a <_ZN15OrangutanBuzzer5init2Ev>
    20d6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    20da:	b7 fe       	sbrs	r11, 7
    20dc:	05 c0       	rjmp	.+10     	; 0x20e8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    20de:	e8 94       	clt
    20e0:	b7 f8       	bld	r11, 7
    20e2:	2a e0       	ldi	r18, 0x0A	; 10
    20e4:	f2 2e       	mov	r15, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    20e8:	ff 24       	eor	r15, r15
    20ea:	f3 94       	inc	r15
    20ec:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    20f0:	2e 2d       	mov	r18, r14
    20f2:	28 7f       	andi	r18, 0xF8	; 248
    20f4:	e2 2e       	mov	r14, r18
    20f6:	48 ec       	ldi	r20, 0xC8	; 200
    20f8:	f4 9e       	mul	r15, r20
    20fa:	c0 01       	movw	r24, r0
    20fc:	11 24       	eor	r1, r1
    20fe:	8a 15       	cp	r24, r10
    2100:	9b 05       	cpc	r25, r11
    2102:	e0 f4       	brcc	.+56     	; 0x213c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    2104:	e5 01       	movw	r28, r10
    2106:	51 e1       	ldi	r21, 0x11	; 17
    2108:	a5 16       	cp	r10, r21
    210a:	57 e2       	ldi	r21, 0x27	; 39
    210c:	b5 06       	cpc	r11, r21
    210e:	10 f0       	brcs	.+4      	; 0x2114 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    2110:	c0 e1       	ldi	r28, 0x10	; 16
    2112:	d7 e2       	ldi	r29, 0x27	; 39
    2114:	be 01       	movw	r22, r28
    2116:	76 95       	lsr	r23
    2118:	67 95       	ror	r22
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	60 58       	subi	r22, 0x80	; 128
    2120:	79 46       	sbci	r23, 0x69	; 105
    2122:	87 46       	sbci	r24, 0x67	; 103
    2124:	9f 4f       	sbci	r25, 0xFF	; 255
    2126:	4e 01       	movw	r8, r28
    2128:	a1 2c       	mov	r10, r1
    212a:	b1 2c       	mov	r11, r1
    212c:	a5 01       	movw	r20, r10
    212e:	94 01       	movw	r18, r8
    2130:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    2134:	59 01       	movw	r10, r18
    2136:	8e 2d       	mov	r24, r14
    2138:	81 60       	ori	r24, 0x01	; 1
    213a:	24 c0       	rjmp	.+72     	; 0x2184 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    213c:	c8 e2       	ldi	r28, 0x28	; 40
    213e:	fc 9e       	mul	r15, r28
    2140:	c0 2d       	mov	r28, r0
    2142:	11 24       	eor	r1, r1
    2144:	d0 e0       	ldi	r29, 0x00	; 0
    2146:	ca 15       	cp	r28, r10
    2148:	db 05       	cpc	r29, r11
    214a:	08 f4       	brcc	.+2      	; 0x214e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    214c:	e5 01       	movw	r28, r10
    214e:	be 01       	movw	r22, r28
    2150:	76 95       	lsr	r23
    2152:	67 95       	ror	r22
    2154:	9e 01       	movw	r18, r28
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	8a e0       	ldi	r24, 0x0A	; 10
    215c:	f8 12       	cpse	r15, r24
    215e:	07 c0       	rjmp	.+14     	; 0x216e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	60 5e       	subi	r22, 0xE0	; 224
    2166:	73 44       	sbci	r23, 0x43	; 67
    2168:	81 44       	sbci	r24, 0x41	; 65
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	06 c0       	rjmp	.+12     	; 0x217a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	60 53       	subi	r22, 0x30	; 48
    2174:	7d 4e       	sbci	r23, 0xED	; 237
    2176:	8c 4e       	sbci	r24, 0xEC	; 236
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    217e:	59 01       	movw	r10, r18
    2180:	8e 2d       	mov	r24, r14
    2182:	82 60       	ori	r24, 0x02	; 2
    2184:	88 2e       	mov	r8, r24
    2186:	2a e0       	ldi	r18, 0x0A	; 10
    2188:	f2 12       	cpse	r15, r18
    218a:	07 c0       	rjmp	.+14     	; 0x219a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    218c:	ce 01       	movw	r24, r28
    218e:	05 96       	adiw	r24, 0x05	; 5
    2190:	6a e0       	ldi	r22, 0x0A	; 10
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__udivmodhi4>
    2198:	eb 01       	movw	r28, r22
    219a:	c8 3e       	cpi	r28, 0xE8	; 232
    219c:	43 e0       	ldi	r20, 0x03	; 3
    219e:	d4 07       	cpc	r29, r20
    21a0:	59 f0       	breq	.+22     	; 0x21b8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    21a2:	98 01       	movw	r18, r16
    21a4:	de 01       	movw	r26, r28
    21a6:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__umulhisi3>
    21aa:	28 ee       	ldi	r18, 0xE8	; 232
    21ac:	33 e0       	ldi	r19, 0x03	; 3
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__divmodsi4>
    21b6:	89 01       	movw	r16, r18
    21b8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    21bc:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    21c0:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    21c4:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    21c8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    21cc:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    21d0:	4d 2d       	mov	r20, r13
    21d2:	40 31       	cpi	r20, 0x10	; 16
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    21d6:	4f e0       	ldi	r20, 0x0F	; 15
    21d8:	80 e1       	ldi	r24, 0x10	; 16
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	84 1b       	sub	r24, r20
    21de:	91 09       	sbc	r25, r1
    21e0:	a9 01       	movw	r20, r18
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    21e4:	56 95       	lsr	r21
    21e6:	47 95       	ror	r20
    21e8:	8a 95       	dec	r24
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    21ec:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    21f0:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    21f4:	10 93 94 01 	sts	0x0194, r17	; 0x800194 <_ZL13buzzerTimeout+0x1>
    21f8:	00 93 93 01 	sts	0x0193, r16	; 0x800193 <_ZL13buzzerTimeout>
    21fc:	86 b3       	in	r24, 0x16	; 22
    21fe:	8f ef       	ldi	r24, 0xFF	; 255
    2200:	86 bb       	out	0x16, r24	; 22
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ff 90       	pop	r15
    2212:	ef 90       	pop	r14
    2214:	df 90       	pop	r13
    2216:	bf 90       	pop	r11
    2218:	af 90       	pop	r10
    221a:	9f 90       	pop	r9
    221c:	8f 90       	pop	r8
    221e:	08 95       	ret

00002220 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    2220:	cf 93       	push	r28
    2222:	df 93       	push	r29
    2224:	eb 01       	movw	r28, r22
    2226:	8f 3f       	cpi	r24, 0xFF	; 255
    2228:	11 f0       	breq	.+4      	; 0x222e <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    222a:	41 11       	cpse	r20, r1
    222c:	05 c0       	rjmp	.+10     	; 0x2238 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	be 01       	movw	r22, r28
    2232:	88 ee       	ldi	r24, 0xE8	; 232
    2234:	93 e0       	ldi	r25, 0x03	; 3
    2236:	43 c0       	rjmp	.+134    	; 0x22be <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    2238:	81 31       	cpi	r24, 0x11	; 17
    223a:	30 f0       	brcs	.+12     	; 0x2248 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    223c:	50 ef       	ldi	r21, 0xF0	; 240
    223e:	58 0f       	add	r21, r24
    2240:	50 36       	cpi	r21, 0x60	; 96
    2242:	18 f0       	brcs	.+6      	; 0x224a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    2244:	5f e5       	ldi	r21, 0x5F	; 95
    2246:	01 c0       	rjmp	.+2      	; 0x224a <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	85 2f       	mov	r24, r21
    224c:	6c e0       	ldi	r22, 0x0C	; 12
    224e:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <__udivmodqi4>
    2252:	68 2f       	mov	r22, r24
    2254:	74 ef       	ldi	r23, 0xF4	; 244
    2256:	76 03       	mulsu	r23, r22
    2258:	90 01       	movw	r18, r0
    225a:	11 24       	eor	r1, r1
    225c:	25 0f       	add	r18, r21
    225e:	31 1d       	adc	r19, r1
    2260:	2c 30       	cpi	r18, 0x0C	; 12
    2262:	31 05       	cpc	r19, r1
    2264:	40 f4       	brcc	.+16     	; 0x2276 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    2266:	f9 01       	movw	r30, r18
    2268:	ee 0f       	add	r30, r30
    226a:	ff 1f       	adc	r31, r31
    226c:	e8 5c       	subi	r30, 0xC8	; 200
    226e:	fe 4f       	sbci	r31, 0xFE	; 254
    2270:	20 81       	ld	r18, Z
    2272:	31 81       	ldd	r19, Z+1	; 0x01
    2274:	02 c0       	rjmp	.+4      	; 0x227a <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	87 30       	cpi	r24, 0x07	; 7
    227c:	81 f0       	breq	.+32     	; 0x229e <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    227e:	08 2e       	mov	r0, r24
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    2282:	22 0f       	add	r18, r18
    2284:	33 1f       	adc	r19, r19
    2286:	0a 94       	dec	r0
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    228a:	82 30       	cpi	r24, 0x02	; 2
    228c:	28 f0       	brcs	.+10     	; 0x2298 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    228e:	c9 01       	movw	r24, r18
    2290:	05 96       	adiw	r24, 0x05	; 5
    2292:	6a e0       	ldi	r22, 0x0A	; 10
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	0c c0       	rjmp	.+24     	; 0x22b0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    2298:	c9 01       	movw	r24, r18
    229a:	90 58       	subi	r25, 0x80	; 128
    229c:	0c c0       	rjmp	.+24     	; 0x22b6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    229e:	c9 01       	movw	r24, r18
    22a0:	36 e0       	ldi	r19, 0x06	; 6
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	3a 95       	dec	r19
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    22aa:	02 96       	adiw	r24, 0x02	; 2
    22ac:	65 e0       	ldi	r22, 0x05	; 5
    22ae:	70 e0       	ldi	r23, 0x00	; 0
    22b0:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__udivmodhi4>
    22b4:	cb 01       	movw	r24, r22
    22b6:	40 31       	cpi	r20, 0x10	; 16
    22b8:	08 f0       	brcs	.+2      	; 0x22bc <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    22ba:	4f e0       	ldi	r20, 0x0F	; 15
    22bc:	be 01       	movw	r22, r28
    22be:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	08 95       	ret

000022c8 <_ZL8nextNotev>:
    22c8:	a2 e0       	ldi	r26, 0x02	; 2
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ea e6       	ldi	r30, 0x6A	; 106
    22ce:	f1 e1       	ldi	r31, 0x11	; 17
    22d0:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__prologue_saves__+0x4>
    22d4:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    22d8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL8staccato>
    22dc:	88 23       	and	r24, r24
    22de:	21 f0       	breq	.+8      	; 0x22e8 <_ZL8nextNotev+0x20>
    22e0:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <_ZL22staccato_rest_duration>
    22e4:	61 11       	cpse	r22, r1
    22e6:	17 c0       	rjmp	.+46     	; 0x2316 <_ZL8nextNotev+0x4e>
    22e8:	77 24       	eor	r7, r7
    22ea:	73 94       	inc	r7
    22ec:	b0 ec       	ldi	r27, 0xC0	; 192
    22ee:	ab 2e       	mov	r10, r27
    22f0:	bd e5       	ldi	r27, 0x5D	; 93
    22f2:	bb 2e       	mov	r11, r27
    22f4:	1a e0       	ldi	r17, 0x0A	; 10
    22f6:	61 2e       	mov	r6, r17
    22f8:	04 e0       	ldi	r16, 0x04	; 4
    22fa:	80 2e       	mov	r8, r16
    22fc:	80 ed       	ldi	r24, 0xD0	; 208
    22fe:	c8 2e       	mov	r12, r24
    2300:	87 e0       	ldi	r24, 0x07	; 7
    2302:	d8 2e       	mov	r13, r24
    2304:	94 e0       	ldi	r25, 0x04	; 4
    2306:	e9 2e       	mov	r14, r25
    2308:	f1 2c       	mov	r15, r1
    230a:	04 ef       	ldi	r16, 0xF4	; 244
    230c:	11 e0       	ldi	r17, 0x01	; 1
    230e:	2f e0       	ldi	r18, 0x0F	; 15
    2310:	42 2e       	mov	r4, r18
    2312:	51 2c       	mov	r5, r1
    2314:	15 c0       	rjmp	.+42     	; 0x2340 <_ZL8nextNotev+0x78>
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	88 ee       	ldi	r24, 0xE8	; 232
    231c:	93 e0       	ldi	r25, 0x03	; 3
    231e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    2322:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    2326:	17 c1       	rjmp	.+558    	; 0x2556 <_ZL8nextNotev+0x28e>
    2328:	86 36       	cpi	r24, 0x66	; 102
    232a:	d4 f5       	brge	.+116    	; 0x23a0 <_ZL8nextNotev+0xd8>
    232c:	81 36       	cpi	r24, 0x61	; 97
    232e:	09 f4       	brne	.+2      	; 0x2332 <_ZL8nextNotev+0x6a>
    2330:	a9 c0       	rjmp	.+338    	; 0x2484 <_ZL8nextNotev+0x1bc>
    2332:	7c f5       	brge	.+94     	; 0x2392 <_ZL8nextNotev+0xca>
    2334:	8c 33       	cpi	r24, 0x3C	; 60
    2336:	09 f4       	brne	.+2      	; 0x233a <_ZL8nextNotev+0x72>
    2338:	60 c0       	rjmp	.+192    	; 0x23fa <_ZL8nextNotev+0x132>
    233a:	8e 33       	cpi	r24, 0x3E	; 62
    233c:	81 f4       	brne	.+32     	; 0x235e <_ZL8nextNotev+0x96>
    233e:	93 94       	inc	r9
    2340:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZL16currentCharacterv>
    2344:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    2348:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    234c:	2f 5f       	subi	r18, 0xFF	; 255
    234e:	3f 4f       	sbci	r19, 0xFF	; 255
    2350:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    2354:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    2358:	85 36       	cpi	r24, 0x65	; 101
    235a:	31 f7       	brne	.-52     	; 0x2328 <_ZL8nextNotev+0x60>
    235c:	52 c0       	rjmp	.+164    	; 0x2402 <_ZL8nextNotev+0x13a>
    235e:	81 32       	cpi	r24, 0x21	; 33
    2360:	09 f0       	breq	.+2      	; 0x2364 <_ZL8nextNotev+0x9c>
    2362:	8b c0       	rjmp	.+278    	; 0x247a <_ZL8nextNotev+0x1b2>
    2364:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    2368:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    236c:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    2370:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    2374:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    2378:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    237c:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    2380:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    2384:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    2388:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <_ZL8staccato>
    238c:	a4 e0       	ldi	r26, 0x04	; 4
    238e:	9a 2e       	mov	r9, r26
    2390:	d7 cf       	rjmp	.-82     	; 0x2340 <_ZL8nextNotev+0x78>
    2392:	83 36       	cpi	r24, 0x63	; 99
    2394:	a1 f1       	breq	.+104    	; 0x23fe <_ZL8nextNotev+0x136>
    2396:	0c f4       	brge	.+2      	; 0x239a <_ZL8nextNotev+0xd2>
    2398:	78 c0       	rjmp	.+240    	; 0x248a <_ZL8nextNotev+0x1c2>
    239a:	10 e0       	ldi	r17, 0x00	; 0
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	77 c0       	rjmp	.+238    	; 0x248e <_ZL8nextNotev+0x1c6>
    23a0:	8d 36       	cpi	r24, 0x6D	; 109
    23a2:	c1 f1       	breq	.+112    	; 0x2414 <_ZL8nextNotev+0x14c>
    23a4:	94 f4       	brge	.+36     	; 0x23ca <_ZL8nextNotev+0x102>
    23a6:	87 36       	cpi	r24, 0x67	; 103
    23a8:	91 f1       	breq	.+100    	; 0x240e <_ZL8nextNotev+0x146>
    23aa:	74 f1       	brlt	.+92     	; 0x2408 <_ZL8nextNotev+0x140>
    23ac:	8c 36       	cpi	r24, 0x6C	; 108
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <_ZL8nextNotev+0xea>
    23b0:	64 c0       	rjmp	.+200    	; 0x247a <_ZL8nextNotev+0x1b2>
    23b2:	0e 94 15 10 	call	0x202a	; 0x202a <_ZL9getNumberv>
    23b6:	bc 01       	movw	r22, r24
    23b8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    23bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    23c0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    23c4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    23c8:	51 c0       	rjmp	.+162    	; 0x246c <_ZL8nextNotev+0x1a4>
    23ca:	82 37       	cpi	r24, 0x72	; 114
    23cc:	c9 f1       	breq	.+114    	; 0x2440 <_ZL8nextNotev+0x178>
    23ce:	4c f4       	brge	.+18     	; 0x23e2 <_ZL8nextNotev+0x11a>
    23d0:	8f 36       	cpi	r24, 0x6F	; 111
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <_ZL8nextNotev+0x10e>
    23d4:	52 c0       	rjmp	.+164    	; 0x247a <_ZL8nextNotev+0x1b2>
    23d6:	0e 94 15 10 	call	0x202a	; 0x202a <_ZL9getNumberv>
    23da:	98 2e       	mov	r9, r24
    23dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    23e0:	af cf       	rjmp	.-162    	; 0x2340 <_ZL8nextNotev+0x78>
    23e2:	84 37       	cpi	r24, 0x74	; 116
    23e4:	81 f1       	breq	.+96     	; 0x2446 <_ZL8nextNotev+0x17e>
    23e6:	86 37       	cpi	r24, 0x76	; 118
    23e8:	09 f0       	breq	.+2      	; 0x23ec <_ZL8nextNotev+0x124>
    23ea:	47 c0       	rjmp	.+142    	; 0x247a <_ZL8nextNotev+0x1b2>
    23ec:	0e 94 15 10 	call	0x202a	; 0x202a <_ZL9getNumberv>
    23f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    23f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    23f8:	a3 cf       	rjmp	.-186    	; 0x2340 <_ZL8nextNotev+0x78>
    23fa:	9a 94       	dec	r9
    23fc:	a1 cf       	rjmp	.-190    	; 0x2340 <_ZL8nextNotev+0x78>
    23fe:	10 e0       	ldi	r17, 0x00	; 0
    2400:	20 c0       	rjmp	.+64     	; 0x2442 <_ZL8nextNotev+0x17a>
    2402:	10 e0       	ldi	r17, 0x00	; 0
    2404:	84 e0       	ldi	r24, 0x04	; 4
    2406:	43 c0       	rjmp	.+134    	; 0x248e <_ZL8nextNotev+0x1c6>
    2408:	10 e0       	ldi	r17, 0x00	; 0
    240a:	85 e0       	ldi	r24, 0x05	; 5
    240c:	40 c0       	rjmp	.+128    	; 0x248e <_ZL8nextNotev+0x1c6>
    240e:	10 e0       	ldi	r17, 0x00	; 0
    2410:	87 e0       	ldi	r24, 0x07	; 7
    2412:	3d c0       	rjmp	.+122    	; 0x248e <_ZL8nextNotev+0x1c6>
    2414:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZL16currentCharacterv>
    2418:	8c 36       	cpi	r24, 0x6C	; 108
    241a:	19 f4       	brne	.+6      	; 0x2422 <_ZL8nextNotev+0x15a>
    241c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <_ZL8staccato>
    2420:	04 c0       	rjmp	.+8      	; 0x242a <_ZL8nextNotev+0x162>
    2422:	70 92 90 01 	sts	0x0190, r7	; 0x800190 <_ZL8staccato>
    2426:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    242a:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    242e:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    2432:	2f 5f       	subi	r18, 0xFF	; 255
    2434:	3f 4f       	sbci	r19, 0xFF	; 255
    2436:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    243a:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    243e:	80 cf       	rjmp	.-256    	; 0x2340 <_ZL8nextNotev+0x78>
    2440:	11 e0       	ldi	r17, 0x01	; 1
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	24 c0       	rjmp	.+72     	; 0x248e <_ZL8nextNotev+0x1c6>
    2446:	0e 94 15 10 	call	0x202a	; 0x202a <_ZL9getNumberv>
    244a:	bc 01       	movw	r22, r24
    244c:	c5 01       	movw	r24, r10
    244e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__udivmodhi4>
    2452:	66 9e       	mul	r6, r22
    2454:	c0 01       	movw	r24, r0
    2456:	67 9e       	mul	r6, r23
    2458:	90 0d       	add	r25, r0
    245a:	11 24       	eor	r1, r1
    245c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    2460:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    2464:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    2468:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    246c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__udivmodhi4>
    2470:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    2474:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    2478:	63 cf       	rjmp	.-314    	; 0x2340 <_ZL8nextNotev+0x78>
    247a:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <__data_end+0x1>
    247e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__data_end>
    2482:	69 c0       	rjmp	.+210    	; 0x2556 <_ZL8nextNotev+0x28e>
    2484:	10 e0       	ldi	r17, 0x00	; 0
    2486:	89 e0       	ldi	r24, 0x09	; 9
    2488:	02 c0       	rjmp	.+4      	; 0x248e <_ZL8nextNotev+0x1c6>
    248a:	10 e0       	ldi	r17, 0x00	; 0
    248c:	8b e0       	ldi	r24, 0x0B	; 11
    248e:	08 2f       	mov	r16, r24
    2490:	9c e0       	ldi	r25, 0x0C	; 12
    2492:	99 9e       	mul	r9, r25
    2494:	00 0d       	add	r16, r0
    2496:	11 24       	eor	r1, r1
    2498:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZL16currentCharacterv>
    249c:	98 2f       	mov	r25, r24
    249e:	97 7f       	andi	r25, 0xF7	; 247
    24a0:	93 32       	cpi	r25, 0x23	; 35
    24a2:	61 f4       	brne	.+24     	; 0x24bc <_ZL8nextNotev+0x1f4>
    24a4:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    24a8:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    24b4:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    24b8:	0f 5f       	subi	r16, 0xFF	; 255
    24ba:	ee cf       	rjmp	.-36     	; 0x2498 <_ZL8nextNotev+0x1d0>
    24bc:	8d 32       	cpi	r24, 0x2D	; 45
    24be:	71 f4       	brne	.+28     	; 0x24dc <_ZL8nextNotev+0x214>
    24c0:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    24c4:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    24c8:	2f 5f       	subi	r18, 0xFF	; 255
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    24d0:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    24d4:	01 50       	subi	r16, 0x01	; 1
    24d6:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZL16currentCharacterv>
    24da:	f0 cf       	rjmp	.-32     	; 0x24bc <_ZL8nextNotev+0x1f4>
    24dc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    24e0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    24e4:	81 53       	subi	r24, 0x31	; 49
    24e6:	88 30       	cpi	r24, 0x08	; 8
    24e8:	50 f4       	brcc	.+20     	; 0x24fe <_ZL8nextNotev+0x236>
    24ea:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    24ee:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    24f2:	0e 94 15 10 	call	0x202a	; 0x202a <_ZL9getNumberv>
    24f6:	bc 01       	movw	r22, r24
    24f8:	c7 01       	movw	r24, r14
    24fa:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__udivmodhi4>
    24fe:	7b 01       	movw	r14, r22
    2500:	f6 94       	lsr	r15
    2502:	e7 94       	ror	r14
    2504:	69 83       	std	Y+1, r22	; 0x01
    2506:	7a 83       	std	Y+2, r23	; 0x02
    2508:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <_ZL16currentCharacterv>
    250c:	69 81       	ldd	r22, Y+1	; 0x01
    250e:	7a 81       	ldd	r23, Y+2	; 0x02
    2510:	8e 32       	cpi	r24, 0x2E	; 46
    2512:	69 f4       	brne	.+26     	; 0x252e <_ZL8nextNotev+0x266>
    2514:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    2518:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    251c:	2f 5f       	subi	r18, 0xFF	; 255
    251e:	3f 4f       	sbci	r19, 0xFF	; 255
    2520:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    2524:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    2528:	6e 0d       	add	r22, r14
    252a:	7f 1d       	adc	r23, r15
    252c:	e9 cf       	rjmp	.-46     	; 0x2500 <_ZL8nextNotev+0x238>
    252e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL8staccato>
    2532:	88 23       	and	r24, r24
    2534:	39 f0       	breq	.+14     	; 0x2544 <_ZL8nextNotev+0x27c>
    2536:	9b 01       	movw	r18, r22
    2538:	36 95       	lsr	r19
    253a:	27 95       	ror	r18
    253c:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <_ZL22staccato_rest_duration>
    2540:	62 1b       	sub	r22, r18
    2542:	71 09       	sbc	r23, r1
    2544:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    2548:	11 23       	and	r17, r17
    254a:	11 f0       	breq	.+4      	; 0x2550 <_ZL8nextNotev+0x288>
    254c:	8f ef       	ldi	r24, 0xFF	; 255
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <_ZL8nextNotev+0x28a>
    2550:	80 2f       	mov	r24, r16
    2552:	0e 94 10 11 	call	0x2220	; 0x2220 <_ZN15OrangutanBuzzer8playNoteEhjh>
    2556:	22 96       	adiw	r28, 0x02	; 2
    2558:	e0 e1       	ldi	r30, 0x10	; 16
    255a:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <__epilogue_restores__+0x4>

0000255e <__vector_13>:
    255e:	1f 92       	push	r1
    2560:	0f 92       	push	r0
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	0f 92       	push	r0
    2566:	11 24       	eor	r1, r1
    2568:	2f 93       	push	r18
    256a:	3f 93       	push	r19
    256c:	4f 93       	push	r20
    256e:	5f 93       	push	r21
    2570:	6f 93       	push	r22
    2572:	7f 93       	push	r23
    2574:	8f 93       	push	r24
    2576:	9f 93       	push	r25
    2578:	af 93       	push	r26
    257a:	bf 93       	push	r27
    257c:	ef 93       	push	r30
    257e:	ff 93       	push	r31
    2580:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_ZL13buzzerTimeout>
    2584:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_ZL13buzzerTimeout+0x1>
    2588:	9c 01       	movw	r18, r24
    258a:	21 50       	subi	r18, 0x01	; 1
    258c:	31 09       	sbc	r19, r1
    258e:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <_ZL13buzzerTimeout+0x1>
    2592:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <_ZL13buzzerTimeout>
    2596:	89 2b       	or	r24, r25
    2598:	11 f5       	brne	.+68     	; 0x25de <__vector_13+0x80>
    259a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    259e:	78 94       	sei
    25a0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    25a4:	88 7f       	andi	r24, 0xF8	; 248
    25a6:	81 60       	ori	r24, 0x01	; 1
    25a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    25ac:	80 e1       	ldi	r24, 0x10	; 16
    25ae:	97 e2       	ldi	r25, 0x27	; 39
    25b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    25b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    25b8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    25bc:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    25c6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
    25ca:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
    25ce:	89 2b       	or	r24, r25
    25d0:	31 f0       	breq	.+12     	; 0x25de <__vector_13+0x80>
    25d2:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL17play_mode_setting>
    25d6:	81 11       	cpse	r24, r1
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <__vector_13+0x80>
    25da:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZL8nextNotev>
    25de:	ff 91       	pop	r31
    25e0:	ef 91       	pop	r30
    25e2:	bf 91       	pop	r27
    25e4:	af 91       	pop	r26
    25e6:	9f 91       	pop	r25
    25e8:	8f 91       	pop	r24
    25ea:	7f 91       	pop	r23
    25ec:	6f 91       	pop	r22
    25ee:	5f 91       	pop	r21
    25f0:	4f 91       	pop	r20
    25f2:	3f 91       	pop	r19
    25f4:	2f 91       	pop	r18
    25f6:	0f 90       	pop	r0
    25f8:	0f be       	out	0x3f, r0	; 63
    25fa:	0f 90       	pop	r0
    25fc:	1f 90       	pop	r1
    25fe:	18 95       	reti

00002600 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    2600:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2604:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
    2608:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <_ZL17use_program_space>
    2612:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    2616:	0e 94 64 11 	call	0x22c8	; 0x22c8 <_ZL8nextNotev>
    261a:	08 95       	ret

0000261c <play_from_program_space>:
    261c:	0e 94 00 13 	call	0x2600	; 0x2600 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    2620:	08 95       	ret

00002622 <delay_us.constprop.0>:
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	6f 93       	push	r22
    2628:	64 e0       	ldi	r22, 0x04	; 4
    262a:	6a 95       	dec	r22
    262c:	f1 f7       	brne	.-4      	; 0x262a <delay_us.constprop.0+0x8>
    262e:	6f 91       	pop	r22
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	c9 f7       	brne	.-14     	; 0x2626 <delay_us.constprop.0+0x4>
    2634:	08 95       	ret

00002636 <_ZN12OrangutanLCD8busyWaitEv>:
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	1a b1       	in	r17, 0x0a	; 10
    2640:	57 98       	cbi	0x0a, 7	; 10
    2642:	5a 98       	cbi	0x0b, 2	; 11
    2644:	28 9a       	sbi	0x05, 0	; 5
    2646:	c0 e0       	ldi	r28, 0x00	; 0
    2648:	d0 e0       	ldi	r29, 0x00	; 0
    264a:	0e 94 11 13 	call	0x2622	; 0x2622 <delay_us.constprop.0>
    264e:	5c 9a       	sbi	0x0b, 4	; 11
    2650:	0e 94 11 13 	call	0x2622	; 0x2622 <delay_us.constprop.0>
    2654:	09 b1       	in	r16, 0x09	; 9
    2656:	5c 98       	cbi	0x0b, 4	; 11
    2658:	0e 94 11 13 	call	0x2622	; 0x2622 <delay_us.constprop.0>
    265c:	5c 9a       	sbi	0x0b, 4	; 11
    265e:	0e 94 11 13 	call	0x2622	; 0x2622 <delay_us.constprop.0>
    2662:	5c 98       	cbi	0x0b, 4	; 11
    2664:	24 96       	adiw	r28, 0x04	; 4
    2666:	07 ff       	sbrs	r16, 7
    2668:	10 c0       	rjmp	.+32     	; 0x268a <_ZN12OrangutanLCD8busyWaitEv+0x54>
    266a:	ae 01       	movw	r20, r28
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <lcdTimeout>
    2674:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <lcdTimeout+0x1>
    2678:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <lcdTimeout+0x2>
    267c:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <lcdTimeout+0x3>
    2680:	48 17       	cp	r20, r24
    2682:	59 07       	cpc	r21, r25
    2684:	6a 07       	cpc	r22, r26
    2686:	7b 07       	cpc	r23, r27
    2688:	00 f3       	brcs	.-64     	; 0x264a <_ZN12OrangutanLCD8busyWaitEv+0x14>
    268a:	1a b9       	out	0x0a, r17	; 10
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	08 95       	ret

00002696 <_ZN12OrangutanLCD8sendDataEh>:
    2696:	95 b1       	in	r25, 0x05	; 5
    2698:	28 2f       	mov	r18, r24
    269a:	21 70       	andi	r18, 0x01	; 1
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	22 0f       	add	r18, r18
    26a0:	33 1f       	adc	r19, r19
    26a2:	48 2f       	mov	r20, r24
    26a4:	46 70       	andi	r20, 0x06	; 6
    26a6:	68 e0       	ldi	r22, 0x08	; 8
    26a8:	46 9f       	mul	r20, r22
    26aa:	a0 01       	movw	r20, r0
    26ac:	11 24       	eor	r1, r1
    26ae:	24 2b       	or	r18, r20
    26b0:	9d 7c       	andi	r25, 0xCD	; 205
    26b2:	29 2b       	or	r18, r25
    26b4:	25 b9       	out	0x05, r18	; 5
    26b6:	9b b1       	in	r25, 0x0b	; 11
    26b8:	88 70       	andi	r24, 0x08	; 8
    26ba:	82 95       	swap	r24
    26bc:	80 7f       	andi	r24, 0xF0	; 240
    26be:	9f 77       	andi	r25, 0x7F	; 127
    26c0:	89 2b       	or	r24, r25
    26c2:	8b b9       	out	0x0b, r24	; 11
    26c4:	5c 9a       	sbi	0x0b, 4	; 11
    26c6:	0e 94 11 13 	call	0x2622	; 0x2622 <delay_us.constprop.0>
    26ca:	5c 98       	cbi	0x0b, 4	; 11
    26cc:	0e 94 11 13 	call	0x2622	; 0x2622 <delay_us.constprop.0>
    26d0:	08 95       	ret

000026d2 <_ZN12OrangutanLCD4sendEhhh>:
    26d2:	a0 e0       	ldi	r26, 0x00	; 0
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	ef e6       	ldi	r30, 0x6F	; 111
    26d8:	f3 e1       	ldi	r31, 0x13	; 19
    26da:	0c 94 aa 1d 	jmp	0x3b54	; 0x3b54 <__prologue_saves__+0x16>
    26de:	c8 2f       	mov	r28, r24
    26e0:	d6 2e       	mov	r13, r22
    26e2:	e4 2e       	mov	r14, r20
    26e4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    26e8:	81 11       	cpse	r24, r1
    26ea:	05 c0       	rjmp	.+10     	; 0x26f6 <_ZN12OrangutanLCD4sendEhhh+0x24>
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    26f2:	0e 94 af 13 	call	0x275e	; 0x275e <_ZN12OrangutanLCD5init2Ev>
    26f6:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN12OrangutanLCD8busyWaitEv>
    26fa:	14 b1       	in	r17, 0x04	; 4
    26fc:	d5 b1       	in	r29, 0x05	; 5
    26fe:	fa b0       	in	r15, 0x0a	; 10
    2700:	0b b1       	in	r16, 0x0b	; 11
    2702:	28 98       	cbi	0x05, 0	; 5
    2704:	dd 20       	and	r13, r13
    2706:	11 f0       	breq	.+4      	; 0x270c <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2708:	5a 9a       	sbi	0x0b, 2	; 11
    270a:	01 c0       	rjmp	.+2      	; 0x270e <_ZN12OrangutanLCD4sendEhhh+0x3c>
    270c:	5a 98       	cbi	0x0b, 2	; 11
    270e:	94 b1       	in	r25, 0x04	; 4
    2710:	92 63       	ori	r25, 0x32	; 50
    2712:	94 b9       	out	0x04, r25	; 4
    2714:	57 9a       	sbi	0x0a, 7	; 10
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	e8 16       	cp	r14, r24
    271a:	29 f0       	breq	.+10     	; 0x2726 <_ZN12OrangutanLCD4sendEhhh+0x54>
    271c:	8c 2f       	mov	r24, r28
    271e:	82 95       	swap	r24
    2720:	8f 70       	andi	r24, 0x0F	; 15
    2722:	0e 94 4b 13 	call	0x2696	; 0x2696 <_ZN12OrangutanLCD8sendDataEh>
    2726:	8c 2f       	mov	r24, r28
    2728:	8f 70       	andi	r24, 0x0F	; 15
    272a:	0e 94 4b 13 	call	0x2696	; 0x2696 <_ZN12OrangutanLCD8sendDataEh>
    272e:	fa b8       	out	0x0a, r15	; 10
    2730:	0b b9       	out	0x0b, r16	; 11
    2732:	14 b9       	out	0x04, r17	; 4
    2734:	d5 b9       	out	0x05, r29	; 5
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	e7 e0       	ldi	r30, 0x07	; 7
    273c:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__epilogue_restores__+0x16>

00002740 <_ZN12OrangutanLCD8send_cmdEh>:
    2740:	42 e0       	ldi	r20, 0x02	; 2
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZN12OrangutanLCD4sendEhhh>
    2748:	08 95       	ret

0000274a <_ZN12OrangutanLCD9send_dataEh>:
    274a:	42 e0       	ldi	r20, 0x02	; 2
    274c:	61 e0       	ldi	r22, 0x01	; 1
    274e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZN12OrangutanLCD4sendEhhh>
    2752:	08 95       	ret

00002754 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	60 e0       	ldi	r22, 0x00	; 0
    2758:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZN12OrangutanLCD4sendEhhh>
    275c:	08 95       	ret

0000275e <_ZN12OrangutanLCD5init2Ev>:
    275e:	80 e1       	ldi	r24, 0x10	; 16
    2760:	97 e2       	ldi	r25, 0x27	; 39
    2762:	a0 e0       	ldi	r26, 0x00	; 0
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <lcdTimeout>
    276a:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <lcdTimeout+0x1>
    276e:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <lcdTimeout+0x2>
    2772:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <lcdTimeout+0x3>
    2776:	52 9a       	sbi	0x0a, 2	; 10
    2778:	20 9a       	sbi	0x04, 0	; 4
    277a:	54 9a       	sbi	0x0a, 4	; 10
    277c:	8e e1       	ldi	r24, 0x1E	; 30
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
    2784:	83 e0       	ldi	r24, 0x03	; 3
    2786:	0e 94 aa 13 	call	0x2754	; 0x2754 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    278a:	86 e0       	ldi	r24, 0x06	; 6
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	0e 94 aa 13 	call	0x2754	; 0x2754 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
    27a0:	83 e0       	ldi	r24, 0x03	; 3
    27a2:	0e 94 aa 13 	call	0x2754	; 0x2754 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
    27ae:	82 e0       	ldi	r24, 0x02	; 2
    27b0:	0e 94 aa 13 	call	0x2754	; 0x2754 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
    27bc:	88 e2       	ldi	r24, 0x28	; 40
    27be:	0e 94 a0 13 	call	0x2740	; 0x2740 <_ZN12OrangutanLCD8send_cmdEh>
    27c2:	88 e0       	ldi	r24, 0x08	; 8
    27c4:	0e 94 a0 13 	call	0x2740	; 0x2740 <_ZN12OrangutanLCD8send_cmdEh>
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	0e 94 a0 13 	call	0x2740	; 0x2740 <_ZN12OrangutanLCD8send_cmdEh>
    27ce:	86 e0       	ldi	r24, 0x06	; 6
    27d0:	0e 94 a0 13 	call	0x2740	; 0x2740 <_ZN12OrangutanLCD8send_cmdEh>
    27d4:	8c e0       	ldi	r24, 0x0C	; 12
    27d6:	0e 94 a0 13 	call	0x2740	; 0x2740 <_ZN12OrangutanLCD8send_cmdEh>
    27da:	08 95       	ret

000027dc <_ZN12OrangutanLCD5clearEv>:
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	0e 94 a0 13 	call	0x2740	; 0x2740 <_ZN12OrangutanLCD8send_cmdEh>
    27e2:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <printf_chars>
    27e6:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <printf_chars+0x1>
    27ea:	89 2b       	or	r24, r25
    27ec:	f9 f0       	breq	.+62     	; 0x282c <_ZN12OrangutanLCD5clearEv+0x50>
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	a0 e2       	ldi	r26, 0x20	; 32
    27f2:	26 2f       	mov	r18, r22
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    27fa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	78 9f       	mul	r23, r24
    2804:	a0 01       	movw	r20, r0
    2806:	79 9f       	mul	r23, r25
    2808:	50 0d       	add	r21, r0
    280a:	11 24       	eor	r1, r1
    280c:	24 17       	cp	r18, r20
    280e:	35 07       	cpc	r19, r21
    2810:	4c f4       	brge	.+18     	; 0x2824 <_ZN12OrangutanLCD5clearEv+0x48>
    2812:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <printf_chars>
    2816:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <printf_chars+0x1>
    281a:	e2 0f       	add	r30, r18
    281c:	f3 1f       	adc	r31, r19
    281e:	a0 83       	st	Z, r26
    2820:	6f 5f       	subi	r22, 0xFF	; 255
    2822:	e7 cf       	rjmp	.-50     	; 0x27f2 <_ZN12OrangutanLCD5clearEv+0x16>
    2824:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <col>
    2828:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <row>
    282c:	08 95       	ret

0000282e <clear>:
    282e:	0e 94 ee 13 	call	0x27dc	; 0x27dc <_ZN12OrangutanLCD5clearEv>
    2832:	08 95       	ret

00002834 <_ZN12OrangutanLCD5printEPKc>:
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	ec 01       	movw	r28, r24
    283a:	89 91       	ld	r24, Y+
    283c:	88 23       	and	r24, r24
    283e:	19 f0       	breq	.+6      	; 0x2846 <_ZN12OrangutanLCD5printEPKc+0x12>
    2840:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN12OrangutanLCD9send_dataEh>
    2844:	fa cf       	rjmp	.-12     	; 0x283a <_ZN12OrangutanLCD5printEPKc+0x6>
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	08 95       	ret

0000284c <print>:
    284c:	0e 94 1a 14 	call	0x2834	; 0x2834 <_ZN12OrangutanLCD5printEPKc>
    2850:	08 95       	ret

00002852 <_ZN12OrangutanLCD5printEm>:
    2852:	aa e0       	ldi	r26, 0x0A	; 10
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	ef e2       	ldi	r30, 0x2F	; 47
    2858:	f4 e1       	ldi	r31, 0x14	; 20
    285a:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <__prologue_saves__+0x14>
    285e:	1a e0       	ldi	r17, 0x0A	; 10
    2860:	5a e0       	ldi	r21, 0x0A	; 10
    2862:	c5 2e       	mov	r12, r21
    2864:	d1 2c       	mov	r13, r1
    2866:	e1 2c       	mov	r14, r1
    2868:	f1 2c       	mov	r15, r1
    286a:	06 2f       	mov	r16, r22
    286c:	a7 01       	movw	r20, r14
    286e:	96 01       	movw	r18, r12
    2870:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    2874:	ca 01       	movw	r24, r20
    2876:	b9 01       	movw	r22, r18
    2878:	11 50       	subi	r17, 0x01	; 1
    287a:	e1 e0       	ldi	r30, 0x01	; 1
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	ec 0f       	add	r30, r28
    2880:	fd 1f       	adc	r31, r29
    2882:	e1 0f       	add	r30, r17
    2884:	f1 1d       	adc	r31, r1
    2886:	00 5d       	subi	r16, 0xD0	; 208
    2888:	2a e0       	ldi	r18, 0x0A	; 10
    288a:	62 9f       	mul	r22, r18
    288c:	00 19       	sub	r16, r0
    288e:	11 24       	eor	r1, r1
    2890:	00 83       	st	Z, r16
    2892:	61 15       	cp	r22, r1
    2894:	71 05       	cpc	r23, r1
    2896:	81 05       	cpc	r24, r1
    2898:	91 05       	cpc	r25, r1
    289a:	39 f7       	brne	.-50     	; 0x286a <_ZN12OrangutanLCD5printEm+0x18>
    289c:	1a 30       	cpi	r17, 0x0A	; 10
    289e:	58 f4       	brcc	.+22     	; 0x28b6 <_ZN12OrangutanLCD5printEm+0x64>
    28a0:	e1 e0       	ldi	r30, 0x01	; 1
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	ec 0f       	add	r30, r28
    28a6:	fd 1f       	adc	r31, r29
    28a8:	e1 0f       	add	r30, r17
    28aa:	f1 1d       	adc	r31, r1
    28ac:	80 81       	ld	r24, Z
    28ae:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN12OrangutanLCD9send_dataEh>
    28b2:	1f 5f       	subi	r17, 0xFF	; 255
    28b4:	f3 cf       	rjmp	.-26     	; 0x289c <_ZN12OrangutanLCD5printEm+0x4a>
    28b6:	2a 96       	adiw	r28, 0x0a	; 10
    28b8:	e8 e0       	ldi	r30, 0x08	; 8
    28ba:	0c 94 c5 1d 	jmp	0x3b8a	; 0x3b8a <__epilogue_restores__+0x14>

000028be <_ZN12OrangutanLCD5printEl>:
    28be:	cf 92       	push	r12
    28c0:	df 92       	push	r13
    28c2:	ef 92       	push	r14
    28c4:	ff 92       	push	r15
    28c6:	6b 01       	movw	r12, r22
    28c8:	7c 01       	movw	r14, r24
    28ca:	97 ff       	sbrs	r25, 7
    28cc:	0b c0       	rjmp	.+22     	; 0x28e4 <_ZN12OrangutanLCD5printEl+0x26>
    28ce:	f0 94       	com	r15
    28d0:	e0 94       	com	r14
    28d2:	d0 94       	com	r13
    28d4:	c0 94       	com	r12
    28d6:	c1 1c       	adc	r12, r1
    28d8:	d1 1c       	adc	r13, r1
    28da:	e1 1c       	adc	r14, r1
    28dc:	f1 1c       	adc	r15, r1
    28de:	8d e2       	ldi	r24, 0x2D	; 45
    28e0:	0e 94 a5 13 	call	0x274a	; 0x274a <_ZN12OrangutanLCD9send_dataEh>
    28e4:	c7 01       	movw	r24, r14
    28e6:	b6 01       	movw	r22, r12
    28e8:	0e 94 29 14 	call	0x2852	; 0x2852 <_ZN12OrangutanLCD5printEm>
    28ec:	ff 90       	pop	r15
    28ee:	ef 90       	pop	r14
    28f0:	df 90       	pop	r13
    28f2:	cf 90       	pop	r12
    28f4:	08 95       	ret

000028f6 <print_long>:
    28f6:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN12OrangutanLCD5printEl>
    28fa:	08 95       	ret

000028fc <_ZN12OrangutanLCD6gotoXYEhh>:
    28fc:	a5 e0       	ldi	r26, 0x05	; 5
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e4 e8       	ldi	r30, 0x84	; 132
    2902:	f4 e1       	ldi	r31, 0x14	; 20
    2904:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <__prologue_saves__+0x1e>
    2908:	18 2f       	mov	r17, r24
    290a:	80 e8       	ldi	r24, 0x80	; 128
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	80 ec       	ldi	r24, 0xC0	; 192
    2910:	8a 83       	std	Y+2, r24	; 0x02
    2912:	84 e9       	ldi	r24, 0x94	; 148
    2914:	8b 83       	std	Y+3, r24	; 0x03
    2916:	84 ed       	ldi	r24, 0xD4	; 212
    2918:	8c 83       	std	Y+4, r24	; 0x04
    291a:	fe 01       	movw	r30, r28
    291c:	e6 0f       	add	r30, r22
    291e:	f1 1d       	adc	r31, r1
    2920:	81 81       	ldd	r24, Z+1	; 0x01
    2922:	81 0f       	add	r24, r17
    2924:	6d 83       	std	Y+5, r22	; 0x05
    2926:	0e 94 a0 13 	call	0x2740	; 0x2740 <_ZN12OrangutanLCD8send_cmdEh>
    292a:	10 93 99 01 	sts	0x0199, r17	; 0x800199 <col>
    292e:	6d 81       	ldd	r22, Y+5	; 0x05
    2930:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <row>
    2934:	25 96       	adiw	r28, 0x05	; 5
    2936:	e3 e0       	ldi	r30, 0x03	; 3
    2938:	0c 94 ca 1d 	jmp	0x3b94	; 0x3b94 <__epilogue_restores__+0x1e>

0000293c <lcd_goto_xy>:
    293c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <_ZN12OrangutanLCD6gotoXYEhh>
    2940:	08 95       	ret

00002942 <_ZN16OrangutanDigital9setOutputEhh>:
    2942:	88 30       	cpi	r24, 0x08	; 8
    2944:	58 f4       	brcc	.+22     	; 0x295c <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	01 c0       	rjmp	.+2      	; 0x294c <_ZN16OrangutanDigital9setOutputEhh+0xa>
    294a:	99 0f       	add	r25, r25
    294c:	8a 95       	dec	r24
    294e:	ea f7       	brpl	.-6      	; 0x294a <_ZN16OrangutanDigital9setOutputEhh+0x8>
    2950:	89 2f       	mov	r24, r25
    2952:	aa e2       	ldi	r26, 0x2A	; 42
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	eb e2       	ldi	r30, 0x2B	; 43
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	21 c0       	rjmp	.+66     	; 0x299e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    295c:	8e 30       	cpi	r24, 0x0E	; 14
    295e:	60 f4       	brcc	.+24     	; 0x2978 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    2960:	98 ef       	ldi	r25, 0xF8	; 248
    2962:	98 0f       	add	r25, r24
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	01 c0       	rjmp	.+2      	; 0x296a <_ZN16OrangutanDigital9setOutputEhh+0x28>
    2968:	88 0f       	add	r24, r24
    296a:	9a 95       	dec	r25
    296c:	ea f7       	brpl	.-6      	; 0x2968 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    296e:	a4 e2       	ldi	r26, 0x24	; 36
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e5 e2       	ldi	r30, 0x25	; 37
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	13 c0       	rjmp	.+38     	; 0x299e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2978:	85 31       	cpi	r24, 0x15	; 21
    297a:	60 f4       	brcc	.+24     	; 0x2994 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    297c:	92 ef       	ldi	r25, 0xF2	; 242
    297e:	98 0f       	add	r25, r24
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	01 c0       	rjmp	.+2      	; 0x2986 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    2984:	88 0f       	add	r24, r24
    2986:	9a 95       	dec	r25
    2988:	ea f7       	brpl	.-6      	; 0x2984 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    298a:	a7 e2       	ldi	r26, 0x27	; 39
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e8 e2       	ldi	r30, 0x28	; 40
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	05 c0       	rjmp	.+10     	; 0x299e <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	a0 e0       	ldi	r26, 0x00	; 0
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e0 e0       	ldi	r30, 0x00	; 0
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	6f 3f       	cpi	r22, 0xFF	; 255
    29a0:	19 f4       	brne	.+6      	; 0x29a8 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    29a2:	90 81       	ld	r25, Z
    29a4:	98 27       	eor	r25, r24
    29a6:	09 c0       	rjmp	.+18     	; 0x29ba <_ZN16OrangutanDigital9setOutputEhh+0x78>
    29a8:	66 23       	and	r22, r22
    29aa:	19 f0       	breq	.+6      	; 0x29b2 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    29ac:	90 81       	ld	r25, Z
    29ae:	98 2b       	or	r25, r24
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <_ZN16OrangutanDigital9setOutputEhh+0x78>
    29b2:	20 81       	ld	r18, Z
    29b4:	98 2f       	mov	r25, r24
    29b6:	90 95       	com	r25
    29b8:	92 23       	and	r25, r18
    29ba:	90 83       	st	Z, r25
    29bc:	9c 91       	ld	r25, X
    29be:	98 2b       	or	r25, r24
    29c0:	9c 93       	st	X, r25
    29c2:	08 95       	ret

000029c4 <_ZN15OrangutanMotors5init2Ev>:
    29c4:	83 ef       	ldi	r24, 0xF3	; 243
    29c6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    29ca:	84 bd       	out	0x24, r24	; 36
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    29d2:	85 bd       	out	0x25, r24	; 37
    29d4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    29d8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    29dc:	18 bc       	out	0x28, r1	; 40
    29de:	17 bc       	out	0x27, r1	; 39
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	86 e0       	ldi	r24, 0x06	; 6
    29e4:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN16OrangutanDigital9setOutputEhh>
    29e8:	60 e0       	ldi	r22, 0x00	; 0
    29ea:	85 e0       	ldi	r24, 0x05	; 5
    29ec:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN16OrangutanDigital9setOutputEhh>
    29f0:	60 e0       	ldi	r22, 0x00	; 0
    29f2:	8b e0       	ldi	r24, 0x0B	; 11
    29f4:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN16OrangutanDigital9setOutputEhh>
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	83 e0       	ldi	r24, 0x03	; 3
    29fc:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN16OrangutanDigital9setOutputEhh>
    2a00:	08 95       	ret

00002a02 <_ZN15OrangutanMotors4initEv>:
    2a02:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    2a06:	81 11       	cpse	r24, r1
    2a08:	05 c0       	rjmp	.+10     	; 0x2a14 <_ZN15OrangutanMotors4initEv+0x12>
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    2a10:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN15OrangutanMotors5init2Ev>
    2a14:	08 95       	ret

00002a16 <_ZN15OrangutanMotors10setM1SpeedEi>:
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	ec 01       	movw	r28, r24
    2a1c:	0e 94 01 15 	call	0x2a02	; 0x2a02 <_ZN15OrangutanMotors4initEv>
    2a20:	d7 ff       	sbrs	r29, 7
    2a22:	05 c0       	rjmp	.+10     	; 0x2a2e <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    2a24:	d1 95       	neg	r29
    2a26:	c1 95       	neg	r28
    2a28:	d1 09       	sbc	r29, r1
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	01 c0       	rjmp	.+2      	; 0x2a30 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	cf 3f       	cpi	r28, 0xFF	; 255
    2a32:	d1 05       	cpc	r29, r1
    2a34:	19 f0       	breq	.+6      	; 0x2a3c <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2a36:	14 f0       	brlt	.+4      	; 0x2a3c <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    2a38:	cf ef       	ldi	r28, 0xFF	; 255
    2a3a:	d0 e0       	ldi	r29, 0x00	; 0
    2a3c:	88 23       	and	r24, r24
    2a3e:	19 f0       	breq	.+6      	; 0x2a46 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    2a40:	18 bc       	out	0x28, r1	; 40
    2a42:	c7 bd       	out	0x27, r28	; 39
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    2a46:	c8 bd       	out	0x28, r28	; 40
    2a48:	17 bc       	out	0x27, r1	; 39
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	08 95       	ret

00002a50 <_ZN15OrangutanMotors10setM2SpeedEi>:
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	ec 01       	movw	r28, r24
    2a56:	0e 94 01 15 	call	0x2a02	; 0x2a02 <_ZN15OrangutanMotors4initEv>
    2a5a:	d7 ff       	sbrs	r29, 7
    2a5c:	05 c0       	rjmp	.+10     	; 0x2a68 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    2a5e:	d1 95       	neg	r29
    2a60:	c1 95       	neg	r28
    2a62:	d1 09       	sbc	r29, r1
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	cf 3f       	cpi	r28, 0xFF	; 255
    2a6c:	d1 05       	cpc	r29, r1
    2a6e:	19 f0       	breq	.+6      	; 0x2a76 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2a70:	14 f0       	brlt	.+4      	; 0x2a76 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    2a72:	cf ef       	ldi	r28, 0xFF	; 255
    2a74:	d0 e0       	ldi	r29, 0x00	; 0
    2a76:	88 23       	and	r24, r24
    2a78:	29 f0       	breq	.+10     	; 0x2a84 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2a7a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2a7e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    2a84:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2a88:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	08 95       	ret

00002a92 <_ZN15OrangutanMotors9setSpeedsEii>:
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	eb 01       	movw	r28, r22
    2a98:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <_ZN15OrangutanMotors10setM1SpeedEi>
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <_ZN15OrangutanMotors10setM2SpeedEi>
    2aa2:	df 91       	pop	r29
    2aa4:	cf 91       	pop	r28
    2aa6:	08 95       	ret

00002aa8 <set_motors>:
    2aa8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <_ZN15OrangutanMotors9setSpeedsEii>
    2aac:	08 95       	ret

00002aae <_ZN20OrangutanPushbuttons5init2Ev>:
    2aae:	84 b1       	in	r24, 0x04	; 4
    2ab0:	8d 7c       	andi	r24, 0xCD	; 205
    2ab2:	84 b9       	out	0x04, r24	; 4
    2ab4:	85 b1       	in	r24, 0x05	; 5
    2ab6:	82 63       	ori	r24, 0x32	; 50
    2ab8:	85 b9       	out	0x05, r24	; 5
    2aba:	85 e0       	ldi	r24, 0x05	; 5
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	6f 93       	push	r22
    2ac0:	64 e0       	ldi	r22, 0x04	; 4
    2ac2:	6a 95       	dec	r22
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2ac6:	6f 91       	pop	r22
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	c9 f7       	brne	.-14     	; 0x2abe <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2acc:	08 95       	ret

00002ace <_ZN20OrangutanPushbuttons4initEv>:
    2ace:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	05 c0       	rjmp	.+10     	; 0x2ae0 <_ZN20OrangutanPushbuttons4initEv+0x12>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2adc:	0e 94 57 15 	call	0x2aae	; 0x2aae <_ZN20OrangutanPushbuttons5init2Ev>
    2ae0:	08 95       	ret

00002ae2 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2ae2:	cf 93       	push	r28
    2ae4:	c8 2f       	mov	r28, r24
    2ae6:	0e 94 67 15 	call	0x2ace	; 0x2ace <_ZN20OrangutanPushbuttons4initEv>
    2aea:	83 b1       	in	r24, 0x03	; 3
    2aec:	8c 23       	and	r24, r28
    2aee:	e9 f3       	breq	.-6      	; 0x2aea <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2af0:	8a e0       	ldi	r24, 0x0A	; 10
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 5d 17 	call	0x2eba	; 0x2eba <delay_ms>
    2af8:	83 b1       	in	r24, 0x03	; 3
    2afa:	8c 23       	and	r24, r28
    2afc:	b1 f3       	breq	.-20     	; 0x2aea <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2afe:	83 b1       	in	r24, 0x03	; 3
    2b00:	8c 23       	and	r24, r28
    2b02:	cf 91       	pop	r28
    2b04:	08 95       	ret

00002b06 <wait_for_button_release>:
    2b06:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2b0a:	08 95       	ret

00002b0c <_ZN20OrangutanPushbuttons9isPressedEh>:
    2b0c:	a1 e0       	ldi	r26, 0x01	; 1
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	ec e8       	ldi	r30, 0x8C	; 140
    2b12:	f5 e1       	ldi	r31, 0x15	; 21
    2b14:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__prologue_saves__+0x20>
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	0e 94 67 15 	call	0x2ace	; 0x2ace <_ZN20OrangutanPushbuttons4initEv>
    2b1e:	93 b1       	in	r25, 0x03	; 3
    2b20:	90 95       	com	r25
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	89 23       	and	r24, r25
    2b26:	21 96       	adiw	r28, 0x01	; 1
    2b28:	e2 e0       	ldi	r30, 0x02	; 2
    2b2a:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <__epilogue_restores__+0x20>

00002b2e <button_is_pressed>:
    2b2e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <_ZN20OrangutanPushbuttons9isPressedEh>
    2b32:	08 95       	ret

00002b34 <serial_receive_buffer_full>:
    2b34:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <_ZN15OrangutanSerial5portsE+0x2>
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZN15OrangutanSerial5portsE+0x4>
    2b3e:	29 13       	cpse	r18, r25
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	08 95       	ret

00002b44 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	9a e0       	ldi	r25, 0x0A	; 10
    2b4a:	89 9f       	mul	r24, r25
    2b4c:	f0 01       	movw	r30, r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	e3 56       	subi	r30, 0x63	; 99
    2b52:	fe 4f       	sbci	r31, 0xFE	; 254
    2b54:	80 85       	ldd	r24, Z+8	; 0x08
    2b56:	91 85       	ldd	r25, Z+9	; 0x09
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	21 f0       	breq	.+8      	; 0x2b64 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2b5c:	52 81       	ldd	r21, Z+2	; 0x02
    2b5e:	44 81       	ldd	r20, Z+4	; 0x04
    2b60:	54 17       	cp	r21, r20
    2b62:	80 f0       	brcs	.+32     	; 0x2b84 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    2b64:	8a e0       	ldi	r24, 0x0A	; 10
    2b66:	82 9f       	mul	r24, r18
    2b68:	f0 01       	movw	r30, r0
    2b6a:	83 9f       	mul	r24, r19
    2b6c:	f0 0d       	add	r31, r0
    2b6e:	11 24       	eor	r1, r1
    2b70:	e3 56       	subi	r30, 0x63	; 99
    2b72:	fe 4f       	sbci	r31, 0xFE	; 254
    2b74:	92 81       	ldd	r25, Z+2	; 0x02
    2b76:	84 81       	ldd	r24, Z+4	; 0x04
    2b78:	98 13       	cpse	r25, r24
    2b7a:	0e c0       	rjmp	.+28     	; 0x2b98 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    2b7c:	85 81       	ldd	r24, Z+5	; 0x05
    2b7e:	81 11       	cpse	r24, r1
    2b80:	0a c0       	rjmp	.+20     	; 0x2b96 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    2b82:	08 95       	ret
    2b84:	42 81       	ldd	r20, Z+2	; 0x02
    2b86:	dc 01       	movw	r26, r24
    2b88:	a4 0f       	add	r26, r20
    2b8a:	b1 1d       	adc	r27, r1
    2b8c:	6c 93       	st	X, r22
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	8f 5f       	subi	r24, 0xFF	; 255
    2b92:	82 83       	std	Z+2, r24	; 0x02
    2b94:	e7 cf       	rjmp	.-50     	; 0x2b64 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2b96:	12 82       	std	Z+2, r1	; 0x02
    2b98:	08 95       	ret

00002b9a <_ZN15OrangutanSerial15serial_rx_checkEh>:
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ba2:	9f 77       	andi	r25, 0x7F	; 127
    2ba4:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ba8:	c8 2f       	mov	r28, r24
    2baa:	d0 e0       	ldi	r29, 0x00	; 0
    2bac:	9a e0       	ldi	r25, 0x0A	; 10
    2bae:	89 9f       	mul	r24, r25
    2bb0:	f0 01       	movw	r30, r0
    2bb2:	11 24       	eor	r1, r1
    2bb4:	e3 56       	subi	r30, 0x63	; 99
    2bb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb8:	20 85       	ldd	r18, Z+8	; 0x08
    2bba:	31 85       	ldd	r19, Z+9	; 0x09
    2bbc:	23 2b       	or	r18, r19
    2bbe:	41 f0       	breq	.+16     	; 0x2bd0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2bc0:	22 81       	ldd	r18, Z+2	; 0x02
    2bc2:	94 81       	ldd	r25, Z+4	; 0x04
    2bc4:	29 17       	cp	r18, r25
    2bc6:	20 f4       	brcc	.+8      	; 0x2bd0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2bc8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2bcc:	97 fd       	sbrc	r25, 7
    2bce:	11 c0       	rjmp	.+34     	; 0x2bf2 <_ZN15OrangutanSerial15serial_rx_checkEh+0x58>
    2bd0:	8a e0       	ldi	r24, 0x0A	; 10
    2bd2:	8c 9f       	mul	r24, r28
    2bd4:	f0 01       	movw	r30, r0
    2bd6:	8d 9f       	mul	r24, r29
    2bd8:	f0 0d       	add	r31, r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	e3 56       	subi	r30, 0x63	; 99
    2bde:	fe 4f       	sbci	r31, 0xFE	; 254
    2be0:	80 81       	ld	r24, Z
    2be2:	81 11       	cpse	r24, r1
    2be4:	0b c0       	rjmp	.+22     	; 0x2bfc <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2be6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2bea:	80 68       	ori	r24, 0x80	; 128
    2bec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2bf0:	05 c0       	rjmp	.+10     	; 0x2bfc <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2bf2:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2bf6:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2bfa:	ea cf       	rjmp	.-44     	; 0x2bd0 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	08 95       	ret

00002c02 <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    2c02:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c06:	9f 77       	andi	r25, 0x7F	; 127
    2c08:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c0c:	9a e0       	ldi	r25, 0x0A	; 10
    2c0e:	89 9f       	mul	r24, r25
    2c10:	f0 01       	movw	r30, r0
    2c12:	11 24       	eor	r1, r1
    2c14:	e3 56       	subi	r30, 0x63	; 99
    2c16:	fe 4f       	sbci	r31, 0xFE	; 254
    2c18:	71 87       	std	Z+9, r23	; 0x09
    2c1a:	60 87       	std	Z+8, r22	; 0x08
    2c1c:	12 82       	std	Z+2, r1	; 0x02
    2c1e:	44 83       	std	Z+4, r20	; 0x04
    2c20:	25 83       	std	Z+5, r18	; 0x05
    2c22:	80 81       	ld	r24, Z
    2c24:	81 11       	cpse	r24, r1
    2c26:	05 c0       	rjmp	.+10     	; 0x2c32 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x30>
    2c28:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c2c:	80 68       	ori	r24, 0x80	; 128
    2c2e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c32:	08 95       	ret

00002c34 <_ZN15OrangutanSerial7receiveEPch>:
    2c34:	46 2f       	mov	r20, r22
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	bc 01       	movw	r22, r24
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_ZN15OrangutanSerial14receive_inlineEhPchh>
    2c40:	08 95       	ret

00002c42 <serial_receive>:
    2c42:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN15OrangutanSerial7receiveEPch>
    2c46:	08 95       	ret

00002c48 <__vector_18>:
    2c48:	1f 92       	push	r1
    2c4a:	0f 92       	push	r0
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	0f 92       	push	r0
    2c50:	11 24       	eor	r1, r1
    2c52:	2f 93       	push	r18
    2c54:	3f 93       	push	r19
    2c56:	4f 93       	push	r20
    2c58:	5f 93       	push	r21
    2c5a:	6f 93       	push	r22
    2c5c:	7f 93       	push	r23
    2c5e:	8f 93       	push	r24
    2c60:	9f 93       	push	r25
    2c62:	af 93       	push	r26
    2c64:	bf 93       	push	r27
    2c66:	ef 93       	push	r30
    2c68:	ff 93       	push	r31
    2c6a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2c74:	ff 91       	pop	r31
    2c76:	ef 91       	pop	r30
    2c78:	bf 91       	pop	r27
    2c7a:	af 91       	pop	r26
    2c7c:	9f 91       	pop	r25
    2c7e:	8f 91       	pop	r24
    2c80:	7f 91       	pop	r23
    2c82:	6f 91       	pop	r22
    2c84:	5f 91       	pop	r21
    2c86:	4f 91       	pop	r20
    2c88:	3f 91       	pop	r19
    2c8a:	2f 91       	pop	r18
    2c8c:	0f 90       	pop	r0
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	0f 90       	pop	r0
    2c92:	1f 90       	pop	r1
    2c94:	18 95       	reti

00002c96 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2c96:	9a e0       	ldi	r25, 0x0A	; 10
    2c98:	89 9f       	mul	r24, r25
    2c9a:	f0 01       	movw	r30, r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	e3 56       	subi	r30, 0x63	; 99
    2ca0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca2:	86 81       	ldd	r24, Z+6	; 0x06
    2ca4:	97 81       	ldd	r25, Z+7	; 0x07
    2ca6:	89 2b       	or	r24, r25
    2ca8:	59 f0       	breq	.+22     	; 0x2cc0 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2caa:	91 81       	ldd	r25, Z+1	; 0x01
    2cac:	83 81       	ldd	r24, Z+3	; 0x03
    2cae:	98 17       	cp	r25, r24
    2cb0:	38 f4       	brcc	.+14     	; 0x2cc0 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2cb2:	80 81       	ld	r24, Z
    2cb4:	81 11       	cpse	r24, r1
    2cb6:	04 c0       	rjmp	.+8      	; 0x2cc0 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2cb8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2cbc:	80 62       	ori	r24, 0x20	; 32
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    2cc0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2cc4:	8f 7d       	andi	r24, 0xDF	; 223
    2cc6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2cca:	08 95       	ret

00002ccc <_ZN15OrangutanSerial15initUART_inlineEh>:
    2ccc:	9a e0       	ldi	r25, 0x0A	; 10
    2cce:	89 9f       	mul	r24, r25
    2cd0:	f0 01       	movw	r30, r0
    2cd2:	11 24       	eor	r1, r1
    2cd4:	e3 56       	subi	r30, 0x63	; 99
    2cd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd8:	90 81       	ld	r25, Z
    2cda:	91 11       	cpse	r25, r1
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2cde:	98 e9       	ldi	r25, 0x98	; 152
    2ce0:	01 c0       	rjmp	.+2      	; 0x2ce4 <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    2ce2:	98 e1       	ldi	r25, 0x18	; 24
    2ce4:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ce8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2cec:	78 94       	sei
    2cee:	08 95       	ret

00002cf0 <serial_set_baud_rate>:
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	6b 01       	movw	r12, r22
    2cfa:	7c 01       	movw	r14, r24
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <_ZN15OrangutanSerial15initUART_inlineEh>
    2d02:	a8 ef       	ldi	r26, 0xF8	; 248
    2d04:	bf ef       	ldi	r27, 0xFF	; 255
    2d06:	a7 01       	movw	r20, r14
    2d08:	96 01       	movw	r18, r12
    2d0a:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__mulohisi3>
    2d0e:	73 5d       	subi	r23, 0xD3	; 211
    2d10:	8e 4c       	sbci	r24, 0xCE	; 206
    2d12:	9e 4f       	sbci	r25, 0xFE	; 254
    2d14:	e4 e0       	ldi	r30, 0x04	; 4
    2d16:	22 0f       	add	r18, r18
    2d18:	33 1f       	adc	r19, r19
    2d1a:	44 1f       	adc	r20, r20
    2d1c:	55 1f       	adc	r21, r21
    2d1e:	ea 95       	dec	r30
    2d20:	d1 f7       	brne	.-12     	; 0x2d16 <serial_set_baud_rate+0x26>
    2d22:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    2d26:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2d2a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    2d2e:	ff 90       	pop	r15
    2d30:	ef 90       	pop	r14
    2d32:	df 90       	pop	r13
    2d34:	cf 90       	pop	r12
    2d36:	08 95       	ret

00002d38 <_ZN15OrangutanSerial4sendEPch>:
    2d38:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_ZN15OrangutanSerial5portsE+0x7>
    2d3c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZN15OrangutanSerial5portsE+0x6>
    2d40:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2d44:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2d4e:	08 95       	ret

00002d50 <serial_send>:
    2d50:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <_ZN15OrangutanSerial4sendEPch>
    2d54:	08 95       	ret

00002d56 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    2d56:	9a e0       	ldi	r25, 0x0A	; 10
    2d58:	89 9f       	mul	r24, r25
    2d5a:	f0 01       	movw	r30, r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	e3 56       	subi	r30, 0x63	; 99
    2d60:	fe 4f       	sbci	r31, 0xFE	; 254
    2d62:	26 81       	ldd	r18, Z+6	; 0x06
    2d64:	37 81       	ldd	r19, Z+7	; 0x07
    2d66:	21 15       	cp	r18, r1
    2d68:	31 05       	cpc	r19, r1
    2d6a:	41 f0       	breq	.+16     	; 0x2d7c <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2d6c:	41 81       	ldd	r20, Z+1	; 0x01
    2d6e:	93 81       	ldd	r25, Z+3	; 0x03
    2d70:	49 17       	cp	r20, r25
    2d72:	20 f4       	brcc	.+8      	; 0x2d7c <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2d74:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2d78:	95 fd       	sbrc	r25, 5
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    2d7c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2d80:	08 95       	ret
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	d9 01       	movw	r26, r18
    2d86:	a9 0f       	add	r26, r25
    2d88:	b1 1d       	adc	r27, r1
    2d8a:	9c 91       	ld	r25, X
    2d8c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	9f 5f       	subi	r25, 0xFF	; 255
    2d94:	91 83       	std	Z+1, r25	; 0x01
    2d96:	f2 cf       	rjmp	.-28     	; 0x2d7c <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

00002d98 <_ZN15OrangutanSerial5checkEv>:
    2d98:	e1 ec       	ldi	r30, 0xC1	; 193
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	8f 7d       	andi	r24, 0xDF	; 223
    2da0:	80 83       	st	Z, r24
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <_ZN15OrangutanSerial15serial_rx_checkEh>
    2dae:	08 95       	ret

00002db0 <_ZN15OrangutanSerial12sendBlockingEPch>:
    2db0:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_ZN15OrangutanSerial5portsE+0x7>
    2db4:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZN15OrangutanSerial5portsE+0x6>
    2db8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2dbc:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2dc6:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2dca:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2dce:	98 17       	cp	r25, r24
    2dd0:	19 f0       	breq	.+6      	; 0x2dd8 <_ZN15OrangutanSerial12sendBlockingEPch+0x28>
    2dd2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN15OrangutanSerial5checkEv>
    2dd6:	f7 cf       	rjmp	.-18     	; 0x2dc6 <_ZN15OrangutanSerial12sendBlockingEPch+0x16>
    2dd8:	08 95       	ret

00002dda <serial_send_blocking>:
    2dda:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <_ZN15OrangutanSerial12sendBlockingEPch>
    2dde:	08 95       	ret

00002de0 <__vector_19>:
    2de0:	1f 92       	push	r1
    2de2:	0f 92       	push	r0
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	0f 92       	push	r0
    2de8:	11 24       	eor	r1, r1
    2dea:	2f 93       	push	r18
    2dec:	3f 93       	push	r19
    2dee:	4f 93       	push	r20
    2df0:	5f 93       	push	r21
    2df2:	6f 93       	push	r22
    2df4:	7f 93       	push	r23
    2df6:	8f 93       	push	r24
    2df8:	9f 93       	push	r25
    2dfa:	af 93       	push	r26
    2dfc:	bf 93       	push	r27
    2dfe:	ef 93       	push	r30
    2e00:	ff 93       	push	r31
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2e08:	ff 91       	pop	r31
    2e0a:	ef 91       	pop	r30
    2e0c:	bf 91       	pop	r27
    2e0e:	af 91       	pop	r26
    2e10:	9f 91       	pop	r25
    2e12:	8f 91       	pop	r24
    2e14:	7f 91       	pop	r23
    2e16:	6f 91       	pop	r22
    2e18:	5f 91       	pop	r21
    2e1a:	4f 91       	pop	r20
    2e1c:	3f 91       	pop	r19
    2e1e:	2f 91       	pop	r18
    2e20:	0f 90       	pop	r0
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	0f 90       	pop	r0
    2e26:	1f 90       	pop	r1
    2e28:	18 95       	reti

00002e2a <__vector_9>:
    2e2a:	2f 92       	push	r2
    2e2c:	8f 93       	push	r24
    2e2e:	9f 93       	push	r25
    2e30:	2f b6       	in	r2, 0x3f	; 63
    2e32:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <tickCount+0x1>
    2e36:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <tickCount+0x2>
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <tickCount+0x1>
    2e40:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <tickCount+0x2>
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <tickCount+0x3>
    2e4a:	89 1f       	adc	r24, r25
    2e4c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <tickCount+0x3>
    2e50:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <us_over_10+0x1>
    2e54:	9c 5f       	subi	r25, 0xFC	; 252
    2e56:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <us_over_10+0x1>
    2e5a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <us_over_10>
    2e5e:	80 51       	subi	r24, 0x10	; 16
    2e60:	97 42       	sbci	r25, 0x27	; 39
    2e62:	c0 f0       	brcs	.+48     	; 0x2e94 <end>
    2e64:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <us_over_10+0x1>
    2e68:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <us_over_10>
    2e6c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <msCounter>
    2e70:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <msCounter+0x1>
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <msCounter>
    2e7a:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <msCounter+0x1>
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <msCounter+0x2>
    2e84:	89 1f       	adc	r24, r25
    2e86:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <msCounter+0x2>
    2e8a:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <msCounter+0x3>
    2e8e:	89 1f       	adc	r24, r25
    2e90:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <msCounter+0x3>

00002e94 <end>:
    2e94:	2f be       	out	0x3f, r2	; 63
    2e96:	9f 91       	pop	r25
    2e98:	8f 91       	pop	r24
    2e9a:	2f 90       	pop	r2
    2e9c:	18 95       	reti

00002e9e <_ZN13OrangutanTime17delayMillisecondsEj>:
    2e9e:	28 ee       	ldi	r18, 0xE8	; 232
    2ea0:	33 e0       	ldi	r19, 0x03	; 3
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	48 f0       	brcs	.+18     	; 0x2eb8 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2ea6:	f9 01       	movw	r30, r18
    2ea8:	6f 93       	push	r22
    2eaa:	64 e0       	ldi	r22, 0x04	; 4
    2eac:	6a 95       	dec	r22
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2eb0:	6f 91       	pop	r22
    2eb2:	31 97       	sbiw	r30, 0x01	; 1
    2eb4:	c9 f7       	brne	.-14     	; 0x2ea8 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2eb6:	f5 cf       	rjmp	.-22     	; 0x2ea2 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2eb8:	08 95       	ret

00002eba <delay_ms>:
    2eba:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_ZN13OrangutanTime17delayMillisecondsEj>
    2ebe:	08 95       	ret

00002ec0 <_ZN13OrangutanTime5init2Ev>:
    2ec0:	e0 e7       	ldi	r30, 0x70	; 112
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	8e 7f       	andi	r24, 0xFE	; 254
    2ec8:	80 83       	st	Z, r24
    2eca:	a0 eb       	ldi	r26, 0xB0	; 176
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	8c 91       	ld	r24, X
    2ed0:	83 60       	ori	r24, 0x03	; 3
    2ed2:	8c 93       	st	X, r24
    2ed4:	a1 eb       	ldi	r26, 0xB1	; 177
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	8c 91       	ld	r24, X
    2eda:	80 7f       	andi	r24, 0xF0	; 240
    2edc:	8c 93       	st	X, r24
    2ede:	8c 91       	ld	r24, X
    2ee0:	82 60       	ori	r24, 0x02	; 2
    2ee2:	8c 93       	st	X, r24
    2ee4:	b8 9a       	sbi	0x17, 0	; 23
    2ee6:	80 81       	ld	r24, Z
    2ee8:	81 60       	ori	r24, 0x01	; 1
    2eea:	80 83       	st	Z, r24
    2eec:	78 94       	sei
    2eee:	08 95       	ret

00002ef0 <_ZN13OrangutanTime4initEv>:
    2ef0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2ef4:	81 11       	cpse	r24, r1
    2ef6:	05 c0       	rjmp	.+10     	; 0x2f02 <_ZN13OrangutanTime4initEv+0x12>
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2efe:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <_ZN13OrangutanTime5init2Ev>
    2f02:	08 95       	ret

00002f04 <_ZN13OrangutanTime2msEv>:
    2f04:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN13OrangutanTime4initEv>
    2f08:	e0 e7       	ldi	r30, 0x70	; 112
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	8e 7f       	andi	r24, 0xFE	; 254
    2f10:	80 83       	st	Z, r24
    2f12:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <msCounter>
    2f16:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <msCounter+0x1>
    2f1a:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <msCounter+0x2>
    2f1e:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <msCounter+0x3>
    2f22:	20 81       	ld	r18, Z
    2f24:	21 60       	ori	r18, 0x01	; 1
    2f26:	20 83       	st	Z, r18
    2f28:	08 95       	ret

00002f2a <get_ms>:
    2f2a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN13OrangutanTime2msEv>
    2f2e:	08 95       	ret

00002f30 <_ZN13OrangutanTime5resetEv>:
    2f30:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN13OrangutanTime4initEv>
    2f34:	e0 e7       	ldi	r30, 0x70	; 112
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	8e 7f       	andi	r24, 0xFE	; 254
    2f3c:	80 83       	st	Z, r24
    2f3e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <msCounter>
    2f42:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <msCounter+0x1>
    2f46:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <msCounter+0x2>
    2f4a:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <msCounter+0x3>
    2f4e:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <us_over_10+0x1>
    2f52:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <us_over_10>
    2f56:	80 81       	ld	r24, Z
    2f58:	81 60       	ori	r24, 0x01	; 1
    2f5a:	80 83       	st	Z, r24
    2f5c:	08 95       	ret

00002f5e <calibrate_line_sensors>:
    2f5e:	68 2f       	mov	r22, r24
    2f60:	81 eb       	ldi	r24, 0xB1	; 177
    2f62:	91 e0       	ldi	r25, 0x01	; 1
    2f64:	0e 94 9e 1b 	call	0x373c	; 0x373c <_ZN16PololuQTRSensors9calibrateEh>
    2f68:	08 95       	ret

00002f6a <read_line_sensors_calibrated>:
    2f6a:	46 2f       	mov	r20, r22
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	81 eb       	ldi	r24, 0xB1	; 177
    2f70:	91 e0       	ldi	r25, 0x01	; 1
    2f72:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2f76:	08 95       	ret

00002f78 <read_line>:
    2f78:	46 2f       	mov	r20, r22
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	81 eb       	ldi	r24, 0xB1	; 177
    2f80:	91 e0       	ldi	r25, 0x01	; 1
    2f82:	0e 94 6f 1c 	call	0x38de	; 0x38de <_ZN16PololuQTRSensors8readLineEPjhh>
    2f86:	08 95       	ret

00002f88 <_ZN9Pololu3pi4initEjh>:
    2f88:	0f 93       	push	r16
    2f8a:	cf 93       	push	r28
    2f8c:	df 93       	push	r29
    2f8e:	00 d0       	rcall	.+0      	; 0x2f90 <_ZN9Pololu3pi4initEjh+0x8>
    2f90:	00 d0       	rcall	.+0      	; 0x2f92 <_ZN9Pololu3pi4initEjh+0xa>
    2f92:	1f 92       	push	r1
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	9c 01       	movw	r18, r24
    2f9a:	85 e0       	ldi	r24, 0x05	; 5
    2f9c:	e0 e5       	ldi	r30, 0x50	; 80
    2f9e:	f1 e0       	ldi	r31, 0x01	; 1
    2fa0:	de 01       	movw	r26, r28
    2fa2:	11 96       	adiw	r26, 0x01	; 1
    2fa4:	01 90       	ld	r0, Z+
    2fa6:	0d 92       	st	X+, r0
    2fa8:	8a 95       	dec	r24
    2faa:	e1 f7       	brne	.-8      	; 0x2fa4 <_ZN9Pololu3pi4initEjh+0x1c>
    2fac:	66 23       	and	r22, r22
    2fae:	11 f0       	breq	.+4      	; 0x2fb4 <_ZN9Pololu3pi4initEjh+0x2c>
    2fb0:	0f ef       	ldi	r16, 0xFF	; 255
    2fb2:	01 c0       	rjmp	.+2      	; 0x2fb6 <_ZN9Pololu3pi4initEjh+0x2e>
    2fb4:	03 e1       	ldi	r16, 0x13	; 19
    2fb6:	45 e0       	ldi	r20, 0x05	; 5
    2fb8:	be 01       	movw	r22, r28
    2fba:	6f 5f       	subi	r22, 0xFF	; 255
    2fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbe:	81 eb       	ldi	r24, 0xB1	; 177
    2fc0:	91 e0       	ldi	r25, 0x01	; 1
    2fc2:	0e 94 96 18 	call	0x312c	; 0x312c <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2fc6:	81 eb       	ldi	r24, 0xB1	; 177
    2fc8:	91 e0       	ldi	r25, 0x01	; 1
    2fca:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN16PololuQTRSensors11emittersOffEv>
    2fce:	0e 94 98 17 	call	0x2f30	; 0x2f30 <_ZN13OrangutanTime5resetEv>
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	df 91       	pop	r29
    2fde:	cf 91       	pop	r28
    2fe0:	0f 91       	pop	r16
    2fe2:	08 95       	ret

00002fe4 <pololu_3pi_init>:
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN9Pololu3pi4initEjh>
    2fea:	08 95       	ret

00002fec <_GLOBAL__sub_D_pololu_3pi_init>:
    2fec:	81 eb       	ldi	r24, 0xB1	; 177
    2fee:	91 e0       	ldi	r25, 0x01	; 1
    2ff0:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <_ZN16PololuQTRSensorsD1Ev>
    2ff4:	08 95       	ret

00002ff6 <delay_us>:
    2ff6:	6f 93       	push	r22
    2ff8:	64 e0       	ldi	r22, 0x04	; 4
    2ffa:	6a 95       	dec	r22
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <delay_us+0x4>
    2ffe:	6f 91       	pop	r22
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	c9 f7       	brne	.-14     	; 0x2ff6 <delay_us>
    3004:	08 95       	ret

00003006 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    3006:	fc 01       	movw	r30, r24
    3008:	11 82       	std	Z+1, r1	; 0x01
    300a:	10 82       	st	Z, r1
    300c:	13 82       	std	Z+3, r1	; 0x03
    300e:	12 82       	std	Z+2, r1	; 0x02
    3010:	15 82       	std	Z+5, r1	; 0x05
    3012:	14 82       	std	Z+4, r1	; 0x04
    3014:	16 82       	std	Z+6, r1	; 0x06
    3016:	68 30       	cpi	r22, 0x08	; 8
    3018:	68 f4       	brcc	.+26     	; 0x3034 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    301a:	89 e2       	ldi	r24, 0x29	; 41
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	91 83       	std	Z+1, r25	; 0x01
    3020:	80 83       	st	Z, r24
    3022:	8b e2       	ldi	r24, 0x2B	; 43
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	93 83       	std	Z+3, r25	; 0x03
    3028:	82 83       	std	Z+2, r24	; 0x02
    302a:	8a e2       	ldi	r24, 0x2A	; 42
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	95 83       	std	Z+5, r25	; 0x05
    3030:	84 83       	std	Z+4, r24	; 0x04
    3032:	1f c0       	rjmp	.+62     	; 0x3072 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    3034:	6e 30       	cpi	r22, 0x0E	; 14
    3036:	70 f4       	brcc	.+28     	; 0x3054 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    3038:	83 e2       	ldi	r24, 0x23	; 35
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	80 83       	st	Z, r24
    3040:	85 e2       	ldi	r24, 0x25	; 37
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	93 83       	std	Z+3, r25	; 0x03
    3046:	82 83       	std	Z+2, r24	; 0x02
    3048:	84 e2       	ldi	r24, 0x24	; 36
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	95 83       	std	Z+5, r25	; 0x05
    304e:	84 83       	std	Z+4, r24	; 0x04
    3050:	68 50       	subi	r22, 0x08	; 8
    3052:	0f c0       	rjmp	.+30     	; 0x3072 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    3054:	65 31       	cpi	r22, 0x15	; 21
    3056:	98 f4       	brcc	.+38     	; 0x307e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    3058:	86 e2       	ldi	r24, 0x26	; 38
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	91 83       	std	Z+1, r25	; 0x01
    305e:	80 83       	st	Z, r24
    3060:	88 e2       	ldi	r24, 0x28	; 40
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	93 83       	std	Z+3, r25	; 0x03
    3066:	82 83       	std	Z+2, r24	; 0x02
    3068:	87 e2       	ldi	r24, 0x27	; 39
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	95 83       	std	Z+5, r25	; 0x05
    306e:	84 83       	std	Z+4, r24	; 0x04
    3070:	6e 50       	subi	r22, 0x0E	; 14
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	01 c0       	rjmp	.+2      	; 0x3078 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    3076:	88 0f       	add	r24, r24
    3078:	6a 95       	dec	r22
    307a:	ea f7       	brpl	.-6      	; 0x3076 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    307c:	86 83       	std	Z+6, r24	; 0x06
    307e:	08 95       	ret

00003080 <_ZN16PololuQTRSensors4initEhhh>:
    3080:	a7 e0       	ldi	r26, 0x07	; 7
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	e6 e4       	ldi	r30, 0x46	; 70
    3086:	f8 e1       	ldi	r31, 0x18	; 24
    3088:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__prologue_saves__+0x1c>
    308c:	8c 01       	movw	r16, r24
    308e:	fc 01       	movw	r30, r24
    3090:	11 82       	std	Z+1, r1	; 0x01
    3092:	10 82       	st	Z, r1
    3094:	13 82       	std	Z+3, r1	; 0x03
    3096:	12 82       	std	Z+2, r1	; 0x02
    3098:	15 82       	std	Z+5, r1	; 0x05
    309a:	14 82       	std	Z+4, r1	; 0x04
    309c:	17 82       	std	Z+7, r1	; 0x07
    309e:	16 82       	std	Z+6, r1	; 0x06
    30a0:	61 31       	cpi	r22, 0x11	; 17
    30a2:	18 f0       	brcs	.+6      	; 0x30aa <_ZN16PololuQTRSensors4initEhhh+0x2a>
    30a4:	80 e1       	ldi	r24, 0x10	; 16
    30a6:	80 87       	std	Z+8, r24	; 0x08
    30a8:	02 c0       	rjmp	.+4      	; 0x30ae <_ZN16PololuQTRSensors4initEhhh+0x2e>
    30aa:	fc 01       	movw	r30, r24
    30ac:	60 87       	std	Z+8, r22	; 0x08
    30ae:	f8 01       	movw	r30, r16
    30b0:	20 8b       	std	Z+16, r18	; 0x10
    30b2:	64 2f       	mov	r22, r20
    30b4:	ce 01       	movw	r24, r28
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	0e 94 03 18 	call	0x3006	; 0x3006 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    30bc:	8f 81       	ldd	r24, Y+7	; 0x07
    30be:	f8 01       	movw	r30, r16
    30c0:	81 87       	std	Z+9, r24	; 0x09
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	9c 81       	ldd	r25, Y+4	; 0x04
    30c6:	93 87       	std	Z+11, r25	; 0x0b
    30c8:	82 87       	std	Z+10, r24	; 0x0a
    30ca:	8d 81       	ldd	r24, Y+5	; 0x05
    30cc:	9e 81       	ldd	r25, Y+6	; 0x06
    30ce:	95 87       	std	Z+13, r25	; 0x0d
    30d0:	84 87       	std	Z+12, r24	; 0x0c
    30d2:	27 96       	adiw	r28, 0x07	; 7
    30d4:	e4 e0       	ldi	r30, 0x04	; 4
    30d6:	0c 94 c9 1d 	jmp	0x3b92	; 0x3b92 <__epilogue_restores__+0x1c>

000030da <_ZN16PololuQTRSensors11emittersOffEv>:
    30da:	fc 01       	movw	r30, r24
    30dc:	a4 85       	ldd	r26, Z+12	; 0x0c
    30de:	b5 85       	ldd	r27, Z+13	; 0x0d
    30e0:	10 97       	sbiw	r26, 0x00	; 0
    30e2:	79 f0       	breq	.+30     	; 0x3102 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    30e4:	8c 91       	ld	r24, X
    30e6:	91 85       	ldd	r25, Z+9	; 0x09
    30e8:	89 2b       	or	r24, r25
    30ea:	8c 93       	st	X, r24
    30ec:	a2 85       	ldd	r26, Z+10	; 0x0a
    30ee:	b3 85       	ldd	r27, Z+11	; 0x0b
    30f0:	9c 91       	ld	r25, X
    30f2:	81 85       	ldd	r24, Z+9	; 0x09
    30f4:	80 95       	com	r24
    30f6:	89 23       	and	r24, r25
    30f8:	8c 93       	st	X, r24
    30fa:	88 ec       	ldi	r24, 0xC8	; 200
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <delay_us>
    3102:	08 95       	ret

00003104 <_ZN16PololuQTRSensors10emittersOnEv>:
    3104:	fc 01       	movw	r30, r24
    3106:	a4 85       	ldd	r26, Z+12	; 0x0c
    3108:	b5 85       	ldd	r27, Z+13	; 0x0d
    310a:	10 97       	sbiw	r26, 0x00	; 0
    310c:	71 f0       	breq	.+28     	; 0x312a <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    310e:	8c 91       	ld	r24, X
    3110:	91 85       	ldd	r25, Z+9	; 0x09
    3112:	89 2b       	or	r24, r25
    3114:	8c 93       	st	X, r24
    3116:	a2 85       	ldd	r26, Z+10	; 0x0a
    3118:	b3 85       	ldd	r27, Z+11	; 0x0b
    311a:	8c 91       	ld	r24, X
    311c:	91 85       	ldd	r25, Z+9	; 0x09
    311e:	89 2b       	or	r24, r25
    3120:	8c 93       	st	X, r24
    3122:	88 ec       	ldi	r24, 0xC8	; 200
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <delay_us>
    312a:	08 95       	ret

0000312c <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    312c:	a7 e0       	ldi	r26, 0x07	; 7
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	ec e9       	ldi	r30, 0x9C	; 156
    3132:	f8 e1       	ldi	r31, 0x18	; 24
    3134:	0c 94 a2 1d 	jmp	0x3b44	; 0x3b44 <__prologue_saves__+0x6>
    3138:	7c 01       	movw	r14, r24
    313a:	4b 01       	movw	r8, r22
    313c:	64 2f       	mov	r22, r20
    313e:	39 01       	movw	r6, r18
    3140:	40 2f       	mov	r20, r16
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	0e 94 40 18 	call	0x3080	; 0x3080 <_ZN16PololuQTRSensors4initEhhh>
    3148:	87 01       	movw	r16, r14
    314a:	0f 5b       	subi	r16, 0xBF	; 191
    314c:	1f 4f       	sbci	r17, 0xFF	; 255
    314e:	f8 01       	movw	r30, r16
    3150:	10 82       	st	Z, r1
    3152:	67 01       	movw	r12, r14
    3154:	f2 e4       	ldi	r31, 0x42	; 66
    3156:	cf 0e       	add	r12, r31
    3158:	d1 1c       	adc	r13, r1
    315a:	f6 01       	movw	r30, r12
    315c:	10 82       	st	Z, r1
    315e:	57 01       	movw	r10, r14
    3160:	f3 e4       	ldi	r31, 0x43	; 67
    3162:	af 0e       	add	r10, r31
    3164:	b1 1c       	adc	r11, r1
    3166:	f5 01       	movw	r30, r10
    3168:	10 82       	st	Z, r1
    316a:	f7 01       	movw	r30, r14
    316c:	77 86       	std	Z+15, r7	; 0x0f
    316e:	66 86       	std	Z+14, r6	; 0x0e
    3170:	51 2c       	mov	r5, r1
    3172:	f7 01       	movw	r30, r14
    3174:	80 85       	ldd	r24, Z+8	; 0x08
    3176:	58 16       	cp	r5, r24
    3178:	50 f5       	brcc	.+84     	; 0x31ce <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    317a:	65 2c       	mov	r6, r5
    317c:	71 2c       	mov	r7, r1
    317e:	f4 01       	movw	r30, r8
    3180:	e6 0d       	add	r30, r6
    3182:	f7 1d       	adc	r31, r7
    3184:	60 81       	ld	r22, Z
    3186:	ce 01       	movw	r24, r28
    3188:	01 96       	adiw	r24, 0x01	; 1
    318a:	0e 94 03 18 	call	0x3006	; 0x3006 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    318e:	2f 81       	ldd	r18, Y+7	; 0x07
    3190:	f7 01       	movw	r30, r14
    3192:	e6 0d       	add	r30, r6
    3194:	f7 1d       	adc	r31, r7
    3196:	21 8b       	std	Z+17, r18	; 0x11
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	f3 01       	movw	r30, r6
    319e:	ee 0f       	add	r30, r30
    31a0:	ff 1f       	adc	r31, r31
    31a2:	ee 0d       	add	r30, r14
    31a4:	ff 1d       	adc	r31, r15
    31a6:	92 a3       	std	Z+34, r25	; 0x22
    31a8:	81 a3       	std	Z+33, r24	; 0x21
    31aa:	83 32       	cpi	r24, 0x23	; 35
    31ac:	91 05       	cpc	r25, r1
    31ae:	11 f4       	brne	.+4      	; 0x31b4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    31b0:	f8 01       	movw	r30, r16
    31b2:	08 c0       	rjmp	.+16     	; 0x31c4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    31b4:	86 32       	cpi	r24, 0x26	; 38
    31b6:	91 05       	cpc	r25, r1
    31b8:	11 f4       	brne	.+4      	; 0x31be <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    31ba:	f6 01       	movw	r30, r12
    31bc:	03 c0       	rjmp	.+6      	; 0x31c4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    31be:	89 97       	sbiw	r24, 0x29	; 41
    31c0:	21 f4       	brne	.+8      	; 0x31ca <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    31c2:	f5 01       	movw	r30, r10
    31c4:	80 81       	ld	r24, Z
    31c6:	82 2b       	or	r24, r18
    31c8:	80 83       	st	Z, r24
    31ca:	53 94       	inc	r5
    31cc:	d2 cf       	rjmp	.-92     	; 0x3172 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    31ce:	27 96       	adiw	r28, 0x07	; 7
    31d0:	ef e0       	ldi	r30, 0x0F	; 15
    31d2:	0c 94 be 1d 	jmp	0x3b7c	; 0x3b7c <__epilogue_restores__+0x6>

000031d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    31d6:	a0 e0       	ldi	r26, 0x00	; 0
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e1 ef       	ldi	r30, 0xF1	; 241
    31dc:	f8 e1       	ldi	r31, 0x18	; 24
    31de:	0c 94 a4 1d 	jmp	0x3b48	; 0x3b48 <__prologue_saves__+0xa>
    31e2:	ec 01       	movw	r28, r24
    31e4:	5b 01       	movw	r10, r22
    31e6:	6c 01       	movw	r12, r24
    31e8:	81 e4       	ldi	r24, 0x41	; 65
    31ea:	c8 0e       	add	r12, r24
    31ec:	d1 1c       	adc	r13, r1
    31ee:	f6 01       	movw	r30, r12
    31f0:	80 80       	ld	r8, Z
    31f2:	7e 01       	movw	r14, r28
    31f4:	f2 e4       	ldi	r31, 0x42	; 66
    31f6:	ef 0e       	add	r14, r31
    31f8:	f1 1c       	adc	r15, r1
    31fa:	f7 01       	movw	r30, r14
    31fc:	70 80       	ld	r7, Z
    31fe:	8e 01       	movw	r16, r28
    3200:	0d 5b       	subi	r16, 0xBD	; 189
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
    3204:	f8 01       	movw	r30, r16
    3206:	90 80       	ld	r9, Z
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	98 85       	ldd	r25, Y+8	; 0x08
    320c:	89 17       	cp	r24, r25
    320e:	48 f4       	brcc	.+18     	; 0x3222 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    3210:	f5 01       	movw	r30, r10
    3212:	e8 0f       	add	r30, r24
    3214:	f1 1d       	adc	r31, r1
    3216:	e8 0f       	add	r30, r24
    3218:	f1 1d       	adc	r31, r1
    321a:	11 82       	std	Z+1, r1	; 0x01
    321c:	10 82       	st	Z, r1
    321e:	8f 5f       	subi	r24, 0xFF	; 255
    3220:	f4 cf       	rjmp	.-24     	; 0x320a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    3222:	84 b1       	in	r24, 0x04	; 4
    3224:	f6 01       	movw	r30, r12
    3226:	90 81       	ld	r25, Z
    3228:	89 2b       	or	r24, r25
    322a:	84 b9       	out	0x04, r24	; 4
    322c:	87 b1       	in	r24, 0x07	; 7
    322e:	f7 01       	movw	r30, r14
    3230:	90 81       	ld	r25, Z
    3232:	89 2b       	or	r24, r25
    3234:	87 b9       	out	0x07, r24	; 7
    3236:	8a b1       	in	r24, 0x0a	; 10
    3238:	f8 01       	movw	r30, r16
    323a:	90 81       	ld	r25, Z
    323c:	89 2b       	or	r24, r25
    323e:	8a b9       	out	0x0a, r24	; 10
    3240:	85 b1       	in	r24, 0x05	; 5
    3242:	f6 01       	movw	r30, r12
    3244:	90 81       	ld	r25, Z
    3246:	89 2b       	or	r24, r25
    3248:	85 b9       	out	0x05, r24	; 5
    324a:	88 b1       	in	r24, 0x08	; 8
    324c:	f7 01       	movw	r30, r14
    324e:	90 81       	ld	r25, Z
    3250:	89 2b       	or	r24, r25
    3252:	88 b9       	out	0x08, r24	; 8
    3254:	8b b1       	in	r24, 0x0b	; 11
    3256:	f8 01       	movw	r30, r16
    3258:	90 81       	ld	r25, Z
    325a:	89 2b       	or	r24, r25
    325c:	8b b9       	out	0x0b, r24	; 11
    325e:	8a e0       	ldi	r24, 0x0A	; 10
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <delay_us>
    3266:	94 b1       	in	r25, 0x04	; 4
    3268:	f6 01       	movw	r30, r12
    326a:	80 81       	ld	r24, Z
    326c:	80 95       	com	r24
    326e:	89 23       	and	r24, r25
    3270:	84 b9       	out	0x04, r24	; 4
    3272:	97 b1       	in	r25, 0x07	; 7
    3274:	f7 01       	movw	r30, r14
    3276:	80 81       	ld	r24, Z
    3278:	80 95       	com	r24
    327a:	89 23       	and	r24, r25
    327c:	87 b9       	out	0x07, r24	; 7
    327e:	9a b1       	in	r25, 0x0a	; 10
    3280:	f8 01       	movw	r30, r16
    3282:	80 81       	ld	r24, Z
    3284:	80 95       	com	r24
    3286:	89 23       	and	r24, r25
    3288:	8a b9       	out	0x0a, r24	; 10
    328a:	95 b1       	in	r25, 0x05	; 5
    328c:	f6 01       	movw	r30, r12
    328e:	80 81       	ld	r24, Z
    3290:	80 95       	com	r24
    3292:	89 23       	and	r24, r25
    3294:	85 b9       	out	0x05, r24	; 5
    3296:	98 b1       	in	r25, 0x08	; 8
    3298:	f7 01       	movw	r30, r14
    329a:	80 81       	ld	r24, Z
    329c:	80 95       	com	r24
    329e:	89 23       	and	r24, r25
    32a0:	88 b9       	out	0x08, r24	; 8
    32a2:	9b b1       	in	r25, 0x0b	; 11
    32a4:	f8 01       	movw	r30, r16
    32a6:	80 81       	ld	r24, Z
    32a8:	80 95       	com	r24
    32aa:	89 23       	and	r24, r25
    32ac:	8b b9       	out	0x0b, r24	; 11
    32ae:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    32b2:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    32b6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    32ba:	83 60       	ori	r24, 0x03	; 3
    32bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    32c6:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    32d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    32d2:	82 17       	cp	r24, r18
    32d4:	93 07       	cpc	r25, r19
    32d6:	20 f5       	brcc	.+72     	; 0x3320 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    32d8:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    32dc:	2c 2d       	mov	r18, r12
    32de:	24 1b       	sub	r18, r20
    32e0:	82 0f       	add	r24, r18
    32e2:	91 1d       	adc	r25, r1
    32e4:	03 b1       	in	r16, 0x03	; 3
    32e6:	08 11       	cpse	r16, r8
    32e8:	32 c0       	rjmp	.+100    	; 0x334e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    32ea:	f6 b0       	in	r15, 0x06	; 6
    32ec:	f7 10       	cpse	r15, r7
    32ee:	2f c0       	rjmp	.+94     	; 0x334e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    32f0:	29 b1       	in	r18, 0x09	; 9
    32f2:	29 11       	cpse	r18, r9
    32f4:	2c c0       	rjmp	.+88     	; 0x334e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    32f6:	10 c0       	rjmp	.+32     	; 0x3318 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    32f8:	21 2f       	mov	r18, r17
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	a9 01       	movw	r20, r18
    32fe:	44 0f       	add	r20, r20
    3300:	55 1f       	adc	r21, r21
    3302:	f5 01       	movw	r30, r10
    3304:	e4 0f       	add	r30, r20
    3306:	f5 1f       	adc	r31, r21
    3308:	60 81       	ld	r22, Z
    330a:	71 81       	ldd	r23, Z+1	; 0x01
    330c:	67 2b       	or	r22, r23
    330e:	21 f1       	breq	.+72     	; 0x3358 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    3310:	1f 5f       	subi	r17, 0xFF	; 255
    3312:	28 85       	ldd	r18, Y+8	; 0x08
    3314:	12 17       	cp	r17, r18
    3316:	80 f3       	brcs	.-32     	; 0x32f8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    3318:	7f 2c       	mov	r7, r15
    331a:	80 2e       	mov	r8, r16
    331c:	4c 2d       	mov	r20, r12
    331e:	d7 cf       	rjmp	.-82     	; 0x32ce <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    3320:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3324:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	88 85       	ldd	r24, Y+8	; 0x08
    332c:	28 17       	cp	r18, r24
    332e:	30 f5       	brcc	.+76     	; 0x337c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    3330:	f5 01       	movw	r30, r10
    3332:	e2 0f       	add	r30, r18
    3334:	f1 1d       	adc	r31, r1
    3336:	e2 0f       	add	r30, r18
    3338:	f1 1d       	adc	r31, r1
    333a:	80 81       	ld	r24, Z
    333c:	91 81       	ldd	r25, Z+1	; 0x01
    333e:	89 2b       	or	r24, r25
    3340:	21 f4       	brne	.+8      	; 0x334a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    3342:	8e 85       	ldd	r24, Y+14	; 0x0e
    3344:	9f 85       	ldd	r25, Y+15	; 0x0f
    3346:	91 83       	std	Z+1, r25	; 0x01
    3348:	80 83       	st	Z, r24
    334a:	2f 5f       	subi	r18, 0xFF	; 255
    334c:	ee cf       	rjmp	.-36     	; 0x332a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    334e:	03 b1       	in	r16, 0x03	; 3
    3350:	f6 b0       	in	r15, 0x06	; 6
    3352:	99 b0       	in	r9, 0x09	; 9
    3354:	10 e0       	ldi	r17, 0x00	; 0
    3356:	dd cf       	rjmp	.-70     	; 0x3312 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    3358:	de 01       	movw	r26, r28
    335a:	a4 0f       	add	r26, r20
    335c:	b5 1f       	adc	r27, r21
    335e:	91 96       	adiw	r26, 0x21	; 33
    3360:	0d 90       	ld	r0, X+
    3362:	bc 91       	ld	r27, X
    3364:	a0 2d       	mov	r26, r0
    3366:	4c 91       	ld	r20, X
    3368:	de 01       	movw	r26, r28
    336a:	a2 0f       	add	r26, r18
    336c:	b3 1f       	adc	r27, r19
    336e:	51 96       	adiw	r26, 0x11	; 17
    3370:	2c 91       	ld	r18, X
    3372:	42 23       	and	r20, r18
    3374:	69 f6       	brne	.-102    	; 0x3310 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	80 83       	st	Z, r24
    337a:	ca cf       	rjmp	.-108    	; 0x3310 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
    3380:	ed e0       	ldi	r30, 0x0D	; 13
    3382:	0c 94 c0 1d 	jmp	0x3b80	; 0x3b80 <__epilogue_restores__+0xa>

00003386 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    3386:	ef 92       	push	r14
    3388:	ff 92       	push	r15
    338a:	0f 93       	push	r16
    338c:	1f 93       	push	r17
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
    3392:	fc 01       	movw	r30, r24
    3394:	9b 01       	movw	r18, r22
    3396:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    339a:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    339e:	47 b1       	in	r20, 0x07	; 7
    33a0:	18 b1       	in	r17, 0x08	; 8
    33a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    33a6:	86 fd       	sbrc	r24, 6
    33a8:	fc cf       	rjmp	.-8      	; 0x33a2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 85       	ldd	r25, Z+8	; 0x08
    33ae:	89 17       	cp	r24, r25
    33b0:	48 f4       	brcc	.+18     	; 0x33c4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    33b2:	d9 01       	movw	r26, r18
    33b4:	a8 0f       	add	r26, r24
    33b6:	b1 1d       	adc	r27, r1
    33b8:	a8 0f       	add	r26, r24
    33ba:	b1 1d       	adc	r27, r1
    33bc:	1d 92       	st	X+, r1
    33be:	1c 92       	st	X, r1
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	f4 cf       	rjmp	.-24     	; 0x33ac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    33c4:	97 b1       	in	r25, 0x07	; 7
    33c6:	82 a1       	ldd	r24, Z+34	; 0x22
    33c8:	80 95       	com	r24
    33ca:	89 23       	and	r24, r25
    33cc:	87 b9       	out	0x07, r24	; 7
    33ce:	98 b1       	in	r25, 0x08	; 8
    33d0:	82 a1       	ldd	r24, Z+34	; 0x22
    33d2:	80 95       	com	r24
    33d4:	89 23       	and	r24, r25
    33d6:	88 b9       	out	0x08, r24	; 8
    33d8:	87 e8       	ldi	r24, 0x87	; 135
    33da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    33de:	e1 2c       	mov	r14, r1
    33e0:	81 a1       	ldd	r24, Z+33	; 0x21
    33e2:	e8 16       	cp	r14, r24
    33e4:	10 f0       	brcs	.+4      	; 0x33ea <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    33e6:	e1 2c       	mov	r14, r1
    33e8:	29 c0       	rjmp	.+82     	; 0x343c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    33ea:	50 e0       	ldi	r21, 0x00	; 0
    33ec:	80 85       	ldd	r24, Z+8	; 0x08
    33ee:	58 17       	cp	r21, r24
    33f0:	18 f5       	brcc	.+70     	; 0x3438 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    33f2:	a5 2f       	mov	r26, r21
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	ef 01       	movw	r28, r30
    33f8:	ca 0f       	add	r28, r26
    33fa:	db 1f       	adc	r29, r27
    33fc:	89 89       	ldd	r24, Y+17	; 0x11
    33fe:	80 64       	ori	r24, 0x40	; 64
    3400:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    3404:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3408:	80 64       	ori	r24, 0x40	; 64
    340a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    340e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3412:	86 fd       	sbrc	r24, 6
    3414:	fc cf       	rjmp	.-8      	; 0x340e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    3416:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    341a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    341e:	aa 0f       	add	r26, r26
    3420:	bb 1f       	adc	r27, r27
    3422:	a2 0f       	add	r26, r18
    3424:	b3 1f       	adc	r27, r19
    3426:	8d 91       	ld	r24, X+
    3428:	9c 91       	ld	r25, X
    342a:	11 97       	sbiw	r26, 0x01	; 1
    342c:	86 0f       	add	r24, r22
    342e:	97 1f       	adc	r25, r23
    3430:	8d 93       	st	X+, r24
    3432:	9c 93       	st	X, r25
    3434:	5f 5f       	subi	r21, 0xFF	; 255
    3436:	da cf       	rjmp	.-76     	; 0x33ec <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    3438:	e3 94       	inc	r14
    343a:	d2 cf       	rjmp	.-92     	; 0x33e0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    343c:	80 85       	ldd	r24, Z+8	; 0x08
    343e:	e8 16       	cp	r14, r24
    3440:	a0 f4       	brcc	.+40     	; 0x346a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    3442:	e9 01       	movw	r28, r18
    3444:	ce 0d       	add	r28, r14
    3446:	d1 1d       	adc	r29, r1
    3448:	ce 0d       	add	r28, r14
    344a:	d1 1d       	adc	r29, r1
    344c:	61 a1       	ldd	r22, Z+33	; 0x21
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	cb 01       	movw	r24, r22
    3452:	95 95       	asr	r25
    3454:	87 95       	ror	r24
    3456:	a8 81       	ld	r26, Y
    3458:	b9 81       	ldd	r27, Y+1	; 0x01
    345a:	8a 0f       	add	r24, r26
    345c:	9b 1f       	adc	r25, r27
    345e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__udivmodhi4>
    3462:	79 83       	std	Y+1, r23	; 0x01
    3464:	68 83       	st	Y, r22
    3466:	e3 94       	inc	r14
    3468:	e9 cf       	rjmp	.-46     	; 0x343c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    346a:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    346e:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3472:	18 b9       	out	0x08, r17	; 8
    3474:	47 b9       	out	0x07, r20	; 7
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	e6 e0       	ldi	r30, 0x06	; 6
    347c:	0c 94 c7 1d 	jmp	0x3b8e	; 0x3b8e <__epilogue_restores__+0x18>

00003480 <_ZN16PololuQTRSensors4readEPjh>:
    3480:	a0 e2       	ldi	r26, 0x20	; 32
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	e6 e4       	ldi	r30, 0x46	; 70
    3486:	fa e1       	ldi	r31, 0x1A	; 26
    3488:	0c 94 aa 1d 	jmp	0x3b54	; 0x3b54 <__prologue_saves__+0x16>
    348c:	8c 01       	movw	r16, r24
    348e:	7b 01       	movw	r14, r22
    3490:	d4 2e       	mov	r13, r20
    3492:	8f ef       	ldi	r24, 0xFF	; 255
    3494:	84 0f       	add	r24, r20
    3496:	82 30       	cpi	r24, 0x02	; 2
    3498:	18 f4       	brcc	.+6      	; 0x34a0 <_ZN16PololuQTRSensors4readEPjh+0x20>
    349a:	c8 01       	movw	r24, r16
    349c:	0e 94 82 18 	call	0x3104	; 0x3104 <_ZN16PololuQTRSensors10emittersOnEv>
    34a0:	d8 01       	movw	r26, r16
    34a2:	50 96       	adiw	r26, 0x10	; 16
    34a4:	8c 91       	ld	r24, X
    34a6:	b7 01       	movw	r22, r14
    34a8:	81 11       	cpse	r24, r1
    34aa:	10 c0       	rjmp	.+32     	; 0x34cc <_ZN16PololuQTRSensors4readEPjh+0x4c>
    34ac:	c8 01       	movw	r24, r16
    34ae:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    34b2:	c8 01       	movw	r24, r16
    34b4:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN16PololuQTRSensors11emittersOffEv>
    34b8:	b2 e0       	ldi	r27, 0x02	; 2
    34ba:	db 12       	cpse	r13, r27
    34bc:	3a c0       	rjmp	.+116    	; 0x3532 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    34be:	be 01       	movw	r22, r28
    34c0:	6f 5f       	subi	r22, 0xFF	; 255
    34c2:	7f 4f       	sbci	r23, 0xFF	; 255
    34c4:	c8 01       	movw	r24, r16
    34c6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    34ca:	0f c0       	rjmp	.+30     	; 0x34ea <_ZN16PololuQTRSensors4readEPjh+0x6a>
    34cc:	c8 01       	movw	r24, r16
    34ce:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    34d2:	c8 01       	movw	r24, r16
    34d4:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN16PololuQTRSensors11emittersOffEv>
    34d8:	e2 e0       	ldi	r30, 0x02	; 2
    34da:	de 12       	cpse	r13, r30
    34dc:	2a c0       	rjmp	.+84     	; 0x3532 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    34de:	be 01       	movw	r22, r28
    34e0:	6f 5f       	subi	r22, 0xFF	; 255
    34e2:	7f 4f       	sbci	r23, 0xFF	; 255
    34e4:	c8 01       	movw	r24, r16
    34e6:	0e 94 c3 19 	call	0x3386	; 0x3386 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    34ea:	40 e0       	ldi	r20, 0x00	; 0
    34ec:	f8 01       	movw	r30, r16
    34ee:	80 85       	ldd	r24, Z+8	; 0x08
    34f0:	48 17       	cp	r20, r24
    34f2:	f8 f4       	brcc	.+62     	; 0x3532 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    34f4:	84 2f       	mov	r24, r20
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	f7 01       	movw	r30, r14
    34fe:	e8 0f       	add	r30, r24
    3500:	f9 1f       	adc	r31, r25
    3502:	21 e0       	ldi	r18, 0x01	; 1
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	2c 0f       	add	r18, r28
    3508:	3d 1f       	adc	r19, r29
    350a:	82 0f       	add	r24, r18
    350c:	93 1f       	adc	r25, r19
    350e:	d8 01       	movw	r26, r16
    3510:	1e 96       	adiw	r26, 0x0e	; 14
    3512:	2d 91       	ld	r18, X+
    3514:	3c 91       	ld	r19, X
    3516:	1f 97       	sbiw	r26, 0x0f	; 15
    3518:	dc 01       	movw	r26, r24
    351a:	8d 91       	ld	r24, X+
    351c:	9c 91       	ld	r25, X
    351e:	28 1b       	sub	r18, r24
    3520:	39 0b       	sbc	r19, r25
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	82 0f       	add	r24, r18
    3528:	93 1f       	adc	r25, r19
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	80 83       	st	Z, r24
    352e:	4f 5f       	subi	r20, 0xFF	; 255
    3530:	dd cf       	rjmp	.-70     	; 0x34ec <_ZN16PololuQTRSensors4readEPjh+0x6c>
    3532:	a0 96       	adiw	r28, 0x20	; 32
    3534:	e7 e0       	ldi	r30, 0x07	; 7
    3536:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__epilogue_restores__+0x16>

0000353a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    353a:	2f 92       	push	r2
    353c:	3f 92       	push	r3
    353e:	5f 92       	push	r5
    3540:	6f 92       	push	r6
    3542:	7f 92       	push	r7
    3544:	8f 92       	push	r8
    3546:	9f 92       	push	r9
    3548:	af 92       	push	r10
    354a:	bf 92       	push	r11
    354c:	cf 92       	push	r12
    354e:	df 92       	push	r13
    3550:	ef 92       	push	r14
    3552:	ff 92       	push	r15
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	c0 56       	subi	r28, 0x60	; 96
    3562:	d1 09       	sbc	r29, r1
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	de bf       	out	0x3e, r29	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	cd bf       	out	0x3d, r28	; 61
    356e:	8c 01       	movw	r16, r24
    3570:	4b 01       	movw	r8, r22
    3572:	5a 01       	movw	r10, r20
    3574:	52 2e       	mov	r5, r18
    3576:	da 01       	movw	r26, r20
    3578:	8d 91       	ld	r24, X+
    357a:	9c 91       	ld	r25, X
    357c:	89 2b       	or	r24, r25
    357e:	31 f0       	breq	.+12     	; 0x358c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    3580:	f4 01       	movw	r30, r8
    3582:	80 81       	ld	r24, Z
    3584:	91 81       	ldd	r25, Z+1	; 0x01
    3586:	89 2b       	or	r24, r25
    3588:	f1 f4       	brne	.+60     	; 0x35c6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    358a:	24 c0       	rjmp	.+72     	; 0x35d4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    358c:	d8 01       	movw	r26, r16
    358e:	18 96       	adiw	r26, 0x08	; 8
    3590:	8c 91       	ld	r24, X
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <malloc>
    359c:	f5 01       	movw	r30, r10
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	80 83       	st	Z, r24
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    35a6:	b1 c0       	rjmp	.+354    	; 0x370a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    35a8:	fc 01       	movw	r30, r24
    35aa:	20 e0       	ldi	r18, 0x00	; 0
    35ac:	30 e0       	ldi	r19, 0x00	; 0
    35ae:	d8 01       	movw	r26, r16
    35b0:	18 96       	adiw	r26, 0x08	; 8
    35b2:	8c 91       	ld	r24, X
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	28 17       	cp	r18, r24
    35b8:	39 07       	cpc	r19, r25
    35ba:	14 f7       	brge	.-60     	; 0x3580 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    35bc:	11 92       	st	Z+, r1
    35be:	11 92       	st	Z+, r1
    35c0:	2f 5f       	subi	r18, 0xFF	; 255
    35c2:	3f 4f       	sbci	r19, 0xFF	; 255
    35c4:	f4 cf       	rjmp	.-24     	; 0x35ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    35c6:	e1 2c       	mov	r14, r1
    35c8:	f1 2c       	mov	r15, r1
    35ca:	6e 01       	movw	r12, r28
    35cc:	b1 e2       	ldi	r27, 0x21	; 33
    35ce:	cb 0e       	add	r12, r27
    35d0:	d1 1c       	adc	r13, r1
    35d2:	21 c0       	rjmp	.+66     	; 0x3616 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    35d4:	f8 01       	movw	r30, r16
    35d6:	80 85       	ldd	r24, Z+8	; 0x08
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	88 0f       	add	r24, r24
    35dc:	99 1f       	adc	r25, r25
    35de:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <malloc>
    35e2:	d4 01       	movw	r26, r8
    35e4:	8d 93       	st	X+, r24
    35e6:	9c 93       	st	X, r25
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	09 f4       	brne	.+2      	; 0x35ee <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    35ec:	8e c0       	rjmp	.+284    	; 0x370a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    35ee:	fc 01       	movw	r30, r24
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	d8 01       	movw	r26, r16
    35f6:	18 96       	adiw	r26, 0x08	; 8
    35f8:	8c 91       	ld	r24, X
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	28 17       	cp	r18, r24
    35fe:	39 07       	cpc	r19, r25
    3600:	14 f7       	brge	.-60     	; 0x35c6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    3602:	d8 01       	movw	r26, r16
    3604:	1e 96       	adiw	r26, 0x0e	; 14
    3606:	8d 91       	ld	r24, X+
    3608:	9c 91       	ld	r25, X
    360a:	1f 97       	sbiw	r26, 0x0f	; 15
    360c:	81 93       	st	Z+, r24
    360e:	91 93       	st	Z+, r25
    3610:	2f 5f       	subi	r18, 0xFF	; 255
    3612:	3f 4f       	sbci	r19, 0xFF	; 255
    3614:	ef cf       	rjmp	.-34     	; 0x35f4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    3616:	45 2d       	mov	r20, r5
    3618:	be 01       	movw	r22, r28
    361a:	6f 5b       	subi	r22, 0xBF	; 191
    361c:	7f 4f       	sbci	r23, 0xFF	; 255
    361e:	c8 01       	movw	r24, r16
    3620:	0e 94 40 1a 	call	0x3480	; 0x3480 <_ZN16PololuQTRSensors4readEPjh>
    3624:	f8 01       	movw	r30, r16
    3626:	60 84       	ldd	r6, Z+8	; 0x08
    3628:	71 2c       	mov	r7, r1
    362a:	fe 01       	movw	r30, r28
    362c:	ef 5b       	subi	r30, 0xBF	; 191
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	c6 01       	movw	r24, r12
    3632:	9e 01       	movw	r18, r28
    3634:	2f 5f       	subi	r18, 0xFF	; 255
    3636:	3f 4f       	sbci	r19, 0xFF	; 255
    3638:	19 01       	movw	r2, r18
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	26 15       	cp	r18, r6
    3640:	37 05       	cpc	r19, r7
    3642:	4c f5       	brge	.+82     	; 0x3696 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    3644:	e1 14       	cp	r14, r1
    3646:	f1 04       	cpc	r15, r1
    3648:	89 f0       	breq	.+34     	; 0x366c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    364a:	dc 01       	movw	r26, r24
    364c:	6d 91       	ld	r22, X+
    364e:	7c 91       	ld	r23, X
    3650:	40 81       	ld	r20, Z
    3652:	51 81       	ldd	r21, Z+1	; 0x01
    3654:	64 17       	cp	r22, r20
    3656:	75 07       	cpc	r23, r21
    3658:	48 f0       	brcs	.+18     	; 0x366c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    365a:	d1 01       	movw	r26, r2
    365c:	6d 91       	ld	r22, X+
    365e:	7c 91       	ld	r23, X
    3660:	40 81       	ld	r20, Z
    3662:	51 81       	ldd	r21, Z+1	; 0x01
    3664:	46 17       	cp	r20, r22
    3666:	57 07       	cpc	r21, r23
    3668:	48 f0       	brcs	.+18     	; 0x367c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    366a:	0d c0       	rjmp	.+26     	; 0x3686 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    366c:	40 81       	ld	r20, Z
    366e:	51 81       	ldd	r21, Z+1	; 0x01
    3670:	dc 01       	movw	r26, r24
    3672:	4d 93       	st	X+, r20
    3674:	5c 93       	st	X, r21
    3676:	e1 14       	cp	r14, r1
    3678:	f1 04       	cpc	r15, r1
    367a:	79 f7       	brne	.-34     	; 0x365a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    367c:	40 81       	ld	r20, Z
    367e:	51 81       	ldd	r21, Z+1	; 0x01
    3680:	d1 01       	movw	r26, r2
    3682:	4d 93       	st	X+, r20
    3684:	5c 93       	st	X, r21
    3686:	2f 5f       	subi	r18, 0xFF	; 255
    3688:	3f 4f       	sbci	r19, 0xFF	; 255
    368a:	b2 e0       	ldi	r27, 0x02	; 2
    368c:	2b 0e       	add	r2, r27
    368e:	31 1c       	adc	r3, r1
    3690:	32 96       	adiw	r30, 0x02	; 2
    3692:	02 96       	adiw	r24, 0x02	; 2
    3694:	d4 cf       	rjmp	.-88     	; 0x363e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    3696:	ef ef       	ldi	r30, 0xFF	; 255
    3698:	ee 1a       	sub	r14, r30
    369a:	fe 0a       	sbc	r15, r30
    369c:	fa e0       	ldi	r31, 0x0A	; 10
    369e:	ef 16       	cp	r14, r31
    36a0:	f1 04       	cpc	r15, r1
    36a2:	09 f0       	breq	.+2      	; 0x36a6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    36a4:	b8 cf       	rjmp	.-144    	; 0x3616 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    36a6:	9e 01       	movw	r18, r28
    36a8:	2f 5f       	subi	r18, 0xFF	; 255
    36aa:	3f 4f       	sbci	r19, 0xFF	; 255
    36ac:	79 01       	movw	r14, r18
    36ae:	36 01       	movw	r6, r12
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	f8 01       	movw	r30, r16
    36b6:	20 85       	ldd	r18, Z+8	; 0x08
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	82 17       	cp	r24, r18
    36bc:	93 07       	cpc	r25, r19
    36be:	2c f5       	brge	.+74     	; 0x370a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    36c0:	d7 01       	movw	r26, r14
    36c2:	2d 91       	ld	r18, X+
    36c4:	3d 91       	ld	r19, X+
    36c6:	7d 01       	movw	r14, r26
    36c8:	b3 01       	movw	r22, r6
    36ca:	6c 19       	sub	r22, r12
    36cc:	7d 09       	sbc	r23, r13
    36ce:	d5 01       	movw	r26, r10
    36d0:	ed 91       	ld	r30, X+
    36d2:	fc 91       	ld	r31, X
    36d4:	e6 0f       	add	r30, r22
    36d6:	f7 1f       	adc	r31, r23
    36d8:	40 81       	ld	r20, Z
    36da:	51 81       	ldd	r21, Z+1	; 0x01
    36dc:	42 17       	cp	r20, r18
    36de:	53 07       	cpc	r21, r19
    36e0:	10 f4       	brcc	.+4      	; 0x36e6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    36e2:	31 83       	std	Z+1, r19	; 0x01
    36e4:	20 83       	st	Z, r18
    36e6:	f3 01       	movw	r30, r6
    36e8:	21 91       	ld	r18, Z+
    36ea:	31 91       	ld	r19, Z+
    36ec:	3f 01       	movw	r6, r30
    36ee:	d4 01       	movw	r26, r8
    36f0:	ed 91       	ld	r30, X+
    36f2:	fc 91       	ld	r31, X
    36f4:	e6 0f       	add	r30, r22
    36f6:	f7 1f       	adc	r31, r23
    36f8:	40 81       	ld	r20, Z
    36fa:	51 81       	ldd	r21, Z+1	; 0x01
    36fc:	24 17       	cp	r18, r20
    36fe:	35 07       	cpc	r19, r21
    3700:	10 f4       	brcc	.+4      	; 0x3706 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    3702:	31 83       	std	Z+1, r19	; 0x01
    3704:	20 83       	st	Z, r18
    3706:	01 96       	adiw	r24, 0x01	; 1
    3708:	d5 cf       	rjmp	.-86     	; 0x36b4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    370a:	c0 5a       	subi	r28, 0xA0	; 160
    370c:	df 4f       	sbci	r29, 0xFF	; 255
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	df 90       	pop	r13
    3726:	cf 90       	pop	r12
    3728:	bf 90       	pop	r11
    372a:	af 90       	pop	r10
    372c:	9f 90       	pop	r9
    372e:	8f 90       	pop	r8
    3730:	7f 90       	pop	r7
    3732:	6f 90       	pop	r6
    3734:	5f 90       	pop	r5
    3736:	3f 90       	pop	r3
    3738:	2f 90       	pop	r2
    373a:	08 95       	ret

0000373c <_ZN16PololuQTRSensors9calibrateEh>:
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	ec 01       	movw	r28, r24
    3744:	16 2f       	mov	r17, r22
    3746:	8f ef       	ldi	r24, 0xFF	; 255
    3748:	86 0f       	add	r24, r22
    374a:	82 30       	cpi	r24, 0x02	; 2
    374c:	18 f0       	brcs	.+6      	; 0x3754 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    374e:	66 23       	and	r22, r22
    3750:	59 f0       	breq	.+22     	; 0x3768 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    3752:	14 c0       	rjmp	.+40     	; 0x377c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    3754:	21 e0       	ldi	r18, 0x01	; 1
    3756:	ae 01       	movw	r20, r28
    3758:	4e 5f       	subi	r20, 0xFE	; 254
    375a:	5f 4f       	sbci	r21, 0xFF	; 255
    375c:	be 01       	movw	r22, r28
    375e:	ce 01       	movw	r24, r28
    3760:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    3764:	12 30       	cpi	r17, 0x02	; 2
    3766:	51 f4       	brne	.+20     	; 0x377c <_ZN16PololuQTRSensors9calibrateEh+0x40>
    3768:	ae 01       	movw	r20, r28
    376a:	4a 5f       	subi	r20, 0xFA	; 250
    376c:	5f 4f       	sbci	r21, 0xFF	; 255
    376e:	be 01       	movw	r22, r28
    3770:	6c 5f       	subi	r22, 0xFC	; 252
    3772:	7f 4f       	sbci	r23, 0xFF	; 255
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	ce 01       	movw	r24, r28
    3778:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	1f 91       	pop	r17
    3782:	08 95       	ret

00003784 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    3784:	a0 e0       	ldi	r26, 0x00	; 0
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e8 ec       	ldi	r30, 0xC8	; 200
    378a:	fb e1       	ldi	r31, 0x1B	; 27
    378c:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__prologue_saves__+0x12>
    3790:	ec 01       	movw	r28, r24
    3792:	8b 01       	movw	r16, r22
    3794:	b4 2e       	mov	r11, r20
    3796:	84 2f       	mov	r24, r20
    3798:	8d 7f       	andi	r24, 0xFD	; 253
    379a:	51 f4       	brne	.+20     	; 0x37b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    379c:	8c 81       	ldd	r24, Y+4	; 0x04
    379e:	9d 81       	ldd	r25, Y+5	; 0x05
    37a0:	89 2b       	or	r24, r25
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    37a4:	97 c0       	rjmp	.+302    	; 0x38d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    37a6:	8e 81       	ldd	r24, Y+6	; 0x06
    37a8:	9f 81       	ldd	r25, Y+7	; 0x07
    37aa:	89 2b       	or	r24, r25
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    37ae:	92 c0       	rjmp	.+292    	; 0x38d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    37b0:	8f ef       	ldi	r24, 0xFF	; 255
    37b2:	8b 0d       	add	r24, r11
    37b4:	82 30       	cpi	r24, 0x02	; 2
    37b6:	50 f4       	brcc	.+20     	; 0x37cc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    37b8:	88 81       	ld	r24, Y
    37ba:	99 81       	ldd	r25, Y+1	; 0x01
    37bc:	89 2b       	or	r24, r25
    37be:	09 f4       	brne	.+2      	; 0x37c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    37c0:	89 c0       	rjmp	.+274    	; 0x38d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    37c2:	8a 81       	ldd	r24, Y+2	; 0x02
    37c4:	9b 81       	ldd	r25, Y+3	; 0x03
    37c6:	89 2b       	or	r24, r25
    37c8:	09 f4       	brne	.+2      	; 0x37cc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    37ca:	84 c0       	rjmp	.+264    	; 0x38d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    37cc:	4b 2d       	mov	r20, r11
    37ce:	b8 01       	movw	r22, r16
    37d0:	ce 01       	movw	r24, r28
    37d2:	0e 94 40 1a 	call	0x3480	; 0x3480 <_ZN16PololuQTRSensors4readEPjh>
    37d6:	78 01       	movw	r14, r16
    37d8:	00 e0       	ldi	r16, 0x00	; 0
    37da:	10 e0       	ldi	r17, 0x00	; 0
    37dc:	c1 2c       	mov	r12, r1
    37de:	d1 2c       	mov	r13, r1
    37e0:	88 85       	ldd	r24, Y+8	; 0x08
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	c8 16       	cp	r12, r24
    37e6:	d9 06       	cpc	r13, r25
    37e8:	0c f0       	brlt	.+2      	; 0x37ec <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    37ea:	74 c0       	rjmp	.+232    	; 0x38d4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	b8 12       	cpse	r11, r24
    37f0:	0a c0       	rjmp	.+20     	; 0x3806 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    37f2:	ea 81       	ldd	r30, Y+2	; 0x02
    37f4:	fb 81       	ldd	r31, Y+3	; 0x03
    37f6:	e0 0f       	add	r30, r16
    37f8:	f1 1f       	adc	r31, r17
    37fa:	01 90       	ld	r0, Z+
    37fc:	f0 81       	ld	r31, Z
    37fe:	e0 2d       	mov	r30, r0
    3800:	a8 81       	ld	r26, Y
    3802:	b9 81       	ldd	r27, Y+1	; 0x01
    3804:	0d c0       	rjmp	.+26     	; 0x3820 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3806:	8c 81       	ldd	r24, Y+4	; 0x04
    3808:	9d 81       	ldd	r25, Y+5	; 0x05
    380a:	2e 81       	ldd	r18, Y+6	; 0x06
    380c:	3f 81       	ldd	r19, Y+7	; 0x07
    380e:	b1 10       	cpse	r11, r1
    3810:	0c c0       	rjmp	.+24     	; 0x382a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    3812:	f9 01       	movw	r30, r18
    3814:	e0 0f       	add	r30, r16
    3816:	f1 1f       	adc	r31, r17
    3818:	01 90       	ld	r0, Z+
    381a:	f0 81       	ld	r31, Z
    381c:	e0 2d       	mov	r30, r0
    381e:	dc 01       	movw	r26, r24
    3820:	a0 0f       	add	r26, r16
    3822:	b1 1f       	adc	r27, r17
    3824:	8d 91       	ld	r24, X+
    3826:	9c 91       	ld	r25, X
    3828:	28 c0       	rjmp	.+80     	; 0x387a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    382a:	fc 01       	movw	r30, r24
    382c:	e0 0f       	add	r30, r16
    382e:	f1 1f       	adc	r31, r17
    3830:	40 81       	ld	r20, Z
    3832:	51 81       	ldd	r21, Z+1	; 0x01
    3834:	e8 81       	ld	r30, Y
    3836:	f9 81       	ldd	r31, Y+1	; 0x01
    3838:	e0 0f       	add	r30, r16
    383a:	f1 1f       	adc	r31, r17
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	ee 85       	ldd	r30, Y+14	; 0x0e
    3842:	ff 85       	ldd	r31, Y+15	; 0x0f
    3844:	48 17       	cp	r20, r24
    3846:	59 07       	cpc	r21, r25
    3848:	10 f4       	brcc	.+4      	; 0x384e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    384a:	cf 01       	movw	r24, r30
    384c:	04 c0       	rjmp	.+8      	; 0x3856 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    384e:	8e 0f       	add	r24, r30
    3850:	9f 1f       	adc	r25, r31
    3852:	84 1b       	sub	r24, r20
    3854:	95 0b       	sbc	r25, r21
    3856:	d9 01       	movw	r26, r18
    3858:	a0 0f       	add	r26, r16
    385a:	b1 1f       	adc	r27, r17
    385c:	2d 91       	ld	r18, X+
    385e:	3c 91       	ld	r19, X
    3860:	aa 81       	ldd	r26, Y+2	; 0x02
    3862:	bb 81       	ldd	r27, Y+3	; 0x03
    3864:	a0 0f       	add	r26, r16
    3866:	b1 1f       	adc	r27, r17
    3868:	4d 91       	ld	r20, X+
    386a:	5c 91       	ld	r21, X
    386c:	24 17       	cp	r18, r20
    386e:	35 07       	cpc	r19, r21
    3870:	20 f0       	brcs	.+8      	; 0x387a <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    3872:	e4 0f       	add	r30, r20
    3874:	f5 1f       	adc	r31, r21
    3876:	e2 1b       	sub	r30, r18
    3878:	f3 0b       	sbc	r31, r19
    387a:	e8 1b       	sub	r30, r24
    387c:	f9 0b       	sbc	r31, r25
    387e:	a9 f0       	breq	.+42     	; 0x38aa <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    3880:	d7 01       	movw	r26, r14
    3882:	2d 91       	ld	r18, X+
    3884:	3c 91       	ld	r19, X
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	50 e0       	ldi	r21, 0x00	; 0
    388a:	28 1b       	sub	r18, r24
    388c:	39 0b       	sbc	r19, r25
    388e:	41 09       	sbc	r20, r1
    3890:	51 09       	sbc	r21, r1
    3892:	a8 ee       	ldi	r26, 0xE8	; 232
    3894:	b3 e0       	ldi	r27, 0x03	; 3
    3896:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__muluhisi3>
    389a:	9f 01       	movw	r18, r30
    389c:	40 e0       	ldi	r20, 0x00	; 0
    389e:	50 e0       	ldi	r21, 0x00	; 0
    38a0:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__divmodsi4>
    38a4:	37 fd       	sbrc	r19, 7
    38a6:	0a c0       	rjmp	.+20     	; 0x38bc <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	29 3e       	cpi	r18, 0xE9	; 233
    38b0:	b3 e0       	ldi	r27, 0x03	; 3
    38b2:	3b 07       	cpc	r19, r27
    38b4:	2c f0       	brlt	.+10     	; 0x38c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    38b6:	28 ee       	ldi	r18, 0xE8	; 232
    38b8:	33 e0       	ldi	r19, 0x03	; 3
    38ba:	02 c0       	rjmp	.+4      	; 0x38c0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	f7 01       	movw	r30, r14
    38c2:	21 93       	st	Z+, r18
    38c4:	31 93       	st	Z+, r19
    38c6:	7f 01       	movw	r14, r30
    38c8:	ff ef       	ldi	r31, 0xFF	; 255
    38ca:	cf 1a       	sub	r12, r31
    38cc:	df 0a       	sbc	r13, r31
    38ce:	0e 5f       	subi	r16, 0xFE	; 254
    38d0:	1f 4f       	sbci	r17, 0xFF	; 255
    38d2:	86 cf       	rjmp	.-244    	; 0x37e0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    38d8:	e9 e0       	ldi	r30, 0x09	; 9
    38da:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__epilogue_restores__+0x12>

000038de <_ZN16PololuQTRSensors8readLineEPjhh>:
    38de:	a0 e0       	ldi	r26, 0x00	; 0
    38e0:	b0 e0       	ldi	r27, 0x00	; 0
    38e2:	e5 e7       	ldi	r30, 0x75	; 117
    38e4:	fc e1       	ldi	r31, 0x1C	; 28
    38e6:	0c 94 9f 1d 	jmp	0x3b3e	; 0x3b3e <__prologue_saves__>
    38ea:	ec 01       	movw	r28, r24
    38ec:	8b 01       	movw	r16, r22
    38ee:	82 2e       	mov	r8, r18
    38f0:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    38f4:	28 84       	ldd	r2, Y+8	; 0x08
    38f6:	e8 01       	movw	r28, r16
    38f8:	41 2c       	mov	r4, r1
    38fa:	51 2c       	mov	r5, r1
    38fc:	32 01       	movw	r6, r4
    38fe:	00 e0       	ldi	r16, 0x00	; 0
    3900:	10 e0       	ldi	r17, 0x00	; 0
    3902:	c1 2c       	mov	r12, r1
    3904:	d1 2c       	mov	r13, r1
    3906:	76 01       	movw	r14, r12
    3908:	31 2c       	mov	r3, r1
    390a:	91 2c       	mov	r9, r1
    390c:	58 ee       	ldi	r21, 0xE8	; 232
    390e:	a5 2e       	mov	r10, r21
    3910:	53 e0       	ldi	r21, 0x03	; 3
    3912:	b5 2e       	mov	r11, r21
    3914:	92 14       	cp	r9, r2
    3916:	21 f1       	breq	.+72     	; 0x3960 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3918:	e9 91       	ld	r30, Y+
    391a:	f9 91       	ld	r31, Y+
    391c:	88 20       	and	r8, r8
    391e:	21 f0       	breq	.+8      	; 0x3928 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    3920:	c5 01       	movw	r24, r10
    3922:	8e 1b       	sub	r24, r30
    3924:	9f 0b       	sbc	r25, r31
    3926:	fc 01       	movw	r30, r24
    3928:	e9 3c       	cpi	r30, 0xC9	; 201
    392a:	f1 05       	cpc	r31, r1
    392c:	24 f4       	brge	.+8      	; 0x3936 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    392e:	e3 33       	cpi	r30, 0x33	; 51
    3930:	f1 05       	cpc	r31, r1
    3932:	74 f0       	brlt	.+28     	; 0x3950 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    3934:	02 c0       	rjmp	.+4      	; 0x393a <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    3936:	33 24       	eor	r3, r3
    3938:	33 94       	inc	r3
    393a:	df 01       	movw	r26, r30
    393c:	a3 01       	movw	r20, r6
    393e:	92 01       	movw	r18, r4
    3940:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <__mulshisi3>
    3944:	c6 0e       	add	r12, r22
    3946:	d7 1e       	adc	r13, r23
    3948:	e8 1e       	adc	r14, r24
    394a:	f9 1e       	adc	r15, r25
    394c:	0e 0f       	add	r16, r30
    394e:	1f 1f       	adc	r17, r31
    3950:	93 94       	inc	r9
    3952:	98 ee       	ldi	r25, 0xE8	; 232
    3954:	49 0e       	add	r4, r25
    3956:	93 e0       	ldi	r25, 0x03	; 3
    3958:	59 1e       	adc	r5, r25
    395a:	61 1c       	adc	r6, r1
    395c:	71 1c       	adc	r7, r1
    395e:	da cf       	rjmp	.-76     	; 0x3914 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    3960:	31 10       	cpse	r3, r1
    3962:	1e c0       	rjmp	.+60     	; 0x39a0 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    3964:	49 2d       	mov	r20, r9
    3966:	50 e0       	ldi	r21, 0x00	; 0
    3968:	41 50       	subi	r20, 0x01	; 1
    396a:	51 09       	sbc	r21, r1
    396c:	24 ef       	ldi	r18, 0xF4	; 244
    396e:	31 e0       	ldi	r19, 0x01	; 1
    3970:	42 9f       	mul	r20, r18
    3972:	c0 01       	movw	r24, r0
    3974:	43 9f       	mul	r20, r19
    3976:	90 0d       	add	r25, r0
    3978:	52 9f       	mul	r21, r18
    397a:	90 0d       	add	r25, r0
    397c:	11 24       	eor	r1, r1
    397e:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3982:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3986:	28 17       	cp	r18, r24
    3988:	39 07       	cpc	r19, r25
    398a:	b4 f0       	brlt	.+44     	; 0x39b8 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    398c:	88 ee       	ldi	r24, 0xE8	; 232
    398e:	93 e0       	ldi	r25, 0x03	; 3
    3990:	48 9f       	mul	r20, r24
    3992:	90 01       	movw	r18, r0
    3994:	49 9f       	mul	r20, r25
    3996:	30 0d       	add	r19, r0
    3998:	58 9f       	mul	r21, r24
    399a:	30 0d       	add	r19, r0
    399c:	11 24       	eor	r1, r1
    399e:	0e c0       	rjmp	.+28     	; 0x39bc <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    39a0:	98 01       	movw	r18, r16
    39a2:	40 e0       	ldi	r20, 0x00	; 0
    39a4:	50 e0       	ldi	r21, 0x00	; 0
    39a6:	c7 01       	movw	r24, r14
    39a8:	b6 01       	movw	r22, r12
    39aa:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    39ae:	30 93 f6 01 	sts	0x01F6, r19	; 0x8001f6 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    39b2:	20 93 f5 01 	sts	0x01F5, r18	; 0x8001f5 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	c9 01       	movw	r24, r18
    39be:	cd b7       	in	r28, 0x3d	; 61
    39c0:	de b7       	in	r29, 0x3e	; 62
    39c2:	e2 e1       	ldi	r30, 0x12	; 18
    39c4:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__epilogue_restores__>

000039c8 <_ZN16PololuQTRSensorsD1Ev>:
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	ec 01       	movw	r28, r24
    39ce:	8a 81       	ldd	r24, Y+2	; 0x02
    39d0:	9b 81       	ldd	r25, Y+3	; 0x03
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	11 f0       	breq	.+4      	; 0x39da <_ZN16PololuQTRSensorsD1Ev+0x12>
    39d6:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <free>
    39da:	8e 81       	ldd	r24, Y+6	; 0x06
    39dc:	9f 81       	ldd	r25, Y+7	; 0x07
    39de:	00 97       	sbiw	r24, 0x00	; 0
    39e0:	11 f0       	breq	.+4      	; 0x39e6 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    39e2:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <free>
    39e6:	88 81       	ld	r24, Y
    39e8:	99 81       	ldd	r25, Y+1	; 0x01
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	11 f0       	breq	.+4      	; 0x39f2 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    39ee:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <free>
    39f2:	8c 81       	ldd	r24, Y+4	; 0x04
    39f4:	9d 81       	ldd	r25, Y+5	; 0x05
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	11 f0       	breq	.+4      	; 0x39fe <_ZN16PololuQTRSensorsD1Ev+0x36>
    39fa:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <free>
    39fe:	df 91       	pop	r29
    3a00:	cf 91       	pop	r28
    3a02:	08 95       	ret

00003a04 <__udivmodqi4>:
    3a04:	99 1b       	sub	r25, r25
    3a06:	79 e0       	ldi	r23, 0x09	; 9
    3a08:	04 c0       	rjmp	.+8      	; 0x3a12 <__udivmodqi4_ep>

00003a0a <__udivmodqi4_loop>:
    3a0a:	99 1f       	adc	r25, r25
    3a0c:	96 17       	cp	r25, r22
    3a0e:	08 f0       	brcs	.+2      	; 0x3a12 <__udivmodqi4_ep>
    3a10:	96 1b       	sub	r25, r22

00003a12 <__udivmodqi4_ep>:
    3a12:	88 1f       	adc	r24, r24
    3a14:	7a 95       	dec	r23
    3a16:	c9 f7       	brne	.-14     	; 0x3a0a <__udivmodqi4_loop>
    3a18:	80 95       	com	r24
    3a1a:	08 95       	ret

00003a1c <__udivmodhi4>:
    3a1c:	aa 1b       	sub	r26, r26
    3a1e:	bb 1b       	sub	r27, r27
    3a20:	51 e1       	ldi	r21, 0x11	; 17
    3a22:	07 c0       	rjmp	.+14     	; 0x3a32 <__udivmodhi4_ep>

00003a24 <__udivmodhi4_loop>:
    3a24:	aa 1f       	adc	r26, r26
    3a26:	bb 1f       	adc	r27, r27
    3a28:	a6 17       	cp	r26, r22
    3a2a:	b7 07       	cpc	r27, r23
    3a2c:	10 f0       	brcs	.+4      	; 0x3a32 <__udivmodhi4_ep>
    3a2e:	a6 1b       	sub	r26, r22
    3a30:	b7 0b       	sbc	r27, r23

00003a32 <__udivmodhi4_ep>:
    3a32:	88 1f       	adc	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	5a 95       	dec	r21
    3a38:	a9 f7       	brne	.-22     	; 0x3a24 <__udivmodhi4_loop>
    3a3a:	80 95       	com	r24
    3a3c:	90 95       	com	r25
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	08 95       	ret

00003a44 <__divmodhi4>:
    3a44:	97 fb       	bst	r25, 7
    3a46:	07 2e       	mov	r0, r23
    3a48:	16 f4       	brtc	.+4      	; 0x3a4e <__divmodhi4+0xa>
    3a4a:	00 94       	com	r0
    3a4c:	07 d0       	rcall	.+14     	; 0x3a5c <__divmodhi4_neg1>
    3a4e:	77 fd       	sbrc	r23, 7
    3a50:	09 d0       	rcall	.+18     	; 0x3a64 <__divmodhi4_neg2>
    3a52:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__udivmodhi4>
    3a56:	07 fc       	sbrc	r0, 7
    3a58:	05 d0       	rcall	.+10     	; 0x3a64 <__divmodhi4_neg2>
    3a5a:	3e f4       	brtc	.+14     	; 0x3a6a <__divmodhi4_exit>

00003a5c <__divmodhi4_neg1>:
    3a5c:	90 95       	com	r25
    3a5e:	81 95       	neg	r24
    3a60:	9f 4f       	sbci	r25, 0xFF	; 255
    3a62:	08 95       	ret

00003a64 <__divmodhi4_neg2>:
    3a64:	70 95       	com	r23
    3a66:	61 95       	neg	r22
    3a68:	7f 4f       	sbci	r23, 0xFF	; 255

00003a6a <__divmodhi4_exit>:
    3a6a:	08 95       	ret

00003a6c <__udivmodsi4>:
    3a6c:	a1 e2       	ldi	r26, 0x21	; 33
    3a6e:	1a 2e       	mov	r1, r26
    3a70:	aa 1b       	sub	r26, r26
    3a72:	bb 1b       	sub	r27, r27
    3a74:	fd 01       	movw	r30, r26
    3a76:	0d c0       	rjmp	.+26     	; 0x3a92 <__udivmodsi4_ep>

00003a78 <__udivmodsi4_loop>:
    3a78:	aa 1f       	adc	r26, r26
    3a7a:	bb 1f       	adc	r27, r27
    3a7c:	ee 1f       	adc	r30, r30
    3a7e:	ff 1f       	adc	r31, r31
    3a80:	a2 17       	cp	r26, r18
    3a82:	b3 07       	cpc	r27, r19
    3a84:	e4 07       	cpc	r30, r20
    3a86:	f5 07       	cpc	r31, r21
    3a88:	20 f0       	brcs	.+8      	; 0x3a92 <__udivmodsi4_ep>
    3a8a:	a2 1b       	sub	r26, r18
    3a8c:	b3 0b       	sbc	r27, r19
    3a8e:	e4 0b       	sbc	r30, r20
    3a90:	f5 0b       	sbc	r31, r21

00003a92 <__udivmodsi4_ep>:
    3a92:	66 1f       	adc	r22, r22
    3a94:	77 1f       	adc	r23, r23
    3a96:	88 1f       	adc	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	1a 94       	dec	r1
    3a9c:	69 f7       	brne	.-38     	; 0x3a78 <__udivmodsi4_loop>
    3a9e:	60 95       	com	r22
    3aa0:	70 95       	com	r23
    3aa2:	80 95       	com	r24
    3aa4:	90 95       	com	r25
    3aa6:	9b 01       	movw	r18, r22
    3aa8:	ac 01       	movw	r20, r24
    3aaa:	bd 01       	movw	r22, r26
    3aac:	cf 01       	movw	r24, r30
    3aae:	08 95       	ret

00003ab0 <__divmodsi4>:
    3ab0:	05 2e       	mov	r0, r21
    3ab2:	97 fb       	bst	r25, 7
    3ab4:	1e f4       	brtc	.+6      	; 0x3abc <__divmodsi4+0xc>
    3ab6:	00 94       	com	r0
    3ab8:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__negsi2>
    3abc:	57 fd       	sbrc	r21, 7
    3abe:	07 d0       	rcall	.+14     	; 0x3ace <__divmodsi4_neg2>
    3ac0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__udivmodsi4>
    3ac4:	07 fc       	sbrc	r0, 7
    3ac6:	03 d0       	rcall	.+6      	; 0x3ace <__divmodsi4_neg2>
    3ac8:	4e f4       	brtc	.+18     	; 0x3adc <__divmodsi4_exit>
    3aca:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <__negsi2>

00003ace <__divmodsi4_neg2>:
    3ace:	50 95       	com	r21
    3ad0:	40 95       	com	r20
    3ad2:	30 95       	com	r19
    3ad4:	21 95       	neg	r18
    3ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad8:	4f 4f       	sbci	r20, 0xFF	; 255
    3ada:	5f 4f       	sbci	r21, 0xFF	; 255

00003adc <__divmodsi4_exit>:
    3adc:	08 95       	ret

00003ade <__negsi2>:
    3ade:	90 95       	com	r25
    3ae0:	80 95       	com	r24
    3ae2:	70 95       	com	r23
    3ae4:	61 95       	neg	r22
    3ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    3aea:	9f 4f       	sbci	r25, 0xFF	; 255
    3aec:	08 95       	ret

00003aee <__tablejump2__>:
    3aee:	ee 0f       	add	r30, r30
    3af0:	ff 1f       	adc	r31, r31
    3af2:	05 90       	lpm	r0, Z+
    3af4:	f4 91       	lpm	r31, Z
    3af6:	e0 2d       	mov	r30, r0
    3af8:	09 94       	ijmp

00003afa <__umulhisi3>:
    3afa:	a2 9f       	mul	r26, r18
    3afc:	b0 01       	movw	r22, r0
    3afe:	b3 9f       	mul	r27, r19
    3b00:	c0 01       	movw	r24, r0
    3b02:	a3 9f       	mul	r26, r19
    3b04:	70 0d       	add	r23, r0
    3b06:	81 1d       	adc	r24, r1
    3b08:	11 24       	eor	r1, r1
    3b0a:	91 1d       	adc	r25, r1
    3b0c:	b2 9f       	mul	r27, r18
    3b0e:	70 0d       	add	r23, r0
    3b10:	81 1d       	adc	r24, r1
    3b12:	11 24       	eor	r1, r1
    3b14:	91 1d       	adc	r25, r1
    3b16:	08 95       	ret

00003b18 <__muluhisi3>:
    3b18:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <__umulhisi3>
    3b1c:	a5 9f       	mul	r26, r21
    3b1e:	90 0d       	add	r25, r0
    3b20:	b4 9f       	mul	r27, r20
    3b22:	90 0d       	add	r25, r0
    3b24:	a4 9f       	mul	r26, r20
    3b26:	80 0d       	add	r24, r0
    3b28:	91 1d       	adc	r25, r1
    3b2a:	11 24       	eor	r1, r1
    3b2c:	08 95       	ret

00003b2e <__mulshisi3>:
    3b2e:	b7 ff       	sbrs	r27, 7
    3b30:	0c 94 8c 1d 	jmp	0x3b18	; 0x3b18 <__muluhisi3>

00003b34 <__mulohisi3>:
    3b34:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__muluhisi3>
    3b38:	82 1b       	sub	r24, r18
    3b3a:	93 0b       	sbc	r25, r19
    3b3c:	08 95       	ret

00003b3e <__prologue_saves__>:
    3b3e:	2f 92       	push	r2
    3b40:	3f 92       	push	r3
    3b42:	4f 92       	push	r4
    3b44:	5f 92       	push	r5
    3b46:	6f 92       	push	r6
    3b48:	7f 92       	push	r7
    3b4a:	8f 92       	push	r8
    3b4c:	9f 92       	push	r9
    3b4e:	af 92       	push	r10
    3b50:	bf 92       	push	r11
    3b52:	cf 92       	push	r12
    3b54:	df 92       	push	r13
    3b56:	ef 92       	push	r14
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	ca 1b       	sub	r28, r26
    3b68:	db 0b       	sbc	r29, r27
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	cd bf       	out	0x3d, r28	; 61
    3b74:	09 94       	ijmp

00003b76 <__epilogue_restores__>:
    3b76:	2a 88       	ldd	r2, Y+18	; 0x12
    3b78:	39 88       	ldd	r3, Y+17	; 0x11
    3b7a:	48 88       	ldd	r4, Y+16	; 0x10
    3b7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b80:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b82:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b84:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b86:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b88:	b9 84       	ldd	r11, Y+9	; 0x09
    3b8a:	c8 84       	ldd	r12, Y+8	; 0x08
    3b8c:	df 80       	ldd	r13, Y+7	; 0x07
    3b8e:	ee 80       	ldd	r14, Y+6	; 0x06
    3b90:	fd 80       	ldd	r15, Y+5	; 0x05
    3b92:	0c 81       	ldd	r16, Y+4	; 0x04
    3b94:	1b 81       	ldd	r17, Y+3	; 0x03
    3b96:	aa 81       	ldd	r26, Y+2	; 0x02
    3b98:	b9 81       	ldd	r27, Y+1	; 0x01
    3b9a:	ce 0f       	add	r28, r30
    3b9c:	d1 1d       	adc	r29, r1
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	ed 01       	movw	r28, r26
    3baa:	08 95       	ret

00003bac <malloc>:
    3bac:	0f 93       	push	r16
    3bae:	1f 93       	push	r17
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	82 30       	cpi	r24, 0x02	; 2
    3bb6:	91 05       	cpc	r25, r1
    3bb8:	10 f4       	brcc	.+4      	; 0x3bbe <malloc+0x12>
    3bba:	82 e0       	ldi	r24, 0x02	; 2
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <__flp>
    3bc2:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <__flp+0x1>
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	a0 e0       	ldi	r26, 0x00	; 0
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	30 97       	sbiw	r30, 0x00	; 0
    3bd0:	19 f1       	breq	.+70     	; 0x3c18 <malloc+0x6c>
    3bd2:	40 81       	ld	r20, Z
    3bd4:	51 81       	ldd	r21, Z+1	; 0x01
    3bd6:	02 81       	ldd	r16, Z+2	; 0x02
    3bd8:	13 81       	ldd	r17, Z+3	; 0x03
    3bda:	48 17       	cp	r20, r24
    3bdc:	59 07       	cpc	r21, r25
    3bde:	c8 f0       	brcs	.+50     	; 0x3c12 <malloc+0x66>
    3be0:	84 17       	cp	r24, r20
    3be2:	95 07       	cpc	r25, r21
    3be4:	69 f4       	brne	.+26     	; 0x3c00 <malloc+0x54>
    3be6:	10 97       	sbiw	r26, 0x00	; 0
    3be8:	31 f0       	breq	.+12     	; 0x3bf6 <malloc+0x4a>
    3bea:	12 96       	adiw	r26, 0x02	; 2
    3bec:	0c 93       	st	X, r16
    3bee:	12 97       	sbiw	r26, 0x02	; 2
    3bf0:	13 96       	adiw	r26, 0x03	; 3
    3bf2:	1c 93       	st	X, r17
    3bf4:	27 c0       	rjmp	.+78     	; 0x3c44 <malloc+0x98>
    3bf6:	00 93 1d 02 	sts	0x021D, r16	; 0x80021d <__flp>
    3bfa:	10 93 1e 02 	sts	0x021E, r17	; 0x80021e <__flp+0x1>
    3bfe:	22 c0       	rjmp	.+68     	; 0x3c44 <malloc+0x98>
    3c00:	21 15       	cp	r18, r1
    3c02:	31 05       	cpc	r19, r1
    3c04:	19 f0       	breq	.+6      	; 0x3c0c <malloc+0x60>
    3c06:	42 17       	cp	r20, r18
    3c08:	53 07       	cpc	r21, r19
    3c0a:	18 f4       	brcc	.+6      	; 0x3c12 <malloc+0x66>
    3c0c:	9a 01       	movw	r18, r20
    3c0e:	bd 01       	movw	r22, r26
    3c10:	ef 01       	movw	r28, r30
    3c12:	df 01       	movw	r26, r30
    3c14:	f8 01       	movw	r30, r16
    3c16:	db cf       	rjmp	.-74     	; 0x3bce <malloc+0x22>
    3c18:	21 15       	cp	r18, r1
    3c1a:	31 05       	cpc	r19, r1
    3c1c:	f9 f0       	breq	.+62     	; 0x3c5c <malloc+0xb0>
    3c1e:	28 1b       	sub	r18, r24
    3c20:	39 0b       	sbc	r19, r25
    3c22:	24 30       	cpi	r18, 0x04	; 4
    3c24:	31 05       	cpc	r19, r1
    3c26:	80 f4       	brcc	.+32     	; 0x3c48 <malloc+0x9c>
    3c28:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2c:	61 15       	cp	r22, r1
    3c2e:	71 05       	cpc	r23, r1
    3c30:	21 f0       	breq	.+8      	; 0x3c3a <malloc+0x8e>
    3c32:	fb 01       	movw	r30, r22
    3c34:	93 83       	std	Z+3, r25	; 0x03
    3c36:	82 83       	std	Z+2, r24	; 0x02
    3c38:	04 c0       	rjmp	.+8      	; 0x3c42 <malloc+0x96>
    3c3a:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <__flp+0x1>
    3c3e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <__flp>
    3c42:	fe 01       	movw	r30, r28
    3c44:	32 96       	adiw	r30, 0x02	; 2
    3c46:	44 c0       	rjmp	.+136    	; 0x3cd0 <malloc+0x124>
    3c48:	fe 01       	movw	r30, r28
    3c4a:	e2 0f       	add	r30, r18
    3c4c:	f3 1f       	adc	r31, r19
    3c4e:	81 93       	st	Z+, r24
    3c50:	91 93       	st	Z+, r25
    3c52:	22 50       	subi	r18, 0x02	; 2
    3c54:	31 09       	sbc	r19, r1
    3c56:	39 83       	std	Y+1, r19	; 0x01
    3c58:	28 83       	st	Y, r18
    3c5a:	3a c0       	rjmp	.+116    	; 0x3cd0 <malloc+0x124>
    3c5c:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3c60:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3c64:	23 2b       	or	r18, r19
    3c66:	41 f4       	brne	.+16     	; 0x3c78 <malloc+0xcc>
    3c68:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3c6c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3c70:	30 93 1c 02 	sts	0x021C, r19	; 0x80021c <__brkval+0x1>
    3c74:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <__brkval>
    3c78:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3c7c:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3c80:	21 15       	cp	r18, r1
    3c82:	31 05       	cpc	r19, r1
    3c84:	41 f4       	brne	.+16     	; 0x3c96 <malloc+0xea>
    3c86:	2d b7       	in	r18, 0x3d	; 61
    3c88:	3e b7       	in	r19, 0x3e	; 62
    3c8a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3c8e:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3c92:	24 1b       	sub	r18, r20
    3c94:	35 0b       	sbc	r19, r21
    3c96:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <__brkval>
    3c9a:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <__brkval+0x1>
    3c9e:	e2 17       	cp	r30, r18
    3ca0:	f3 07       	cpc	r31, r19
    3ca2:	a0 f4       	brcc	.+40     	; 0x3ccc <malloc+0x120>
    3ca4:	2e 1b       	sub	r18, r30
    3ca6:	3f 0b       	sbc	r19, r31
    3ca8:	28 17       	cp	r18, r24
    3caa:	39 07       	cpc	r19, r25
    3cac:	78 f0       	brcs	.+30     	; 0x3ccc <malloc+0x120>
    3cae:	ac 01       	movw	r20, r24
    3cb0:	4e 5f       	subi	r20, 0xFE	; 254
    3cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb4:	24 17       	cp	r18, r20
    3cb6:	35 07       	cpc	r19, r21
    3cb8:	48 f0       	brcs	.+18     	; 0x3ccc <malloc+0x120>
    3cba:	4e 0f       	add	r20, r30
    3cbc:	5f 1f       	adc	r21, r31
    3cbe:	50 93 1c 02 	sts	0x021C, r21	; 0x80021c <__brkval+0x1>
    3cc2:	40 93 1b 02 	sts	0x021B, r20	; 0x80021b <__brkval>
    3cc6:	81 93       	st	Z+, r24
    3cc8:	91 93       	st	Z+, r25
    3cca:	02 c0       	rjmp	.+4      	; 0x3cd0 <malloc+0x124>
    3ccc:	e0 e0       	ldi	r30, 0x00	; 0
    3cce:	f0 e0       	ldi	r31, 0x00	; 0
    3cd0:	cf 01       	movw	r24, r30
    3cd2:	df 91       	pop	r29
    3cd4:	cf 91       	pop	r28
    3cd6:	1f 91       	pop	r17
    3cd8:	0f 91       	pop	r16
    3cda:	08 95       	ret

00003cdc <free>:
    3cdc:	cf 93       	push	r28
    3cde:	df 93       	push	r29
    3ce0:	00 97       	sbiw	r24, 0x00	; 0
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <free+0xa>
    3ce4:	81 c0       	rjmp	.+258    	; 0x3de8 <free+0x10c>
    3ce6:	fc 01       	movw	r30, r24
    3ce8:	32 97       	sbiw	r30, 0x02	; 2
    3cea:	13 82       	std	Z+3, r1	; 0x03
    3cec:	12 82       	std	Z+2, r1	; 0x02
    3cee:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <__flp>
    3cf2:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <__flp+0x1>
    3cf6:	10 97       	sbiw	r26, 0x00	; 0
    3cf8:	81 f4       	brne	.+32     	; 0x3d1a <free+0x3e>
    3cfa:	20 81       	ld	r18, Z
    3cfc:	31 81       	ldd	r19, Z+1	; 0x01
    3cfe:	82 0f       	add	r24, r18
    3d00:	93 1f       	adc	r25, r19
    3d02:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3d06:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3d0a:	28 17       	cp	r18, r24
    3d0c:	39 07       	cpc	r19, r25
    3d0e:	51 f5       	brne	.+84     	; 0x3d64 <free+0x88>
    3d10:	f0 93 1c 02 	sts	0x021C, r31	; 0x80021c <__brkval+0x1>
    3d14:	e0 93 1b 02 	sts	0x021B, r30	; 0x80021b <__brkval>
    3d18:	67 c0       	rjmp	.+206    	; 0x3de8 <free+0x10c>
    3d1a:	ed 01       	movw	r28, r26
    3d1c:	20 e0       	ldi	r18, 0x00	; 0
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	ce 17       	cp	r28, r30
    3d22:	df 07       	cpc	r29, r31
    3d24:	40 f4       	brcc	.+16     	; 0x3d36 <free+0x5a>
    3d26:	4a 81       	ldd	r20, Y+2	; 0x02
    3d28:	5b 81       	ldd	r21, Y+3	; 0x03
    3d2a:	9e 01       	movw	r18, r28
    3d2c:	41 15       	cp	r20, r1
    3d2e:	51 05       	cpc	r21, r1
    3d30:	f1 f0       	breq	.+60     	; 0x3d6e <free+0x92>
    3d32:	ea 01       	movw	r28, r20
    3d34:	f5 cf       	rjmp	.-22     	; 0x3d20 <free+0x44>
    3d36:	d3 83       	std	Z+3, r29	; 0x03
    3d38:	c2 83       	std	Z+2, r28	; 0x02
    3d3a:	40 81       	ld	r20, Z
    3d3c:	51 81       	ldd	r21, Z+1	; 0x01
    3d3e:	84 0f       	add	r24, r20
    3d40:	95 1f       	adc	r25, r21
    3d42:	c8 17       	cp	r28, r24
    3d44:	d9 07       	cpc	r29, r25
    3d46:	59 f4       	brne	.+22     	; 0x3d5e <free+0x82>
    3d48:	88 81       	ld	r24, Y
    3d4a:	99 81       	ldd	r25, Y+1	; 0x01
    3d4c:	84 0f       	add	r24, r20
    3d4e:	95 1f       	adc	r25, r21
    3d50:	02 96       	adiw	r24, 0x02	; 2
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	80 83       	st	Z, r24
    3d56:	8a 81       	ldd	r24, Y+2	; 0x02
    3d58:	9b 81       	ldd	r25, Y+3	; 0x03
    3d5a:	93 83       	std	Z+3, r25	; 0x03
    3d5c:	82 83       	std	Z+2, r24	; 0x02
    3d5e:	21 15       	cp	r18, r1
    3d60:	31 05       	cpc	r19, r1
    3d62:	29 f4       	brne	.+10     	; 0x3d6e <free+0x92>
    3d64:	f0 93 1e 02 	sts	0x021E, r31	; 0x80021e <__flp+0x1>
    3d68:	e0 93 1d 02 	sts	0x021D, r30	; 0x80021d <__flp>
    3d6c:	3d c0       	rjmp	.+122    	; 0x3de8 <free+0x10c>
    3d6e:	e9 01       	movw	r28, r18
    3d70:	fb 83       	std	Y+3, r31	; 0x03
    3d72:	ea 83       	std	Y+2, r30	; 0x02
    3d74:	49 91       	ld	r20, Y+
    3d76:	59 91       	ld	r21, Y+
    3d78:	c4 0f       	add	r28, r20
    3d7a:	d5 1f       	adc	r29, r21
    3d7c:	ec 17       	cp	r30, r28
    3d7e:	fd 07       	cpc	r31, r29
    3d80:	61 f4       	brne	.+24     	; 0x3d9a <free+0xbe>
    3d82:	80 81       	ld	r24, Z
    3d84:	91 81       	ldd	r25, Z+1	; 0x01
    3d86:	84 0f       	add	r24, r20
    3d88:	95 1f       	adc	r25, r21
    3d8a:	02 96       	adiw	r24, 0x02	; 2
    3d8c:	e9 01       	movw	r28, r18
    3d8e:	99 83       	std	Y+1, r25	; 0x01
    3d90:	88 83       	st	Y, r24
    3d92:	82 81       	ldd	r24, Z+2	; 0x02
    3d94:	93 81       	ldd	r25, Z+3	; 0x03
    3d96:	9b 83       	std	Y+3, r25	; 0x03
    3d98:	8a 83       	std	Y+2, r24	; 0x02
    3d9a:	e0 e0       	ldi	r30, 0x00	; 0
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	12 96       	adiw	r26, 0x02	; 2
    3da0:	8d 91       	ld	r24, X+
    3da2:	9c 91       	ld	r25, X
    3da4:	13 97       	sbiw	r26, 0x03	; 3
    3da6:	00 97       	sbiw	r24, 0x00	; 0
    3da8:	19 f0       	breq	.+6      	; 0x3db0 <free+0xd4>
    3daa:	fd 01       	movw	r30, r26
    3dac:	dc 01       	movw	r26, r24
    3dae:	f7 cf       	rjmp	.-18     	; 0x3d9e <free+0xc2>
    3db0:	8d 91       	ld	r24, X+
    3db2:	9c 91       	ld	r25, X
    3db4:	11 97       	sbiw	r26, 0x01	; 1
    3db6:	9d 01       	movw	r18, r26
    3db8:	2e 5f       	subi	r18, 0xFE	; 254
    3dba:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbc:	82 0f       	add	r24, r18
    3dbe:	93 1f       	adc	r25, r19
    3dc0:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3dc4:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3dc8:	28 17       	cp	r18, r24
    3dca:	39 07       	cpc	r19, r25
    3dcc:	69 f4       	brne	.+26     	; 0x3de8 <free+0x10c>
    3dce:	30 97       	sbiw	r30, 0x00	; 0
    3dd0:	29 f4       	brne	.+10     	; 0x3ddc <free+0x100>
    3dd2:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__flp+0x1>
    3dd6:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp>
    3dda:	02 c0       	rjmp	.+4      	; 0x3de0 <free+0x104>
    3ddc:	13 82       	std	Z+3, r1	; 0x03
    3dde:	12 82       	std	Z+2, r1	; 0x02
    3de0:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <__brkval+0x1>
    3de4:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <__brkval>
    3de8:	df 91       	pop	r29
    3dea:	cf 91       	pop	r28
    3dec:	08 95       	ret

00003dee <strncat>:
    3dee:	fb 01       	movw	r30, r22
    3df0:	dc 01       	movw	r26, r24
    3df2:	0d 90       	ld	r0, X+
    3df4:	00 20       	and	r0, r0
    3df6:	e9 f7       	brne	.-6      	; 0x3df2 <strncat+0x4>
    3df8:	11 97       	sbiw	r26, 0x01	; 1
    3dfa:	41 50       	subi	r20, 0x01	; 1
    3dfc:	50 40       	sbci	r21, 0x00	; 0
    3dfe:	28 f0       	brcs	.+10     	; 0x3e0a <strncat+0x1c>
    3e00:	01 90       	ld	r0, Z+
    3e02:	00 20       	and	r0, r0
    3e04:	0d 92       	st	X+, r0
    3e06:	c9 f7       	brne	.-14     	; 0x3dfa <strncat+0xc>
    3e08:	08 95       	ret
    3e0a:	1c 92       	st	X, r1
    3e0c:	08 95       	ret

00003e0e <__do_global_dtors>:
    3e0e:	10 e0       	ldi	r17, 0x00	; 0
    3e10:	c7 e4       	ldi	r28, 0x47	; 71
    3e12:	d0 e0       	ldi	r29, 0x00	; 0
    3e14:	04 c0       	rjmp	.+8      	; 0x3e1e <__do_global_dtors+0x10>
    3e16:	fe 01       	movw	r30, r28
    3e18:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__tablejump2__>
    3e1c:	21 96       	adiw	r28, 0x01	; 1
    3e1e:	c8 34       	cpi	r28, 0x48	; 72
    3e20:	d1 07       	cpc	r29, r17
    3e22:	c9 f7       	brne	.-14     	; 0x3e16 <__do_global_dtors+0x8>
    3e24:	f8 94       	cli

00003e26 <__stop_program>:
    3e26:	ff cf       	rjmp	.-2      	; 0x3e26 <__stop_program>
