
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001bce  00001c62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800122  00800122  00001c84  2**0
                  ALLOC
  3 .stab         00004ab8  00000000  00000000  00001c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000084be  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  0000ebfa  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000ec3c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000c8  00000000  00000000  0000ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001554  00000000  00000000  0000ed44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a24  00000000  00000000  00010298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000e35  00000000  00000000  00010cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000214  00000000  00000000  00011af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000059b  00000000  00000000  00011d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000006d0  00000000  00000000  000122a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b0  00000000  00000000  00012973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__dtors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__vector_9>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	f9 06       	cpc	r15, r25

0000006a <__dtors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ee ec       	ldi	r30, 0xCE	; 206
      7e:	fb e1       	ldi	r31, 0x1B	; 27
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a2 32       	cpi	r26, 0x22	; 34
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a2 e2       	ldi	r26, 0x22	; 34
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a1 39       	cpi	r26, 0x91	; 145
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
      9c:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
      a0:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__do_global_dtors>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <main>:
#include <avr/pgmspace.h>


int main()
{
	clear();
      a8:	0e 94 39 05 	call	0xa72	; 0xa72 <clear>
	pololu_3pi_init(2000);
      ac:	80 ed       	ldi	r24, 0xD0	; 208
      ae:	97 e0       	ldi	r25, 0x07	; 7
      b0:	0e 94 f5 06 	call	0xdea	; 0xdea <pololu_3pi_init>
	initialize();
      b4:	0e 94 61 00 	call	0xc2	; 0xc2 <initialize>
	
	
	/*char parecour[20];
	parcour(parecour);
	print(parecour);*/
	warehouse();
      b8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <warehouse>
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	08 95       	ret

000000c2 <initialize>:
#include <avr/pgmspace.h>

	Junctions junction;	

void initialize()
{
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
	unsigned int counter; // used as a simple timer
	
	pololu_3pi_init(2000);
      c6:	80 ed       	ldi	r24, 0xD0	; 208
      c8:	97 e0       	ldi	r25, 0x07	; 7
      ca:	0e 94 f5 06 	call	0xdea	; 0xdea <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B)){}	
      ce:	80 e1       	ldi	r24, 0x10	; 16
      d0:	0e 94 32 06 	call	0xc64	; 0xc64 <button_is_pressed>
      d4:	88 23       	and	r24, r24
      d6:	d9 f3       	breq	.-10     	; 0xce <initialize+0xc>
	wait_for_button_release(BUTTON_B);
      d8:	80 e1       	ldi	r24, 0x10	; 16
      da:	0e 94 1e 06 	call	0xc3c	; 0xc3c <wait_for_button_release>
	delay_ms(1000);
      de:	88 ee       	ldi	r24, 0xE8	; 232
      e0:	93 e0       	ldi	r25, 0x03	; 3
      e2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>

	for(counter=0;counter<80;counter++)
      e6:	c0 e0       	ldi	r28, 0x00	; 0
      e8:	d0 e0       	ldi	r29, 0x00	; 0
      ea:	19 c0       	rjmp	.+50     	; 0x11e <initialize+0x5c>
	{
		if(counter < 20 || counter >= 60)
      ec:	ce 01       	movw	r24, r28
      ee:	44 97       	sbiw	r24, 0x14	; 20
      f0:	88 97       	sbiw	r24, 0x28	; 40
      f2:	38 f0       	brcs	.+14     	; 0x102 <initialize+0x40>
		set_motors(40,-40);
      f4:	68 ed       	ldi	r22, 0xD8	; 216
      f6:	7f ef       	ldi	r23, 0xFF	; 255
      f8:	88 e2       	ldi	r24, 0x28	; 40
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
     100:	06 c0       	rjmp	.+12     	; 0x10e <initialize+0x4c>
		else
		set_motors(-40,40);
     102:	68 e2       	ldi	r22, 0x28	; 40
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	88 ed       	ldi	r24, 0xD8	; 216
     108:	9f ef       	ldi	r25, 0xFF	; 255
     10a:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 b9 06 	call	0xd72	; 0xd72 <calibrate_line_sensors>
		
		delay_ms(20);
     114:	84 e1       	ldi	r24, 0x14	; 20
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
	
	while(!button_is_pressed(BUTTON_B)){}	
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     11c:	21 96       	adiw	r28, 0x01	; 1
     11e:	c0 35       	cpi	r28, 0x50	; 80
     120:	d1 05       	cpc	r29, r1
     122:	20 f3       	brcs	.-56     	; 0xec <initialize+0x2a>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		
		delay_ms(20);
	}
	set_motors(0,0);
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
	
	while(!button_is_pressed(BUTTON_B)){}
     130:	80 e1       	ldi	r24, 0x10	; 16
     132:	0e 94 32 06 	call	0xc64	; 0xc64 <button_is_pressed>
     136:	88 23       	and	r24, r24
     138:	d9 f3       	breq	.-10     	; 0x130 <initialize+0x6e>
	wait_for_button_release(BUTTON_B);
     13a:	80 e1       	ldi	r24, 0x10	; 16
     13c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <wait_for_button_release>
	
	clear();
     140:	0e 94 39 05 	call	0xa72	; 0xa72 <clear>
}
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <inch>:

void inch(){
	set_motors(50,50);
     14a:	62 e3       	ldi	r22, 0x32	; 50
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	82 e3       	ldi	r24, 0x32	; 50
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     156:	88 ec       	ldi	r24, 0xC8	; 200
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
	delay(200);
	set_motors(0,0);
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
     16a:	08 95       	ret

0000016c <motorControl>:
		}	
	}
}


void motorControl(char x){													// function that controlls the motor movement and the turns
     16c:	cf 93       	push	r28
     16e:	c8 2f       	mov	r28, r24
	read_line(sensors,IR_EMITTERS_ON);
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	83 e8       	ldi	r24, 0x83	; 131
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
	
	if(x == 'N')															//Emergency Brake
     17a:	ce 34       	cpi	r28, 0x4E	; 78
     17c:	39 f4       	brne	.+14     	; 0x18c <motorControl+0x20>
		set_motors(0,0);	
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
     18a:	ba c0       	rjmp	.+372    	; 0x300 <motorControl+0x194>
	
	
	else if(x == 'L'){														//Turn Left
     18c:	cc 34       	cpi	r28, 0x4C	; 76
     18e:	09 f5       	brne	.+66     	; 0x1d2 <motorControl+0x66>
		set_motors(-50,50);
     190:	62 e3       	ldi	r22, 0x32	; 50
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	8e ec       	ldi	r24, 0xCE	; 206
     196:	9f ef       	ldi	r25, 0xFF	; 255
     198:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		
		while (sensors[2] >=500)
     19c:	05 c0       	rjmp	.+10     	; 0x1a8 <motorControl+0x3c>
			read_line(sensors,IR_EMITTERS_ON);
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	83 e8       	ldi	r24, 0x83	; 131
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
	
	
	else if(x == 'L'){														//Turn Left
		set_motors(-50,50);
		
		while (sensors[2] >=500)
     1a8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors+0x4>
     1ac:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <sensors+0x5>
     1b0:	84 3f       	cpi	r24, 0xF4	; 244
     1b2:	91 40       	sbci	r25, 0x01	; 1
     1b4:	a0 f7       	brcc	.-24     	; 0x19e <motorControl+0x32>
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <motorControl+0x56>
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
			read_line(sensors,IR_EMITTERS_ON);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	83 e8       	ldi	r24, 0x83	; 131
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
	else if(x == 'L'){														//Turn Left
		set_motors(-50,50);
		
		while (sensors[2] >=500)
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
     1c2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors+0x4>
     1c6:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <sensors+0x5>
     1ca:	85 3f       	cpi	r24, 0xF5	; 245
     1cc:	91 40       	sbci	r25, 0x01	; 1
     1ce:	a0 f3       	brcs	.-24     	; 0x1b8 <motorControl+0x4c>
     1d0:	97 c0       	rjmp	.+302    	; 0x300 <motorControl+0x194>
			read_line(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'R'){														//Turn Right
     1d2:	c2 35       	cpi	r28, 0x52	; 82
     1d4:	09 f5       	brne	.+66     	; 0x218 <motorControl+0xac>
		set_motors(50,-50);
     1d6:	6e ec       	ldi	r22, 0xCE	; 206
     1d8:	7f ef       	ldi	r23, 0xFF	; 255
     1da:	82 e3       	ldi	r24, 0x32	; 50
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		
		while (sensors[2] >=500)
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <motorControl+0x82>
			read_line(sensors,IR_EMITTERS_ON);
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	83 e8       	ldi	r24, 0x83	; 131
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
	
	
	else if(x == 'R'){														//Turn Right
		set_motors(50,-50);
		
		while (sensors[2] >=500)
     1ee:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors+0x4>
     1f2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <sensors+0x5>
     1f6:	84 3f       	cpi	r24, 0xF4	; 244
     1f8:	91 40       	sbci	r25, 0x01	; 1
     1fa:	a0 f7       	brcc	.-24     	; 0x1e4 <motorControl+0x78>
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <motorControl+0x9c>
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
			read_line(sensors,IR_EMITTERS_ON);
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	83 e8       	ldi	r24, 0x83	; 131
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
	else if(x == 'R'){														//Turn Right
		set_motors(50,-50);
		
		while (sensors[2] >=500)
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
     208:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors+0x4>
     20c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <sensors+0x5>
     210:	85 3f       	cpi	r24, 0xF5	; 245
     212:	91 40       	sbci	r25, 0x01	; 1
     214:	a0 f3       	brcs	.-24     	; 0x1fe <motorControl+0x92>
     216:	74 c0       	rjmp	.+232    	; 0x300 <motorControl+0x194>
			read_line(sensors,IR_EMITTERS_ON);
	}
		
			
	else if(x == 'S'){														//drive straight and adjusts the robot so it follows the line
     218:	c3 35       	cpi	r28, 0x53	; 83
     21a:	89 f5       	brne	.+98     	; 0x27e <motorControl+0x112>
		set_motors(50,50);
     21c:	62 e3       	ldi	r22, 0x32	; 50
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	82 e3       	ldi	r24, 0x32	; 50
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		
		if (sensors[3] >= 500 && sensors[4] <= 300 )
     228:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sensors+0x6>
     22c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <sensors+0x7>
     230:	84 3f       	cpi	r24, 0xF4	; 244
     232:	91 40       	sbci	r25, 0x01	; 1
     234:	68 f0       	brcs	.+26     	; 0x250 <motorControl+0xe4>
     236:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <sensors+0x8>
     23a:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <sensors+0x9>
     23e:	8d 32       	cpi	r24, 0x2D	; 45
     240:	91 40       	sbci	r25, 0x01	; 1
     242:	30 f4       	brcc	.+12     	; 0x250 <motorControl+0xe4>
			set_motors(50,30);
     244:	6e e1       	ldi	r22, 0x1E	; 30
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	82 e3       	ldi	r24, 0x32	; 50
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		if (sensors[1] >= 500 && sensors[0] <= 300 )
     250:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <sensors+0x2>
     254:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <sensors+0x3>
     258:	84 3f       	cpi	r24, 0xF4	; 244
     25a:	91 40       	sbci	r25, 0x01	; 1
     25c:	08 f4       	brcc	.+2      	; 0x260 <motorControl+0xf4>
     25e:	50 c0       	rjmp	.+160    	; 0x300 <motorControl+0x194>
     260:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <sensors>
     264:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <sensors+0x1>
     268:	8d 32       	cpi	r24, 0x2D	; 45
     26a:	91 40       	sbci	r25, 0x01	; 1
     26c:	08 f0       	brcs	.+2      	; 0x270 <motorControl+0x104>
     26e:	48 c0       	rjmp	.+144    	; 0x300 <motorControl+0x194>
			set_motors(30,50);
     270:	62 e3       	ldi	r22, 0x32	; 50
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	8e e1       	ldi	r24, 0x1E	; 30
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
     27c:	41 c0       	rjmp	.+130    	; 0x300 <motorControl+0x194>
	}
	
	
	else if(x == 'B'){														//Reverse while following the line
     27e:	c2 34       	cpi	r28, 0x42	; 66
     280:	09 f5       	brne	.+66     	; 0x2c4 <motorControl+0x158>
		set_motors(-50,-50);
     282:	6e ec       	ldi	r22, 0xCE	; 206
     284:	7f ef       	ldi	r23, 0xFF	; 255
     286:	8e ec       	ldi	r24, 0xCE	; 206
     288:	9f ef       	ldi	r25, 0xFF	; 255
     28a:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		
		if (sensors[3] >=400)
     28e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sensors+0x6>
     292:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <sensors+0x7>
     296:	80 39       	cpi	r24, 0x90	; 144
     298:	91 40       	sbci	r25, 0x01	; 1
     29a:	30 f0       	brcs	.+12     	; 0x2a8 <motorControl+0x13c>
			set_motors(-50,-55);
     29c:	69 ec       	ldi	r22, 0xC9	; 201
     29e:	7f ef       	ldi	r23, 0xFF	; 255
     2a0:	8e ec       	ldi	r24, 0xCE	; 206
     2a2:	9f ef       	ldi	r25, 0xFF	; 255
     2a4:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		if (sensors[1] >=400)
     2a8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <sensors+0x2>
     2ac:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <sensors+0x3>
     2b0:	80 39       	cpi	r24, 0x90	; 144
     2b2:	91 40       	sbci	r25, 0x01	; 1
     2b4:	28 f1       	brcs	.+74     	; 0x300 <motorControl+0x194>
			set_motors(-55,-50);
     2b6:	6e ec       	ldi	r22, 0xCE	; 206
     2b8:	7f ef       	ldi	r23, 0xFF	; 255
     2ba:	89 ec       	ldi	r24, 0xC9	; 201
     2bc:	9f ef       	ldi	r25, 0xFF	; 255
     2be:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
     2c2:	1e c0       	rjmp	.+60     	; 0x300 <motorControl+0x194>
	}
	
	
	else if(x == 'T'){														// Turn around
     2c4:	c4 35       	cpi	r28, 0x54	; 84
     2c6:	a1 f4       	brne	.+40     	; 0x2f0 <motorControl+0x184>
		set_motors(-75,75);
     2c8:	6b e4       	ldi	r22, 0x4B	; 75
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	85 eb       	ldi	r24, 0xB5	; 181
     2ce:	9f ef       	ldi	r25, 0xFF	; 255
     2d0:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		
		while (sensors[2] >=500)
     2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <motorControl+0x174>
			read_line(sensors,IR_EMITTERS_ON);
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	83 e8       	ldi	r24, 0x83	; 131
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
	
	
	else if(x == 'T'){														// Turn around
		set_motors(-75,75);
		
		while (sensors[2] >=500)
     2e0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors+0x4>
     2e4:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <sensors+0x5>
     2e8:	84 3f       	cpi	r24, 0xF4	; 244
     2ea:	91 40       	sbci	r25, 0x01	; 1
     2ec:	a0 f7       	brcc	.-24     	; 0x2d6 <motorControl+0x16a>
     2ee:	08 c0       	rjmp	.+16     	; 0x300 <motorControl+0x194>
			read_line(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P'){														//Robot stops on a slow paste
     2f0:	c0 35       	cpi	r28, 0x50	; 80
     2f2:	31 f4       	brne	.+12     	; 0x300 <motorControl+0x194>
		for( int i=50;i==10;i-=3)
		{
			set_motors(i,i);
			delay(1);
		}
		set_motors(0,0);
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 ef 05 	call	0xbde	; 0xbde <set_motors>
		}
		
		
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <lineType>:
	set_motors(0,0);
}

char lineType(){																																	// function that returns the type of junction it detects
	while(1){																																		// >= 500 = black line		<=500 = white
		read_line(sensors,IR_EMITTERS_ON);
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	83 e8       	ldi	r24, 0x83	; 131
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
		
		if (sensors[1] >=500 && sensors[3] >= 500){																									//Checks if its a X junction or a T junction
     30e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <sensors+0x2>
     312:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <sensors+0x3>
     316:	84 3f       	cpi	r24, 0xF4	; 244
     318:	21 e0       	ldi	r18, 0x01	; 1
     31a:	92 07       	cpc	r25, r18
     31c:	c0 f0       	brcs	.+48     	; 0x34e <lineType+0x4a>
     31e:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <sensors+0x6>
     322:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <sensors+0x7>
     326:	24 3f       	cpi	r18, 0xF4	; 244
     328:	31 40       	sbci	r19, 0x01	; 1
     32a:	88 f0       	brcs	.+34     	; 0x34e <lineType+0x4a>
			inch();
     32c:	0e 94 a5 00 	call	0x14a	; 0x14a <inch>
			read_line(sensors,IR_EMITTERS_ON);
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	83 e8       	ldi	r24, 0x83	; 131
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
			
			if (sensors[2] >=500)
     33a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors+0x4>
     33e:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <sensors+0x5>
     342:	84 3f       	cpi	r24, 0xF4	; 244
     344:	91 40       	sbci	r25, 0x01	; 1
     346:	08 f4       	brcc	.+2      	; 0x34a <lineType+0x46>
     348:	90 c0       	rjmp	.+288    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				return X_junction;
     34a:	88 e0       	ldi	r24, 0x08	; 8
     34c:	08 95       	ret
			else
				return T_junction;
		}
			
			
		else if (sensors[1] >=500 && sensors[0] >= 500){																							//Checks if its a left corner or a straight with left corner
     34e:	84 3f       	cpi	r24, 0xF4	; 244
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	92 07       	cpc	r25, r18
     354:	00 f1       	brcs	.+64     	; 0x396 <lineType+0x92>
     356:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sensors>
     35a:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sensors+0x1>
     35e:	24 3f       	cpi	r18, 0xF4	; 244
     360:	31 40       	sbci	r19, 0x01	; 1
     362:	c8 f0       	brcs	.+50     	; 0x396 <lineType+0x92>
			inch();
     364:	0e 94 a5 00 	call	0x14a	; 0x14a <inch>
			read_line(sensors,IR_EMITTERS_ON);
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	83 e8       	ldi	r24, 0x83	; 131
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
			
			if (sensors[2] >= 500 || sensors[3] >=500)
     372:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors+0x4>
     376:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <sensors+0x5>
     37a:	84 3f       	cpi	r24, 0xF4	; 244
     37c:	91 40       	sbci	r25, 0x01	; 1
     37e:	08 f0       	brcs	.+2      	; 0x382 <lineType+0x7e>
     380:	76 c0       	rjmp	.+236    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     382:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sensors+0x6>
     386:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <sensors+0x7>
     38a:	84 3f       	cpi	r24, 0xF4	; 244
     38c:	91 40       	sbci	r25, 0x01	; 1
     38e:	08 f4       	brcc	.+2      	; 0x392 <lineType+0x8e>
     390:	70 c0       	rjmp	.+224    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
				return Straight_left_junction;
     392:	86 e0       	ldi	r24, 0x06	; 6
     394:	08 95       	ret
			else
				return Left_corner;
		}
		
		
		else if (sensors[3] >=500 && sensors[4] >= 500){																							//Checks if its a right corner or a straight with right corner
     396:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <sensors+0x6>
     39a:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <sensors+0x7>
     39e:	44 3f       	cpi	r20, 0xF4	; 244
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	56 07       	cpc	r21, r22
     3a4:	00 f1       	brcs	.+64     	; 0x3e6 <lineType+0xe2>
     3a6:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <sensors+0x8>
     3aa:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <sensors+0x9>
     3ae:	24 3f       	cpi	r18, 0xF4	; 244
     3b0:	31 40       	sbci	r19, 0x01	; 1
     3b2:	c8 f0       	brcs	.+50     	; 0x3e6 <lineType+0xe2>
			inch();
     3b4:	0e 94 a5 00 	call	0x14a	; 0x14a <inch>
			read_line(sensors,IR_EMITTERS_ON);
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	83 e8       	ldi	r24, 0x83	; 131
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
			
			if (sensors[2] >= 500 || sensors[1] >=500)
     3c2:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <sensors+0x4>
     3c6:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <sensors+0x5>
     3ca:	84 3f       	cpi	r24, 0xF4	; 244
     3cc:	91 40       	sbci	r25, 0x01	; 1
     3ce:	08 f0       	brcs	.+2      	; 0x3d2 <lineType+0xce>
     3d0:	52 c0       	rjmp	.+164    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     3d2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <sensors+0x2>
     3d6:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <sensors+0x3>
     3da:	84 3f       	cpi	r24, 0xF4	; 244
     3dc:	91 40       	sbci	r25, 0x01	; 1
     3de:	08 f4       	brcc	.+2      	; 0x3e2 <lineType+0xde>
     3e0:	4c c0       	rjmp	.+152    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				return Straight_right_junction;
     3e2:	85 e0       	ldi	r24, 0x05	; 5
     3e4:	08 95       	ret
			else
				return Right_corner;
		}
		
		
		else if(sensors[2] <=200){																													// check if the line ends
     3e6:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <sensors+0x4>
     3ea:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <sensors+0x5>
     3ee:	29 3c       	cpi	r18, 0xC9	; 201
     3f0:	31 05       	cpc	r19, r1
     3f2:	08 f4       	brcc	.+2      	; 0x3f6 <lineType+0xf2>
     3f4:	44 c0       	rjmp	.+136    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
			return Line_end;
		}

		
		else if (sensors[2] >=500){																													//Checks if the line is straight
     3f6:	24 3f       	cpi	r18, 0xF4	; 244
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	36 07       	cpc	r19, r22
     3fc:	08 f4       	brcc	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	82 cf       	rjmp	.-252    	; 0x304 <lineType>
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500))			//Checks the line for a "Barcode"
     400:	24 3f       	cpi	r18, 0xF4	; 244
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	36 07       	cpc	r19, r22
     406:	e8 f1       	brcs	.+122    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     408:	45 3f       	cpi	r20, 0xF5	; 245
     40a:	51 40       	sbci	r21, 0x01	; 1
     40c:	e0 f5       	brcc	.+120    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     40e:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <sensors+0x8>
     412:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <sensors+0x9>
     416:	44 3f       	cpi	r20, 0xF4	; 244
     418:	51 40       	sbci	r21, 0x01	; 1
     41a:	b8 f1       	brcs	.+110    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     41c:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <sensors>
     420:	50 91 84 01 	lds	r21, 0x0184	; 0x800184 <sensors+0x1>
     424:	44 3f       	cpi	r20, 0xF4	; 244
     426:	51 40       	sbci	r21, 0x01	; 1
     428:	90 f1       	brcs	.+100    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     42a:	85 3f       	cpi	r24, 0xF5	; 245
     42c:	91 40       	sbci	r25, 0x01	; 1
     42e:	88 f5       	brcc	.+98     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     430:	24 3f       	cpi	r18, 0xF4	; 244
     432:	31 40       	sbci	r19, 0x01	; 1
     434:	50 f4       	brcc	.+20     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
					motorControl('S');
				}
				return Barcode;
			}
			else
				return Straight;																									// check if its straight without any corners
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	08 95       	ret
		else if (sensors[2] >=500){																													//Checks if the line is straight
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500))			//Checks the line for a "Barcode"
			{
				while(sensors[4] >= 400 || sensors[0] >=400)
				{
					read_line(sensors,IR_EMITTERS_ON);
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	83 e8       	ldi	r24, 0x83	; 131
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 bf 06 	call	0xd7e	; 0xd7e <read_line>
					motorControl('S');
     444:	83 e5       	ldi	r24, 0x53	; 83
     446:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>

		
		else if (sensors[2] >=500){																													//Checks if the line is straight
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500))			//Checks the line for a "Barcode"
			{
				while(sensors[4] >= 400 || sensors[0] >=400)
     44a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <sensors+0x8>
     44e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <sensors+0x9>
     452:	80 39       	cpi	r24, 0x90	; 144
     454:	91 40       	sbci	r25, 0x01	; 1
     456:	88 f7       	brcc	.-30     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     458:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <sensors>
     45c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <sensors+0x1>
     460:	80 39       	cpi	r24, 0x90	; 144
     462:	91 40       	sbci	r25, 0x01	; 1
     464:	50 f7       	brcc	.-44     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
				{
					read_line(sensors,IR_EMITTERS_ON);
					motorControl('S');
				}
				return Barcode;
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	08 95       	ret
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >=500)
				return X_junction;
			else
				return T_junction;
     46a:	87 e0       	ldi	r24, 0x07	; 7
     46c:	08 95       	ret
		else if (sensors[1] >=500 && sensors[0] >= 500){																							//Checks if its a left corner or a straight with left corner
			inch();
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= 500 || sensors[3] >=500)
				return Straight_left_junction;
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	08 95       	ret
			else
				return Left_corner;
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	08 95       	ret
		else if (sensors[3] >=500 && sensors[4] >= 500){																							//Checks if its a right corner or a straight with right corner
			inch();
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= 500 || sensors[1] >=500)
				return Straight_right_junction;
     476:	85 e0       	ldi	r24, 0x05	; 5
     478:	08 95       	ret
			else
				return Right_corner;
     47a:	84 e0       	ldi	r24, 0x04	; 4
     47c:	08 95       	ret
		}
		
		
		else if(sensors[2] <=200){																													// check if the line ends
			return Line_end;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	08 95       	ret
					motorControl('S');
				}
				return Barcode;
			}
			else
				return Straight;																									// check if its straight without any corners
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	08 95       	ret
     492:	80 e0       	ldi	r24, 0x00	; 0
			
		}	
	}
}
     494:	08 95       	ret

00000496 <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(int *a, int *b) {
    int temp = *a;
     496:	fc 01       	movw	r30, r24
     498:	20 81       	ld	r18, Z
     49a:	31 81       	ldd	r19, Z+1	; 0x01
    *a = *b;
     49c:	fb 01       	movw	r30, r22
     49e:	40 81       	ld	r20, Z
     4a0:	51 81       	ldd	r21, Z+1	; 0x01
     4a2:	fc 01       	movw	r30, r24
     4a4:	51 83       	std	Z+1, r21	; 0x01
     4a6:	40 83       	st	Z, r20
    *b = temp;
     4a8:	fb 01       	movw	r30, r22
     4aa:	31 83       	std	Z+1, r19	; 0x01
     4ac:	20 83       	st	Z, r18
     4ae:	08 95       	ret

000004b0 <bubbleSort>:
}

void bubbleSort(int arr[],int orderY[], int n) {
     4b0:	6f 92       	push	r6
     4b2:	7f 92       	push	r7
     4b4:	8f 92       	push	r8
     4b6:	9f 92       	push	r9
     4b8:	af 92       	push	r10
     4ba:	bf 92       	push	r11
     4bc:	cf 92       	push	r12
     4be:	df 92       	push	r13
     4c0:	ef 92       	push	r14
     4c2:	ff 92       	push	r15
     4c4:	0f 93       	push	r16
     4c6:	1f 93       	push	r17
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	6c 01       	movw	r12, r24
     4ce:	3b 01       	movw	r6, r22
     4d0:	4a 01       	movw	r8, r20
    for (int i = 0; i < n - 1; i++) {
     4d2:	a1 2c       	mov	r10, r1
     4d4:	b1 2c       	mov	r11, r1
     4d6:	30 c0       	rjmp	.+96     	; 0x538 <bubbleSort+0x88>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
     4d8:	7e 01       	movw	r14, r28
     4da:	ee 0c       	add	r14, r14
     4dc:	ff 1c       	adc	r15, r15
     4de:	f6 01       	movw	r30, r12
     4e0:	ee 0d       	add	r30, r14
     4e2:	ff 1d       	adc	r31, r15
     4e4:	20 81       	ld	r18, Z
     4e6:	31 81       	ldd	r19, Z+1	; 0x01
     4e8:	8e 01       	movw	r16, r28
     4ea:	0f 5f       	subi	r16, 0xFF	; 255
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
     4ee:	00 0f       	add	r16, r16
     4f0:	11 1f       	adc	r17, r17
     4f2:	d6 01       	movw	r26, r12
     4f4:	a0 0f       	add	r26, r16
     4f6:	b1 1f       	adc	r27, r17
     4f8:	8d 91       	ld	r24, X+
     4fa:	9c 91       	ld	r25, X
     4fc:	11 97       	sbiw	r26, 0x01	; 1
     4fe:	82 17       	cp	r24, r18
     500:	93 07       	cpc	r25, r19
     502:	64 f4       	brge	.+24     	; 0x51c <bubbleSort+0x6c>
                swap(&arr[j], &arr[j + 1]);
     504:	bd 01       	movw	r22, r26
     506:	cf 01       	movw	r24, r30
     508:	0e 94 4b 02 	call	0x496	; 0x496 <swap>
                swap(&orderY[j], &orderY[j + 1]);
     50c:	b3 01       	movw	r22, r6
     50e:	60 0f       	add	r22, r16
     510:	71 1f       	adc	r23, r17
     512:	c3 01       	movw	r24, r6
     514:	8e 0d       	add	r24, r14
     516:	9f 1d       	adc	r25, r15
     518:	0e 94 4b 02 	call	0x496	; 0x496 <swap>
    *b = temp;
}

void bubbleSort(int arr[],int orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
     51c:	21 96       	adiw	r28, 0x01	; 1
     51e:	02 c0       	rjmp	.+4      	; 0x524 <bubbleSort+0x74>
     520:	c0 e0       	ldi	r28, 0x00	; 0
     522:	d0 e0       	ldi	r29, 0x00	; 0
     524:	c4 01       	movw	r24, r8
     526:	8a 19       	sub	r24, r10
     528:	9b 09       	sbc	r25, r11
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	c8 17       	cp	r28, r24
     52e:	d9 07       	cpc	r29, r25
     530:	9c f2       	brlt	.-90     	; 0x4d8 <bubbleSort+0x28>
    *a = *b;
    *b = temp;
}

void bubbleSort(int arr[],int orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	a8 1a       	sub	r10, r24
     536:	b8 0a       	sbc	r11, r24
     538:	c4 01       	movw	r24, r8
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	a8 16       	cp	r10, r24
     53e:	b9 06       	cpc	r11, r25
     540:	7c f3       	brlt	.-34     	; 0x520 <bubbleSort+0x70>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	bf 90       	pop	r11
     554:	af 90       	pop	r10
     556:	9f 90       	pop	r9
     558:	8f 90       	pop	r8
     55a:	7f 90       	pop	r7
     55c:	6f 90       	pop	r6
     55e:	08 95       	ret

00000560 <drive>:



void drive(int junctions)
{
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	0f 93       	push	r16
     566:	1f 93       	push	r17
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	7c 01       	movw	r14, r24
	Junctions situatie;
	motorControl('S');
     56e:	83 e5       	ldi	r24, 0x53	; 83
     570:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
	int driving = 1;
	int count = 0;
     574:	00 e0       	ldi	r16, 0x00	; 0
     576:	10 e0       	ldi	r17, 0x00	; 0

void drive(int junctions)
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
     578:	c1 e0       	ldi	r28, 0x01	; 1
     57a:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;
	while(driving) {
     57c:	1a c0       	rjmp	.+52     	; 0x5b2 <drive+0x52>
		situatie = lineType();
     57e:	0e 94 82 01 	call	0x304	; 0x304 <lineType>
		//clear();
		switch (situatie) {
     582:	99 27       	eor	r25, r25
     584:	00 97       	sbiw	r24, 0x00	; 0
     586:	21 f0       	breq	.+8      	; 0x590 <drive+0x30>
     588:	03 97       	sbiw	r24, 0x03	; 3
     58a:	06 97       	sbiw	r24, 0x06	; 6
     58c:	28 f0       	brcs	.+10     	; 0x598 <drive+0x38>
     58e:	11 c0       	rjmp	.+34     	; 0x5b2 <drive+0x52>
			case Barcode: // end of parcour
			//motorControl('N');
			break;
			
			case Straight:
			motorControl('S');
     590:	83 e5       	ldi	r24, 0x53	; 83
     592:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
			break;
     596:	0d c0       	rjmp	.+26     	; 0x5b2 <drive+0x52>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
     598:	0f 5f       	subi	r16, 0xFF	; 255
     59a:	1f 4f       	sbci	r17, 0xFF	; 255
				motorControl('S');
     59c:	83 e5       	ldi	r24, 0x53	; 83
     59e:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
				if(count == junctions)
     5a2:	0e 15       	cp	r16, r14
     5a4:	1f 05       	cpc	r17, r15
     5a6:	29 f4       	brne	.+10     	; 0x5b2 <drive+0x52>
				{
					motorControl('N');
     5a8:	8e e4       	ldi	r24, 0x4E	; 78
     5aa:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					driving = 0;
     5ae:	c0 e0       	ldi	r28, 0x00	; 0
     5b0:	d0 e0       	ldi	r29, 0x00	; 0
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
	int count = 0;
	while(driving) {
     5b2:	20 97       	sbiw	r28, 0x00	; 0
     5b4:	21 f7       	brne	.-56     	; 0x57e <drive+0x1e>
			
			
		}
		
	}
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	08 95       	ret

000005c4 <waitForTurn>:

void waitForTurn()
{
     5c4:	cf 93       	push	r28
     5c6:	8f e0       	ldi	r24, 0x0F	; 15
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <waitForTurn+0x12>
	Junctions lijn;
	delay(15);
	while(lijn != Straight)
	{
		lijn  = lineType();
     5d0:	0e 94 82 01 	call	0x304	; 0x304 <lineType>
     5d4:	c8 2f       	mov	r28, r24

void waitForTurn()
{
	Junctions lijn;
	delay(15);
	while(lijn != Straight)
     5d6:	c1 11       	cpse	r28, r1
     5d8:	fb cf       	rjmp	.-10     	; 0x5d0 <waitForTurn+0xc>
	{
		lijn  = lineType();
	}
	motorControl('N');
     5da:	8e e4       	ldi	r24, 0x4E	; 78
     5dc:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
}
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <turnRobot>:

void turnRobot(char direction, piRobot *myRobot)
{
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	c8 2f       	mov	r28, r24
     5f0:	8b 01       	movw	r16, r22
    int changing = 1;
     5f2:	ee 24       	eor	r14, r14
     5f4:	e3 94       	inc	r14
     5f6:	f1 2c       	mov	r15, r1

    while(changing==1)
     5f8:	9a c0       	rjmp	.+308    	; 0x72e <turnRobot+0x14a>
    {
		
        switch(myRobot->direction)
     5fa:	f8 01       	movw	r30, r16
     5fc:	84 81       	ldd	r24, Z+4	; 0x04
     5fe:	8e 34       	cpi	r24, 0x4E	; 78
     600:	59 f0       	breq	.+22     	; 0x618 <turnRobot+0x34>
     602:	18 f4       	brcc	.+6      	; 0x60a <turnRobot+0x26>
     604:	85 34       	cpi	r24, 0x45	; 69
     606:	51 f1       	breq	.+84     	; 0x65c <turnRobot+0x78>
     608:	8c c0       	rjmp	.+280    	; 0x722 <turnRobot+0x13e>
     60a:	83 35       	cpi	r24, 0x53	; 83
     60c:	09 f4       	brne	.+2      	; 0x610 <turnRobot+0x2c>
     60e:	48 c0       	rjmp	.+144    	; 0x6a0 <turnRobot+0xbc>
     610:	87 35       	cpi	r24, 0x57	; 87
     612:	09 f4       	brne	.+2      	; 0x616 <turnRobot+0x32>
     614:	66 c0       	rjmp	.+204    	; 0x6e2 <turnRobot+0xfe>
     616:	85 c0       	rjmp	.+266    	; 0x722 <turnRobot+0x13e>
        {
            case 'N':
                if(direction == 'E')
     618:	c5 34       	cpi	r28, 0x45	; 69
     61a:	49 f4       	brne	.+18     	; 0x62e <turnRobot+0x4a>
                {
                    motorControl('R');
     61c:	82 e5       	ldi	r24, 0x52	; 82
     61e:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     622:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'E';
     626:	85 e4       	ldi	r24, 0x45	; 69
     628:	f8 01       	movw	r30, r16
     62a:	84 83       	std	Z+4, r24	; 0x04
     62c:	7a c0       	rjmp	.+244    	; 0x722 <turnRobot+0x13e>
                }
                else if(direction == 'W')
     62e:	c7 35       	cpi	r28, 0x57	; 87
     630:	49 f4       	brne	.+18     	; 0x644 <turnRobot+0x60>
                {
                    motorControl('L');
     632:	8c e4       	ldi	r24, 0x4C	; 76
     634:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     638:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'W';
     63c:	87 e5       	ldi	r24, 0x57	; 87
     63e:	f8 01       	movw	r30, r16
     640:	84 83       	std	Z+4, r24	; 0x04
     642:	6f c0       	rjmp	.+222    	; 0x722 <turnRobot+0x13e>
                }
                else if(direction == 'S')
     644:	c3 35       	cpi	r28, 0x53	; 83
     646:	09 f0       	breq	.+2      	; 0x64a <turnRobot+0x66>
     648:	6c c0       	rjmp	.+216    	; 0x722 <turnRobot+0x13e>
                {
                    motorControl('T');
     64a:	84 e5       	ldi	r24, 0x54	; 84
     64c:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     650:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'S';
     654:	83 e5       	ldi	r24, 0x53	; 83
     656:	f8 01       	movw	r30, r16
     658:	84 83       	std	Z+4, r24	; 0x04
     65a:	63 c0       	rjmp	.+198    	; 0x722 <turnRobot+0x13e>
                }
                break;
            case 'E':
                if(direction == 'S')
     65c:	c3 35       	cpi	r28, 0x53	; 83
     65e:	49 f4       	brne	.+18     	; 0x672 <turnRobot+0x8e>
                {
                    motorControl('R');
     660:	82 e5       	ldi	r24, 0x52	; 82
     662:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     666:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'S';
     66a:	83 e5       	ldi	r24, 0x53	; 83
     66c:	f8 01       	movw	r30, r16
     66e:	84 83       	std	Z+4, r24	; 0x04
     670:	58 c0       	rjmp	.+176    	; 0x722 <turnRobot+0x13e>
                }
                else if(direction == 'W')
     672:	c7 35       	cpi	r28, 0x57	; 87
     674:	49 f4       	brne	.+18     	; 0x688 <turnRobot+0xa4>
                {
                    motorControl('L');
     676:	8c e4       	ldi	r24, 0x4C	; 76
     678:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     67c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'W';
     680:	87 e5       	ldi	r24, 0x57	; 87
     682:	f8 01       	movw	r30, r16
     684:	84 83       	std	Z+4, r24	; 0x04
     686:	4d c0       	rjmp	.+154    	; 0x722 <turnRobot+0x13e>
                }
                else if(direction == 'S')
     688:	c3 35       	cpi	r28, 0x53	; 83
     68a:	09 f0       	breq	.+2      	; 0x68e <turnRobot+0xaa>
     68c:	4a c0       	rjmp	.+148    	; 0x722 <turnRobot+0x13e>
                {
                    motorControl('T');
     68e:	84 e5       	ldi	r24, 0x54	; 84
     690:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     694:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'S';
     698:	83 e5       	ldi	r24, 0x53	; 83
     69a:	f8 01       	movw	r30, r16
     69c:	84 83       	std	Z+4, r24	; 0x04
     69e:	41 c0       	rjmp	.+130    	; 0x722 <turnRobot+0x13e>
                }
                break;
            case 'S':
                if(direction == 'W')
     6a0:	c7 35       	cpi	r28, 0x57	; 87
     6a2:	49 f4       	brne	.+18     	; 0x6b6 <turnRobot+0xd2>
                {
                    motorControl('R');
     6a4:	82 e5       	ldi	r24, 0x52	; 82
     6a6:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     6aa:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'W';
     6ae:	87 e5       	ldi	r24, 0x57	; 87
     6b0:	f8 01       	movw	r30, r16
     6b2:	84 83       	std	Z+4, r24	; 0x04
     6b4:	36 c0       	rjmp	.+108    	; 0x722 <turnRobot+0x13e>
                }
                else if(direction == 'E')
     6b6:	c5 34       	cpi	r28, 0x45	; 69
     6b8:	49 f4       	brne	.+18     	; 0x6cc <turnRobot+0xe8>
                {
                    motorControl('L');
     6ba:	8c e4       	ldi	r24, 0x4C	; 76
     6bc:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     6c0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'E';
     6c4:	85 e4       	ldi	r24, 0x45	; 69
     6c6:	f8 01       	movw	r30, r16
     6c8:	84 83       	std	Z+4, r24	; 0x04
     6ca:	2b c0       	rjmp	.+86     	; 0x722 <turnRobot+0x13e>
                }
                else if(direction == 'N')
     6cc:	ce 34       	cpi	r28, 0x4E	; 78
     6ce:	49 f5       	brne	.+82     	; 0x722 <turnRobot+0x13e>
                {
                    motorControl('T');
     6d0:	84 e5       	ldi	r24, 0x54	; 84
     6d2:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     6d6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'N';
     6da:	8e e4       	ldi	r24, 0x4E	; 78
     6dc:	f8 01       	movw	r30, r16
     6de:	84 83       	std	Z+4, r24	; 0x04
     6e0:	20 c0       	rjmp	.+64     	; 0x722 <turnRobot+0x13e>
                }
                break;
            case 'W':
                if(direction == 'N')
     6e2:	ce 34       	cpi	r28, 0x4E	; 78
     6e4:	49 f4       	brne	.+18     	; 0x6f8 <turnRobot+0x114>
                {
					
                    motorControl('R');
     6e6:	82 e5       	ldi	r24, 0x52	; 82
     6e8:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     6ec:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'N';
     6f0:	8e e4       	ldi	r24, 0x4E	; 78
     6f2:	f8 01       	movw	r30, r16
     6f4:	84 83       	std	Z+4, r24	; 0x04
     6f6:	15 c0       	rjmp	.+42     	; 0x722 <turnRobot+0x13e>
                }
                else if(direction == 'S')
     6f8:	c3 35       	cpi	r28, 0x53	; 83
     6fa:	49 f4       	brne	.+18     	; 0x70e <turnRobot+0x12a>
                {
                    motorControl('L');
     6fc:	8c e4       	ldi	r24, 0x4C	; 76
     6fe:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     702:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'S';
     706:	83 e5       	ldi	r24, 0x53	; 83
     708:	f8 01       	movw	r30, r16
     70a:	84 83       	std	Z+4, r24	; 0x04
     70c:	0a c0       	rjmp	.+20     	; 0x722 <turnRobot+0x13e>
                }
                else if(direction == 'E')
     70e:	c5 34       	cpi	r28, 0x45	; 69
     710:	41 f4       	brne	.+16     	; 0x722 <turnRobot+0x13e>
                {
                    motorControl('T');
     712:	84 e5       	ldi	r24, 0x54	; 84
     714:	0e 94 b6 00 	call	0x16c	; 0x16c <motorControl>
					waitForTurn();
     718:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <waitForTurn>
                    myRobot->direction = 'E';
     71c:	85 e4       	ldi	r24, 0x45	; 69
     71e:	f8 01       	movw	r30, r16
     720:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
		
				if(myRobot->direction == direction)
     722:	f8 01       	movw	r30, r16
     724:	84 81       	ldd	r24, Z+4	; 0x04
     726:	c8 13       	cpse	r28, r24
     728:	02 c0       	rjmp	.+4      	; 0x72e <turnRobot+0x14a>
				{
					changing = 0;
     72a:	e1 2c       	mov	r14, r1
     72c:	f1 2c       	mov	r15, r1

void turnRobot(char direction, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	ef 16       	cp	r14, r31
     732:	f1 04       	cpc	r15, r1
     734:	09 f4       	brne	.+2      	; 0x738 <turnRobot+0x154>
     736:	61 cf       	rjmp	.-318    	; 0x5fa <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	08 95       	ret

00000744 <moveX>:


void moveX(int orderPos, piRobot *robot)
{
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
	
    int junctions;
	
	
    if(robot->posX != orderPos)
     74c:	fb 01       	movw	r30, r22
     74e:	20 81       	ld	r18, Z
     750:	31 81       	ldd	r19, Z+1	; 0x01
     752:	28 17       	cp	r18, r24
     754:	39 07       	cpc	r19, r25
     756:	d1 f0       	breq	.+52     	; 0x78c <moveX+0x48>
     758:	8b 01       	movw	r16, r22
     75a:	ec 01       	movw	r28, r24
    {
		
        if(robot->posX < orderPos)
     75c:	28 17       	cp	r18, r24
     75e:	39 07       	cpc	r19, r25
     760:	5c f4       	brge	.+22     	; 0x778 <moveX+0x34>
        {
            turnRobot('W', robot);
     762:	87 e5       	ldi	r24, 0x57	; 87
     764:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <turnRobot>
            junctions = orderPos-robot->posX;
     768:	f8 01       	movw	r30, r16
     76a:	80 81       	ld	r24, Z
     76c:	91 81       	ldd	r25, Z+1	; 0x01
     76e:	9e 01       	movw	r18, r28
     770:	28 1b       	sub	r18, r24
     772:	39 0b       	sbc	r19, r25
     774:	c9 01       	movw	r24, r18
     776:	08 c0       	rjmp	.+16     	; 0x788 <moveX+0x44>
        }
        else{
            turnRobot('E', robot);
     778:	85 e4       	ldi	r24, 0x45	; 69
     77a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <turnRobot>
            junctions = robot->posX - orderPos;
     77e:	f8 01       	movw	r30, r16
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	8c 1b       	sub	r24, r28
     786:	9d 0b       	sbc	r25, r29
        }

        
		drive(junctions);
     788:	0e 94 b0 02 	call	0x560	; 0x560 <drive>
        

    }
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	08 95       	ret

00000796 <moveY>:

void moveY(int orderPos, piRobot *robot)
{
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
     79e:	fb 01       	movw	r30, r22
     7a0:	22 81       	ldd	r18, Z+2	; 0x02
     7a2:	33 81       	ldd	r19, Z+3	; 0x03
     7a4:	28 17       	cp	r18, r24
     7a6:	39 07       	cpc	r19, r25
     7a8:	d1 f0       	breq	.+52     	; 0x7de <moveY+0x48>
     7aa:	8b 01       	movw	r16, r22
     7ac:	ec 01       	movw	r28, r24
    {
        if(robot->posY < orderPos)
     7ae:	28 17       	cp	r18, r24
     7b0:	39 07       	cpc	r19, r25
     7b2:	5c f4       	brge	.+22     	; 0x7ca <moveY+0x34>
        {
            turnRobot('N', robot);
     7b4:	8e e4       	ldi	r24, 0x4E	; 78
     7b6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <turnRobot>
            junctions = orderPos-robot->posY;
     7ba:	f8 01       	movw	r30, r16
     7bc:	82 81       	ldd	r24, Z+2	; 0x02
     7be:	93 81       	ldd	r25, Z+3	; 0x03
     7c0:	9e 01       	movw	r18, r28
     7c2:	28 1b       	sub	r18, r24
     7c4:	39 0b       	sbc	r19, r25
     7c6:	c9 01       	movw	r24, r18
     7c8:	08 c0       	rjmp	.+16     	; 0x7da <moveY+0x44>
        }
        else{
            turnRobot('S', robot);
     7ca:	83 e5       	ldi	r24, 0x53	; 83
     7cc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <turnRobot>
            junctions = robot->posY - orderPos;
     7d0:	f8 01       	movw	r30, r16
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	8c 1b       	sub	r24, r28
     7d8:	9d 0b       	sbc	r25, r29
        }

            drive(junctions);
     7da:	0e 94 b0 02 	call	0x560	; 0x560 <drive>
        

    }
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	08 95       	ret

000007e8 <warehouse>:


void warehouse(void)
{
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	69 97       	sbiw	r28, 0x19	; 25
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
 piRobot robot;
 robot.direction = 'S';
     7fc:	83 e5       	ldi	r24, 0x53	; 83
     7fe:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = 4;
     800:	84 e0       	ldi	r24, 0x04	; 4
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 83       	std	Y+1, r24	; 0x01
 robot.posY = 4;
     808:	9c 83       	std	Y+4, r25	; 0x04
     80a:	8b 83       	std	Y+3, r24	; 0x03
//int orderX[] = getWixel("posX");
//int orderY[] = getWixel("posY");

    int orderX[] = {0,3,1,2,4};
     80c:	8a e0       	ldi	r24, 0x0A	; 10
     80e:	e8 e0       	ldi	r30, 0x08	; 8
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	de 01       	movw	r26, r28
     814:	16 96       	adiw	r26, 0x06	; 6
     816:	01 90       	ld	r0, Z+
     818:	0d 92       	st	X+, r0
     81a:	8a 95       	dec	r24
     81c:	e1 f7       	brne	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
    int orderY[] = {1,2,3,3,4};
     81e:	8a e0       	ldi	r24, 0x0A	; 10
     820:	e2 e1       	ldi	r30, 0x12	; 18
     822:	f1 e0       	ldi	r31, 0x01	; 1
     824:	de 01       	movw	r26, r28
     826:	50 96       	adiw	r26, 0x10	; 16
     828:	01 90       	ld	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	8a 95       	dec	r24
     82e:	e1 f7       	brne	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>

    int arrayGrootte = sizeof(orderX) / sizeof(orderX[0]);
    bubbleSort(orderX, orderY, arrayGrootte);
     830:	45 e0       	ldi	r20, 0x05	; 5
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	be 01       	movw	r22, r28
     836:	60 5f       	subi	r22, 0xF0	; 240
     838:	7f 4f       	sbci	r23, 0xFF	; 255
     83a:	ce 01       	movw	r24, r28
     83c:	06 96       	adiw	r24, 0x06	; 6
     83e:	0e 94 58 02 	call	0x4b0	; 0x4b0 <bubbleSort>
		//robot.posY = orderY[locaties];
        //delay(1000);//wait 1 second
		//
        //updateDisplay(((completed/total)*100),batteryPercentage(),logicsBot);
    //}
    moveY(0, &robot);
     842:	be 01       	movw	r22, r28
     844:	6f 5f       	subi	r22, 0xFF	; 255
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 cb 03 	call	0x796	; 0x796 <moveY>
    moveX(0, &robot);
     850:	be 01       	movw	r22, r28
     852:	6f 5f       	subi	r22, 0xFF	; 255
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 a2 03 	call	0x744	; 0x744 <moveX>
    //goHome();
}
     85e:	69 96       	adiw	r28, 0x19	; 25
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <delay_us.constprop.0>:
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	6f 93       	push	r22
     876:	64 e0       	ldi	r22, 0x04	; 4
     878:	6a 95       	dec	r22
     87a:	f1 f7       	brne	.-4      	; 0x878 <delay_us.constprop.0+0x8>
     87c:	6f 91       	pop	r22
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	c9 f7       	brne	.-14     	; 0x874 <delay_us.constprop.0+0x4>
     882:	08 95       	ret

00000884 <_ZN12OrangutanLCD8busyWaitEv>:
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1a b1       	in	r17, 0x0a	; 10
     88e:	57 98       	cbi	0x0a, 7	; 10
     890:	5a 98       	cbi	0x0b, 2	; 11
     892:	28 9a       	sbi	0x05, 0	; 5
     894:	c0 e0       	ldi	r28, 0x00	; 0
     896:	d0 e0       	ldi	r29, 0x00	; 0
     898:	0e 94 38 04 	call	0x870	; 0x870 <delay_us.constprop.0>
     89c:	5c 9a       	sbi	0x0b, 4	; 11
     89e:	0e 94 38 04 	call	0x870	; 0x870 <delay_us.constprop.0>
     8a2:	09 b1       	in	r16, 0x09	; 9
     8a4:	5c 98       	cbi	0x0b, 4	; 11
     8a6:	0e 94 38 04 	call	0x870	; 0x870 <delay_us.constprop.0>
     8aa:	5c 9a       	sbi	0x0b, 4	; 11
     8ac:	0e 94 38 04 	call	0x870	; 0x870 <delay_us.constprop.0>
     8b0:	5c 98       	cbi	0x0b, 4	; 11
     8b2:	24 96       	adiw	r28, 0x04	; 4
     8b4:	07 ff       	sbrs	r16, 7
     8b6:	10 c0       	rjmp	.+32     	; 0x8d8 <_ZN12OrangutanLCD8busyWaitEv+0x54>
     8b8:	ae 01       	movw	r20, r28
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     8c2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     8c6:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <__data_end+0x2>
     8ca:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <__data_end+0x3>
     8ce:	48 17       	cp	r20, r24
     8d0:	59 07       	cpc	r21, r25
     8d2:	6a 07       	cpc	r22, r26
     8d4:	7b 07       	cpc	r23, r27
     8d6:	00 f3       	brcs	.-64     	; 0x898 <_ZN12OrangutanLCD8busyWaitEv+0x14>
     8d8:	1a b9       	out	0x0a, r17	; 10
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <_ZN12OrangutanLCD8sendDataEh>:
     8e4:	95 b1       	in	r25, 0x05	; 5
     8e6:	28 2f       	mov	r18, r24
     8e8:	21 70       	andi	r18, 0x01	; 1
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	22 0f       	add	r18, r18
     8ee:	33 1f       	adc	r19, r19
     8f0:	48 2f       	mov	r20, r24
     8f2:	46 70       	andi	r20, 0x06	; 6
     8f4:	68 e0       	ldi	r22, 0x08	; 8
     8f6:	46 9f       	mul	r20, r22
     8f8:	a0 01       	movw	r20, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	24 2b       	or	r18, r20
     8fe:	9d 7c       	andi	r25, 0xCD	; 205
     900:	29 2b       	or	r18, r25
     902:	25 b9       	out	0x05, r18	; 5
     904:	9b b1       	in	r25, 0x0b	; 11
     906:	88 70       	andi	r24, 0x08	; 8
     908:	82 95       	swap	r24
     90a:	80 7f       	andi	r24, 0xF0	; 240
     90c:	9f 77       	andi	r25, 0x7F	; 127
     90e:	89 2b       	or	r24, r25
     910:	8b b9       	out	0x0b, r24	; 11
     912:	5c 9a       	sbi	0x0b, 4	; 11
     914:	0e 94 38 04 	call	0x870	; 0x870 <delay_us.constprop.0>
     918:	5c 98       	cbi	0x0b, 4	; 11
     91a:	0e 94 38 04 	call	0x870	; 0x870 <delay_us.constprop.0>
     91e:	08 95       	ret

00000920 <_ZN12OrangutanLCD4sendEhhh>:
     920:	a0 e0       	ldi	r26, 0x00	; 0
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	e6 e9       	ldi	r30, 0x96	; 150
     926:	f4 e0       	ldi	r31, 0x04	; 4
     928:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__prologue_saves__+0x16>
     92c:	c8 2f       	mov	r28, r24
     92e:	d6 2e       	mov	r13, r22
     930:	e4 2e       	mov	r14, r20
     932:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <_ZZN12OrangutanLCD4initEvE11initialized>
     936:	81 11       	cpse	r24, r1
     938:	05 c0       	rjmp	.+10     	; 0x944 <_ZN12OrangutanLCD4sendEhhh+0x24>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <_ZZN12OrangutanLCD4initEvE11initialized>
     940:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN12OrangutanLCD5init2Ev>
     944:	0e 94 42 04 	call	0x884	; 0x884 <_ZN12OrangutanLCD8busyWaitEv>
     948:	14 b1       	in	r17, 0x04	; 4
     94a:	d5 b1       	in	r29, 0x05	; 5
     94c:	fa b0       	in	r15, 0x0a	; 10
     94e:	0b b1       	in	r16, 0x0b	; 11
     950:	28 98       	cbi	0x05, 0	; 5
     952:	dd 20       	and	r13, r13
     954:	11 f0       	breq	.+4      	; 0x95a <_ZN12OrangutanLCD4sendEhhh+0x3a>
     956:	5a 9a       	sbi	0x0b, 2	; 11
     958:	01 c0       	rjmp	.+2      	; 0x95c <_ZN12OrangutanLCD4sendEhhh+0x3c>
     95a:	5a 98       	cbi	0x0b, 2	; 11
     95c:	94 b1       	in	r25, 0x04	; 4
     95e:	92 63       	ori	r25, 0x32	; 50
     960:	94 b9       	out	0x04, r25	; 4
     962:	57 9a       	sbi	0x0a, 7	; 10
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	e8 16       	cp	r14, r24
     968:	29 f0       	breq	.+10     	; 0x974 <_ZN12OrangutanLCD4sendEhhh+0x54>
     96a:	8c 2f       	mov	r24, r28
     96c:	82 95       	swap	r24
     96e:	8f 70       	andi	r24, 0x0F	; 15
     970:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZN12OrangutanLCD8sendDataEh>
     974:	8c 2f       	mov	r24, r28
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	0e 94 72 04 	call	0x8e4	; 0x8e4 <_ZN12OrangutanLCD8sendDataEh>
     97c:	fa b8       	out	0x0a, r15	; 10
     97e:	0b b9       	out	0x0b, r16	; 11
     980:	14 b9       	out	0x04, r17	; 4
     982:	d5 b9       	out	0x05, r29	; 5
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	e7 e0       	ldi	r30, 0x07	; 7
     98a:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__epilogue_restores__+0x16>

0000098e <_ZN12OrangutanLCD8send_cmdEh>:
     98e:	42 e0       	ldi	r20, 0x02	; 2
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	0e 94 90 04 	call	0x920	; 0x920 <_ZN12OrangutanLCD4sendEhhh>
     996:	08 95       	ret

00000998 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
     998:	41 e0       	ldi	r20, 0x01	; 1
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	0e 94 90 04 	call	0x920	; 0x920 <_ZN12OrangutanLCD4sendEhhh>
     9a0:	08 95       	ret

000009a2 <_ZN12OrangutanLCD5init2Ev>:
     9a2:	80 e1       	ldi	r24, 0x10	; 16
     9a4:	97 e2       	ldi	r25, 0x27	; 39
     9a6:	a0 e0       	ldi	r26, 0x00	; 0
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
     9ae:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
     9b2:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <__data_end+0x2>
     9b6:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <__data_end+0x3>
     9ba:	52 9a       	sbi	0x0a, 2	; 10
     9bc:	20 9a       	sbi	0x04, 0	; 4
     9be:	54 9a       	sbi	0x0a, 4	; 10
     9c0:	8e e1       	ldi	r24, 0x1E	; 30
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     9ce:	86 e0       	ldi	r24, 0x06	; 6
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0e 94 cc 04 	call	0x998	; 0x998 <_ZN12OrangutanLCD13send_4bit_cmdEh>
     9f8:	82 e0       	ldi	r24, 0x02	; 2
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
     a00:	88 e2       	ldi	r24, 0x28	; 40
     a02:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN12OrangutanLCD8send_cmdEh>
     a06:	88 e0       	ldi	r24, 0x08	; 8
     a08:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN12OrangutanLCD8send_cmdEh>
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN12OrangutanLCD8send_cmdEh>
     a12:	86 e0       	ldi	r24, 0x06	; 6
     a14:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN12OrangutanLCD8send_cmdEh>
     a18:	8c e0       	ldi	r24, 0x0C	; 12
     a1a:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN12OrangutanLCD8send_cmdEh>
     a1e:	08 95       	ret

00000a20 <_ZN12OrangutanLCD5clearEv>:
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN12OrangutanLCD8send_cmdEh>
     a26:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <printf_chars>
     a2a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <printf_chars+0x1>
     a2e:	89 2b       	or	r24, r25
     a30:	f9 f0       	breq	.+62     	; 0xa70 <_ZN12OrangutanLCD5clearEv+0x50>
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	a0 e2       	ldi	r26, 0x20	; 32
     a36:	26 2f       	mov	r18, r22
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	70 91 00 01 	lds	r23, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a3e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <numLCDRows>
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	78 9f       	mul	r23, r24
     a48:	a0 01       	movw	r20, r0
     a4a:	79 9f       	mul	r23, r25
     a4c:	50 0d       	add	r21, r0
     a4e:	11 24       	eor	r1, r1
     a50:	24 17       	cp	r18, r20
     a52:	35 07       	cpc	r19, r21
     a54:	4c f4       	brge	.+18     	; 0xa68 <_ZN12OrangutanLCD5clearEv+0x48>
     a56:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <printf_chars>
     a5a:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <printf_chars+0x1>
     a5e:	e2 0f       	add	r30, r18
     a60:	f3 1f       	adc	r31, r19
     a62:	a0 83       	st	Z, r26
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	e7 cf       	rjmp	.-50     	; 0xa36 <_ZN12OrangutanLCD5clearEv+0x16>
     a68:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <col>
     a6c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <row>
     a70:	08 95       	ret

00000a72 <clear>:
     a72:	0e 94 10 05 	call	0xa20	; 0xa20 <_ZN12OrangutanLCD5clearEv>
     a76:	08 95       	ret

00000a78 <_ZN16OrangutanDigital9setOutputEhh>:
     a78:	88 30       	cpi	r24, 0x08	; 8
     a7a:	58 f4       	brcc	.+22     	; 0xa92 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <_ZN16OrangutanDigital9setOutputEhh+0xa>
     a80:	99 0f       	add	r25, r25
     a82:	8a 95       	dec	r24
     a84:	ea f7       	brpl	.-6      	; 0xa80 <_ZN16OrangutanDigital9setOutputEhh+0x8>
     a86:	89 2f       	mov	r24, r25
     a88:	aa e2       	ldi	r26, 0x2A	; 42
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	eb e2       	ldi	r30, 0x2B	; 43
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	21 c0       	rjmp	.+66     	; 0xad4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     a92:	8e 30       	cpi	r24, 0x0E	; 14
     a94:	60 f4       	brcc	.+24     	; 0xaae <_ZN16OrangutanDigital9setOutputEhh+0x36>
     a96:	98 ef       	ldi	r25, 0xF8	; 248
     a98:	98 0f       	add	r25, r24
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <_ZN16OrangutanDigital9setOutputEhh+0x28>
     a9e:	88 0f       	add	r24, r24
     aa0:	9a 95       	dec	r25
     aa2:	ea f7       	brpl	.-6      	; 0xa9e <_ZN16OrangutanDigital9setOutputEhh+0x26>
     aa4:	a4 e2       	ldi	r26, 0x24	; 36
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	e5 e2       	ldi	r30, 0x25	; 37
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	13 c0       	rjmp	.+38     	; 0xad4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     aae:	85 31       	cpi	r24, 0x15	; 21
     ab0:	60 f4       	brcc	.+24     	; 0xaca <_ZN16OrangutanDigital9setOutputEhh+0x52>
     ab2:	92 ef       	ldi	r25, 0xF2	; 242
     ab4:	98 0f       	add	r25, r24
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <_ZN16OrangutanDigital9setOutputEhh+0x44>
     aba:	88 0f       	add	r24, r24
     abc:	9a 95       	dec	r25
     abe:	ea f7       	brpl	.-6      	; 0xaba <_ZN16OrangutanDigital9setOutputEhh+0x42>
     ac0:	a7 e2       	ldi	r26, 0x27	; 39
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e8 e2       	ldi	r30, 0x28	; 40
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	a0 e0       	ldi	r26, 0x00	; 0
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e0 e0       	ldi	r30, 0x00	; 0
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	6f 3f       	cpi	r22, 0xFF	; 255
     ad6:	19 f4       	brne	.+6      	; 0xade <_ZN16OrangutanDigital9setOutputEhh+0x66>
     ad8:	90 81       	ld	r25, Z
     ada:	98 27       	eor	r25, r24
     adc:	09 c0       	rjmp	.+18     	; 0xaf0 <_ZN16OrangutanDigital9setOutputEhh+0x78>
     ade:	66 23       	and	r22, r22
     ae0:	19 f0       	breq	.+6      	; 0xae8 <_ZN16OrangutanDigital9setOutputEhh+0x70>
     ae2:	90 81       	ld	r25, Z
     ae4:	98 2b       	or	r25, r24
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <_ZN16OrangutanDigital9setOutputEhh+0x78>
     ae8:	20 81       	ld	r18, Z
     aea:	98 2f       	mov	r25, r24
     aec:	90 95       	com	r25
     aee:	92 23       	and	r25, r18
     af0:	90 83       	st	Z, r25
     af2:	9c 91       	ld	r25, X
     af4:	98 2b       	or	r25, r24
     af6:	9c 93       	st	X, r25
     af8:	08 95       	ret

00000afa <_ZN15OrangutanMotors5init2Ev>:
     afa:	83 ef       	ldi	r24, 0xF3	; 243
     afc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     b00:	84 bd       	out	0x24, r24	; 36
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     b08:	85 bd       	out	0x25, r24	; 37
     b0a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b0e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b12:	18 bc       	out	0x28, r1	; 40
     b14:	17 bc       	out	0x27, r1	; 39
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	0e 94 3c 05 	call	0xa78	; 0xa78 <_ZN16OrangutanDigital9setOutputEhh>
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	85 e0       	ldi	r24, 0x05	; 5
     b22:	0e 94 3c 05 	call	0xa78	; 0xa78 <_ZN16OrangutanDigital9setOutputEhh>
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	8b e0       	ldi	r24, 0x0B	; 11
     b2a:	0e 94 3c 05 	call	0xa78	; 0xa78 <_ZN16OrangutanDigital9setOutputEhh>
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	0e 94 3c 05 	call	0xa78	; 0xa78 <_ZN16OrangutanDigital9setOutputEhh>
     b36:	08 95       	ret

00000b38 <_ZN15OrangutanMotors4initEv>:
     b38:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <_ZZN15OrangutanMotors4initEvE11initialized>
     b3c:	81 11       	cpse	r24, r1
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <_ZN15OrangutanMotors4initEv+0x12>
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <_ZZN15OrangutanMotors4initEvE11initialized>
     b46:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN15OrangutanMotors5init2Ev>
     b4a:	08 95       	ret

00000b4c <_ZN15OrangutanMotors10setM1SpeedEi>:
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	ec 01       	movw	r28, r24
     b52:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN15OrangutanMotors4initEv>
     b56:	d7 ff       	sbrs	r29, 7
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
     b5a:	d1 95       	neg	r29
     b5c:	c1 95       	neg	r28
     b5e:	d1 09       	sbc	r29, r1
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	cf 3f       	cpi	r28, 0xFF	; 255
     b68:	d1 05       	cpc	r29, r1
     b6a:	19 f0       	breq	.+6      	; 0xb72 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
     b6c:	14 f0       	brlt	.+4      	; 0xb72 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
     b6e:	cf ef       	ldi	r28, 0xFF	; 255
     b70:	d0 e0       	ldi	r29, 0x00	; 0
     b72:	88 23       	and	r24, r24
     b74:	19 f0       	breq	.+6      	; 0xb7c <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
     b76:	18 bc       	out	0x28, r1	; 40
     b78:	c7 bd       	out	0x27, r28	; 39
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
     b7c:	c8 bd       	out	0x28, r28	; 40
     b7e:	17 bc       	out	0x27, r1	; 39
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <_ZN15OrangutanMotors10setM2SpeedEi>:
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
     b8c:	0e 94 9c 05 	call	0xb38	; 0xb38 <_ZN15OrangutanMotors4initEv>
     b90:	d7 ff       	sbrs	r29, 7
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
     b94:	d1 95       	neg	r29
     b96:	c1 95       	neg	r28
     b98:	d1 09       	sbc	r29, r1
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	cf 3f       	cpi	r28, 0xFF	; 255
     ba2:	d1 05       	cpc	r29, r1
     ba4:	19 f0       	breq	.+6      	; 0xbac <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
     ba6:	14 f0       	brlt	.+4      	; 0xbac <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
     ba8:	cf ef       	ldi	r28, 0xFF	; 255
     baa:	d0 e0       	ldi	r29, 0x00	; 0
     bac:	88 23       	and	r24, r24
     bae:	29 f0       	breq	.+10     	; 0xbba <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
     bb0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bb4:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     bb8:	04 c0       	rjmp	.+8      	; 0xbc2 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
     bba:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bbe:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <_ZN15OrangutanMotors9setSpeedsEii>:
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	eb 01       	movw	r28, r22
     bce:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_ZN15OrangutanMotors10setM1SpeedEi>
     bd2:	ce 01       	movw	r24, r28
     bd4:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN15OrangutanMotors10setM2SpeedEi>
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <set_motors>:
     bde:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN15OrangutanMotors9setSpeedsEii>
     be2:	08 95       	ret

00000be4 <_ZN20OrangutanPushbuttons5init2Ev>:
     be4:	84 b1       	in	r24, 0x04	; 4
     be6:	8d 7c       	andi	r24, 0xCD	; 205
     be8:	84 b9       	out	0x04, r24	; 4
     bea:	85 b1       	in	r24, 0x05	; 5
     bec:	82 63       	ori	r24, 0x32	; 50
     bee:	85 b9       	out	0x05, r24	; 5
     bf0:	85 e0       	ldi	r24, 0x05	; 5
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	6f 93       	push	r22
     bf6:	64 e0       	ldi	r22, 0x04	; 4
     bf8:	6a 95       	dec	r22
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
     bfc:	6f 91       	pop	r22
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	c9 f7       	brne	.-14     	; 0xbf4 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
     c02:	08 95       	ret

00000c04 <_ZN20OrangutanPushbuttons4initEv>:
     c04:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <_ZZN20OrangutanPushbuttons4initEvE11initialized>
     c08:	81 11       	cpse	r24, r1
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <_ZN20OrangutanPushbuttons4initEv+0x12>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <_ZZN20OrangutanPushbuttons4initEvE11initialized>
     c12:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN20OrangutanPushbuttons5init2Ev>
     c16:	08 95       	ret

00000c18 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
     c18:	cf 93       	push	r28
     c1a:	c8 2f       	mov	r28, r24
     c1c:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN20OrangutanPushbuttons4initEv>
     c20:	83 b1       	in	r24, 0x03	; 3
     c22:	8c 23       	and	r24, r28
     c24:	e9 f3       	breq	.-6      	; 0xc20 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
     c26:	8a e0       	ldi	r24, 0x0A	; 10
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <delay_ms>
     c2e:	83 b1       	in	r24, 0x03	; 3
     c30:	8c 23       	and	r24, r28
     c32:	b1 f3       	breq	.-20     	; 0xc20 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
     c34:	83 b1       	in	r24, 0x03	; 3
     c36:	8c 23       	and	r24, r28
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <wait_for_button_release>:
     c3c:	0e 94 0c 06 	call	0xc18	; 0xc18 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
     c40:	08 95       	ret

00000c42 <_ZN20OrangutanPushbuttons9isPressedEh>:
     c42:	a1 e0       	ldi	r26, 0x01	; 1
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e2       	ldi	r30, 0x27	; 39
     c48:	f6 e0       	ldi	r31, 0x06	; 6
     c4a:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <__prologue_saves__+0x20>
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN20OrangutanPushbuttons4initEv>
     c54:	93 b1       	in	r25, 0x03	; 3
     c56:	90 95       	com	r25
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	89 23       	and	r24, r25
     c5c:	21 96       	adiw	r28, 0x01	; 1
     c5e:	e2 e0       	ldi	r30, 0x02	; 2
     c60:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__epilogue_restores__+0x20>

00000c64 <button_is_pressed>:
     c64:	0e 94 21 06 	call	0xc42	; 0xc42 <_ZN20OrangutanPushbuttons9isPressedEh>
     c68:	08 95       	ret

00000c6a <__vector_9>:
     c6a:	2f 92       	push	r2
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	2f b6       	in	r2, 0x3f	; 63
     c72:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <tickCount+0x1>
     c76:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <tickCount+0x2>
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <tickCount+0x1>
     c80:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <tickCount+0x2>
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <tickCount+0x3>
     c8a:	89 1f       	adc	r24, r25
     c8c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <tickCount+0x3>
     c90:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <us_over_10+0x1>
     c94:	9c 5f       	subi	r25, 0xFC	; 252
     c96:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <us_over_10+0x1>
     c9a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <us_over_10>
     c9e:	80 51       	subi	r24, 0x10	; 16
     ca0:	97 42       	sbci	r25, 0x27	; 39
     ca2:	c0 f0       	brcs	.+48     	; 0xcd4 <end>
     ca4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <us_over_10+0x1>
     ca8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <us_over_10>
     cac:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <msCounter>
     cb0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <msCounter+0x1>
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <msCounter>
     cba:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <msCounter+0x1>
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <msCounter+0x2>
     cc4:	89 1f       	adc	r24, r25
     cc6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <msCounter+0x2>
     cca:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <msCounter+0x3>
     cce:	89 1f       	adc	r24, r25
     cd0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <msCounter+0x3>

00000cd4 <end>:
     cd4:	2f be       	out	0x3f, r2	; 63
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	2f 90       	pop	r2
     cdc:	18 95       	reti

00000cde <_ZN13OrangutanTime17delayMillisecondsEj>:
     cde:	28 ee       	ldi	r18, 0xE8	; 232
     ce0:	33 e0       	ldi	r19, 0x03	; 3
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	48 f0       	brcs	.+18     	; 0xcf8 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
     ce6:	f9 01       	movw	r30, r18
     ce8:	6f 93       	push	r22
     cea:	64 e0       	ldi	r22, 0x04	; 4
     cec:	6a 95       	dec	r22
     cee:	f1 f7       	brne	.-4      	; 0xcec <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
     cf0:	6f 91       	pop	r22
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	c9 f7       	brne	.-14     	; 0xce8 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
     cf6:	f5 cf       	rjmp	.-22     	; 0xce2 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
     cf8:	08 95       	ret

00000cfa <delay_ms>:
     cfa:	0e 94 6f 06 	call	0xcde	; 0xcde <_ZN13OrangutanTime17delayMillisecondsEj>
     cfe:	08 95       	ret

00000d00 <_ZN13OrangutanTime5init2Ev>:
     d00:	e0 e7       	ldi	r30, 0x70	; 112
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	80 83       	st	Z, r24
     d0a:	a0 eb       	ldi	r26, 0xB0	; 176
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	8c 91       	ld	r24, X
     d10:	83 60       	ori	r24, 0x03	; 3
     d12:	8c 93       	st	X, r24
     d14:	a1 eb       	ldi	r26, 0xB1	; 177
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	8c 91       	ld	r24, X
     d1a:	80 7f       	andi	r24, 0xF0	; 240
     d1c:	8c 93       	st	X, r24
     d1e:	8c 91       	ld	r24, X
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	8c 93       	st	X, r24
     d24:	b8 9a       	sbi	0x17, 0	; 23
     d26:	80 81       	ld	r24, Z
     d28:	81 60       	ori	r24, 0x01	; 1
     d2a:	80 83       	st	Z, r24
     d2c:	78 94       	sei
     d2e:	08 95       	ret

00000d30 <_ZN13OrangutanTime4initEv>:
     d30:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <_ZZN13OrangutanTime4initEvE11initialized>
     d34:	81 11       	cpse	r24, r1
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <_ZN13OrangutanTime4initEv+0x12>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <_ZZN13OrangutanTime4initEvE11initialized>
     d3e:	0e 94 80 06 	call	0xd00	; 0xd00 <_ZN13OrangutanTime5init2Ev>
     d42:	08 95       	ret

00000d44 <_ZN13OrangutanTime5resetEv>:
     d44:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZN13OrangutanTime4initEv>
     d48:	e0 e7       	ldi	r30, 0x70	; 112
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8e 7f       	andi	r24, 0xFE	; 254
     d50:	80 83       	st	Z, r24
     d52:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <msCounter>
     d56:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <msCounter+0x1>
     d5a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msCounter+0x2>
     d5e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msCounter+0x3>
     d62:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <us_over_10+0x1>
     d66:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <us_over_10>
     d6a:	80 81       	ld	r24, Z
     d6c:	81 60       	ori	r24, 0x01	; 1
     d6e:	80 83       	st	Z, r24
     d70:	08 95       	ret

00000d72 <calibrate_line_sensors>:
     d72:	68 2f       	mov	r22, r24
     d74:	84 e3       	ldi	r24, 0x34	; 52
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_ZN16PololuQTRSensors9calibrateEh>
     d7c:	08 95       	ret

00000d7e <read_line>:
     d7e:	46 2f       	mov	r20, r22
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	bc 01       	movw	r22, r24
     d84:	84 e3       	ldi	r24, 0x34	; 52
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN16PololuQTRSensors8readLineEPjhh>
     d8c:	08 95       	ret

00000d8e <_ZN9Pololu3pi4initEjh>:
     d8e:	0f 93       	push	r16
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	00 d0       	rcall	.+0      	; 0xd96 <_ZN9Pololu3pi4initEjh+0x8>
     d96:	00 d0       	rcall	.+0      	; 0xd98 <_ZN9Pololu3pi4initEjh+0xa>
     d98:	1f 92       	push	r1
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	9c 01       	movw	r18, r24
     da0:	85 e0       	ldi	r24, 0x05	; 5
     da2:	ec e1       	ldi	r30, 0x1C	; 28
     da4:	f1 e0       	ldi	r31, 0x01	; 1
     da6:	de 01       	movw	r26, r28
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	01 90       	ld	r0, Z+
     dac:	0d 92       	st	X+, r0
     dae:	8a 95       	dec	r24
     db0:	e1 f7       	brne	.-8      	; 0xdaa <_ZN9Pololu3pi4initEjh+0x1c>
     db2:	66 23       	and	r22, r22
     db4:	11 f0       	breq	.+4      	; 0xdba <_ZN9Pololu3pi4initEjh+0x2c>
     db6:	0f ef       	ldi	r16, 0xFF	; 255
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <_ZN9Pololu3pi4initEjh+0x2e>
     dba:	03 e1       	ldi	r16, 0x13	; 19
     dbc:	45 e0       	ldi	r20, 0x05	; 5
     dbe:	be 01       	movw	r22, r28
     dc0:	6f 5f       	subi	r22, 0xFF	; 255
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	84 e3       	ldi	r24, 0x34	; 52
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	0e 94 99 07 	call	0xf32	; 0xf32 <_ZN18PololuQTRSensorsRC4initEPhhjh>
     dcc:	84 e3       	ldi	r24, 0x34	; 52
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN16PololuQTRSensors11emittersOffEv>
     dd4:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN13OrangutanTime5resetEv>
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	0f 91       	pop	r16
     de8:	08 95       	ret

00000dea <pololu_3pi_init>:
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_ZN9Pololu3pi4initEjh>
     df0:	08 95       	ret

00000df2 <_GLOBAL__sub_D_pololu_3pi_init>:
     df2:	84 e3       	ldi	r24, 0x34	; 52
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN16PololuQTRSensorsD1Ev>
     dfa:	08 95       	ret

00000dfc <delay_us>:
     dfc:	6f 93       	push	r22
     dfe:	64 e0       	ldi	r22, 0x04	; 4
     e00:	6a 95       	dec	r22
     e02:	f1 f7       	brne	.-4      	; 0xe00 <delay_us+0x4>
     e04:	6f 91       	pop	r22
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	c9 f7       	brne	.-14     	; 0xdfc <delay_us>
     e0a:	08 95       	ret

00000e0c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
     e0c:	fc 01       	movw	r30, r24
     e0e:	11 82       	std	Z+1, r1	; 0x01
     e10:	10 82       	st	Z, r1
     e12:	13 82       	std	Z+3, r1	; 0x03
     e14:	12 82       	std	Z+2, r1	; 0x02
     e16:	15 82       	std	Z+5, r1	; 0x05
     e18:	14 82       	std	Z+4, r1	; 0x04
     e1a:	16 82       	std	Z+6, r1	; 0x06
     e1c:	68 30       	cpi	r22, 0x08	; 8
     e1e:	68 f4       	brcc	.+26     	; 0xe3a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
     e20:	89 e2       	ldi	r24, 0x29	; 41
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
     e28:	8b e2       	ldi	r24, 0x2B	; 43
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	93 83       	std	Z+3, r25	; 0x03
     e2e:	82 83       	std	Z+2, r24	; 0x02
     e30:	8a e2       	ldi	r24, 0x2A	; 42
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	95 83       	std	Z+5, r25	; 0x05
     e36:	84 83       	std	Z+4, r24	; 0x04
     e38:	1f c0       	rjmp	.+62     	; 0xe78 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
     e3a:	6e 30       	cpi	r22, 0x0E	; 14
     e3c:	70 f4       	brcc	.+28     	; 0xe5a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
     e3e:	83 e2       	ldi	r24, 0x23	; 35
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	80 83       	st	Z, r24
     e46:	85 e2       	ldi	r24, 0x25	; 37
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	93 83       	std	Z+3, r25	; 0x03
     e4c:	82 83       	std	Z+2, r24	; 0x02
     e4e:	84 e2       	ldi	r24, 0x24	; 36
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	95 83       	std	Z+5, r25	; 0x05
     e54:	84 83       	std	Z+4, r24	; 0x04
     e56:	68 50       	subi	r22, 0x08	; 8
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
     e5a:	65 31       	cpi	r22, 0x15	; 21
     e5c:	98 f4       	brcc	.+38     	; 0xe84 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
     e5e:	86 e2       	ldi	r24, 0x26	; 38
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
     e66:	88 e2       	ldi	r24, 0x28	; 40
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	93 83       	std	Z+3, r25	; 0x03
     e6c:	82 83       	std	Z+2, r24	; 0x02
     e6e:	87 e2       	ldi	r24, 0x27	; 39
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	95 83       	std	Z+5, r25	; 0x05
     e74:	84 83       	std	Z+4, r24	; 0x04
     e76:	6e 50       	subi	r22, 0x0E	; 14
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
     e7c:	88 0f       	add	r24, r24
     e7e:	6a 95       	dec	r22
     e80:	ea f7       	brpl	.-6      	; 0xe7c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
     e82:	86 83       	std	Z+6, r24	; 0x06
     e84:	08 95       	ret

00000e86 <_ZN16PololuQTRSensors4initEhhh>:
     e86:	a7 e0       	ldi	r26, 0x07	; 7
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e9 e4       	ldi	r30, 0x49	; 73
     e8c:	f7 e0       	ldi	r31, 0x07	; 7
     e8e:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <__prologue_saves__+0x1c>
     e92:	8c 01       	movw	r16, r24
     e94:	fc 01       	movw	r30, r24
     e96:	11 82       	std	Z+1, r1	; 0x01
     e98:	10 82       	st	Z, r1
     e9a:	13 82       	std	Z+3, r1	; 0x03
     e9c:	12 82       	std	Z+2, r1	; 0x02
     e9e:	15 82       	std	Z+5, r1	; 0x05
     ea0:	14 82       	std	Z+4, r1	; 0x04
     ea2:	17 82       	std	Z+7, r1	; 0x07
     ea4:	16 82       	std	Z+6, r1	; 0x06
     ea6:	61 31       	cpi	r22, 0x11	; 17
     ea8:	18 f0       	brcs	.+6      	; 0xeb0 <_ZN16PololuQTRSensors4initEhhh+0x2a>
     eaa:	80 e1       	ldi	r24, 0x10	; 16
     eac:	80 87       	std	Z+8, r24	; 0x08
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <_ZN16PololuQTRSensors4initEhhh+0x2e>
     eb0:	fc 01       	movw	r30, r24
     eb2:	60 87       	std	Z+8, r22	; 0x08
     eb4:	f8 01       	movw	r30, r16
     eb6:	20 8b       	std	Z+16, r18	; 0x10
     eb8:	64 2f       	mov	r22, r20
     eba:	ce 01       	movw	r24, r28
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
     ec2:	8f 81       	ldd	r24, Y+7	; 0x07
     ec4:	f8 01       	movw	r30, r16
     ec6:	81 87       	std	Z+9, r24	; 0x09
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	93 87       	std	Z+11, r25	; 0x0b
     ece:	82 87       	std	Z+10, r24	; 0x0a
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	95 87       	std	Z+13, r25	; 0x0d
     ed6:	84 87       	std	Z+12, r24	; 0x0c
     ed8:	27 96       	adiw	r28, 0x07	; 7
     eda:	e4 e0       	ldi	r30, 0x04	; 4
     edc:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__epilogue_restores__+0x1c>

00000ee0 <_ZN16PololuQTRSensors11emittersOffEv>:
     ee0:	fc 01       	movw	r30, r24
     ee2:	a4 85       	ldd	r26, Z+12	; 0x0c
     ee4:	b5 85       	ldd	r27, Z+13	; 0x0d
     ee6:	10 97       	sbiw	r26, 0x00	; 0
     ee8:	79 f0       	breq	.+30     	; 0xf08 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
     eea:	8c 91       	ld	r24, X
     eec:	91 85       	ldd	r25, Z+9	; 0x09
     eee:	89 2b       	or	r24, r25
     ef0:	8c 93       	st	X, r24
     ef2:	a2 85       	ldd	r26, Z+10	; 0x0a
     ef4:	b3 85       	ldd	r27, Z+11	; 0x0b
     ef6:	9c 91       	ld	r25, X
     ef8:	81 85       	ldd	r24, Z+9	; 0x09
     efa:	80 95       	com	r24
     efc:	89 23       	and	r24, r25
     efe:	8c 93       	st	X, r24
     f00:	88 ec       	ldi	r24, 0xC8	; 200
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 fe 06 	call	0xdfc	; 0xdfc <delay_us>
     f08:	08 95       	ret

00000f0a <_ZN16PololuQTRSensors10emittersOnEv>:
     f0a:	fc 01       	movw	r30, r24
     f0c:	a4 85       	ldd	r26, Z+12	; 0x0c
     f0e:	b5 85       	ldd	r27, Z+13	; 0x0d
     f10:	10 97       	sbiw	r26, 0x00	; 0
     f12:	71 f0       	breq	.+28     	; 0xf30 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
     f14:	8c 91       	ld	r24, X
     f16:	91 85       	ldd	r25, Z+9	; 0x09
     f18:	89 2b       	or	r24, r25
     f1a:	8c 93       	st	X, r24
     f1c:	a2 85       	ldd	r26, Z+10	; 0x0a
     f1e:	b3 85       	ldd	r27, Z+11	; 0x0b
     f20:	8c 91       	ld	r24, X
     f22:	91 85       	ldd	r25, Z+9	; 0x09
     f24:	89 2b       	or	r24, r25
     f26:	8c 93       	st	X, r24
     f28:	88 ec       	ldi	r24, 0xC8	; 200
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 fe 06 	call	0xdfc	; 0xdfc <delay_us>
     f30:	08 95       	ret

00000f32 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
     f32:	a7 e0       	ldi	r26, 0x07	; 7
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	ef e9       	ldi	r30, 0x9F	; 159
     f38:	f7 e0       	ldi	r31, 0x07	; 7
     f3a:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__prologue_saves__+0x6>
     f3e:	7c 01       	movw	r14, r24
     f40:	4b 01       	movw	r8, r22
     f42:	64 2f       	mov	r22, r20
     f44:	39 01       	movw	r6, r18
     f46:	40 2f       	mov	r20, r16
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	0e 94 43 07 	call	0xe86	; 0xe86 <_ZN16PololuQTRSensors4initEhhh>
     f4e:	87 01       	movw	r16, r14
     f50:	0f 5b       	subi	r16, 0xBF	; 191
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	f8 01       	movw	r30, r16
     f56:	10 82       	st	Z, r1
     f58:	67 01       	movw	r12, r14
     f5a:	f2 e4       	ldi	r31, 0x42	; 66
     f5c:	cf 0e       	add	r12, r31
     f5e:	d1 1c       	adc	r13, r1
     f60:	f6 01       	movw	r30, r12
     f62:	10 82       	st	Z, r1
     f64:	57 01       	movw	r10, r14
     f66:	f3 e4       	ldi	r31, 0x43	; 67
     f68:	af 0e       	add	r10, r31
     f6a:	b1 1c       	adc	r11, r1
     f6c:	f5 01       	movw	r30, r10
     f6e:	10 82       	st	Z, r1
     f70:	f7 01       	movw	r30, r14
     f72:	77 86       	std	Z+15, r7	; 0x0f
     f74:	66 86       	std	Z+14, r6	; 0x0e
     f76:	51 2c       	mov	r5, r1
     f78:	f7 01       	movw	r30, r14
     f7a:	80 85       	ldd	r24, Z+8	; 0x08
     f7c:	58 16       	cp	r5, r24
     f7e:	50 f5       	brcc	.+84     	; 0xfd4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
     f80:	65 2c       	mov	r6, r5
     f82:	71 2c       	mov	r7, r1
     f84:	f4 01       	movw	r30, r8
     f86:	e6 0d       	add	r30, r6
     f88:	f7 1d       	adc	r31, r7
     f8a:	60 81       	ld	r22, Z
     f8c:	ce 01       	movw	r24, r28
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	0e 94 06 07 	call	0xe0c	; 0xe0c <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
     f94:	2f 81       	ldd	r18, Y+7	; 0x07
     f96:	f7 01       	movw	r30, r14
     f98:	e6 0d       	add	r30, r6
     f9a:	f7 1d       	adc	r31, r7
     f9c:	21 8b       	std	Z+17, r18	; 0x11
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	f3 01       	movw	r30, r6
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	ee 0d       	add	r30, r14
     faa:	ff 1d       	adc	r31, r15
     fac:	92 a3       	std	Z+34, r25	; 0x22
     fae:	81 a3       	std	Z+33, r24	; 0x21
     fb0:	83 32       	cpi	r24, 0x23	; 35
     fb2:	91 05       	cpc	r25, r1
     fb4:	11 f4       	brne	.+4      	; 0xfba <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
     fb6:	f8 01       	movw	r30, r16
     fb8:	08 c0       	rjmp	.+16     	; 0xfca <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
     fba:	86 32       	cpi	r24, 0x26	; 38
     fbc:	91 05       	cpc	r25, r1
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
     fc0:	f6 01       	movw	r30, r12
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
     fc4:	89 97       	sbiw	r24, 0x29	; 41
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
     fc8:	f5 01       	movw	r30, r10
     fca:	80 81       	ld	r24, Z
     fcc:	82 2b       	or	r24, r18
     fce:	80 83       	st	Z, r24
     fd0:	53 94       	inc	r5
     fd2:	d2 cf       	rjmp	.-92     	; 0xf78 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
     fd4:	27 96       	adiw	r28, 0x07	; 7
     fd6:	ef e0       	ldi	r30, 0x0F	; 15
     fd8:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__epilogue_restores__+0x6>

00000fdc <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e4 ef       	ldi	r30, 0xF4	; 244
     fe2:	f7 e0       	ldi	r31, 0x07	; 7
     fe4:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__prologue_saves__+0xa>
     fe8:	ec 01       	movw	r28, r24
     fea:	5b 01       	movw	r10, r22
     fec:	6c 01       	movw	r12, r24
     fee:	81 e4       	ldi	r24, 0x41	; 65
     ff0:	c8 0e       	add	r12, r24
     ff2:	d1 1c       	adc	r13, r1
     ff4:	f6 01       	movw	r30, r12
     ff6:	80 80       	ld	r8, Z
     ff8:	7e 01       	movw	r14, r28
     ffa:	f2 e4       	ldi	r31, 0x42	; 66
     ffc:	ef 0e       	add	r14, r31
     ffe:	f1 1c       	adc	r15, r1
    1000:	f7 01       	movw	r30, r14
    1002:	70 80       	ld	r7, Z
    1004:	8e 01       	movw	r16, r28
    1006:	0d 5b       	subi	r16, 0xBD	; 189
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	f8 01       	movw	r30, r16
    100c:	90 80       	ld	r9, Z
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	98 85       	ldd	r25, Y+8	; 0x08
    1012:	89 17       	cp	r24, r25
    1014:	48 f4       	brcc	.+18     	; 0x1028 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    1016:	f5 01       	movw	r30, r10
    1018:	e8 0f       	add	r30, r24
    101a:	f1 1d       	adc	r31, r1
    101c:	e8 0f       	add	r30, r24
    101e:	f1 1d       	adc	r31, r1
    1020:	11 82       	std	Z+1, r1	; 0x01
    1022:	10 82       	st	Z, r1
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	f4 cf       	rjmp	.-24     	; 0x1010 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    1028:	84 b1       	in	r24, 0x04	; 4
    102a:	f6 01       	movw	r30, r12
    102c:	90 81       	ld	r25, Z
    102e:	89 2b       	or	r24, r25
    1030:	84 b9       	out	0x04, r24	; 4
    1032:	87 b1       	in	r24, 0x07	; 7
    1034:	f7 01       	movw	r30, r14
    1036:	90 81       	ld	r25, Z
    1038:	89 2b       	or	r24, r25
    103a:	87 b9       	out	0x07, r24	; 7
    103c:	8a b1       	in	r24, 0x0a	; 10
    103e:	f8 01       	movw	r30, r16
    1040:	90 81       	ld	r25, Z
    1042:	89 2b       	or	r24, r25
    1044:	8a b9       	out	0x0a, r24	; 10
    1046:	85 b1       	in	r24, 0x05	; 5
    1048:	f6 01       	movw	r30, r12
    104a:	90 81       	ld	r25, Z
    104c:	89 2b       	or	r24, r25
    104e:	85 b9       	out	0x05, r24	; 5
    1050:	88 b1       	in	r24, 0x08	; 8
    1052:	f7 01       	movw	r30, r14
    1054:	90 81       	ld	r25, Z
    1056:	89 2b       	or	r24, r25
    1058:	88 b9       	out	0x08, r24	; 8
    105a:	8b b1       	in	r24, 0x0b	; 11
    105c:	f8 01       	movw	r30, r16
    105e:	90 81       	ld	r25, Z
    1060:	89 2b       	or	r24, r25
    1062:	8b b9       	out	0x0b, r24	; 11
    1064:	8a e0       	ldi	r24, 0x0A	; 10
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 fe 06 	call	0xdfc	; 0xdfc <delay_us>
    106c:	94 b1       	in	r25, 0x04	; 4
    106e:	f6 01       	movw	r30, r12
    1070:	80 81       	ld	r24, Z
    1072:	80 95       	com	r24
    1074:	89 23       	and	r24, r25
    1076:	84 b9       	out	0x04, r24	; 4
    1078:	97 b1       	in	r25, 0x07	; 7
    107a:	f7 01       	movw	r30, r14
    107c:	80 81       	ld	r24, Z
    107e:	80 95       	com	r24
    1080:	89 23       	and	r24, r25
    1082:	87 b9       	out	0x07, r24	; 7
    1084:	9a b1       	in	r25, 0x0a	; 10
    1086:	f8 01       	movw	r30, r16
    1088:	80 81       	ld	r24, Z
    108a:	80 95       	com	r24
    108c:	89 23       	and	r24, r25
    108e:	8a b9       	out	0x0a, r24	; 10
    1090:	95 b1       	in	r25, 0x05	; 5
    1092:	f6 01       	movw	r30, r12
    1094:	80 81       	ld	r24, Z
    1096:	80 95       	com	r24
    1098:	89 23       	and	r24, r25
    109a:	85 b9       	out	0x05, r24	; 5
    109c:	98 b1       	in	r25, 0x08	; 8
    109e:	f7 01       	movw	r30, r14
    10a0:	80 81       	ld	r24, Z
    10a2:	80 95       	com	r24
    10a4:	89 23       	and	r24, r25
    10a6:	88 b9       	out	0x08, r24	; 8
    10a8:	9b b1       	in	r25, 0x0b	; 11
    10aa:	f8 01       	movw	r30, r16
    10ac:	80 81       	ld	r24, Z
    10ae:	80 95       	com	r24
    10b0:	89 23       	and	r24, r25
    10b2:	8b b9       	out	0x0b, r24	; 11
    10b4:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    10b8:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    10bc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    10c0:	83 60       	ori	r24, 0x03	; 3
    10c2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    10cc:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	2e 85       	ldd	r18, Y+14	; 0x0e
    10d6:	3f 85       	ldd	r19, Y+15	; 0x0f
    10d8:	82 17       	cp	r24, r18
    10da:	93 07       	cpc	r25, r19
    10dc:	20 f5       	brcc	.+72     	; 0x1126 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    10de:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    10e2:	2c 2d       	mov	r18, r12
    10e4:	24 1b       	sub	r18, r20
    10e6:	82 0f       	add	r24, r18
    10e8:	91 1d       	adc	r25, r1
    10ea:	03 b1       	in	r16, 0x03	; 3
    10ec:	08 11       	cpse	r16, r8
    10ee:	32 c0       	rjmp	.+100    	; 0x1154 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    10f0:	f6 b0       	in	r15, 0x06	; 6
    10f2:	f7 10       	cpse	r15, r7
    10f4:	2f c0       	rjmp	.+94     	; 0x1154 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    10f6:	29 b1       	in	r18, 0x09	; 9
    10f8:	29 11       	cpse	r18, r9
    10fa:	2c c0       	rjmp	.+88     	; 0x1154 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    10fc:	10 c0       	rjmp	.+32     	; 0x111e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    10fe:	21 2f       	mov	r18, r17
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	a9 01       	movw	r20, r18
    1104:	44 0f       	add	r20, r20
    1106:	55 1f       	adc	r21, r21
    1108:	f5 01       	movw	r30, r10
    110a:	e4 0f       	add	r30, r20
    110c:	f5 1f       	adc	r31, r21
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	67 2b       	or	r22, r23
    1114:	21 f1       	breq	.+72     	; 0x115e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1116:	1f 5f       	subi	r17, 0xFF	; 255
    1118:	28 85       	ldd	r18, Y+8	; 0x08
    111a:	12 17       	cp	r17, r18
    111c:	80 f3       	brcs	.-32     	; 0x10fe <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    111e:	7f 2c       	mov	r7, r15
    1120:	80 2e       	mov	r8, r16
    1122:	4c 2d       	mov	r20, r12
    1124:	d7 cf       	rjmp	.-82     	; 0x10d4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1126:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    112a:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	88 85       	ldd	r24, Y+8	; 0x08
    1132:	28 17       	cp	r18, r24
    1134:	30 f5       	brcc	.+76     	; 0x1182 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1136:	f5 01       	movw	r30, r10
    1138:	e2 0f       	add	r30, r18
    113a:	f1 1d       	adc	r31, r1
    113c:	e2 0f       	add	r30, r18
    113e:	f1 1d       	adc	r31, r1
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	89 2b       	or	r24, r25
    1146:	21 f4       	brne	.+8      	; 0x1150 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1148:	8e 85       	ldd	r24, Y+14	; 0x0e
    114a:	9f 85       	ldd	r25, Y+15	; 0x0f
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	80 83       	st	Z, r24
    1150:	2f 5f       	subi	r18, 0xFF	; 255
    1152:	ee cf       	rjmp	.-36     	; 0x1130 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1154:	03 b1       	in	r16, 0x03	; 3
    1156:	f6 b0       	in	r15, 0x06	; 6
    1158:	99 b0       	in	r9, 0x09	; 9
    115a:	10 e0       	ldi	r17, 0x00	; 0
    115c:	dd cf       	rjmp	.-70     	; 0x1118 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    115e:	de 01       	movw	r26, r28
    1160:	a4 0f       	add	r26, r20
    1162:	b5 1f       	adc	r27, r21
    1164:	91 96       	adiw	r26, 0x21	; 33
    1166:	0d 90       	ld	r0, X+
    1168:	bc 91       	ld	r27, X
    116a:	a0 2d       	mov	r26, r0
    116c:	4c 91       	ld	r20, X
    116e:	de 01       	movw	r26, r28
    1170:	a2 0f       	add	r26, r18
    1172:	b3 1f       	adc	r27, r19
    1174:	51 96       	adiw	r26, 0x11	; 17
    1176:	2c 91       	ld	r18, X
    1178:	42 23       	and	r20, r18
    117a:	69 f6       	brne	.-102    	; 0x1116 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	80 83       	st	Z, r24
    1180:	ca cf       	rjmp	.-108    	; 0x1116 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	ed e0       	ldi	r30, 0x0D	; 13
    1188:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__epilogue_restores__+0xa>

0000118c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	fc 01       	movw	r30, r24
    119a:	9b 01       	movw	r18, r22
    119c:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    11a0:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    11a4:	47 b1       	in	r20, 0x07	; 7
    11a6:	18 b1       	in	r17, 0x08	; 8
    11a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    11ac:	86 fd       	sbrc	r24, 6
    11ae:	fc cf       	rjmp	.-8      	; 0x11a8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 85       	ldd	r25, Z+8	; 0x08
    11b4:	89 17       	cp	r24, r25
    11b6:	48 f4       	brcc	.+18     	; 0x11ca <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    11b8:	d9 01       	movw	r26, r18
    11ba:	a8 0f       	add	r26, r24
    11bc:	b1 1d       	adc	r27, r1
    11be:	a8 0f       	add	r26, r24
    11c0:	b1 1d       	adc	r27, r1
    11c2:	1d 92       	st	X+, r1
    11c4:	1c 92       	st	X, r1
    11c6:	8f 5f       	subi	r24, 0xFF	; 255
    11c8:	f4 cf       	rjmp	.-24     	; 0x11b2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    11ca:	97 b1       	in	r25, 0x07	; 7
    11cc:	82 a1       	ldd	r24, Z+34	; 0x22
    11ce:	80 95       	com	r24
    11d0:	89 23       	and	r24, r25
    11d2:	87 b9       	out	0x07, r24	; 7
    11d4:	98 b1       	in	r25, 0x08	; 8
    11d6:	82 a1       	ldd	r24, Z+34	; 0x22
    11d8:	80 95       	com	r24
    11da:	89 23       	and	r24, r25
    11dc:	88 b9       	out	0x08, r24	; 8
    11de:	87 e8       	ldi	r24, 0x87	; 135
    11e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    11e4:	e1 2c       	mov	r14, r1
    11e6:	81 a1       	ldd	r24, Z+33	; 0x21
    11e8:	e8 16       	cp	r14, r24
    11ea:	10 f0       	brcs	.+4      	; 0x11f0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    11ec:	e1 2c       	mov	r14, r1
    11ee:	29 c0       	rjmp	.+82     	; 0x1242 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	80 85       	ldd	r24, Z+8	; 0x08
    11f4:	58 17       	cp	r21, r24
    11f6:	18 f5       	brcc	.+70     	; 0x123e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    11f8:	a5 2f       	mov	r26, r21
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	ef 01       	movw	r28, r30
    11fe:	ca 0f       	add	r28, r26
    1200:	db 1f       	adc	r29, r27
    1202:	89 89       	ldd	r24, Y+17	; 0x11
    1204:	80 64       	ori	r24, 0x40	; 64
    1206:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    120a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    120e:	80 64       	ori	r24, 0x40	; 64
    1210:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1214:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1218:	86 fd       	sbrc	r24, 6
    121a:	fc cf       	rjmp	.-8      	; 0x1214 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    121c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1220:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1224:	aa 0f       	add	r26, r26
    1226:	bb 1f       	adc	r27, r27
    1228:	a2 0f       	add	r26, r18
    122a:	b3 1f       	adc	r27, r19
    122c:	8d 91       	ld	r24, X+
    122e:	9c 91       	ld	r25, X
    1230:	11 97       	sbiw	r26, 0x01	; 1
    1232:	86 0f       	add	r24, r22
    1234:	97 1f       	adc	r25, r23
    1236:	8d 93       	st	X+, r24
    1238:	9c 93       	st	X, r25
    123a:	5f 5f       	subi	r21, 0xFF	; 255
    123c:	da cf       	rjmp	.-76     	; 0x11f2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    123e:	e3 94       	inc	r14
    1240:	d2 cf       	rjmp	.-92     	; 0x11e6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1242:	80 85       	ldd	r24, Z+8	; 0x08
    1244:	e8 16       	cp	r14, r24
    1246:	a0 f4       	brcc	.+40     	; 0x1270 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1248:	e9 01       	movw	r28, r18
    124a:	ce 0d       	add	r28, r14
    124c:	d1 1d       	adc	r29, r1
    124e:	ce 0d       	add	r28, r14
    1250:	d1 1d       	adc	r29, r1
    1252:	61 a1       	ldd	r22, Z+33	; 0x21
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	cb 01       	movw	r24, r22
    1258:	95 95       	asr	r25
    125a:	87 95       	ror	r24
    125c:	a8 81       	ld	r26, Y
    125e:	b9 81       	ldd	r27, Y+1	; 0x01
    1260:	8a 0f       	add	r24, r26
    1262:	9b 1f       	adc	r25, r27
    1264:	0e 94 05 0c 	call	0x180a	; 0x180a <__udivmodhi4>
    1268:	79 83       	std	Y+1, r23	; 0x01
    126a:	68 83       	st	Y, r22
    126c:	e3 94       	inc	r14
    126e:	e9 cf       	rjmp	.-46     	; 0x1242 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1270:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1274:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1278:	18 b9       	out	0x08, r17	; 8
    127a:	47 b9       	out	0x07, r20	; 7
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	e6 e0       	ldi	r30, 0x06	; 6
    1282:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__epilogue_restores__+0x18>

00001286 <_ZN16PololuQTRSensors4readEPjh>:
    1286:	a0 e2       	ldi	r26, 0x20	; 32
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e9 e4       	ldi	r30, 0x49	; 73
    128c:	f9 e0       	ldi	r31, 0x09	; 9
    128e:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__prologue_saves__+0x16>
    1292:	8c 01       	movw	r16, r24
    1294:	7b 01       	movw	r14, r22
    1296:	d4 2e       	mov	r13, r20
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	84 0f       	add	r24, r20
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	18 f4       	brcc	.+6      	; 0x12a6 <_ZN16PololuQTRSensors4readEPjh+0x20>
    12a0:	c8 01       	movw	r24, r16
    12a2:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN16PololuQTRSensors10emittersOnEv>
    12a6:	d8 01       	movw	r26, r16
    12a8:	50 96       	adiw	r26, 0x10	; 16
    12aa:	8c 91       	ld	r24, X
    12ac:	b7 01       	movw	r22, r14
    12ae:	81 11       	cpse	r24, r1
    12b0:	10 c0       	rjmp	.+32     	; 0x12d2 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    12b2:	c8 01       	movw	r24, r16
    12b4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    12b8:	c8 01       	movw	r24, r16
    12ba:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN16PololuQTRSensors11emittersOffEv>
    12be:	b2 e0       	ldi	r27, 0x02	; 2
    12c0:	db 12       	cpse	r13, r27
    12c2:	3a c0       	rjmp	.+116    	; 0x1338 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    12c4:	be 01       	movw	r22, r28
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	c8 01       	movw	r24, r16
    12cc:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    12d0:	0f c0       	rjmp	.+30     	; 0x12f0 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    12d2:	c8 01       	movw	r24, r16
    12d4:	0e 94 c6 08 	call	0x118c	; 0x118c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    12d8:	c8 01       	movw	r24, r16
    12da:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN16PololuQTRSensors11emittersOffEv>
    12de:	e2 e0       	ldi	r30, 0x02	; 2
    12e0:	de 12       	cpse	r13, r30
    12e2:	2a c0       	rjmp	.+84     	; 0x1338 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    12e4:	be 01       	movw	r22, r28
    12e6:	6f 5f       	subi	r22, 0xFF	; 255
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	c8 01       	movw	r24, r16
    12ec:	0e 94 c6 08 	call	0x118c	; 0x118c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	f8 01       	movw	r30, r16
    12f4:	80 85       	ldd	r24, Z+8	; 0x08
    12f6:	48 17       	cp	r20, r24
    12f8:	f8 f4       	brcc	.+62     	; 0x1338 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    12fa:	84 2f       	mov	r24, r20
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	f7 01       	movw	r30, r14
    1304:	e8 0f       	add	r30, r24
    1306:	f9 1f       	adc	r31, r25
    1308:	21 e0       	ldi	r18, 0x01	; 1
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	2c 0f       	add	r18, r28
    130e:	3d 1f       	adc	r19, r29
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	d8 01       	movw	r26, r16
    1316:	1e 96       	adiw	r26, 0x0e	; 14
    1318:	2d 91       	ld	r18, X+
    131a:	3c 91       	ld	r19, X
    131c:	1f 97       	sbiw	r26, 0x0f	; 15
    131e:	dc 01       	movw	r26, r24
    1320:	8d 91       	ld	r24, X+
    1322:	9c 91       	ld	r25, X
    1324:	28 1b       	sub	r18, r24
    1326:	39 0b       	sbc	r19, r25
    1328:	80 81       	ld	r24, Z
    132a:	91 81       	ldd	r25, Z+1	; 0x01
    132c:	82 0f       	add	r24, r18
    132e:	93 1f       	adc	r25, r19
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	80 83       	st	Z, r24
    1334:	4f 5f       	subi	r20, 0xFF	; 255
    1336:	dd cf       	rjmp	.-70     	; 0x12f2 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1338:	a0 96       	adiw	r28, 0x20	; 32
    133a:	e7 e0       	ldi	r30, 0x07	; 7
    133c:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__epilogue_restores__+0x16>

00001340 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1340:	2f 92       	push	r2
    1342:	3f 92       	push	r3
    1344:	5f 92       	push	r5
    1346:	6f 92       	push	r6
    1348:	7f 92       	push	r7
    134a:	8f 92       	push	r8
    134c:	9f 92       	push	r9
    134e:	af 92       	push	r10
    1350:	bf 92       	push	r11
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	c0 56       	subi	r28, 0x60	; 96
    1368:	d1 09       	sbc	r29, r1
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	8c 01       	movw	r16, r24
    1376:	4b 01       	movw	r8, r22
    1378:	5a 01       	movw	r10, r20
    137a:	52 2e       	mov	r5, r18
    137c:	da 01       	movw	r26, r20
    137e:	8d 91       	ld	r24, X+
    1380:	9c 91       	ld	r25, X
    1382:	89 2b       	or	r24, r25
    1384:	31 f0       	breq	.+12     	; 0x1392 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1386:	f4 01       	movw	r30, r8
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	89 2b       	or	r24, r25
    138e:	f1 f4       	brne	.+60     	; 0x13cc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1390:	24 c0       	rjmp	.+72     	; 0x13da <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1392:	d8 01       	movw	r26, r16
    1394:	18 96       	adiw	r26, 0x08	; 8
    1396:	8c 91       	ld	r24, X
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <malloc>
    13a2:	f5 01       	movw	r30, r10
    13a4:	91 83       	std	Z+1, r25	; 0x01
    13a6:	80 83       	st	Z, r24
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	09 f4       	brne	.+2      	; 0x13ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    13ac:	b1 c0       	rjmp	.+354    	; 0x1510 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    13ae:	fc 01       	movw	r30, r24
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	d8 01       	movw	r26, r16
    13b6:	18 96       	adiw	r26, 0x08	; 8
    13b8:	8c 91       	ld	r24, X
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	28 17       	cp	r18, r24
    13be:	39 07       	cpc	r19, r25
    13c0:	14 f7       	brge	.-60     	; 0x1386 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    13c2:	11 92       	st	Z+, r1
    13c4:	11 92       	st	Z+, r1
    13c6:	2f 5f       	subi	r18, 0xFF	; 255
    13c8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ca:	f4 cf       	rjmp	.-24     	; 0x13b4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    13cc:	e1 2c       	mov	r14, r1
    13ce:	f1 2c       	mov	r15, r1
    13d0:	6e 01       	movw	r12, r28
    13d2:	b1 e2       	ldi	r27, 0x21	; 33
    13d4:	cb 0e       	add	r12, r27
    13d6:	d1 1c       	adc	r13, r1
    13d8:	21 c0       	rjmp	.+66     	; 0x141c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    13da:	f8 01       	movw	r30, r16
    13dc:	80 85       	ldd	r24, Z+8	; 0x08
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0e 94 b9 0c 	call	0x1972	; 0x1972 <malloc>
    13e8:	d4 01       	movw	r26, r8
    13ea:	8d 93       	st	X+, r24
    13ec:	9c 93       	st	X, r25
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    13f2:	8e c0       	rjmp	.+284    	; 0x1510 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    13f4:	fc 01       	movw	r30, r24
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	d8 01       	movw	r26, r16
    13fc:	18 96       	adiw	r26, 0x08	; 8
    13fe:	8c 91       	ld	r24, X
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	28 17       	cp	r18, r24
    1404:	39 07       	cpc	r19, r25
    1406:	14 f7       	brge	.-60     	; 0x13cc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1408:	d8 01       	movw	r26, r16
    140a:	1e 96       	adiw	r26, 0x0e	; 14
    140c:	8d 91       	ld	r24, X+
    140e:	9c 91       	ld	r25, X
    1410:	1f 97       	sbiw	r26, 0x0f	; 15
    1412:	81 93       	st	Z+, r24
    1414:	91 93       	st	Z+, r25
    1416:	2f 5f       	subi	r18, 0xFF	; 255
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
    141a:	ef cf       	rjmp	.-34     	; 0x13fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    141c:	45 2d       	mov	r20, r5
    141e:	be 01       	movw	r22, r28
    1420:	6f 5b       	subi	r22, 0xBF	; 191
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	c8 01       	movw	r24, r16
    1426:	0e 94 43 09 	call	0x1286	; 0x1286 <_ZN16PololuQTRSensors4readEPjh>
    142a:	f8 01       	movw	r30, r16
    142c:	60 84       	ldd	r6, Z+8	; 0x08
    142e:	71 2c       	mov	r7, r1
    1430:	fe 01       	movw	r30, r28
    1432:	ef 5b       	subi	r30, 0xBF	; 191
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	c6 01       	movw	r24, r12
    1438:	9e 01       	movw	r18, r28
    143a:	2f 5f       	subi	r18, 0xFF	; 255
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	19 01       	movw	r2, r18
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	26 15       	cp	r18, r6
    1446:	37 05       	cpc	r19, r7
    1448:	4c f5       	brge	.+82     	; 0x149c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    144a:	e1 14       	cp	r14, r1
    144c:	f1 04       	cpc	r15, r1
    144e:	89 f0       	breq	.+34     	; 0x1472 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1450:	dc 01       	movw	r26, r24
    1452:	6d 91       	ld	r22, X+
    1454:	7c 91       	ld	r23, X
    1456:	40 81       	ld	r20, Z
    1458:	51 81       	ldd	r21, Z+1	; 0x01
    145a:	64 17       	cp	r22, r20
    145c:	75 07       	cpc	r23, r21
    145e:	48 f0       	brcs	.+18     	; 0x1472 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1460:	d1 01       	movw	r26, r2
    1462:	6d 91       	ld	r22, X+
    1464:	7c 91       	ld	r23, X
    1466:	40 81       	ld	r20, Z
    1468:	51 81       	ldd	r21, Z+1	; 0x01
    146a:	46 17       	cp	r20, r22
    146c:	57 07       	cpc	r21, r23
    146e:	48 f0       	brcs	.+18     	; 0x1482 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1470:	0d c0       	rjmp	.+26     	; 0x148c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1472:	40 81       	ld	r20, Z
    1474:	51 81       	ldd	r21, Z+1	; 0x01
    1476:	dc 01       	movw	r26, r24
    1478:	4d 93       	st	X+, r20
    147a:	5c 93       	st	X, r21
    147c:	e1 14       	cp	r14, r1
    147e:	f1 04       	cpc	r15, r1
    1480:	79 f7       	brne	.-34     	; 0x1460 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1482:	40 81       	ld	r20, Z
    1484:	51 81       	ldd	r21, Z+1	; 0x01
    1486:	d1 01       	movw	r26, r2
    1488:	4d 93       	st	X+, r20
    148a:	5c 93       	st	X, r21
    148c:	2f 5f       	subi	r18, 0xFF	; 255
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	b2 e0       	ldi	r27, 0x02	; 2
    1492:	2b 0e       	add	r2, r27
    1494:	31 1c       	adc	r3, r1
    1496:	32 96       	adiw	r30, 0x02	; 2
    1498:	02 96       	adiw	r24, 0x02	; 2
    149a:	d4 cf       	rjmp	.-88     	; 0x1444 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    149c:	ef ef       	ldi	r30, 0xFF	; 255
    149e:	ee 1a       	sub	r14, r30
    14a0:	fe 0a       	sbc	r15, r30
    14a2:	fa e0       	ldi	r31, 0x0A	; 10
    14a4:	ef 16       	cp	r14, r31
    14a6:	f1 04       	cpc	r15, r1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    14aa:	b8 cf       	rjmp	.-144    	; 0x141c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    14ac:	9e 01       	movw	r18, r28
    14ae:	2f 5f       	subi	r18, 0xFF	; 255
    14b0:	3f 4f       	sbci	r19, 0xFF	; 255
    14b2:	79 01       	movw	r14, r18
    14b4:	36 01       	movw	r6, r12
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	f8 01       	movw	r30, r16
    14bc:	20 85       	ldd	r18, Z+8	; 0x08
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	82 17       	cp	r24, r18
    14c2:	93 07       	cpc	r25, r19
    14c4:	2c f5       	brge	.+74     	; 0x1510 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    14c6:	d7 01       	movw	r26, r14
    14c8:	2d 91       	ld	r18, X+
    14ca:	3d 91       	ld	r19, X+
    14cc:	7d 01       	movw	r14, r26
    14ce:	b3 01       	movw	r22, r6
    14d0:	6c 19       	sub	r22, r12
    14d2:	7d 09       	sbc	r23, r13
    14d4:	d5 01       	movw	r26, r10
    14d6:	ed 91       	ld	r30, X+
    14d8:	fc 91       	ld	r31, X
    14da:	e6 0f       	add	r30, r22
    14dc:	f7 1f       	adc	r31, r23
    14de:	40 81       	ld	r20, Z
    14e0:	51 81       	ldd	r21, Z+1	; 0x01
    14e2:	42 17       	cp	r20, r18
    14e4:	53 07       	cpc	r21, r19
    14e6:	10 f4       	brcc	.+4      	; 0x14ec <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    14e8:	31 83       	std	Z+1, r19	; 0x01
    14ea:	20 83       	st	Z, r18
    14ec:	f3 01       	movw	r30, r6
    14ee:	21 91       	ld	r18, Z+
    14f0:	31 91       	ld	r19, Z+
    14f2:	3f 01       	movw	r6, r30
    14f4:	d4 01       	movw	r26, r8
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	e6 0f       	add	r30, r22
    14fc:	f7 1f       	adc	r31, r23
    14fe:	40 81       	ld	r20, Z
    1500:	51 81       	ldd	r21, Z+1	; 0x01
    1502:	24 17       	cp	r18, r20
    1504:	35 07       	cpc	r19, r21
    1506:	10 f4       	brcc	.+4      	; 0x150c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1508:	31 83       	std	Z+1, r19	; 0x01
    150a:	20 83       	st	Z, r18
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	d5 cf       	rjmp	.-86     	; 0x14ba <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1510:	c0 5a       	subi	r28, 0xA0	; 160
    1512:	df 4f       	sbci	r29, 0xFF	; 255
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	df 90       	pop	r13
    152c:	cf 90       	pop	r12
    152e:	bf 90       	pop	r11
    1530:	af 90       	pop	r10
    1532:	9f 90       	pop	r9
    1534:	8f 90       	pop	r8
    1536:	7f 90       	pop	r7
    1538:	6f 90       	pop	r6
    153a:	5f 90       	pop	r5
    153c:	3f 90       	pop	r3
    153e:	2f 90       	pop	r2
    1540:	08 95       	ret

00001542 <_ZN16PololuQTRSensors9calibrateEh>:
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
    154a:	16 2f       	mov	r17, r22
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	86 0f       	add	r24, r22
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	18 f0       	brcs	.+6      	; 0x155a <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1554:	66 23       	and	r22, r22
    1556:	59 f0       	breq	.+22     	; 0x156e <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1558:	14 c0       	rjmp	.+40     	; 0x1582 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	ae 01       	movw	r20, r28
    155e:	4e 5f       	subi	r20, 0xFE	; 254
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	be 01       	movw	r22, r28
    1564:	ce 01       	movw	r24, r28
    1566:	0e 94 a0 09 	call	0x1340	; 0x1340 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    156a:	12 30       	cpi	r17, 0x02	; 2
    156c:	51 f4       	brne	.+20     	; 0x1582 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    156e:	ae 01       	movw	r20, r28
    1570:	4a 5f       	subi	r20, 0xFA	; 250
    1572:	5f 4f       	sbci	r21, 0xFF	; 255
    1574:	be 01       	movw	r22, r28
    1576:	6c 5f       	subi	r22, 0xFC	; 252
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	ce 01       	movw	r24, r28
    157e:	0e 94 a0 09 	call	0x1340	; 0x1340 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	08 95       	ret

0000158a <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb ec       	ldi	r30, 0xCB	; 203
    1590:	fa e0       	ldi	r31, 0x0A	; 10
    1592:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__prologue_saves__+0x12>
    1596:	ec 01       	movw	r28, r24
    1598:	8b 01       	movw	r16, r22
    159a:	b4 2e       	mov	r11, r20
    159c:	84 2f       	mov	r24, r20
    159e:	8d 7f       	andi	r24, 0xFD	; 253
    15a0:	51 f4       	brne	.+20     	; 0x15b6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	9d 81       	ldd	r25, Y+5	; 0x05
    15a6:	89 2b       	or	r24, r25
    15a8:	09 f4       	brne	.+2      	; 0x15ac <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    15aa:	97 c0       	rjmp	.+302    	; 0x16da <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    15ac:	8e 81       	ldd	r24, Y+6	; 0x06
    15ae:	9f 81       	ldd	r25, Y+7	; 0x07
    15b0:	89 2b       	or	r24, r25
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    15b4:	92 c0       	rjmp	.+292    	; 0x16da <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	8b 0d       	add	r24, r11
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	50 f4       	brcc	.+20     	; 0x15d2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    15be:	88 81       	ld	r24, Y
    15c0:	99 81       	ldd	r25, Y+1	; 0x01
    15c2:	89 2b       	or	r24, r25
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    15c6:	89 c0       	rjmp	.+274    	; 0x16da <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	89 2b       	or	r24, r25
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    15d0:	84 c0       	rjmp	.+264    	; 0x16da <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    15d2:	4b 2d       	mov	r20, r11
    15d4:	b8 01       	movw	r22, r16
    15d6:	ce 01       	movw	r24, r28
    15d8:	0e 94 43 09 	call	0x1286	; 0x1286 <_ZN16PololuQTRSensors4readEPjh>
    15dc:	78 01       	movw	r14, r16
    15de:	00 e0       	ldi	r16, 0x00	; 0
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	c1 2c       	mov	r12, r1
    15e4:	d1 2c       	mov	r13, r1
    15e6:	88 85       	ldd	r24, Y+8	; 0x08
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	c8 16       	cp	r12, r24
    15ec:	d9 06       	cpc	r13, r25
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    15f0:	74 c0       	rjmp	.+232    	; 0x16da <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	b8 12       	cpse	r11, r24
    15f6:	0a c0       	rjmp	.+20     	; 0x160c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    15f8:	ea 81       	ldd	r30, Y+2	; 0x02
    15fa:	fb 81       	ldd	r31, Y+3	; 0x03
    15fc:	e0 0f       	add	r30, r16
    15fe:	f1 1f       	adc	r31, r17
    1600:	01 90       	ld	r0, Z+
    1602:	f0 81       	ld	r31, Z
    1604:	e0 2d       	mov	r30, r0
    1606:	a8 81       	ld	r26, Y
    1608:	b9 81       	ldd	r27, Y+1	; 0x01
    160a:	0d c0       	rjmp	.+26     	; 0x1626 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	2e 81       	ldd	r18, Y+6	; 0x06
    1612:	3f 81       	ldd	r19, Y+7	; 0x07
    1614:	b1 10       	cpse	r11, r1
    1616:	0c c0       	rjmp	.+24     	; 0x1630 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    1618:	f9 01       	movw	r30, r18
    161a:	e0 0f       	add	r30, r16
    161c:	f1 1f       	adc	r31, r17
    161e:	01 90       	ld	r0, Z+
    1620:	f0 81       	ld	r31, Z
    1622:	e0 2d       	mov	r30, r0
    1624:	dc 01       	movw	r26, r24
    1626:	a0 0f       	add	r26, r16
    1628:	b1 1f       	adc	r27, r17
    162a:	8d 91       	ld	r24, X+
    162c:	9c 91       	ld	r25, X
    162e:	28 c0       	rjmp	.+80     	; 0x1680 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1630:	fc 01       	movw	r30, r24
    1632:	e0 0f       	add	r30, r16
    1634:	f1 1f       	adc	r31, r17
    1636:	40 81       	ld	r20, Z
    1638:	51 81       	ldd	r21, Z+1	; 0x01
    163a:	e8 81       	ld	r30, Y
    163c:	f9 81       	ldd	r31, Y+1	; 0x01
    163e:	e0 0f       	add	r30, r16
    1640:	f1 1f       	adc	r31, r17
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	ee 85       	ldd	r30, Y+14	; 0x0e
    1648:	ff 85       	ldd	r31, Y+15	; 0x0f
    164a:	48 17       	cp	r20, r24
    164c:	59 07       	cpc	r21, r25
    164e:	10 f4       	brcc	.+4      	; 0x1654 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    1650:	cf 01       	movw	r24, r30
    1652:	04 c0       	rjmp	.+8      	; 0x165c <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    1654:	8e 0f       	add	r24, r30
    1656:	9f 1f       	adc	r25, r31
    1658:	84 1b       	sub	r24, r20
    165a:	95 0b       	sbc	r25, r21
    165c:	d9 01       	movw	r26, r18
    165e:	a0 0f       	add	r26, r16
    1660:	b1 1f       	adc	r27, r17
    1662:	2d 91       	ld	r18, X+
    1664:	3c 91       	ld	r19, X
    1666:	aa 81       	ldd	r26, Y+2	; 0x02
    1668:	bb 81       	ldd	r27, Y+3	; 0x03
    166a:	a0 0f       	add	r26, r16
    166c:	b1 1f       	adc	r27, r17
    166e:	4d 91       	ld	r20, X+
    1670:	5c 91       	ld	r21, X
    1672:	24 17       	cp	r18, r20
    1674:	35 07       	cpc	r19, r21
    1676:	20 f0       	brcs	.+8      	; 0x1680 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1678:	e4 0f       	add	r30, r20
    167a:	f5 1f       	adc	r31, r21
    167c:	e2 1b       	sub	r30, r18
    167e:	f3 0b       	sbc	r31, r19
    1680:	e8 1b       	sub	r30, r24
    1682:	f9 0b       	sbc	r31, r25
    1684:	a9 f0       	breq	.+42     	; 0x16b0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    1686:	d7 01       	movw	r26, r14
    1688:	2d 91       	ld	r18, X+
    168a:	3c 91       	ld	r19, X
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	28 1b       	sub	r18, r24
    1692:	39 0b       	sbc	r19, r25
    1694:	41 09       	sbc	r20, r1
    1696:	51 09       	sbc	r21, r1
    1698:	a8 ee       	ldi	r26, 0xE8	; 232
    169a:	b3 e0       	ldi	r27, 0x03	; 3
    169c:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
    16a0:	9f 01       	movw	r18, r30
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__divmodsi4>
    16aa:	37 fd       	sbrc	r19, 7
    16ac:	0a c0       	rjmp	.+20     	; 0x16c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	29 3e       	cpi	r18, 0xE9	; 233
    16b6:	b3 e0       	ldi	r27, 0x03	; 3
    16b8:	3b 07       	cpc	r19, r27
    16ba:	2c f0       	brlt	.+10     	; 0x16c6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    16bc:	28 ee       	ldi	r18, 0xE8	; 232
    16be:	33 e0       	ldi	r19, 0x03	; 3
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	f7 01       	movw	r30, r14
    16c8:	21 93       	st	Z+, r18
    16ca:	31 93       	st	Z+, r19
    16cc:	7f 01       	movw	r14, r30
    16ce:	ff ef       	ldi	r31, 0xFF	; 255
    16d0:	cf 1a       	sub	r12, r31
    16d2:	df 0a       	sbc	r13, r31
    16d4:	0e 5f       	subi	r16, 0xFE	; 254
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	86 cf       	rjmp	.-244    	; 0x15e6 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	e9 e0       	ldi	r30, 0x09	; 9
    16e0:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__epilogue_restores__+0x12>

000016e4 <_ZN16PololuQTRSensors8readLineEPjhh>:
    16e4:	a0 e0       	ldi	r26, 0x00	; 0
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e8 e7       	ldi	r30, 0x78	; 120
    16ea:	fb e0       	ldi	r31, 0x0B	; 11
    16ec:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__prologue_saves__>
    16f0:	ec 01       	movw	r28, r24
    16f2:	8b 01       	movw	r16, r22
    16f4:	82 2e       	mov	r8, r18
    16f6:	0e 94 c5 0a 	call	0x158a	; 0x158a <_ZN16PololuQTRSensors14readCalibratedEPjh>
    16fa:	28 84       	ldd	r2, Y+8	; 0x08
    16fc:	e8 01       	movw	r28, r16
    16fe:	41 2c       	mov	r4, r1
    1700:	51 2c       	mov	r5, r1
    1702:	32 01       	movw	r6, r4
    1704:	00 e0       	ldi	r16, 0x00	; 0
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	c1 2c       	mov	r12, r1
    170a:	d1 2c       	mov	r13, r1
    170c:	76 01       	movw	r14, r12
    170e:	31 2c       	mov	r3, r1
    1710:	91 2c       	mov	r9, r1
    1712:	58 ee       	ldi	r21, 0xE8	; 232
    1714:	a5 2e       	mov	r10, r21
    1716:	53 e0       	ldi	r21, 0x03	; 3
    1718:	b5 2e       	mov	r11, r21
    171a:	92 14       	cp	r9, r2
    171c:	21 f1       	breq	.+72     	; 0x1766 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    171e:	e9 91       	ld	r30, Y+
    1720:	f9 91       	ld	r31, Y+
    1722:	88 20       	and	r8, r8
    1724:	21 f0       	breq	.+8      	; 0x172e <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    1726:	c5 01       	movw	r24, r10
    1728:	8e 1b       	sub	r24, r30
    172a:	9f 0b       	sbc	r25, r31
    172c:	fc 01       	movw	r30, r24
    172e:	e9 3c       	cpi	r30, 0xC9	; 201
    1730:	f1 05       	cpc	r31, r1
    1732:	24 f4       	brge	.+8      	; 0x173c <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    1734:	e3 33       	cpi	r30, 0x33	; 51
    1736:	f1 05       	cpc	r31, r1
    1738:	74 f0       	brlt	.+28     	; 0x1756 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    173c:	33 24       	eor	r3, r3
    173e:	33 94       	inc	r3
    1740:	df 01       	movw	r26, r30
    1742:	a3 01       	movw	r20, r6
    1744:	92 01       	movw	r18, r4
    1746:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__mulshisi3>
    174a:	c6 0e       	add	r12, r22
    174c:	d7 1e       	adc	r13, r23
    174e:	e8 1e       	adc	r14, r24
    1750:	f9 1e       	adc	r15, r25
    1752:	0e 0f       	add	r16, r30
    1754:	1f 1f       	adc	r17, r31
    1756:	93 94       	inc	r9
    1758:	98 ee       	ldi	r25, 0xE8	; 232
    175a:	49 0e       	add	r4, r25
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	59 1e       	adc	r5, r25
    1760:	61 1c       	adc	r6, r1
    1762:	71 1c       	adc	r7, r1
    1764:	da cf       	rjmp	.-76     	; 0x171a <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    1766:	31 10       	cpse	r3, r1
    1768:	1e c0       	rjmp	.+60     	; 0x17a6 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    176a:	49 2d       	mov	r20, r9
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	41 50       	subi	r20, 0x01	; 1
    1770:	51 09       	sbc	r21, r1
    1772:	24 ef       	ldi	r18, 0xF4	; 244
    1774:	31 e0       	ldi	r19, 0x01	; 1
    1776:	42 9f       	mul	r20, r18
    1778:	c0 01       	movw	r24, r0
    177a:	43 9f       	mul	r20, r19
    177c:	90 0d       	add	r25, r0
    177e:	52 9f       	mul	r21, r18
    1780:	90 0d       	add	r25, r0
    1782:	11 24       	eor	r1, r1
    1784:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    1788:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    178c:	28 17       	cp	r18, r24
    178e:	39 07       	cpc	r19, r25
    1790:	b4 f0       	brlt	.+44     	; 0x17be <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    1792:	88 ee       	ldi	r24, 0xE8	; 232
    1794:	93 e0       	ldi	r25, 0x03	; 3
    1796:	48 9f       	mul	r20, r24
    1798:	90 01       	movw	r18, r0
    179a:	49 9f       	mul	r20, r25
    179c:	30 0d       	add	r19, r0
    179e:	58 9f       	mul	r21, r24
    17a0:	30 0d       	add	r19, r0
    17a2:	11 24       	eor	r1, r1
    17a4:	0e c0       	rjmp	.+28     	; 0x17c2 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    17a6:	98 01       	movw	r18, r16
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	c7 01       	movw	r24, r14
    17ae:	b6 01       	movw	r22, r12
    17b0:	0e 94 19 0c 	call	0x1832	; 0x1832 <__udivmodsi4>
    17b4:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    17b8:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	c9 01       	movw	r24, r18
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	e2 e1       	ldi	r30, 0x12	; 18
    17ca:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__epilogue_restores__>

000017ce <_ZN16PololuQTRSensorsD1Ev>:
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	11 f0       	breq	.+4      	; 0x17e0 <_ZN16PololuQTRSensorsD1Ev+0x12>
    17dc:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <free>
    17e0:	8e 81       	ldd	r24, Y+6	; 0x06
    17e2:	9f 81       	ldd	r25, Y+7	; 0x07
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	11 f0       	breq	.+4      	; 0x17ec <_ZN16PololuQTRSensorsD1Ev+0x1e>
    17e8:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <free>
    17ec:	88 81       	ld	r24, Y
    17ee:	99 81       	ldd	r25, Y+1	; 0x01
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	11 f0       	breq	.+4      	; 0x17f8 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    17f4:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <free>
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	9d 81       	ldd	r25, Y+5	; 0x05
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	11 f0       	breq	.+4      	; 0x1804 <_ZN16PololuQTRSensorsD1Ev+0x36>
    1800:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <free>
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <__udivmodhi4>:
    180a:	aa 1b       	sub	r26, r26
    180c:	bb 1b       	sub	r27, r27
    180e:	51 e1       	ldi	r21, 0x11	; 17
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <__udivmodhi4_ep>

00001812 <__udivmodhi4_loop>:
    1812:	aa 1f       	adc	r26, r26
    1814:	bb 1f       	adc	r27, r27
    1816:	a6 17       	cp	r26, r22
    1818:	b7 07       	cpc	r27, r23
    181a:	10 f0       	brcs	.+4      	; 0x1820 <__udivmodhi4_ep>
    181c:	a6 1b       	sub	r26, r22
    181e:	b7 0b       	sbc	r27, r23

00001820 <__udivmodhi4_ep>:
    1820:	88 1f       	adc	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	5a 95       	dec	r21
    1826:	a9 f7       	brne	.-22     	; 0x1812 <__udivmodhi4_loop>
    1828:	80 95       	com	r24
    182a:	90 95       	com	r25
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	08 95       	ret

00001832 <__udivmodsi4>:
    1832:	a1 e2       	ldi	r26, 0x21	; 33
    1834:	1a 2e       	mov	r1, r26
    1836:	aa 1b       	sub	r26, r26
    1838:	bb 1b       	sub	r27, r27
    183a:	fd 01       	movw	r30, r26
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <__udivmodsi4_ep>

0000183e <__udivmodsi4_loop>:
    183e:	aa 1f       	adc	r26, r26
    1840:	bb 1f       	adc	r27, r27
    1842:	ee 1f       	adc	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	a2 17       	cp	r26, r18
    1848:	b3 07       	cpc	r27, r19
    184a:	e4 07       	cpc	r30, r20
    184c:	f5 07       	cpc	r31, r21
    184e:	20 f0       	brcs	.+8      	; 0x1858 <__udivmodsi4_ep>
    1850:	a2 1b       	sub	r26, r18
    1852:	b3 0b       	sbc	r27, r19
    1854:	e4 0b       	sbc	r30, r20
    1856:	f5 0b       	sbc	r31, r21

00001858 <__udivmodsi4_ep>:
    1858:	66 1f       	adc	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	1a 94       	dec	r1
    1862:	69 f7       	brne	.-38     	; 0x183e <__udivmodsi4_loop>
    1864:	60 95       	com	r22
    1866:	70 95       	com	r23
    1868:	80 95       	com	r24
    186a:	90 95       	com	r25
    186c:	9b 01       	movw	r18, r22
    186e:	ac 01       	movw	r20, r24
    1870:	bd 01       	movw	r22, r26
    1872:	cf 01       	movw	r24, r30
    1874:	08 95       	ret

00001876 <__divmodsi4>:
    1876:	05 2e       	mov	r0, r21
    1878:	97 fb       	bst	r25, 7
    187a:	1e f4       	brtc	.+6      	; 0x1882 <__divmodsi4+0xc>
    187c:	00 94       	com	r0
    187e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__negsi2>
    1882:	57 fd       	sbrc	r21, 7
    1884:	07 d0       	rcall	.+14     	; 0x1894 <__divmodsi4_neg2>
    1886:	0e 94 19 0c 	call	0x1832	; 0x1832 <__udivmodsi4>
    188a:	07 fc       	sbrc	r0, 7
    188c:	03 d0       	rcall	.+6      	; 0x1894 <__divmodsi4_neg2>
    188e:	4e f4       	brtc	.+18     	; 0x18a2 <__divmodsi4_exit>
    1890:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__negsi2>

00001894 <__divmodsi4_neg2>:
    1894:	50 95       	com	r21
    1896:	40 95       	com	r20
    1898:	30 95       	com	r19
    189a:	21 95       	neg	r18
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	4f 4f       	sbci	r20, 0xFF	; 255
    18a0:	5f 4f       	sbci	r21, 0xFF	; 255

000018a2 <__divmodsi4_exit>:
    18a2:	08 95       	ret

000018a4 <__negsi2>:
    18a4:	90 95       	com	r25
    18a6:	80 95       	com	r24
    18a8:	70 95       	com	r23
    18aa:	61 95       	neg	r22
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255
    18ae:	8f 4f       	sbci	r24, 0xFF	; 255
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	08 95       	ret

000018b4 <__tablejump2__>:
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	05 90       	lpm	r0, Z+
    18ba:	f4 91       	lpm	r31, Z
    18bc:	e0 2d       	mov	r30, r0
    18be:	09 94       	ijmp

000018c0 <__umulhisi3>:
    18c0:	a2 9f       	mul	r26, r18
    18c2:	b0 01       	movw	r22, r0
    18c4:	b3 9f       	mul	r27, r19
    18c6:	c0 01       	movw	r24, r0
    18c8:	a3 9f       	mul	r26, r19
    18ca:	70 0d       	add	r23, r0
    18cc:	81 1d       	adc	r24, r1
    18ce:	11 24       	eor	r1, r1
    18d0:	91 1d       	adc	r25, r1
    18d2:	b2 9f       	mul	r27, r18
    18d4:	70 0d       	add	r23, r0
    18d6:	81 1d       	adc	r24, r1
    18d8:	11 24       	eor	r1, r1
    18da:	91 1d       	adc	r25, r1
    18dc:	08 95       	ret

000018de <__muluhisi3>:
    18de:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__umulhisi3>
    18e2:	a5 9f       	mul	r26, r21
    18e4:	90 0d       	add	r25, r0
    18e6:	b4 9f       	mul	r27, r20
    18e8:	90 0d       	add	r25, r0
    18ea:	a4 9f       	mul	r26, r20
    18ec:	80 0d       	add	r24, r0
    18ee:	91 1d       	adc	r25, r1
    18f0:	11 24       	eor	r1, r1
    18f2:	08 95       	ret

000018f4 <__mulshisi3>:
    18f4:	b7 ff       	sbrs	r27, 7
    18f6:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__muluhisi3>

000018fa <__mulohisi3>:
    18fa:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
    18fe:	82 1b       	sub	r24, r18
    1900:	93 0b       	sbc	r25, r19
    1902:	08 95       	ret

00001904 <__prologue_saves__>:
    1904:	2f 92       	push	r2
    1906:	3f 92       	push	r3
    1908:	4f 92       	push	r4
    190a:	5f 92       	push	r5
    190c:	6f 92       	push	r6
    190e:	7f 92       	push	r7
    1910:	8f 92       	push	r8
    1912:	9f 92       	push	r9
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	ca 1b       	sub	r28, r26
    192e:	db 0b       	sbc	r29, r27
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	09 94       	ijmp

0000193c <__epilogue_restores__>:
    193c:	2a 88       	ldd	r2, Y+18	; 0x12
    193e:	39 88       	ldd	r3, Y+17	; 0x11
    1940:	48 88       	ldd	r4, Y+16	; 0x10
    1942:	5f 84       	ldd	r5, Y+15	; 0x0f
    1944:	6e 84       	ldd	r6, Y+14	; 0x0e
    1946:	7d 84       	ldd	r7, Y+13	; 0x0d
    1948:	8c 84       	ldd	r8, Y+12	; 0x0c
    194a:	9b 84       	ldd	r9, Y+11	; 0x0b
    194c:	aa 84       	ldd	r10, Y+10	; 0x0a
    194e:	b9 84       	ldd	r11, Y+9	; 0x09
    1950:	c8 84       	ldd	r12, Y+8	; 0x08
    1952:	df 80       	ldd	r13, Y+7	; 0x07
    1954:	ee 80       	ldd	r14, Y+6	; 0x06
    1956:	fd 80       	ldd	r15, Y+5	; 0x05
    1958:	0c 81       	ldd	r16, Y+4	; 0x04
    195a:	1b 81       	ldd	r17, Y+3	; 0x03
    195c:	aa 81       	ldd	r26, Y+2	; 0x02
    195e:	b9 81       	ldd	r27, Y+1	; 0x01
    1960:	ce 0f       	add	r28, r30
    1962:	d1 1d       	adc	r29, r1
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	ed 01       	movw	r28, r26
    1970:	08 95       	ret

00001972 <malloc>:
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	82 30       	cpi	r24, 0x02	; 2
    197c:	91 05       	cpc	r25, r1
    197e:	10 f4       	brcc	.+4      	; 0x1984 <malloc+0x12>
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	e0 91 8f 01 	lds	r30, 0x018F	; 0x80018f <__flp>
    1988:	f0 91 90 01 	lds	r31, 0x0190	; 0x800190 <__flp+0x1>
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	a0 e0       	ldi	r26, 0x00	; 0
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	30 97       	sbiw	r30, 0x00	; 0
    1996:	19 f1       	breq	.+70     	; 0x19de <malloc+0x6c>
    1998:	40 81       	ld	r20, Z
    199a:	51 81       	ldd	r21, Z+1	; 0x01
    199c:	02 81       	ldd	r16, Z+2	; 0x02
    199e:	13 81       	ldd	r17, Z+3	; 0x03
    19a0:	48 17       	cp	r20, r24
    19a2:	59 07       	cpc	r21, r25
    19a4:	c8 f0       	brcs	.+50     	; 0x19d8 <malloc+0x66>
    19a6:	84 17       	cp	r24, r20
    19a8:	95 07       	cpc	r25, r21
    19aa:	69 f4       	brne	.+26     	; 0x19c6 <malloc+0x54>
    19ac:	10 97       	sbiw	r26, 0x00	; 0
    19ae:	31 f0       	breq	.+12     	; 0x19bc <malloc+0x4a>
    19b0:	12 96       	adiw	r26, 0x02	; 2
    19b2:	0c 93       	st	X, r16
    19b4:	12 97       	sbiw	r26, 0x02	; 2
    19b6:	13 96       	adiw	r26, 0x03	; 3
    19b8:	1c 93       	st	X, r17
    19ba:	27 c0       	rjmp	.+78     	; 0x1a0a <malloc+0x98>
    19bc:	00 93 8f 01 	sts	0x018F, r16	; 0x80018f <__flp>
    19c0:	10 93 90 01 	sts	0x0190, r17	; 0x800190 <__flp+0x1>
    19c4:	22 c0       	rjmp	.+68     	; 0x1a0a <malloc+0x98>
    19c6:	21 15       	cp	r18, r1
    19c8:	31 05       	cpc	r19, r1
    19ca:	19 f0       	breq	.+6      	; 0x19d2 <malloc+0x60>
    19cc:	42 17       	cp	r20, r18
    19ce:	53 07       	cpc	r21, r19
    19d0:	18 f4       	brcc	.+6      	; 0x19d8 <malloc+0x66>
    19d2:	9a 01       	movw	r18, r20
    19d4:	bd 01       	movw	r22, r26
    19d6:	ef 01       	movw	r28, r30
    19d8:	df 01       	movw	r26, r30
    19da:	f8 01       	movw	r30, r16
    19dc:	db cf       	rjmp	.-74     	; 0x1994 <malloc+0x22>
    19de:	21 15       	cp	r18, r1
    19e0:	31 05       	cpc	r19, r1
    19e2:	f9 f0       	breq	.+62     	; 0x1a22 <malloc+0xb0>
    19e4:	28 1b       	sub	r18, r24
    19e6:	39 0b       	sbc	r19, r25
    19e8:	24 30       	cpi	r18, 0x04	; 4
    19ea:	31 05       	cpc	r19, r1
    19ec:	80 f4       	brcc	.+32     	; 0x1a0e <malloc+0x9c>
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	9b 81       	ldd	r25, Y+3	; 0x03
    19f2:	61 15       	cp	r22, r1
    19f4:	71 05       	cpc	r23, r1
    19f6:	21 f0       	breq	.+8      	; 0x1a00 <malloc+0x8e>
    19f8:	fb 01       	movw	r30, r22
    19fa:	93 83       	std	Z+3, r25	; 0x03
    19fc:	82 83       	std	Z+2, r24	; 0x02
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <malloc+0x96>
    1a00:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__flp+0x1>
    1a04:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <__flp>
    1a08:	fe 01       	movw	r30, r28
    1a0a:	32 96       	adiw	r30, 0x02	; 2
    1a0c:	44 c0       	rjmp	.+136    	; 0x1a96 <malloc+0x124>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e2 0f       	add	r30, r18
    1a12:	f3 1f       	adc	r31, r19
    1a14:	81 93       	st	Z+, r24
    1a16:	91 93       	st	Z+, r25
    1a18:	22 50       	subi	r18, 0x02	; 2
    1a1a:	31 09       	sbc	r19, r1
    1a1c:	39 83       	std	Y+1, r19	; 0x01
    1a1e:	28 83       	st	Y, r18
    1a20:	3a c0       	rjmp	.+116    	; 0x1a96 <malloc+0x124>
    1a22:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <__brkval>
    1a26:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <__brkval+0x1>
    1a2a:	23 2b       	or	r18, r19
    1a2c:	41 f4       	brne	.+16     	; 0x1a3e <malloc+0xcc>
    1a2e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_start>
    1a32:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_start+0x1>
    1a36:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <__brkval+0x1>
    1a3a:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <__brkval>
    1a3e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_end>
    1a42:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_end+0x1>
    1a46:	21 15       	cp	r18, r1
    1a48:	31 05       	cpc	r19, r1
    1a4a:	41 f4       	brne	.+16     	; 0x1a5c <malloc+0xea>
    1a4c:	2d b7       	in	r18, 0x3d	; 61
    1a4e:	3e b7       	in	r19, 0x3e	; 62
    1a50:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__malloc_margin>
    1a54:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__malloc_margin+0x1>
    1a58:	24 1b       	sub	r18, r20
    1a5a:	35 0b       	sbc	r19, r21
    1a5c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <__brkval>
    1a60:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <__brkval+0x1>
    1a64:	e2 17       	cp	r30, r18
    1a66:	f3 07       	cpc	r31, r19
    1a68:	a0 f4       	brcc	.+40     	; 0x1a92 <malloc+0x120>
    1a6a:	2e 1b       	sub	r18, r30
    1a6c:	3f 0b       	sbc	r19, r31
    1a6e:	28 17       	cp	r18, r24
    1a70:	39 07       	cpc	r19, r25
    1a72:	78 f0       	brcs	.+30     	; 0x1a92 <malloc+0x120>
    1a74:	ac 01       	movw	r20, r24
    1a76:	4e 5f       	subi	r20, 0xFE	; 254
    1a78:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7a:	24 17       	cp	r18, r20
    1a7c:	35 07       	cpc	r19, r21
    1a7e:	48 f0       	brcs	.+18     	; 0x1a92 <malloc+0x120>
    1a80:	4e 0f       	add	r20, r30
    1a82:	5f 1f       	adc	r21, r31
    1a84:	50 93 8e 01 	sts	0x018E, r21	; 0x80018e <__brkval+0x1>
    1a88:	40 93 8d 01 	sts	0x018D, r20	; 0x80018d <__brkval>
    1a8c:	81 93       	st	Z+, r24
    1a8e:	91 93       	st	Z+, r25
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <malloc+0x124>
    1a92:	e0 e0       	ldi	r30, 0x00	; 0
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	cf 01       	movw	r24, r30
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	08 95       	ret

00001aa2 <free>:
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <free+0xa>
    1aaa:	81 c0       	rjmp	.+258    	; 0x1bae <free+0x10c>
    1aac:	fc 01       	movw	r30, r24
    1aae:	32 97       	sbiw	r30, 0x02	; 2
    1ab0:	13 82       	std	Z+3, r1	; 0x03
    1ab2:	12 82       	std	Z+2, r1	; 0x02
    1ab4:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <__flp>
    1ab8:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <__flp+0x1>
    1abc:	10 97       	sbiw	r26, 0x00	; 0
    1abe:	81 f4       	brne	.+32     	; 0x1ae0 <free+0x3e>
    1ac0:	20 81       	ld	r18, Z
    1ac2:	31 81       	ldd	r19, Z+1	; 0x01
    1ac4:	82 0f       	add	r24, r18
    1ac6:	93 1f       	adc	r25, r19
    1ac8:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <__brkval>
    1acc:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <__brkval+0x1>
    1ad0:	28 17       	cp	r18, r24
    1ad2:	39 07       	cpc	r19, r25
    1ad4:	51 f5       	brne	.+84     	; 0x1b2a <free+0x88>
    1ad6:	f0 93 8e 01 	sts	0x018E, r31	; 0x80018e <__brkval+0x1>
    1ada:	e0 93 8d 01 	sts	0x018D, r30	; 0x80018d <__brkval>
    1ade:	67 c0       	rjmp	.+206    	; 0x1bae <free+0x10c>
    1ae0:	ed 01       	movw	r28, r26
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	ce 17       	cp	r28, r30
    1ae8:	df 07       	cpc	r29, r31
    1aea:	40 f4       	brcc	.+16     	; 0x1afc <free+0x5a>
    1aec:	4a 81       	ldd	r20, Y+2	; 0x02
    1aee:	5b 81       	ldd	r21, Y+3	; 0x03
    1af0:	9e 01       	movw	r18, r28
    1af2:	41 15       	cp	r20, r1
    1af4:	51 05       	cpc	r21, r1
    1af6:	f1 f0       	breq	.+60     	; 0x1b34 <free+0x92>
    1af8:	ea 01       	movw	r28, r20
    1afa:	f5 cf       	rjmp	.-22     	; 0x1ae6 <free+0x44>
    1afc:	d3 83       	std	Z+3, r29	; 0x03
    1afe:	c2 83       	std	Z+2, r28	; 0x02
    1b00:	40 81       	ld	r20, Z
    1b02:	51 81       	ldd	r21, Z+1	; 0x01
    1b04:	84 0f       	add	r24, r20
    1b06:	95 1f       	adc	r25, r21
    1b08:	c8 17       	cp	r28, r24
    1b0a:	d9 07       	cpc	r29, r25
    1b0c:	59 f4       	brne	.+22     	; 0x1b24 <free+0x82>
    1b0e:	88 81       	ld	r24, Y
    1b10:	99 81       	ldd	r25, Y+1	; 0x01
    1b12:	84 0f       	add	r24, r20
    1b14:	95 1f       	adc	r25, r21
    1b16:	02 96       	adiw	r24, 0x02	; 2
    1b18:	91 83       	std	Z+1, r25	; 0x01
    1b1a:	80 83       	st	Z, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b20:	93 83       	std	Z+3, r25	; 0x03
    1b22:	82 83       	std	Z+2, r24	; 0x02
    1b24:	21 15       	cp	r18, r1
    1b26:	31 05       	cpc	r19, r1
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <free+0x92>
    1b2a:	f0 93 90 01 	sts	0x0190, r31	; 0x800190 <__flp+0x1>
    1b2e:	e0 93 8f 01 	sts	0x018F, r30	; 0x80018f <__flp>
    1b32:	3d c0       	rjmp	.+122    	; 0x1bae <free+0x10c>
    1b34:	e9 01       	movw	r28, r18
    1b36:	fb 83       	std	Y+3, r31	; 0x03
    1b38:	ea 83       	std	Y+2, r30	; 0x02
    1b3a:	49 91       	ld	r20, Y+
    1b3c:	59 91       	ld	r21, Y+
    1b3e:	c4 0f       	add	r28, r20
    1b40:	d5 1f       	adc	r29, r21
    1b42:	ec 17       	cp	r30, r28
    1b44:	fd 07       	cpc	r31, r29
    1b46:	61 f4       	brne	.+24     	; 0x1b60 <free+0xbe>
    1b48:	80 81       	ld	r24, Z
    1b4a:	91 81       	ldd	r25, Z+1	; 0x01
    1b4c:	84 0f       	add	r24, r20
    1b4e:	95 1f       	adc	r25, r21
    1b50:	02 96       	adiw	r24, 0x02	; 2
    1b52:	e9 01       	movw	r28, r18
    1b54:	99 83       	std	Y+1, r25	; 0x01
    1b56:	88 83       	st	Y, r24
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	9b 83       	std	Y+3, r25	; 0x03
    1b5e:	8a 83       	std	Y+2, r24	; 0x02
    1b60:	e0 e0       	ldi	r30, 0x00	; 0
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	12 96       	adiw	r26, 0x02	; 2
    1b66:	8d 91       	ld	r24, X+
    1b68:	9c 91       	ld	r25, X
    1b6a:	13 97       	sbiw	r26, 0x03	; 3
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <free+0xd4>
    1b70:	fd 01       	movw	r30, r26
    1b72:	dc 01       	movw	r26, r24
    1b74:	f7 cf       	rjmp	.-18     	; 0x1b64 <free+0xc2>
    1b76:	8d 91       	ld	r24, X+
    1b78:	9c 91       	ld	r25, X
    1b7a:	11 97       	sbiw	r26, 0x01	; 1
    1b7c:	9d 01       	movw	r18, r26
    1b7e:	2e 5f       	subi	r18, 0xFE	; 254
    1b80:	3f 4f       	sbci	r19, 0xFF	; 255
    1b82:	82 0f       	add	r24, r18
    1b84:	93 1f       	adc	r25, r19
    1b86:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <__brkval>
    1b8a:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <__brkval+0x1>
    1b8e:	28 17       	cp	r18, r24
    1b90:	39 07       	cpc	r19, r25
    1b92:	69 f4       	brne	.+26     	; 0x1bae <free+0x10c>
    1b94:	30 97       	sbiw	r30, 0x00	; 0
    1b96:	29 f4       	brne	.+10     	; 0x1ba2 <free+0x100>
    1b98:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__flp+0x1>
    1b9c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <__flp>
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <free+0x104>
    1ba2:	13 82       	std	Z+3, r1	; 0x03
    1ba4:	12 82       	std	Z+2, r1	; 0x02
    1ba6:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <__brkval+0x1>
    1baa:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <__brkval>
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <__do_global_dtors>:
    1bb4:	10 e0       	ldi	r17, 0x00	; 0
    1bb6:	c4 e3       	ldi	r28, 0x34	; 52
    1bb8:	d0 e0       	ldi	r29, 0x00	; 0
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <__do_global_dtors+0x10>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__tablejump2__>
    1bc2:	21 96       	adiw	r28, 0x01	; 1
    1bc4:	c5 33       	cpi	r28, 0x35	; 53
    1bc6:	d1 07       	cpc	r29, r17
    1bc8:	c9 f7       	brne	.-14     	; 0x1bbc <__do_global_dtors+0x8>
    1bca:	f8 94       	cli

00001bcc <__stop_program>:
    1bcc:	ff cf       	rjmp	.-2      	; 0x1bcc <__stop_program>
