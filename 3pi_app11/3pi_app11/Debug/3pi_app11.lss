
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000257a  0000260e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000257a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080013a  0080013a  00002648  2**0
                  ALLOC
  3 .stab         000059c4  00000000  00000000  00002648  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000084be  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000104ca  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001050c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000138  00000000  00000000  0001054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001fa8  00000000  00000000  00010684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000d56  00000000  00000000  0001262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000142e  00000000  00000000  00013382  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000334  00000000  00000000  000147b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000071d  00000000  00000000  00014ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000af6  00000000  00000000  00015201  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000130  00000000  00000000  00015cf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__dtors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__vector_9>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	31 03       	mulsu	r19, r17
      6a:	35 03       	mulsu	r19, r21
      6c:	93 03       	fmuls	r17, r19
      6e:	0b 03       	fmul	r16, r19
      70:	19 03       	fmul	r17, r17
      72:	27 03       	mulsu	r18, r23
      74:	0b 03       	fmul	r16, r19
      76:	0b 03       	fmul	r16, r19
      78:	0b 03       	fmul	r16, r19

0000007a <__ctors_end>:
      7a:	ab 0b       	sbc	r26, r27

0000007c <__dtors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ea e7       	ldi	r30, 0x7A	; 122
      90:	f5 e2       	ldi	r31, 0x25	; 37
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 33       	cpi	r26, 0x3A	; 58
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	aa e3       	ldi	r26, 0x3A	; 58
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ab 3a       	cpi	r26, 0xAB	; 171
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 be 00 	call	0x17c	; 0x17c <main>
      b2:	0c 94 b0 12 	jmp	0x2560	; 0x2560 <__do_global_dtors>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <batteryPercentage>:
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
      ba:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <read_battery_millivolts_3pi>

int batteryPercentage()//Should this function be in main or in display.c or something else?
{
	
	int milliVolts = read_battery_millivolts();
	int batteryPercent = milliVolts/50;
      be:	62 e3       	ldi	r22, 0x32	; 50
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	0e 94 cb 10 	call	0x2196	; 0x2196 <__divmodhi4>
      c6:	cb 01       	movw	r24, r22
	return batteryPercent;
}
      c8:	08 95       	ret

000000ca <updateDisplay>:

void updateDisplay(int orderPercent, int batteryPercent, robotStates currentState)
{
      ca:	ef 92       	push	r14
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	7c 01       	movw	r14, r24
      d6:	8b 01       	movw	r16, r22
      d8:	c4 2f       	mov	r28, r20
	clear();
      da:	0e 94 64 09 	call	0x12c8	; 0x12c8 <clear>
	lcd_goto_xy(0,0);
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
	print("Task:");
      e6:	83 e2       	ldi	r24, 0x23	; 35
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
	print_long(orderPercent);
      ee:	b7 01       	movw	r22, r14
      f0:	ff 0c       	add	r15, r15
      f2:	88 0b       	sbc	r24, r24
      f4:	99 0b       	sbc	r25, r25
      f6:	0e 94 c8 09 	call	0x1390	; 0x1390 <print_long>
	print("%");
      fa:	89 e2       	ldi	r24, 0x29	; 41
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
	
	lcd_goto_xy(0,1);
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
	print("Bat:");
     10a:	8b e2       	ldi	r24, 0x2B	; 43
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
	print_long(batteryPercent);
     112:	b8 01       	movw	r22, r16
     114:	11 0f       	add	r17, r17
     116:	88 0b       	sbc	r24, r24
     118:	99 0b       	sbc	r25, r25
     11a:	0e 94 c8 09 	call	0x1390	; 0x1390 <print_long>
	print("%");
     11e:	89 e2       	ldi	r24, 0x29	; 41
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
	switch(currentState)
     126:	c2 30       	cpi	r28, 0x02	; 2
     128:	a9 f0       	breq	.+42     	; 0x154 <updateDisplay+0x8a>
     12a:	28 f4       	brcc	.+10     	; 0x136 <updateDisplay+0x6c>
     12c:	cc 23       	and	r28, r28
     12e:	41 f0       	breq	.+16     	; 0x140 <updateDisplay+0x76>
     130:	c1 30       	cpi	r28, 0x01	; 1
     132:	59 f0       	breq	.+22     	; 0x14a <updateDisplay+0x80>
     134:	1d c0       	rjmp	.+58     	; 0x170 <updateDisplay+0xa6>
     136:	c3 30       	cpi	r28, 0x03	; 3
     138:	91 f0       	breq	.+36     	; 0x15e <updateDisplay+0x94>
     13a:	c4 30       	cpi	r28, 0x04	; 4
     13c:	a9 f0       	breq	.+42     	; 0x168 <updateDisplay+0x9e>
     13e:	18 c0       	rjmp	.+48     	; 0x170 <updateDisplay+0xa6>
	{
		case manual:
		print("M");//M for Manual
     140:	80 e3       	ldi	r24, 0x30	; 48
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
		break;
     148:	13 c0       	rjmp	.+38     	; 0x170 <updateDisplay+0xa6>
		case mazeSolver:
		print("P");//P for Parcours
     14a:	82 e3       	ldi	r24, 0x32	; 50
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
		break;
     152:	0e c0       	rjmp	.+28     	; 0x170 <updateDisplay+0xa6>
		case logicsBot:
		print("O");//O for Order
     154:	84 e3       	ldi	r24, 0x34	; 52
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
		break;
     15c:	09 c0       	rjmp	.+18     	; 0x170 <updateDisplay+0xa6>
		case chargeMode:
		print("C");//C for Charge
     15e:	86 e3       	ldi	r24, 0x36	; 54
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
		break;
     166:	04 c0       	rjmp	.+8      	; 0x170 <updateDisplay+0xa6>
		case homingMode:
		print("H");//H for Homing
     168:	88 e3       	ldi	r24, 0x38	; 56
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
		break;
	}
}
     170:	cf 91       	pop	r28
     172:	1f 91       	pop	r17
     174:	0f 91       	pop	r16
     176:	ff 90       	pop	r15
     178:	ef 90       	pop	r14
     17a:	08 95       	ret

0000017c <main>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


int main()
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	64 97       	sbiw	r28, 0x14	; 20
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	de bf       	out	0x3e, r29	; 62
     18c:	0f be       	out	0x3f, r0	; 63
     18e:	cd bf       	out	0x3d, r28	; 61
	clear();
     190:	0e 94 64 09 	call	0x12c8	; 0x12c8 <clear>
	pololu_3pi_init(2000);
     194:	80 ed       	ldi	r24, 0xD0	; 208
     196:	97 e0       	ldi	r25, 0x07	; 7
     198:	0e 94 a7 0b 	call	0x174e	; 0x174e <pololu_3pi_init>
	initialize();
     19c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <initialize>
	
	
	
	char parecour[20];
	parcour(parecour);
     1a0:	ce 01       	movw	r24, r28
     1a2:	01 96       	adiw	r24, 0x01	; 1
     1a4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <parcour>
	print(parecour);
     1a8:	ce 01       	movw	r24, r28
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	0e 94 73 09 	call	0x12e6	; 0x12e6 <print>
	
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	64 96       	adiw	r28, 0x14	; 20
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	f8 94       	cli
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	cd bf       	out	0x3d, r28	; 61
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <initialize>:
#include <avr/pgmspace.h>

	Junctions junction;	

void initialize()
{
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
	unsigned int counter; // used as a simple timer
	
	pololu_3pi_init(2000);
     1ca:	80 ed       	ldi	r24, 0xD0	; 208
     1cc:	97 e0       	ldi	r25, 0x07	; 7
     1ce:	0e 94 a7 0b 	call	0x174e	; 0x174e <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B)){}	
     1d2:	80 e1       	ldi	r24, 0x10	; 16
     1d4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <button_is_pressed>
     1d8:	88 23       	and	r24, r24
     1da:	d9 f3       	breq	.-10     	; 0x1d2 <initialize+0xc>
	wait_for_button_release(BUTTON_B);
     1dc:	80 e1       	ldi	r24, 0x10	; 16
     1de:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <wait_for_button_release>
	delay_ms(1000);
     1e2:	88 ee       	ldi	r24, 0xE8	; 232
     1e4:	93 e0       	ldi	r25, 0x03	; 3
     1e6:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>

	for(counter=0;counter<80;counter++)
     1ea:	c0 e0       	ldi	r28, 0x00	; 0
     1ec:	d0 e0       	ldi	r29, 0x00	; 0
     1ee:	19 c0       	rjmp	.+50     	; 0x222 <initialize+0x5c>
	{
		if(counter < 20 || counter >= 60)
     1f0:	ce 01       	movw	r24, r28
     1f2:	44 97       	sbiw	r24, 0x14	; 20
     1f4:	88 97       	sbiw	r24, 0x28	; 40
     1f6:	38 f0       	brcs	.+14     	; 0x206 <initialize+0x40>
		set_motors(40,-40);
     1f8:	68 ed       	ldi	r22, 0xD8	; 216
     1fa:	7f ef       	ldi	r23, 0xFF	; 255
     1fc:	88 e2       	ldi	r24, 0x28	; 40
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
     204:	06 c0       	rjmp	.+12     	; 0x212 <initialize+0x4c>
		else
		set_motors(-40,40);
     206:	68 e2       	ldi	r22, 0x28	; 40
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	88 ed       	ldi	r24, 0xD8	; 216
     20c:	9f ef       	ldi	r25, 0xFF	; 255
     20e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <calibrate_line_sensors>
		
		delay_ms(20);
     218:	84 e1       	ldi	r24, 0x14	; 20
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
	
	while(!button_is_pressed(BUTTON_B)){}	
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     220:	21 96       	adiw	r28, 0x01	; 1
     222:	c0 35       	cpi	r28, 0x50	; 80
     224:	d1 05       	cpc	r29, r1
     226:	20 f3       	brcs	.-56     	; 0x1f0 <initialize+0x2a>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		
		delay_ms(20);
	}
	set_motors(0,0);
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
	
	while(!button_is_pressed(BUTTON_B)){}
     234:	80 e1       	ldi	r24, 0x10	; 16
     236:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <button_is_pressed>
     23a:	88 23       	and	r24, r24
     23c:	d9 f3       	breq	.-10     	; 0x234 <initialize+0x6e>
	wait_for_button_release(BUTTON_B);
     23e:	80 e1       	ldi	r24, 0x10	; 16
     240:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <wait_for_button_release>
	
	clear();
     244:	0e 94 64 09 	call	0x12c8	; 0x12c8 <clear>
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	08 95       	ret

0000024e <inch>:

void inch(){
	set_motors(50,50);
     24e:	62 e3       	ldi	r22, 0x32	; 50
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	82 e3       	ldi	r24, 0x32	; 50
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     25a:	88 ec       	ldi	r24, 0xC8	; 200
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
	delay(200);
	set_motors(0,0);
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
     26e:	08 95       	ret

00000270 <println>:
}
void println(int x){
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	ec 01       	movw	r28, r24
	clear();
     276:	0e 94 64 09 	call	0x12c8	; 0x12c8 <clear>
	lcd_goto_xy(0,0);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <lcd_goto_xy>
	print_long(x);	
     282:	be 01       	movw	r22, r28
     284:	dd 0f       	add	r29, r29
     286:	88 0b       	sbc	r24, r24
     288:	99 0b       	sbc	r25, r25
     28a:	0e 94 c8 09 	call	0x1390	; 0x1390 <print_long>
	
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <motorControl>:
		}	
	}
}


void motorControl(char x){													// function that controlls the motor movement and the turns
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	c8 2f       	mov	r28, r24
	read_line(sensors,IR_EMITTERS_ON);
     29a:	61 e0       	ldi	r22, 0x01	; 1
     29c:	8c e9       	ldi	r24, 0x9C	; 156
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
	
	if(x == 'N')															//Emergency Brake
     2a4:	ce 34       	cpi	r28, 0x4E	; 78
     2a6:	39 f4       	brne	.+14     	; 0x2b6 <motorControl+0x22>
		set_motors(0,0);	
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
     2b4:	c3 c0       	rjmp	.+390    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	
	
	else if(x == 'L'){														//Turn Left
     2b6:	cc 34       	cpi	r28, 0x4C	; 76
     2b8:	09 f5       	brne	.+66     	; 0x2fc <motorControl+0x68>
		set_motors(-50,50);
     2ba:	62 e3       	ldi	r22, 0x32	; 50
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	8e ec       	ldi	r24, 0xCE	; 206
     2c0:	9f ef       	ldi	r25, 0xFF	; 255
     2c2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		
		while (sensors[2] >=500)
     2c6:	05 c0       	rjmp	.+10     	; 0x2d2 <motorControl+0x3e>
			read_line(sensors,IR_EMITTERS_ON);
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	8c e9       	ldi	r24, 0x9C	; 156
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
	
	
	else if(x == 'L'){														//Turn Left
		set_motors(-50,50);
		
		while (sensors[2] >=500)
     2d2:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     2d6:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     2da:	84 3f       	cpi	r24, 0xF4	; 244
     2dc:	91 40       	sbci	r25, 0x01	; 1
     2de:	a0 f7       	brcc	.-24     	; 0x2c8 <motorControl+0x34>
     2e0:	05 c0       	rjmp	.+10     	; 0x2ec <motorControl+0x58>
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
			read_line(sensors,IR_EMITTERS_ON);
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	8c e9       	ldi	r24, 0x9C	; 156
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
	else if(x == 'L'){														//Turn Left
		set_motors(-50,50);
		
		while (sensors[2] >=500)
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
     2ec:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     2f0:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     2f4:	85 3f       	cpi	r24, 0xF5	; 245
     2f6:	91 40       	sbci	r25, 0x01	; 1
     2f8:	a0 f3       	brcs	.-24     	; 0x2e2 <motorControl+0x4e>
     2fa:	a0 c0       	rjmp	.+320    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			read_line(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'R'){														//Turn Right
     2fc:	c2 35       	cpi	r28, 0x52	; 82
     2fe:	09 f5       	brne	.+66     	; 0x342 <motorControl+0xae>
		set_motors(50,-50);
     300:	6e ec       	ldi	r22, 0xCE	; 206
     302:	7f ef       	ldi	r23, 0xFF	; 255
     304:	82 e3       	ldi	r24, 0x32	; 50
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		
		while (sensors[2] >=500)
     30c:	05 c0       	rjmp	.+10     	; 0x318 <motorControl+0x84>
			read_line(sensors,IR_EMITTERS_ON);
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	8c e9       	ldi	r24, 0x9C	; 156
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
	
	
	else if(x == 'R'){														//Turn Right
		set_motors(50,-50);
		
		while (sensors[2] >=500)
     318:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     31c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     320:	84 3f       	cpi	r24, 0xF4	; 244
     322:	91 40       	sbci	r25, 0x01	; 1
     324:	a0 f7       	brcc	.-24     	; 0x30e <motorControl+0x7a>
     326:	05 c0       	rjmp	.+10     	; 0x332 <motorControl+0x9e>
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
			read_line(sensors,IR_EMITTERS_ON);
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	8c e9       	ldi	r24, 0x9C	; 156
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
	else if(x == 'R'){														//Turn Right
		set_motors(50,-50);
		
		while (sensors[2] >=500)
			read_line(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=500)
     332:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     336:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     33a:	85 3f       	cpi	r24, 0xF5	; 245
     33c:	91 40       	sbci	r25, 0x01	; 1
     33e:	a0 f3       	brcs	.-24     	; 0x328 <motorControl+0x94>
     340:	7d c0       	rjmp	.+250    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			read_line(sensors,IR_EMITTERS_ON);
	}
		
			
	else if(x == 'S'){														//drive straight and adjusts the robot so it follows the line
     342:	c3 35       	cpi	r28, 0x53	; 83
     344:	89 f5       	brne	.+98     	; 0x3a8 <motorControl+0x114>
		set_motors(50,50);
     346:	62 e3       	ldi	r22, 0x32	; 50
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	82 e3       	ldi	r24, 0x32	; 50
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		
		if (sensors[3] >= 500 && sensors[4] <= 300 )
     352:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sensors+0x6>
     356:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sensors+0x7>
     35a:	84 3f       	cpi	r24, 0xF4	; 244
     35c:	91 40       	sbci	r25, 0x01	; 1
     35e:	68 f0       	brcs	.+26     	; 0x37a <motorControl+0xe6>
     360:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <sensors+0x8>
     364:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <sensors+0x9>
     368:	8d 32       	cpi	r24, 0x2D	; 45
     36a:	91 40       	sbci	r25, 0x01	; 1
     36c:	30 f4       	brcc	.+12     	; 0x37a <motorControl+0xe6>
			set_motors(50,30);
     36e:	6e e1       	ldi	r22, 0x1E	; 30
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	82 e3       	ldi	r24, 0x32	; 50
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		if (sensors[1] >= 500 && sensors[0] <= 300 )
     37a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensors+0x2>
     37e:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensors+0x3>
     382:	84 3f       	cpi	r24, 0xF4	; 244
     384:	91 40       	sbci	r25, 0x01	; 1
     386:	08 f4       	brcc	.+2      	; 0x38a <motorControl+0xf6>
     388:	59 c0       	rjmp	.+178    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     38a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <sensors>
     38e:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <sensors+0x1>
     392:	8d 32       	cpi	r24, 0x2D	; 45
     394:	91 40       	sbci	r25, 0x01	; 1
     396:	08 f0       	brcs	.+2      	; 0x39a <motorControl+0x106>
     398:	51 c0       	rjmp	.+162    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			set_motors(30,50);
     39a:	62 e3       	ldi	r22, 0x32	; 50
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	8e e1       	ldi	r24, 0x1E	; 30
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
     3a6:	4a c0       	rjmp	.+148    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	}
	
	
	else if(x == 'B'){														//Reverse while following the line
     3a8:	c2 34       	cpi	r28, 0x42	; 66
     3aa:	09 f5       	brne	.+66     	; 0x3ee <motorControl+0x15a>
		set_motors(-50,-50);
     3ac:	6e ec       	ldi	r22, 0xCE	; 206
     3ae:	7f ef       	ldi	r23, 0xFF	; 255
     3b0:	8e ec       	ldi	r24, 0xCE	; 206
     3b2:	9f ef       	ldi	r25, 0xFF	; 255
     3b4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		
		if (sensors[3] >=400)
     3b8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sensors+0x6>
     3bc:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sensors+0x7>
     3c0:	80 39       	cpi	r24, 0x90	; 144
     3c2:	91 40       	sbci	r25, 0x01	; 1
     3c4:	30 f0       	brcs	.+12     	; 0x3d2 <motorControl+0x13e>
			set_motors(-50,-55);
     3c6:	69 ec       	ldi	r22, 0xC9	; 201
     3c8:	7f ef       	ldi	r23, 0xFF	; 255
     3ca:	8e ec       	ldi	r24, 0xCE	; 206
     3cc:	9f ef       	ldi	r25, 0xFF	; 255
     3ce:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		if (sensors[1] >=400)
     3d2:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensors+0x2>
     3d6:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensors+0x3>
     3da:	80 39       	cpi	r24, 0x90	; 144
     3dc:	91 40       	sbci	r25, 0x01	; 1
     3de:	70 f1       	brcs	.+92     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			set_motors(-55,-50);
     3e0:	6e ec       	ldi	r22, 0xCE	; 206
     3e2:	7f ef       	ldi	r23, 0xFF	; 255
     3e4:	89 ec       	ldi	r24, 0xC9	; 201
     3e6:	9f ef       	ldi	r25, 0xFF	; 255
     3e8:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
     3ec:	27 c0       	rjmp	.+78     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
	}
	
	
	else if(x == 'T'){														// Turn around
     3ee:	c4 35       	cpi	r28, 0x54	; 84
     3f0:	a1 f4       	brne	.+40     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		set_motors(-75,75);
     3f2:	6b e4       	ldi	r22, 0x4B	; 75
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	85 eb       	ldi	r24, 0xB5	; 181
     3f8:	9f ef       	ldi	r25, 0xFF	; 255
     3fa:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
		
		while (sensors[2] >=500)
     3fe:	05 c0       	rjmp	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			read_line(sensors,IR_EMITTERS_ON);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	8c e9       	ldi	r24, 0x9C	; 156
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
	
	
	else if(x == 'T'){														// Turn around
		set_motors(-75,75);
		
		while (sensors[2] >=500)
     40a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     40e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     412:	84 3f       	cpi	r24, 0xF4	; 244
     414:	91 40       	sbci	r25, 0x01	; 1
     416:	a0 f7       	brcc	.-24     	; 0x400 <__EEPROM_REGION_LENGTH__>
     418:	11 c0       	rjmp	.+34     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			read_line(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
     41a:	c0 35       	cpi	r28, 0x50	; 80
     41c:	79 f4       	brne	.+30     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     41e:	0a c0       	rjmp	.+20     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
		for( int i=50;i>=0;i-=2)
		{
			set_motors(i,i);
     420:	be 01       	movw	r22, r28
     422:	ce 01       	movw	r24, r28
     424:	0e 94 a1 0a 	call	0x1542	; 0x1542 <set_motors>
     428:	85 e0       	ldi	r24, 0x05	; 5
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
			read_line(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
		for( int i=50;i>=0;i-=2)
     430:	22 97       	sbiw	r28, 0x02	; 2
     432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     434:	c2 e3       	ldi	r28, 0x32	; 50
     436:	d0 e0       	ldi	r29, 0x00	; 0
     438:	dd 23       	and	r29, r29
     43a:	94 f7       	brge	.-28     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			set_motors(i,i);
			delay(5);
		}
		
		
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <lineType>:
}


char lineType(){																																	// function that returns the type of junction it detects
	while(1){																																		// >= 500 = black line		<=500 = white
		read_line(sensors,IR_EMITTERS_ON);
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	8c e9       	ldi	r24, 0x9C	; 156
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
		
		if (sensors[1] >=500 && sensors[3] >= 500){																									//Checks if its a X junction or a T junction
     44c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensors+0x2>
     450:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensors+0x3>
     454:	84 3f       	cpi	r24, 0xF4	; 244
     456:	21 e0       	ldi	r18, 0x01	; 1
     458:	92 07       	cpc	r25, r18
     45a:	08 f1       	brcs	.+66     	; 0x49e <lineType+0x5c>
     45c:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <sensors+0x6>
     460:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <sensors+0x7>
     464:	24 3f       	cpi	r18, 0xF4	; 244
     466:	31 40       	sbci	r19, 0x01	; 1
     468:	d0 f0       	brcs	.+52     	; 0x49e <lineType+0x5c>
			inch();
     46a:	0e 94 27 01 	call	0x24e	; 0x24e <inch>
			read_line(sensors,IR_EMITTERS_ON);
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	8c e9       	ldi	r24, 0x9C	; 156
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
	
			if (sensors[2] >=500){
     478:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     47c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     480:	84 3f       	cpi	r24, 0xF4	; 244
     482:	91 40       	sbci	r25, 0x01	; 1
     484:	30 f0       	brcs	.+12     	; 0x492 <lineType+0x50>
				println(X_junction);
     486:	88 e0       	ldi	r24, 0x08	; 8
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 38 01 	call	0x270	; 0x270 <println>
				return X_junction;
     48e:	88 e0       	ldi	r24, 0x08	; 8
     490:	08 95       	ret
			}
			else {
				println(T_junction);
     492:	87 e0       	ldi	r24, 0x07	; 7
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 38 01 	call	0x270	; 0x270 <println>
				return T_junction;
     49a:	87 e0       	ldi	r24, 0x07	; 7
     49c:	08 95       	ret
			}
		}
			
			
		else if (sensors[1] >=500 && sensors[0] >= 500){																							//Checks if its a left corner or a straight with left corner
     49e:	84 3f       	cpi	r24, 0xF4	; 244
     4a0:	21 e0       	ldi	r18, 0x01	; 1
     4a2:	92 07       	cpc	r25, r18
     4a4:	40 f1       	brcs	.+80     	; 0x4f6 <lineType+0xb4>
     4a6:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <sensors>
     4aa:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <sensors+0x1>
     4ae:	24 3f       	cpi	r18, 0xF4	; 244
     4b0:	31 40       	sbci	r19, 0x01	; 1
     4b2:	08 f1       	brcs	.+66     	; 0x4f6 <lineType+0xb4>
			inch();
     4b4:	0e 94 27 01 	call	0x24e	; 0x24e <inch>
			read_line(sensors,IR_EMITTERS_ON);
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	8c e9       	ldi	r24, 0x9C	; 156
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
			
			if (sensors[2] >= 500 || sensors[3] >=500){
     4c2:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     4c6:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     4ca:	84 3f       	cpi	r24, 0xF4	; 244
     4cc:	91 40       	sbci	r25, 0x01	; 1
     4ce:	38 f4       	brcc	.+14     	; 0x4de <lineType+0x9c>
     4d0:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <sensors+0x6>
     4d4:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <sensors+0x7>
     4d8:	84 3f       	cpi	r24, 0xF4	; 244
     4da:	91 40       	sbci	r25, 0x01	; 1
     4dc:	30 f0       	brcs	.+12     	; 0x4ea <lineType+0xa8>
				println(Straight_left_junction);
     4de:	86 e0       	ldi	r24, 0x06	; 6
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 38 01 	call	0x270	; 0x270 <println>
				return Straight_left_junction;
     4e6:	86 e0       	ldi	r24, 0x06	; 6
     4e8:	08 95       	ret
			}
			else{
				println(Left_corner);
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 38 01 	call	0x270	; 0x270 <println>
				return Left_corner;
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	08 95       	ret
			}
		}
		
		
		else if (sensors[3] >=500 && sensors[4] >= 500){																							//Checks if its a right corner or a straight with right corner
     4f6:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <sensors+0x6>
     4fa:	50 91 a3 01 	lds	r21, 0x01A3	; 0x8001a3 <sensors+0x7>
     4fe:	44 3f       	cpi	r20, 0xF4	; 244
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	56 07       	cpc	r21, r22
     504:	40 f1       	brcs	.+80     	; 0x556 <lineType+0x114>
     506:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <sensors+0x8>
     50a:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <sensors+0x9>
     50e:	24 3f       	cpi	r18, 0xF4	; 244
     510:	31 40       	sbci	r19, 0x01	; 1
     512:	08 f1       	brcs	.+66     	; 0x556 <lineType+0x114>
			inch();
     514:	0e 94 27 01 	call	0x24e	; 0x24e <inch>
			read_line(sensors,IR_EMITTERS_ON);
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	8c e9       	ldi	r24, 0x9C	; 156
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
			
			if (sensors[2] >= 500 || sensors[1] >=500){
     522:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <sensors+0x4>
     526:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <sensors+0x5>
     52a:	84 3f       	cpi	r24, 0xF4	; 244
     52c:	91 40       	sbci	r25, 0x01	; 1
     52e:	38 f4       	brcc	.+14     	; 0x53e <lineType+0xfc>
     530:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <sensors+0x2>
     534:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <sensors+0x3>
     538:	84 3f       	cpi	r24, 0xF4	; 244
     53a:	91 40       	sbci	r25, 0x01	; 1
     53c:	30 f0       	brcs	.+12     	; 0x54a <lineType+0x108>
				println(Straight_right_junction);
     53e:	85 e0       	ldi	r24, 0x05	; 5
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 38 01 	call	0x270	; 0x270 <println>
				return Straight_right_junction;
     546:	85 e0       	ldi	r24, 0x05	; 5
     548:	08 95       	ret
			}
			else{
				println(Straight_left_junction);
     54a:	86 e0       	ldi	r24, 0x06	; 6
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 38 01 	call	0x270	; 0x270 <println>
				return Right_corner;
     552:	84 e0       	ldi	r24, 0x04	; 4
     554:	08 95       	ret
			}
		}
		
		
		else if(sensors[2] <=200){
     556:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <sensors+0x4>
     55a:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <sensors+0x5>
     55e:	29 3c       	cpi	r18, 0xC9	; 201
     560:	31 05       	cpc	r19, r1
     562:	30 f4       	brcc	.+12     	; 0x570 <lineType+0x12e>
			println(Line_end);																													// check if the line ends	
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 38 01 	call	0x270	; 0x270 <println>
			return Line_end;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret
		}

		
		else if (sensors[2] >=500){																													//Checks if the line is straight
     570:	24 3f       	cpi	r18, 0xF4	; 244
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	36 07       	cpc	r19, r22
     576:	08 f4       	brcc	.+2      	; 0x57a <lineType+0x138>
     578:	64 cf       	rjmp	.-312    	; 0x442 <lineType>
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500))			//Checks the line for a "Barcode"
     57a:	24 3f       	cpi	r18, 0xF4	; 244
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	36 07       	cpc	r19, r22
     580:	a0 f1       	brcs	.+104    	; 0x5ea <lineType+0x1a8>
     582:	45 3f       	cpi	r20, 0xF5	; 245
     584:	51 40       	sbci	r21, 0x01	; 1
     586:	88 f5       	brcc	.+98     	; 0x5ea <lineType+0x1a8>
     588:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <sensors+0x8>
     58c:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <sensors+0x9>
     590:	44 3f       	cpi	r20, 0xF4	; 244
     592:	51 40       	sbci	r21, 0x01	; 1
     594:	50 f1       	brcs	.+84     	; 0x5ea <lineType+0x1a8>
     596:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <sensors>
     59a:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <sensors+0x1>
     59e:	44 3f       	cpi	r20, 0xF4	; 244
     5a0:	51 40       	sbci	r21, 0x01	; 1
     5a2:	18 f1       	brcs	.+70     	; 0x5ea <lineType+0x1a8>
     5a4:	85 3f       	cpi	r24, 0xF5	; 245
     5a6:	91 40       	sbci	r25, 0x01	; 1
     5a8:	00 f5       	brcc	.+64     	; 0x5ea <lineType+0x1a8>
     5aa:	24 3f       	cpi	r18, 0xF4	; 244
     5ac:	31 40       	sbci	r19, 0x01	; 1
     5ae:	48 f4       	brcc	.+18     	; 0x5c2 <lineType+0x180>
     5b0:	1c c0       	rjmp	.+56     	; 0x5ea <lineType+0x1a8>
			{
				while(sensors[4] >= 400 || sensors[0] >=400)
				{
					read_line(sensors,IR_EMITTERS_ON);
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	8c e9       	ldi	r24, 0x9C	; 156
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <read_line>
					motorControl('S');
     5bc:	83 e5       	ldi	r24, 0x53	; 83
     5be:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>

		
		else if (sensors[2] >=500){																													//Checks if the line is straight
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500))			//Checks the line for a "Barcode"
			{
				while(sensors[4] >= 400 || sensors[0] >=400)
     5c2:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <sensors+0x8>
     5c6:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <sensors+0x9>
     5ca:	80 39       	cpi	r24, 0x90	; 144
     5cc:	91 40       	sbci	r25, 0x01	; 1
     5ce:	88 f7       	brcc	.-30     	; 0x5b2 <lineType+0x170>
     5d0:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <sensors>
     5d4:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <sensors+0x1>
     5d8:	80 39       	cpi	r24, 0x90	; 144
     5da:	91 40       	sbci	r25, 0x01	; 1
     5dc:	50 f7       	brcc	.-44     	; 0x5b2 <lineType+0x170>
				{
					read_line(sensors,IR_EMITTERS_ON);
					motorControl('S');
				}
				println(Barcode);
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 38 01 	call	0x270	; 0x270 <println>
				return Barcode;
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	08 95       	ret
			}
			else{
				println(Straight);
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 38 01 	call	0x270	; 0x270 <println>
				return Straight;
     5f2:	80 e0       	ldi	r24, 0x00	; 0
			}																									// check if its straight without any corners
			
		}	
	}
}
     5f4:	08 95       	ret

000005f6 <parcour>:

char richting;

Junctions situatie = Straight;

char parcour(char *route) {
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
	while(1) {
		situatie = lineType();
     5fc:	0e 94 21 02 	call	0x442	; 0x442 <lineType>
     600:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <situatie>
		
		switch (situatie) {
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	89 30       	cpi	r24, 0x09	; 9
     608:	91 05       	cpc	r25, r1
     60a:	e0 f5       	brcc	.+120    	; 0x684 <parcour+0x8e>
     60c:	fc 01       	movw	r30, r24
     60e:	ec 5c       	subi	r30, 0xCC	; 204
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__tablejump2__>
			
			case X_junction:
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
				motorControl('L');
     616:	8c e4       	ldi	r24, 0x4C	; 76
     618:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
				richting = 'L';
     61c:	8c e4       	ldi	r24, 0x4C	; 76
     61e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
				strncat(route, &richting, 1);
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	66 ea       	ldi	r22, 0xA6	; 166
     628:	71 e0       	ldi	r23, 0x01	; 1
     62a:	ce 01       	movw	r24, r28
     62c:	0e 94 a0 12 	call	0x2540	; 0x2540 <strncat>
				break;
     630:	29 c0       	rjmp	.+82     	; 0x684 <parcour+0x8e>
			
			case Right_corner:
				motorControl('R');
     632:	82 e5       	ldi	r24, 0x52	; 82
     634:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
				richting = 'R';
     638:	82 e5       	ldi	r24, 0x52	; 82
     63a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
				strncat(route, &richting, 1);
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	66 ea       	ldi	r22, 0xA6	; 166
     644:	71 e0       	ldi	r23, 0x01	; 1
     646:	ce 01       	movw	r24, r28
     648:	0e 94 a0 12 	call	0x2540	; 0x2540 <strncat>
				break;
     64c:	1b c0       	rjmp	.+54     	; 0x684 <parcour+0x8e>
			
			case Straight_right_junction:
				richting = 'S';
     64e:	83 e5       	ldi	r24, 0x53	; 83
     650:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
				strncat(route, &richting, 1);
     654:	41 e0       	ldi	r20, 0x01	; 1
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	66 ea       	ldi	r22, 0xA6	; 166
     65a:	71 e0       	ldi	r23, 0x01	; 1
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 a0 12 	call	0x2540	; 0x2540 <strncat>
			case Straight:
				motorControl('S');
     662:	83 e5       	ldi	r24, 0x53	; 83
     664:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
				break;
     668:	0d c0       	rjmp	.+26     	; 0x684 <parcour+0x8e>
			
			case Line_end:
				motorControl('T');
     66a:	84 e5       	ldi	r24, 0x54	; 84
     66c:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
				richting = 'T';
     670:	84 e5       	ldi	r24, 0x54	; 84
     672:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
				strncat(route, &richting, 1);
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	66 ea       	ldi	r22, 0xA6	; 166
     67c:	71 e0       	ldi	r23, 0x01	; 1
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 a0 12 	call	0x2540	; 0x2540 <strncat>
				break;
		}
		
		
		if (route[-2] == 'T') {
     684:	fe 01       	movw	r30, r28
     686:	32 97       	sbiw	r30, 0x02	; 2
     688:	80 81       	ld	r24, Z
     68a:	84 35       	cpi	r24, 0x54	; 84
     68c:	09 f0       	breq	.+2      	; 0x690 <parcour+0x9a>
     68e:	b6 cf       	rjmp	.-148    	; 0x5fc <parcour+0x6>
			route[strlen(route)-3] = '\0';
     690:	fe 01       	movw	r30, r28
     692:	01 90       	ld	r0, Z+
     694:	00 20       	and	r0, r0
     696:	e9 f7       	brne	.-6      	; 0x692 <parcour+0x9c>
     698:	31 97       	sbiw	r30, 0x01	; 1
     69a:	ec 1b       	sub	r30, r28
     69c:	fd 0b       	sbc	r31, r29
     69e:	33 97       	sbiw	r30, 0x03	; 3
     6a0:	ec 0f       	add	r30, r28
     6a2:	fd 1f       	adc	r31, r29
     6a4:	10 82       	st	Z, r1
			if (route[-3] == 'L' && route[-1] == 'L') {
     6a6:	fe 01       	movw	r30, r28
     6a8:	33 97       	sbiw	r30, 0x03	; 3
     6aa:	80 81       	ld	r24, Z
     6ac:	8c 34       	cpi	r24, 0x4C	; 76
     6ae:	41 f4       	brne	.+16     	; 0x6c0 <parcour+0xca>
     6b0:	32 96       	adiw	r30, 0x02	; 2
     6b2:	90 81       	ld	r25, Z
     6b4:	9c 34       	cpi	r25, 0x4C	; 76
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <parcour+0xca>
				richting = 'S';
     6b8:	83 e5       	ldi	r24, 0x53	; 83
     6ba:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
     6be:	2b c0       	rjmp	.+86     	; 0x716 <parcour+0x120>
			} else if (route[-3] == 'S' && route[-1] == 'L'){
     6c0:	83 35       	cpi	r24, 0x53	; 83
     6c2:	49 f4       	brne	.+18     	; 0x6d6 <parcour+0xe0>
     6c4:	fe 01       	movw	r30, r28
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	90 81       	ld	r25, Z
     6ca:	9c 34       	cpi	r25, 0x4C	; 76
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <parcour+0xe0>
				richting = 'R';			
     6ce:	82 e5       	ldi	r24, 0x52	; 82
     6d0:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
     6d4:	20 c0       	rjmp	.+64     	; 0x716 <parcour+0x120>
			} else if (route[-3] == 'R' && route[-1] == 'L'){
     6d6:	82 35       	cpi	r24, 0x52	; 82
     6d8:	49 f4       	brne	.+18     	; 0x6ec <parcour+0xf6>
     6da:	fe 01       	movw	r30, r28
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	90 81       	ld	r25, Z
     6e0:	9c 34       	cpi	r25, 0x4C	; 76
     6e2:	21 f4       	brne	.+8      	; 0x6ec <parcour+0xf6>
				richting = 'T';			
     6e4:	84 e5       	ldi	r24, 0x54	; 84
     6e6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
     6ea:	15 c0       	rjmp	.+42     	; 0x716 <parcour+0x120>
			} else if (route[-3] == 'L' && route[-1] == 'R'){
     6ec:	8c 34       	cpi	r24, 0x4C	; 76
     6ee:	49 f4       	brne	.+18     	; 0x702 <parcour+0x10c>
     6f0:	fe 01       	movw	r30, r28
     6f2:	31 97       	sbiw	r30, 0x01	; 1
     6f4:	90 81       	ld	r25, Z
     6f6:	92 35       	cpi	r25, 0x52	; 82
     6f8:	21 f4       	brne	.+8      	; 0x702 <parcour+0x10c>
				richting = 'T';			
     6fa:	84 e5       	ldi	r24, 0x54	; 84
     6fc:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
     700:	0a c0       	rjmp	.+20     	; 0x716 <parcour+0x120>
			} else if (route[-3] == 'L' && route[-1] == 'S'){
     702:	8c 34       	cpi	r24, 0x4C	; 76
     704:	41 f4       	brne	.+16     	; 0x716 <parcour+0x120>
     706:	fe 01       	movw	r30, r28
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	80 81       	ld	r24, Z
     70c:	83 35       	cpi	r24, 0x53	; 83
     70e:	19 f4       	brne	.+6      	; 0x716 <parcour+0x120>
				richting = 'R';			
     710:	82 e5       	ldi	r24, 0x52	; 82
     712:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <richting>
			}
			strncat(route, &richting, 1);				
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	66 ea       	ldi	r22, 0xA6	; 166
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	ce 01       	movw	r24, r28
     720:	0e 94 a0 12 	call	0x2540	; 0x2540 <strncat>
     724:	6b cf       	rjmp	.-298    	; 0x5fc <parcour+0x6>
	while(1) {
		situatie = lineType();
		
		switch (situatie) {
			case Barcode: // end of parcour
				warehouse();
     726:	0e 94 42 05 	call	0xa84	; 0xa84 <warehouse>
			}
			strncat(route, &richting, 1);				
		}
	}
	return 0;
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(int *a, int *b) {
    int temp = *a;
     732:	fc 01       	movw	r30, r24
     734:	20 81       	ld	r18, Z
     736:	31 81       	ldd	r19, Z+1	; 0x01
    *a = *b;
     738:	fb 01       	movw	r30, r22
     73a:	40 81       	ld	r20, Z
     73c:	51 81       	ldd	r21, Z+1	; 0x01
     73e:	fc 01       	movw	r30, r24
     740:	51 83       	std	Z+1, r21	; 0x01
     742:	40 83       	st	Z, r20
    *b = temp;
     744:	fb 01       	movw	r30, r22
     746:	31 83       	std	Z+1, r19	; 0x01
     748:	20 83       	st	Z, r18
     74a:	08 95       	ret

0000074c <bubbleSort>:
}

void bubbleSort(int arr[],int orderY[], int n) {
     74c:	6f 92       	push	r6
     74e:	7f 92       	push	r7
     750:	8f 92       	push	r8
     752:	9f 92       	push	r9
     754:	af 92       	push	r10
     756:	bf 92       	push	r11
     758:	cf 92       	push	r12
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	6c 01       	movw	r12, r24
     76a:	3b 01       	movw	r6, r22
     76c:	4a 01       	movw	r8, r20
    for (int i = 0; i < n - 1; i++) {
     76e:	a1 2c       	mov	r10, r1
     770:	b1 2c       	mov	r11, r1
     772:	30 c0       	rjmp	.+96     	; 0x7d4 <bubbleSort+0x88>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
     774:	7e 01       	movw	r14, r28
     776:	ee 0c       	add	r14, r14
     778:	ff 1c       	adc	r15, r15
     77a:	f6 01       	movw	r30, r12
     77c:	ee 0d       	add	r30, r14
     77e:	ff 1d       	adc	r31, r15
     780:	20 81       	ld	r18, Z
     782:	31 81       	ldd	r19, Z+1	; 0x01
     784:	8e 01       	movw	r16, r28
     786:	0f 5f       	subi	r16, 0xFF	; 255
     788:	1f 4f       	sbci	r17, 0xFF	; 255
     78a:	00 0f       	add	r16, r16
     78c:	11 1f       	adc	r17, r17
     78e:	d6 01       	movw	r26, r12
     790:	a0 0f       	add	r26, r16
     792:	b1 1f       	adc	r27, r17
     794:	8d 91       	ld	r24, X+
     796:	9c 91       	ld	r25, X
     798:	11 97       	sbiw	r26, 0x01	; 1
     79a:	82 17       	cp	r24, r18
     79c:	93 07       	cpc	r25, r19
     79e:	64 f4       	brge	.+24     	; 0x7b8 <bubbleSort+0x6c>
                swap(&arr[j], &arr[j + 1]);
     7a0:	bd 01       	movw	r22, r26
     7a2:	cf 01       	movw	r24, r30
     7a4:	0e 94 99 03 	call	0x732	; 0x732 <swap>
                swap(&orderY[j], &orderY[j + 1]);
     7a8:	b3 01       	movw	r22, r6
     7aa:	60 0f       	add	r22, r16
     7ac:	71 1f       	adc	r23, r17
     7ae:	c3 01       	movw	r24, r6
     7b0:	8e 0d       	add	r24, r14
     7b2:	9f 1d       	adc	r25, r15
     7b4:	0e 94 99 03 	call	0x732	; 0x732 <swap>
    *b = temp;
}

void bubbleSort(int arr[],int orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
     7b8:	21 96       	adiw	r28, 0x01	; 1
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <bubbleSort+0x74>
     7bc:	c0 e0       	ldi	r28, 0x00	; 0
     7be:	d0 e0       	ldi	r29, 0x00	; 0
     7c0:	c4 01       	movw	r24, r8
     7c2:	8a 19       	sub	r24, r10
     7c4:	9b 09       	sbc	r25, r11
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	c8 17       	cp	r28, r24
     7ca:	d9 07       	cpc	r29, r25
     7cc:	9c f2       	brlt	.-90     	; 0x774 <bubbleSort+0x28>
    *a = *b;
    *b = temp;
}

void bubbleSort(int arr[],int orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	a8 1a       	sub	r10, r24
     7d2:	b8 0a       	sbc	r11, r24
     7d4:	c4 01       	movw	r24, r8
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	a8 16       	cp	r10, r24
     7da:	b9 06       	cpc	r11, r25
     7dc:	7c f3       	brlt	.-34     	; 0x7bc <bubbleSort+0x70>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	08 95       	ret

000007fc <drive>:



void drive(int junctions)
{
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	7c 01       	movw	r14, r24
	Junctions situatie;
	motorControl('S');
     80a:	83 e5       	ldi	r24, 0x53	; 83
     80c:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
	int driving = 1;
	int count = 0;
     810:	00 e0       	ldi	r16, 0x00	; 0
     812:	10 e0       	ldi	r17, 0x00	; 0

void drive(int junctions)
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
     814:	c1 e0       	ldi	r28, 0x01	; 1
     816:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;
	while(driving) {
     818:	1a c0       	rjmp	.+52     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
		situatie = lineType();
     81a:	0e 94 21 02 	call	0x442	; 0x442 <lineType>
		//clear();
		switch (situatie) {
     81e:	99 27       	eor	r25, r25
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	21 f0       	breq	.+8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     824:	03 97       	sbiw	r24, 0x03	; 3
     826:	06 97       	sbiw	r24, 0x06	; 6
     828:	28 f0       	brcs	.+10     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     82a:	11 c0       	rjmp	.+34     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			case Barcode: // end of parcour
			//motorControl('N');
			break;
			
			case Straight:
			motorControl('S');
     82c:	83 e5       	ldi	r24, 0x53	; 83
     82e:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
			break;
     832:	0d c0       	rjmp	.+26     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
     834:	0f 5f       	subi	r16, 0xFF	; 255
     836:	1f 4f       	sbci	r17, 0xFF	; 255
				motorControl('S');
     838:	83 e5       	ldi	r24, 0x53	; 83
     83a:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
				if(count == junctions)
     83e:	0e 15       	cp	r16, r14
     840:	1f 05       	cpc	r17, r15
     842:	29 f4       	brne	.+10     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
				{
					motorControl('N');
     844:	8e e4       	ldi	r24, 0x4E	; 78
     846:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					driving = 0;
     84a:	c0 e0       	ldi	r28, 0x00	; 0
     84c:	d0 e0       	ldi	r29, 0x00	; 0
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
	int count = 0;
	while(driving) {
     84e:	20 97       	sbiw	r28, 0x00	; 0
     850:	21 f7       	brne	.-56     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
			
			
		}
		
	}
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	ff 90       	pop	r15
     85c:	ef 90       	pop	r14
     85e:	08 95       	ret

00000860 <waitForTurn>:

void waitForTurn()
{
     860:	cf 93       	push	r28
     862:	8f e0       	ldi	r24, 0x0F	; 15
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
     86a:	03 c0       	rjmp	.+6      	; 0x872 <waitForTurn+0x12>
	Junctions lijn;
	delay(15);
	while(lijn != Straight)
	{
		lijn  = lineType();
     86c:	0e 94 21 02 	call	0x442	; 0x442 <lineType>
     870:	c8 2f       	mov	r28, r24

void waitForTurn()
{
	Junctions lijn;
	delay(15);
	while(lijn != Straight)
     872:	c1 11       	cpse	r28, r1
     874:	fb cf       	rjmp	.-10     	; 0x86c <waitForTurn+0xc>
	{
		lijn  = lineType();
	}
	motorControl('N');
     876:	8e e4       	ldi	r24, 0x4E	; 78
     878:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
}
     87c:	cf 91       	pop	r28
     87e:	08 95       	ret

00000880 <turnRobot>:

void turnRobot(char direction, piRobot *myRobot)
{
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	c8 2f       	mov	r28, r24
     88c:	8b 01       	movw	r16, r22
    int changing = 1;
     88e:	ee 24       	eor	r14, r14
     890:	e3 94       	inc	r14
     892:	f1 2c       	mov	r15, r1

    while(changing==1)
     894:	9a c0       	rjmp	.+308    	; 0x9ca <__stack+0xcb>
    {
		
        switch(myRobot->direction)
     896:	f8 01       	movw	r30, r16
     898:	84 81       	ldd	r24, Z+4	; 0x04
     89a:	8e 34       	cpi	r24, 0x4E	; 78
     89c:	59 f0       	breq	.+22     	; 0x8b4 <turnRobot+0x34>
     89e:	18 f4       	brcc	.+6      	; 0x8a6 <turnRobot+0x26>
     8a0:	85 34       	cpi	r24, 0x45	; 69
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <turnRobot+0x78>
     8a4:	8c c0       	rjmp	.+280    	; 0x9be <__stack+0xbf>
     8a6:	83 35       	cpi	r24, 0x53	; 83
     8a8:	09 f4       	brne	.+2      	; 0x8ac <turnRobot+0x2c>
     8aa:	48 c0       	rjmp	.+144    	; 0x93c <__stack+0x3d>
     8ac:	87 35       	cpi	r24, 0x57	; 87
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <turnRobot+0x32>
     8b0:	66 c0       	rjmp	.+204    	; 0x97e <__stack+0x7f>
     8b2:	85 c0       	rjmp	.+266    	; 0x9be <__stack+0xbf>
        {
            case 'N':
                if(direction == 'E')
     8b4:	c5 34       	cpi	r28, 0x45	; 69
     8b6:	49 f4       	brne	.+18     	; 0x8ca <turnRobot+0x4a>
                {
                    motorControl('R');
     8b8:	82 e5       	ldi	r24, 0x52	; 82
     8ba:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     8be:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'E';
     8c2:	85 e4       	ldi	r24, 0x45	; 69
     8c4:	f8 01       	movw	r30, r16
     8c6:	84 83       	std	Z+4, r24	; 0x04
     8c8:	7a c0       	rjmp	.+244    	; 0x9be <__stack+0xbf>
                }
                else if(direction == 'W')
     8ca:	c7 35       	cpi	r28, 0x57	; 87
     8cc:	49 f4       	brne	.+18     	; 0x8e0 <turnRobot+0x60>
                {
                    motorControl('L');
     8ce:	8c e4       	ldi	r24, 0x4C	; 76
     8d0:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     8d4:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'W';
     8d8:	87 e5       	ldi	r24, 0x57	; 87
     8da:	f8 01       	movw	r30, r16
     8dc:	84 83       	std	Z+4, r24	; 0x04
     8de:	6f c0       	rjmp	.+222    	; 0x9be <__stack+0xbf>
                }
                else if(direction == 'S')
     8e0:	c3 35       	cpi	r28, 0x53	; 83
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <turnRobot+0x66>
     8e4:	6c c0       	rjmp	.+216    	; 0x9be <__stack+0xbf>
                {
                    motorControl('T');
     8e6:	84 e5       	ldi	r24, 0x54	; 84
     8e8:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     8ec:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'S';
     8f0:	83 e5       	ldi	r24, 0x53	; 83
     8f2:	f8 01       	movw	r30, r16
     8f4:	84 83       	std	Z+4, r24	; 0x04
     8f6:	63 c0       	rjmp	.+198    	; 0x9be <__stack+0xbf>
                }
                break;
            case 'E':
                if(direction == 'S')
     8f8:	c3 35       	cpi	r28, 0x53	; 83
     8fa:	49 f4       	brne	.+18     	; 0x90e <__stack+0xf>
                {
                    motorControl('R');
     8fc:	82 e5       	ldi	r24, 0x52	; 82
     8fe:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     902:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'S';
     906:	83 e5       	ldi	r24, 0x53	; 83
     908:	f8 01       	movw	r30, r16
     90a:	84 83       	std	Z+4, r24	; 0x04
     90c:	58 c0       	rjmp	.+176    	; 0x9be <__stack+0xbf>
                }
                else if(direction == 'W')
     90e:	c7 35       	cpi	r28, 0x57	; 87
     910:	49 f4       	brne	.+18     	; 0x924 <__stack+0x25>
                {
                    motorControl('L');
     912:	8c e4       	ldi	r24, 0x4C	; 76
     914:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     918:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'W';
     91c:	87 e5       	ldi	r24, 0x57	; 87
     91e:	f8 01       	movw	r30, r16
     920:	84 83       	std	Z+4, r24	; 0x04
     922:	4d c0       	rjmp	.+154    	; 0x9be <__stack+0xbf>
                }
                else if(direction == 'S')
     924:	c3 35       	cpi	r28, 0x53	; 83
     926:	09 f0       	breq	.+2      	; 0x92a <__stack+0x2b>
     928:	4a c0       	rjmp	.+148    	; 0x9be <__stack+0xbf>
                {
                    motorControl('T');
     92a:	84 e5       	ldi	r24, 0x54	; 84
     92c:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     930:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'S';
     934:	83 e5       	ldi	r24, 0x53	; 83
     936:	f8 01       	movw	r30, r16
     938:	84 83       	std	Z+4, r24	; 0x04
     93a:	41 c0       	rjmp	.+130    	; 0x9be <__stack+0xbf>
                }
                break;
            case 'S':
                if(direction == 'W')
     93c:	c7 35       	cpi	r28, 0x57	; 87
     93e:	49 f4       	brne	.+18     	; 0x952 <__stack+0x53>
                {
                    motorControl('R');
     940:	82 e5       	ldi	r24, 0x52	; 82
     942:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     946:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'W';
     94a:	87 e5       	ldi	r24, 0x57	; 87
     94c:	f8 01       	movw	r30, r16
     94e:	84 83       	std	Z+4, r24	; 0x04
     950:	36 c0       	rjmp	.+108    	; 0x9be <__stack+0xbf>
                }
                else if(direction == 'E')
     952:	c5 34       	cpi	r28, 0x45	; 69
     954:	49 f4       	brne	.+18     	; 0x968 <__stack+0x69>
                {
                    motorControl('L');
     956:	8c e4       	ldi	r24, 0x4C	; 76
     958:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     95c:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'E';
     960:	85 e4       	ldi	r24, 0x45	; 69
     962:	f8 01       	movw	r30, r16
     964:	84 83       	std	Z+4, r24	; 0x04
     966:	2b c0       	rjmp	.+86     	; 0x9be <__stack+0xbf>
                }
                else if(direction == 'N')
     968:	ce 34       	cpi	r28, 0x4E	; 78
     96a:	49 f5       	brne	.+82     	; 0x9be <__stack+0xbf>
                {
                    motorControl('T');
     96c:	84 e5       	ldi	r24, 0x54	; 84
     96e:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     972:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'N';
     976:	8e e4       	ldi	r24, 0x4E	; 78
     978:	f8 01       	movw	r30, r16
     97a:	84 83       	std	Z+4, r24	; 0x04
     97c:	20 c0       	rjmp	.+64     	; 0x9be <__stack+0xbf>
                }
                break;
            case 'W':
                if(direction == 'N')
     97e:	ce 34       	cpi	r28, 0x4E	; 78
     980:	49 f4       	brne	.+18     	; 0x994 <__stack+0x95>
                {
					
                    motorControl('R');
     982:	82 e5       	ldi	r24, 0x52	; 82
     984:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     988:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'N';
     98c:	8e e4       	ldi	r24, 0x4E	; 78
     98e:	f8 01       	movw	r30, r16
     990:	84 83       	std	Z+4, r24	; 0x04
     992:	15 c0       	rjmp	.+42     	; 0x9be <__stack+0xbf>
                }
                else if(direction == 'S')
     994:	c3 35       	cpi	r28, 0x53	; 83
     996:	49 f4       	brne	.+18     	; 0x9aa <__stack+0xab>
                {
                    motorControl('L');
     998:	8c e4       	ldi	r24, 0x4C	; 76
     99a:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     99e:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'S';
     9a2:	83 e5       	ldi	r24, 0x53	; 83
     9a4:	f8 01       	movw	r30, r16
     9a6:	84 83       	std	Z+4, r24	; 0x04
     9a8:	0a c0       	rjmp	.+20     	; 0x9be <__stack+0xbf>
                }
                else if(direction == 'E')
     9aa:	c5 34       	cpi	r28, 0x45	; 69
     9ac:	41 f4       	brne	.+16     	; 0x9be <__stack+0xbf>
                {
                    motorControl('T');
     9ae:	84 e5       	ldi	r24, 0x54	; 84
     9b0:	0e 94 4a 01 	call	0x294	; 0x294 <motorControl>
					waitForTurn();
     9b4:	0e 94 30 04 	call	0x860	; 0x860 <waitForTurn>
                    myRobot->direction = 'E';
     9b8:	85 e4       	ldi	r24, 0x45	; 69
     9ba:	f8 01       	movw	r30, r16
     9bc:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
		
				if(myRobot->direction == direction)
     9be:	f8 01       	movw	r30, r16
     9c0:	84 81       	ldd	r24, Z+4	; 0x04
     9c2:	c8 13       	cpse	r28, r24
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
				{
					changing = 0;
     9c6:	e1 2c       	mov	r14, r1
     9c8:	f1 2c       	mov	r15, r1

void turnRobot(char direction, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
     9ca:	f1 e0       	ldi	r31, 0x01	; 1
     9cc:	ef 16       	cp	r14, r31
     9ce:	f1 04       	cpc	r15, r1
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <__stack+0xd5>
     9d2:	61 cf       	rjmp	.-318    	; 0x896 <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	08 95       	ret

000009e0 <moveX>:


void moveX(int orderPos, piRobot *robot)
{
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
	
    int junctions;
	
	
    if(robot->posX != orderPos)
     9e8:	fb 01       	movw	r30, r22
     9ea:	20 81       	ld	r18, Z
     9ec:	31 81       	ldd	r19, Z+1	; 0x01
     9ee:	28 17       	cp	r18, r24
     9f0:	39 07       	cpc	r19, r25
     9f2:	d1 f0       	breq	.+52     	; 0xa28 <moveX+0x48>
     9f4:	8b 01       	movw	r16, r22
     9f6:	ec 01       	movw	r28, r24
    {
		
        if(robot->posX < orderPos)
     9f8:	28 17       	cp	r18, r24
     9fa:	39 07       	cpc	r19, r25
     9fc:	5c f4       	brge	.+22     	; 0xa14 <moveX+0x34>
        {
            turnRobot('W', robot);
     9fe:	87 e5       	ldi	r24, 0x57	; 87
     a00:	0e 94 40 04 	call	0x880	; 0x880 <turnRobot>
            junctions = orderPos-robot->posX;
     a04:	f8 01       	movw	r30, r16
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	9e 01       	movw	r18, r28
     a0c:	28 1b       	sub	r18, r24
     a0e:	39 0b       	sbc	r19, r25
     a10:	c9 01       	movw	r24, r18
     a12:	08 c0       	rjmp	.+16     	; 0xa24 <moveX+0x44>
        }
        else{
            turnRobot('E', robot);
     a14:	85 e4       	ldi	r24, 0x45	; 69
     a16:	0e 94 40 04 	call	0x880	; 0x880 <turnRobot>
            junctions = robot->posX - orderPos;
     a1a:	f8 01       	movw	r30, r16
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	8c 1b       	sub	r24, r28
     a22:	9d 0b       	sbc	r25, r29
        }

        
		drive(junctions);
     a24:	0e 94 fe 03 	call	0x7fc	; 0x7fc <drive>
        

    }
}
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <moveY>:

void moveY(int orderPos, piRobot *robot)
{
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
     a3a:	fb 01       	movw	r30, r22
     a3c:	22 81       	ldd	r18, Z+2	; 0x02
     a3e:	33 81       	ldd	r19, Z+3	; 0x03
     a40:	28 17       	cp	r18, r24
     a42:	39 07       	cpc	r19, r25
     a44:	d1 f0       	breq	.+52     	; 0xa7a <moveY+0x48>
     a46:	8b 01       	movw	r16, r22
     a48:	ec 01       	movw	r28, r24
    {
        if(robot->posY < orderPos)
     a4a:	28 17       	cp	r18, r24
     a4c:	39 07       	cpc	r19, r25
     a4e:	5c f4       	brge	.+22     	; 0xa66 <moveY+0x34>
        {
            turnRobot('N', robot);
     a50:	8e e4       	ldi	r24, 0x4E	; 78
     a52:	0e 94 40 04 	call	0x880	; 0x880 <turnRobot>
            junctions = orderPos-robot->posY;
     a56:	f8 01       	movw	r30, r16
     a58:	82 81       	ldd	r24, Z+2	; 0x02
     a5a:	93 81       	ldd	r25, Z+3	; 0x03
     a5c:	9e 01       	movw	r18, r28
     a5e:	28 1b       	sub	r18, r24
     a60:	39 0b       	sbc	r19, r25
     a62:	c9 01       	movw	r24, r18
     a64:	08 c0       	rjmp	.+16     	; 0xa76 <moveY+0x44>
        }
        else{
            turnRobot('S', robot);
     a66:	83 e5       	ldi	r24, 0x53	; 83
     a68:	0e 94 40 04 	call	0x880	; 0x880 <turnRobot>
            junctions = robot->posY - orderPos;
     a6c:	f8 01       	movw	r30, r16
     a6e:	82 81       	ldd	r24, Z+2	; 0x02
     a70:	93 81       	ldd	r25, Z+3	; 0x03
     a72:	8c 1b       	sub	r24, r28
     a74:	9d 0b       	sbc	r25, r29
        }

            drive(junctions);
     a76:	0e 94 fe 03 	call	0x7fc	; 0x7fc <drive>
        

    }
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	08 95       	ret

00000a84 <warehouse>:


void warehouse(void)
{
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	69 97       	sbiw	r28, 0x19	; 25
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
 piRobot robot;
 robot.direction = 'W';
     aa8:	87 e5       	ldi	r24, 0x57	; 87
     aaa:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = -1;
     aac:	8f ef       	ldi	r24, 0xFF	; 255
     aae:	9f ef       	ldi	r25, 0xFF	; 255
     ab0:	9a 83       	std	Y+2, r25	; 0x02
     ab2:	89 83       	std	Y+1, r24	; 0x01
 robot.posY = 0;
     ab4:	1c 82       	std	Y+4, r1	; 0x04
     ab6:	1b 82       	std	Y+3, r1	; 0x03
//int orderX[] = getWixel("posX");
//int orderY[] = getWixel("posY");

    int orderX[] = {0,3,1,2,4};
     ab8:	8a e0       	ldi	r24, 0x0A	; 10
     aba:	ea e0       	ldi	r30, 0x0A	; 10
     abc:	f1 e0       	ldi	r31, 0x01	; 1
     abe:	de 01       	movw	r26, r28
     ac0:	16 96       	adiw	r26, 0x06	; 6
     ac2:	01 90       	ld	r0, Z+
     ac4:	0d 92       	st	X+, r0
     ac6:	8a 95       	dec	r24
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <warehouse+0x3e>
    int orderY[] = {1,2,3,3,4};
     aca:	8a e0       	ldi	r24, 0x0A	; 10
     acc:	e4 e1       	ldi	r30, 0x14	; 20
     ace:	f1 e0       	ldi	r31, 0x01	; 1
     ad0:	de 01       	movw	r26, r28
     ad2:	50 96       	adiw	r26, 0x10	; 16
     ad4:	01 90       	ld	r0, Z+
     ad6:	0d 92       	st	X+, r0
     ad8:	8a 95       	dec	r24
     ada:	e1 f7       	brne	.-8      	; 0xad4 <warehouse+0x50>

    int arrayGrootte = sizeof(orderX) / sizeof(orderX[0]);
    bubbleSort(orderX, orderY, arrayGrootte);
     adc:	45 e0       	ldi	r20, 0x05	; 5
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	be 01       	movw	r22, r28
     ae2:	60 5f       	subi	r22, 0xF0	; 240
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255
     ae6:	ce 01       	movw	r24, r28
     ae8:	06 96       	adiw	r24, 0x06	; 6
     aea:	0e 94 a6 03 	call	0x74c	; 0x74c <bubbleSort>
	
	
	 //motorControl('S');
	//drive();
	
    for(int locaties = 0; locaties<arrayGrootte;locaties++)
     aee:	e1 2c       	mov	r14, r1
     af0:	f1 2c       	mov	r15, r1
     af2:	49 c0       	rjmp	.+146    	; 0xb86 <warehouse+0x102>
    {
		float completed = locaties;
     af4:	b7 01       	movw	r22, r14
     af6:	0f 2c       	mov	r0, r15
     af8:	00 0c       	add	r0, r0
     afa:	88 0b       	sbc	r24, r24
     afc:	99 0b       	sbc	r25, r25
     afe:	0e 94 91 06 	call	0xd22	; 0xd22 <__floatsisf>
     b02:	4b 01       	movw	r8, r22
     b04:	5c 01       	movw	r10, r24
		float total = arrayGrootte;
		
		
        moveX(orderX[locaties], &robot);
     b06:	87 01       	movw	r16, r14
     b08:	00 0f       	add	r16, r16
     b0a:	11 1f       	adc	r17, r17
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	8c 0f       	add	r24, r28
     b12:	9d 1f       	adc	r25, r29
     b14:	08 0f       	add	r16, r24
     b16:	19 1f       	adc	r17, r25
     b18:	bc 01       	movw	r22, r24
     b1a:	f8 01       	movw	r30, r16
     b1c:	85 81       	ldd	r24, Z+5	; 0x05
     b1e:	96 81       	ldd	r25, Z+6	; 0x06
     b20:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <moveX>
		robot.posX = orderX[locaties];
     b24:	f8 01       	movw	r30, r16
     b26:	85 81       	ldd	r24, Z+5	; 0x05
     b28:	96 81       	ldd	r25, Z+6	; 0x06
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	89 83       	std	Y+1, r24	; 0x01
        moveY(orderY[locaties], &robot);
     b2e:	be 01       	movw	r22, r28
     b30:	6f 5f       	subi	r22, 0xFF	; 255
     b32:	7f 4f       	sbci	r23, 0xFF	; 255
     b34:	87 85       	ldd	r24, Z+15	; 0x0f
     b36:	90 89       	ldd	r25, Z+16	; 0x10
     b38:	0e 94 19 05 	call	0xa32	; 0xa32 <moveY>
		robot.posY = orderY[locaties];
     b3c:	f8 01       	movw	r30, r16
     b3e:	87 85       	ldd	r24, Z+15	; 0x0f
     b40:	90 89       	ldd	r25, Z+16	; 0x10
     b42:	9c 83       	std	Y+4, r25	; 0x04
     b44:	8b 83       	std	Y+3, r24	; 0x03
     b46:	88 ee       	ldi	r24, 0xE8	; 232
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
        delay(1000);//wait 1 second
		
        updateDisplay(((completed/total)*100),batteryPercentage(),logicsBot);
     b4e:	0e 94 5d 00 	call	0xba	; 0xba <batteryPercentage>
     b52:	8c 01       	movw	r16, r24
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 ea       	ldi	r20, 0xA0	; 160
     b5a:	50 e4       	ldi	r21, 0x40	; 64
     b5c:	c5 01       	movw	r24, r10
     b5e:	b4 01       	movw	r22, r8
     b60:	0e 94 e7 05 	call	0xbce	; 0xbce <__divsf3>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	48 ec       	ldi	r20, 0xC8	; 200
     b6a:	52 e4       	ldi	r21, 0x42	; 66
     b6c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     b70:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixsfsi>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	42 e0       	ldi	r20, 0x02	; 2
     b7a:	b8 01       	movw	r22, r16
     b7c:	0e 94 65 00 	call	0xca	; 0xca <updateDisplay>
	
	
	 //motorControl('S');
	//drive();
	
    for(int locaties = 0; locaties<arrayGrootte;locaties++)
     b80:	ff ef       	ldi	r31, 0xFF	; 255
     b82:	ef 1a       	sub	r14, r31
     b84:	ff 0a       	sbc	r15, r31
     b86:	85 e0       	ldi	r24, 0x05	; 5
     b88:	e8 16       	cp	r14, r24
     b8a:	f1 04       	cpc	r15, r1
     b8c:	0c f4       	brge	.+2      	; 0xb90 <warehouse+0x10c>
     b8e:	b2 cf       	rjmp	.-156    	; 0xaf4 <warehouse+0x70>
		robot.posY = orderY[locaties];
        delay(1000);//wait 1 second
		
        updateDisplay(((completed/total)*100),batteryPercentage(),logicsBot);
    }
    moveY(0, &robot);
     b90:	be 01       	movw	r22, r28
     b92:	6f 5f       	subi	r22, 0xFF	; 255
     b94:	7f 4f       	sbci	r23, 0xFF	; 255
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 19 05 	call	0xa32	; 0xa32 <moveY>
    moveX(0, &robot);
     b9e:	be 01       	movw	r22, r28
     ba0:	6f 5f       	subi	r22, 0xFF	; 255
     ba2:	7f 4f       	sbci	r23, 0xFF	; 255
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <moveX>
    //goHome();
}
     bac:	69 96       	adiw	r28, 0x19	; 25
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	9f 90       	pop	r9
     bca:	8f 90       	pop	r8
     bcc:	08 95       	ret

00000bce <__divsf3>:
     bce:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__divsf3x>
     bd2:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_round>
     bd6:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_pscB>
     bda:	58 f0       	brcs	.+22     	; 0xbf2 <__divsf3+0x24>
     bdc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__fp_pscA>
     be0:	40 f0       	brcs	.+16     	; 0xbf2 <__divsf3+0x24>
     be2:	29 f4       	brne	.+10     	; 0xbee <__divsf3+0x20>
     be4:	5f 3f       	cpi	r21, 0xFF	; 255
     be6:	29 f0       	breq	.+10     	; 0xbf2 <__divsf3+0x24>
     be8:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_inf>
     bec:	51 11       	cpse	r21, r1
     bee:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>
     bf2:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__fp_nan>

00000bf6 <__divsf3x>:
     bf6:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_split3>
     bfa:	68 f3       	brcs	.-38     	; 0xbd6 <__divsf3+0x8>

00000bfc <__divsf3_pse>:
     bfc:	99 23       	and	r25, r25
     bfe:	b1 f3       	breq	.-20     	; 0xbec <__divsf3+0x1e>
     c00:	55 23       	and	r21, r21
     c02:	91 f3       	breq	.-28     	; 0xbe8 <__divsf3+0x1a>
     c04:	95 1b       	sub	r25, r21
     c06:	55 0b       	sbc	r21, r21
     c08:	bb 27       	eor	r27, r27
     c0a:	aa 27       	eor	r26, r26
     c0c:	62 17       	cp	r22, r18
     c0e:	73 07       	cpc	r23, r19
     c10:	84 07       	cpc	r24, r20
     c12:	38 f0       	brcs	.+14     	; 0xc22 <__divsf3_pse+0x26>
     c14:	9f 5f       	subi	r25, 0xFF	; 255
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	22 0f       	add	r18, r18
     c1a:	33 1f       	adc	r19, r19
     c1c:	44 1f       	adc	r20, r20
     c1e:	aa 1f       	adc	r26, r26
     c20:	a9 f3       	breq	.-22     	; 0xc0c <__divsf3_pse+0x10>
     c22:	35 d0       	rcall	.+106    	; 0xc8e <__divsf3_pse+0x92>
     c24:	0e 2e       	mov	r0, r30
     c26:	3a f0       	brmi	.+14     	; 0xc36 <__divsf3_pse+0x3a>
     c28:	e0 e8       	ldi	r30, 0x80	; 128
     c2a:	32 d0       	rcall	.+100    	; 0xc90 <__divsf3_pse+0x94>
     c2c:	91 50       	subi	r25, 0x01	; 1
     c2e:	50 40       	sbci	r21, 0x00	; 0
     c30:	e6 95       	lsr	r30
     c32:	00 1c       	adc	r0, r0
     c34:	ca f7       	brpl	.-14     	; 0xc28 <__divsf3_pse+0x2c>
     c36:	2b d0       	rcall	.+86     	; 0xc8e <__divsf3_pse+0x92>
     c38:	fe 2f       	mov	r31, r30
     c3a:	29 d0       	rcall	.+82     	; 0xc8e <__divsf3_pse+0x92>
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	88 1f       	adc	r24, r24
     c42:	bb 1f       	adc	r27, r27
     c44:	26 17       	cp	r18, r22
     c46:	37 07       	cpc	r19, r23
     c48:	48 07       	cpc	r20, r24
     c4a:	ab 07       	cpc	r26, r27
     c4c:	b0 e8       	ldi	r27, 0x80	; 128
     c4e:	09 f0       	breq	.+2      	; 0xc52 <__divsf3_pse+0x56>
     c50:	bb 0b       	sbc	r27, r27
     c52:	80 2d       	mov	r24, r0
     c54:	bf 01       	movw	r22, r30
     c56:	ff 27       	eor	r31, r31
     c58:	93 58       	subi	r25, 0x83	; 131
     c5a:	5f 4f       	sbci	r21, 0xFF	; 255
     c5c:	3a f0       	brmi	.+14     	; 0xc6c <__divsf3_pse+0x70>
     c5e:	9e 3f       	cpi	r25, 0xFE	; 254
     c60:	51 05       	cpc	r21, r1
     c62:	78 f0       	brcs	.+30     	; 0xc82 <__divsf3_pse+0x86>
     c64:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_inf>
     c68:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>
     c6c:	5f 3f       	cpi	r21, 0xFF	; 255
     c6e:	e4 f3       	brlt	.-8      	; 0xc68 <__divsf3_pse+0x6c>
     c70:	98 3e       	cpi	r25, 0xE8	; 232
     c72:	d4 f3       	brlt	.-12     	; 0xc68 <__divsf3_pse+0x6c>
     c74:	86 95       	lsr	r24
     c76:	77 95       	ror	r23
     c78:	67 95       	ror	r22
     c7a:	b7 95       	ror	r27
     c7c:	f7 95       	ror	r31
     c7e:	9f 5f       	subi	r25, 0xFF	; 255
     c80:	c9 f7       	brne	.-14     	; 0xc74 <__divsf3_pse+0x78>
     c82:	88 0f       	add	r24, r24
     c84:	91 1d       	adc	r25, r1
     c86:	96 95       	lsr	r25
     c88:	87 95       	ror	r24
     c8a:	97 f9       	bld	r25, 7
     c8c:	08 95       	ret
     c8e:	e1 e0       	ldi	r30, 0x01	; 1
     c90:	66 0f       	add	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	88 1f       	adc	r24, r24
     c96:	bb 1f       	adc	r27, r27
     c98:	62 17       	cp	r22, r18
     c9a:	73 07       	cpc	r23, r19
     c9c:	84 07       	cpc	r24, r20
     c9e:	ba 07       	cpc	r27, r26
     ca0:	20 f0       	brcs	.+8      	; 0xcaa <__divsf3_pse+0xae>
     ca2:	62 1b       	sub	r22, r18
     ca4:	73 0b       	sbc	r23, r19
     ca6:	84 0b       	sbc	r24, r20
     ca8:	ba 0b       	sbc	r27, r26
     caa:	ee 1f       	adc	r30, r30
     cac:	88 f7       	brcc	.-30     	; 0xc90 <__divsf3_pse+0x94>
     cae:	e0 95       	com	r30
     cb0:	08 95       	ret

00000cb2 <__fixsfsi>:
     cb2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fixunssfsi>
     cb6:	68 94       	set
     cb8:	b1 11       	cpse	r27, r1
     cba:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>
     cbe:	08 95       	ret

00000cc0 <__fixunssfsi>:
     cc0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__fp_splitA>
     cc4:	88 f0       	brcs	.+34     	; 0xce8 <__fixunssfsi+0x28>
     cc6:	9f 57       	subi	r25, 0x7F	; 127
     cc8:	98 f0       	brcs	.+38     	; 0xcf0 <__fixunssfsi+0x30>
     cca:	b9 2f       	mov	r27, r25
     ccc:	99 27       	eor	r25, r25
     cce:	b7 51       	subi	r27, 0x17	; 23
     cd0:	b0 f0       	brcs	.+44     	; 0xcfe <__fixunssfsi+0x3e>
     cd2:	e1 f0       	breq	.+56     	; 0xd0c <__fixunssfsi+0x4c>
     cd4:	66 0f       	add	r22, r22
     cd6:	77 1f       	adc	r23, r23
     cd8:	88 1f       	adc	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	1a f0       	brmi	.+6      	; 0xce4 <__fixunssfsi+0x24>
     cde:	ba 95       	dec	r27
     ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__fixunssfsi+0x14>
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <__fixunssfsi+0x4c>
     ce4:	b1 30       	cpi	r27, 0x01	; 1
     ce6:	91 f0       	breq	.+36     	; 0xd0c <__fixunssfsi+0x4c>
     ce8:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fp_zero>
     cec:	b1 e0       	ldi	r27, 0x01	; 1
     cee:	08 95       	ret
     cf0:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_zero>
     cf4:	67 2f       	mov	r22, r23
     cf6:	78 2f       	mov	r23, r24
     cf8:	88 27       	eor	r24, r24
     cfa:	b8 5f       	subi	r27, 0xF8	; 248
     cfc:	39 f0       	breq	.+14     	; 0xd0c <__fixunssfsi+0x4c>
     cfe:	b9 3f       	cpi	r27, 0xF9	; 249
     d00:	cc f3       	brlt	.-14     	; 0xcf4 <__fixunssfsi+0x34>
     d02:	86 95       	lsr	r24
     d04:	77 95       	ror	r23
     d06:	67 95       	ror	r22
     d08:	b3 95       	inc	r27
     d0a:	d9 f7       	brne	.-10     	; 0xd02 <__fixunssfsi+0x42>
     d0c:	3e f4       	brtc	.+14     	; 0xd1c <__fixunssfsi+0x5c>
     d0e:	90 95       	com	r25
     d10:	80 95       	com	r24
     d12:	70 95       	com	r23
     d14:	61 95       	neg	r22
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	8f 4f       	sbci	r24, 0xFF	; 255
     d1a:	9f 4f       	sbci	r25, 0xFF	; 255
     d1c:	08 95       	ret

00000d1e <__floatunsisf>:
     d1e:	e8 94       	clt
     d20:	09 c0       	rjmp	.+18     	; 0xd34 <__floatsisf+0x12>

00000d22 <__floatsisf>:
     d22:	97 fb       	bst	r25, 7
     d24:	3e f4       	brtc	.+14     	; 0xd34 <__floatsisf+0x12>
     d26:	90 95       	com	r25
     d28:	80 95       	com	r24
     d2a:	70 95       	com	r23
     d2c:	61 95       	neg	r22
     d2e:	7f 4f       	sbci	r23, 0xFF	; 255
     d30:	8f 4f       	sbci	r24, 0xFF	; 255
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	99 23       	and	r25, r25
     d36:	a9 f0       	breq	.+42     	; 0xd62 <__floatsisf+0x40>
     d38:	f9 2f       	mov	r31, r25
     d3a:	96 e9       	ldi	r25, 0x96	; 150
     d3c:	bb 27       	eor	r27, r27
     d3e:	93 95       	inc	r25
     d40:	f6 95       	lsr	r31
     d42:	87 95       	ror	r24
     d44:	77 95       	ror	r23
     d46:	67 95       	ror	r22
     d48:	b7 95       	ror	r27
     d4a:	f1 11       	cpse	r31, r1
     d4c:	f8 cf       	rjmp	.-16     	; 0xd3e <__floatsisf+0x1c>
     d4e:	fa f4       	brpl	.+62     	; 0xd8e <__floatsisf+0x6c>
     d50:	bb 0f       	add	r27, r27
     d52:	11 f4       	brne	.+4      	; 0xd58 <__floatsisf+0x36>
     d54:	60 ff       	sbrs	r22, 0
     d56:	1b c0       	rjmp	.+54     	; 0xd8e <__floatsisf+0x6c>
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	8f 4f       	sbci	r24, 0xFF	; 255
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	16 c0       	rjmp	.+44     	; 0xd8e <__floatsisf+0x6c>
     d62:	88 23       	and	r24, r24
     d64:	11 f0       	breq	.+4      	; 0xd6a <__floatsisf+0x48>
     d66:	96 e9       	ldi	r25, 0x96	; 150
     d68:	11 c0       	rjmp	.+34     	; 0xd8c <__floatsisf+0x6a>
     d6a:	77 23       	and	r23, r23
     d6c:	21 f0       	breq	.+8      	; 0xd76 <__floatsisf+0x54>
     d6e:	9e e8       	ldi	r25, 0x8E	; 142
     d70:	87 2f       	mov	r24, r23
     d72:	76 2f       	mov	r23, r22
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <__floatsisf+0x5e>
     d76:	66 23       	and	r22, r22
     d78:	71 f0       	breq	.+28     	; 0xd96 <__floatsisf+0x74>
     d7a:	96 e8       	ldi	r25, 0x86	; 134
     d7c:	86 2f       	mov	r24, r22
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	2a f0       	brmi	.+10     	; 0xd8e <__floatsisf+0x6c>
     d84:	9a 95       	dec	r25
     d86:	66 0f       	add	r22, r22
     d88:	77 1f       	adc	r23, r23
     d8a:	88 1f       	adc	r24, r24
     d8c:	da f7       	brpl	.-10     	; 0xd84 <__floatsisf+0x62>
     d8e:	88 0f       	add	r24, r24
     d90:	96 95       	lsr	r25
     d92:	87 95       	ror	r24
     d94:	97 f9       	bld	r25, 7
     d96:	08 95       	ret

00000d98 <__fp_inf>:
     d98:	97 f9       	bld	r25, 7
     d9a:	9f 67       	ori	r25, 0x7F	; 127
     d9c:	80 e8       	ldi	r24, 0x80	; 128
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	08 95       	ret

00000da4 <__fp_nan>:
     da4:	9f ef       	ldi	r25, 0xFF	; 255
     da6:	80 ec       	ldi	r24, 0xC0	; 192
     da8:	08 95       	ret

00000daa <__fp_pscA>:
     daa:	00 24       	eor	r0, r0
     dac:	0a 94       	dec	r0
     dae:	16 16       	cp	r1, r22
     db0:	17 06       	cpc	r1, r23
     db2:	18 06       	cpc	r1, r24
     db4:	09 06       	cpc	r0, r25
     db6:	08 95       	ret

00000db8 <__fp_pscB>:
     db8:	00 24       	eor	r0, r0
     dba:	0a 94       	dec	r0
     dbc:	12 16       	cp	r1, r18
     dbe:	13 06       	cpc	r1, r19
     dc0:	14 06       	cpc	r1, r20
     dc2:	05 06       	cpc	r0, r21
     dc4:	08 95       	ret

00000dc6 <__fp_round>:
     dc6:	09 2e       	mov	r0, r25
     dc8:	03 94       	inc	r0
     dca:	00 0c       	add	r0, r0
     dcc:	11 f4       	brne	.+4      	; 0xdd2 <__fp_round+0xc>
     dce:	88 23       	and	r24, r24
     dd0:	52 f0       	brmi	.+20     	; 0xde6 <__fp_round+0x20>
     dd2:	bb 0f       	add	r27, r27
     dd4:	40 f4       	brcc	.+16     	; 0xde6 <__fp_round+0x20>
     dd6:	bf 2b       	or	r27, r31
     dd8:	11 f4       	brne	.+4      	; 0xdde <__fp_round+0x18>
     dda:	60 ff       	sbrs	r22, 0
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <__fp_round+0x20>
     dde:	6f 5f       	subi	r22, 0xFF	; 255
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	8f 4f       	sbci	r24, 0xFF	; 255
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	08 95       	ret

00000de8 <__fp_split3>:
     de8:	57 fd       	sbrc	r21, 7
     dea:	90 58       	subi	r25, 0x80	; 128
     dec:	44 0f       	add	r20, r20
     dee:	55 1f       	adc	r21, r21
     df0:	59 f0       	breq	.+22     	; 0xe08 <__fp_splitA+0x10>
     df2:	5f 3f       	cpi	r21, 0xFF	; 255
     df4:	71 f0       	breq	.+28     	; 0xe12 <__fp_splitA+0x1a>
     df6:	47 95       	ror	r20

00000df8 <__fp_splitA>:
     df8:	88 0f       	add	r24, r24
     dfa:	97 fb       	bst	r25, 7
     dfc:	99 1f       	adc	r25, r25
     dfe:	61 f0       	breq	.+24     	; 0xe18 <__fp_splitA+0x20>
     e00:	9f 3f       	cpi	r25, 0xFF	; 255
     e02:	79 f0       	breq	.+30     	; 0xe22 <__fp_splitA+0x2a>
     e04:	87 95       	ror	r24
     e06:	08 95       	ret
     e08:	12 16       	cp	r1, r18
     e0a:	13 06       	cpc	r1, r19
     e0c:	14 06       	cpc	r1, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	f2 cf       	rjmp	.-28     	; 0xdf6 <__fp_split3+0xe>
     e12:	46 95       	lsr	r20
     e14:	f1 df       	rcall	.-30     	; 0xdf8 <__fp_splitA>
     e16:	08 c0       	rjmp	.+16     	; 0xe28 <__fp_splitA+0x30>
     e18:	16 16       	cp	r1, r22
     e1a:	17 06       	cpc	r1, r23
     e1c:	18 06       	cpc	r1, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	f1 cf       	rjmp	.-30     	; 0xe04 <__fp_splitA+0xc>
     e22:	86 95       	lsr	r24
     e24:	71 05       	cpc	r23, r1
     e26:	61 05       	cpc	r22, r1
     e28:	08 94       	sec
     e2a:	08 95       	ret

00000e2c <__fp_zero>:
     e2c:	e8 94       	clt

00000e2e <__fp_szero>:
     e2e:	bb 27       	eor	r27, r27
     e30:	66 27       	eor	r22, r22
     e32:	77 27       	eor	r23, r23
     e34:	cb 01       	movw	r24, r22
     e36:	97 f9       	bld	r25, 7
     e38:	08 95       	ret

00000e3a <__mulsf3>:
     e3a:	0e 94 30 07 	call	0xe60	; 0xe60 <__mulsf3x>
     e3e:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <__fp_round>
     e42:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__fp_pscA>
     e46:	38 f0       	brcs	.+14     	; 0xe56 <__mulsf3+0x1c>
     e48:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_pscB>
     e4c:	20 f0       	brcs	.+8      	; 0xe56 <__mulsf3+0x1c>
     e4e:	95 23       	and	r25, r21
     e50:	11 f0       	breq	.+4      	; 0xe56 <__mulsf3+0x1c>
     e52:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_inf>
     e56:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__fp_nan>
     e5a:	11 24       	eor	r1, r1
     e5c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>

00000e60 <__mulsf3x>:
     e60:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_split3>
     e64:	70 f3       	brcs	.-36     	; 0xe42 <__mulsf3+0x8>

00000e66 <__mulsf3_pse>:
     e66:	95 9f       	mul	r25, r21
     e68:	c1 f3       	breq	.-16     	; 0xe5a <__mulsf3+0x20>
     e6a:	95 0f       	add	r25, r21
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	55 1f       	adc	r21, r21
     e70:	62 9f       	mul	r22, r18
     e72:	f0 01       	movw	r30, r0
     e74:	72 9f       	mul	r23, r18
     e76:	bb 27       	eor	r27, r27
     e78:	f0 0d       	add	r31, r0
     e7a:	b1 1d       	adc	r27, r1
     e7c:	63 9f       	mul	r22, r19
     e7e:	aa 27       	eor	r26, r26
     e80:	f0 0d       	add	r31, r0
     e82:	b1 1d       	adc	r27, r1
     e84:	aa 1f       	adc	r26, r26
     e86:	64 9f       	mul	r22, r20
     e88:	66 27       	eor	r22, r22
     e8a:	b0 0d       	add	r27, r0
     e8c:	a1 1d       	adc	r26, r1
     e8e:	66 1f       	adc	r22, r22
     e90:	82 9f       	mul	r24, r18
     e92:	22 27       	eor	r18, r18
     e94:	b0 0d       	add	r27, r0
     e96:	a1 1d       	adc	r26, r1
     e98:	62 1f       	adc	r22, r18
     e9a:	73 9f       	mul	r23, r19
     e9c:	b0 0d       	add	r27, r0
     e9e:	a1 1d       	adc	r26, r1
     ea0:	62 1f       	adc	r22, r18
     ea2:	83 9f       	mul	r24, r19
     ea4:	a0 0d       	add	r26, r0
     ea6:	61 1d       	adc	r22, r1
     ea8:	22 1f       	adc	r18, r18
     eaa:	74 9f       	mul	r23, r20
     eac:	33 27       	eor	r19, r19
     eae:	a0 0d       	add	r26, r0
     eb0:	61 1d       	adc	r22, r1
     eb2:	23 1f       	adc	r18, r19
     eb4:	84 9f       	mul	r24, r20
     eb6:	60 0d       	add	r22, r0
     eb8:	21 1d       	adc	r18, r1
     eba:	82 2f       	mov	r24, r18
     ebc:	76 2f       	mov	r23, r22
     ebe:	6a 2f       	mov	r22, r26
     ec0:	11 24       	eor	r1, r1
     ec2:	9f 57       	subi	r25, 0x7F	; 127
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	9a f0       	brmi	.+38     	; 0xeee <__mulsf3_pse+0x88>
     ec8:	f1 f0       	breq	.+60     	; 0xf06 <__mulsf3_pse+0xa0>
     eca:	88 23       	and	r24, r24
     ecc:	4a f0       	brmi	.+18     	; 0xee0 <__mulsf3_pse+0x7a>
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	bb 1f       	adc	r27, r27
     ed4:	66 1f       	adc	r22, r22
     ed6:	77 1f       	adc	r23, r23
     ed8:	88 1f       	adc	r24, r24
     eda:	91 50       	subi	r25, 0x01	; 1
     edc:	50 40       	sbci	r21, 0x00	; 0
     ede:	a9 f7       	brne	.-22     	; 0xeca <__mulsf3_pse+0x64>
     ee0:	9e 3f       	cpi	r25, 0xFE	; 254
     ee2:	51 05       	cpc	r21, r1
     ee4:	80 f0       	brcs	.+32     	; 0xf06 <__mulsf3_pse+0xa0>
     ee6:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_inf>
     eea:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__fp_szero>
     eee:	5f 3f       	cpi	r21, 0xFF	; 255
     ef0:	e4 f3       	brlt	.-8      	; 0xeea <__mulsf3_pse+0x84>
     ef2:	98 3e       	cpi	r25, 0xE8	; 232
     ef4:	d4 f3       	brlt	.-12     	; 0xeea <__mulsf3_pse+0x84>
     ef6:	86 95       	lsr	r24
     ef8:	77 95       	ror	r23
     efa:	67 95       	ror	r22
     efc:	b7 95       	ror	r27
     efe:	f7 95       	ror	r31
     f00:	e7 95       	ror	r30
     f02:	9f 5f       	subi	r25, 0xFF	; 255
     f04:	c1 f7       	brne	.-16     	; 0xef6 <__mulsf3_pse+0x90>
     f06:	fe 2b       	or	r31, r30
     f08:	88 0f       	add	r24, r24
     f0a:	91 1d       	adc	r25, r1
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	97 f9       	bld	r25, 7
     f12:	08 95       	ret

00000f14 <_ZN15OrangutanAnalog7setModeEh.part.0>:
     f14:	ec e7       	ldi	r30, 0x7C	; 124
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8f 7d       	andi	r24, 0xDF	; 223
     f1c:	80 83       	st	Z, r24
     f1e:	08 95       	ret

00000f20 <_ZN15OrangutanAnalog7setModeEh>:
     f20:	81 11       	cpse	r24, r1
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <_ZN15OrangutanAnalog7setModeEh+0xa>
     f24:	0e 94 8a 07 	call	0xf14	; 0xf14 <_ZN15OrangutanAnalog7setModeEh.part.0>
     f28:	08 95       	ret
     f2a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f2e:	80 62       	ori	r24, 0x20	; 32
     f30:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f34:	08 95       	ret

00000f36 <_ZN15OrangutanAnalog7getModeEv>:
     f36:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f3a:	85 fb       	bst	r24, 5
     f3c:	88 27       	eor	r24, r24
     f3e:	80 f9       	bld	r24, 0
     f40:	08 95       	ret

00000f42 <_ZN15OrangutanAnalog16conversionResultEv>:
     f42:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN15OrangutanAnalog7getModeEv>
     f46:	88 23       	and	r24, r24
     f48:	21 f0       	breq	.+8      	; 0xf52 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     f4a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	08 95       	ret
     f52:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     f56:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f5a:	08 95       	ret

00000f5c <_ZN15OrangutanAnalog15startConversionEhh>:
     f5c:	80 32       	cpi	r24, 0x20	; 32
     f5e:	a0 f4       	brcc	.+40     	; 0xf88 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     f60:	97 e8       	ldi	r25, 0x87	; 135
     f62:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f66:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f6a:	66 23       	and	r22, r22
     f6c:	11 f0       	breq	.+4      	; 0xf72 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     f6e:	90 6c       	ori	r25, 0xC0	; 192
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     f72:	9f 77       	andi	r25, 0x7F	; 127
     f74:	90 64       	ori	r25, 0x40	; 64
     f76:	90 7e       	andi	r25, 0xE0	; 224
     f78:	98 2b       	or	r25, r24
     f7a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f82:	80 64       	ori	r24, 0x40	; 64
     f84:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f88:	08 95       	ret

00000f8a <_ZN15OrangutanAnalog11readAverageEhj>:
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	eb ec       	ldi	r30, 0xCB	; 203
     f90:	f7 e0       	ldi	r31, 0x07	; 7
     f92:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__prologue_saves__+0x14>
     f96:	eb 01       	movw	r28, r22
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN15OrangutanAnalog15startConversionEhh>
     f9e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     fa2:	86 fd       	sbrc	r24, 6
     fa4:	fc cf       	rjmp	.-8      	; 0xf9e <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     fa6:	8e 01       	movw	r16, r28
     fa8:	c1 2c       	mov	r12, r1
     faa:	d1 2c       	mov	r13, r1
     fac:	76 01       	movw	r14, r12
     fae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     fb2:	80 64       	ori	r24, 0x40	; 64
     fb4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     fb8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     fbc:	86 fd       	sbrc	r24, 6
     fbe:	fc cf       	rjmp	.-8      	; 0xfb8 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     fc0:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN15OrangutanAnalog16conversionResultEv>
     fc4:	c8 0e       	add	r12, r24
     fc6:	d9 1e       	adc	r13, r25
     fc8:	e1 1c       	adc	r14, r1
     fca:	f1 1c       	adc	r15, r1
     fcc:	01 50       	subi	r16, 0x01	; 1
     fce:	11 09       	sbc	r17, r1
     fd0:	01 15       	cp	r16, r1
     fd2:	11 05       	cpc	r17, r1
     fd4:	61 f7       	brne	.-40     	; 0xfae <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     fd6:	ce 01       	movw	r24, r28
     fd8:	96 95       	lsr	r25
     fda:	87 95       	ror	r24
     fdc:	c0 34       	cpi	r28, 0x40	; 64
     fde:	d1 05       	cpc	r29, r1
     fe0:	38 f4       	brcc	.+14     	; 0xff0 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     fe2:	8c 0d       	add	r24, r12
     fe4:	9d 1d       	adc	r25, r13
     fe6:	be 01       	movw	r22, r28
     fe8:	0e 94 b7 10 	call	0x216e	; 0x216e <__udivmodhi4>
     fec:	cb 01       	movw	r24, r22
     fee:	0e c0       	rjmp	.+28     	; 0x100c <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     ff0:	a7 01       	movw	r20, r14
     ff2:	96 01       	movw	r18, r12
     ff4:	28 0f       	add	r18, r24
     ff6:	39 1f       	adc	r19, r25
     ff8:	41 1d       	adc	r20, r1
     ffa:	51 1d       	adc	r21, r1
     ffc:	ca 01       	movw	r24, r20
     ffe:	b9 01       	movw	r22, r18
    1000:	9e 01       	movw	r18, r28
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    100a:	c9 01       	movw	r24, r18
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	e8 e0       	ldi	r30, 0x08	; 8
    1012:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__epilogue_restores__+0x14>

00001016 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1022:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1026:	9c 01       	movw	r18, r24
    1028:	0e 94 26 11 	call	0x224c	; 0x224c <__umulhisi3>
    102c:	6b 01       	movw	r12, r22
    102e:	7c 01       	movw	r14, r24
    1030:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN15OrangutanAnalog7getModeEv>
    1034:	88 23       	and	r24, r24
    1036:	59 f0       	breq	.+22     	; 0x104e <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	61 58       	subi	r22, 0x81	; 129
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	8f 4f       	sbci	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	2f ef       	ldi	r18, 0xFF	; 255
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	0a c0       	rjmp	.+20     	; 0x1062 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	61 50       	subi	r22, 0x01	; 1
    1054:	7e 4f       	sbci	r23, 0xFE	; 254
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	2f ef       	ldi	r18, 0xFF	; 255
    105c:	33 e0       	ldi	r19, 0x03	; 3
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    1066:	c9 01       	movw	r24, r18
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	08 95       	ret

00001072 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1072:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_ZN15OrangutanAnalog11readAverageEhj>
    1076:	0e 94 0b 08 	call	0x1016	; 0x1016 <_ZN15OrangutanAnalog12toMillivoltsEj>
    107a:	08 95       	ret

0000107c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN15OrangutanAnalog7getModeEv>
    1086:	18 2f       	mov	r17, r24
    1088:	0e 94 8a 07 	call	0xf14	; 0xf14 <_ZN15OrangutanAnalog7setModeEh.part.0>
    108c:	6a e0       	ldi	r22, 0x0A	; 10
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	86 e0       	ldi	r24, 0x06	; 6
    1092:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1096:	ec 01       	movw	r28, r24
    1098:	81 2f       	mov	r24, r17
    109a:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN15OrangutanAnalog7setModeEh>
    109e:	ce 01       	movw	r24, r28
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	8c 0f       	add	r24, r28
    10a6:	9d 1f       	adc	r25, r29
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	08 95       	ret

000010b6 <read_battery_millivolts_3pi>:
    10b6:	0e 94 3e 08 	call	0x107c	; 0x107c <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    10ba:	08 95       	ret

000010bc <delay_us.constprop.0>:
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	6f 93       	push	r22
    10c2:	64 e0       	ldi	r22, 0x04	; 4
    10c4:	6a 95       	dec	r22
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <delay_us.constprop.0+0x8>
    10c8:	6f 91       	pop	r22
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <delay_us.constprop.0+0x4>
    10ce:	08 95       	ret

000010d0 <_ZN12OrangutanLCD8busyWaitEv>:
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	1a b1       	in	r17, 0x0a	; 10
    10da:	57 98       	cbi	0x0a, 7	; 10
    10dc:	5a 98       	cbi	0x0b, 2	; 11
    10de:	28 9a       	sbi	0x05, 0	; 5
    10e0:	c0 e0       	ldi	r28, 0x00	; 0
    10e2:	d0 e0       	ldi	r29, 0x00	; 0
    10e4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay_us.constprop.0>
    10e8:	5c 9a       	sbi	0x0b, 4	; 11
    10ea:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay_us.constprop.0>
    10ee:	09 b1       	in	r16, 0x09	; 9
    10f0:	5c 98       	cbi	0x0b, 4	; 11
    10f2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay_us.constprop.0>
    10f6:	5c 9a       	sbi	0x0b, 4	; 11
    10f8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay_us.constprop.0>
    10fc:	5c 98       	cbi	0x0b, 4	; 11
    10fe:	24 96       	adiw	r28, 0x04	; 4
    1100:	07 ff       	sbrs	r16, 7
    1102:	10 c0       	rjmp	.+32     	; 0x1124 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    1104:	ae 01       	movw	r20, r28
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
    110e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
    1112:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <__data_end+0x2>
    1116:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <__data_end+0x3>
    111a:	48 17       	cp	r20, r24
    111c:	59 07       	cpc	r21, r25
    111e:	6a 07       	cpc	r22, r26
    1120:	7b 07       	cpc	r23, r27
    1122:	00 f3       	brcs	.-64     	; 0x10e4 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    1124:	1a b9       	out	0x0a, r17	; 10
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <_ZN12OrangutanLCD8sendDataEh>:
    1130:	95 b1       	in	r25, 0x05	; 5
    1132:	28 2f       	mov	r18, r24
    1134:	21 70       	andi	r18, 0x01	; 1
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	48 2f       	mov	r20, r24
    113e:	46 70       	andi	r20, 0x06	; 6
    1140:	68 e0       	ldi	r22, 0x08	; 8
    1142:	46 9f       	mul	r20, r22
    1144:	a0 01       	movw	r20, r0
    1146:	11 24       	eor	r1, r1
    1148:	24 2b       	or	r18, r20
    114a:	9d 7c       	andi	r25, 0xCD	; 205
    114c:	29 2b       	or	r18, r25
    114e:	25 b9       	out	0x05, r18	; 5
    1150:	9b b1       	in	r25, 0x0b	; 11
    1152:	88 70       	andi	r24, 0x08	; 8
    1154:	82 95       	swap	r24
    1156:	80 7f       	andi	r24, 0xF0	; 240
    1158:	9f 77       	andi	r25, 0x7F	; 127
    115a:	89 2b       	or	r24, r25
    115c:	8b b9       	out	0x0b, r24	; 11
    115e:	5c 9a       	sbi	0x0b, 4	; 11
    1160:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay_us.constprop.0>
    1164:	5c 98       	cbi	0x0b, 4	; 11
    1166:	0e 94 5e 08 	call	0x10bc	; 0x10bc <delay_us.constprop.0>
    116a:	08 95       	ret

0000116c <_ZN12OrangutanLCD4sendEhhh>:
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ec eb       	ldi	r30, 0xBC	; 188
    1172:	f8 e0       	ldi	r31, 0x08	; 8
    1174:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x16>
    1178:	c8 2f       	mov	r28, r24
    117a:	d6 2e       	mov	r13, r22
    117c:	e4 2e       	mov	r14, r20
    117e:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <_ZZN12OrangutanLCD4initEvE11initialized>
    1182:	81 11       	cpse	r24, r1
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <_ZN12OrangutanLCD4sendEhhh+0x24>
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <_ZZN12OrangutanLCD4initEvE11initialized>
    118c:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <_ZN12OrangutanLCD5init2Ev>
    1190:	0e 94 68 08 	call	0x10d0	; 0x10d0 <_ZN12OrangutanLCD8busyWaitEv>
    1194:	14 b1       	in	r17, 0x04	; 4
    1196:	d5 b1       	in	r29, 0x05	; 5
    1198:	fa b0       	in	r15, 0x0a	; 10
    119a:	0b b1       	in	r16, 0x0b	; 11
    119c:	28 98       	cbi	0x05, 0	; 5
    119e:	dd 20       	and	r13, r13
    11a0:	11 f0       	breq	.+4      	; 0x11a6 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    11a2:	5a 9a       	sbi	0x0b, 2	; 11
    11a4:	01 c0       	rjmp	.+2      	; 0x11a8 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    11a6:	5a 98       	cbi	0x0b, 2	; 11
    11a8:	94 b1       	in	r25, 0x04	; 4
    11aa:	92 63       	ori	r25, 0x32	; 50
    11ac:	94 b9       	out	0x04, r25	; 4
    11ae:	57 9a       	sbi	0x0a, 7	; 10
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	e8 16       	cp	r14, r24
    11b4:	29 f0       	breq	.+10     	; 0x11c0 <_ZN12OrangutanLCD4sendEhhh+0x54>
    11b6:	8c 2f       	mov	r24, r28
    11b8:	82 95       	swap	r24
    11ba:	8f 70       	andi	r24, 0x0F	; 15
    11bc:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN12OrangutanLCD8sendDataEh>
    11c0:	8c 2f       	mov	r24, r28
    11c2:	8f 70       	andi	r24, 0x0F	; 15
    11c4:	0e 94 98 08 	call	0x1130	; 0x1130 <_ZN12OrangutanLCD8sendDataEh>
    11c8:	fa b8       	out	0x0a, r15	; 10
    11ca:	0b b9       	out	0x0b, r16	; 11
    11cc:	14 b9       	out	0x04, r17	; 4
    11ce:	d5 b9       	out	0x05, r29	; 5
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	e7 e0       	ldi	r30, 0x07	; 7
    11d6:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x16>

000011da <_ZN12OrangutanLCD8send_cmdEh>:
    11da:	42 e0       	ldi	r20, 0x02	; 2
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN12OrangutanLCD4sendEhhh>
    11e2:	08 95       	ret

000011e4 <_ZN12OrangutanLCD9send_dataEh>:
    11e4:	42 e0       	ldi	r20, 0x02	; 2
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN12OrangutanLCD4sendEhhh>
    11ec:	08 95       	ret

000011ee <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    11ee:	41 e0       	ldi	r20, 0x01	; 1
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN12OrangutanLCD4sendEhhh>
    11f6:	08 95       	ret

000011f8 <_ZN12OrangutanLCD5init2Ev>:
    11f8:	80 e1       	ldi	r24, 0x10	; 16
    11fa:	97 e2       	ldi	r25, 0x27	; 39
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    1204:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    1208:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <__data_end+0x2>
    120c:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <__data_end+0x3>
    1210:	52 9a       	sbi	0x0a, 2	; 10
    1212:	20 9a       	sbi	0x04, 0	; 4
    1214:	54 9a       	sbi	0x0a, 4	; 10
    1216:	8e e1       	ldi	r24, 0x1E	; 30
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1224:	86 e0       	ldi	r24, 0x06	; 6
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <_ZN12OrangutanLCD13send_4bit_cmdEh>
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
    1256:	88 e2       	ldi	r24, 0x28	; 40
    1258:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN12OrangutanLCD8send_cmdEh>
    125c:	88 e0       	ldi	r24, 0x08	; 8
    125e:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN12OrangutanLCD8send_cmdEh>
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN12OrangutanLCD8send_cmdEh>
    1268:	86 e0       	ldi	r24, 0x06	; 6
    126a:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN12OrangutanLCD8send_cmdEh>
    126e:	8c e0       	ldi	r24, 0x0C	; 12
    1270:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN12OrangutanLCD8send_cmdEh>
    1274:	08 95       	ret

00001276 <_ZN12OrangutanLCD5clearEv>:
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN12OrangutanLCD8send_cmdEh>
    127c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <printf_chars>
    1280:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <printf_chars+0x1>
    1284:	89 2b       	or	r24, r25
    1286:	f9 f0       	breq	.+62     	; 0x12c6 <_ZN12OrangutanLCD5clearEv+0x50>
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	a0 e2       	ldi	r26, 0x20	; 32
    128c:	26 2f       	mov	r18, r22
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <numLCDCols>
    1294:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <numLCDRows>
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	78 9f       	mul	r23, r24
    129e:	a0 01       	movw	r20, r0
    12a0:	79 9f       	mul	r23, r25
    12a2:	50 0d       	add	r21, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	24 17       	cp	r18, r20
    12a8:	35 07       	cpc	r19, r21
    12aa:	4c f4       	brge	.+18     	; 0x12be <_ZN12OrangutanLCD5clearEv+0x48>
    12ac:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <printf_chars>
    12b0:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <printf_chars+0x1>
    12b4:	e2 0f       	add	r30, r18
    12b6:	f3 1f       	adc	r31, r19
    12b8:	a0 83       	st	Z, r26
    12ba:	6f 5f       	subi	r22, 0xFF	; 255
    12bc:	e7 cf       	rjmp	.-50     	; 0x128c <_ZN12OrangutanLCD5clearEv+0x16>
    12be:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <col>
    12c2:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <row>
    12c6:	08 95       	ret

000012c8 <clear>:
    12c8:	0e 94 3b 09 	call	0x1276	; 0x1276 <_ZN12OrangutanLCD5clearEv>
    12cc:	08 95       	ret

000012ce <_ZN12OrangutanLCD5printEPKc>:
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	ec 01       	movw	r28, r24
    12d4:	89 91       	ld	r24, Y+
    12d6:	88 23       	and	r24, r24
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <_ZN12OrangutanLCD5printEPKc+0x12>
    12da:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN12OrangutanLCD9send_dataEh>
    12de:	fa cf       	rjmp	.-12     	; 0x12d4 <_ZN12OrangutanLCD5printEPKc+0x6>
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <print>:
    12e6:	0e 94 67 09 	call	0x12ce	; 0x12ce <_ZN12OrangutanLCD5printEPKc>
    12ea:	08 95       	ret

000012ec <_ZN12OrangutanLCD5printEm>:
    12ec:	aa e0       	ldi	r26, 0x0A	; 10
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ec e7       	ldi	r30, 0x7C	; 124
    12f2:	f9 e0       	ldi	r31, 0x09	; 9
    12f4:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__prologue_saves__+0x14>
    12f8:	1a e0       	ldi	r17, 0x0A	; 10
    12fa:	5a e0       	ldi	r21, 0x0A	; 10
    12fc:	c5 2e       	mov	r12, r21
    12fe:	d1 2c       	mov	r13, r1
    1300:	e1 2c       	mov	r14, r1
    1302:	f1 2c       	mov	r15, r1
    1304:	06 2f       	mov	r16, r22
    1306:	a7 01       	movw	r20, r14
    1308:	96 01       	movw	r18, r12
    130a:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    130e:	ca 01       	movw	r24, r20
    1310:	b9 01       	movw	r22, r18
    1312:	11 50       	subi	r17, 0x01	; 1
    1314:	e1 e0       	ldi	r30, 0x01	; 1
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	ec 0f       	add	r30, r28
    131a:	fd 1f       	adc	r31, r29
    131c:	e1 0f       	add	r30, r17
    131e:	f1 1d       	adc	r31, r1
    1320:	00 5d       	subi	r16, 0xD0	; 208
    1322:	2a e0       	ldi	r18, 0x0A	; 10
    1324:	62 9f       	mul	r22, r18
    1326:	00 19       	sub	r16, r0
    1328:	11 24       	eor	r1, r1
    132a:	00 83       	st	Z, r16
    132c:	61 15       	cp	r22, r1
    132e:	71 05       	cpc	r23, r1
    1330:	81 05       	cpc	r24, r1
    1332:	91 05       	cpc	r25, r1
    1334:	39 f7       	brne	.-50     	; 0x1304 <_ZN12OrangutanLCD5printEm+0x18>
    1336:	1a 30       	cpi	r17, 0x0A	; 10
    1338:	58 f4       	brcc	.+22     	; 0x1350 <_ZN12OrangutanLCD5printEm+0x64>
    133a:	e1 e0       	ldi	r30, 0x01	; 1
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	ec 0f       	add	r30, r28
    1340:	fd 1f       	adc	r31, r29
    1342:	e1 0f       	add	r30, r17
    1344:	f1 1d       	adc	r31, r1
    1346:	80 81       	ld	r24, Z
    1348:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN12OrangutanLCD9send_dataEh>
    134c:	1f 5f       	subi	r17, 0xFF	; 255
    134e:	f3 cf       	rjmp	.-26     	; 0x1336 <_ZN12OrangutanLCD5printEm+0x4a>
    1350:	2a 96       	adiw	r28, 0x0a	; 10
    1352:	e8 e0       	ldi	r30, 0x08	; 8
    1354:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__epilogue_restores__+0x14>

00001358 <_ZN12OrangutanLCD5printEl>:
    1358:	cf 92       	push	r12
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	6b 01       	movw	r12, r22
    1362:	7c 01       	movw	r14, r24
    1364:	97 ff       	sbrs	r25, 7
    1366:	0b c0       	rjmp	.+22     	; 0x137e <_ZN12OrangutanLCD5printEl+0x26>
    1368:	f0 94       	com	r15
    136a:	e0 94       	com	r14
    136c:	d0 94       	com	r13
    136e:	c0 94       	com	r12
    1370:	c1 1c       	adc	r12, r1
    1372:	d1 1c       	adc	r13, r1
    1374:	e1 1c       	adc	r14, r1
    1376:	f1 1c       	adc	r15, r1
    1378:	8d e2       	ldi	r24, 0x2D	; 45
    137a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <_ZN12OrangutanLCD9send_dataEh>
    137e:	c7 01       	movw	r24, r14
    1380:	b6 01       	movw	r22, r12
    1382:	0e 94 76 09 	call	0x12ec	; 0x12ec <_ZN12OrangutanLCD5printEm>
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	08 95       	ret

00001390 <print_long>:
    1390:	0e 94 ac 09 	call	0x1358	; 0x1358 <_ZN12OrangutanLCD5printEl>
    1394:	08 95       	ret

00001396 <_ZN12OrangutanLCD6gotoXYEhh>:
    1396:	a5 e0       	ldi	r26, 0x05	; 5
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 ed       	ldi	r30, 0xD1	; 209
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <__prologue_saves__+0x1e>
    13a2:	18 2f       	mov	r17, r24
    13a4:	80 e8       	ldi	r24, 0x80	; 128
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	80 ec       	ldi	r24, 0xC0	; 192
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	84 e9       	ldi	r24, 0x94	; 148
    13ae:	8b 83       	std	Y+3, r24	; 0x03
    13b0:	84 ed       	ldi	r24, 0xD4	; 212
    13b2:	8c 83       	std	Y+4, r24	; 0x04
    13b4:	fe 01       	movw	r30, r28
    13b6:	e6 0f       	add	r30, r22
    13b8:	f1 1d       	adc	r31, r1
    13ba:	81 81       	ldd	r24, Z+1	; 0x01
    13bc:	81 0f       	add	r24, r17
    13be:	6d 83       	std	Y+5, r22	; 0x05
    13c0:	0e 94 ed 08 	call	0x11da	; 0x11da <_ZN12OrangutanLCD8send_cmdEh>
    13c4:	10 93 3e 01 	sts	0x013E, r17	; 0x80013e <col>
    13c8:	6d 81       	ldd	r22, Y+5	; 0x05
    13ca:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <row>
    13ce:	25 96       	adiw	r28, 0x05	; 5
    13d0:	e3 e0       	ldi	r30, 0x03	; 3
    13d2:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__epilogue_restores__+0x1e>

000013d6 <lcd_goto_xy>:
    13d6:	0e 94 cb 09 	call	0x1396	; 0x1396 <_ZN12OrangutanLCD6gotoXYEhh>
    13da:	08 95       	ret

000013dc <_ZN16OrangutanDigital9setOutputEhh>:
    13dc:	88 30       	cpi	r24, 0x08	; 8
    13de:	58 f4       	brcc	.+22     	; 0x13f6 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	01 c0       	rjmp	.+2      	; 0x13e6 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    13e4:	99 0f       	add	r25, r25
    13e6:	8a 95       	dec	r24
    13e8:	ea f7       	brpl	.-6      	; 0x13e4 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    13ea:	89 2f       	mov	r24, r25
    13ec:	aa e2       	ldi	r26, 0x2A	; 42
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	eb e2       	ldi	r30, 0x2B	; 43
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	21 c0       	rjmp	.+66     	; 0x1438 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    13f6:	8e 30       	cpi	r24, 0x0E	; 14
    13f8:	60 f4       	brcc	.+24     	; 0x1412 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    13fa:	98 ef       	ldi	r25, 0xF8	; 248
    13fc:	98 0f       	add	r25, r24
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	01 c0       	rjmp	.+2      	; 0x1404 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1402:	88 0f       	add	r24, r24
    1404:	9a 95       	dec	r25
    1406:	ea f7       	brpl	.-6      	; 0x1402 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    1408:	a4 e2       	ldi	r26, 0x24	; 36
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e2       	ldi	r30, 0x25	; 37
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	13 c0       	rjmp	.+38     	; 0x1438 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1412:	85 31       	cpi	r24, 0x15	; 21
    1414:	60 f4       	brcc	.+24     	; 0x142e <_ZN16OrangutanDigital9setOutputEhh+0x52>
    1416:	92 ef       	ldi	r25, 0xF2	; 242
    1418:	98 0f       	add	r25, r24
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    141e:	88 0f       	add	r24, r24
    1420:	9a 95       	dec	r25
    1422:	ea f7       	brpl	.-6      	; 0x141e <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1424:	a7 e2       	ldi	r26, 0x27	; 39
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e8 e2       	ldi	r30, 0x28	; 40
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	a0 e0       	ldi	r26, 0x00	; 0
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e0 e0       	ldi	r30, 0x00	; 0
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	6f 3f       	cpi	r22, 0xFF	; 255
    143a:	19 f4       	brne	.+6      	; 0x1442 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    143c:	90 81       	ld	r25, Z
    143e:	98 27       	eor	r25, r24
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1442:	66 23       	and	r22, r22
    1444:	19 f0       	breq	.+6      	; 0x144c <_ZN16OrangutanDigital9setOutputEhh+0x70>
    1446:	90 81       	ld	r25, Z
    1448:	98 2b       	or	r25, r24
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    144c:	20 81       	ld	r18, Z
    144e:	98 2f       	mov	r25, r24
    1450:	90 95       	com	r25
    1452:	92 23       	and	r25, r18
    1454:	90 83       	st	Z, r25
    1456:	9c 91       	ld	r25, X
    1458:	98 2b       	or	r25, r24
    145a:	9c 93       	st	X, r25
    145c:	08 95       	ret

0000145e <_ZN15OrangutanMotors5init2Ev>:
    145e:	83 ef       	ldi	r24, 0xF3	; 243
    1460:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1464:	84 bd       	out	0x24, r24	; 36
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    146c:	85 bd       	out	0x25, r24	; 37
    146e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1472:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1476:	18 bc       	out	0x28, r1	; 40
    1478:	17 bc       	out	0x27, r1	; 39
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	86 e0       	ldi	r24, 0x06	; 6
    147e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN16OrangutanDigital9setOutputEhh>
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	85 e0       	ldi	r24, 0x05	; 5
    1486:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN16OrangutanDigital9setOutputEhh>
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	8b e0       	ldi	r24, 0x0B	; 11
    148e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN16OrangutanDigital9setOutputEhh>
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	83 e0       	ldi	r24, 0x03	; 3
    1496:	0e 94 ee 09 	call	0x13dc	; 0x13dc <_ZN16OrangutanDigital9setOutputEhh>
    149a:	08 95       	ret

0000149c <_ZN15OrangutanMotors4initEv>:
    149c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZZN15OrangutanMotors4initEvE11initialized>
    14a0:	81 11       	cpse	r24, r1
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <_ZN15OrangutanMotors4initEv+0x12>
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <_ZZN15OrangutanMotors4initEvE11initialized>
    14aa:	0e 94 2f 0a 	call	0x145e	; 0x145e <_ZN15OrangutanMotors5init2Ev>
    14ae:	08 95       	ret

000014b0 <_ZN15OrangutanMotors10setM1SpeedEi>:
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24
    14b6:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN15OrangutanMotors4initEv>
    14ba:	d7 ff       	sbrs	r29, 7
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    14be:	d1 95       	neg	r29
    14c0:	c1 95       	neg	r28
    14c2:	d1 09       	sbc	r29, r1
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	cf 3f       	cpi	r28, 0xFF	; 255
    14cc:	d1 05       	cpc	r29, r1
    14ce:	19 f0       	breq	.+6      	; 0x14d6 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    14d0:	14 f0       	brlt	.+4      	; 0x14d6 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    14d2:	cf ef       	ldi	r28, 0xFF	; 255
    14d4:	d0 e0       	ldi	r29, 0x00	; 0
    14d6:	88 23       	and	r24, r24
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    14da:	18 bc       	out	0x28, r1	; 40
    14dc:	c7 bd       	out	0x27, r28	; 39
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    14e0:	c8 bd       	out	0x28, r28	; 40
    14e2:	17 bc       	out	0x27, r1	; 39
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <_ZN15OrangutanMotors10setM2SpeedEi>:
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	ec 01       	movw	r28, r24
    14f0:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN15OrangutanMotors4initEv>
    14f4:	d7 ff       	sbrs	r29, 7
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    14f8:	d1 95       	neg	r29
    14fa:	c1 95       	neg	r28
    14fc:	d1 09       	sbc	r29, r1
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	cf 3f       	cpi	r28, 0xFF	; 255
    1506:	d1 05       	cpc	r29, r1
    1508:	19 f0       	breq	.+6      	; 0x1510 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    150a:	14 f0       	brlt	.+4      	; 0x1510 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    150c:	cf ef       	ldi	r28, 0xFF	; 255
    150e:	d0 e0       	ldi	r29, 0x00	; 0
    1510:	88 23       	and	r24, r24
    1512:	29 f0       	breq	.+10     	; 0x151e <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1514:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1518:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    151e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1522:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <_ZN15OrangutanMotors9setSpeedsEii>:
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	eb 01       	movw	r28, r22
    1532:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_ZN15OrangutanMotors10setM1SpeedEi>
    1536:	ce 01       	movw	r24, r28
    1538:	0e 94 75 0a 	call	0x14ea	; 0x14ea <_ZN15OrangutanMotors10setM2SpeedEi>
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <set_motors>:
    1542:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN15OrangutanMotors9setSpeedsEii>
    1546:	08 95       	ret

00001548 <_ZN20OrangutanPushbuttons5init2Ev>:
    1548:	84 b1       	in	r24, 0x04	; 4
    154a:	8d 7c       	andi	r24, 0xCD	; 205
    154c:	84 b9       	out	0x04, r24	; 4
    154e:	85 b1       	in	r24, 0x05	; 5
    1550:	82 63       	ori	r24, 0x32	; 50
    1552:	85 b9       	out	0x05, r24	; 5
    1554:	85 e0       	ldi	r24, 0x05	; 5
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	6f 93       	push	r22
    155a:	64 e0       	ldi	r22, 0x04	; 4
    155c:	6a 95       	dec	r22
    155e:	f1 f7       	brne	.-4      	; 0x155c <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1560:	6f 91       	pop	r22
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	c9 f7       	brne	.-14     	; 0x1558 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    1566:	08 95       	ret

00001568 <_ZN20OrangutanPushbuttons4initEv>:
    1568:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    156c:	81 11       	cpse	r24, r1
    156e:	05 c0       	rjmp	.+10     	; 0x157a <_ZN20OrangutanPushbuttons4initEv+0x12>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1576:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_ZN20OrangutanPushbuttons5init2Ev>
    157a:	08 95       	ret

0000157c <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    157c:	cf 93       	push	r28
    157e:	c8 2f       	mov	r28, r24
    1580:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN20OrangutanPushbuttons4initEv>
    1584:	83 b1       	in	r24, 0x03	; 3
    1586:	8c 23       	and	r24, r28
    1588:	e9 f3       	breq	.-6      	; 0x1584 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    158a:	8a e0       	ldi	r24, 0x0A	; 10
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 2f 0b 	call	0x165e	; 0x165e <delay_ms>
    1592:	83 b1       	in	r24, 0x03	; 3
    1594:	8c 23       	and	r24, r28
    1596:	b1 f3       	breq	.-20     	; 0x1584 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    1598:	83 b1       	in	r24, 0x03	; 3
    159a:	8c 23       	and	r24, r28
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <wait_for_button_release>:
    15a0:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    15a4:	08 95       	ret

000015a6 <_ZN20OrangutanPushbuttons9isPressedEh>:
    15a6:	a1 e0       	ldi	r26, 0x01	; 1
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e9 ed       	ldi	r30, 0xD9	; 217
    15ac:	fa e0       	ldi	r31, 0x0A	; 10
    15ae:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <__prologue_saves__+0x20>
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <_ZN20OrangutanPushbuttons4initEv>
    15b8:	93 b1       	in	r25, 0x03	; 3
    15ba:	90 95       	com	r25
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	89 23       	and	r24, r25
    15c0:	21 96       	adiw	r28, 0x01	; 1
    15c2:	e2 e0       	ldi	r30, 0x02	; 2
    15c4:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__epilogue_restores__+0x20>

000015c8 <button_is_pressed>:
    15c8:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN20OrangutanPushbuttons9isPressedEh>
    15cc:	08 95       	ret

000015ce <__vector_9>:
    15ce:	2f 92       	push	r2
    15d0:	8f 93       	push	r24
    15d2:	9f 93       	push	r25
    15d4:	2f b6       	in	r2, 0x3f	; 63
    15d6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tickCount+0x1>
    15da:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tickCount+0x2>
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tickCount+0x1>
    15e4:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tickCount+0x2>
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tickCount+0x3>
    15ee:	89 1f       	adc	r24, r25
    15f0:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tickCount+0x3>
    15f4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <us_over_10+0x1>
    15f8:	9c 5f       	subi	r25, 0xFC	; 252
    15fa:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <us_over_10+0x1>
    15fe:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <us_over_10>
    1602:	80 51       	subi	r24, 0x10	; 16
    1604:	97 42       	sbci	r25, 0x27	; 39
    1606:	c0 f0       	brcs	.+48     	; 0x1638 <end>
    1608:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <us_over_10+0x1>
    160c:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <us_over_10>
    1610:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <msCounter>
    1614:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <msCounter+0x1>
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <msCounter>
    161e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <msCounter+0x1>
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <msCounter+0x2>
    1628:	89 1f       	adc	r24, r25
    162a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <msCounter+0x2>
    162e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <msCounter+0x3>
    1632:	89 1f       	adc	r24, r25
    1634:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <msCounter+0x3>

00001638 <end>:
    1638:	2f be       	out	0x3f, r2	; 63
    163a:	9f 91       	pop	r25
    163c:	8f 91       	pop	r24
    163e:	2f 90       	pop	r2
    1640:	18 95       	reti

00001642 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1642:	28 ee       	ldi	r18, 0xE8	; 232
    1644:	33 e0       	ldi	r19, 0x03	; 3
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	48 f0       	brcs	.+18     	; 0x165c <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    164a:	f9 01       	movw	r30, r18
    164c:	6f 93       	push	r22
    164e:	64 e0       	ldi	r22, 0x04	; 4
    1650:	6a 95       	dec	r22
    1652:	f1 f7       	brne	.-4      	; 0x1650 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    1654:	6f 91       	pop	r22
    1656:	31 97       	sbiw	r30, 0x01	; 1
    1658:	c9 f7       	brne	.-14     	; 0x164c <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    165a:	f5 cf       	rjmp	.-22     	; 0x1646 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    165c:	08 95       	ret

0000165e <delay_ms>:
    165e:	0e 94 21 0b 	call	0x1642	; 0x1642 <_ZN13OrangutanTime17delayMillisecondsEj>
    1662:	08 95       	ret

00001664 <_ZN13OrangutanTime5init2Ev>:
    1664:	e0 e7       	ldi	r30, 0x70	; 112
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8e 7f       	andi	r24, 0xFE	; 254
    166c:	80 83       	st	Z, r24
    166e:	a0 eb       	ldi	r26, 0xB0	; 176
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	8c 91       	ld	r24, X
    1674:	83 60       	ori	r24, 0x03	; 3
    1676:	8c 93       	st	X, r24
    1678:	a1 eb       	ldi	r26, 0xB1	; 177
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	8c 91       	ld	r24, X
    167e:	80 7f       	andi	r24, 0xF0	; 240
    1680:	8c 93       	st	X, r24
    1682:	8c 91       	ld	r24, X
    1684:	82 60       	ori	r24, 0x02	; 2
    1686:	8c 93       	st	X, r24
    1688:	b8 9a       	sbi	0x17, 0	; 23
    168a:	80 81       	ld	r24, Z
    168c:	81 60       	ori	r24, 0x01	; 1
    168e:	80 83       	st	Z, r24
    1690:	78 94       	sei
    1692:	08 95       	ret

00001694 <_ZN13OrangutanTime4initEv>:
    1694:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZZN13OrangutanTime4initEvE11initialized>
    1698:	81 11       	cpse	r24, r1
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <_ZN13OrangutanTime4initEv+0x12>
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <_ZZN13OrangutanTime4initEvE11initialized>
    16a2:	0e 94 32 0b 	call	0x1664	; 0x1664 <_ZN13OrangutanTime5init2Ev>
    16a6:	08 95       	ret

000016a8 <_ZN13OrangutanTime5resetEv>:
    16a8:	0e 94 4a 0b 	call	0x1694	; 0x1694 <_ZN13OrangutanTime4initEv>
    16ac:	e0 e7       	ldi	r30, 0x70	; 112
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	8e 7f       	andi	r24, 0xFE	; 254
    16b4:	80 83       	st	Z, r24
    16b6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <msCounter>
    16ba:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <msCounter+0x1>
    16be:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <msCounter+0x2>
    16c2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <msCounter+0x3>
    16c6:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <us_over_10+0x1>
    16ca:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <us_over_10>
    16ce:	80 81       	ld	r24, Z
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 83       	st	Z, r24
    16d4:	08 95       	ret

000016d6 <calibrate_line_sensors>:
    16d6:	68 2f       	mov	r22, r24
    16d8:	8c e4       	ldi	r24, 0x4C	; 76
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_ZN16PololuQTRSensors9calibrateEh>
    16e0:	08 95       	ret

000016e2 <read_line>:
    16e2:	46 2f       	mov	r20, r22
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	bc 01       	movw	r22, r24
    16e8:	8c e4       	ldi	r24, 0x4C	; 76
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 24 10 	call	0x2048	; 0x2048 <_ZN16PololuQTRSensors8readLineEPjhh>
    16f0:	08 95       	ret

000016f2 <_ZN9Pololu3pi4initEjh>:
    16f2:	0f 93       	push	r16
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <_ZN9Pololu3pi4initEjh+0x8>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <_ZN9Pololu3pi4initEjh+0xa>
    16fc:	1f 92       	push	r1
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	9c 01       	movw	r18, r24
    1704:	85 e0       	ldi	r24, 0x05	; 5
    1706:	ee e1       	ldi	r30, 0x1E	; 30
    1708:	f1 e0       	ldi	r31, 0x01	; 1
    170a:	de 01       	movw	r26, r28
    170c:	11 96       	adiw	r26, 0x01	; 1
    170e:	01 90       	ld	r0, Z+
    1710:	0d 92       	st	X+, r0
    1712:	8a 95       	dec	r24
    1714:	e1 f7       	brne	.-8      	; 0x170e <_ZN9Pololu3pi4initEjh+0x1c>
    1716:	66 23       	and	r22, r22
    1718:	11 f0       	breq	.+4      	; 0x171e <_ZN9Pololu3pi4initEjh+0x2c>
    171a:	0f ef       	ldi	r16, 0xFF	; 255
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <_ZN9Pololu3pi4initEjh+0x2e>
    171e:	03 e1       	ldi	r16, 0x13	; 19
    1720:	45 e0       	ldi	r20, 0x05	; 5
    1722:	be 01       	movw	r22, r28
    1724:	6f 5f       	subi	r22, 0xFF	; 255
    1726:	7f 4f       	sbci	r23, 0xFF	; 255
    1728:	8c e4       	ldi	r24, 0x4C	; 76
    172a:	91 e0       	ldi	r25, 0x01	; 1
    172c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1730:	8c e4       	ldi	r24, 0x4C	; 76
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN16PololuQTRSensors11emittersOffEv>
    1738:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <_ZN13OrangutanTime5resetEv>
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <pololu_3pi_init>:
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN9Pololu3pi4initEjh>
    1754:	08 95       	ret

00001756 <_GLOBAL__sub_D_pololu_3pi_init>:
    1756:	8c e4       	ldi	r24, 0x4C	; 76
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	0e 94 99 10 	call	0x2132	; 0x2132 <_ZN16PololuQTRSensorsD1Ev>
    175e:	08 95       	ret

00001760 <delay_us>:
    1760:	6f 93       	push	r22
    1762:	64 e0       	ldi	r22, 0x04	; 4
    1764:	6a 95       	dec	r22
    1766:	f1 f7       	brne	.-4      	; 0x1764 <delay_us+0x4>
    1768:	6f 91       	pop	r22
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	c9 f7       	brne	.-14     	; 0x1760 <delay_us>
    176e:	08 95       	ret

00001770 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1770:	fc 01       	movw	r30, r24
    1772:	11 82       	std	Z+1, r1	; 0x01
    1774:	10 82       	st	Z, r1
    1776:	13 82       	std	Z+3, r1	; 0x03
    1778:	12 82       	std	Z+2, r1	; 0x02
    177a:	15 82       	std	Z+5, r1	; 0x05
    177c:	14 82       	std	Z+4, r1	; 0x04
    177e:	16 82       	std	Z+6, r1	; 0x06
    1780:	68 30       	cpi	r22, 0x08	; 8
    1782:	68 f4       	brcc	.+26     	; 0x179e <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1784:	89 e2       	ldi	r24, 0x29	; 41
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
    178c:	8b e2       	ldi	r24, 0x2B	; 43
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	93 83       	std	Z+3, r25	; 0x03
    1792:	82 83       	std	Z+2, r24	; 0x02
    1794:	8a e2       	ldi	r24, 0x2A	; 42
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	95 83       	std	Z+5, r25	; 0x05
    179a:	84 83       	std	Z+4, r24	; 0x04
    179c:	1f c0       	rjmp	.+62     	; 0x17dc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    179e:	6e 30       	cpi	r22, 0x0E	; 14
    17a0:	70 f4       	brcc	.+28     	; 0x17be <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    17a2:	83 e2       	ldi	r24, 0x23	; 35
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	85 e2       	ldi	r24, 0x25	; 37
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	93 83       	std	Z+3, r25	; 0x03
    17b0:	82 83       	std	Z+2, r24	; 0x02
    17b2:	84 e2       	ldi	r24, 0x24	; 36
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	95 83       	std	Z+5, r25	; 0x05
    17b8:	84 83       	std	Z+4, r24	; 0x04
    17ba:	68 50       	subi	r22, 0x08	; 8
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    17be:	65 31       	cpi	r22, 0x15	; 21
    17c0:	98 f4       	brcc	.+38     	; 0x17e8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    17c2:	86 e2       	ldi	r24, 0x26	; 38
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	88 e2       	ldi	r24, 0x28	; 40
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	93 83       	std	Z+3, r25	; 0x03
    17d0:	82 83       	std	Z+2, r24	; 0x02
    17d2:	87 e2       	ldi	r24, 0x27	; 39
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	95 83       	std	Z+5, r25	; 0x05
    17d8:	84 83       	std	Z+4, r24	; 0x04
    17da:	6e 50       	subi	r22, 0x0E	; 14
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    17e0:	88 0f       	add	r24, r24
    17e2:	6a 95       	dec	r22
    17e4:	ea f7       	brpl	.-6      	; 0x17e0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    17e6:	86 83       	std	Z+6, r24	; 0x06
    17e8:	08 95       	ret

000017ea <_ZN16PololuQTRSensors4initEhhh>:
    17ea:	a7 e0       	ldi	r26, 0x07	; 7
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	eb ef       	ldi	r30, 0xFB	; 251
    17f0:	fb e0       	ldi	r31, 0x0B	; 11
    17f2:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__prologue_saves__+0x1c>
    17f6:	8c 01       	movw	r16, r24
    17f8:	fc 01       	movw	r30, r24
    17fa:	11 82       	std	Z+1, r1	; 0x01
    17fc:	10 82       	st	Z, r1
    17fe:	13 82       	std	Z+3, r1	; 0x03
    1800:	12 82       	std	Z+2, r1	; 0x02
    1802:	15 82       	std	Z+5, r1	; 0x05
    1804:	14 82       	std	Z+4, r1	; 0x04
    1806:	17 82       	std	Z+7, r1	; 0x07
    1808:	16 82       	std	Z+6, r1	; 0x06
    180a:	61 31       	cpi	r22, 0x11	; 17
    180c:	18 f0       	brcs	.+6      	; 0x1814 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    180e:	80 e1       	ldi	r24, 0x10	; 16
    1810:	80 87       	std	Z+8, r24	; 0x08
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1814:	fc 01       	movw	r30, r24
    1816:	60 87       	std	Z+8, r22	; 0x08
    1818:	f8 01       	movw	r30, r16
    181a:	20 8b       	std	Z+16, r18	; 0x10
    181c:	64 2f       	mov	r22, r20
    181e:	ce 01       	movw	r24, r28
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    1826:	8f 81       	ldd	r24, Y+7	; 0x07
    1828:	f8 01       	movw	r30, r16
    182a:	81 87       	std	Z+9, r24	; 0x09
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	93 87       	std	Z+11, r25	; 0x0b
    1832:	82 87       	std	Z+10, r24	; 0x0a
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	95 87       	std	Z+13, r25	; 0x0d
    183a:	84 87       	std	Z+12, r24	; 0x0c
    183c:	27 96       	adiw	r28, 0x07	; 7
    183e:	e4 e0       	ldi	r30, 0x04	; 4
    1840:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__epilogue_restores__+0x1c>

00001844 <_ZN16PololuQTRSensors11emittersOffEv>:
    1844:	fc 01       	movw	r30, r24
    1846:	a4 85       	ldd	r26, Z+12	; 0x0c
    1848:	b5 85       	ldd	r27, Z+13	; 0x0d
    184a:	10 97       	sbiw	r26, 0x00	; 0
    184c:	79 f0       	breq	.+30     	; 0x186c <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    184e:	8c 91       	ld	r24, X
    1850:	91 85       	ldd	r25, Z+9	; 0x09
    1852:	89 2b       	or	r24, r25
    1854:	8c 93       	st	X, r24
    1856:	a2 85       	ldd	r26, Z+10	; 0x0a
    1858:	b3 85       	ldd	r27, Z+11	; 0x0b
    185a:	9c 91       	ld	r25, X
    185c:	81 85       	ldd	r24, Z+9	; 0x09
    185e:	80 95       	com	r24
    1860:	89 23       	and	r24, r25
    1862:	8c 93       	st	X, r24
    1864:	88 ec       	ldi	r24, 0xC8	; 200
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay_us>
    186c:	08 95       	ret

0000186e <_ZN16PololuQTRSensors10emittersOnEv>:
    186e:	fc 01       	movw	r30, r24
    1870:	a4 85       	ldd	r26, Z+12	; 0x0c
    1872:	b5 85       	ldd	r27, Z+13	; 0x0d
    1874:	10 97       	sbiw	r26, 0x00	; 0
    1876:	71 f0       	breq	.+28     	; 0x1894 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    1878:	8c 91       	ld	r24, X
    187a:	91 85       	ldd	r25, Z+9	; 0x09
    187c:	89 2b       	or	r24, r25
    187e:	8c 93       	st	X, r24
    1880:	a2 85       	ldd	r26, Z+10	; 0x0a
    1882:	b3 85       	ldd	r27, Z+11	; 0x0b
    1884:	8c 91       	ld	r24, X
    1886:	91 85       	ldd	r25, Z+9	; 0x09
    1888:	89 2b       	or	r24, r25
    188a:	8c 93       	st	X, r24
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay_us>
    1894:	08 95       	ret

00001896 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    1896:	a7 e0       	ldi	r26, 0x07	; 7
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e1 e5       	ldi	r30, 0x51	; 81
    189c:	fc e0       	ldi	r31, 0x0C	; 12
    189e:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <__prologue_saves__+0x6>
    18a2:	7c 01       	movw	r14, r24
    18a4:	4b 01       	movw	r8, r22
    18a6:	64 2f       	mov	r22, r20
    18a8:	39 01       	movw	r6, r18
    18aa:	40 2f       	mov	r20, r16
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <_ZN16PololuQTRSensors4initEhhh>
    18b2:	87 01       	movw	r16, r14
    18b4:	0f 5b       	subi	r16, 0xBF	; 191
    18b6:	1f 4f       	sbci	r17, 0xFF	; 255
    18b8:	f8 01       	movw	r30, r16
    18ba:	10 82       	st	Z, r1
    18bc:	67 01       	movw	r12, r14
    18be:	f2 e4       	ldi	r31, 0x42	; 66
    18c0:	cf 0e       	add	r12, r31
    18c2:	d1 1c       	adc	r13, r1
    18c4:	f6 01       	movw	r30, r12
    18c6:	10 82       	st	Z, r1
    18c8:	57 01       	movw	r10, r14
    18ca:	f3 e4       	ldi	r31, 0x43	; 67
    18cc:	af 0e       	add	r10, r31
    18ce:	b1 1c       	adc	r11, r1
    18d0:	f5 01       	movw	r30, r10
    18d2:	10 82       	st	Z, r1
    18d4:	f7 01       	movw	r30, r14
    18d6:	77 86       	std	Z+15, r7	; 0x0f
    18d8:	66 86       	std	Z+14, r6	; 0x0e
    18da:	51 2c       	mov	r5, r1
    18dc:	f7 01       	movw	r30, r14
    18de:	80 85       	ldd	r24, Z+8	; 0x08
    18e0:	58 16       	cp	r5, r24
    18e2:	50 f5       	brcc	.+84     	; 0x1938 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    18e4:	65 2c       	mov	r6, r5
    18e6:	71 2c       	mov	r7, r1
    18e8:	f4 01       	movw	r30, r8
    18ea:	e6 0d       	add	r30, r6
    18ec:	f7 1d       	adc	r31, r7
    18ee:	60 81       	ld	r22, Z
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    18f8:	2f 81       	ldd	r18, Y+7	; 0x07
    18fa:	f7 01       	movw	r30, r14
    18fc:	e6 0d       	add	r30, r6
    18fe:	f7 1d       	adc	r31, r7
    1900:	21 8b       	std	Z+17, r18	; 0x11
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	f3 01       	movw	r30, r6
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	ee 0d       	add	r30, r14
    190e:	ff 1d       	adc	r31, r15
    1910:	92 a3       	std	Z+34, r25	; 0x22
    1912:	81 a3       	std	Z+33, r24	; 0x21
    1914:	83 32       	cpi	r24, 0x23	; 35
    1916:	91 05       	cpc	r25, r1
    1918:	11 f4       	brne	.+4      	; 0x191e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    191a:	f8 01       	movw	r30, r16
    191c:	08 c0       	rjmp	.+16     	; 0x192e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    191e:	86 32       	cpi	r24, 0x26	; 38
    1920:	91 05       	cpc	r25, r1
    1922:	11 f4       	brne	.+4      	; 0x1928 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1924:	f6 01       	movw	r30, r12
    1926:	03 c0       	rjmp	.+6      	; 0x192e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1928:	89 97       	sbiw	r24, 0x29	; 41
    192a:	21 f4       	brne	.+8      	; 0x1934 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    192c:	f5 01       	movw	r30, r10
    192e:	80 81       	ld	r24, Z
    1930:	82 2b       	or	r24, r18
    1932:	80 83       	st	Z, r24
    1934:	53 94       	inc	r5
    1936:	d2 cf       	rjmp	.-92     	; 0x18dc <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    1938:	27 96       	adiw	r28, 0x07	; 7
    193a:	ef e0       	ldi	r30, 0x0F	; 15
    193c:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__epilogue_restores__+0x6>

00001940 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e6 ea       	ldi	r30, 0xA6	; 166
    1946:	fc e0       	ldi	r31, 0x0C	; 12
    1948:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__prologue_saves__+0xa>
    194c:	ec 01       	movw	r28, r24
    194e:	5b 01       	movw	r10, r22
    1950:	6c 01       	movw	r12, r24
    1952:	81 e4       	ldi	r24, 0x41	; 65
    1954:	c8 0e       	add	r12, r24
    1956:	d1 1c       	adc	r13, r1
    1958:	f6 01       	movw	r30, r12
    195a:	80 80       	ld	r8, Z
    195c:	7e 01       	movw	r14, r28
    195e:	f2 e4       	ldi	r31, 0x42	; 66
    1960:	ef 0e       	add	r14, r31
    1962:	f1 1c       	adc	r15, r1
    1964:	f7 01       	movw	r30, r14
    1966:	70 80       	ld	r7, Z
    1968:	8e 01       	movw	r16, r28
    196a:	0d 5b       	subi	r16, 0xBD	; 189
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	f8 01       	movw	r30, r16
    1970:	90 80       	ld	r9, Z
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	98 85       	ldd	r25, Y+8	; 0x08
    1976:	89 17       	cp	r24, r25
    1978:	48 f4       	brcc	.+18     	; 0x198c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    197a:	f5 01       	movw	r30, r10
    197c:	e8 0f       	add	r30, r24
    197e:	f1 1d       	adc	r31, r1
    1980:	e8 0f       	add	r30, r24
    1982:	f1 1d       	adc	r31, r1
    1984:	11 82       	std	Z+1, r1	; 0x01
    1986:	10 82       	st	Z, r1
    1988:	8f 5f       	subi	r24, 0xFF	; 255
    198a:	f4 cf       	rjmp	.-24     	; 0x1974 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    198c:	84 b1       	in	r24, 0x04	; 4
    198e:	f6 01       	movw	r30, r12
    1990:	90 81       	ld	r25, Z
    1992:	89 2b       	or	r24, r25
    1994:	84 b9       	out	0x04, r24	; 4
    1996:	87 b1       	in	r24, 0x07	; 7
    1998:	f7 01       	movw	r30, r14
    199a:	90 81       	ld	r25, Z
    199c:	89 2b       	or	r24, r25
    199e:	87 b9       	out	0x07, r24	; 7
    19a0:	8a b1       	in	r24, 0x0a	; 10
    19a2:	f8 01       	movw	r30, r16
    19a4:	90 81       	ld	r25, Z
    19a6:	89 2b       	or	r24, r25
    19a8:	8a b9       	out	0x0a, r24	; 10
    19aa:	85 b1       	in	r24, 0x05	; 5
    19ac:	f6 01       	movw	r30, r12
    19ae:	90 81       	ld	r25, Z
    19b0:	89 2b       	or	r24, r25
    19b2:	85 b9       	out	0x05, r24	; 5
    19b4:	88 b1       	in	r24, 0x08	; 8
    19b6:	f7 01       	movw	r30, r14
    19b8:	90 81       	ld	r25, Z
    19ba:	89 2b       	or	r24, r25
    19bc:	88 b9       	out	0x08, r24	; 8
    19be:	8b b1       	in	r24, 0x0b	; 11
    19c0:	f8 01       	movw	r30, r16
    19c2:	90 81       	ld	r25, Z
    19c4:	89 2b       	or	r24, r25
    19c6:	8b b9       	out	0x0b, r24	; 11
    19c8:	8a e0       	ldi	r24, 0x0A	; 10
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 b0 0b 	call	0x1760	; 0x1760 <delay_us>
    19d0:	94 b1       	in	r25, 0x04	; 4
    19d2:	f6 01       	movw	r30, r12
    19d4:	80 81       	ld	r24, Z
    19d6:	80 95       	com	r24
    19d8:	89 23       	and	r24, r25
    19da:	84 b9       	out	0x04, r24	; 4
    19dc:	97 b1       	in	r25, 0x07	; 7
    19de:	f7 01       	movw	r30, r14
    19e0:	80 81       	ld	r24, Z
    19e2:	80 95       	com	r24
    19e4:	89 23       	and	r24, r25
    19e6:	87 b9       	out	0x07, r24	; 7
    19e8:	9a b1       	in	r25, 0x0a	; 10
    19ea:	f8 01       	movw	r30, r16
    19ec:	80 81       	ld	r24, Z
    19ee:	80 95       	com	r24
    19f0:	89 23       	and	r24, r25
    19f2:	8a b9       	out	0x0a, r24	; 10
    19f4:	95 b1       	in	r25, 0x05	; 5
    19f6:	f6 01       	movw	r30, r12
    19f8:	80 81       	ld	r24, Z
    19fa:	80 95       	com	r24
    19fc:	89 23       	and	r24, r25
    19fe:	85 b9       	out	0x05, r24	; 5
    1a00:	98 b1       	in	r25, 0x08	; 8
    1a02:	f7 01       	movw	r30, r14
    1a04:	80 81       	ld	r24, Z
    1a06:	80 95       	com	r24
    1a08:	89 23       	and	r24, r25
    1a0a:	88 b9       	out	0x08, r24	; 8
    1a0c:	9b b1       	in	r25, 0x0b	; 11
    1a0e:	f8 01       	movw	r30, r16
    1a10:	80 81       	ld	r24, Z
    1a12:	80 95       	com	r24
    1a14:	89 23       	and	r24, r25
    1a16:	8b b9       	out	0x0b, r24	; 11
    1a18:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1a1c:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1a20:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1a24:	83 60       	ori	r24, 0x03	; 3
    1a26:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1a30:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a3a:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a3c:	82 17       	cp	r24, r18
    1a3e:	93 07       	cpc	r25, r19
    1a40:	20 f5       	brcc	.+72     	; 0x1a8a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1a42:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1a46:	2c 2d       	mov	r18, r12
    1a48:	24 1b       	sub	r18, r20
    1a4a:	82 0f       	add	r24, r18
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	03 b1       	in	r16, 0x03	; 3
    1a50:	08 11       	cpse	r16, r8
    1a52:	32 c0       	rjmp	.+100    	; 0x1ab8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a54:	f6 b0       	in	r15, 0x06	; 6
    1a56:	f7 10       	cpse	r15, r7
    1a58:	2f c0       	rjmp	.+94     	; 0x1ab8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a5a:	29 b1       	in	r18, 0x09	; 9
    1a5c:	29 11       	cpse	r18, r9
    1a5e:	2c c0       	rjmp	.+88     	; 0x1ab8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1a60:	10 c0       	rjmp	.+32     	; 0x1a82 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1a62:	21 2f       	mov	r18, r17
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	a9 01       	movw	r20, r18
    1a68:	44 0f       	add	r20, r20
    1a6a:	55 1f       	adc	r21, r21
    1a6c:	f5 01       	movw	r30, r10
    1a6e:	e4 0f       	add	r30, r20
    1a70:	f5 1f       	adc	r31, r21
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	67 2b       	or	r22, r23
    1a78:	21 f1       	breq	.+72     	; 0x1ac2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    1a7a:	1f 5f       	subi	r17, 0xFF	; 255
    1a7c:	28 85       	ldd	r18, Y+8	; 0x08
    1a7e:	12 17       	cp	r17, r18
    1a80:	80 f3       	brcs	.-32     	; 0x1a62 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1a82:	7f 2c       	mov	r7, r15
    1a84:	80 2e       	mov	r8, r16
    1a86:	4c 2d       	mov	r20, r12
    1a88:	d7 cf       	rjmp	.-82     	; 0x1a38 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    1a8a:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1a8e:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	88 85       	ldd	r24, Y+8	; 0x08
    1a96:	28 17       	cp	r18, r24
    1a98:	30 f5       	brcc	.+76     	; 0x1ae6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    1a9a:	f5 01       	movw	r30, r10
    1a9c:	e2 0f       	add	r30, r18
    1a9e:	f1 1d       	adc	r31, r1
    1aa0:	e2 0f       	add	r30, r18
    1aa2:	f1 1d       	adc	r31, r1
    1aa4:	80 81       	ld	r24, Z
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	89 2b       	or	r24, r25
    1aaa:	21 f4       	brne	.+8      	; 0x1ab4 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    1aac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    1ab4:	2f 5f       	subi	r18, 0xFF	; 255
    1ab6:	ee cf       	rjmp	.-36     	; 0x1a94 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    1ab8:	03 b1       	in	r16, 0x03	; 3
    1aba:	f6 b0       	in	r15, 0x06	; 6
    1abc:	99 b0       	in	r9, 0x09	; 9
    1abe:	10 e0       	ldi	r17, 0x00	; 0
    1ac0:	dd cf       	rjmp	.-70     	; 0x1a7c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    1ac2:	de 01       	movw	r26, r28
    1ac4:	a4 0f       	add	r26, r20
    1ac6:	b5 1f       	adc	r27, r21
    1ac8:	91 96       	adiw	r26, 0x21	; 33
    1aca:	0d 90       	ld	r0, X+
    1acc:	bc 91       	ld	r27, X
    1ace:	a0 2d       	mov	r26, r0
    1ad0:	4c 91       	ld	r20, X
    1ad2:	de 01       	movw	r26, r28
    1ad4:	a2 0f       	add	r26, r18
    1ad6:	b3 1f       	adc	r27, r19
    1ad8:	51 96       	adiw	r26, 0x11	; 17
    1ada:	2c 91       	ld	r18, X
    1adc:	42 23       	and	r20, r18
    1ade:	69 f6       	brne	.-102    	; 0x1a7a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
    1ae4:	ca cf       	rjmp	.-108    	; 0x1a7a <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	ed e0       	ldi	r30, 0x0D	; 13
    1aec:	0c 94 69 11 	jmp	0x22d2	; 0x22d2 <__epilogue_restores__+0xa>

00001af0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	fc 01       	movw	r30, r24
    1afe:	9b 01       	movw	r18, r22
    1b00:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1b04:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b08:	47 b1       	in	r20, 0x07	; 7
    1b0a:	18 b1       	in	r17, 0x08	; 8
    1b0c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b10:	86 fd       	sbrc	r24, 6
    1b12:	fc cf       	rjmp	.-8      	; 0x1b0c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 85       	ldd	r25, Z+8	; 0x08
    1b18:	89 17       	cp	r24, r25
    1b1a:	48 f4       	brcc	.+18     	; 0x1b2e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1b1c:	d9 01       	movw	r26, r18
    1b1e:	a8 0f       	add	r26, r24
    1b20:	b1 1d       	adc	r27, r1
    1b22:	a8 0f       	add	r26, r24
    1b24:	b1 1d       	adc	r27, r1
    1b26:	1d 92       	st	X+, r1
    1b28:	1c 92       	st	X, r1
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	f4 cf       	rjmp	.-24     	; 0x1b16 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1b2e:	97 b1       	in	r25, 0x07	; 7
    1b30:	82 a1       	ldd	r24, Z+34	; 0x22
    1b32:	80 95       	com	r24
    1b34:	89 23       	and	r24, r25
    1b36:	87 b9       	out	0x07, r24	; 7
    1b38:	98 b1       	in	r25, 0x08	; 8
    1b3a:	82 a1       	ldd	r24, Z+34	; 0x22
    1b3c:	80 95       	com	r24
    1b3e:	89 23       	and	r24, r25
    1b40:	88 b9       	out	0x08, r24	; 8
    1b42:	87 e8       	ldi	r24, 0x87	; 135
    1b44:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b48:	e1 2c       	mov	r14, r1
    1b4a:	81 a1       	ldd	r24, Z+33	; 0x21
    1b4c:	e8 16       	cp	r14, r24
    1b4e:	10 f0       	brcs	.+4      	; 0x1b54 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1b50:	e1 2c       	mov	r14, r1
    1b52:	29 c0       	rjmp	.+82     	; 0x1ba6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	80 85       	ldd	r24, Z+8	; 0x08
    1b58:	58 17       	cp	r21, r24
    1b5a:	18 f5       	brcc	.+70     	; 0x1ba2 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1b5c:	a5 2f       	mov	r26, r21
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ef 01       	movw	r28, r30
    1b62:	ca 0f       	add	r28, r26
    1b64:	db 1f       	adc	r29, r27
    1b66:	89 89       	ldd	r24, Y+17	; 0x11
    1b68:	80 64       	ori	r24, 0x40	; 64
    1b6a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1b6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b72:	80 64       	ori	r24, 0x40	; 64
    1b74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b78:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1b7c:	86 fd       	sbrc	r24, 6
    1b7e:	fc cf       	rjmp	.-8      	; 0x1b78 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1b80:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1b84:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1b88:	aa 0f       	add	r26, r26
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	a2 0f       	add	r26, r18
    1b8e:	b3 1f       	adc	r27, r19
    1b90:	8d 91       	ld	r24, X+
    1b92:	9c 91       	ld	r25, X
    1b94:	11 97       	sbiw	r26, 0x01	; 1
    1b96:	86 0f       	add	r24, r22
    1b98:	97 1f       	adc	r25, r23
    1b9a:	8d 93       	st	X+, r24
    1b9c:	9c 93       	st	X, r25
    1b9e:	5f 5f       	subi	r21, 0xFF	; 255
    1ba0:	da cf       	rjmp	.-76     	; 0x1b56 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    1ba2:	e3 94       	inc	r14
    1ba4:	d2 cf       	rjmp	.-92     	; 0x1b4a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    1ba6:	80 85       	ldd	r24, Z+8	; 0x08
    1ba8:	e8 16       	cp	r14, r24
    1baa:	a0 f4       	brcc	.+40     	; 0x1bd4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    1bac:	e9 01       	movw	r28, r18
    1bae:	ce 0d       	add	r28, r14
    1bb0:	d1 1d       	adc	r29, r1
    1bb2:	ce 0d       	add	r28, r14
    1bb4:	d1 1d       	adc	r29, r1
    1bb6:	61 a1       	ldd	r22, Z+33	; 0x21
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	cb 01       	movw	r24, r22
    1bbc:	95 95       	asr	r25
    1bbe:	87 95       	ror	r24
    1bc0:	a8 81       	ld	r26, Y
    1bc2:	b9 81       	ldd	r27, Y+1	; 0x01
    1bc4:	8a 0f       	add	r24, r26
    1bc6:	9b 1f       	adc	r25, r27
    1bc8:	0e 94 b7 10 	call	0x216e	; 0x216e <__udivmodhi4>
    1bcc:	79 83       	std	Y+1, r23	; 0x01
    1bce:	68 83       	st	Y, r22
    1bd0:	e3 94       	inc	r14
    1bd2:	e9 cf       	rjmp	.-46     	; 0x1ba6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1bd4:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1bd8:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1bdc:	18 b9       	out	0x08, r17	; 8
    1bde:	47 b9       	out	0x07, r20	; 7
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	e6 e0       	ldi	r30, 0x06	; 6
    1be6:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__epilogue_restores__+0x18>

00001bea <_ZN16PololuQTRSensors4readEPjh>:
    1bea:	a0 e2       	ldi	r26, 0x20	; 32
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	eb ef       	ldi	r30, 0xFB	; 251
    1bf0:	fd e0       	ldi	r31, 0x0D	; 13
    1bf2:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__prologue_saves__+0x16>
    1bf6:	8c 01       	movw	r16, r24
    1bf8:	7b 01       	movw	r14, r22
    1bfa:	d4 2e       	mov	r13, r20
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	84 0f       	add	r24, r20
    1c00:	82 30       	cpi	r24, 0x02	; 2
    1c02:	18 f4       	brcc	.+6      	; 0x1c0a <_ZN16PololuQTRSensors4readEPjh+0x20>
    1c04:	c8 01       	movw	r24, r16
    1c06:	0e 94 37 0c 	call	0x186e	; 0x186e <_ZN16PololuQTRSensors10emittersOnEv>
    1c0a:	d8 01       	movw	r26, r16
    1c0c:	50 96       	adiw	r26, 0x10	; 16
    1c0e:	8c 91       	ld	r24, X
    1c10:	b7 01       	movw	r22, r14
    1c12:	81 11       	cpse	r24, r1
    1c14:	10 c0       	rjmp	.+32     	; 0x1c36 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1c16:	c8 01       	movw	r24, r16
    1c18:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1c1c:	c8 01       	movw	r24, r16
    1c1e:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN16PololuQTRSensors11emittersOffEv>
    1c22:	b2 e0       	ldi	r27, 0x02	; 2
    1c24:	db 12       	cpse	r13, r27
    1c26:	3a c0       	rjmp	.+116    	; 0x1c9c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c28:	be 01       	movw	r22, r28
    1c2a:	6f 5f       	subi	r22, 0xFF	; 255
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	c8 01       	movw	r24, r16
    1c30:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1c34:	0f c0       	rjmp	.+30     	; 0x1c54 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1c36:	c8 01       	movw	r24, r16
    1c38:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1c3c:	c8 01       	movw	r24, r16
    1c3e:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN16PololuQTRSensors11emittersOffEv>
    1c42:	e2 e0       	ldi	r30, 0x02	; 2
    1c44:	de 12       	cpse	r13, r30
    1c46:	2a c0       	rjmp	.+84     	; 0x1c9c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c48:	be 01       	movw	r22, r28
    1c4a:	6f 5f       	subi	r22, 0xFF	; 255
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	c8 01       	movw	r24, r16
    1c50:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	f8 01       	movw	r30, r16
    1c58:	80 85       	ldd	r24, Z+8	; 0x08
    1c5a:	48 17       	cp	r20, r24
    1c5c:	f8 f4       	brcc	.+62     	; 0x1c9c <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1c5e:	84 2f       	mov	r24, r20
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	f7 01       	movw	r30, r14
    1c68:	e8 0f       	add	r30, r24
    1c6a:	f9 1f       	adc	r31, r25
    1c6c:	21 e0       	ldi	r18, 0x01	; 1
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	2c 0f       	add	r18, r28
    1c72:	3d 1f       	adc	r19, r29
    1c74:	82 0f       	add	r24, r18
    1c76:	93 1f       	adc	r25, r19
    1c78:	d8 01       	movw	r26, r16
    1c7a:	1e 96       	adiw	r26, 0x0e	; 14
    1c7c:	2d 91       	ld	r18, X+
    1c7e:	3c 91       	ld	r19, X
    1c80:	1f 97       	sbiw	r26, 0x0f	; 15
    1c82:	dc 01       	movw	r26, r24
    1c84:	8d 91       	ld	r24, X+
    1c86:	9c 91       	ld	r25, X
    1c88:	28 1b       	sub	r18, r24
    1c8a:	39 0b       	sbc	r19, r25
    1c8c:	80 81       	ld	r24, Z
    1c8e:	91 81       	ldd	r25, Z+1	; 0x01
    1c90:	82 0f       	add	r24, r18
    1c92:	93 1f       	adc	r25, r19
    1c94:	91 83       	std	Z+1, r25	; 0x01
    1c96:	80 83       	st	Z, r24
    1c98:	4f 5f       	subi	r20, 0xFF	; 255
    1c9a:	dd cf       	rjmp	.-70     	; 0x1c56 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1c9c:	a0 96       	adiw	r28, 0x20	; 32
    1c9e:	e7 e0       	ldi	r30, 0x07	; 7
    1ca0:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__epilogue_restores__+0x16>

00001ca4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1ca4:	2f 92       	push	r2
    1ca6:	3f 92       	push	r3
    1ca8:	5f 92       	push	r5
    1caa:	6f 92       	push	r6
    1cac:	7f 92       	push	r7
    1cae:	8f 92       	push	r8
    1cb0:	9f 92       	push	r9
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	c0 56       	subi	r28, 0x60	; 96
    1ccc:	d1 09       	sbc	r29, r1
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	8c 01       	movw	r16, r24
    1cda:	4b 01       	movw	r8, r22
    1cdc:	5a 01       	movw	r10, r20
    1cde:	52 2e       	mov	r5, r18
    1ce0:	da 01       	movw	r26, r20
    1ce2:	8d 91       	ld	r24, X+
    1ce4:	9c 91       	ld	r25, X
    1ce6:	89 2b       	or	r24, r25
    1ce8:	31 f0       	breq	.+12     	; 0x1cf6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1cea:	f4 01       	movw	r30, r8
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	89 2b       	or	r24, r25
    1cf2:	f1 f4       	brne	.+60     	; 0x1d30 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1cf4:	24 c0       	rjmp	.+72     	; 0x1d3e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1cf6:	d8 01       	movw	r26, r16
    1cf8:	18 96       	adiw	r26, 0x08	; 8
    1cfa:	8c 91       	ld	r24, X
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0e 94 7f 11 	call	0x22fe	; 0x22fe <malloc>
    1d06:	f5 01       	movw	r30, r10
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	80 83       	st	Z, r24
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1d10:	b1 c0       	rjmp	.+354    	; 0x1e74 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1d12:	fc 01       	movw	r30, r24
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	d8 01       	movw	r26, r16
    1d1a:	18 96       	adiw	r26, 0x08	; 8
    1d1c:	8c 91       	ld	r24, X
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	28 17       	cp	r18, r24
    1d22:	39 07       	cpc	r19, r25
    1d24:	14 f7       	brge	.-60     	; 0x1cea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1d26:	11 92       	st	Z+, r1
    1d28:	11 92       	st	Z+, r1
    1d2a:	2f 5f       	subi	r18, 0xFF	; 255
    1d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2e:	f4 cf       	rjmp	.-24     	; 0x1d18 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1d30:	e1 2c       	mov	r14, r1
    1d32:	f1 2c       	mov	r15, r1
    1d34:	6e 01       	movw	r12, r28
    1d36:	b1 e2       	ldi	r27, 0x21	; 33
    1d38:	cb 0e       	add	r12, r27
    1d3a:	d1 1c       	adc	r13, r1
    1d3c:	21 c0       	rjmp	.+66     	; 0x1d80 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 85       	ldd	r24, Z+8	; 0x08
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0e 94 7f 11 	call	0x22fe	; 0x22fe <malloc>
    1d4c:	d4 01       	movw	r26, r8
    1d4e:	8d 93       	st	X+, r24
    1d50:	9c 93       	st	X, r25
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1d56:	8e c0       	rjmp	.+284    	; 0x1e74 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1d58:	fc 01       	movw	r30, r24
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	d8 01       	movw	r26, r16
    1d60:	18 96       	adiw	r26, 0x08	; 8
    1d62:	8c 91       	ld	r24, X
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	28 17       	cp	r18, r24
    1d68:	39 07       	cpc	r19, r25
    1d6a:	14 f7       	brge	.-60     	; 0x1d30 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1d6c:	d8 01       	movw	r26, r16
    1d6e:	1e 96       	adiw	r26, 0x0e	; 14
    1d70:	8d 91       	ld	r24, X+
    1d72:	9c 91       	ld	r25, X
    1d74:	1f 97       	sbiw	r26, 0x0f	; 15
    1d76:	81 93       	st	Z+, r24
    1d78:	91 93       	st	Z+, r25
    1d7a:	2f 5f       	subi	r18, 0xFF	; 255
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	ef cf       	rjmp	.-34     	; 0x1d5e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1d80:	45 2d       	mov	r20, r5
    1d82:	be 01       	movw	r22, r28
    1d84:	6f 5b       	subi	r22, 0xBF	; 191
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	c8 01       	movw	r24, r16
    1d8a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN16PololuQTRSensors4readEPjh>
    1d8e:	f8 01       	movw	r30, r16
    1d90:	60 84       	ldd	r6, Z+8	; 0x08
    1d92:	71 2c       	mov	r7, r1
    1d94:	fe 01       	movw	r30, r28
    1d96:	ef 5b       	subi	r30, 0xBF	; 191
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	c6 01       	movw	r24, r12
    1d9c:	9e 01       	movw	r18, r28
    1d9e:	2f 5f       	subi	r18, 0xFF	; 255
    1da0:	3f 4f       	sbci	r19, 0xFF	; 255
    1da2:	19 01       	movw	r2, r18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	26 15       	cp	r18, r6
    1daa:	37 05       	cpc	r19, r7
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1dae:	e1 14       	cp	r14, r1
    1db0:	f1 04       	cpc	r15, r1
    1db2:	89 f0       	breq	.+34     	; 0x1dd6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1db4:	dc 01       	movw	r26, r24
    1db6:	6d 91       	ld	r22, X+
    1db8:	7c 91       	ld	r23, X
    1dba:	40 81       	ld	r20, Z
    1dbc:	51 81       	ldd	r21, Z+1	; 0x01
    1dbe:	64 17       	cp	r22, r20
    1dc0:	75 07       	cpc	r23, r21
    1dc2:	48 f0       	brcs	.+18     	; 0x1dd6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1dc4:	d1 01       	movw	r26, r2
    1dc6:	6d 91       	ld	r22, X+
    1dc8:	7c 91       	ld	r23, X
    1dca:	40 81       	ld	r20, Z
    1dcc:	51 81       	ldd	r21, Z+1	; 0x01
    1dce:	46 17       	cp	r20, r22
    1dd0:	57 07       	cpc	r21, r23
    1dd2:	48 f0       	brcs	.+18     	; 0x1de6 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1dd4:	0d c0       	rjmp	.+26     	; 0x1df0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1dd6:	40 81       	ld	r20, Z
    1dd8:	51 81       	ldd	r21, Z+1	; 0x01
    1dda:	dc 01       	movw	r26, r24
    1ddc:	4d 93       	st	X+, r20
    1dde:	5c 93       	st	X, r21
    1de0:	e1 14       	cp	r14, r1
    1de2:	f1 04       	cpc	r15, r1
    1de4:	79 f7       	brne	.-34     	; 0x1dc4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1de6:	40 81       	ld	r20, Z
    1de8:	51 81       	ldd	r21, Z+1	; 0x01
    1dea:	d1 01       	movw	r26, r2
    1dec:	4d 93       	st	X+, r20
    1dee:	5c 93       	st	X, r21
    1df0:	2f 5f       	subi	r18, 0xFF	; 255
    1df2:	3f 4f       	sbci	r19, 0xFF	; 255
    1df4:	b2 e0       	ldi	r27, 0x02	; 2
    1df6:	2b 0e       	add	r2, r27
    1df8:	31 1c       	adc	r3, r1
    1dfa:	32 96       	adiw	r30, 0x02	; 2
    1dfc:	02 96       	adiw	r24, 0x02	; 2
    1dfe:	d4 cf       	rjmp	.-88     	; 0x1da8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1e00:	ef ef       	ldi	r30, 0xFF	; 255
    1e02:	ee 1a       	sub	r14, r30
    1e04:	fe 0a       	sbc	r15, r30
    1e06:	fa e0       	ldi	r31, 0x0A	; 10
    1e08:	ef 16       	cp	r14, r31
    1e0a:	f1 04       	cpc	r15, r1
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1e0e:	b8 cf       	rjmp	.-144    	; 0x1d80 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1e10:	9e 01       	movw	r18, r28
    1e12:	2f 5f       	subi	r18, 0xFF	; 255
    1e14:	3f 4f       	sbci	r19, 0xFF	; 255
    1e16:	79 01       	movw	r14, r18
    1e18:	36 01       	movw	r6, r12
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	f8 01       	movw	r30, r16
    1e20:	20 85       	ldd	r18, Z+8	; 0x08
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	82 17       	cp	r24, r18
    1e26:	93 07       	cpc	r25, r19
    1e28:	2c f5       	brge	.+74     	; 0x1e74 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1e2a:	d7 01       	movw	r26, r14
    1e2c:	2d 91       	ld	r18, X+
    1e2e:	3d 91       	ld	r19, X+
    1e30:	7d 01       	movw	r14, r26
    1e32:	b3 01       	movw	r22, r6
    1e34:	6c 19       	sub	r22, r12
    1e36:	7d 09       	sbc	r23, r13
    1e38:	d5 01       	movw	r26, r10
    1e3a:	ed 91       	ld	r30, X+
    1e3c:	fc 91       	ld	r31, X
    1e3e:	e6 0f       	add	r30, r22
    1e40:	f7 1f       	adc	r31, r23
    1e42:	40 81       	ld	r20, Z
    1e44:	51 81       	ldd	r21, Z+1	; 0x01
    1e46:	42 17       	cp	r20, r18
    1e48:	53 07       	cpc	r21, r19
    1e4a:	10 f4       	brcc	.+4      	; 0x1e50 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1e4c:	31 83       	std	Z+1, r19	; 0x01
    1e4e:	20 83       	st	Z, r18
    1e50:	f3 01       	movw	r30, r6
    1e52:	21 91       	ld	r18, Z+
    1e54:	31 91       	ld	r19, Z+
    1e56:	3f 01       	movw	r6, r30
    1e58:	d4 01       	movw	r26, r8
    1e5a:	ed 91       	ld	r30, X+
    1e5c:	fc 91       	ld	r31, X
    1e5e:	e6 0f       	add	r30, r22
    1e60:	f7 1f       	adc	r31, r23
    1e62:	40 81       	ld	r20, Z
    1e64:	51 81       	ldd	r21, Z+1	; 0x01
    1e66:	24 17       	cp	r18, r20
    1e68:	35 07       	cpc	r19, r21
    1e6a:	10 f4       	brcc	.+4      	; 0x1e70 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1e6c:	31 83       	std	Z+1, r19	; 0x01
    1e6e:	20 83       	st	Z, r18
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	d5 cf       	rjmp	.-86     	; 0x1e1e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1e74:	c0 5a       	subi	r28, 0xA0	; 160
    1e76:	df 4f       	sbci	r29, 0xFF	; 255
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	bf 90       	pop	r11
    1e94:	af 90       	pop	r10
    1e96:	9f 90       	pop	r9
    1e98:	8f 90       	pop	r8
    1e9a:	7f 90       	pop	r7
    1e9c:	6f 90       	pop	r6
    1e9e:	5f 90       	pop	r5
    1ea0:	3f 90       	pop	r3
    1ea2:	2f 90       	pop	r2
    1ea4:	08 95       	ret

00001ea6 <_ZN16PololuQTRSensors9calibrateEh>:
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
    1eae:	16 2f       	mov	r17, r22
    1eb0:	8f ef       	ldi	r24, 0xFF	; 255
    1eb2:	86 0f       	add	r24, r22
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	18 f0       	brcs	.+6      	; 0x1ebe <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1eb8:	66 23       	and	r22, r22
    1eba:	59 f0       	breq	.+22     	; 0x1ed2 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1ebc:	14 c0       	rjmp	.+40     	; 0x1ee6 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1ebe:	21 e0       	ldi	r18, 0x01	; 1
    1ec0:	ae 01       	movw	r20, r28
    1ec2:	4e 5f       	subi	r20, 0xFE	; 254
    1ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec6:	be 01       	movw	r22, r28
    1ec8:	ce 01       	movw	r24, r28
    1eca:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1ece:	12 30       	cpi	r17, 0x02	; 2
    1ed0:	51 f4       	brne	.+20     	; 0x1ee6 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1ed2:	ae 01       	movw	r20, r28
    1ed4:	4a 5f       	subi	r20, 0xFA	; 250
    1ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed8:	be 01       	movw	r22, r28
    1eda:	6c 5f       	subi	r22, 0xFC	; 252
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	08 95       	ret

00001eee <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    1eee:	a0 e0       	ldi	r26, 0x00	; 0
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	ed e7       	ldi	r30, 0x7D	; 125
    1ef4:	ff e0       	ldi	r31, 0x0F	; 15
    1ef6:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__prologue_saves__+0x12>
    1efa:	ec 01       	movw	r28, r24
    1efc:	8b 01       	movw	r16, r22
    1efe:	b4 2e       	mov	r11, r20
    1f00:	84 2f       	mov	r24, r20
    1f02:	8d 7f       	andi	r24, 0xFD	; 253
    1f04:	51 f4       	brne	.+20     	; 0x1f1a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1f06:	8c 81       	ldd	r24, Y+4	; 0x04
    1f08:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0a:	89 2b       	or	r24, r25
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    1f0e:	97 c0       	rjmp	.+302    	; 0x203e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f10:	8e 81       	ldd	r24, Y+6	; 0x06
    1f12:	9f 81       	ldd	r25, Y+7	; 0x07
    1f14:	89 2b       	or	r24, r25
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1f18:	92 c0       	rjmp	.+292    	; 0x203e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	8b 0d       	add	r24, r11
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	50 f4       	brcc	.+20     	; 0x1f36 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1f22:	88 81       	ld	r24, Y
    1f24:	99 81       	ldd	r25, Y+1	; 0x01
    1f26:	89 2b       	or	r24, r25
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    1f2a:	89 c0       	rjmp	.+274    	; 0x203e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f30:	89 2b       	or	r24, r25
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1f34:	84 c0       	rjmp	.+264    	; 0x203e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f36:	4b 2d       	mov	r20, r11
    1f38:	b8 01       	movw	r22, r16
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_ZN16PololuQTRSensors4readEPjh>
    1f40:	78 01       	movw	r14, r16
    1f42:	00 e0       	ldi	r16, 0x00	; 0
    1f44:	10 e0       	ldi	r17, 0x00	; 0
    1f46:	c1 2c       	mov	r12, r1
    1f48:	d1 2c       	mov	r13, r1
    1f4a:	88 85       	ldd	r24, Y+8	; 0x08
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	c8 16       	cp	r12, r24
    1f50:	d9 06       	cpc	r13, r25
    1f52:	0c f0       	brlt	.+2      	; 0x1f56 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    1f54:	74 c0       	rjmp	.+232    	; 0x203e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	b8 12       	cpse	r11, r24
    1f5a:	0a c0       	rjmp	.+20     	; 0x1f70 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    1f5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f60:	e0 0f       	add	r30, r16
    1f62:	f1 1f       	adc	r31, r17
    1f64:	01 90       	ld	r0, Z+
    1f66:	f0 81       	ld	r31, Z
    1f68:	e0 2d       	mov	r30, r0
    1f6a:	a8 81       	ld	r26, Y
    1f6c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f6e:	0d c0       	rjmp	.+26     	; 0x1f8a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	2e 81       	ldd	r18, Y+6	; 0x06
    1f76:	3f 81       	ldd	r19, Y+7	; 0x07
    1f78:	b1 10       	cpse	r11, r1
    1f7a:	0c c0       	rjmp	.+24     	; 0x1f94 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	e0 0f       	add	r30, r16
    1f80:	f1 1f       	adc	r31, r17
    1f82:	01 90       	ld	r0, Z+
    1f84:	f0 81       	ld	r31, Z
    1f86:	e0 2d       	mov	r30, r0
    1f88:	dc 01       	movw	r26, r24
    1f8a:	a0 0f       	add	r26, r16
    1f8c:	b1 1f       	adc	r27, r17
    1f8e:	8d 91       	ld	r24, X+
    1f90:	9c 91       	ld	r25, X
    1f92:	28 c0       	rjmp	.+80     	; 0x1fe4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1f94:	fc 01       	movw	r30, r24
    1f96:	e0 0f       	add	r30, r16
    1f98:	f1 1f       	adc	r31, r17
    1f9a:	40 81       	ld	r20, Z
    1f9c:	51 81       	ldd	r21, Z+1	; 0x01
    1f9e:	e8 81       	ld	r30, Y
    1fa0:	f9 81       	ldd	r31, Y+1	; 0x01
    1fa2:	e0 0f       	add	r30, r16
    1fa4:	f1 1f       	adc	r31, r17
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fac:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fae:	48 17       	cp	r20, r24
    1fb0:	59 07       	cpc	r21, r25
    1fb2:	10 f4       	brcc	.+4      	; 0x1fb8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    1fb4:	cf 01       	movw	r24, r30
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    1fb8:	8e 0f       	add	r24, r30
    1fba:	9f 1f       	adc	r25, r31
    1fbc:	84 1b       	sub	r24, r20
    1fbe:	95 0b       	sbc	r25, r21
    1fc0:	d9 01       	movw	r26, r18
    1fc2:	a0 0f       	add	r26, r16
    1fc4:	b1 1f       	adc	r27, r17
    1fc6:	2d 91       	ld	r18, X+
    1fc8:	3c 91       	ld	r19, X
    1fca:	aa 81       	ldd	r26, Y+2	; 0x02
    1fcc:	bb 81       	ldd	r27, Y+3	; 0x03
    1fce:	a0 0f       	add	r26, r16
    1fd0:	b1 1f       	adc	r27, r17
    1fd2:	4d 91       	ld	r20, X+
    1fd4:	5c 91       	ld	r21, X
    1fd6:	24 17       	cp	r18, r20
    1fd8:	35 07       	cpc	r19, r21
    1fda:	20 f0       	brcs	.+8      	; 0x1fe4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1fdc:	e4 0f       	add	r30, r20
    1fde:	f5 1f       	adc	r31, r21
    1fe0:	e2 1b       	sub	r30, r18
    1fe2:	f3 0b       	sbc	r31, r19
    1fe4:	e8 1b       	sub	r30, r24
    1fe6:	f9 0b       	sbc	r31, r25
    1fe8:	a9 f0       	breq	.+42     	; 0x2014 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    1fea:	d7 01       	movw	r26, r14
    1fec:	2d 91       	ld	r18, X+
    1fee:	3c 91       	ld	r19, X
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	28 1b       	sub	r18, r24
    1ff6:	39 0b       	sbc	r19, r25
    1ff8:	41 09       	sbc	r20, r1
    1ffa:	51 09       	sbc	r21, r1
    1ffc:	a8 ee       	ldi	r26, 0xE8	; 232
    1ffe:	b3 e0       	ldi	r27, 0x03	; 3
    2000:	0e 94 35 11 	call	0x226a	; 0x226a <__muluhisi3>
    2004:	9f 01       	movw	r18, r30
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	0e 94 01 11 	call	0x2202	; 0x2202 <__divmodsi4>
    200e:	37 fd       	sbrc	r19, 7
    2010:	0a c0       	rjmp	.+20     	; 0x2026 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	29 3e       	cpi	r18, 0xE9	; 233
    201a:	b3 e0       	ldi	r27, 0x03	; 3
    201c:	3b 07       	cpc	r19, r27
    201e:	2c f0       	brlt	.+10     	; 0x202a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2020:	28 ee       	ldi	r18, 0xE8	; 232
    2022:	33 e0       	ldi	r19, 0x03	; 3
    2024:	02 c0       	rjmp	.+4      	; 0x202a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	f7 01       	movw	r30, r14
    202c:	21 93       	st	Z+, r18
    202e:	31 93       	st	Z+, r19
    2030:	7f 01       	movw	r14, r30
    2032:	ff ef       	ldi	r31, 0xFF	; 255
    2034:	cf 1a       	sub	r12, r31
    2036:	df 0a       	sbc	r13, r31
    2038:	0e 5f       	subi	r16, 0xFE	; 254
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	86 cf       	rjmp	.-244    	; 0x1f4a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	e9 e0       	ldi	r30, 0x09	; 9
    2044:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__epilogue_restores__+0x12>

00002048 <_ZN16PololuQTRSensors8readLineEPjhh>:
    2048:	a0 e0       	ldi	r26, 0x00	; 0
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	ea e2       	ldi	r30, 0x2A	; 42
    204e:	f0 e1       	ldi	r31, 0x10	; 16
    2050:	0c 94 48 11 	jmp	0x2290	; 0x2290 <__prologue_saves__>
    2054:	ec 01       	movw	r28, r24
    2056:	8b 01       	movw	r16, r22
    2058:	82 2e       	mov	r8, r18
    205a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <_ZN16PololuQTRSensors14readCalibratedEPjh>
    205e:	28 84       	ldd	r2, Y+8	; 0x08
    2060:	e8 01       	movw	r28, r16
    2062:	41 2c       	mov	r4, r1
    2064:	51 2c       	mov	r5, r1
    2066:	32 01       	movw	r6, r4
    2068:	00 e0       	ldi	r16, 0x00	; 0
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	c1 2c       	mov	r12, r1
    206e:	d1 2c       	mov	r13, r1
    2070:	76 01       	movw	r14, r12
    2072:	31 2c       	mov	r3, r1
    2074:	91 2c       	mov	r9, r1
    2076:	58 ee       	ldi	r21, 0xE8	; 232
    2078:	a5 2e       	mov	r10, r21
    207a:	53 e0       	ldi	r21, 0x03	; 3
    207c:	b5 2e       	mov	r11, r21
    207e:	92 14       	cp	r9, r2
    2080:	21 f1       	breq	.+72     	; 0x20ca <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    2082:	e9 91       	ld	r30, Y+
    2084:	f9 91       	ld	r31, Y+
    2086:	88 20       	and	r8, r8
    2088:	21 f0       	breq	.+8      	; 0x2092 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    208a:	c5 01       	movw	r24, r10
    208c:	8e 1b       	sub	r24, r30
    208e:	9f 0b       	sbc	r25, r31
    2090:	fc 01       	movw	r30, r24
    2092:	e9 3c       	cpi	r30, 0xC9	; 201
    2094:	f1 05       	cpc	r31, r1
    2096:	24 f4       	brge	.+8      	; 0x20a0 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    2098:	e3 33       	cpi	r30, 0x33	; 51
    209a:	f1 05       	cpc	r31, r1
    209c:	74 f0       	brlt	.+28     	; 0x20ba <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    20a0:	33 24       	eor	r3, r3
    20a2:	33 94       	inc	r3
    20a4:	df 01       	movw	r26, r30
    20a6:	a3 01       	movw	r20, r6
    20a8:	92 01       	movw	r18, r4
    20aa:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulshisi3>
    20ae:	c6 0e       	add	r12, r22
    20b0:	d7 1e       	adc	r13, r23
    20b2:	e8 1e       	adc	r14, r24
    20b4:	f9 1e       	adc	r15, r25
    20b6:	0e 0f       	add	r16, r30
    20b8:	1f 1f       	adc	r17, r31
    20ba:	93 94       	inc	r9
    20bc:	98 ee       	ldi	r25, 0xE8	; 232
    20be:	49 0e       	add	r4, r25
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	59 1e       	adc	r5, r25
    20c4:	61 1c       	adc	r6, r1
    20c6:	71 1c       	adc	r7, r1
    20c8:	da cf       	rjmp	.-76     	; 0x207e <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    20ca:	31 10       	cpse	r3, r1
    20cc:	1e c0       	rjmp	.+60     	; 0x210a <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    20ce:	49 2d       	mov	r20, r9
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	41 50       	subi	r20, 0x01	; 1
    20d4:	51 09       	sbc	r21, r1
    20d6:	24 ef       	ldi	r18, 0xF4	; 244
    20d8:	31 e0       	ldi	r19, 0x01	; 1
    20da:	42 9f       	mul	r20, r18
    20dc:	c0 01       	movw	r24, r0
    20de:	43 9f       	mul	r20, r19
    20e0:	90 0d       	add	r25, r0
    20e2:	52 9f       	mul	r21, r18
    20e4:	90 0d       	add	r25, r0
    20e6:	11 24       	eor	r1, r1
    20e8:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    20ec:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    20f0:	28 17       	cp	r18, r24
    20f2:	39 07       	cpc	r19, r25
    20f4:	b4 f0       	brlt	.+44     	; 0x2122 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    20f6:	88 ee       	ldi	r24, 0xE8	; 232
    20f8:	93 e0       	ldi	r25, 0x03	; 3
    20fa:	48 9f       	mul	r20, r24
    20fc:	90 01       	movw	r18, r0
    20fe:	49 9f       	mul	r20, r25
    2100:	30 0d       	add	r19, r0
    2102:	58 9f       	mul	r21, r24
    2104:	30 0d       	add	r19, r0
    2106:	11 24       	eor	r1, r1
    2108:	0e c0       	rjmp	.+28     	; 0x2126 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    210a:	98 01       	movw	r18, r16
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	50 e0       	ldi	r21, 0x00	; 0
    2110:	c7 01       	movw	r24, r14
    2112:	b6 01       	movw	r22, r12
    2114:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    2118:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    211c:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	c9 01       	movw	r24, r18
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	e2 e1       	ldi	r30, 0x12	; 18
    212e:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__epilogue_restores__>

00002132 <_ZN16PololuQTRSensorsD1Ev>:
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	ec 01       	movw	r28, r24
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	9b 81       	ldd	r25, Y+3	; 0x03
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	11 f0       	breq	.+4      	; 0x2144 <_ZN16PololuQTRSensorsD1Ev+0x12>
    2140:	0e 94 17 12 	call	0x242e	; 0x242e <free>
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	9f 81       	ldd	r25, Y+7	; 0x07
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	11 f0       	breq	.+4      	; 0x2150 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    214c:	0e 94 17 12 	call	0x242e	; 0x242e <free>
    2150:	88 81       	ld	r24, Y
    2152:	99 81       	ldd	r25, Y+1	; 0x01
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	11 f0       	breq	.+4      	; 0x215c <_ZN16PololuQTRSensorsD1Ev+0x2a>
    2158:	0e 94 17 12 	call	0x242e	; 0x242e <free>
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	9d 81       	ldd	r25, Y+5	; 0x05
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	11 f0       	breq	.+4      	; 0x2168 <_ZN16PololuQTRSensorsD1Ev+0x36>
    2164:	0e 94 17 12 	call	0x242e	; 0x242e <free>
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	08 95       	ret

0000216e <__udivmodhi4>:
    216e:	aa 1b       	sub	r26, r26
    2170:	bb 1b       	sub	r27, r27
    2172:	51 e1       	ldi	r21, 0x11	; 17
    2174:	07 c0       	rjmp	.+14     	; 0x2184 <__udivmodhi4_ep>

00002176 <__udivmodhi4_loop>:
    2176:	aa 1f       	adc	r26, r26
    2178:	bb 1f       	adc	r27, r27
    217a:	a6 17       	cp	r26, r22
    217c:	b7 07       	cpc	r27, r23
    217e:	10 f0       	brcs	.+4      	; 0x2184 <__udivmodhi4_ep>
    2180:	a6 1b       	sub	r26, r22
    2182:	b7 0b       	sbc	r27, r23

00002184 <__udivmodhi4_ep>:
    2184:	88 1f       	adc	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	5a 95       	dec	r21
    218a:	a9 f7       	brne	.-22     	; 0x2176 <__udivmodhi4_loop>
    218c:	80 95       	com	r24
    218e:	90 95       	com	r25
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	08 95       	ret

00002196 <__divmodhi4>:
    2196:	97 fb       	bst	r25, 7
    2198:	07 2e       	mov	r0, r23
    219a:	16 f4       	brtc	.+4      	; 0x21a0 <__divmodhi4+0xa>
    219c:	00 94       	com	r0
    219e:	07 d0       	rcall	.+14     	; 0x21ae <__divmodhi4_neg1>
    21a0:	77 fd       	sbrc	r23, 7
    21a2:	09 d0       	rcall	.+18     	; 0x21b6 <__divmodhi4_neg2>
    21a4:	0e 94 b7 10 	call	0x216e	; 0x216e <__udivmodhi4>
    21a8:	07 fc       	sbrc	r0, 7
    21aa:	05 d0       	rcall	.+10     	; 0x21b6 <__divmodhi4_neg2>
    21ac:	3e f4       	brtc	.+14     	; 0x21bc <__divmodhi4_exit>

000021ae <__divmodhi4_neg1>:
    21ae:	90 95       	com	r25
    21b0:	81 95       	neg	r24
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	08 95       	ret

000021b6 <__divmodhi4_neg2>:
    21b6:	70 95       	com	r23
    21b8:	61 95       	neg	r22
    21ba:	7f 4f       	sbci	r23, 0xFF	; 255

000021bc <__divmodhi4_exit>:
    21bc:	08 95       	ret

000021be <__udivmodsi4>:
    21be:	a1 e2       	ldi	r26, 0x21	; 33
    21c0:	1a 2e       	mov	r1, r26
    21c2:	aa 1b       	sub	r26, r26
    21c4:	bb 1b       	sub	r27, r27
    21c6:	fd 01       	movw	r30, r26
    21c8:	0d c0       	rjmp	.+26     	; 0x21e4 <__udivmodsi4_ep>

000021ca <__udivmodsi4_loop>:
    21ca:	aa 1f       	adc	r26, r26
    21cc:	bb 1f       	adc	r27, r27
    21ce:	ee 1f       	adc	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	a2 17       	cp	r26, r18
    21d4:	b3 07       	cpc	r27, r19
    21d6:	e4 07       	cpc	r30, r20
    21d8:	f5 07       	cpc	r31, r21
    21da:	20 f0       	brcs	.+8      	; 0x21e4 <__udivmodsi4_ep>
    21dc:	a2 1b       	sub	r26, r18
    21de:	b3 0b       	sbc	r27, r19
    21e0:	e4 0b       	sbc	r30, r20
    21e2:	f5 0b       	sbc	r31, r21

000021e4 <__udivmodsi4_ep>:
    21e4:	66 1f       	adc	r22, r22
    21e6:	77 1f       	adc	r23, r23
    21e8:	88 1f       	adc	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	1a 94       	dec	r1
    21ee:	69 f7       	brne	.-38     	; 0x21ca <__udivmodsi4_loop>
    21f0:	60 95       	com	r22
    21f2:	70 95       	com	r23
    21f4:	80 95       	com	r24
    21f6:	90 95       	com	r25
    21f8:	9b 01       	movw	r18, r22
    21fa:	ac 01       	movw	r20, r24
    21fc:	bd 01       	movw	r22, r26
    21fe:	cf 01       	movw	r24, r30
    2200:	08 95       	ret

00002202 <__divmodsi4>:
    2202:	05 2e       	mov	r0, r21
    2204:	97 fb       	bst	r25, 7
    2206:	1e f4       	brtc	.+6      	; 0x220e <__divmodsi4+0xc>
    2208:	00 94       	com	r0
    220a:	0e 94 18 11 	call	0x2230	; 0x2230 <__negsi2>
    220e:	57 fd       	sbrc	r21, 7
    2210:	07 d0       	rcall	.+14     	; 0x2220 <__divmodsi4_neg2>
    2212:	0e 94 df 10 	call	0x21be	; 0x21be <__udivmodsi4>
    2216:	07 fc       	sbrc	r0, 7
    2218:	03 d0       	rcall	.+6      	; 0x2220 <__divmodsi4_neg2>
    221a:	4e f4       	brtc	.+18     	; 0x222e <__divmodsi4_exit>
    221c:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__negsi2>

00002220 <__divmodsi4_neg2>:
    2220:	50 95       	com	r21
    2222:	40 95       	com	r20
    2224:	30 95       	com	r19
    2226:	21 95       	neg	r18
    2228:	3f 4f       	sbci	r19, 0xFF	; 255
    222a:	4f 4f       	sbci	r20, 0xFF	; 255
    222c:	5f 4f       	sbci	r21, 0xFF	; 255

0000222e <__divmodsi4_exit>:
    222e:	08 95       	ret

00002230 <__negsi2>:
    2230:	90 95       	com	r25
    2232:	80 95       	com	r24
    2234:	70 95       	com	r23
    2236:	61 95       	neg	r22
    2238:	7f 4f       	sbci	r23, 0xFF	; 255
    223a:	8f 4f       	sbci	r24, 0xFF	; 255
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	08 95       	ret

00002240 <__tablejump2__>:
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	05 90       	lpm	r0, Z+
    2246:	f4 91       	lpm	r31, Z
    2248:	e0 2d       	mov	r30, r0
    224a:	09 94       	ijmp

0000224c <__umulhisi3>:
    224c:	a2 9f       	mul	r26, r18
    224e:	b0 01       	movw	r22, r0
    2250:	b3 9f       	mul	r27, r19
    2252:	c0 01       	movw	r24, r0
    2254:	a3 9f       	mul	r26, r19
    2256:	70 0d       	add	r23, r0
    2258:	81 1d       	adc	r24, r1
    225a:	11 24       	eor	r1, r1
    225c:	91 1d       	adc	r25, r1
    225e:	b2 9f       	mul	r27, r18
    2260:	70 0d       	add	r23, r0
    2262:	81 1d       	adc	r24, r1
    2264:	11 24       	eor	r1, r1
    2266:	91 1d       	adc	r25, r1
    2268:	08 95       	ret

0000226a <__muluhisi3>:
    226a:	0e 94 26 11 	call	0x224c	; 0x224c <__umulhisi3>
    226e:	a5 9f       	mul	r26, r21
    2270:	90 0d       	add	r25, r0
    2272:	b4 9f       	mul	r27, r20
    2274:	90 0d       	add	r25, r0
    2276:	a4 9f       	mul	r26, r20
    2278:	80 0d       	add	r24, r0
    227a:	91 1d       	adc	r25, r1
    227c:	11 24       	eor	r1, r1
    227e:	08 95       	ret

00002280 <__mulshisi3>:
    2280:	b7 ff       	sbrs	r27, 7
    2282:	0c 94 35 11 	jmp	0x226a	; 0x226a <__muluhisi3>

00002286 <__mulohisi3>:
    2286:	0e 94 35 11 	call	0x226a	; 0x226a <__muluhisi3>
    228a:	82 1b       	sub	r24, r18
    228c:	93 0b       	sbc	r25, r19
    228e:	08 95       	ret

00002290 <__prologue_saves__>:
    2290:	2f 92       	push	r2
    2292:	3f 92       	push	r3
    2294:	4f 92       	push	r4
    2296:	5f 92       	push	r5
    2298:	6f 92       	push	r6
    229a:	7f 92       	push	r7
    229c:	8f 92       	push	r8
    229e:	9f 92       	push	r9
    22a0:	af 92       	push	r10
    22a2:	bf 92       	push	r11
    22a4:	cf 92       	push	r12
    22a6:	df 92       	push	r13
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	ca 1b       	sub	r28, r26
    22ba:	db 0b       	sbc	r29, r27
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	09 94       	ijmp

000022c8 <__epilogue_restores__>:
    22c8:	2a 88       	ldd	r2, Y+18	; 0x12
    22ca:	39 88       	ldd	r3, Y+17	; 0x11
    22cc:	48 88       	ldd	r4, Y+16	; 0x10
    22ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    22d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22da:	b9 84       	ldd	r11, Y+9	; 0x09
    22dc:	c8 84       	ldd	r12, Y+8	; 0x08
    22de:	df 80       	ldd	r13, Y+7	; 0x07
    22e0:	ee 80       	ldd	r14, Y+6	; 0x06
    22e2:	fd 80       	ldd	r15, Y+5	; 0x05
    22e4:	0c 81       	ldd	r16, Y+4	; 0x04
    22e6:	1b 81       	ldd	r17, Y+3	; 0x03
    22e8:	aa 81       	ldd	r26, Y+2	; 0x02
    22ea:	b9 81       	ldd	r27, Y+1	; 0x01
    22ec:	ce 0f       	add	r28, r30
    22ee:	d1 1d       	adc	r29, r1
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	ed 01       	movw	r28, r26
    22fc:	08 95       	ret

000022fe <malloc>:
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	82 30       	cpi	r24, 0x02	; 2
    2308:	91 05       	cpc	r25, r1
    230a:	10 f4       	brcc	.+4      	; 0x2310 <malloc+0x12>
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <__flp>
    2314:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <__flp+0x1>
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	a0 e0       	ldi	r26, 0x00	; 0
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	30 97       	sbiw	r30, 0x00	; 0
    2322:	19 f1       	breq	.+70     	; 0x236a <malloc+0x6c>
    2324:	40 81       	ld	r20, Z
    2326:	51 81       	ldd	r21, Z+1	; 0x01
    2328:	02 81       	ldd	r16, Z+2	; 0x02
    232a:	13 81       	ldd	r17, Z+3	; 0x03
    232c:	48 17       	cp	r20, r24
    232e:	59 07       	cpc	r21, r25
    2330:	c8 f0       	brcs	.+50     	; 0x2364 <malloc+0x66>
    2332:	84 17       	cp	r24, r20
    2334:	95 07       	cpc	r25, r21
    2336:	69 f4       	brne	.+26     	; 0x2352 <malloc+0x54>
    2338:	10 97       	sbiw	r26, 0x00	; 0
    233a:	31 f0       	breq	.+12     	; 0x2348 <malloc+0x4a>
    233c:	12 96       	adiw	r26, 0x02	; 2
    233e:	0c 93       	st	X, r16
    2340:	12 97       	sbiw	r26, 0x02	; 2
    2342:	13 96       	adiw	r26, 0x03	; 3
    2344:	1c 93       	st	X, r17
    2346:	27 c0       	rjmp	.+78     	; 0x2396 <malloc+0x98>
    2348:	00 93 a9 01 	sts	0x01A9, r16	; 0x8001a9 <__flp>
    234c:	10 93 aa 01 	sts	0x01AA, r17	; 0x8001aa <__flp+0x1>
    2350:	22 c0       	rjmp	.+68     	; 0x2396 <malloc+0x98>
    2352:	21 15       	cp	r18, r1
    2354:	31 05       	cpc	r19, r1
    2356:	19 f0       	breq	.+6      	; 0x235e <malloc+0x60>
    2358:	42 17       	cp	r20, r18
    235a:	53 07       	cpc	r21, r19
    235c:	18 f4       	brcc	.+6      	; 0x2364 <malloc+0x66>
    235e:	9a 01       	movw	r18, r20
    2360:	bd 01       	movw	r22, r26
    2362:	ef 01       	movw	r28, r30
    2364:	df 01       	movw	r26, r30
    2366:	f8 01       	movw	r30, r16
    2368:	db cf       	rjmp	.-74     	; 0x2320 <malloc+0x22>
    236a:	21 15       	cp	r18, r1
    236c:	31 05       	cpc	r19, r1
    236e:	f9 f0       	breq	.+62     	; 0x23ae <malloc+0xb0>
    2370:	28 1b       	sub	r18, r24
    2372:	39 0b       	sbc	r19, r25
    2374:	24 30       	cpi	r18, 0x04	; 4
    2376:	31 05       	cpc	r19, r1
    2378:	80 f4       	brcc	.+32     	; 0x239a <malloc+0x9c>
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	61 15       	cp	r22, r1
    2380:	71 05       	cpc	r23, r1
    2382:	21 f0       	breq	.+8      	; 0x238c <malloc+0x8e>
    2384:	fb 01       	movw	r30, r22
    2386:	93 83       	std	Z+3, r25	; 0x03
    2388:	82 83       	std	Z+2, r24	; 0x02
    238a:	04 c0       	rjmp	.+8      	; 0x2394 <malloc+0x96>
    238c:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <__flp+0x1>
    2390:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <__flp>
    2394:	fe 01       	movw	r30, r28
    2396:	32 96       	adiw	r30, 0x02	; 2
    2398:	44 c0       	rjmp	.+136    	; 0x2422 <malloc+0x124>
    239a:	fe 01       	movw	r30, r28
    239c:	e2 0f       	add	r30, r18
    239e:	f3 1f       	adc	r31, r19
    23a0:	81 93       	st	Z+, r24
    23a2:	91 93       	st	Z+, r25
    23a4:	22 50       	subi	r18, 0x02	; 2
    23a6:	31 09       	sbc	r19, r1
    23a8:	39 83       	std	Y+1, r19	; 0x01
    23aa:	28 83       	st	Y, r18
    23ac:	3a c0       	rjmp	.+116    	; 0x2422 <malloc+0x124>
    23ae:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <__brkval>
    23b2:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <__brkval+0x1>
    23b6:	23 2b       	or	r18, r19
    23b8:	41 f4       	brne	.+16     	; 0x23ca <malloc+0xcc>
    23ba:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    23be:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    23c2:	30 93 a8 01 	sts	0x01A8, r19	; 0x8001a8 <__brkval+0x1>
    23c6:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <__brkval>
    23ca:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    23ce:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    23d2:	21 15       	cp	r18, r1
    23d4:	31 05       	cpc	r19, r1
    23d6:	41 f4       	brne	.+16     	; 0x23e8 <malloc+0xea>
    23d8:	2d b7       	in	r18, 0x3d	; 61
    23da:	3e b7       	in	r19, 0x3e	; 62
    23dc:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    23e0:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    23e4:	24 1b       	sub	r18, r20
    23e6:	35 0b       	sbc	r19, r21
    23e8:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <__brkval>
    23ec:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <__brkval+0x1>
    23f0:	e2 17       	cp	r30, r18
    23f2:	f3 07       	cpc	r31, r19
    23f4:	a0 f4       	brcc	.+40     	; 0x241e <malloc+0x120>
    23f6:	2e 1b       	sub	r18, r30
    23f8:	3f 0b       	sbc	r19, r31
    23fa:	28 17       	cp	r18, r24
    23fc:	39 07       	cpc	r19, r25
    23fe:	78 f0       	brcs	.+30     	; 0x241e <malloc+0x120>
    2400:	ac 01       	movw	r20, r24
    2402:	4e 5f       	subi	r20, 0xFE	; 254
    2404:	5f 4f       	sbci	r21, 0xFF	; 255
    2406:	24 17       	cp	r18, r20
    2408:	35 07       	cpc	r19, r21
    240a:	48 f0       	brcs	.+18     	; 0x241e <malloc+0x120>
    240c:	4e 0f       	add	r20, r30
    240e:	5f 1f       	adc	r21, r31
    2410:	50 93 a8 01 	sts	0x01A8, r21	; 0x8001a8 <__brkval+0x1>
    2414:	40 93 a7 01 	sts	0x01A7, r20	; 0x8001a7 <__brkval>
    2418:	81 93       	st	Z+, r24
    241a:	91 93       	st	Z+, r25
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <malloc+0x124>
    241e:	e0 e0       	ldi	r30, 0x00	; 0
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	cf 01       	movw	r24, r30
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	08 95       	ret

0000242e <free>:
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	09 f4       	brne	.+2      	; 0x2438 <free+0xa>
    2436:	81 c0       	rjmp	.+258    	; 0x253a <free+0x10c>
    2438:	fc 01       	movw	r30, r24
    243a:	32 97       	sbiw	r30, 0x02	; 2
    243c:	13 82       	std	Z+3, r1	; 0x03
    243e:	12 82       	std	Z+2, r1	; 0x02
    2440:	a0 91 a9 01 	lds	r26, 0x01A9	; 0x8001a9 <__flp>
    2444:	b0 91 aa 01 	lds	r27, 0x01AA	; 0x8001aa <__flp+0x1>
    2448:	10 97       	sbiw	r26, 0x00	; 0
    244a:	81 f4       	brne	.+32     	; 0x246c <free+0x3e>
    244c:	20 81       	ld	r18, Z
    244e:	31 81       	ldd	r19, Z+1	; 0x01
    2450:	82 0f       	add	r24, r18
    2452:	93 1f       	adc	r25, r19
    2454:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <__brkval>
    2458:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <__brkval+0x1>
    245c:	28 17       	cp	r18, r24
    245e:	39 07       	cpc	r19, r25
    2460:	51 f5       	brne	.+84     	; 0x24b6 <free+0x88>
    2462:	f0 93 a8 01 	sts	0x01A8, r31	; 0x8001a8 <__brkval+0x1>
    2466:	e0 93 a7 01 	sts	0x01A7, r30	; 0x8001a7 <__brkval>
    246a:	67 c0       	rjmp	.+206    	; 0x253a <free+0x10c>
    246c:	ed 01       	movw	r28, r26
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	ce 17       	cp	r28, r30
    2474:	df 07       	cpc	r29, r31
    2476:	40 f4       	brcc	.+16     	; 0x2488 <free+0x5a>
    2478:	4a 81       	ldd	r20, Y+2	; 0x02
    247a:	5b 81       	ldd	r21, Y+3	; 0x03
    247c:	9e 01       	movw	r18, r28
    247e:	41 15       	cp	r20, r1
    2480:	51 05       	cpc	r21, r1
    2482:	f1 f0       	breq	.+60     	; 0x24c0 <free+0x92>
    2484:	ea 01       	movw	r28, r20
    2486:	f5 cf       	rjmp	.-22     	; 0x2472 <free+0x44>
    2488:	d3 83       	std	Z+3, r29	; 0x03
    248a:	c2 83       	std	Z+2, r28	; 0x02
    248c:	40 81       	ld	r20, Z
    248e:	51 81       	ldd	r21, Z+1	; 0x01
    2490:	84 0f       	add	r24, r20
    2492:	95 1f       	adc	r25, r21
    2494:	c8 17       	cp	r28, r24
    2496:	d9 07       	cpc	r29, r25
    2498:	59 f4       	brne	.+22     	; 0x24b0 <free+0x82>
    249a:	88 81       	ld	r24, Y
    249c:	99 81       	ldd	r25, Y+1	; 0x01
    249e:	84 0f       	add	r24, r20
    24a0:	95 1f       	adc	r25, r21
    24a2:	02 96       	adiw	r24, 0x02	; 2
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	9b 81       	ldd	r25, Y+3	; 0x03
    24ac:	93 83       	std	Z+3, r25	; 0x03
    24ae:	82 83       	std	Z+2, r24	; 0x02
    24b0:	21 15       	cp	r18, r1
    24b2:	31 05       	cpc	r19, r1
    24b4:	29 f4       	brne	.+10     	; 0x24c0 <free+0x92>
    24b6:	f0 93 aa 01 	sts	0x01AA, r31	; 0x8001aa <__flp+0x1>
    24ba:	e0 93 a9 01 	sts	0x01A9, r30	; 0x8001a9 <__flp>
    24be:	3d c0       	rjmp	.+122    	; 0x253a <free+0x10c>
    24c0:	e9 01       	movw	r28, r18
    24c2:	fb 83       	std	Y+3, r31	; 0x03
    24c4:	ea 83       	std	Y+2, r30	; 0x02
    24c6:	49 91       	ld	r20, Y+
    24c8:	59 91       	ld	r21, Y+
    24ca:	c4 0f       	add	r28, r20
    24cc:	d5 1f       	adc	r29, r21
    24ce:	ec 17       	cp	r30, r28
    24d0:	fd 07       	cpc	r31, r29
    24d2:	61 f4       	brne	.+24     	; 0x24ec <free+0xbe>
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	84 0f       	add	r24, r20
    24da:	95 1f       	adc	r25, r21
    24dc:	02 96       	adiw	r24, 0x02	; 2
    24de:	e9 01       	movw	r28, r18
    24e0:	99 83       	std	Y+1, r25	; 0x01
    24e2:	88 83       	st	Y, r24
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	9b 83       	std	Y+3, r25	; 0x03
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	e0 e0       	ldi	r30, 0x00	; 0
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	12 96       	adiw	r26, 0x02	; 2
    24f2:	8d 91       	ld	r24, X+
    24f4:	9c 91       	ld	r25, X
    24f6:	13 97       	sbiw	r26, 0x03	; 3
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	19 f0       	breq	.+6      	; 0x2502 <free+0xd4>
    24fc:	fd 01       	movw	r30, r26
    24fe:	dc 01       	movw	r26, r24
    2500:	f7 cf       	rjmp	.-18     	; 0x24f0 <free+0xc2>
    2502:	8d 91       	ld	r24, X+
    2504:	9c 91       	ld	r25, X
    2506:	11 97       	sbiw	r26, 0x01	; 1
    2508:	9d 01       	movw	r18, r26
    250a:	2e 5f       	subi	r18, 0xFE	; 254
    250c:	3f 4f       	sbci	r19, 0xFF	; 255
    250e:	82 0f       	add	r24, r18
    2510:	93 1f       	adc	r25, r19
    2512:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <__brkval>
    2516:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <__brkval+0x1>
    251a:	28 17       	cp	r18, r24
    251c:	39 07       	cpc	r19, r25
    251e:	69 f4       	brne	.+26     	; 0x253a <free+0x10c>
    2520:	30 97       	sbiw	r30, 0x00	; 0
    2522:	29 f4       	brne	.+10     	; 0x252e <free+0x100>
    2524:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__flp+0x1>
    2528:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__flp>
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <free+0x104>
    252e:	13 82       	std	Z+3, r1	; 0x03
    2530:	12 82       	std	Z+2, r1	; 0x02
    2532:	b0 93 a8 01 	sts	0x01A8, r27	; 0x8001a8 <__brkval+0x1>
    2536:	a0 93 a7 01 	sts	0x01A7, r26	; 0x8001a7 <__brkval>
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	08 95       	ret

00002540 <strncat>:
    2540:	fb 01       	movw	r30, r22
    2542:	dc 01       	movw	r26, r24
    2544:	0d 90       	ld	r0, X+
    2546:	00 20       	and	r0, r0
    2548:	e9 f7       	brne	.-6      	; 0x2544 <strncat+0x4>
    254a:	11 97       	sbiw	r26, 0x01	; 1
    254c:	41 50       	subi	r20, 0x01	; 1
    254e:	50 40       	sbci	r21, 0x00	; 0
    2550:	28 f0       	brcs	.+10     	; 0x255c <strncat+0x1c>
    2552:	01 90       	ld	r0, Z+
    2554:	00 20       	and	r0, r0
    2556:	0d 92       	st	X+, r0
    2558:	c9 f7       	brne	.-14     	; 0x254c <strncat+0xc>
    255a:	08 95       	ret
    255c:	1c 92       	st	X, r1
    255e:	08 95       	ret

00002560 <__do_global_dtors>:
    2560:	10 e0       	ldi	r17, 0x00	; 0
    2562:	cd e3       	ldi	r28, 0x3D	; 61
    2564:	d0 e0       	ldi	r29, 0x00	; 0
    2566:	04 c0       	rjmp	.+8      	; 0x2570 <__do_global_dtors+0x10>
    2568:	fe 01       	movw	r30, r28
    256a:	0e 94 20 11 	call	0x2240	; 0x2240 <__tablejump2__>
    256e:	21 96       	adiw	r28, 0x01	; 1
    2570:	ce 33       	cpi	r28, 0x3E	; 62
    2572:	d1 07       	cpc	r29, r17
    2574:	c9 f7       	brne	.-14     	; 0x2568 <__do_global_dtors+0x8>
    2576:	f8 94       	cli

00002578 <__stop_program>:
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <__stop_program>
