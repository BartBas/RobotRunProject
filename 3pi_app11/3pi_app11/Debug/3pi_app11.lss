
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000236e  00002402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000236e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  0080013a  0080013a  0000243c  2**0
                  ALLOC
  3 .stab         000059c4  00000000  00000000  0000243c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000084be  00000000  00000000  00007e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000102be  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00010300  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000108  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001a47  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000c17  00000000  00000000  00011e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000116b  00000000  00000000  00012aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002dc  00000000  00000000  00013c14  2**2
                  CONTENTS, READONLY, DEBUGGING
<<<<<<< Updated upstream
 12 .debug_str    00000788  00000000  00000000  00013bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000091a  00000000  00000000  00014374  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e0  00000000  00000000  00014c8e  2**0
=======
 12 .debug_str    00000750  00000000  00000000  00013ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000985  00000000  00000000  00014640  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000e0  00000000  00000000  00014fc5  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__dtors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_9>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	b5 0a       	sbc	r11, r21

0000006a <__dtors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ee e6       	ldi	r30, 0x6E	; 110
      7e:	f3 e2       	ldi	r31, 0x23	; 35
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	aa 33       	cpi	r26, 0x3A	; 58
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	aa e3       	ldi	r26, 0x3A	; 58
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a9 3a       	cpi	r26, 0xA9	; 169
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
      9c:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
      a0:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__do_global_dtors>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <batteryPercentage>:
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
<<<<<<< Updated upstream
      a8:	0e 94 b0 05 	call	0xb60	; 0xb60 <read_battery_millivolts_3pi>

int batteryPercentage()//Should this function be in main or in display.c or something else?
{
	
	int milliVolts = read_battery_millivolts();
	int batteryPercent = milliVolts/50;
=======
      a8:	0e 94 65 07 	call	0xeca	; 0xeca <read_battery_millivolts_3pi>
>>>>>>> Stashed changes
      ac:	62 e3       	ldi	r22, 0x32	; 50
      ae:	70 e0       	ldi	r23, 0x00	; 0
      b0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__divmodhi4>
      b4:	cb 01       	movw	r24, r22
	return batteryPercent;
}
      b6:	08 95       	ret

000000b8 <updateDisplay>:

void updateDisplay(int orderPercent, int batteryPercent, robotStates currentState)
{
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	0f 93       	push	r16
      be:	1f 93       	push	r17
      c0:	cf 93       	push	r28
      c2:	7c 01       	movw	r14, r24
      c4:	8b 01       	movw	r16, r22
      c6:	c4 2f       	mov	r28, r20
<<<<<<< Updated upstream
	clear();
      c8:	0e 94 b9 06 	call	0xd72	; 0xd72 <clear>
	lcd_goto_xy(0,0);
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	0e 94 40 07 	call	0xe80	; 0xe80 <lcd_goto_xy>
	print("Task:");
      d4:	83 e2       	ldi	r24, 0x23	; 35
      d6:	91 e0       	ldi	r25, 0x01	; 1
      d8:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
	print_long(orderPercent);
=======
      c8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <clear>
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <lcd_goto_xy>
      d4:	83 e2       	ldi	r24, 0x23	; 35
      d6:	91 e0       	ldi	r25, 0x01	; 1
      d8:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
>>>>>>> Stashed changes
      dc:	b7 01       	movw	r22, r14
      de:	ff 0c       	add	r15, r15
      e0:	88 0b       	sbc	r24, r24
      e2:	99 0b       	sbc	r25, r25
<<<<<<< Updated upstream
      e4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <print_long>
	print("%");
      e8:	89 e2       	ldi	r24, 0x29	; 41
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
	
	lcd_goto_xy(0,1);
      f0:	61 e0       	ldi	r22, 0x01	; 1
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 40 07 	call	0xe80	; 0xe80 <lcd_goto_xy>
	print("Bat:");
      f8:	8b e2       	ldi	r24, 0x2B	; 43
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
	print_long(batteryPercent);
=======
      e4:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <print_long>
      e8:	89 e2       	ldi	r24, 0x29	; 41
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
      f0:	61 e0       	ldi	r22, 0x01	; 1
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <lcd_goto_xy>
      f8:	8b e2       	ldi	r24, 0x2B	; 43
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
>>>>>>> Stashed changes
     100:	b8 01       	movw	r22, r16
     102:	11 0f       	add	r17, r17
     104:	88 0b       	sbc	r24, r24
     106:	99 0b       	sbc	r25, r25
<<<<<<< Updated upstream
     108:	0e 94 1d 07 	call	0xe3a	; 0xe3a <print_long>
	print("%");
     10c:	89 e2       	ldi	r24, 0x29	; 41
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
	switch(currentState)
=======
     108:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <print_long>
     10c:	89 e2       	ldi	r24, 0x29	; 41
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
>>>>>>> Stashed changes
     114:	c2 30       	cpi	r28, 0x02	; 2
     116:	a9 f0       	breq	.+42     	; 0x142 <updateDisplay+0x8a>
     118:	28 f4       	brcc	.+10     	; 0x124 <updateDisplay+0x6c>
     11a:	cc 23       	and	r28, r28
     11c:	41 f0       	breq	.+16     	; 0x12e <updateDisplay+0x76>
     11e:	c1 30       	cpi	r28, 0x01	; 1
     120:	59 f0       	breq	.+22     	; 0x138 <updateDisplay+0x80>
     122:	1d c0       	rjmp	.+58     	; 0x15e <updateDisplay+0xa6>
     124:	c3 30       	cpi	r28, 0x03	; 3
     126:	91 f0       	breq	.+36     	; 0x14c <updateDisplay+0x94>
     128:	c4 30       	cpi	r28, 0x04	; 4
     12a:	a9 f0       	breq	.+42     	; 0x156 <updateDisplay+0x9e>
     12c:	18 c0       	rjmp	.+48     	; 0x15e <updateDisplay+0xa6>
	{
		case manualControl:
		print("M");//M for Manual
     12e:	80 e3       	ldi	r24, 0x30	; 48
     130:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< Updated upstream
     132:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
		break;
=======
     132:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
>>>>>>> Stashed changes
     136:	13 c0       	rjmp	.+38     	; 0x15e <updateDisplay+0xa6>
		case mazeSolver:
		print("P");//P for Parcours
     138:	82 e3       	ldi	r24, 0x32	; 50
     13a:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< Updated upstream
     13c:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
		break;
=======
     13c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
>>>>>>> Stashed changes
     140:	0e c0       	rjmp	.+28     	; 0x15e <updateDisplay+0xa6>
		case logicsBot:
		print("O");//O for Order
     142:	84 e3       	ldi	r24, 0x34	; 52
     144:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< Updated upstream
     146:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
		break;
=======
     146:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
>>>>>>> Stashed changes
     14a:	09 c0       	rjmp	.+18     	; 0x15e <updateDisplay+0xa6>
		case chargeMode:
		print("C");//C for Charge
     14c:	86 e3       	ldi	r24, 0x36	; 54
     14e:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< Updated upstream
     150:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
		break;
=======
     150:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
>>>>>>> Stashed changes
     154:	04 c0       	rjmp	.+8      	; 0x15e <updateDisplay+0xa6>
		case homingMode:
		print("H");//H for Homing
     156:	88 e3       	ldi	r24, 0x38	; 56
     158:	91 e0       	ldi	r25, 0x01	; 1
<<<<<<< Updated upstream
     15a:	0e 94 c8 06 	call	0xd90	; 0xd90 <print>
		break;
	}
}
=======
     15a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <print>
>>>>>>> Stashed changes
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	ff 90       	pop	r15
     166:	ef 90       	pop	r14
     168:	08 95       	ret

0000016a <main>:
<<<<<<< Updated upstream
     16a:	0e 94 b9 06 	call	0xd72	; 0xd72 <clear>
     16e:	80 ed       	ldi	r24, 0xD0	; 208
     170:	97 e0       	ldi	r25, 0x07	; 7
     172:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <pololu_3pi_init>
     176:	0e 94 c2 00 	call	0x184	; 0x184 <initialize>
     17a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <warehouse>
=======
#include <avr/pgmspace.h>


int main()
{
	clear();
     16a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <clear>
	pololu_3pi_init(2000);
     16e:	80 ed       	ldi	r24, 0xD0	; 208
     170:	97 e0       	ldi	r25, 0x07	; 7
     172:	0e 94 b1 0a 	call	0x1562	; 0x1562 <pololu_3pi_init>
	initialize();
     176:	0e 94 c2 00 	call	0x184	; 0x184 <initialize>
	
	
	/*char parecour[20];
	parcour(parecour);
	print(parecour);*/
	warehouse();
     17a:	0e 94 4c 04 	call	0x898	; 0x898 <warehouse>
>>>>>>> Stashed changes
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	08 95       	ret

00000184 <initialize>:
		print_character(c);
	}
}

void initialize()
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
	unsigned int counter; // used as a simple timer
	
	pololu_3pi_init(2000);
     188:	80 ed       	ldi	r24, 0xD0	; 208
     18a:	97 e0       	ldi	r25, 0x07	; 7
     18c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <pololu_3pi_init>
	
	while(!button_is_pressed(BUTTON_B)){}	
     190:	80 e1       	ldi	r24, 0x10	; 16
     192:	0e 94 ee 09 	call	0x13dc	; 0x13dc <button_is_pressed>
     196:	88 23       	and	r24, r24
     198:	d9 f3       	breq	.-10     	; 0x190 <initialize+0xc>
	wait_for_button_release(BUTTON_B);
     19a:	80 e1       	ldi	r24, 0x10	; 16
     19c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <wait_for_button_release>
	delay_ms(1000);
     1a0:	88 ee       	ldi	r24, 0xE8	; 232
     1a2:	93 e0       	ldi	r25, 0x03	; 3
     1a4:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>

	for(counter=0;counter<80;counter++)
     1a8:	c0 e0       	ldi	r28, 0x00	; 0
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	19 c0       	rjmp	.+50     	; 0x1e0 <initialize+0x5c>
	{
		if(counter < 20 || counter >= 60)
     1ae:	ce 01       	movw	r24, r28
     1b0:	44 97       	sbiw	r24, 0x14	; 20
     1b2:	88 97       	sbiw	r24, 0x28	; 40
     1b4:	38 f0       	brcs	.+14     	; 0x1c4 <initialize+0x40>
		set_motors(40,-40);
     1b6:	68 ed       	ldi	r22, 0xD8	; 216
     1b8:	7f ef       	ldi	r23, 0xFF	; 255
     1ba:	88 e2       	ldi	r24, 0x28	; 40
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
     1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <initialize+0x4c>
		else
		set_motors(-40,40);
     1c4:	68 e2       	ldi	r22, 0x28	; 40
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	88 ed       	ldi	r24, 0xD8	; 216
     1ca:	9f ef       	ldi	r25, 0xFF	; 255
     1cc:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		calibrate_line_sensors(IR_EMITTERS_ON);
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <calibrate_line_sensors>
		
		delay_ms(20);
     1d6:	84 e1       	ldi	r24, 0x14	; 20
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
	
	while(!button_is_pressed(BUTTON_B)){}	
	wait_for_button_release(BUTTON_B);
	delay_ms(1000);

	for(counter=0;counter<80;counter++)
     1de:	21 96       	adiw	r28, 0x01	; 1
     1e0:	c0 35       	cpi	r28, 0x50	; 80
     1e2:	d1 05       	cpc	r29, r1
     1e4:	20 f3       	brcs	.-56     	; 0x1ae <initialize+0x2a>
		set_motors(-40,40);
		calibrate_line_sensors(IR_EMITTERS_ON);
		
		delay_ms(20);
	}
	set_motors(0,0);
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
	
	while(!button_is_pressed(BUTTON_B)){}
     1f2:	80 e1       	ldi	r24, 0x10	; 16
     1f4:	0e 94 ee 09 	call	0x13dc	; 0x13dc <button_is_pressed>
     1f8:	88 23       	and	r24, r24
     1fa:	d9 f3       	breq	.-10     	; 0x1f2 <initialize+0x6e>
	wait_for_button_release(BUTTON_B);
     1fc:	80 e1       	ldi	r24, 0x10	; 16
     1fe:	0e 94 da 09 	call	0x13b4	; 0x13b4 <wait_for_button_release>
	
	clear();
     202:	0e 94 6e 08 	call	0x10dc	; 0x10dc <clear>
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <inch>:

void inch(){
	set_motors(50,50);
     20c:	62 e3       	ldi	r22, 0x32	; 50
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	82 e3       	ldi	r24, 0x32	; 50
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     218:	88 ec       	ldi	r24, 0xC8	; 200
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
	delay(200);
	set_motors(0,0);
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
     22c:	08 95       	ret

0000022e <motorControl>:
		
	}
}


void motorControl(char x){
     22e:	cf 93       	push	r28
     230:	c8 2f       	mov	r28, r24
	read_line(sensors,IR_EMITTERS_ON);
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	8b e9       	ldi	r24, 0x9B	; 155
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
	
	if(x == 'N')
     23c:	ce 34       	cpi	r28, 0x4E	; 78
     23e:	39 f4       	brne	.+14     	; 0x24e <motorControl+0x20>
	set_motors(0,0);
     240:	60 e0       	ldi	r22, 0x00	; 0
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
     24c:	b1 c0       	rjmp	.+354    	; 0x3b0 <motorControl+0x182>
	
	
	else if(x == 'L'){										//turn left
     24e:	cc 34       	cpi	r28, 0x4C	; 76
     250:	09 f5       	brne	.+66     	; 0x294 <motorControl+0x66>
		set_motors(-50,50);
     252:	62 e3       	ldi	r22, 0x32	; 50
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	8e ec       	ldi	r24, 0xCE	; 206
     258:	9f ef       	ldi	r25, 0xFF	; 255
     25a:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		while (sensors[2] >=500){
     25e:	05 c0       	rjmp	.+10     	; 0x26a <motorControl+0x3c>
			read_line(sensors,IR_EMITTERS_ON);
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	8b e9       	ldi	r24, 0x9B	; 155
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
	set_motors(0,0);
	
	
	else if(x == 'L'){										//turn left
		set_motors(-50,50);
		while (sensors[2] >=500){
     26a:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <sensors+0x4>
     26e:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <sensors+0x5>
     272:	84 3f       	cpi	r24, 0xF4	; 244
     274:	91 40       	sbci	r25, 0x01	; 1
     276:	a0 f7       	brcc	.-24     	; 0x260 <motorControl+0x32>
     278:	05 c0       	rjmp	.+10     	; 0x284 <motorControl+0x56>
			read_line(sensors,IR_EMITTERS_ON);
		}
		while (sensors[2] <=500){
			read_line(sensors,IR_EMITTERS_ON);
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	8b e9       	ldi	r24, 0x9B	; 155
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
	else if(x == 'L'){										//turn left
		set_motors(-50,50);
		while (sensors[2] >=500){
			read_line(sensors,IR_EMITTERS_ON);
		}
		while (sensors[2] <=500){
     284:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <sensors+0x4>
     288:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <sensors+0x5>
     28c:	85 3f       	cpi	r24, 0xF5	; 245
     28e:	91 40       	sbci	r25, 0x01	; 1
     290:	a0 f3       	brcs	.-24     	; 0x27a <motorControl+0x4c>
     292:	8e c0       	rjmp	.+284    	; 0x3b0 <motorControl+0x182>
			read_line(sensors,IR_EMITTERS_ON);
		}
	}
	
	else if(x == 'R'){									//turn right
     294:	c2 35       	cpi	r28, 0x52	; 82
     296:	09 f5       	brne	.+66     	; 0x2da <motorControl+0xac>
		set_motors(50,-50);
     298:	6e ec       	ldi	r22, 0xCE	; 206
     29a:	7f ef       	ldi	r23, 0xFF	; 255
     29c:	82 e3       	ldi	r24, 0x32	; 50
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		while (sensors[2] >=500){
     2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <motorControl+0x82>
			read_line(sensors,IR_EMITTERS_ON);
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	8b e9       	ldi	r24, 0x9B	; 155
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
		}
	}
	
	else if(x == 'R'){									//turn right
		set_motors(50,-50);
		while (sensors[2] >=500){
     2b0:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <sensors+0x4>
     2b4:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <sensors+0x5>
     2b8:	84 3f       	cpi	r24, 0xF4	; 244
     2ba:	91 40       	sbci	r25, 0x01	; 1
     2bc:	a0 f7       	brcc	.-24     	; 0x2a6 <motorControl+0x78>
     2be:	05 c0       	rjmp	.+10     	; 0x2ca <motorControl+0x9c>
			read_line(sensors,IR_EMITTERS_ON);
		}
		while (sensors[2] <=500){
			read_line(sensors,IR_EMITTERS_ON);
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	8b e9       	ldi	r24, 0x9B	; 155
     2c4:	91 e0       	ldi	r25, 0x01	; 1
     2c6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
	else if(x == 'R'){									//turn right
		set_motors(50,-50);
		while (sensors[2] >=500){
			read_line(sensors,IR_EMITTERS_ON);
		}
		while (sensors[2] <=500){
     2ca:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <sensors+0x4>
     2ce:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <sensors+0x5>
     2d2:	85 3f       	cpi	r24, 0xF5	; 245
     2d4:	91 40       	sbci	r25, 0x01	; 1
     2d6:	a0 f3       	brcs	.-24     	; 0x2c0 <motorControl+0x92>
     2d8:	6b c0       	rjmp	.+214    	; 0x3b0 <motorControl+0x182>
			read_line(sensors,IR_EMITTERS_ON);
		}
	}
	
	else if(x == 'S'){									//drive straight and corrects the adjusment of the robot if it aint straight
     2da:	c3 35       	cpi	r28, 0x53	; 83
     2dc:	89 f5       	brne	.+98     	; 0x340 <motorControl+0x112>
		set_motors(50,50);
     2de:	62 e3       	ldi	r22, 0x32	; 50
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	82 e3       	ldi	r24, 0x32	; 50
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		
		if (sensors[3] <=400  && sensors[4] >=400 )
     2ea:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <sensors+0x6>
     2ee:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <sensors+0x7>
     2f2:	81 39       	cpi	r24, 0x91	; 145
     2f4:	91 40       	sbci	r25, 0x01	; 1
     2f6:	68 f4       	brcc	.+26     	; 0x312 <motorControl+0xe4>
     2f8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <sensors+0x8>
     2fc:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <sensors+0x9>
     300:	80 39       	cpi	r24, 0x90	; 144
     302:	91 40       	sbci	r25, 0x01	; 1
<<<<<<< Updated upstream
     304:	30 f0       	brcs	.+12     	; 0x312 <motorControl+0xe4>
		set_motors(100,40);
=======
     304:	30 f4       	brcc	.+12     	; 0x312 <motorControl+0xe4>
		set_motors(75,40);
>>>>>>> Stashed changes
     306:	68 e2       	ldi	r22, 0x28	; 40
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	8b e4       	ldi	r24, 0x4B	; 75
     30c:	90 e0       	ldi	r25, 0x00	; 0
<<<<<<< Updated upstream
     30e:	0e 94 f6 07 	call	0xfec	; 0xfec <set_motors>
		if (sensors[1] <=400 && sensors[0] >=400  )
=======
     30e:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		if (sensors[1] >=400 && sensors[0] <=400  )
>>>>>>> Stashed changes
     312:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <sensors+0x2>
     316:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <sensors+0x3>
     31a:	81 39       	cpi	r24, 0x91	; 145
     31c:	91 40       	sbci	r25, 0x01	; 1
     31e:	08 f0       	brcs	.+2      	; 0x322 <motorControl+0xf4>
     320:	47 c0       	rjmp	.+142    	; 0x3b0 <motorControl+0x182>
     322:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <sensors>
     326:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <sensors+0x1>
     32a:	80 39       	cpi	r24, 0x90	; 144
     32c:	91 40       	sbci	r25, 0x01	; 1
     32e:	08 f4       	brcc	.+2      	; 0x332 <motorControl+0x104>
     330:	3f c0       	rjmp	.+126    	; 0x3b0 <motorControl+0x182>
		set_motors(40,75);
     332:	6b e4       	ldi	r22, 0x4B	; 75
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	88 e2       	ldi	r24, 0x28	; 40
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
     33e:	38 c0       	rjmp	.+112    	; 0x3b0 <motorControl+0x182>
	}
	
	else if(x == 'B'){									// reverse
     340:	c2 34       	cpi	r28, 0x42	; 66
     342:	09 f5       	brne	.+66     	; 0x386 <motorControl+0x158>
		set_motors(-50,-50);
     344:	6e ec       	ldi	r22, 0xCE	; 206
     346:	7f ef       	ldi	r23, 0xFF	; 255
     348:	8e ec       	ldi	r24, 0xCE	; 206
     34a:	9f ef       	ldi	r25, 0xFF	; 255
     34c:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		if (sensors[3] >=400)
     350:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <sensors+0x6>
     354:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <sensors+0x7>
     358:	80 39       	cpi	r24, 0x90	; 144
     35a:	91 40       	sbci	r25, 0x01	; 1
     35c:	30 f0       	brcs	.+12     	; 0x36a <motorControl+0x13c>
		set_motors(-50,-55);
     35e:	69 ec       	ldi	r22, 0xC9	; 201
     360:	7f ef       	ldi	r23, 0xFF	; 255
     362:	8e ec       	ldi	r24, 0xCE	; 206
     364:	9f ef       	ldi	r25, 0xFF	; 255
     366:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		if (sensors[1] >=400)
     36a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <sensors+0x2>
     36e:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <sensors+0x3>
     372:	80 39       	cpi	r24, 0x90	; 144
     374:	91 40       	sbci	r25, 0x01	; 1
     376:	e0 f0       	brcs	.+56     	; 0x3b0 <motorControl+0x182>
		set_motors(-55,-50);
     378:	6e ec       	ldi	r22, 0xCE	; 206
     37a:	7f ef       	ldi	r23, 0xFF	; 255
     37c:	89 ec       	ldi	r24, 0xC9	; 201
     37e:	9f ef       	ldi	r25, 0xFF	; 255
     380:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
     384:	15 c0       	rjmp	.+42     	; 0x3b0 <motorControl+0x182>
	}
	else if(x == 'T'){									// Turn around
     386:	c4 35       	cpi	r28, 0x54	; 84
     388:	99 f4       	brne	.+38     	; 0x3b0 <motorControl+0x182>
		set_motors(-75,75);
     38a:	6b e4       	ldi	r22, 0x4B	; 75
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	85 eb       	ldi	r24, 0xB5	; 181
     390:	9f ef       	ldi	r25, 0xFF	; 255
     392:	0e 94 ab 09 	call	0x1356	; 0x1356 <set_motors>
		while (sensors[2] >=500){
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <motorControl+0x174>
			read_line(sensors,IR_EMITTERS_ON);
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	8b e9       	ldi	r24, 0x9B	; 155
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
		if (sensors[1] >=400)
		set_motors(-55,-50);
	}
	else if(x == 'T'){									// Turn around
		set_motors(-75,75);
		while (sensors[2] >=500){
     3a2:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <sensors+0x4>
     3a6:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <sensors+0x5>
     3aa:	84 3f       	cpi	r24, 0xF4	; 244
     3ac:	91 40       	sbci	r25, 0x01	; 1
     3ae:	a0 f7       	brcc	.-24     	; 0x398 <motorControl+0x16a>
			read_line(sensors,IR_EMITTERS_ON);
		}
	}
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <lineType>:
	set_motors(0,0);
}

char lineType(){																											// function that returns the type of junction it detects
	while(1){																												// >= 500 = black line		<=500 = white
		read_line(sensors,IR_EMITTERS_ON);
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	8b e9       	ldi	r24, 0x9B	; 155
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
		
		if (sensors[1] >=500 && sensors[3] >= 500){																			// this checks if its a X junction or a T junction
     3be:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <sensors+0x2>
     3c2:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <sensors+0x3>
     3c6:	84 3f       	cpi	r24, 0xF4	; 244
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	92 07       	cpc	r25, r18
     3cc:	c0 f0       	brcs	.+48     	; 0x3fe <lineType+0x4a>
     3ce:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <sensors+0x6>
     3d2:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <sensors+0x7>
     3d6:	24 3f       	cpi	r18, 0xF4	; 244
     3d8:	31 40       	sbci	r19, 0x01	; 1
     3da:	88 f0       	brcs	.+34     	; 0x3fe <lineType+0x4a>
			inch();
     3dc:	0e 94 06 01 	call	0x20c	; 0x20c <inch>
			read_line(sensors,IR_EMITTERS_ON);
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	8b e9       	ldi	r24, 0x9B	; 155
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
			
			if (sensors[2] >=500)
     3ea:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <sensors+0x4>
     3ee:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <sensors+0x5>
     3f2:	84 3f       	cpi	r24, 0xF4	; 244
     3f4:	91 40       	sbci	r25, 0x01	; 1
     3f6:	08 f4       	brcc	.+2      	; 0x3fa <lineType+0x46>
     3f8:	90 c0       	rjmp	.+288    	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
			return X_junction;
     3fa:	88 e0       	ldi	r24, 0x08	; 8
     3fc:	08 95       	ret
			else
			return T_junction;
		}
		
		else if (sensors[1] >=500 && sensors[0] >= 500){																// this function checks if its a left corner or a straight with left corner
     3fe:	84 3f       	cpi	r24, 0xF4	; 244
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	92 07       	cpc	r25, r18
     404:	00 f1       	brcs	.+64     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     406:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <sensors>
     40a:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <sensors+0x1>
     40e:	24 3f       	cpi	r18, 0xF4	; 244
     410:	31 40       	sbci	r19, 0x01	; 1
     412:	c8 f0       	brcs	.+50     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			inch();
     414:	0e 94 06 01 	call	0x20c	; 0x20c <inch>
			read_line(sensors,IR_EMITTERS_ON);
     418:	61 e0       	ldi	r22, 0x01	; 1
     41a:	8b e9       	ldi	r24, 0x9B	; 155
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
			
			if (sensors[2] >= 500 || sensors[3] >=500)
     422:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <sensors+0x4>
     426:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <sensors+0x5>
     42a:	84 3f       	cpi	r24, 0xF4	; 244
     42c:	91 40       	sbci	r25, 0x01	; 1
     42e:	08 f0       	brcs	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     430:	76 c0       	rjmp	.+236    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
     432:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <sensors+0x6>
     436:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <sensors+0x7>
     43a:	84 3f       	cpi	r24, 0xF4	; 244
     43c:	91 40       	sbci	r25, 0x01	; 1
     43e:	08 f4       	brcc	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     440:	70 c0       	rjmp	.+224    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
			return Straight_left_junction;
     442:	86 e0       	ldi	r24, 0x06	; 6
     444:	08 95       	ret
			else
			return Left_corner;
		}
		
		else if (sensors[3] >=500 && sensors[4] >= 500){																	// this function checks if its a right corner or a straight with right corner
     446:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <sensors+0x6>
     44a:	50 91 a2 01 	lds	r21, 0x01A2	; 0x8001a2 <sensors+0x7>
     44e:	44 3f       	cpi	r20, 0xF4	; 244
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	56 07       	cpc	r21, r22
     454:	00 f1       	brcs	.+64     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     456:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <sensors+0x8>
     45a:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <sensors+0x9>
     45e:	24 3f       	cpi	r18, 0xF4	; 244
     460:	31 40       	sbci	r19, 0x01	; 1
     462:	c8 f0       	brcs	.+50     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			inch();
     464:	0e 94 06 01 	call	0x20c	; 0x20c <inch>
			read_line(sensors,IR_EMITTERS_ON);
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	8b e9       	ldi	r24, 0x9B	; 155
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
			
			if (sensors[2] >= 500 || sensors[1] >=500)
     472:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <sensors+0x4>
     476:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <sensors+0x5>
     47a:	84 3f       	cpi	r24, 0xF4	; 244
     47c:	91 40       	sbci	r25, 0x01	; 1
     47e:	08 f0       	brcs	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     480:	52 c0       	rjmp	.+164    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     482:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <sensors+0x2>
     486:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <sensors+0x3>
     48a:	84 3f       	cpi	r24, 0xF4	; 244
     48c:	91 40       	sbci	r25, 0x01	; 1
     48e:	08 f4       	brcc	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     490:	4c c0       	rjmp	.+152    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
			return Straight_right_junction;
     492:	85 e0       	ldi	r24, 0x05	; 5
     494:	08 95       	ret
			else
			return Right_corner;
		}
		
		else if(sensors[2] <=200){																						// check if the line ends
     496:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <sensors+0x4>
     49a:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <sensors+0x5>
     49e:	29 3c       	cpi	r18, 0xC9	; 201
     4a0:	31 05       	cpc	r19, r1
     4a2:	08 f4       	brcc	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4a4:	44 c0       	rjmp	.+136    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
			return Line_end;
		}

		
		else if (sensors[2] >=500){
     4a6:	24 3f       	cpi	r18, 0xF4	; 244
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	36 07       	cpc	r19, r22
     4ac:	08 f4       	brcc	.+2      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4ae:	82 cf       	rjmp	.-252    	; 0x3b4 <lineType>
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500)){
     4b0:	24 3f       	cpi	r18, 0xF4	; 244
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	36 07       	cpc	r19, r22
     4b6:	e8 f1       	brcs	.+122    	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
     4b8:	45 3f       	cpi	r20, 0xF5	; 245
     4ba:	51 40       	sbci	r21, 0x01	; 1
     4bc:	e0 f5       	brcc	.+120    	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
     4be:	40 91 a3 01 	lds	r20, 0x01A3	; 0x8001a3 <sensors+0x8>
     4c2:	50 91 a4 01 	lds	r21, 0x01A4	; 0x8001a4 <sensors+0x9>
     4c6:	44 3f       	cpi	r20, 0xF4	; 244
     4c8:	51 40       	sbci	r21, 0x01	; 1
     4ca:	b8 f1       	brcs	.+110    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     4cc:	40 91 9b 01 	lds	r20, 0x019B	; 0x80019b <sensors>
     4d0:	50 91 9c 01 	lds	r21, 0x019C	; 0x80019c <sensors+0x1>
     4d4:	44 3f       	cpi	r20, 0xF4	; 244
     4d6:	51 40       	sbci	r21, 0x01	; 1
     4d8:	90 f1       	brcs	.+100    	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
     4da:	85 3f       	cpi	r24, 0xF5	; 245
     4dc:	91 40       	sbci	r25, 0x01	; 1
     4de:	88 f5       	brcc	.+98     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
     4e0:	24 3f       	cpi	r18, 0xF4	; 244
     4e2:	31 40       	sbci	r19, 0x01	; 1
     4e4:	50 f4       	brcc	.+20     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
					motorControl('S');
				}		// checks if it detects the "barcode"
				return Barcode;
			}
			else
			return Straight;																						// check if its straight without any corners
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	08 95       	ret

		
		else if (sensors[2] >=500){
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500)){
				while(sensors[4] >= 400 || sensors[0] >=400){
					read_line(sensors,IR_EMITTERS_ON);
     4ea:	61 e0       	ldi	r22, 0x01	; 1
     4ec:	8b e9       	ldi	r24, 0x9B	; 155
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <read_line>
					motorControl('S');
     4f4:	83 e5       	ldi	r24, 0x53	; 83
     4f6:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
		}

		
		else if (sensors[2] >=500){
			if ((sensors[2] >=500 && sensors[3] <=500 && sensors[4] >=500) && (sensors[0] >=500 && sensors[1] <=500 && sensors[2] >=500)){
				while(sensors[4] >= 400 || sensors[0] >=400){
     4fa:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <sensors+0x8>
     4fe:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <sensors+0x9>
     502:	80 39       	cpi	r24, 0x90	; 144
     504:	91 40       	sbci	r25, 0x01	; 1
     506:	88 f7       	brcc	.-30     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     508:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <sensors>
     50c:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <sensors+0x1>
     510:	80 39       	cpi	r24, 0x90	; 144
     512:	91 40       	sbci	r25, 0x01	; 1
     514:	50 f7       	brcc	.-44     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
					read_line(sensors,IR_EMITTERS_ON);
					motorControl('S');
				}		// checks if it detects the "barcode"
				return Barcode;
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	08 95       	ret
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >=500)
			return X_junction;
			else
			return T_junction;
     51a:	87 e0       	ldi	r24, 0x07	; 7
     51c:	08 95       	ret
		else if (sensors[1] >=500 && sensors[0] >= 500){																// this function checks if its a left corner or a straight with left corner
			inch();
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= 500 || sensors[3] >=500)
			return Straight_left_junction;
     51e:	86 e0       	ldi	r24, 0x06	; 6
     520:	08 95       	ret
			else
			return Left_corner;
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	08 95       	ret
		else if (sensors[3] >=500 && sensors[4] >= 500){																	// this function checks if its a right corner or a straight with right corner
			inch();
			read_line(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= 500 || sensors[1] >=500)
			return Straight_right_junction;
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	08 95       	ret
			else
			return Right_corner;
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	08 95       	ret
		}
		
		else if(sensors[2] <=200){																						// check if the line ends
			return Line_end;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	08 95       	ret
					motorControl('S');
				}		// checks if it detects the "barcode"
				return Barcode;
			}
			else
			return Straight;																						// check if its straight without any corners
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	08 95       	ret
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	08 95       	ret
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	08 95       	ret
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	08 95       	ret
     542:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		
	}
}
     544:	08 95       	ret

00000546 <swap>:
     546:	fc 01       	movw	r30, r24
     548:	20 81       	ld	r18, Z
     54a:	31 81       	ldd	r19, Z+1	; 0x01
     54c:	fb 01       	movw	r30, r22
     54e:	40 81       	ld	r20, Z
     550:	51 81       	ldd	r21, Z+1	; 0x01
     552:	fc 01       	movw	r30, r24
     554:	51 83       	std	Z+1, r21	; 0x01
     556:	40 83       	st	Z, r20
     558:	fb 01       	movw	r30, r22
     55a:	31 83       	std	Z+1, r19	; 0x01
     55c:	20 83       	st	Z, r18
     55e:	08 95       	ret

00000560 <bubbleSort>:
     560:	6f 92       	push	r6
     562:	7f 92       	push	r7
     564:	8f 92       	push	r8
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	6c 01       	movw	r12, r24
     57e:	3b 01       	movw	r6, r22
     580:	4a 01       	movw	r8, r20
     582:	a1 2c       	mov	r10, r1
     584:	b1 2c       	mov	r11, r1
     586:	30 c0       	rjmp	.+96     	; 0x5e8 <bubbleSort+0x88>
     588:	7e 01       	movw	r14, r28
     58a:	ee 0c       	add	r14, r14
     58c:	ff 1c       	adc	r15, r15
     58e:	f6 01       	movw	r30, r12
     590:	ee 0d       	add	r30, r14
     592:	ff 1d       	adc	r31, r15
     594:	20 81       	ld	r18, Z
     596:	31 81       	ldd	r19, Z+1	; 0x01
     598:	8e 01       	movw	r16, r28
     59a:	0f 5f       	subi	r16, 0xFF	; 255
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
     59e:	00 0f       	add	r16, r16
     5a0:	11 1f       	adc	r17, r17
     5a2:	d6 01       	movw	r26, r12
     5a4:	a0 0f       	add	r26, r16
     5a6:	b1 1f       	adc	r27, r17
     5a8:	8d 91       	ld	r24, X+
     5aa:	9c 91       	ld	r25, X
     5ac:	11 97       	sbiw	r26, 0x01	; 1
     5ae:	82 17       	cp	r24, r18
     5b0:	93 07       	cpc	r25, r19
     5b2:	64 f4       	brge	.+24     	; 0x5cc <bubbleSort+0x6c>
     5b4:	bd 01       	movw	r22, r26
     5b6:	cf 01       	movw	r24, r30
     5b8:	0e 94 a3 02 	call	0x546	; 0x546 <swap>
     5bc:	b3 01       	movw	r22, r6
     5be:	60 0f       	add	r22, r16
     5c0:	71 1f       	adc	r23, r17
     5c2:	c3 01       	movw	r24, r6
     5c4:	8e 0d       	add	r24, r14
     5c6:	9f 1d       	adc	r25, r15
     5c8:	0e 94 a3 02 	call	0x546	; 0x546 <swap>
     5cc:	21 96       	adiw	r28, 0x01	; 1
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <bubbleSort+0x74>
     5d0:	c0 e0       	ldi	r28, 0x00	; 0
     5d2:	d0 e0       	ldi	r29, 0x00	; 0
     5d4:	c4 01       	movw	r24, r8
     5d6:	8a 19       	sub	r24, r10
     5d8:	9b 09       	sbc	r25, r11
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	c8 17       	cp	r28, r24
     5de:	d9 07       	cpc	r29, r25
     5e0:	9c f2       	brlt	.-90     	; 0x588 <bubbleSort+0x28>
     5e2:	8f ef       	ldi	r24, 0xFF	; 255
     5e4:	a8 1a       	sub	r10, r24
     5e6:	b8 0a       	sbc	r11, r24
     5e8:	c4 01       	movw	r24, r8
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	a8 16       	cp	r10, r24
     5ee:	b9 06       	cpc	r11, r25
     5f0:	7c f3       	brlt	.-34     	; 0x5d0 <bubbleSort+0x70>
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	df 90       	pop	r13
     600:	cf 90       	pop	r12
     602:	bf 90       	pop	r11
     604:	af 90       	pop	r10
     606:	9f 90       	pop	r9
     608:	8f 90       	pop	r8
     60a:	7f 90       	pop	r7
     60c:	6f 90       	pop	r6
     60e:	08 95       	ret

00000610 <drive>:
<<<<<<< Updated upstream
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	83 e5       	ldi	r24, 0x53	; 83
     61a:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     61e:	01 e0       	ldi	r16, 0x01	; 1
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	1b c0       	rjmp	.+54     	; 0x65a <drive+0x4a>
     624:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lineType>
     628:	ec 01       	movw	r28, r24
     62a:	0e 94 b9 06 	call	0xd72	; 0xd72 <clear>
     62e:	ce 01       	movw	r24, r28
     630:	99 27       	eor	r25, r25
     632:	82 30       	cpi	r24, 0x02	; 2
     634:	91 05       	cpc	r25, r1
     636:	39 f0       	breq	.+14     	; 0x646 <drive+0x36>
     638:	1c f4       	brge	.+6      	; 0x640 <drive+0x30>
     63a:	89 2b       	or	r24, r25
     63c:	41 f0       	breq	.+16     	; 0x64e <drive+0x3e>
     63e:	0d c0       	rjmp	.+26     	; 0x65a <drive+0x4a>
     640:	09 97       	sbiw	r24, 0x09	; 9
     642:	4c f0       	brlt	.+18     	; 0x656 <drive+0x46>
     644:	0a c0       	rjmp	.+20     	; 0x65a <drive+0x4a>
     646:	8e e4       	ldi	r24, 0x4E	; 78
     648:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     64c:	06 c0       	rjmp	.+12     	; 0x65a <drive+0x4a>
     64e:	83 e5       	ldi	r24, 0x53	; 83
     650:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     654:	02 c0       	rjmp	.+4      	; 0x65a <drive+0x4a>
     656:	00 e0       	ldi	r16, 0x00	; 0
     658:	10 e0       	ldi	r17, 0x00	; 0
     65a:	01 15       	cp	r16, r1
     65c:	11 05       	cpc	r17, r1
     65e:	11 f7       	brne	.-60     	; 0x624 <drive+0x14>
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	08 95       	ret

0000066a <waitForTurn>:
     66a:	cf 93       	push	r28
     66c:	82 e3       	ldi	r24, 0x32	; 50
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 84 08 	call	0x1108	; 0x1108 <delay_ms>
     674:	03 c0       	rjmp	.+6      	; 0x67c <waitForTurn+0x12>
     676:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lineType>
     67a:	c8 2f       	mov	r28, r24
     67c:	c1 11       	cpse	r28, r1
     67e:	fb cf       	rjmp	.-10     	; 0x676 <waitForTurn+0xc>
     680:	8e e4       	ldi	r24, 0x4E	; 78
     682:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <turnRobot>:
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	c8 2f       	mov	r28, r24
     696:	8b 01       	movw	r16, r22
     698:	ee 24       	eor	r14, r14
     69a:	e3 94       	inc	r14
     69c:	f1 2c       	mov	r15, r1
     69e:	9a c0       	rjmp	.+308    	; 0x7d4 <turnRobot+0x14a>
     6a0:	f8 01       	movw	r30, r16
     6a2:	84 81       	ldd	r24, Z+4	; 0x04
     6a4:	8e 34       	cpi	r24, 0x4E	; 78
     6a6:	59 f0       	breq	.+22     	; 0x6be <turnRobot+0x34>
     6a8:	18 f4       	brcc	.+6      	; 0x6b0 <turnRobot+0x26>
     6aa:	85 34       	cpi	r24, 0x45	; 69
     6ac:	51 f1       	breq	.+84     	; 0x702 <turnRobot+0x78>
     6ae:	8c c0       	rjmp	.+280    	; 0x7c8 <turnRobot+0x13e>
     6b0:	83 35       	cpi	r24, 0x53	; 83
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <turnRobot+0x2c>
     6b4:	48 c0       	rjmp	.+144    	; 0x746 <turnRobot+0xbc>
     6b6:	87 35       	cpi	r24, 0x57	; 87
     6b8:	09 f4       	brne	.+2      	; 0x6bc <turnRobot+0x32>
     6ba:	66 c0       	rjmp	.+204    	; 0x788 <turnRobot+0xfe>
     6bc:	85 c0       	rjmp	.+266    	; 0x7c8 <turnRobot+0x13e>
     6be:	c5 34       	cpi	r28, 0x45	; 69
     6c0:	49 f4       	brne	.+18     	; 0x6d4 <turnRobot+0x4a>
     6c2:	82 e5       	ldi	r24, 0x52	; 82
     6c4:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     6c8:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     6cc:	85 e4       	ldi	r24, 0x45	; 69
     6ce:	f8 01       	movw	r30, r16
     6d0:	84 83       	std	Z+4, r24	; 0x04
     6d2:	7a c0       	rjmp	.+244    	; 0x7c8 <turnRobot+0x13e>
     6d4:	c7 35       	cpi	r28, 0x57	; 87
     6d6:	49 f4       	brne	.+18     	; 0x6ea <turnRobot+0x60>
     6d8:	8c e4       	ldi	r24, 0x4C	; 76
     6da:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     6de:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     6e2:	87 e5       	ldi	r24, 0x57	; 87
     6e4:	f8 01       	movw	r30, r16
     6e6:	84 83       	std	Z+4, r24	; 0x04
     6e8:	6f c0       	rjmp	.+222    	; 0x7c8 <turnRobot+0x13e>
     6ea:	c3 35       	cpi	r28, 0x53	; 83
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <turnRobot+0x66>
     6ee:	6c c0       	rjmp	.+216    	; 0x7c8 <turnRobot+0x13e>
     6f0:	84 e5       	ldi	r24, 0x54	; 84
     6f2:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     6f6:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     6fa:	83 e5       	ldi	r24, 0x53	; 83
     6fc:	f8 01       	movw	r30, r16
     6fe:	84 83       	std	Z+4, r24	; 0x04
     700:	63 c0       	rjmp	.+198    	; 0x7c8 <turnRobot+0x13e>
     702:	c3 35       	cpi	r28, 0x53	; 83
     704:	49 f4       	brne	.+18     	; 0x718 <turnRobot+0x8e>
     706:	82 e5       	ldi	r24, 0x52	; 82
     708:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     70c:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     710:	83 e5       	ldi	r24, 0x53	; 83
     712:	f8 01       	movw	r30, r16
     714:	84 83       	std	Z+4, r24	; 0x04
     716:	58 c0       	rjmp	.+176    	; 0x7c8 <turnRobot+0x13e>
     718:	c7 35       	cpi	r28, 0x57	; 87
     71a:	49 f4       	brne	.+18     	; 0x72e <turnRobot+0xa4>
     71c:	8c e4       	ldi	r24, 0x4C	; 76
     71e:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     722:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     726:	87 e5       	ldi	r24, 0x57	; 87
     728:	f8 01       	movw	r30, r16
     72a:	84 83       	std	Z+4, r24	; 0x04
     72c:	4d c0       	rjmp	.+154    	; 0x7c8 <turnRobot+0x13e>
     72e:	c3 35       	cpi	r28, 0x53	; 83
     730:	09 f0       	breq	.+2      	; 0x734 <turnRobot+0xaa>
     732:	4a c0       	rjmp	.+148    	; 0x7c8 <turnRobot+0x13e>
     734:	84 e5       	ldi	r24, 0x54	; 84
     736:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     73a:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     73e:	83 e5       	ldi	r24, 0x53	; 83
     740:	f8 01       	movw	r30, r16
     742:	84 83       	std	Z+4, r24	; 0x04
     744:	41 c0       	rjmp	.+130    	; 0x7c8 <turnRobot+0x13e>
     746:	c7 35       	cpi	r28, 0x57	; 87
     748:	49 f4       	brne	.+18     	; 0x75c <turnRobot+0xd2>
     74a:	82 e5       	ldi	r24, 0x52	; 82
     74c:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     750:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     754:	87 e5       	ldi	r24, 0x57	; 87
     756:	f8 01       	movw	r30, r16
     758:	84 83       	std	Z+4, r24	; 0x04
     75a:	36 c0       	rjmp	.+108    	; 0x7c8 <turnRobot+0x13e>
     75c:	c5 34       	cpi	r28, 0x45	; 69
     75e:	49 f4       	brne	.+18     	; 0x772 <turnRobot+0xe8>
     760:	8c e4       	ldi	r24, 0x4C	; 76
     762:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     766:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     76a:	85 e4       	ldi	r24, 0x45	; 69
     76c:	f8 01       	movw	r30, r16
     76e:	84 83       	std	Z+4, r24	; 0x04
     770:	2b c0       	rjmp	.+86     	; 0x7c8 <turnRobot+0x13e>
     772:	ce 34       	cpi	r28, 0x4E	; 78
     774:	49 f5       	brne	.+82     	; 0x7c8 <turnRobot+0x13e>
     776:	84 e5       	ldi	r24, 0x54	; 84
     778:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     77c:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     780:	8e e4       	ldi	r24, 0x4E	; 78
     782:	f8 01       	movw	r30, r16
     784:	84 83       	std	Z+4, r24	; 0x04
     786:	20 c0       	rjmp	.+64     	; 0x7c8 <turnRobot+0x13e>
     788:	ce 34       	cpi	r28, 0x4E	; 78
     78a:	49 f4       	brne	.+18     	; 0x79e <turnRobot+0x114>
     78c:	82 e5       	ldi	r24, 0x52	; 82
     78e:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     792:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     796:	8e e4       	ldi	r24, 0x4E	; 78
     798:	f8 01       	movw	r30, r16
     79a:	84 83       	std	Z+4, r24	; 0x04
     79c:	15 c0       	rjmp	.+42     	; 0x7c8 <turnRobot+0x13e>
     79e:	c3 35       	cpi	r28, 0x53	; 83
     7a0:	49 f4       	brne	.+18     	; 0x7b4 <turnRobot+0x12a>
     7a2:	8c e4       	ldi	r24, 0x4C	; 76
     7a4:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     7a8:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     7ac:	83 e5       	ldi	r24, 0x53	; 83
     7ae:	f8 01       	movw	r30, r16
     7b0:	84 83       	std	Z+4, r24	; 0x04
     7b2:	0a c0       	rjmp	.+20     	; 0x7c8 <turnRobot+0x13e>
     7b4:	c5 34       	cpi	r28, 0x45	; 69
     7b6:	41 f4       	brne	.+16     	; 0x7c8 <turnRobot+0x13e>
     7b8:	84 e5       	ldi	r24, 0x54	; 84
     7ba:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
     7be:	0e 94 35 03 	call	0x66a	; 0x66a <waitForTurn>
     7c2:	85 e4       	ldi	r24, 0x45	; 69
     7c4:	f8 01       	movw	r30, r16
     7c6:	84 83       	std	Z+4, r24	; 0x04
     7c8:	f8 01       	movw	r30, r16
     7ca:	84 81       	ldd	r24, Z+4	; 0x04
     7cc:	c8 13       	cpse	r28, r24
     7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <turnRobot+0x14a>
     7d0:	e1 2c       	mov	r14, r1
     7d2:	f1 2c       	mov	r15, r1
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	ef 16       	cp	r14, r31
     7d8:	f1 04       	cpc	r15, r1
     7da:	09 f4       	brne	.+2      	; 0x7de <turnRobot+0x154>
     7dc:	61 cf       	rjmp	.-318    	; 0x6a0 <turnRobot+0x16>
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	08 95       	ret

000007ea <moveX>:
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	fb 01       	movw	r30, r22
     7f4:	20 81       	ld	r18, Z
     7f6:	31 81       	ldd	r19, Z+1	; 0x01
     7f8:	28 17       	cp	r18, r24
     7fa:	39 07       	cpc	r19, r25
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     7fe:	eb 01       	movw	r28, r22
     800:	8c 01       	movw	r16, r24
     802:	28 17       	cp	r18, r24
     804:	39 07       	cpc	r19, r25
     806:	44 f4       	brge	.+16     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     808:	87 e5       	ldi	r24, 0x57	; 87
     80a:	0e 94 45 03 	call	0x68a	; 0x68a <turnRobot>
     80e:	88 81       	ld	r24, Y
     810:	99 81       	ldd	r25, Y+1	; 0x01
     812:	08 1b       	sub	r16, r24
     814:	19 0b       	sbc	r17, r25
     816:	09 c0       	rjmp	.+18     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     818:	85 e4       	ldi	r24, 0x45	; 69
     81a:	0e 94 45 03 	call	0x68a	; 0x68a <turnRobot>
     81e:	28 81       	ld	r18, Y
     820:	39 81       	ldd	r19, Y+1	; 0x01
     822:	c9 01       	movw	r24, r18
     824:	80 1b       	sub	r24, r16
     826:	91 0b       	sbc	r25, r17
     828:	8c 01       	movw	r16, r24
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	d0 e0       	ldi	r29, 0x00	; 0
     82e:	03 c0       	rjmp	.+6      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     830:	0e 94 08 03 	call	0x610	; 0x610 <drive>
     834:	21 96       	adiw	r28, 0x01	; 1
     836:	c0 17       	cp	r28, r16
     838:	d1 07       	cpc	r29, r17
     83a:	d4 f3       	brlt	.-12     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
=======



void drive(int junctions)
{
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	7c 01       	movw	r14, r24
	Junctions situatie;
	motorControl('S');
     61e:	83 e5       	ldi	r24, 0x53	; 83
     620:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
	int driving = 1;
	int count = 0;
     624:	00 e0       	ldi	r16, 0x00	; 0
     626:	10 e0       	ldi	r17, 0x00	; 0

void drive(int junctions)
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
     628:	c1 e0       	ldi	r28, 0x01	; 1
     62a:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;
	while(driving) {
     62c:	1a c0       	rjmp	.+52     	; 0x662 <drive+0x52>
		situatie = lineType();
     62e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lineType>
		//clear();
		switch (situatie) {
     632:	99 27       	eor	r25, r25
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	21 f0       	breq	.+8      	; 0x640 <drive+0x30>
     638:	03 97       	sbiw	r24, 0x03	; 3
     63a:	06 97       	sbiw	r24, 0x06	; 6
     63c:	28 f0       	brcs	.+10     	; 0x648 <drive+0x38>
     63e:	11 c0       	rjmp	.+34     	; 0x662 <drive+0x52>
			case Barcode: // end of parcour
			//motorControl('N');
			break;
			
			case Straight:
			motorControl('S');
     640:	83 e5       	ldi	r24, 0x53	; 83
     642:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
			break;
     646:	0d c0       	rjmp	.+26     	; 0x662 <drive+0x52>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
     648:	0f 5f       	subi	r16, 0xFF	; 255
     64a:	1f 4f       	sbci	r17, 0xFF	; 255
				motorControl('S');
     64c:	83 e5       	ldi	r24, 0x53	; 83
     64e:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
				if(count == junctions)
     652:	0e 15       	cp	r16, r14
     654:	1f 05       	cpc	r17, r15
     656:	29 f4       	brne	.+10     	; 0x662 <drive+0x52>
				{
					motorControl('N');
     658:	8e e4       	ldi	r24, 0x4E	; 78
     65a:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					driving = 0;
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
	int count = 0;
	while(driving) {
     662:	20 97       	sbiw	r28, 0x00	; 0
     664:	21 f7       	brne	.-56     	; 0x62e <drive+0x1e>
			
			
		}
		
	}
}
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	08 95       	ret

00000674 <waitForTurn>:

void waitForTurn()
{
     674:	cf 93       	push	r28
     676:	8f e0       	ldi	r24, 0x0F	; 15
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
     67e:	03 c0       	rjmp	.+6      	; 0x686 <waitForTurn+0x12>
	Junctions lijn;
	delay(15);
	while(lijn != Straight)
	{
		lijn  = lineType();
     680:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lineType>
     684:	c8 2f       	mov	r28, r24

void waitForTurn()
{
	Junctions lijn;
	delay(15);
	while(lijn != Straight)
     686:	c1 11       	cpse	r28, r1
     688:	fb cf       	rjmp	.-10     	; 0x680 <waitForTurn+0xc>
	{
		lijn  = lineType();
	}
	motorControl('N');
     68a:	8e e4       	ldi	r24, 0x4E	; 78
     68c:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
}
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <turnRobot>:

void turnRobot(char direction, piRobot *myRobot)
{
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	c8 2f       	mov	r28, r24
     6a0:	8b 01       	movw	r16, r22
    int changing = 1;
     6a2:	ee 24       	eor	r14, r14
     6a4:	e3 94       	inc	r14
     6a6:	f1 2c       	mov	r15, r1

    while(changing==1)
     6a8:	9a c0       	rjmp	.+308    	; 0x7de <turnRobot+0x14a>
    {
		
        switch(myRobot->direction)
     6aa:	f8 01       	movw	r30, r16
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	8e 34       	cpi	r24, 0x4E	; 78
     6b0:	59 f0       	breq	.+22     	; 0x6c8 <turnRobot+0x34>
     6b2:	18 f4       	brcc	.+6      	; 0x6ba <turnRobot+0x26>
     6b4:	85 34       	cpi	r24, 0x45	; 69
     6b6:	51 f1       	breq	.+84     	; 0x70c <turnRobot+0x78>
     6b8:	8c c0       	rjmp	.+280    	; 0x7d2 <turnRobot+0x13e>
     6ba:	83 35       	cpi	r24, 0x53	; 83
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <turnRobot+0x2c>
     6be:	48 c0       	rjmp	.+144    	; 0x750 <turnRobot+0xbc>
     6c0:	87 35       	cpi	r24, 0x57	; 87
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <turnRobot+0x32>
     6c4:	66 c0       	rjmp	.+204    	; 0x792 <turnRobot+0xfe>
     6c6:	85 c0       	rjmp	.+266    	; 0x7d2 <turnRobot+0x13e>
        {
            case 'N':
                if(direction == 'E')
     6c8:	c5 34       	cpi	r28, 0x45	; 69
     6ca:	49 f4       	brne	.+18     	; 0x6de <turnRobot+0x4a>
                {
                    motorControl('R');
     6cc:	82 e5       	ldi	r24, 0x52	; 82
     6ce:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     6d2:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'E';
     6d6:	85 e4       	ldi	r24, 0x45	; 69
     6d8:	f8 01       	movw	r30, r16
     6da:	84 83       	std	Z+4, r24	; 0x04
     6dc:	7a c0       	rjmp	.+244    	; 0x7d2 <turnRobot+0x13e>
                }
                else if(direction == 'W')
     6de:	c7 35       	cpi	r28, 0x57	; 87
     6e0:	49 f4       	brne	.+18     	; 0x6f4 <turnRobot+0x60>
                {
                    motorControl('L');
     6e2:	8c e4       	ldi	r24, 0x4C	; 76
     6e4:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     6e8:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'W';
     6ec:	87 e5       	ldi	r24, 0x57	; 87
     6ee:	f8 01       	movw	r30, r16
     6f0:	84 83       	std	Z+4, r24	; 0x04
     6f2:	6f c0       	rjmp	.+222    	; 0x7d2 <turnRobot+0x13e>
                }
                else if(direction == 'S')
     6f4:	c3 35       	cpi	r28, 0x53	; 83
     6f6:	09 f0       	breq	.+2      	; 0x6fa <turnRobot+0x66>
     6f8:	6c c0       	rjmp	.+216    	; 0x7d2 <turnRobot+0x13e>
                {
                    motorControl('T');
     6fa:	84 e5       	ldi	r24, 0x54	; 84
     6fc:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     700:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'S';
     704:	83 e5       	ldi	r24, 0x53	; 83
     706:	f8 01       	movw	r30, r16
     708:	84 83       	std	Z+4, r24	; 0x04
     70a:	63 c0       	rjmp	.+198    	; 0x7d2 <turnRobot+0x13e>
                }
                break;
            case 'E':
                if(direction == 'S')
     70c:	c3 35       	cpi	r28, 0x53	; 83
     70e:	49 f4       	brne	.+18     	; 0x722 <turnRobot+0x8e>
                {
                    motorControl('R');
     710:	82 e5       	ldi	r24, 0x52	; 82
     712:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     716:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'S';
     71a:	83 e5       	ldi	r24, 0x53	; 83
     71c:	f8 01       	movw	r30, r16
     71e:	84 83       	std	Z+4, r24	; 0x04
     720:	58 c0       	rjmp	.+176    	; 0x7d2 <turnRobot+0x13e>
                }
                else if(direction == 'W')
     722:	c7 35       	cpi	r28, 0x57	; 87
     724:	49 f4       	brne	.+18     	; 0x738 <turnRobot+0xa4>
                {
                    motorControl('L');
     726:	8c e4       	ldi	r24, 0x4C	; 76
     728:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     72c:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'W';
     730:	87 e5       	ldi	r24, 0x57	; 87
     732:	f8 01       	movw	r30, r16
     734:	84 83       	std	Z+4, r24	; 0x04
     736:	4d c0       	rjmp	.+154    	; 0x7d2 <turnRobot+0x13e>
                }
                else if(direction == 'S')
     738:	c3 35       	cpi	r28, 0x53	; 83
     73a:	09 f0       	breq	.+2      	; 0x73e <turnRobot+0xaa>
     73c:	4a c0       	rjmp	.+148    	; 0x7d2 <turnRobot+0x13e>
                {
                    motorControl('T');
     73e:	84 e5       	ldi	r24, 0x54	; 84
     740:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     744:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'S';
     748:	83 e5       	ldi	r24, 0x53	; 83
     74a:	f8 01       	movw	r30, r16
     74c:	84 83       	std	Z+4, r24	; 0x04
     74e:	41 c0       	rjmp	.+130    	; 0x7d2 <turnRobot+0x13e>
                }
                break;
            case 'S':
                if(direction == 'W')
     750:	c7 35       	cpi	r28, 0x57	; 87
     752:	49 f4       	brne	.+18     	; 0x766 <turnRobot+0xd2>
                {
                    motorControl('R');
     754:	82 e5       	ldi	r24, 0x52	; 82
     756:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     75a:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'W';
     75e:	87 e5       	ldi	r24, 0x57	; 87
     760:	f8 01       	movw	r30, r16
     762:	84 83       	std	Z+4, r24	; 0x04
     764:	36 c0       	rjmp	.+108    	; 0x7d2 <turnRobot+0x13e>
                }
                else if(direction == 'E')
     766:	c5 34       	cpi	r28, 0x45	; 69
     768:	49 f4       	brne	.+18     	; 0x77c <turnRobot+0xe8>
                {
                    motorControl('L');
     76a:	8c e4       	ldi	r24, 0x4C	; 76
     76c:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     770:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'E';
     774:	85 e4       	ldi	r24, 0x45	; 69
     776:	f8 01       	movw	r30, r16
     778:	84 83       	std	Z+4, r24	; 0x04
     77a:	2b c0       	rjmp	.+86     	; 0x7d2 <turnRobot+0x13e>
                }
                else if(direction == 'N')
     77c:	ce 34       	cpi	r28, 0x4E	; 78
     77e:	49 f5       	brne	.+82     	; 0x7d2 <turnRobot+0x13e>
                {
                    motorControl('T');
     780:	84 e5       	ldi	r24, 0x54	; 84
     782:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     786:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'N';
     78a:	8e e4       	ldi	r24, 0x4E	; 78
     78c:	f8 01       	movw	r30, r16
     78e:	84 83       	std	Z+4, r24	; 0x04
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <turnRobot+0x13e>
                }
                break;
            case 'W':
                if(direction == 'N')
     792:	ce 34       	cpi	r28, 0x4E	; 78
     794:	49 f4       	brne	.+18     	; 0x7a8 <turnRobot+0x114>
                {
					
                    motorControl('R');
     796:	82 e5       	ldi	r24, 0x52	; 82
     798:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     79c:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'N';
     7a0:	8e e4       	ldi	r24, 0x4E	; 78
     7a2:	f8 01       	movw	r30, r16
     7a4:	84 83       	std	Z+4, r24	; 0x04
     7a6:	15 c0       	rjmp	.+42     	; 0x7d2 <turnRobot+0x13e>
                }
                else if(direction == 'S')
     7a8:	c3 35       	cpi	r28, 0x53	; 83
     7aa:	49 f4       	brne	.+18     	; 0x7be <turnRobot+0x12a>
                {
                    motorControl('L');
     7ac:	8c e4       	ldi	r24, 0x4C	; 76
     7ae:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     7b2:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'S';
     7b6:	83 e5       	ldi	r24, 0x53	; 83
     7b8:	f8 01       	movw	r30, r16
     7ba:	84 83       	std	Z+4, r24	; 0x04
     7bc:	0a c0       	rjmp	.+20     	; 0x7d2 <turnRobot+0x13e>
                }
                else if(direction == 'E')
     7be:	c5 34       	cpi	r28, 0x45	; 69
     7c0:	41 f4       	brne	.+16     	; 0x7d2 <turnRobot+0x13e>
                {
                    motorControl('T');
     7c2:	84 e5       	ldi	r24, 0x54	; 84
     7c4:	0e 94 17 01 	call	0x22e	; 0x22e <motorControl>
					waitForTurn();
     7c8:	0e 94 3a 03 	call	0x674	; 0x674 <waitForTurn>
                    myRobot->direction = 'E';
     7cc:	85 e4       	ldi	r24, 0x45	; 69
     7ce:	f8 01       	movw	r30, r16
     7d0:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
		
				if(myRobot->direction == direction)
     7d2:	f8 01       	movw	r30, r16
     7d4:	84 81       	ldd	r24, Z+4	; 0x04
     7d6:	c8 13       	cpse	r28, r24
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <turnRobot+0x14a>
				{
					changing = 0;
     7da:	e1 2c       	mov	r14, r1
     7dc:	f1 2c       	mov	r15, r1

void turnRobot(char direction, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	ef 16       	cp	r14, r31
     7e2:	f1 04       	cpc	r15, r1
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <turnRobot+0x154>
     7e6:	61 cf       	rjmp	.-318    	; 0x6aa <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	ff 90       	pop	r15
     7f0:	ef 90       	pop	r14
     7f2:	08 95       	ret

000007f4 <moveX>:


void moveX(int orderPos, piRobot *robot)
{
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
	
    int junctions;
	
	
    if(robot->posX != orderPos)
     7fc:	fb 01       	movw	r30, r22
     7fe:	20 81       	ld	r18, Z
     800:	31 81       	ldd	r19, Z+1	; 0x01
     802:	28 17       	cp	r18, r24
     804:	39 07       	cpc	r19, r25
     806:	d1 f0       	breq	.+52     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     808:	8b 01       	movw	r16, r22
     80a:	ec 01       	movw	r28, r24
    {
		
        if(robot->posX < orderPos)
     80c:	28 17       	cp	r18, r24
     80e:	39 07       	cpc	r19, r25
     810:	5c f4       	brge	.+22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
        {
            turnRobot('W', robot);
     812:	87 e5       	ldi	r24, 0x57	; 87
     814:	0e 94 4a 03 	call	0x694	; 0x694 <turnRobot>
            junctions = orderPos-robot->posX;
     818:	f8 01       	movw	r30, r16
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	9e 01       	movw	r18, r28
     820:	28 1b       	sub	r18, r24
     822:	39 0b       	sbc	r19, r25
     824:	c9 01       	movw	r24, r18
     826:	08 c0       	rjmp	.+16     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
        }
        else{
            turnRobot('E', robot);
     828:	85 e4       	ldi	r24, 0x45	; 69
     82a:	0e 94 4a 03 	call	0x694	; 0x694 <turnRobot>
            junctions = robot->posX - orderPos;
     82e:	f8 01       	movw	r30, r16
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	8c 1b       	sub	r24, r28
     836:	9d 0b       	sbc	r25, r29
        }

        
		drive(junctions);
     838:	0e 94 08 03 	call	0x610	; 0x610 <drive>
        

    }
}
>>>>>>> Stashed changes
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	08 95       	ret

00000846 <moveY>:
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	fb 01       	movw	r30, r22
     850:	22 81       	ldd	r18, Z+2	; 0x02
     852:	33 81       	ldd	r19, Z+3	; 0x03
     854:	28 17       	cp	r18, r24
     856:	39 07       	cpc	r19, r25
<<<<<<< Updated upstream
     858:	f9 f0       	breq	.+62     	; 0x898 <moveY+0x52>
     85a:	eb 01       	movw	r28, r22
     85c:	8c 01       	movw	r16, r24
     85e:	28 17       	cp	r18, r24
     860:	39 07       	cpc	r19, r25
     862:	44 f4       	brge	.+16     	; 0x874 <moveY+0x2e>
     864:	8e e4       	ldi	r24, 0x4E	; 78
     866:	0e 94 45 03 	call	0x68a	; 0x68a <turnRobot>
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	9b 81       	ldd	r25, Y+3	; 0x03
     86e:	08 1b       	sub	r16, r24
     870:	19 0b       	sbc	r17, r25
     872:	09 c0       	rjmp	.+18     	; 0x886 <moveY+0x40>
     874:	83 e5       	ldi	r24, 0x53	; 83
     876:	0e 94 45 03 	call	0x68a	; 0x68a <turnRobot>
     87a:	2a 81       	ldd	r18, Y+2	; 0x02
     87c:	3b 81       	ldd	r19, Y+3	; 0x03
     87e:	c9 01       	movw	r24, r18
     880:	80 1b       	sub	r24, r16
     882:	91 0b       	sbc	r25, r17
     884:	8c 01       	movw	r16, r24
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	03 c0       	rjmp	.+6      	; 0x892 <moveY+0x4c>
     88c:	0e 94 08 03 	call	0x610	; 0x610 <drive>
     890:	21 96       	adiw	r28, 0x01	; 1
     892:	c0 17       	cp	r28, r16
     894:	d1 07       	cpc	r29, r17
     896:	d4 f3       	brlt	.-12     	; 0x88c <moveY+0x46>
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	08 95       	ret

000008a2 <warehouse>:
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	69 97       	sbiw	r28, 0x19	; 25
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	87 e5       	ldi	r24, 0x57	; 87
     8c0:	8d 83       	std	Y+5, r24	; 0x05
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	9a 83       	std	Y+2, r25	; 0x02
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	1c 82       	std	Y+4, r1	; 0x04
     8cc:	1b 82       	std	Y+3, r1	; 0x03
     8ce:	8a e0       	ldi	r24, 0x0A	; 10
     8d0:	ea e0       	ldi	r30, 0x0A	; 10
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	de 01       	movw	r26, r28
     8d6:	16 96       	adiw	r26, 0x06	; 6
     8d8:	01 90       	ld	r0, Z+
     8da:	0d 92       	st	X+, r0
     8dc:	8a 95       	dec	r24
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <warehouse+0x36>
     8e0:	8a e0       	ldi	r24, 0x0A	; 10
     8e2:	e4 e1       	ldi	r30, 0x14	; 20
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	de 01       	movw	r26, r28
     8e8:	50 96       	adiw	r26, 0x10	; 16
     8ea:	01 90       	ld	r0, Z+
     8ec:	0d 92       	st	X+, r0
     8ee:	8a 95       	dec	r24
     8f0:	e1 f7       	brne	.-8      	; 0x8ea <warehouse+0x48>
     8f2:	45 e0       	ldi	r20, 0x05	; 5
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	be 01       	movw	r22, r28
     8f8:	60 5f       	subi	r22, 0xF0	; 240
     8fa:	7f 4f       	sbci	r23, 0xFF	; 255
     8fc:	ce 01       	movw	r24, r28
     8fe:	06 96       	adiw	r24, 0x06	; 6
     900:	0e 94 b0 02 	call	0x560	; 0x560 <bubbleSort>
     904:	e1 2c       	mov	r14, r1
     906:	f1 2c       	mov	r15, r1
     908:	3b c0       	rjmp	.+118    	; 0x980 <__stack+0x81>
     90a:	87 01       	movw	r16, r14
     90c:	00 0f       	add	r16, r16
     90e:	11 1f       	adc	r17, r17
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	8c 0f       	add	r24, r28
     916:	9d 1f       	adc	r25, r29
     918:	08 0f       	add	r16, r24
     91a:	19 1f       	adc	r17, r25
     91c:	bc 01       	movw	r22, r24
     91e:	f8 01       	movw	r30, r16
     920:	85 81       	ldd	r24, Z+5	; 0x05
     922:	96 81       	ldd	r25, Z+6	; 0x06
     924:	0e 94 f5 03 	call	0x7ea	; 0x7ea <moveX>
     928:	f8 01       	movw	r30, r16
     92a:	85 81       	ldd	r24, Z+5	; 0x05
     92c:	96 81       	ldd	r25, Z+6	; 0x06
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	be 01       	movw	r22, r28
     934:	6f 5f       	subi	r22, 0xFF	; 255
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	87 85       	ldd	r24, Z+15	; 0x0f
     93a:	90 89       	ldd	r25, Z+16	; 0x10
     93c:	0e 94 23 04 	call	0x846	; 0x846 <moveY>
     940:	f8 01       	movw	r30, r16
     942:	87 85       	ldd	r24, Z+15	; 0x0f
     944:	90 89       	ldd	r25, Z+16	; 0x10
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	8b 83       	std	Y+3, r24	; 0x03
     94a:	88 ee       	ldi	r24, 0xE8	; 232
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	0e 94 84 08 	call	0x1108	; 0x1108 <delay_ms>
     952:	0e 94 54 00 	call	0xa8	; 0xa8 <batteryPercentage>
     956:	9c 01       	movw	r18, r24
     958:	c7 01       	movw	r24, r14
     95a:	65 e0       	ldi	r22, 0x05	; 5
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divmodhi4>
     962:	cb 01       	movw	r24, r22
     964:	42 e0       	ldi	r20, 0x02	; 2
     966:	b9 01       	movw	r22, r18
     968:	24 e6       	ldi	r18, 0x64	; 100
     96a:	fc 01       	movw	r30, r24
     96c:	2e 9f       	mul	r18, r30
     96e:	c0 01       	movw	r24, r0
     970:	2f 9f       	mul	r18, r31
     972:	90 0d       	add	r25, r0
     974:	11 24       	eor	r1, r1
     976:	0e 94 5c 00 	call	0xb8	; 0xb8 <updateDisplay>
     97a:	ff ef       	ldi	r31, 0xFF	; 255
     97c:	ef 1a       	sub	r14, r31
     97e:	ff 0a       	sbc	r15, r31
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	e8 16       	cp	r14, r24
     984:	f1 04       	cpc	r15, r1
     986:	0c f2       	brlt	.-126    	; 0x90a <__stack+0xb>
     988:	be 01       	movw	r22, r28
     98a:	6f 5f       	subi	r22, 0xFF	; 255
     98c:	7f 4f       	sbci	r23, 0xFF	; 255
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 23 04 	call	0x846	; 0x846 <moveY>
     996:	be 01       	movw	r22, r28
     998:	6f 5f       	subi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <moveX>
     9a4:	69 96       	adiw	r28, 0x19	; 25
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	08 95       	ret
=======
     858:	d1 f0       	breq	.+52     	; 0x88e <moveY+0x48>
     85a:	8b 01       	movw	r16, r22
     85c:	ec 01       	movw	r28, r24
    {
        if(robot->posY < orderPos)
     85e:	28 17       	cp	r18, r24
     860:	39 07       	cpc	r19, r25
     862:	5c f4       	brge	.+22     	; 0x87a <moveY+0x34>
        {
            turnRobot('N', robot);
     864:	8e e4       	ldi	r24, 0x4E	; 78
     866:	0e 94 4a 03 	call	0x694	; 0x694 <turnRobot>
            junctions = orderPos-robot->posY;
     86a:	f8 01       	movw	r30, r16
     86c:	82 81       	ldd	r24, Z+2	; 0x02
     86e:	93 81       	ldd	r25, Z+3	; 0x03
     870:	9e 01       	movw	r18, r28
     872:	28 1b       	sub	r18, r24
     874:	39 0b       	sbc	r19, r25
     876:	c9 01       	movw	r24, r18
     878:	08 c0       	rjmp	.+16     	; 0x88a <moveY+0x44>
        }
        else{
            turnRobot('S', robot);
     87a:	83 e5       	ldi	r24, 0x53	; 83
     87c:	0e 94 4a 03 	call	0x694	; 0x694 <turnRobot>
            junctions = robot->posY - orderPos;
     880:	f8 01       	movw	r30, r16
     882:	82 81       	ldd	r24, Z+2	; 0x02
     884:	93 81       	ldd	r25, Z+3	; 0x03
     886:	8c 1b       	sub	r24, r28
     888:	9d 0b       	sbc	r25, r29
        }

            drive(junctions);
     88a:	0e 94 08 03 	call	0x610	; 0x610 <drive>
        

    }
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	08 95       	ret

00000898 <warehouse>:


void warehouse(void)
{
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	69 97       	sbiw	r28, 0x19	; 25
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
 piRobot robot;
 robot.direction = 'W';
     8bc:	87 e5       	ldi	r24, 0x57	; 87
     8be:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = -1;
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	9f ef       	ldi	r25, 0xFF	; 255
     8c4:	9a 83       	std	Y+2, r25	; 0x02
     8c6:	89 83       	std	Y+1, r24	; 0x01
 robot.posY = 0;
     8c8:	1c 82       	std	Y+4, r1	; 0x04
     8ca:	1b 82       	std	Y+3, r1	; 0x03
//int orderX[] = getWixel("posX");
//int orderY[] = getWixel("posY");

    int orderX[] = {0,3,1,2,4};
     8cc:	8a e0       	ldi	r24, 0x0A	; 10
     8ce:	ea e0       	ldi	r30, 0x0A	; 10
     8d0:	f1 e0       	ldi	r31, 0x01	; 1
     8d2:	de 01       	movw	r26, r28
     8d4:	16 96       	adiw	r26, 0x06	; 6
     8d6:	01 90       	ld	r0, Z+
     8d8:	0d 92       	st	X+, r0
     8da:	8a 95       	dec	r24
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <warehouse+0x3e>
    int orderY[] = {1,2,3,3,4};
     8de:	8a e0       	ldi	r24, 0x0A	; 10
     8e0:	e4 e1       	ldi	r30, 0x14	; 20
     8e2:	f1 e0       	ldi	r31, 0x01	; 1
     8e4:	de 01       	movw	r26, r28
     8e6:	50 96       	adiw	r26, 0x10	; 16
     8e8:	01 90       	ld	r0, Z+
     8ea:	0d 92       	st	X+, r0
     8ec:	8a 95       	dec	r24
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <warehouse+0x50>

    int arrayGrootte = sizeof(orderX) / sizeof(orderX[0]);
    bubbleSort(orderX, orderY, arrayGrootte);
     8f0:	45 e0       	ldi	r20, 0x05	; 5
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	be 01       	movw	r22, r28
     8f6:	60 5f       	subi	r22, 0xF0	; 240
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	ce 01       	movw	r24, r28
     8fc:	06 96       	adiw	r24, 0x06	; 6
     8fe:	0e 94 b0 02 	call	0x560	; 0x560 <bubbleSort>
	
	
	 //motorControl('S');
	//drive();
	
    for(int locaties = 0; locaties<arrayGrootte;locaties++)
     902:	e1 2c       	mov	r14, r1
     904:	f1 2c       	mov	r15, r1
     906:	49 c0       	rjmp	.+146    	; 0x99a <__stack+0x9b>
    {
		float completed = locaties;
     908:	b7 01       	movw	r22, r14
     90a:	0f 2c       	mov	r0, r15
     90c:	00 0c       	add	r0, r0
     90e:	88 0b       	sbc	r24, r24
     910:	99 0b       	sbc	r25, r25
     912:	0e 94 9b 05 	call	0xb36	; 0xb36 <__floatsisf>
     916:	4b 01       	movw	r8, r22
     918:	5c 01       	movw	r10, r24
		float total = arrayGrootte;
		
		
        moveX(orderX[locaties], &robot);
     91a:	87 01       	movw	r16, r14
     91c:	00 0f       	add	r16, r16
     91e:	11 1f       	adc	r17, r17
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	8c 0f       	add	r24, r28
     926:	9d 1f       	adc	r25, r29
     928:	08 0f       	add	r16, r24
     92a:	19 1f       	adc	r17, r25
     92c:	bc 01       	movw	r22, r24
     92e:	f8 01       	movw	r30, r16
     930:	85 81       	ldd	r24, Z+5	; 0x05
     932:	96 81       	ldd	r25, Z+6	; 0x06
     934:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <moveX>
		robot.posX = orderX[locaties];
     938:	f8 01       	movw	r30, r16
     93a:	85 81       	ldd	r24, Z+5	; 0x05
     93c:	96 81       	ldd	r25, Z+6	; 0x06
     93e:	9a 83       	std	Y+2, r25	; 0x02
     940:	89 83       	std	Y+1, r24	; 0x01
        moveY(orderY[locaties], &robot);
     942:	be 01       	movw	r22, r28
     944:	6f 5f       	subi	r22, 0xFF	; 255
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	87 85       	ldd	r24, Z+15	; 0x0f
     94a:	90 89       	ldd	r25, Z+16	; 0x10
     94c:	0e 94 23 04 	call	0x846	; 0x846 <moveY>
		robot.posY = orderY[locaties];
     950:	f8 01       	movw	r30, r16
     952:	87 85       	ldd	r24, Z+15	; 0x0f
     954:	90 89       	ldd	r25, Z+16	; 0x10
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	8b 83       	std	Y+3, r24	; 0x03
     95a:	88 ee       	ldi	r24, 0xE8	; 232
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
        delay(1000);//wait 1 second
		
        updateDisplay(((completed/total)*100),batteryPercentage(),logicsBot);
     962:	0e 94 54 00 	call	0xa8	; 0xa8 <batteryPercentage>
     966:	8c 01       	movw	r16, r24
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	40 ea       	ldi	r20, 0xA0	; 160
     96e:	50 e4       	ldi	r21, 0x40	; 64
     970:	c5 01       	movw	r24, r10
     972:	b4 01       	movw	r22, r8
     974:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__divsf3>
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	48 ec       	ldi	r20, 0xC8	; 200
     97e:	52 e4       	ldi	r21, 0x42	; 66
     980:	0e 94 27 06 	call	0xc4e	; 0xc4e <__mulsf3>
     984:	0e 94 63 05 	call	0xac6	; 0xac6 <__fixsfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	42 e0       	ldi	r20, 0x02	; 2
     98e:	b8 01       	movw	r22, r16
     990:	0e 94 5c 00 	call	0xb8	; 0xb8 <updateDisplay>
	
	
	 //motorControl('S');
	//drive();
	
    for(int locaties = 0; locaties<arrayGrootte;locaties++)
     994:	ff ef       	ldi	r31, 0xFF	; 255
     996:	ef 1a       	sub	r14, r31
     998:	ff 0a       	sbc	r15, r31
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	e8 16       	cp	r14, r24
     99e:	f1 04       	cpc	r15, r1
     9a0:	0c f4       	brge	.+2      	; 0x9a4 <__stack+0xa5>
     9a2:	b2 cf       	rjmp	.-156    	; 0x908 <__stack+0x9>
		robot.posY = orderY[locaties];
        delay(1000);//wait 1 second
		
        updateDisplay(((completed/total)*100),batteryPercentage(),logicsBot);
    }
    moveY(0, &robot);
     9a4:	be 01       	movw	r22, r28
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 23 04 	call	0x846	; 0x846 <moveY>
    moveX(0, &robot);
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <moveX>
    //goHome();
}
     9c0:	69 96       	adiw	r28, 0x19	; 25
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	9f 90       	pop	r9
     9de:	8f 90       	pop	r8
     9e0:	08 95       	ret
>>>>>>> Stashed changes

000009e2 <__divsf3>:
     9e2:	0e 94 05 05 	call	0xa0a	; 0xa0a <__divsf3x>
     9e6:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_round>
     9ea:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fp_pscB>
     9ee:	58 f0       	brcs	.+22     	; 0xa06 <__divsf3+0x24>
     9f0:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fp_pscA>
     9f4:	40 f0       	brcs	.+16     	; 0xa06 <__divsf3+0x24>
     9f6:	29 f4       	brne	.+10     	; 0xa02 <__divsf3+0x20>
     9f8:	5f 3f       	cpi	r21, 0xFF	; 255
     9fa:	29 f0       	breq	.+10     	; 0xa06 <__divsf3+0x24>
     9fc:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_inf>
     a00:	51 11       	cpse	r21, r1
     a02:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_szero>
     a06:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_nan>

00000a0a <__divsf3x>:
     a0a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_split3>
     a0e:	68 f3       	brcs	.-38     	; 0x9ea <__divsf3+0x8>

00000a10 <__divsf3_pse>:
     a10:	99 23       	and	r25, r25
     a12:	b1 f3       	breq	.-20     	; 0xa00 <__divsf3+0x1e>
     a14:	55 23       	and	r21, r21
     a16:	91 f3       	breq	.-28     	; 0x9fc <__divsf3+0x1a>
     a18:	95 1b       	sub	r25, r21
     a1a:	55 0b       	sbc	r21, r21
     a1c:	bb 27       	eor	r27, r27
     a1e:	aa 27       	eor	r26, r26
     a20:	62 17       	cp	r22, r18
     a22:	73 07       	cpc	r23, r19
     a24:	84 07       	cpc	r24, r20
     a26:	38 f0       	brcs	.+14     	; 0xa36 <__divsf3_pse+0x26>
     a28:	9f 5f       	subi	r25, 0xFF	; 255
     a2a:	5f 4f       	sbci	r21, 0xFF	; 255
     a2c:	22 0f       	add	r18, r18
     a2e:	33 1f       	adc	r19, r19
     a30:	44 1f       	adc	r20, r20
     a32:	aa 1f       	adc	r26, r26
     a34:	a9 f3       	breq	.-22     	; 0xa20 <__divsf3_pse+0x10>
     a36:	35 d0       	rcall	.+106    	; 0xaa2 <__divsf3_pse+0x92>
     a38:	0e 2e       	mov	r0, r30
     a3a:	3a f0       	brmi	.+14     	; 0xa4a <__divsf3_pse+0x3a>
     a3c:	e0 e8       	ldi	r30, 0x80	; 128
     a3e:	32 d0       	rcall	.+100    	; 0xaa4 <__divsf3_pse+0x94>
     a40:	91 50       	subi	r25, 0x01	; 1
     a42:	50 40       	sbci	r21, 0x00	; 0
     a44:	e6 95       	lsr	r30
     a46:	00 1c       	adc	r0, r0
     a48:	ca f7       	brpl	.-14     	; 0xa3c <__divsf3_pse+0x2c>
     a4a:	2b d0       	rcall	.+86     	; 0xaa2 <__divsf3_pse+0x92>
     a4c:	fe 2f       	mov	r31, r30
     a4e:	29 d0       	rcall	.+82     	; 0xaa2 <__divsf3_pse+0x92>
     a50:	66 0f       	add	r22, r22
     a52:	77 1f       	adc	r23, r23
     a54:	88 1f       	adc	r24, r24
     a56:	bb 1f       	adc	r27, r27
     a58:	26 17       	cp	r18, r22
     a5a:	37 07       	cpc	r19, r23
     a5c:	48 07       	cpc	r20, r24
     a5e:	ab 07       	cpc	r26, r27
     a60:	b0 e8       	ldi	r27, 0x80	; 128
     a62:	09 f0       	breq	.+2      	; 0xa66 <__divsf3_pse+0x56>
     a64:	bb 0b       	sbc	r27, r27
     a66:	80 2d       	mov	r24, r0
     a68:	bf 01       	movw	r22, r30
     a6a:	ff 27       	eor	r31, r31
     a6c:	93 58       	subi	r25, 0x83	; 131
     a6e:	5f 4f       	sbci	r21, 0xFF	; 255
     a70:	3a f0       	brmi	.+14     	; 0xa80 <__divsf3_pse+0x70>
     a72:	9e 3f       	cpi	r25, 0xFE	; 254
     a74:	51 05       	cpc	r21, r1
     a76:	78 f0       	brcs	.+30     	; 0xa96 <__divsf3_pse+0x86>
     a78:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_inf>
     a7c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_szero>
     a80:	5f 3f       	cpi	r21, 0xFF	; 255
     a82:	e4 f3       	brlt	.-8      	; 0xa7c <__divsf3_pse+0x6c>
     a84:	98 3e       	cpi	r25, 0xE8	; 232
     a86:	d4 f3       	brlt	.-12     	; 0xa7c <__divsf3_pse+0x6c>
     a88:	86 95       	lsr	r24
     a8a:	77 95       	ror	r23
     a8c:	67 95       	ror	r22
     a8e:	b7 95       	ror	r27
     a90:	f7 95       	ror	r31
     a92:	9f 5f       	subi	r25, 0xFF	; 255
     a94:	c9 f7       	brne	.-14     	; 0xa88 <__divsf3_pse+0x78>
     a96:	88 0f       	add	r24, r24
     a98:	91 1d       	adc	r25, r1
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	97 f9       	bld	r25, 7
     aa0:	08 95       	ret
     aa2:	e1 e0       	ldi	r30, 0x01	; 1
     aa4:	66 0f       	add	r22, r22
     aa6:	77 1f       	adc	r23, r23
     aa8:	88 1f       	adc	r24, r24
     aaa:	bb 1f       	adc	r27, r27
     aac:	62 17       	cp	r22, r18
     aae:	73 07       	cpc	r23, r19
     ab0:	84 07       	cpc	r24, r20
     ab2:	ba 07       	cpc	r27, r26
     ab4:	20 f0       	brcs	.+8      	; 0xabe <__divsf3_pse+0xae>
     ab6:	62 1b       	sub	r22, r18
     ab8:	73 0b       	sbc	r23, r19
     aba:	84 0b       	sbc	r24, r20
     abc:	ba 0b       	sbc	r27, r26
     abe:	ee 1f       	adc	r30, r30
     ac0:	88 f7       	brcc	.-30     	; 0xaa4 <__divsf3_pse+0x94>
     ac2:	e0 95       	com	r30
     ac4:	08 95       	ret

00000ac6 <__fixsfsi>:
     ac6:	0e 94 6a 05 	call	0xad4	; 0xad4 <__fixunssfsi>
     aca:	68 94       	set
     acc:	b1 11       	cpse	r27, r1
     ace:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_szero>
     ad2:	08 95       	ret

00000ad4 <__fixunssfsi>:
     ad4:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_splitA>
     ad8:	88 f0       	brcs	.+34     	; 0xafc <__fixunssfsi+0x28>
     ada:	9f 57       	subi	r25, 0x7F	; 127
     adc:	98 f0       	brcs	.+38     	; 0xb04 <__fixunssfsi+0x30>
     ade:	b9 2f       	mov	r27, r25
     ae0:	99 27       	eor	r25, r25
     ae2:	b7 51       	subi	r27, 0x17	; 23
     ae4:	b0 f0       	brcs	.+44     	; 0xb12 <__fixunssfsi+0x3e>
     ae6:	e1 f0       	breq	.+56     	; 0xb20 <__fixunssfsi+0x4c>
     ae8:	66 0f       	add	r22, r22
     aea:	77 1f       	adc	r23, r23
     aec:	88 1f       	adc	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	1a f0       	brmi	.+6      	; 0xaf8 <__fixunssfsi+0x24>
     af2:	ba 95       	dec	r27
     af4:	c9 f7       	brne	.-14     	; 0xae8 <__fixunssfsi+0x14>
     af6:	14 c0       	rjmp	.+40     	; 0xb20 <__fixunssfsi+0x4c>
     af8:	b1 30       	cpi	r27, 0x01	; 1
     afa:	91 f0       	breq	.+36     	; 0xb20 <__fixunssfsi+0x4c>
     afc:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_zero>
     b00:	b1 e0       	ldi	r27, 0x01	; 1
     b02:	08 95       	ret
     b04:	0c 94 20 06 	jmp	0xc40	; 0xc40 <__fp_zero>
     b08:	67 2f       	mov	r22, r23
     b0a:	78 2f       	mov	r23, r24
     b0c:	88 27       	eor	r24, r24
     b0e:	b8 5f       	subi	r27, 0xF8	; 248
     b10:	39 f0       	breq	.+14     	; 0xb20 <__fixunssfsi+0x4c>
     b12:	b9 3f       	cpi	r27, 0xF9	; 249
     b14:	cc f3       	brlt	.-14     	; 0xb08 <__fixunssfsi+0x34>
     b16:	86 95       	lsr	r24
     b18:	77 95       	ror	r23
     b1a:	67 95       	ror	r22
     b1c:	b3 95       	inc	r27
     b1e:	d9 f7       	brne	.-10     	; 0xb16 <__fixunssfsi+0x42>
     b20:	3e f4       	brtc	.+14     	; 0xb30 <__fixunssfsi+0x5c>
     b22:	90 95       	com	r25
     b24:	80 95       	com	r24
     b26:	70 95       	com	r23
     b28:	61 95       	neg	r22
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8f 4f       	sbci	r24, 0xFF	; 255
     b2e:	9f 4f       	sbci	r25, 0xFF	; 255
     b30:	08 95       	ret

00000b32 <__floatunsisf>:
     b32:	e8 94       	clt
     b34:	09 c0       	rjmp	.+18     	; 0xb48 <__floatsisf+0x12>

00000b36 <__floatsisf>:
     b36:	97 fb       	bst	r25, 7
     b38:	3e f4       	brtc	.+14     	; 0xb48 <__floatsisf+0x12>
     b3a:	90 95       	com	r25
     b3c:	80 95       	com	r24
     b3e:	70 95       	com	r23
     b40:	61 95       	neg	r22
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	8f 4f       	sbci	r24, 0xFF	; 255
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	99 23       	and	r25, r25
     b4a:	a9 f0       	breq	.+42     	; 0xb76 <__floatsisf+0x40>
     b4c:	f9 2f       	mov	r31, r25
     b4e:	96 e9       	ldi	r25, 0x96	; 150
     b50:	bb 27       	eor	r27, r27
     b52:	93 95       	inc	r25
     b54:	f6 95       	lsr	r31
     b56:	87 95       	ror	r24
     b58:	77 95       	ror	r23
     b5a:	67 95       	ror	r22
     b5c:	b7 95       	ror	r27
     b5e:	f1 11       	cpse	r31, r1
     b60:	f8 cf       	rjmp	.-16     	; 0xb52 <__floatsisf+0x1c>
     b62:	fa f4       	brpl	.+62     	; 0xba2 <__floatsisf+0x6c>
     b64:	bb 0f       	add	r27, r27
     b66:	11 f4       	brne	.+4      	; 0xb6c <__floatsisf+0x36>
     b68:	60 ff       	sbrs	r22, 0
     b6a:	1b c0       	rjmp	.+54     	; 0xba2 <__floatsisf+0x6c>
     b6c:	6f 5f       	subi	r22, 0xFF	; 255
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	8f 4f       	sbci	r24, 0xFF	; 255
     b72:	9f 4f       	sbci	r25, 0xFF	; 255
     b74:	16 c0       	rjmp	.+44     	; 0xba2 <__floatsisf+0x6c>
     b76:	88 23       	and	r24, r24
     b78:	11 f0       	breq	.+4      	; 0xb7e <__floatsisf+0x48>
     b7a:	96 e9       	ldi	r25, 0x96	; 150
     b7c:	11 c0       	rjmp	.+34     	; 0xba0 <__floatsisf+0x6a>
     b7e:	77 23       	and	r23, r23
     b80:	21 f0       	breq	.+8      	; 0xb8a <__floatsisf+0x54>
     b82:	9e e8       	ldi	r25, 0x8E	; 142
     b84:	87 2f       	mov	r24, r23
     b86:	76 2f       	mov	r23, r22
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <__floatsisf+0x5e>
     b8a:	66 23       	and	r22, r22
     b8c:	71 f0       	breq	.+28     	; 0xbaa <__floatsisf+0x74>
     b8e:	96 e8       	ldi	r25, 0x86	; 134
     b90:	86 2f       	mov	r24, r22
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	2a f0       	brmi	.+10     	; 0xba2 <__floatsisf+0x6c>
     b98:	9a 95       	dec	r25
     b9a:	66 0f       	add	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	88 1f       	adc	r24, r24
     ba0:	da f7       	brpl	.-10     	; 0xb98 <__floatsisf+0x62>
     ba2:	88 0f       	add	r24, r24
     ba4:	96 95       	lsr	r25
     ba6:	87 95       	ror	r24
     ba8:	97 f9       	bld	r25, 7
     baa:	08 95       	ret

00000bac <__fp_inf>:
     bac:	97 f9       	bld	r25, 7
     bae:	9f 67       	ori	r25, 0x7F	; 127
     bb0:	80 e8       	ldi	r24, 0x80	; 128
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	08 95       	ret

00000bb8 <__fp_nan>:
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	80 ec       	ldi	r24, 0xC0	; 192
     bbc:	08 95       	ret

00000bbe <__fp_pscA>:
     bbe:	00 24       	eor	r0, r0
     bc0:	0a 94       	dec	r0
     bc2:	16 16       	cp	r1, r22
     bc4:	17 06       	cpc	r1, r23
     bc6:	18 06       	cpc	r1, r24
     bc8:	09 06       	cpc	r0, r25
     bca:	08 95       	ret

00000bcc <__fp_pscB>:
     bcc:	00 24       	eor	r0, r0
     bce:	0a 94       	dec	r0
     bd0:	12 16       	cp	r1, r18
     bd2:	13 06       	cpc	r1, r19
     bd4:	14 06       	cpc	r1, r20
     bd6:	05 06       	cpc	r0, r21
     bd8:	08 95       	ret

00000bda <__fp_round>:
     bda:	09 2e       	mov	r0, r25
     bdc:	03 94       	inc	r0
     bde:	00 0c       	add	r0, r0
     be0:	11 f4       	brne	.+4      	; 0xbe6 <__fp_round+0xc>
     be2:	88 23       	and	r24, r24
     be4:	52 f0       	brmi	.+20     	; 0xbfa <__fp_round+0x20>
     be6:	bb 0f       	add	r27, r27
     be8:	40 f4       	brcc	.+16     	; 0xbfa <__fp_round+0x20>
     bea:	bf 2b       	or	r27, r31
     bec:	11 f4       	brne	.+4      	; 0xbf2 <__fp_round+0x18>
     bee:	60 ff       	sbrs	r22, 0
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <__fp_round+0x20>
     bf2:	6f 5f       	subi	r22, 0xFF	; 255
     bf4:	7f 4f       	sbci	r23, 0xFF	; 255
     bf6:	8f 4f       	sbci	r24, 0xFF	; 255
     bf8:	9f 4f       	sbci	r25, 0xFF	; 255
     bfa:	08 95       	ret

00000bfc <__fp_split3>:
     bfc:	57 fd       	sbrc	r21, 7
     bfe:	90 58       	subi	r25, 0x80	; 128
     c00:	44 0f       	add	r20, r20
     c02:	55 1f       	adc	r21, r21
     c04:	59 f0       	breq	.+22     	; 0xc1c <__fp_splitA+0x10>
     c06:	5f 3f       	cpi	r21, 0xFF	; 255
     c08:	71 f0       	breq	.+28     	; 0xc26 <__fp_splitA+0x1a>
     c0a:	47 95       	ror	r20

00000c0c <__fp_splitA>:
     c0c:	88 0f       	add	r24, r24
     c0e:	97 fb       	bst	r25, 7
     c10:	99 1f       	adc	r25, r25
     c12:	61 f0       	breq	.+24     	; 0xc2c <__fp_splitA+0x20>
     c14:	9f 3f       	cpi	r25, 0xFF	; 255
     c16:	79 f0       	breq	.+30     	; 0xc36 <__fp_splitA+0x2a>
     c18:	87 95       	ror	r24
     c1a:	08 95       	ret
     c1c:	12 16       	cp	r1, r18
     c1e:	13 06       	cpc	r1, r19
     c20:	14 06       	cpc	r1, r20
     c22:	55 1f       	adc	r21, r21
     c24:	f2 cf       	rjmp	.-28     	; 0xc0a <__fp_split3+0xe>
     c26:	46 95       	lsr	r20
     c28:	f1 df       	rcall	.-30     	; 0xc0c <__fp_splitA>
     c2a:	08 c0       	rjmp	.+16     	; 0xc3c <__fp_splitA+0x30>
     c2c:	16 16       	cp	r1, r22
     c2e:	17 06       	cpc	r1, r23
     c30:	18 06       	cpc	r1, r24
     c32:	99 1f       	adc	r25, r25
     c34:	f1 cf       	rjmp	.-30     	; 0xc18 <__fp_splitA+0xc>
     c36:	86 95       	lsr	r24
     c38:	71 05       	cpc	r23, r1
     c3a:	61 05       	cpc	r22, r1
     c3c:	08 94       	sec
     c3e:	08 95       	ret

00000c40 <__fp_zero>:
     c40:	e8 94       	clt

00000c42 <__fp_szero>:
     c42:	bb 27       	eor	r27, r27
     c44:	66 27       	eor	r22, r22
     c46:	77 27       	eor	r23, r23
     c48:	cb 01       	movw	r24, r22
     c4a:	97 f9       	bld	r25, 7
     c4c:	08 95       	ret

00000c4e <__mulsf3>:
     c4e:	0e 94 3a 06 	call	0xc74	; 0xc74 <__mulsf3x>
     c52:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__fp_round>
     c56:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fp_pscA>
     c5a:	38 f0       	brcs	.+14     	; 0xc6a <__mulsf3+0x1c>
     c5c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__fp_pscB>
     c60:	20 f0       	brcs	.+8      	; 0xc6a <__mulsf3+0x1c>
     c62:	95 23       	and	r25, r21
     c64:	11 f0       	breq	.+4      	; 0xc6a <__mulsf3+0x1c>
     c66:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_inf>
     c6a:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__fp_nan>
     c6e:	11 24       	eor	r1, r1
     c70:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_szero>

00000c74 <__mulsf3x>:
     c74:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fp_split3>
     c78:	70 f3       	brcs	.-36     	; 0xc56 <__mulsf3+0x8>

00000c7a <__mulsf3_pse>:
     c7a:	95 9f       	mul	r25, r21
     c7c:	c1 f3       	breq	.-16     	; 0xc6e <__mulsf3+0x20>
     c7e:	95 0f       	add	r25, r21
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	55 1f       	adc	r21, r21
     c84:	62 9f       	mul	r22, r18
     c86:	f0 01       	movw	r30, r0
     c88:	72 9f       	mul	r23, r18
     c8a:	bb 27       	eor	r27, r27
     c8c:	f0 0d       	add	r31, r0
     c8e:	b1 1d       	adc	r27, r1
     c90:	63 9f       	mul	r22, r19
     c92:	aa 27       	eor	r26, r26
     c94:	f0 0d       	add	r31, r0
     c96:	b1 1d       	adc	r27, r1
     c98:	aa 1f       	adc	r26, r26
     c9a:	64 9f       	mul	r22, r20
     c9c:	66 27       	eor	r22, r22
     c9e:	b0 0d       	add	r27, r0
     ca0:	a1 1d       	adc	r26, r1
     ca2:	66 1f       	adc	r22, r22
     ca4:	82 9f       	mul	r24, r18
     ca6:	22 27       	eor	r18, r18
     ca8:	b0 0d       	add	r27, r0
     caa:	a1 1d       	adc	r26, r1
     cac:	62 1f       	adc	r22, r18
     cae:	73 9f       	mul	r23, r19
     cb0:	b0 0d       	add	r27, r0
     cb2:	a1 1d       	adc	r26, r1
     cb4:	62 1f       	adc	r22, r18
     cb6:	83 9f       	mul	r24, r19
     cb8:	a0 0d       	add	r26, r0
     cba:	61 1d       	adc	r22, r1
     cbc:	22 1f       	adc	r18, r18
     cbe:	74 9f       	mul	r23, r20
     cc0:	33 27       	eor	r19, r19
     cc2:	a0 0d       	add	r26, r0
     cc4:	61 1d       	adc	r22, r1
     cc6:	23 1f       	adc	r18, r19
     cc8:	84 9f       	mul	r24, r20
     cca:	60 0d       	add	r22, r0
     ccc:	21 1d       	adc	r18, r1
     cce:	82 2f       	mov	r24, r18
     cd0:	76 2f       	mov	r23, r22
     cd2:	6a 2f       	mov	r22, r26
     cd4:	11 24       	eor	r1, r1
     cd6:	9f 57       	subi	r25, 0x7F	; 127
     cd8:	50 40       	sbci	r21, 0x00	; 0
     cda:	9a f0       	brmi	.+38     	; 0xd02 <__mulsf3_pse+0x88>
     cdc:	f1 f0       	breq	.+60     	; 0xd1a <__mulsf3_pse+0xa0>
     cde:	88 23       	and	r24, r24
     ce0:	4a f0       	brmi	.+18     	; 0xcf4 <__mulsf3_pse+0x7a>
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	bb 1f       	adc	r27, r27
     ce8:	66 1f       	adc	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	88 1f       	adc	r24, r24
     cee:	91 50       	subi	r25, 0x01	; 1
     cf0:	50 40       	sbci	r21, 0x00	; 0
     cf2:	a9 f7       	brne	.-22     	; 0xcde <__mulsf3_pse+0x64>
     cf4:	9e 3f       	cpi	r25, 0xFE	; 254
     cf6:	51 05       	cpc	r21, r1
     cf8:	80 f0       	brcs	.+32     	; 0xd1a <__mulsf3_pse+0xa0>
     cfa:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__fp_inf>
     cfe:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__fp_szero>
     d02:	5f 3f       	cpi	r21, 0xFF	; 255
     d04:	e4 f3       	brlt	.-8      	; 0xcfe <__mulsf3_pse+0x84>
     d06:	98 3e       	cpi	r25, 0xE8	; 232
     d08:	d4 f3       	brlt	.-12     	; 0xcfe <__mulsf3_pse+0x84>
     d0a:	86 95       	lsr	r24
     d0c:	77 95       	ror	r23
     d0e:	67 95       	ror	r22
     d10:	b7 95       	ror	r27
     d12:	f7 95       	ror	r31
     d14:	e7 95       	ror	r30
     d16:	9f 5f       	subi	r25, 0xFF	; 255
     d18:	c1 f7       	brne	.-16     	; 0xd0a <__mulsf3_pse+0x90>
     d1a:	fe 2b       	or	r31, r30
     d1c:	88 0f       	add	r24, r24
     d1e:	91 1d       	adc	r25, r1
     d20:	96 95       	lsr	r25
     d22:	87 95       	ror	r24
     d24:	97 f9       	bld	r25, 7
     d26:	08 95       	ret

00000d28 <_ZN15OrangutanAnalog7setModeEh.part.0>:
     d28:	ec e7       	ldi	r30, 0x7C	; 124
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	80 83       	st	Z, r24
     d32:	08 95       	ret

00000d34 <_ZN15OrangutanAnalog7setModeEh>:
     d34:	81 11       	cpse	r24, r1
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <_ZN15OrangutanAnalog7setModeEh+0xa>
     d38:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN15OrangutanAnalog7setModeEh.part.0>
     d3c:	08 95       	ret
     d3e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d42:	80 62       	ori	r24, 0x20	; 32
     d44:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d48:	08 95       	ret

00000d4a <_ZN15OrangutanAnalog7getModeEv>:
     d4a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d4e:	85 fb       	bst	r24, 5
     d50:	88 27       	eor	r24, r24
     d52:	80 f9       	bld	r24, 0
     d54:	08 95       	ret

00000d56 <_ZN15OrangutanAnalog16conversionResultEv>:
     d56:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN15OrangutanAnalog7getModeEv>
     d5a:	88 23       	and	r24, r24
     d5c:	21 f0       	breq	.+8      	; 0xd66 <_ZN15OrangutanAnalog16conversionResultEv+0x10>
     d5e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	08 95       	ret
     d66:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d6a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d6e:	08 95       	ret

00000d70 <_ZN15OrangutanAnalog15startConversionEhh>:
     d70:	80 32       	cpi	r24, 0x20	; 32
     d72:	a0 f4       	brcc	.+40     	; 0xd9c <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
     d74:	97 e8       	ldi	r25, 0x87	; 135
     d76:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d7a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d7e:	66 23       	and	r22, r22
     d80:	11 f0       	breq	.+4      	; 0xd86 <_ZN15OrangutanAnalog15startConversionEhh+0x16>
     d82:	90 6c       	ori	r25, 0xC0	; 192
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
     d86:	9f 77       	andi	r25, 0x7F	; 127
     d88:	90 64       	ori	r25, 0x40	; 64
     d8a:	90 7e       	andi	r25, 0xE0	; 224
     d8c:	98 2b       	or	r25, r24
     d8e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d92:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d96:	80 64       	ori	r24, 0x40	; 64
     d98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d9c:	08 95       	ret

00000d9e <_ZN15OrangutanAnalog11readAverageEhj>:
     d9e:	a0 e0       	ldi	r26, 0x00	; 0
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e5 ed       	ldi	r30, 0xD5	; 213
     da4:	f6 e0       	ldi	r31, 0x06	; 6
     da6:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__prologue_saves__+0x14>
     daa:	eb 01       	movw	r28, r22
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN15OrangutanAnalog15startConversionEhh>
     db2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     db6:	86 fd       	sbrc	r24, 6
     db8:	fc cf       	rjmp	.-8      	; 0xdb2 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
     dba:	8e 01       	movw	r16, r28
     dbc:	c1 2c       	mov	r12, r1
     dbe:	d1 2c       	mov	r13, r1
     dc0:	76 01       	movw	r14, r12
     dc2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dc6:	80 64       	ori	r24, 0x40	; 64
     dc8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dcc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dd0:	86 fd       	sbrc	r24, 6
     dd2:	fc cf       	rjmp	.-8      	; 0xdcc <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
     dd4:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZN15OrangutanAnalog16conversionResultEv>
     dd8:	c8 0e       	add	r12, r24
     dda:	d9 1e       	adc	r13, r25
     ddc:	e1 1c       	adc	r14, r1
     dde:	f1 1c       	adc	r15, r1
     de0:	01 50       	subi	r16, 0x01	; 1
     de2:	11 09       	sbc	r17, r1
     de4:	01 15       	cp	r16, r1
     de6:	11 05       	cpc	r17, r1
     de8:	61 f7       	brne	.-40     	; 0xdc2 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
     dea:	ce 01       	movw	r24, r28
     dec:	96 95       	lsr	r25
     dee:	87 95       	ror	r24
     df0:	c0 34       	cpi	r28, 0x40	; 64
     df2:	d1 05       	cpc	r29, r1
     df4:	38 f4       	brcc	.+14     	; 0xe04 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
     df6:	8c 0d       	add	r24, r12
     df8:	9d 1d       	adc	r25, r13
     dfa:	be 01       	movw	r22, r28
     dfc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__udivmodhi4>
     e00:	cb 01       	movw	r24, r22
     e02:	0e c0       	rjmp	.+28     	; 0xe20 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
     e04:	a7 01       	movw	r20, r14
     e06:	96 01       	movw	r18, r12
     e08:	28 0f       	add	r18, r24
     e0a:	39 1f       	adc	r19, r25
     e0c:	41 1d       	adc	r20, r1
     e0e:	51 1d       	adc	r21, r1
     e10:	ca 01       	movw	r24, r20
     e12:	b9 01       	movw	r22, r18
     e14:	9e 01       	movw	r18, r28
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
     e1e:	c9 01       	movw	r24, r18
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	e8 e0       	ldi	r30, 0x08	; 8
     e26:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__epilogue_restores__+0x14>

00000e2a <_ZN15OrangutanAnalog12toMillivoltsEj>:
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e36:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e3a:	9c 01       	movw	r18, r24
     e3c:	0e 94 30 10 	call	0x2060	; 0x2060 <__umulhisi3>
     e40:	6b 01       	movw	r12, r22
     e42:	7c 01       	movw	r14, r24
     e44:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN15OrangutanAnalog7getModeEv>
     e48:	88 23       	and	r24, r24
     e4a:	59 f0       	breq	.+22     	; 0xe62 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	61 58       	subi	r22, 0x81	; 129
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	8f 4f       	sbci	r24, 0xFF	; 255
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	2f ef       	ldi	r18, 0xFF	; 255
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	61 50       	subi	r22, 0x01	; 1
     e68:	7e 4f       	sbci	r23, 0xFE	; 254
     e6a:	8f 4f       	sbci	r24, 0xFF	; 255
     e6c:	9f 4f       	sbci	r25, 0xFF	; 255
     e6e:	2f ef       	ldi	r18, 0xFF	; 255
     e70:	33 e0       	ldi	r19, 0x03	; 3
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
     e7a:	c9 01       	movw	r24, r18
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	08 95       	ret

00000e86 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
     e86:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN15OrangutanAnalog11readAverageEhj>
     e8a:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN15OrangutanAnalog12toMillivoltsEj>
     e8e:	08 95       	ret

00000e90 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN15OrangutanAnalog7getModeEv>
     e9a:	18 2f       	mov	r17, r24
     e9c:	0e 94 94 06 	call	0xd28	; 0xd28 <_ZN15OrangutanAnalog7setModeEh.part.0>
     ea0:	6a e0       	ldi	r22, 0x0A	; 10
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	86 e0       	ldi	r24, 0x06	; 6
     ea6:	0e 94 43 07 	call	0xe86	; 0xe86 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
     eaa:	ec 01       	movw	r28, r24
     eac:	81 2f       	mov	r24, r17
     eae:	0e 94 9a 06 	call	0xd34	; 0xd34 <_ZN15OrangutanAnalog7setModeEh>
     eb2:	ce 01       	movw	r24, r28
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	8c 0f       	add	r24, r28
     eba:	9d 1f       	adc	r25, r29
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	08 95       	ret

00000eca <read_battery_millivolts_3pi>:
     eca:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
     ece:	08 95       	ret

00000ed0 <delay_us.constprop.0>:
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	6f 93       	push	r22
     ed6:	64 e0       	ldi	r22, 0x04	; 4
     ed8:	6a 95       	dec	r22
     eda:	f1 f7       	brne	.-4      	; 0xed8 <delay_us.constprop.0+0x8>
     edc:	6f 91       	pop	r22
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	c9 f7       	brne	.-14     	; 0xed4 <delay_us.constprop.0+0x4>
     ee2:	08 95       	ret

00000ee4 <_ZN12OrangutanLCD8busyWaitEv>:
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	1a b1       	in	r17, 0x0a	; 10
     eee:	57 98       	cbi	0x0a, 7	; 10
     ef0:	5a 98       	cbi	0x0b, 2	; 11
     ef2:	28 9a       	sbi	0x05, 0	; 5
     ef4:	c0 e0       	ldi	r28, 0x00	; 0
     ef6:	d0 e0       	ldi	r29, 0x00	; 0
     ef8:	0e 94 68 07 	call	0xed0	; 0xed0 <delay_us.constprop.0>
     efc:	5c 9a       	sbi	0x0b, 4	; 11
     efe:	0e 94 68 07 	call	0xed0	; 0xed0 <delay_us.constprop.0>
     f02:	09 b1       	in	r16, 0x09	; 9
     f04:	5c 98       	cbi	0x0b, 4	; 11
     f06:	0e 94 68 07 	call	0xed0	; 0xed0 <delay_us.constprop.0>
     f0a:	5c 9a       	sbi	0x0b, 4	; 11
     f0c:	0e 94 68 07 	call	0xed0	; 0xed0 <delay_us.constprop.0>
     f10:	5c 98       	cbi	0x0b, 4	; 11
     f12:	24 96       	adiw	r28, 0x04	; 4
     f14:	07 ff       	sbrs	r16, 7
     f16:	10 c0       	rjmp	.+32     	; 0xf38 <_ZN12OrangutanLCD8busyWaitEv+0x54>
     f18:	ae 01       	movw	r20, r28
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
     f22:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__data_end+0x1>
     f26:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <__data_end+0x2>
     f2a:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <__data_end+0x3>
     f2e:	48 17       	cp	r20, r24
     f30:	59 07       	cpc	r21, r25
     f32:	6a 07       	cpc	r22, r26
     f34:	7b 07       	cpc	r23, r27
     f36:	00 f3       	brcs	.-64     	; 0xef8 <_ZN12OrangutanLCD8busyWaitEv+0x14>
     f38:	1a b9       	out	0x0a, r17	; 10
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	08 95       	ret

00000f44 <_ZN12OrangutanLCD8sendDataEh>:
     f44:	95 b1       	in	r25, 0x05	; 5
     f46:	28 2f       	mov	r18, r24
     f48:	21 70       	andi	r18, 0x01	; 1
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	22 0f       	add	r18, r18
     f4e:	33 1f       	adc	r19, r19
     f50:	48 2f       	mov	r20, r24
     f52:	46 70       	andi	r20, 0x06	; 6
     f54:	68 e0       	ldi	r22, 0x08	; 8
     f56:	46 9f       	mul	r20, r22
     f58:	a0 01       	movw	r20, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	24 2b       	or	r18, r20
     f5e:	9d 7c       	andi	r25, 0xCD	; 205
     f60:	29 2b       	or	r18, r25
     f62:	25 b9       	out	0x05, r18	; 5
     f64:	9b b1       	in	r25, 0x0b	; 11
     f66:	88 70       	andi	r24, 0x08	; 8
     f68:	82 95       	swap	r24
     f6a:	80 7f       	andi	r24, 0xF0	; 240
     f6c:	9f 77       	andi	r25, 0x7F	; 127
     f6e:	89 2b       	or	r24, r25
     f70:	8b b9       	out	0x0b, r24	; 11
     f72:	5c 9a       	sbi	0x0b, 4	; 11
     f74:	0e 94 68 07 	call	0xed0	; 0xed0 <delay_us.constprop.0>
     f78:	5c 98       	cbi	0x0b, 4	; 11
     f7a:	0e 94 68 07 	call	0xed0	; 0xed0 <delay_us.constprop.0>
     f7e:	08 95       	ret

00000f80 <_ZN12OrangutanLCD4sendEhhh>:
     f80:	a0 e0       	ldi	r26, 0x00	; 0
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 ec       	ldi	r30, 0xC6	; 198
     f86:	f7 e0       	ldi	r31, 0x07	; 7
     f88:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__+0x16>
     f8c:	c8 2f       	mov	r28, r24
     f8e:	d6 2e       	mov	r13, r22
     f90:	e4 2e       	mov	r14, r20
     f92:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <_ZZN12OrangutanLCD4initEvE11initialized>
     f96:	81 11       	cpse	r24, r1
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <_ZN12OrangutanLCD4sendEhhh+0x24>
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <_ZZN12OrangutanLCD4initEvE11initialized>
     fa0:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN12OrangutanLCD5init2Ev>
     fa4:	0e 94 72 07 	call	0xee4	; 0xee4 <_ZN12OrangutanLCD8busyWaitEv>
     fa8:	14 b1       	in	r17, 0x04	; 4
     faa:	d5 b1       	in	r29, 0x05	; 5
     fac:	fa b0       	in	r15, 0x0a	; 10
     fae:	0b b1       	in	r16, 0x0b	; 11
     fb0:	28 98       	cbi	0x05, 0	; 5
     fb2:	dd 20       	and	r13, r13
     fb4:	11 f0       	breq	.+4      	; 0xfba <_ZN12OrangutanLCD4sendEhhh+0x3a>
     fb6:	5a 9a       	sbi	0x0b, 2	; 11
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <_ZN12OrangutanLCD4sendEhhh+0x3c>
     fba:	5a 98       	cbi	0x0b, 2	; 11
     fbc:	94 b1       	in	r25, 0x04	; 4
     fbe:	92 63       	ori	r25, 0x32	; 50
     fc0:	94 b9       	out	0x04, r25	; 4
     fc2:	57 9a       	sbi	0x0a, 7	; 10
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	e8 16       	cp	r14, r24
     fc8:	29 f0       	breq	.+10     	; 0xfd4 <_ZN12OrangutanLCD4sendEhhh+0x54>
     fca:	8c 2f       	mov	r24, r28
     fcc:	82 95       	swap	r24
     fce:	8f 70       	andi	r24, 0x0F	; 15
     fd0:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN12OrangutanLCD8sendDataEh>
     fd4:	8c 2f       	mov	r24, r28
     fd6:	8f 70       	andi	r24, 0x0F	; 15
     fd8:	0e 94 a2 07 	call	0xf44	; 0xf44 <_ZN12OrangutanLCD8sendDataEh>
     fdc:	fa b8       	out	0x0a, r15	; 10
     fde:	0b b9       	out	0x0b, r16	; 11
     fe0:	14 b9       	out	0x04, r17	; 4
     fe2:	d5 b9       	out	0x05, r29	; 5
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	e7 e0       	ldi	r30, 0x07	; 7
     fea:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__+0x16>

00000fee <_ZN12OrangutanLCD8send_cmdEh>:
     fee:	42 e0       	ldi	r20, 0x02	; 2
     ff0:	60 e0       	ldi	r22, 0x00	; 0
     ff2:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN12OrangutanLCD4sendEhhh>
     ff6:	08 95       	ret

00000ff8 <_ZN12OrangutanLCD9send_dataEh>:
     ff8:	42 e0       	ldi	r20, 0x02	; 2
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN12OrangutanLCD4sendEhhh>
    1000:	08 95       	ret

00001002 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN12OrangutanLCD4sendEhhh>
    100a:	08 95       	ret

0000100c <_ZN12OrangutanLCD5init2Ev>:
    100c:	80 e1       	ldi	r24, 0x10	; 16
    100e:	97 e2       	ldi	r25, 0x27	; 39
    1010:	a0 e0       	ldi	r26, 0x00	; 0
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
    1018:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
    101c:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <__data_end+0x2>
    1020:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <__data_end+0x3>
    1024:	52 9a       	sbi	0x0a, 2	; 10
    1026:	20 9a       	sbi	0x04, 0	; 4
    1028:	54 9a       	sbi	0x0a, 4	; 10
    102a:	8e e1       	ldi	r24, 0x1E	; 30
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	0e 94 01 08 	call	0x1002	; 0x1002 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1038:	86 e0       	ldi	r24, 0x06	; 6
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	0e 94 01 08 	call	0x1002	; 0x1002 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	0e 94 01 08 	call	0x1002	; 0x1002 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	0e 94 01 08 	call	0x1002	; 0x1002 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
    106a:	88 e2       	ldi	r24, 0x28	; 40
    106c:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN12OrangutanLCD8send_cmdEh>
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN12OrangutanLCD8send_cmdEh>
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN12OrangutanLCD8send_cmdEh>
    107c:	86 e0       	ldi	r24, 0x06	; 6
    107e:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN12OrangutanLCD8send_cmdEh>
    1082:	8c e0       	ldi	r24, 0x0C	; 12
    1084:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN12OrangutanLCD8send_cmdEh>
    1088:	08 95       	ret

0000108a <_ZN12OrangutanLCD5clearEv>:
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN12OrangutanLCD8send_cmdEh>
    1090:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <printf_chars>
    1094:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <printf_chars+0x1>
    1098:	89 2b       	or	r24, r25
    109a:	f9 f0       	breq	.+62     	; 0x10da <_ZN12OrangutanLCD5clearEv+0x50>
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	a0 e2       	ldi	r26, 0x20	; 32
    10a0:	26 2f       	mov	r18, r22
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <numLCDCols>
    10a8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <numLCDRows>
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	78 9f       	mul	r23, r24
    10b2:	a0 01       	movw	r20, r0
    10b4:	79 9f       	mul	r23, r25
    10b6:	50 0d       	add	r21, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	24 17       	cp	r18, r20
    10bc:	35 07       	cpc	r19, r21
    10be:	4c f4       	brge	.+18     	; 0x10d2 <_ZN12OrangutanLCD5clearEv+0x48>
    10c0:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <printf_chars>
    10c4:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <printf_chars+0x1>
    10c8:	e2 0f       	add	r30, r18
    10ca:	f3 1f       	adc	r31, r19
    10cc:	a0 83       	st	Z, r26
    10ce:	6f 5f       	subi	r22, 0xFF	; 255
    10d0:	e7 cf       	rjmp	.-50     	; 0x10a0 <_ZN12OrangutanLCD5clearEv+0x16>
    10d2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <col>
    10d6:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <row>
    10da:	08 95       	ret

000010dc <clear>:
    10dc:	0e 94 45 08 	call	0x108a	; 0x108a <_ZN12OrangutanLCD5clearEv>
    10e0:	08 95       	ret

000010e2 <_ZN12OrangutanLCD5printEPKc>:
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ec 01       	movw	r28, r24
    10e8:	89 91       	ld	r24, Y+
    10ea:	88 23       	and	r24, r24
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <_ZN12OrangutanLCD5printEPKc+0x12>
    10ee:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN12OrangutanLCD9send_dataEh>
    10f2:	fa cf       	rjmp	.-12     	; 0x10e8 <_ZN12OrangutanLCD5printEPKc+0x6>
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <print>:
    10fa:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN12OrangutanLCD5printEPKc>
    10fe:	08 95       	ret

00001100 <_ZN12OrangutanLCD5printEm>:
    1100:	aa e0       	ldi	r26, 0x0A	; 10
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e6 e8       	ldi	r30, 0x86	; 134
    1106:	f8 e0       	ldi	r31, 0x08	; 8
    1108:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__prologue_saves__+0x14>
    110c:	1a e0       	ldi	r17, 0x0A	; 10
    110e:	5a e0       	ldi	r21, 0x0A	; 10
    1110:	c5 2e       	mov	r12, r21
    1112:	d1 2c       	mov	r13, r1
    1114:	e1 2c       	mov	r14, r1
    1116:	f1 2c       	mov	r15, r1
    1118:	06 2f       	mov	r16, r22
    111a:	a7 01       	movw	r20, r14
    111c:	96 01       	movw	r18, r12
    111e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
    1122:	ca 01       	movw	r24, r20
    1124:	b9 01       	movw	r22, r18
    1126:	11 50       	subi	r17, 0x01	; 1
    1128:	e1 e0       	ldi	r30, 0x01	; 1
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	ec 0f       	add	r30, r28
    112e:	fd 1f       	adc	r31, r29
    1130:	e1 0f       	add	r30, r17
    1132:	f1 1d       	adc	r31, r1
    1134:	00 5d       	subi	r16, 0xD0	; 208
    1136:	2a e0       	ldi	r18, 0x0A	; 10
    1138:	62 9f       	mul	r22, r18
    113a:	00 19       	sub	r16, r0
    113c:	11 24       	eor	r1, r1
    113e:	00 83       	st	Z, r16
    1140:	61 15       	cp	r22, r1
    1142:	71 05       	cpc	r23, r1
    1144:	81 05       	cpc	r24, r1
    1146:	91 05       	cpc	r25, r1
    1148:	39 f7       	brne	.-50     	; 0x1118 <_ZN12OrangutanLCD5printEm+0x18>
    114a:	1a 30       	cpi	r17, 0x0A	; 10
    114c:	58 f4       	brcc	.+22     	; 0x1164 <_ZN12OrangutanLCD5printEm+0x64>
    114e:	e1 e0       	ldi	r30, 0x01	; 1
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	ec 0f       	add	r30, r28
    1154:	fd 1f       	adc	r31, r29
    1156:	e1 0f       	add	r30, r17
    1158:	f1 1d       	adc	r31, r1
    115a:	80 81       	ld	r24, Z
    115c:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN12OrangutanLCD9send_dataEh>
    1160:	1f 5f       	subi	r17, 0xFF	; 255
    1162:	f3 cf       	rjmp	.-26     	; 0x114a <_ZN12OrangutanLCD5printEm+0x4a>
    1164:	2a 96       	adiw	r28, 0x0a	; 10
    1166:	e8 e0       	ldi	r30, 0x08	; 8
    1168:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__epilogue_restores__+0x14>

0000116c <_ZN12OrangutanLCD5printEl>:
    116c:	cf 92       	push	r12
    116e:	df 92       	push	r13
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	97 ff       	sbrs	r25, 7
    117a:	0b c0       	rjmp	.+22     	; 0x1192 <_ZN12OrangutanLCD5printEl+0x26>
    117c:	f0 94       	com	r15
    117e:	e0 94       	com	r14
    1180:	d0 94       	com	r13
    1182:	c0 94       	com	r12
    1184:	c1 1c       	adc	r12, r1
    1186:	d1 1c       	adc	r13, r1
    1188:	e1 1c       	adc	r14, r1
    118a:	f1 1c       	adc	r15, r1
    118c:	8d e2       	ldi	r24, 0x2D	; 45
    118e:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN12OrangutanLCD9send_dataEh>
    1192:	c7 01       	movw	r24, r14
    1194:	b6 01       	movw	r22, r12
    1196:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN12OrangutanLCD5printEm>
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	08 95       	ret

000011a4 <print_long>:
    11a4:	0e 94 b6 08 	call	0x116c	; 0x116c <_ZN12OrangutanLCD5printEl>
    11a8:	08 95       	ret

000011aa <_ZN12OrangutanLCD6gotoXYEhh>:
    11aa:	a5 e0       	ldi	r26, 0x05	; 5
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb ed       	ldi	r30, 0xDB	; 219
    11b0:	f8 e0       	ldi	r31, 0x08	; 8
    11b2:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__prologue_saves__+0x1e>
    11b6:	18 2f       	mov	r17, r24
    11b8:	80 e8       	ldi	r24, 0x80	; 128
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	80 ec       	ldi	r24, 0xC0	; 192
    11be:	8a 83       	std	Y+2, r24	; 0x02
    11c0:	84 e9       	ldi	r24, 0x94	; 148
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	84 ed       	ldi	r24, 0xD4	; 212
    11c6:	8c 83       	std	Y+4, r24	; 0x04
    11c8:	fe 01       	movw	r30, r28
    11ca:	e6 0f       	add	r30, r22
    11cc:	f1 1d       	adc	r31, r1
    11ce:	81 81       	ldd	r24, Z+1	; 0x01
    11d0:	81 0f       	add	r24, r17
    11d2:	6d 83       	std	Y+5, r22	; 0x05
    11d4:	0e 94 f7 07 	call	0xfee	; 0xfee <_ZN12OrangutanLCD8send_cmdEh>
    11d8:	10 93 3e 01 	sts	0x013E, r17	; 0x80013e <col>
    11dc:	6d 81       	ldd	r22, Y+5	; 0x05
    11de:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <row>
    11e2:	25 96       	adiw	r28, 0x05	; 5
    11e4:	e3 e0       	ldi	r30, 0x03	; 3
    11e6:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__epilogue_restores__+0x1e>

000011ea <lcd_goto_xy>:
    11ea:	0e 94 d5 08 	call	0x11aa	; 0x11aa <_ZN12OrangutanLCD6gotoXYEhh>
    11ee:	08 95       	ret

000011f0 <_ZN16OrangutanDigital9setOutputEhh>:
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	58 f4       	brcc	.+22     	; 0x120a <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <_ZN16OrangutanDigital9setOutputEhh+0xa>
    11f8:	99 0f       	add	r25, r25
    11fa:	8a 95       	dec	r24
    11fc:	ea f7       	brpl	.-6      	; 0x11f8 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    11fe:	89 2f       	mov	r24, r25
    1200:	aa e2       	ldi	r26, 0x2A	; 42
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	eb e2       	ldi	r30, 0x2B	; 43
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	21 c0       	rjmp	.+66     	; 0x124c <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    120a:	8e 30       	cpi	r24, 0x0E	; 14
    120c:	60 f4       	brcc	.+24     	; 0x1226 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    120e:	98 ef       	ldi	r25, 0xF8	; 248
    1210:	98 0f       	add	r25, r24
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    1216:	88 0f       	add	r24, r24
    1218:	9a 95       	dec	r25
    121a:	ea f7       	brpl	.-6      	; 0x1216 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    121c:	a4 e2       	ldi	r26, 0x24	; 36
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e2       	ldi	r30, 0x25	; 37
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	13 c0       	rjmp	.+38     	; 0x124c <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1226:	85 31       	cpi	r24, 0x15	; 21
    1228:	60 f4       	brcc	.+24     	; 0x1242 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    122a:	92 ef       	ldi	r25, 0xF2	; 242
    122c:	98 0f       	add	r25, r24
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    1232:	88 0f       	add	r24, r24
    1234:	9a 95       	dec	r25
    1236:	ea f7       	brpl	.-6      	; 0x1232 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    1238:	a7 e2       	ldi	r26, 0x27	; 39
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e8 e2       	ldi	r30, 0x28	; 40
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	05 c0       	rjmp	.+10     	; 0x124c <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	a0 e0       	ldi	r26, 0x00	; 0
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e0 e0       	ldi	r30, 0x00	; 0
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	6f 3f       	cpi	r22, 0xFF	; 255
    124e:	19 f4       	brne	.+6      	; 0x1256 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    1250:	90 81       	ld	r25, Z
    1252:	98 27       	eor	r25, r24
    1254:	09 c0       	rjmp	.+18     	; 0x1268 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1256:	66 23       	and	r22, r22
    1258:	19 f0       	breq	.+6      	; 0x1260 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    125a:	90 81       	ld	r25, Z
    125c:	98 2b       	or	r25, r24
    125e:	04 c0       	rjmp	.+8      	; 0x1268 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    1260:	20 81       	ld	r18, Z
    1262:	98 2f       	mov	r25, r24
    1264:	90 95       	com	r25
    1266:	92 23       	and	r25, r18
    1268:	90 83       	st	Z, r25
    126a:	9c 91       	ld	r25, X
    126c:	98 2b       	or	r25, r24
    126e:	9c 93       	st	X, r25
    1270:	08 95       	ret

00001272 <_ZN15OrangutanMotors5init2Ev>:
    1272:	83 ef       	ldi	r24, 0xF3	; 243
    1274:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1278:	84 bd       	out	0x24, r24	; 36
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1280:	85 bd       	out	0x25, r24	; 37
    1282:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1286:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    128a:	18 bc       	out	0x28, r1	; 40
    128c:	17 bc       	out	0x27, r1	; 39
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	86 e0       	ldi	r24, 0x06	; 6
    1292:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN16OrangutanDigital9setOutputEhh>
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	85 e0       	ldi	r24, 0x05	; 5
    129a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN16OrangutanDigital9setOutputEhh>
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	8b e0       	ldi	r24, 0x0B	; 11
    12a2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN16OrangutanDigital9setOutputEhh>
    12a6:	60 e0       	ldi	r22, 0x00	; 0
    12a8:	83 e0       	ldi	r24, 0x03	; 3
    12aa:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN16OrangutanDigital9setOutputEhh>
    12ae:	08 95       	ret

000012b0 <_ZN15OrangutanMotors4initEv>:
    12b0:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <_ZZN15OrangutanMotors4initEvE11initialized>
    12b4:	81 11       	cpse	r24, r1
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <_ZN15OrangutanMotors4initEv+0x12>
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <_ZZN15OrangutanMotors4initEvE11initialized>
    12be:	0e 94 39 09 	call	0x1272	; 0x1272 <_ZN15OrangutanMotors5init2Ev>
    12c2:	08 95       	ret

000012c4 <_ZN15OrangutanMotors10setM1SpeedEi>:
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
    12ca:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN15OrangutanMotors4initEv>
    12ce:	d7 ff       	sbrs	r29, 7
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    12d2:	d1 95       	neg	r29
    12d4:	c1 95       	neg	r28
    12d6:	d1 09       	sbc	r29, r1
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	01 c0       	rjmp	.+2      	; 0x12de <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	cf 3f       	cpi	r28, 0xFF	; 255
    12e0:	d1 05       	cpc	r29, r1
    12e2:	19 f0       	breq	.+6      	; 0x12ea <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    12e4:	14 f0       	brlt	.+4      	; 0x12ea <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    12e6:	cf ef       	ldi	r28, 0xFF	; 255
    12e8:	d0 e0       	ldi	r29, 0x00	; 0
    12ea:	88 23       	and	r24, r24
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    12ee:	18 bc       	out	0x28, r1	; 40
    12f0:	c7 bd       	out	0x27, r28	; 39
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    12f4:	c8 bd       	out	0x28, r28	; 40
    12f6:	17 bc       	out	0x27, r1	; 39
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <_ZN15OrangutanMotors10setM2SpeedEi>:
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	ec 01       	movw	r28, r24
    1304:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN15OrangutanMotors4initEv>
    1308:	d7 ff       	sbrs	r29, 7
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    130c:	d1 95       	neg	r29
    130e:	c1 95       	neg	r28
    1310:	d1 09       	sbc	r29, r1
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	cf 3f       	cpi	r28, 0xFF	; 255
    131a:	d1 05       	cpc	r29, r1
    131c:	19 f0       	breq	.+6      	; 0x1324 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    131e:	14 f0       	brlt	.+4      	; 0x1324 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    1320:	cf ef       	ldi	r28, 0xFF	; 255
    1322:	d0 e0       	ldi	r29, 0x00	; 0
    1324:	88 23       	and	r24, r24
    1326:	29 f0       	breq	.+10     	; 0x1332 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    1328:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    132c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1330:	04 c0       	rjmp	.+8      	; 0x133a <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    1332:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1336:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <_ZN15OrangutanMotors9setSpeedsEii>:
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	eb 01       	movw	r28, r22
    1346:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN15OrangutanMotors10setM1SpeedEi>
    134a:	ce 01       	movw	r24, r28
    134c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <_ZN15OrangutanMotors10setM2SpeedEi>
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <set_motors>:
    1356:	0e 94 a0 09 	call	0x1340	; 0x1340 <_ZN15OrangutanMotors9setSpeedsEii>
    135a:	08 95       	ret

0000135c <_ZN20OrangutanPushbuttons5init2Ev>:
    135c:	84 b1       	in	r24, 0x04	; 4
    135e:	8d 7c       	andi	r24, 0xCD	; 205
    1360:	84 b9       	out	0x04, r24	; 4
    1362:	85 b1       	in	r24, 0x05	; 5
    1364:	82 63       	ori	r24, 0x32	; 50
    1366:	85 b9       	out	0x05, r24	; 5
    1368:	85 e0       	ldi	r24, 0x05	; 5
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	6f 93       	push	r22
    136e:	64 e0       	ldi	r22, 0x04	; 4
    1370:	6a 95       	dec	r22
    1372:	f1 f7       	brne	.-4      	; 0x1370 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    1374:	6f 91       	pop	r22
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	c9 f7       	brne	.-14     	; 0x136c <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    137a:	08 95       	ret

0000137c <_ZN20OrangutanPushbuttons4initEv>:
    137c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    1380:	81 11       	cpse	r24, r1
    1382:	05 c0       	rjmp	.+10     	; 0x138e <_ZN20OrangutanPushbuttons4initEv+0x12>
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    138a:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN20OrangutanPushbuttons5init2Ev>
    138e:	08 95       	ret

00001390 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    1390:	cf 93       	push	r28
    1392:	c8 2f       	mov	r28, r24
    1394:	0e 94 be 09 	call	0x137c	; 0x137c <_ZN20OrangutanPushbuttons4initEv>
    1398:	83 b1       	in	r24, 0x03	; 3
    139a:	8c 23       	and	r24, r28
    139c:	e9 f3       	breq	.-6      	; 0x1398 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    139e:	8a e0       	ldi	r24, 0x0A	; 10
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 39 0a 	call	0x1472	; 0x1472 <delay_ms>
    13a6:	83 b1       	in	r24, 0x03	; 3
    13a8:	8c 23       	and	r24, r28
    13aa:	b1 f3       	breq	.-20     	; 0x1398 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    13ac:	83 b1       	in	r24, 0x03	; 3
    13ae:	8c 23       	and	r24, r28
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <wait_for_button_release>:
    13b4:	0e 94 c8 09 	call	0x1390	; 0x1390 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    13b8:	08 95       	ret

000013ba <_ZN20OrangutanPushbuttons9isPressedEh>:
    13ba:	a1 e0       	ldi	r26, 0x01	; 1
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 ee       	ldi	r30, 0xE3	; 227
    13c0:	f9 e0       	ldi	r31, 0x09	; 9
    13c2:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__+0x20>
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	0e 94 be 09 	call	0x137c	; 0x137c <_ZN20OrangutanPushbuttons4initEv>
    13cc:	93 b1       	in	r25, 0x03	; 3
    13ce:	90 95       	com	r25
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	89 23       	and	r24, r25
    13d4:	21 96       	adiw	r28, 0x01	; 1
    13d6:	e2 e0       	ldi	r30, 0x02	; 2
    13d8:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__+0x20>

000013dc <button_is_pressed>:
    13dc:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN20OrangutanPushbuttons9isPressedEh>
    13e0:	08 95       	ret

000013e2 <__vector_9>:
    13e2:	2f 92       	push	r2
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	2f b6       	in	r2, 0x3f	; 63
    13ea:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <tickCount+0x1>
    13ee:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <tickCount+0x2>
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tickCount+0x1>
    13f8:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tickCount+0x2>
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tickCount+0x3>
    1402:	89 1f       	adc	r24, r25
    1404:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tickCount+0x3>
    1408:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <us_over_10+0x1>
    140c:	9c 5f       	subi	r25, 0xFC	; 252
    140e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <us_over_10+0x1>
    1412:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <us_over_10>
    1416:	80 51       	subi	r24, 0x10	; 16
    1418:	97 42       	sbci	r25, 0x27	; 39
    141a:	c0 f0       	brcs	.+48     	; 0x144c <end>
    141c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <us_over_10+0x1>
    1420:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <us_over_10>
    1424:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <msCounter>
    1428:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <msCounter+0x1>
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <msCounter>
    1432:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <msCounter+0x1>
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <msCounter+0x2>
    143c:	89 1f       	adc	r24, r25
    143e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <msCounter+0x2>
    1442:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <msCounter+0x3>
    1446:	89 1f       	adc	r24, r25
    1448:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <msCounter+0x3>

0000144c <end>:
    144c:	2f be       	out	0x3f, r2	; 63
    144e:	9f 91       	pop	r25
    1450:	8f 91       	pop	r24
    1452:	2f 90       	pop	r2
    1454:	18 95       	reti

00001456 <_ZN13OrangutanTime17delayMillisecondsEj>:
    1456:	28 ee       	ldi	r18, 0xE8	; 232
    1458:	33 e0       	ldi	r19, 0x03	; 3
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	48 f0       	brcs	.+18     	; 0x1470 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    145e:	f9 01       	movw	r30, r18
    1460:	6f 93       	push	r22
    1462:	64 e0       	ldi	r22, 0x04	; 4
    1464:	6a 95       	dec	r22
    1466:	f1 f7       	brne	.-4      	; 0x1464 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    1468:	6f 91       	pop	r22
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	c9 f7       	brne	.-14     	; 0x1460 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    146e:	f5 cf       	rjmp	.-22     	; 0x145a <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    1470:	08 95       	ret

00001472 <delay_ms>:
    1472:	0e 94 2b 0a 	call	0x1456	; 0x1456 <_ZN13OrangutanTime17delayMillisecondsEj>
    1476:	08 95       	ret

00001478 <_ZN13OrangutanTime5init2Ev>:
    1478:	e0 e7       	ldi	r30, 0x70	; 112
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8e 7f       	andi	r24, 0xFE	; 254
    1480:	80 83       	st	Z, r24
    1482:	a0 eb       	ldi	r26, 0xB0	; 176
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8c 91       	ld	r24, X
    1488:	83 60       	ori	r24, 0x03	; 3
    148a:	8c 93       	st	X, r24
    148c:	a1 eb       	ldi	r26, 0xB1	; 177
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	8c 91       	ld	r24, X
    1492:	80 7f       	andi	r24, 0xF0	; 240
    1494:	8c 93       	st	X, r24
    1496:	8c 91       	ld	r24, X
    1498:	82 60       	ori	r24, 0x02	; 2
    149a:	8c 93       	st	X, r24
    149c:	b8 9a       	sbi	0x17, 0	; 23
    149e:	80 81       	ld	r24, Z
    14a0:	81 60       	ori	r24, 0x01	; 1
    14a2:	80 83       	st	Z, r24
    14a4:	78 94       	sei
    14a6:	08 95       	ret

000014a8 <_ZN13OrangutanTime4initEv>:
    14a8:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <_ZZN13OrangutanTime4initEvE11initialized>
    14ac:	81 11       	cpse	r24, r1
    14ae:	05 c0       	rjmp	.+10     	; 0x14ba <_ZN13OrangutanTime4initEv+0x12>
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <_ZZN13OrangutanTime4initEvE11initialized>
    14b6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <_ZN13OrangutanTime5init2Ev>
    14ba:	08 95       	ret

000014bc <_ZN13OrangutanTime5resetEv>:
    14bc:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <_ZN13OrangutanTime4initEv>
    14c0:	e0 e7       	ldi	r30, 0x70	; 112
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8e 7f       	andi	r24, 0xFE	; 254
    14c8:	80 83       	st	Z, r24
    14ca:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <msCounter>
    14ce:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <msCounter+0x1>
    14d2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <msCounter+0x2>
    14d6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <msCounter+0x3>
    14da:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <us_over_10+0x1>
    14de:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <us_over_10>
    14e2:	80 81       	ld	r24, Z
    14e4:	81 60       	ori	r24, 0x01	; 1
    14e6:	80 83       	st	Z, r24
    14e8:	08 95       	ret

000014ea <calibrate_line_sensors>:
    14ea:	68 2f       	mov	r22, r24
    14ec:	8c e4       	ldi	r24, 0x4C	; 76
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <_ZN16PololuQTRSensors9calibrateEh>
    14f4:	08 95       	ret

000014f6 <read_line>:
    14f6:	46 2f       	mov	r20, r22
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	bc 01       	movw	r22, r24
    14fc:	8c e4       	ldi	r24, 0x4C	; 76
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <_ZN16PololuQTRSensors8readLineEPjhh>
    1504:	08 95       	ret

00001506 <_ZN9Pololu3pi4initEjh>:
    1506:	0f 93       	push	r16
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	00 d0       	rcall	.+0      	; 0x150e <_ZN9Pololu3pi4initEjh+0x8>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <_ZN9Pololu3pi4initEjh+0xa>
    1510:	1f 92       	push	r1
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	9c 01       	movw	r18, r24
    1518:	85 e0       	ldi	r24, 0x05	; 5
    151a:	ee e1       	ldi	r30, 0x1E	; 30
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	de 01       	movw	r26, r28
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	01 90       	ld	r0, Z+
    1524:	0d 92       	st	X+, r0
    1526:	8a 95       	dec	r24
    1528:	e1 f7       	brne	.-8      	; 0x1522 <_ZN9Pololu3pi4initEjh+0x1c>
    152a:	66 23       	and	r22, r22
    152c:	11 f0       	breq	.+4      	; 0x1532 <_ZN9Pololu3pi4initEjh+0x2c>
    152e:	0f ef       	ldi	r16, 0xFF	; 255
    1530:	01 c0       	rjmp	.+2      	; 0x1534 <_ZN9Pololu3pi4initEjh+0x2e>
    1532:	03 e1       	ldi	r16, 0x13	; 19
    1534:	45 e0       	ldi	r20, 0x05	; 5
    1536:	be 01       	movw	r22, r28
    1538:	6f 5f       	subi	r22, 0xFF	; 255
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	8c e4       	ldi	r24, 0x4C	; 76
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN18PololuQTRSensorsRC4initEPhhjh>
    1544:	8c e4       	ldi	r24, 0x4C	; 76
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN16PololuQTRSensors11emittersOffEv>
    154c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_ZN13OrangutanTime5resetEv>
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <pololu_3pi_init>:
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	0e 94 83 0a 	call	0x1506	; 0x1506 <_ZN9Pololu3pi4initEjh>
    1568:	08 95       	ret

0000156a <_GLOBAL__sub_D_pololu_3pi_init>:
    156a:	8c e4       	ldi	r24, 0x4C	; 76
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN16PololuQTRSensorsD1Ev>
    1572:	08 95       	ret

00001574 <delay_us>:
    1574:	6f 93       	push	r22
    1576:	64 e0       	ldi	r22, 0x04	; 4
    1578:	6a 95       	dec	r22
    157a:	f1 f7       	brne	.-4      	; 0x1578 <delay_us+0x4>
    157c:	6f 91       	pop	r22
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	c9 f7       	brne	.-14     	; 0x1574 <delay_us>
    1582:	08 95       	ret

00001584 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    1584:	fc 01       	movw	r30, r24
    1586:	11 82       	std	Z+1, r1	; 0x01
    1588:	10 82       	st	Z, r1
    158a:	13 82       	std	Z+3, r1	; 0x03
    158c:	12 82       	std	Z+2, r1	; 0x02
    158e:	15 82       	std	Z+5, r1	; 0x05
    1590:	14 82       	std	Z+4, r1	; 0x04
    1592:	16 82       	std	Z+6, r1	; 0x06
    1594:	68 30       	cpi	r22, 0x08	; 8
    1596:	68 f4       	brcc	.+26     	; 0x15b2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    1598:	89 e2       	ldi	r24, 0x29	; 41
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	80 83       	st	Z, r24
    15a0:	8b e2       	ldi	r24, 0x2B	; 43
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	93 83       	std	Z+3, r25	; 0x03
    15a6:	82 83       	std	Z+2, r24	; 0x02
    15a8:	8a e2       	ldi	r24, 0x2A	; 42
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	95 83       	std	Z+5, r25	; 0x05
    15ae:	84 83       	std	Z+4, r24	; 0x04
    15b0:	1f c0       	rjmp	.+62     	; 0x15f0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    15b2:	6e 30       	cpi	r22, 0x0E	; 14
    15b4:	70 f4       	brcc	.+28     	; 0x15d2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    15b6:	83 e2       	ldi	r24, 0x23	; 35
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	85 e2       	ldi	r24, 0x25	; 37
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	93 83       	std	Z+3, r25	; 0x03
    15c4:	82 83       	std	Z+2, r24	; 0x02
    15c6:	84 e2       	ldi	r24, 0x24	; 36
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	95 83       	std	Z+5, r25	; 0x05
    15cc:	84 83       	std	Z+4, r24	; 0x04
    15ce:	68 50       	subi	r22, 0x08	; 8
    15d0:	0f c0       	rjmp	.+30     	; 0x15f0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    15d2:	65 31       	cpi	r22, 0x15	; 21
    15d4:	98 f4       	brcc	.+38     	; 0x15fc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    15d6:	86 e2       	ldi	r24, 0x26	; 38
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	88 e2       	ldi	r24, 0x28	; 40
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	93 83       	std	Z+3, r25	; 0x03
    15e4:	82 83       	std	Z+2, r24	; 0x02
    15e6:	87 e2       	ldi	r24, 0x27	; 39
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	95 83       	std	Z+5, r25	; 0x05
    15ec:	84 83       	std	Z+4, r24	; 0x04
    15ee:	6e 50       	subi	r22, 0x0E	; 14
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    15f4:	88 0f       	add	r24, r24
    15f6:	6a 95       	dec	r22
    15f8:	ea f7       	brpl	.-6      	; 0x15f4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    15fa:	86 83       	std	Z+6, r24	; 0x06
    15fc:	08 95       	ret

000015fe <_ZN16PololuQTRSensors4initEhhh>:
    15fe:	a7 e0       	ldi	r26, 0x07	; 7
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e0       	ldi	r30, 0x05	; 5
    1604:	fb e0       	ldi	r31, 0x0B	; 11
    1606:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__+0x1c>
    160a:	8c 01       	movw	r16, r24
    160c:	fc 01       	movw	r30, r24
    160e:	11 82       	std	Z+1, r1	; 0x01
    1610:	10 82       	st	Z, r1
    1612:	13 82       	std	Z+3, r1	; 0x03
    1614:	12 82       	std	Z+2, r1	; 0x02
    1616:	15 82       	std	Z+5, r1	; 0x05
    1618:	14 82       	std	Z+4, r1	; 0x04
    161a:	17 82       	std	Z+7, r1	; 0x07
    161c:	16 82       	std	Z+6, r1	; 0x06
    161e:	61 31       	cpi	r22, 0x11	; 17
    1620:	18 f0       	brcs	.+6      	; 0x1628 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    1622:	80 e1       	ldi	r24, 0x10	; 16
    1624:	80 87       	std	Z+8, r24	; 0x08
    1626:	02 c0       	rjmp	.+4      	; 0x162c <_ZN16PololuQTRSensors4initEhhh+0x2e>
    1628:	fc 01       	movw	r30, r24
    162a:	60 87       	std	Z+8, r22	; 0x08
    162c:	f8 01       	movw	r30, r16
    162e:	20 8b       	std	Z+16, r18	; 0x10
    1630:	64 2f       	mov	r22, r20
    1632:	ce 01       	movw	r24, r28
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    163a:	8f 81       	ldd	r24, Y+7	; 0x07
    163c:	f8 01       	movw	r30, r16
    163e:	81 87       	std	Z+9, r24	; 0x09
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	93 87       	std	Z+11, r25	; 0x0b
    1646:	82 87       	std	Z+10, r24	; 0x0a
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	95 87       	std	Z+13, r25	; 0x0d
    164e:	84 87       	std	Z+12, r24	; 0x0c
    1650:	27 96       	adiw	r28, 0x07	; 7
    1652:	e4 e0       	ldi	r30, 0x04	; 4
    1654:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__+0x1c>

00001658 <_ZN16PololuQTRSensors11emittersOffEv>:
    1658:	fc 01       	movw	r30, r24
    165a:	a4 85       	ldd	r26, Z+12	; 0x0c
    165c:	b5 85       	ldd	r27, Z+13	; 0x0d
    165e:	10 97       	sbiw	r26, 0x00	; 0
    1660:	79 f0       	breq	.+30     	; 0x1680 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    1662:	8c 91       	ld	r24, X
    1664:	91 85       	ldd	r25, Z+9	; 0x09
    1666:	89 2b       	or	r24, r25
    1668:	8c 93       	st	X, r24
    166a:	a2 85       	ldd	r26, Z+10	; 0x0a
    166c:	b3 85       	ldd	r27, Z+11	; 0x0b
    166e:	9c 91       	ld	r25, X
    1670:	81 85       	ldd	r24, Z+9	; 0x09
    1672:	80 95       	com	r24
    1674:	89 23       	and	r24, r25
    1676:	8c 93       	st	X, r24
    1678:	88 ec       	ldi	r24, 0xC8	; 200
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <delay_us>
    1680:	08 95       	ret

00001682 <_ZN16PololuQTRSensors10emittersOnEv>:
    1682:	fc 01       	movw	r30, r24
    1684:	a4 85       	ldd	r26, Z+12	; 0x0c
    1686:	b5 85       	ldd	r27, Z+13	; 0x0d
    1688:	10 97       	sbiw	r26, 0x00	; 0
    168a:	71 f0       	breq	.+28     	; 0x16a8 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    168c:	8c 91       	ld	r24, X
    168e:	91 85       	ldd	r25, Z+9	; 0x09
    1690:	89 2b       	or	r24, r25
    1692:	8c 93       	st	X, r24
    1694:	a2 85       	ldd	r26, Z+10	; 0x0a
    1696:	b3 85       	ldd	r27, Z+11	; 0x0b
    1698:	8c 91       	ld	r24, X
    169a:	91 85       	ldd	r25, Z+9	; 0x09
    169c:	89 2b       	or	r24, r25
    169e:	8c 93       	st	X, r24
    16a0:	88 ec       	ldi	r24, 0xC8	; 200
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <delay_us>
    16a8:	08 95       	ret

000016aa <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    16aa:	a7 e0       	ldi	r26, 0x07	; 7
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	eb e5       	ldi	r30, 0x5B	; 91
    16b0:	fb e0       	ldi	r31, 0x0B	; 11
    16b2:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__prologue_saves__+0x6>
    16b6:	7c 01       	movw	r14, r24
    16b8:	4b 01       	movw	r8, r22
    16ba:	64 2f       	mov	r22, r20
    16bc:	39 01       	movw	r6, r18
    16be:	40 2f       	mov	r20, r16
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN16PololuQTRSensors4initEhhh>
    16c6:	87 01       	movw	r16, r14
    16c8:	0f 5b       	subi	r16, 0xBF	; 191
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	f8 01       	movw	r30, r16
    16ce:	10 82       	st	Z, r1
    16d0:	67 01       	movw	r12, r14
    16d2:	f2 e4       	ldi	r31, 0x42	; 66
    16d4:	cf 0e       	add	r12, r31
    16d6:	d1 1c       	adc	r13, r1
    16d8:	f6 01       	movw	r30, r12
    16da:	10 82       	st	Z, r1
    16dc:	57 01       	movw	r10, r14
    16de:	f3 e4       	ldi	r31, 0x43	; 67
    16e0:	af 0e       	add	r10, r31
    16e2:	b1 1c       	adc	r11, r1
    16e4:	f5 01       	movw	r30, r10
    16e6:	10 82       	st	Z, r1
    16e8:	f7 01       	movw	r30, r14
    16ea:	77 86       	std	Z+15, r7	; 0x0f
    16ec:	66 86       	std	Z+14, r6	; 0x0e
    16ee:	51 2c       	mov	r5, r1
    16f0:	f7 01       	movw	r30, r14
    16f2:	80 85       	ldd	r24, Z+8	; 0x08
    16f4:	58 16       	cp	r5, r24
    16f6:	50 f5       	brcc	.+84     	; 0x174c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    16f8:	65 2c       	mov	r6, r5
    16fa:	71 2c       	mov	r7, r1
    16fc:	f4 01       	movw	r30, r8
    16fe:	e6 0d       	add	r30, r6
    1700:	f7 1d       	adc	r31, r7
    1702:	60 81       	ld	r22, Z
    1704:	ce 01       	movw	r24, r28
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    170c:	2f 81       	ldd	r18, Y+7	; 0x07
    170e:	f7 01       	movw	r30, r14
    1710:	e6 0d       	add	r30, r6
    1712:	f7 1d       	adc	r31, r7
    1714:	21 8b       	std	Z+17, r18	; 0x11
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	f3 01       	movw	r30, r6
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	ee 0d       	add	r30, r14
    1722:	ff 1d       	adc	r31, r15
    1724:	92 a3       	std	Z+34, r25	; 0x22
    1726:	81 a3       	std	Z+33, r24	; 0x21
    1728:	83 32       	cpi	r24, 0x23	; 35
    172a:	91 05       	cpc	r25, r1
    172c:	11 f4       	brne	.+4      	; 0x1732 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    172e:	f8 01       	movw	r30, r16
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    1732:	86 32       	cpi	r24, 0x26	; 38
    1734:	91 05       	cpc	r25, r1
    1736:	11 f4       	brne	.+4      	; 0x173c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    1738:	f6 01       	movw	r30, r12
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    173c:	89 97       	sbiw	r24, 0x29	; 41
    173e:	21 f4       	brne	.+8      	; 0x1748 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    1740:	f5 01       	movw	r30, r10
    1742:	80 81       	ld	r24, Z
    1744:	82 2b       	or	r24, r18
    1746:	80 83       	st	Z, r24
    1748:	53 94       	inc	r5
    174a:	d2 cf       	rjmp	.-92     	; 0x16f0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    174c:	27 96       	adiw	r28, 0x07	; 7
    174e:	ef e0       	ldi	r30, 0x0F	; 15
    1750:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <__epilogue_restores__+0x6>

00001754 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    1754:	a0 e0       	ldi	r26, 0x00	; 0
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e0 eb       	ldi	r30, 0xB0	; 176
    175a:	fb e0       	ldi	r31, 0x0B	; 11
    175c:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__prologue_saves__+0xa>
    1760:	ec 01       	movw	r28, r24
    1762:	5b 01       	movw	r10, r22
    1764:	6c 01       	movw	r12, r24
    1766:	81 e4       	ldi	r24, 0x41	; 65
    1768:	c8 0e       	add	r12, r24
    176a:	d1 1c       	adc	r13, r1
    176c:	f6 01       	movw	r30, r12
    176e:	80 80       	ld	r8, Z
    1770:	7e 01       	movw	r14, r28
    1772:	f2 e4       	ldi	r31, 0x42	; 66
    1774:	ef 0e       	add	r14, r31
    1776:	f1 1c       	adc	r15, r1
    1778:	f7 01       	movw	r30, r14
    177a:	70 80       	ld	r7, Z
    177c:	8e 01       	movw	r16, r28
    177e:	0d 5b       	subi	r16, 0xBD	; 189
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	f8 01       	movw	r30, r16
    1784:	90 80       	ld	r9, Z
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	98 85       	ldd	r25, Y+8	; 0x08
    178a:	89 17       	cp	r24, r25
    178c:	48 f4       	brcc	.+18     	; 0x17a0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    178e:	f5 01       	movw	r30, r10
    1790:	e8 0f       	add	r30, r24
    1792:	f1 1d       	adc	r31, r1
    1794:	e8 0f       	add	r30, r24
    1796:	f1 1d       	adc	r31, r1
    1798:	11 82       	std	Z+1, r1	; 0x01
    179a:	10 82       	st	Z, r1
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	f4 cf       	rjmp	.-24     	; 0x1788 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    17a0:	84 b1       	in	r24, 0x04	; 4
    17a2:	f6 01       	movw	r30, r12
    17a4:	90 81       	ld	r25, Z
    17a6:	89 2b       	or	r24, r25
    17a8:	84 b9       	out	0x04, r24	; 4
    17aa:	87 b1       	in	r24, 0x07	; 7
    17ac:	f7 01       	movw	r30, r14
    17ae:	90 81       	ld	r25, Z
    17b0:	89 2b       	or	r24, r25
    17b2:	87 b9       	out	0x07, r24	; 7
    17b4:	8a b1       	in	r24, 0x0a	; 10
    17b6:	f8 01       	movw	r30, r16
    17b8:	90 81       	ld	r25, Z
    17ba:	89 2b       	or	r24, r25
    17bc:	8a b9       	out	0x0a, r24	; 10
    17be:	85 b1       	in	r24, 0x05	; 5
    17c0:	f6 01       	movw	r30, r12
    17c2:	90 81       	ld	r25, Z
    17c4:	89 2b       	or	r24, r25
    17c6:	85 b9       	out	0x05, r24	; 5
    17c8:	88 b1       	in	r24, 0x08	; 8
    17ca:	f7 01       	movw	r30, r14
    17cc:	90 81       	ld	r25, Z
    17ce:	89 2b       	or	r24, r25
    17d0:	88 b9       	out	0x08, r24	; 8
    17d2:	8b b1       	in	r24, 0x0b	; 11
    17d4:	f8 01       	movw	r30, r16
    17d6:	90 81       	ld	r25, Z
    17d8:	89 2b       	or	r24, r25
    17da:	8b b9       	out	0x0b, r24	; 11
    17dc:	8a e0       	ldi	r24, 0x0A	; 10
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <delay_us>
    17e4:	94 b1       	in	r25, 0x04	; 4
    17e6:	f6 01       	movw	r30, r12
    17e8:	80 81       	ld	r24, Z
    17ea:	80 95       	com	r24
    17ec:	89 23       	and	r24, r25
    17ee:	84 b9       	out	0x04, r24	; 4
    17f0:	97 b1       	in	r25, 0x07	; 7
    17f2:	f7 01       	movw	r30, r14
    17f4:	80 81       	ld	r24, Z
    17f6:	80 95       	com	r24
    17f8:	89 23       	and	r24, r25
    17fa:	87 b9       	out	0x07, r24	; 7
    17fc:	9a b1       	in	r25, 0x0a	; 10
    17fe:	f8 01       	movw	r30, r16
    1800:	80 81       	ld	r24, Z
    1802:	80 95       	com	r24
    1804:	89 23       	and	r24, r25
    1806:	8a b9       	out	0x0a, r24	; 10
    1808:	95 b1       	in	r25, 0x05	; 5
    180a:	f6 01       	movw	r30, r12
    180c:	80 81       	ld	r24, Z
    180e:	80 95       	com	r24
    1810:	89 23       	and	r24, r25
    1812:	85 b9       	out	0x05, r24	; 5
    1814:	98 b1       	in	r25, 0x08	; 8
    1816:	f7 01       	movw	r30, r14
    1818:	80 81       	ld	r24, Z
    181a:	80 95       	com	r24
    181c:	89 23       	and	r24, r25
    181e:	88 b9       	out	0x08, r24	; 8
    1820:	9b b1       	in	r25, 0x0b	; 11
    1822:	f8 01       	movw	r30, r16
    1824:	80 81       	ld	r24, Z
    1826:	80 95       	com	r24
    1828:	89 23       	and	r24, r25
    182a:	8b b9       	out	0x0b, r24	; 11
    182c:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1830:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1834:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1838:	83 60       	ori	r24, 0x03	; 3
    183a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    1844:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	2e 85       	ldd	r18, Y+14	; 0x0e
    184e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1850:	82 17       	cp	r24, r18
    1852:	93 07       	cpc	r25, r19
    1854:	20 f5       	brcc	.+72     	; 0x189e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    1856:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    185a:	2c 2d       	mov	r18, r12
    185c:	24 1b       	sub	r18, r20
    185e:	82 0f       	add	r24, r18
    1860:	91 1d       	adc	r25, r1
    1862:	03 b1       	in	r16, 0x03	; 3
    1864:	08 11       	cpse	r16, r8
    1866:	32 c0       	rjmp	.+100    	; 0x18cc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1868:	f6 b0       	in	r15, 0x06	; 6
    186a:	f7 10       	cpse	r15, r7
    186c:	2f c0       	rjmp	.+94     	; 0x18cc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    186e:	29 b1       	in	r18, 0x09	; 9
    1870:	29 11       	cpse	r18, r9
    1872:	2c c0       	rjmp	.+88     	; 0x18cc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    1874:	10 c0       	rjmp	.+32     	; 0x1896 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    1876:	21 2f       	mov	r18, r17
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	a9 01       	movw	r20, r18
    187c:	44 0f       	add	r20, r20
    187e:	55 1f       	adc	r21, r21
    1880:	f5 01       	movw	r30, r10
    1882:	e4 0f       	add	r30, r20
    1884:	f5 1f       	adc	r31, r21
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	67 2b       	or	r22, r23
    188c:	21 f1       	breq	.+72     	; 0x18d6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    188e:	1f 5f       	subi	r17, 0xFF	; 255
    1890:	28 85       	ldd	r18, Y+8	; 0x08
    1892:	12 17       	cp	r17, r18
    1894:	80 f3       	brcs	.-32     	; 0x1876 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    1896:	7f 2c       	mov	r7, r15
    1898:	80 2e       	mov	r8, r16
    189a:	4c 2d       	mov	r20, r12
    189c:	d7 cf       	rjmp	.-82     	; 0x184c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    189e:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    18a2:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	88 85       	ldd	r24, Y+8	; 0x08
    18aa:	28 17       	cp	r18, r24
    18ac:	30 f5       	brcc	.+76     	; 0x18fa <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    18ae:	f5 01       	movw	r30, r10
    18b0:	e2 0f       	add	r30, r18
    18b2:	f1 1d       	adc	r31, r1
    18b4:	e2 0f       	add	r30, r18
    18b6:	f1 1d       	adc	r31, r1
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	89 2b       	or	r24, r25
    18be:	21 f4       	brne	.+8      	; 0x18c8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    18c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    18c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	2f 5f       	subi	r18, 0xFF	; 255
    18ca:	ee cf       	rjmp	.-36     	; 0x18a8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    18cc:	03 b1       	in	r16, 0x03	; 3
    18ce:	f6 b0       	in	r15, 0x06	; 6
    18d0:	99 b0       	in	r9, 0x09	; 9
    18d2:	10 e0       	ldi	r17, 0x00	; 0
    18d4:	dd cf       	rjmp	.-70     	; 0x1890 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    18d6:	de 01       	movw	r26, r28
    18d8:	a4 0f       	add	r26, r20
    18da:	b5 1f       	adc	r27, r21
    18dc:	91 96       	adiw	r26, 0x21	; 33
    18de:	0d 90       	ld	r0, X+
    18e0:	bc 91       	ld	r27, X
    18e2:	a0 2d       	mov	r26, r0
    18e4:	4c 91       	ld	r20, X
    18e6:	de 01       	movw	r26, r28
    18e8:	a2 0f       	add	r26, r18
    18ea:	b3 1f       	adc	r27, r19
    18ec:	51 96       	adiw	r26, 0x11	; 17
    18ee:	2c 91       	ld	r18, X
    18f0:	42 23       	and	r20, r18
    18f2:	69 f6       	brne	.-102    	; 0x188e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    18f8:	ca cf       	rjmp	.-108    	; 0x188e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	ed e0       	ldi	r30, 0x0D	; 13
    1900:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__epilogue_restores__+0xa>

00001904 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	fc 01       	movw	r30, r24
    1912:	9b 01       	movw	r18, r22
    1914:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1918:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    191c:	47 b1       	in	r20, 0x07	; 7
    191e:	18 b1       	in	r17, 0x08	; 8
    1920:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1924:	86 fd       	sbrc	r24, 6
    1926:	fc cf       	rjmp	.-8      	; 0x1920 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 85       	ldd	r25, Z+8	; 0x08
    192c:	89 17       	cp	r24, r25
    192e:	48 f4       	brcc	.+18     	; 0x1942 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    1930:	d9 01       	movw	r26, r18
    1932:	a8 0f       	add	r26, r24
    1934:	b1 1d       	adc	r27, r1
    1936:	a8 0f       	add	r26, r24
    1938:	b1 1d       	adc	r27, r1
    193a:	1d 92       	st	X+, r1
    193c:	1c 92       	st	X, r1
    193e:	8f 5f       	subi	r24, 0xFF	; 255
    1940:	f4 cf       	rjmp	.-24     	; 0x192a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    1942:	97 b1       	in	r25, 0x07	; 7
    1944:	82 a1       	ldd	r24, Z+34	; 0x22
    1946:	80 95       	com	r24
    1948:	89 23       	and	r24, r25
    194a:	87 b9       	out	0x07, r24	; 7
    194c:	98 b1       	in	r25, 0x08	; 8
    194e:	82 a1       	ldd	r24, Z+34	; 0x22
    1950:	80 95       	com	r24
    1952:	89 23       	and	r24, r25
    1954:	88 b9       	out	0x08, r24	; 8
    1956:	87 e8       	ldi	r24, 0x87	; 135
    1958:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    195c:	e1 2c       	mov	r14, r1
    195e:	81 a1       	ldd	r24, Z+33	; 0x21
    1960:	e8 16       	cp	r14, r24
    1962:	10 f0       	brcs	.+4      	; 0x1968 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    1964:	e1 2c       	mov	r14, r1
    1966:	29 c0       	rjmp	.+82     	; 0x19ba <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	80 85       	ldd	r24, Z+8	; 0x08
    196c:	58 17       	cp	r21, r24
    196e:	18 f5       	brcc	.+70     	; 0x19b6 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    1970:	a5 2f       	mov	r26, r21
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	ef 01       	movw	r28, r30
    1976:	ca 0f       	add	r28, r26
    1978:	db 1f       	adc	r29, r27
    197a:	89 89       	ldd	r24, Y+17	; 0x11
    197c:	80 64       	ori	r24, 0x40	; 64
    197e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1982:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1986:	80 64       	ori	r24, 0x40	; 64
    1988:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    198c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1990:	86 fd       	sbrc	r24, 6
    1992:	fc cf       	rjmp	.-8      	; 0x198c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    1994:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1998:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    199c:	aa 0f       	add	r26, r26
    199e:	bb 1f       	adc	r27, r27
    19a0:	a2 0f       	add	r26, r18
    19a2:	b3 1f       	adc	r27, r19
    19a4:	8d 91       	ld	r24, X+
    19a6:	9c 91       	ld	r25, X
    19a8:	11 97       	sbiw	r26, 0x01	; 1
    19aa:	86 0f       	add	r24, r22
    19ac:	97 1f       	adc	r25, r23
    19ae:	8d 93       	st	X+, r24
    19b0:	9c 93       	st	X, r25
    19b2:	5f 5f       	subi	r21, 0xFF	; 255
    19b4:	da cf       	rjmp	.-76     	; 0x196a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    19b6:	e3 94       	inc	r14
    19b8:	d2 cf       	rjmp	.-92     	; 0x195e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    19ba:	80 85       	ldd	r24, Z+8	; 0x08
    19bc:	e8 16       	cp	r14, r24
    19be:	a0 f4       	brcc	.+40     	; 0x19e8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    19c0:	e9 01       	movw	r28, r18
    19c2:	ce 0d       	add	r28, r14
    19c4:	d1 1d       	adc	r29, r1
    19c6:	ce 0d       	add	r28, r14
    19c8:	d1 1d       	adc	r29, r1
    19ca:	61 a1       	ldd	r22, Z+33	; 0x21
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	cb 01       	movw	r24, r22
    19d0:	95 95       	asr	r25
    19d2:	87 95       	ror	r24
    19d4:	a8 81       	ld	r26, Y
    19d6:	b9 81       	ldd	r27, Y+1	; 0x01
    19d8:	8a 0f       	add	r24, r26
    19da:	9b 1f       	adc	r25, r27
    19dc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__udivmodhi4>
    19e0:	79 83       	std	Y+1, r23	; 0x01
    19e2:	68 83       	st	Y, r22
    19e4:	e3 94       	inc	r14
    19e6:	e9 cf       	rjmp	.-46     	; 0x19ba <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    19e8:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    19ec:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    19f0:	18 b9       	out	0x08, r17	; 8
    19f2:	47 b9       	out	0x07, r20	; 7
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	e6 e0       	ldi	r30, 0x06	; 6
    19fa:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__epilogue_restores__+0x18>

000019fe <_ZN16PololuQTRSensors4readEPjh>:
    19fe:	a0 e2       	ldi	r26, 0x20	; 32
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e5 e0       	ldi	r30, 0x05	; 5
    1a04:	fd e0       	ldi	r31, 0x0D	; 13
    1a06:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__prologue_saves__+0x16>
    1a0a:	8c 01       	movw	r16, r24
    1a0c:	7b 01       	movw	r14, r22
    1a0e:	d4 2e       	mov	r13, r20
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	84 0f       	add	r24, r20
    1a14:	82 30       	cpi	r24, 0x02	; 2
    1a16:	18 f4       	brcc	.+6      	; 0x1a1e <_ZN16PololuQTRSensors4readEPjh+0x20>
    1a18:	c8 01       	movw	r24, r16
    1a1a:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN16PololuQTRSensors10emittersOnEv>
    1a1e:	d8 01       	movw	r26, r16
    1a20:	50 96       	adiw	r26, 0x10	; 16
    1a22:	8c 91       	ld	r24, X
    1a24:	b7 01       	movw	r22, r14
    1a26:	81 11       	cpse	r24, r1
    1a28:	10 c0       	rjmp	.+32     	; 0x1a4a <_ZN16PololuQTRSensors4readEPjh+0x4c>
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1a30:	c8 01       	movw	r24, r16
    1a32:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN16PololuQTRSensors11emittersOffEv>
    1a36:	b2 e0       	ldi	r27, 0x02	; 2
    1a38:	db 12       	cpse	r13, r27
    1a3a:	3a c0       	rjmp	.+116    	; 0x1ab0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1a3c:	be 01       	movw	r22, r28
    1a3e:	6f 5f       	subi	r22, 0xFF	; 255
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	c8 01       	movw	r24, r16
    1a44:	0e 94 aa 0b 	call	0x1754	; 0x1754 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	0e 94 82 0c 	call	0x1904	; 0x1904 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1a50:	c8 01       	movw	r24, r16
    1a52:	0e 94 2c 0b 	call	0x1658	; 0x1658 <_ZN16PololuQTRSensors11emittersOffEv>
    1a56:	e2 e0       	ldi	r30, 0x02	; 2
    1a58:	de 12       	cpse	r13, r30
    1a5a:	2a c0       	rjmp	.+84     	; 0x1ab0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1a5c:	be 01       	movw	r22, r28
    1a5e:	6f 5f       	subi	r22, 0xFF	; 255
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	c8 01       	movw	r24, r16
    1a64:	0e 94 82 0c 	call	0x1904	; 0x1904 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	f8 01       	movw	r30, r16
    1a6c:	80 85       	ldd	r24, Z+8	; 0x08
    1a6e:	48 17       	cp	r20, r24
    1a70:	f8 f4       	brcc	.+62     	; 0x1ab0 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    1a72:	84 2f       	mov	r24, r20
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	f7 01       	movw	r30, r14
    1a7c:	e8 0f       	add	r30, r24
    1a7e:	f9 1f       	adc	r31, r25
    1a80:	21 e0       	ldi	r18, 0x01	; 1
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	2c 0f       	add	r18, r28
    1a86:	3d 1f       	adc	r19, r29
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	d8 01       	movw	r26, r16
    1a8e:	1e 96       	adiw	r26, 0x0e	; 14
    1a90:	2d 91       	ld	r18, X+
    1a92:	3c 91       	ld	r19, X
    1a94:	1f 97       	sbiw	r26, 0x0f	; 15
    1a96:	dc 01       	movw	r26, r24
    1a98:	8d 91       	ld	r24, X+
    1a9a:	9c 91       	ld	r25, X
    1a9c:	28 1b       	sub	r18, r24
    1a9e:	39 0b       	sbc	r19, r25
    1aa0:	80 81       	ld	r24, Z
    1aa2:	91 81       	ldd	r25, Z+1	; 0x01
    1aa4:	82 0f       	add	r24, r18
    1aa6:	93 1f       	adc	r25, r19
    1aa8:	91 83       	std	Z+1, r25	; 0x01
    1aaa:	80 83       	st	Z, r24
    1aac:	4f 5f       	subi	r20, 0xFF	; 255
    1aae:	dd cf       	rjmp	.-70     	; 0x1a6a <_ZN16PololuQTRSensors4readEPjh+0x6c>
    1ab0:	a0 96       	adiw	r28, 0x20	; 32
    1ab2:	e7 e0       	ldi	r30, 0x07	; 7
    1ab4:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__epilogue_restores__+0x16>

00001ab8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    1ab8:	2f 92       	push	r2
    1aba:	3f 92       	push	r3
    1abc:	5f 92       	push	r5
    1abe:	6f 92       	push	r6
    1ac0:	7f 92       	push	r7
    1ac2:	8f 92       	push	r8
    1ac4:	9f 92       	push	r9
    1ac6:	af 92       	push	r10
    1ac8:	bf 92       	push	r11
    1aca:	cf 92       	push	r12
    1acc:	df 92       	push	r13
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	1f 93       	push	r17
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	c0 56       	subi	r28, 0x60	; 96
    1ae0:	d1 09       	sbc	r29, r1
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	8c 01       	movw	r16, r24
    1aee:	4b 01       	movw	r8, r22
    1af0:	5a 01       	movw	r10, r20
    1af2:	52 2e       	mov	r5, r18
    1af4:	da 01       	movw	r26, r20
    1af6:	8d 91       	ld	r24, X+
    1af8:	9c 91       	ld	r25, X
    1afa:	89 2b       	or	r24, r25
    1afc:	31 f0       	breq	.+12     	; 0x1b0a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    1afe:	f4 01       	movw	r30, r8
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	89 2b       	or	r24, r25
    1b06:	f1 f4       	brne	.+60     	; 0x1b44 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1b08:	24 c0       	rjmp	.+72     	; 0x1b52 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    1b0a:	d8 01       	movw	r26, r16
    1b0c:	18 96       	adiw	r26, 0x08	; 8
    1b0e:	8c 91       	ld	r24, X
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0e 94 89 10 	call	0x2112	; 0x2112 <malloc>
    1b1a:	f5 01       	movw	r30, r10
    1b1c:	91 83       	std	Z+1, r25	; 0x01
    1b1e:	80 83       	st	Z, r24
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    1b24:	b1 c0       	rjmp	.+354    	; 0x1c88 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1b26:	fc 01       	movw	r30, r24
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	d8 01       	movw	r26, r16
    1b2e:	18 96       	adiw	r26, 0x08	; 8
    1b30:	8c 91       	ld	r24, X
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	28 17       	cp	r18, r24
    1b36:	39 07       	cpc	r19, r25
    1b38:	14 f7       	brge	.-60     	; 0x1afe <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    1b3a:	11 92       	st	Z+, r1
    1b3c:	11 92       	st	Z+, r1
    1b3e:	2f 5f       	subi	r18, 0xFF	; 255
    1b40:	3f 4f       	sbci	r19, 0xFF	; 255
    1b42:	f4 cf       	rjmp	.-24     	; 0x1b2c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    1b44:	e1 2c       	mov	r14, r1
    1b46:	f1 2c       	mov	r15, r1
    1b48:	6e 01       	movw	r12, r28
    1b4a:	b1 e2       	ldi	r27, 0x21	; 33
    1b4c:	cb 0e       	add	r12, r27
    1b4e:	d1 1c       	adc	r13, r1
    1b50:	21 c0       	rjmp	.+66     	; 0x1b94 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1b52:	f8 01       	movw	r30, r16
    1b54:	80 85       	ldd	r24, Z+8	; 0x08
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	0e 94 89 10 	call	0x2112	; 0x2112 <malloc>
    1b60:	d4 01       	movw	r26, r8
    1b62:	8d 93       	st	X+, r24
    1b64:	9c 93       	st	X, r25
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    1b6a:	8e c0       	rjmp	.+284    	; 0x1c88 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	d8 01       	movw	r26, r16
    1b74:	18 96       	adiw	r26, 0x08	; 8
    1b76:	8c 91       	ld	r24, X
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	28 17       	cp	r18, r24
    1b7c:	39 07       	cpc	r19, r25
    1b7e:	14 f7       	brge	.-60     	; 0x1b44 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    1b80:	d8 01       	movw	r26, r16
    1b82:	1e 96       	adiw	r26, 0x0e	; 14
    1b84:	8d 91       	ld	r24, X+
    1b86:	9c 91       	ld	r25, X
    1b88:	1f 97       	sbiw	r26, 0x0f	; 15
    1b8a:	81 93       	st	Z+, r24
    1b8c:	91 93       	st	Z+, r25
    1b8e:	2f 5f       	subi	r18, 0xFF	; 255
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	ef cf       	rjmp	.-34     	; 0x1b72 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    1b94:	45 2d       	mov	r20, r5
    1b96:	be 01       	movw	r22, r28
    1b98:	6f 5b       	subi	r22, 0xBF	; 191
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	c8 01       	movw	r24, r16
    1b9e:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <_ZN16PololuQTRSensors4readEPjh>
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	60 84       	ldd	r6, Z+8	; 0x08
    1ba6:	71 2c       	mov	r7, r1
    1ba8:	fe 01       	movw	r30, r28
    1baa:	ef 5b       	subi	r30, 0xBF	; 191
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	c6 01       	movw	r24, r12
    1bb0:	9e 01       	movw	r18, r28
    1bb2:	2f 5f       	subi	r18, 0xFF	; 255
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	19 01       	movw	r2, r18
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	26 15       	cp	r18, r6
    1bbe:	37 05       	cpc	r19, r7
    1bc0:	4c f5       	brge	.+82     	; 0x1c14 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    1bc2:	e1 14       	cp	r14, r1
    1bc4:	f1 04       	cpc	r15, r1
    1bc6:	89 f0       	breq	.+34     	; 0x1bea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	6d 91       	ld	r22, X+
    1bcc:	7c 91       	ld	r23, X
    1bce:	40 81       	ld	r20, Z
    1bd0:	51 81       	ldd	r21, Z+1	; 0x01
    1bd2:	64 17       	cp	r22, r20
    1bd4:	75 07       	cpc	r23, r21
    1bd6:	48 f0       	brcs	.+18     	; 0x1bea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    1bd8:	d1 01       	movw	r26, r2
    1bda:	6d 91       	ld	r22, X+
    1bdc:	7c 91       	ld	r23, X
    1bde:	40 81       	ld	r20, Z
    1be0:	51 81       	ldd	r21, Z+1	; 0x01
    1be2:	46 17       	cp	r20, r22
    1be4:	57 07       	cpc	r21, r23
    1be6:	48 f0       	brcs	.+18     	; 0x1bfa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    1be8:	0d c0       	rjmp	.+26     	; 0x1c04 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    1bea:	40 81       	ld	r20, Z
    1bec:	51 81       	ldd	r21, Z+1	; 0x01
    1bee:	dc 01       	movw	r26, r24
    1bf0:	4d 93       	st	X+, r20
    1bf2:	5c 93       	st	X, r21
    1bf4:	e1 14       	cp	r14, r1
    1bf6:	f1 04       	cpc	r15, r1
    1bf8:	79 f7       	brne	.-34     	; 0x1bd8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    1bfa:	40 81       	ld	r20, Z
    1bfc:	51 81       	ldd	r21, Z+1	; 0x01
    1bfe:	d1 01       	movw	r26, r2
    1c00:	4d 93       	st	X+, r20
    1c02:	5c 93       	st	X, r21
    1c04:	2f 5f       	subi	r18, 0xFF	; 255
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
    1c08:	b2 e0       	ldi	r27, 0x02	; 2
    1c0a:	2b 0e       	add	r2, r27
    1c0c:	31 1c       	adc	r3, r1
    1c0e:	32 96       	adiw	r30, 0x02	; 2
    1c10:	02 96       	adiw	r24, 0x02	; 2
    1c12:	d4 cf       	rjmp	.-88     	; 0x1bbc <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    1c14:	ef ef       	ldi	r30, 0xFF	; 255
    1c16:	ee 1a       	sub	r14, r30
    1c18:	fe 0a       	sbc	r15, r30
    1c1a:	fa e0       	ldi	r31, 0x0A	; 10
    1c1c:	ef 16       	cp	r14, r31
    1c1e:	f1 04       	cpc	r15, r1
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    1c22:	b8 cf       	rjmp	.-144    	; 0x1b94 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    1c24:	9e 01       	movw	r18, r28
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	79 01       	movw	r14, r18
    1c2c:	36 01       	movw	r6, r12
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	f8 01       	movw	r30, r16
    1c34:	20 85       	ldd	r18, Z+8	; 0x08
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	82 17       	cp	r24, r18
    1c3a:	93 07       	cpc	r25, r19
    1c3c:	2c f5       	brge	.+74     	; 0x1c88 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    1c3e:	d7 01       	movw	r26, r14
    1c40:	2d 91       	ld	r18, X+
    1c42:	3d 91       	ld	r19, X+
    1c44:	7d 01       	movw	r14, r26
    1c46:	b3 01       	movw	r22, r6
    1c48:	6c 19       	sub	r22, r12
    1c4a:	7d 09       	sbc	r23, r13
    1c4c:	d5 01       	movw	r26, r10
    1c4e:	ed 91       	ld	r30, X+
    1c50:	fc 91       	ld	r31, X
    1c52:	e6 0f       	add	r30, r22
    1c54:	f7 1f       	adc	r31, r23
    1c56:	40 81       	ld	r20, Z
    1c58:	51 81       	ldd	r21, Z+1	; 0x01
    1c5a:	42 17       	cp	r20, r18
    1c5c:	53 07       	cpc	r21, r19
    1c5e:	10 f4       	brcc	.+4      	; 0x1c64 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    1c60:	31 83       	std	Z+1, r19	; 0x01
    1c62:	20 83       	st	Z, r18
    1c64:	f3 01       	movw	r30, r6
    1c66:	21 91       	ld	r18, Z+
    1c68:	31 91       	ld	r19, Z+
    1c6a:	3f 01       	movw	r6, r30
    1c6c:	d4 01       	movw	r26, r8
    1c6e:	ed 91       	ld	r30, X+
    1c70:	fc 91       	ld	r31, X
    1c72:	e6 0f       	add	r30, r22
    1c74:	f7 1f       	adc	r31, r23
    1c76:	40 81       	ld	r20, Z
    1c78:	51 81       	ldd	r21, Z+1	; 0x01
    1c7a:	24 17       	cp	r18, r20
    1c7c:	35 07       	cpc	r19, r21
    1c7e:	10 f4       	brcc	.+4      	; 0x1c84 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    1c80:	31 83       	std	Z+1, r19	; 0x01
    1c82:	20 83       	st	Z, r18
    1c84:	01 96       	adiw	r24, 0x01	; 1
    1c86:	d5 cf       	rjmp	.-86     	; 0x1c32 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    1c88:	c0 5a       	subi	r28, 0xA0	; 160
    1c8a:	df 4f       	sbci	r29, 0xFF	; 255
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
    1cae:	7f 90       	pop	r7
    1cb0:	6f 90       	pop	r6
    1cb2:	5f 90       	pop	r5
    1cb4:	3f 90       	pop	r3
    1cb6:	2f 90       	pop	r2
    1cb8:	08 95       	ret

00001cba <_ZN16PololuQTRSensors9calibrateEh>:
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	ec 01       	movw	r28, r24
    1cc2:	16 2f       	mov	r17, r22
    1cc4:	8f ef       	ldi	r24, 0xFF	; 255
    1cc6:	86 0f       	add	r24, r22
    1cc8:	82 30       	cpi	r24, 0x02	; 2
    1cca:	18 f0       	brcs	.+6      	; 0x1cd2 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    1ccc:	66 23       	and	r22, r22
    1cce:	59 f0       	breq	.+22     	; 0x1ce6 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    1cd0:	14 c0       	rjmp	.+40     	; 0x1cfa <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1cd2:	21 e0       	ldi	r18, 0x01	; 1
    1cd4:	ae 01       	movw	r20, r28
    1cd6:	4e 5f       	subi	r20, 0xFE	; 254
    1cd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1cda:	be 01       	movw	r22, r28
    1cdc:	ce 01       	movw	r24, r28
    1cde:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1ce2:	12 30       	cpi	r17, 0x02	; 2
    1ce4:	51 f4       	brne	.+20     	; 0x1cfa <_ZN16PololuQTRSensors9calibrateEh+0x40>
    1ce6:	ae 01       	movw	r20, r28
    1ce8:	4a 5f       	subi	r20, 0xFA	; 250
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	be 01       	movw	r22, r28
    1cee:	6c 5f       	subi	r22, 0xFC	; 252
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    1cfa:	df 91       	pop	r29
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	08 95       	ret

00001d02 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    1d02:	a0 e0       	ldi	r26, 0x00	; 0
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e7 e8       	ldi	r30, 0x87	; 135
    1d08:	fe e0       	ldi	r31, 0x0E	; 14
    1d0a:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__prologue_saves__+0x12>
    1d0e:	ec 01       	movw	r28, r24
    1d10:	8b 01       	movw	r16, r22
    1d12:	b4 2e       	mov	r11, r20
    1d14:	84 2f       	mov	r24, r20
    1d16:	8d 7f       	andi	r24, 0xFD	; 253
    1d18:	51 f4       	brne	.+20     	; 0x1d2e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	89 2b       	or	r24, r25
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    1d22:	97 c0       	rjmp	.+302    	; 0x1e52 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	9f 81       	ldd	r25, Y+7	; 0x07
    1d28:	89 2b       	or	r24, r25
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    1d2c:	92 c0       	rjmp	.+292    	; 0x1e52 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1d2e:	8f ef       	ldi	r24, 0xFF	; 255
    1d30:	8b 0d       	add	r24, r11
    1d32:	82 30       	cpi	r24, 0x02	; 2
    1d34:	50 f4       	brcc	.+20     	; 0x1d4a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1d36:	88 81       	ld	r24, Y
    1d38:	99 81       	ldd	r25, Y+1	; 0x01
    1d3a:	89 2b       	or	r24, r25
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    1d3e:	89 c0       	rjmp	.+274    	; 0x1e52 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	9b 81       	ldd	r25, Y+3	; 0x03
    1d44:	89 2b       	or	r24, r25
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    1d48:	84 c0       	rjmp	.+264    	; 0x1e52 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1d4a:	4b 2d       	mov	r20, r11
    1d4c:	b8 01       	movw	r22, r16
    1d4e:	ce 01       	movw	r24, r28
    1d50:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <_ZN16PololuQTRSensors4readEPjh>
    1d54:	78 01       	movw	r14, r16
    1d56:	00 e0       	ldi	r16, 0x00	; 0
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	c1 2c       	mov	r12, r1
    1d5c:	d1 2c       	mov	r13, r1
    1d5e:	88 85       	ldd	r24, Y+8	; 0x08
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	c8 16       	cp	r12, r24
    1d64:	d9 06       	cpc	r13, r25
    1d66:	0c f0       	brlt	.+2      	; 0x1d6a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    1d68:	74 c0       	rjmp	.+232    	; 0x1e52 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	b8 12       	cpse	r11, r24
    1d6e:	0a c0       	rjmp	.+20     	; 0x1d84 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    1d70:	ea 81       	ldd	r30, Y+2	; 0x02
    1d72:	fb 81       	ldd	r31, Y+3	; 0x03
    1d74:	e0 0f       	add	r30, r16
    1d76:	f1 1f       	adc	r31, r17
    1d78:	01 90       	ld	r0, Z+
    1d7a:	f0 81       	ld	r31, Z
    1d7c:	e0 2d       	mov	r30, r0
    1d7e:	a8 81       	ld	r26, Y
    1d80:	b9 81       	ldd	r27, Y+1	; 0x01
    1d82:	0d c0       	rjmp	.+26     	; 0x1d9e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	9d 81       	ldd	r25, Y+5	; 0x05
    1d88:	2e 81       	ldd	r18, Y+6	; 0x06
    1d8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d8c:	b1 10       	cpse	r11, r1
    1d8e:	0c c0       	rjmp	.+24     	; 0x1da8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    1d90:	f9 01       	movw	r30, r18
    1d92:	e0 0f       	add	r30, r16
    1d94:	f1 1f       	adc	r31, r17
    1d96:	01 90       	ld	r0, Z+
    1d98:	f0 81       	ld	r31, Z
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	a0 0f       	add	r26, r16
    1da0:	b1 1f       	adc	r27, r17
    1da2:	8d 91       	ld	r24, X+
    1da4:	9c 91       	ld	r25, X
    1da6:	28 c0       	rjmp	.+80     	; 0x1df8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1da8:	fc 01       	movw	r30, r24
    1daa:	e0 0f       	add	r30, r16
    1dac:	f1 1f       	adc	r31, r17
    1dae:	40 81       	ld	r20, Z
    1db0:	51 81       	ldd	r21, Z+1	; 0x01
    1db2:	e8 81       	ld	r30, Y
    1db4:	f9 81       	ldd	r31, Y+1	; 0x01
    1db6:	e0 0f       	add	r30, r16
    1db8:	f1 1f       	adc	r31, r17
    1dba:	80 81       	ld	r24, Z
    1dbc:	91 81       	ldd	r25, Z+1	; 0x01
    1dbe:	ee 85       	ldd	r30, Y+14	; 0x0e
    1dc0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dc2:	48 17       	cp	r20, r24
    1dc4:	59 07       	cpc	r21, r25
    1dc6:	10 f4       	brcc	.+4      	; 0x1dcc <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    1dc8:	cf 01       	movw	r24, r30
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    1dcc:	8e 0f       	add	r24, r30
    1dce:	9f 1f       	adc	r25, r31
    1dd0:	84 1b       	sub	r24, r20
    1dd2:	95 0b       	sbc	r25, r21
    1dd4:	d9 01       	movw	r26, r18
    1dd6:	a0 0f       	add	r26, r16
    1dd8:	b1 1f       	adc	r27, r17
    1dda:	2d 91       	ld	r18, X+
    1ddc:	3c 91       	ld	r19, X
    1dde:	aa 81       	ldd	r26, Y+2	; 0x02
    1de0:	bb 81       	ldd	r27, Y+3	; 0x03
    1de2:	a0 0f       	add	r26, r16
    1de4:	b1 1f       	adc	r27, r17
    1de6:	4d 91       	ld	r20, X+
    1de8:	5c 91       	ld	r21, X
    1dea:	24 17       	cp	r18, r20
    1dec:	35 07       	cpc	r19, r21
    1dee:	20 f0       	brcs	.+8      	; 0x1df8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    1df0:	e4 0f       	add	r30, r20
    1df2:	f5 1f       	adc	r31, r21
    1df4:	e2 1b       	sub	r30, r18
    1df6:	f3 0b       	sbc	r31, r19
    1df8:	e8 1b       	sub	r30, r24
    1dfa:	f9 0b       	sbc	r31, r25
    1dfc:	a9 f0       	breq	.+42     	; 0x1e28 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    1dfe:	d7 01       	movw	r26, r14
    1e00:	2d 91       	ld	r18, X+
    1e02:	3c 91       	ld	r19, X
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	28 1b       	sub	r18, r24
    1e0a:	39 0b       	sbc	r19, r25
    1e0c:	41 09       	sbc	r20, r1
    1e0e:	51 09       	sbc	r21, r1
    1e10:	a8 ee       	ldi	r26, 0xE8	; 232
    1e12:	b3 e0       	ldi	r27, 0x03	; 3
    1e14:	0e 94 3f 10 	call	0x207e	; 0x207e <__muluhisi3>
    1e18:	9f 01       	movw	r18, r30
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	0e 94 0b 10 	call	0x2016	; 0x2016 <__divmodsi4>
    1e22:	37 fd       	sbrc	r19, 7
    1e24:	0a c0       	rjmp	.+20     	; 0x1e3a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	29 3e       	cpi	r18, 0xE9	; 233
    1e2e:	b3 e0       	ldi	r27, 0x03	; 3
    1e30:	3b 07       	cpc	r19, r27
    1e32:	2c f0       	brlt	.+10     	; 0x1e3e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1e34:	28 ee       	ldi	r18, 0xE8	; 232
    1e36:	33 e0       	ldi	r19, 0x03	; 3
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	f7 01       	movw	r30, r14
    1e40:	21 93       	st	Z+, r18
    1e42:	31 93       	st	Z+, r19
    1e44:	7f 01       	movw	r14, r30
    1e46:	ff ef       	ldi	r31, 0xFF	; 255
    1e48:	cf 1a       	sub	r12, r31
    1e4a:	df 0a       	sbc	r13, r31
    1e4c:	0e 5f       	subi	r16, 0xFE	; 254
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	86 cf       	rjmp	.-244    	; 0x1d5e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	e9 e0       	ldi	r30, 0x09	; 9
    1e58:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__epilogue_restores__+0x12>

00001e5c <_ZN16PololuQTRSensors8readLineEPjhh>:
    1e5c:	a0 e0       	ldi	r26, 0x00	; 0
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e4 e3       	ldi	r30, 0x34	; 52
    1e62:	ff e0       	ldi	r31, 0x0F	; 15
    1e64:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <__prologue_saves__>
    1e68:	ec 01       	movw	r28, r24
    1e6a:	8b 01       	movw	r16, r22
    1e6c:	82 2e       	mov	r8, r18
    1e6e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    1e72:	28 84       	ldd	r2, Y+8	; 0x08
    1e74:	e8 01       	movw	r28, r16
    1e76:	41 2c       	mov	r4, r1
    1e78:	51 2c       	mov	r5, r1
    1e7a:	32 01       	movw	r6, r4
    1e7c:	00 e0       	ldi	r16, 0x00	; 0
    1e7e:	10 e0       	ldi	r17, 0x00	; 0
    1e80:	c1 2c       	mov	r12, r1
    1e82:	d1 2c       	mov	r13, r1
    1e84:	76 01       	movw	r14, r12
    1e86:	31 2c       	mov	r3, r1
    1e88:	91 2c       	mov	r9, r1
    1e8a:	58 ee       	ldi	r21, 0xE8	; 232
    1e8c:	a5 2e       	mov	r10, r21
    1e8e:	53 e0       	ldi	r21, 0x03	; 3
    1e90:	b5 2e       	mov	r11, r21
    1e92:	92 14       	cp	r9, r2
    1e94:	21 f1       	breq	.+72     	; 0x1ede <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    1e96:	e9 91       	ld	r30, Y+
    1e98:	f9 91       	ld	r31, Y+
    1e9a:	88 20       	and	r8, r8
    1e9c:	21 f0       	breq	.+8      	; 0x1ea6 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    1e9e:	c5 01       	movw	r24, r10
    1ea0:	8e 1b       	sub	r24, r30
    1ea2:	9f 0b       	sbc	r25, r31
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	e9 3c       	cpi	r30, 0xC9	; 201
    1ea8:	f1 05       	cpc	r31, r1
    1eaa:	24 f4       	brge	.+8      	; 0x1eb4 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    1eac:	e3 33       	cpi	r30, 0x33	; 51
    1eae:	f1 05       	cpc	r31, r1
    1eb0:	74 f0       	brlt	.+28     	; 0x1ece <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    1eb4:	33 24       	eor	r3, r3
    1eb6:	33 94       	inc	r3
    1eb8:	df 01       	movw	r26, r30
    1eba:	a3 01       	movw	r20, r6
    1ebc:	92 01       	movw	r18, r4
    1ebe:	0e 94 4a 10 	call	0x2094	; 0x2094 <__mulshisi3>
    1ec2:	c6 0e       	add	r12, r22
    1ec4:	d7 1e       	adc	r13, r23
    1ec6:	e8 1e       	adc	r14, r24
    1ec8:	f9 1e       	adc	r15, r25
    1eca:	0e 0f       	add	r16, r30
    1ecc:	1f 1f       	adc	r17, r31
    1ece:	93 94       	inc	r9
    1ed0:	98 ee       	ldi	r25, 0xE8	; 232
    1ed2:	49 0e       	add	r4, r25
    1ed4:	93 e0       	ldi	r25, 0x03	; 3
    1ed6:	59 1e       	adc	r5, r25
    1ed8:	61 1c       	adc	r6, r1
    1eda:	71 1c       	adc	r7, r1
    1edc:	da cf       	rjmp	.-76     	; 0x1e92 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    1ede:	31 10       	cpse	r3, r1
    1ee0:	1e c0       	rjmp	.+60     	; 0x1f1e <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    1ee2:	49 2d       	mov	r20, r9
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	41 50       	subi	r20, 0x01	; 1
    1ee8:	51 09       	sbc	r21, r1
    1eea:	24 ef       	ldi	r18, 0xF4	; 244
    1eec:	31 e0       	ldi	r19, 0x01	; 1
    1eee:	42 9f       	mul	r20, r18
    1ef0:	c0 01       	movw	r24, r0
    1ef2:	43 9f       	mul	r20, r19
    1ef4:	90 0d       	add	r25, r0
    1ef6:	52 9f       	mul	r21, r18
    1ef8:	90 0d       	add	r25, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    1f00:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    1f04:	28 17       	cp	r18, r24
    1f06:	39 07       	cpc	r19, r25
    1f08:	b4 f0       	brlt	.+44     	; 0x1f36 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    1f0a:	88 ee       	ldi	r24, 0xE8	; 232
    1f0c:	93 e0       	ldi	r25, 0x03	; 3
    1f0e:	48 9f       	mul	r20, r24
    1f10:	90 01       	movw	r18, r0
    1f12:	49 9f       	mul	r20, r25
    1f14:	30 0d       	add	r19, r0
    1f16:	58 9f       	mul	r21, r24
    1f18:	30 0d       	add	r19, r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	0e c0       	rjmp	.+28     	; 0x1f3a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    1f1e:	98 01       	movw	r18, r16
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	c7 01       	movw	r24, r14
    1f26:	b6 01       	movw	r22, r12
    1f28:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
    1f2c:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    1f30:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	c9 01       	movw	r24, r18
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	e2 e1       	ldi	r30, 0x12	; 18
    1f42:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__epilogue_restores__>

00001f46 <_ZN16PololuQTRSensorsD1Ev>:
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	ec 01       	movw	r28, r24
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	11 f0       	breq	.+4      	; 0x1f58 <_ZN16PololuQTRSensorsD1Ev+0x12>
    1f54:	0e 94 21 11 	call	0x2242	; 0x2242 <free>
    1f58:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	11 f0       	breq	.+4      	; 0x1f64 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    1f60:	0e 94 21 11 	call	0x2242	; 0x2242 <free>
    1f64:	88 81       	ld	r24, Y
    1f66:	99 81       	ldd	r25, Y+1	; 0x01
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	11 f0       	breq	.+4      	; 0x1f70 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    1f6c:	0e 94 21 11 	call	0x2242	; 0x2242 <free>
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	11 f0       	breq	.+4      	; 0x1f7c <_ZN16PololuQTRSensorsD1Ev+0x36>
    1f78:	0e 94 21 11 	call	0x2242	; 0x2242 <free>
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	08 95       	ret

00001f82 <__udivmodhi4>:
    1f82:	aa 1b       	sub	r26, r26
    1f84:	bb 1b       	sub	r27, r27
    1f86:	51 e1       	ldi	r21, 0x11	; 17
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <__udivmodhi4_ep>

00001f8a <__udivmodhi4_loop>:
    1f8a:	aa 1f       	adc	r26, r26
    1f8c:	bb 1f       	adc	r27, r27
    1f8e:	a6 17       	cp	r26, r22
    1f90:	b7 07       	cpc	r27, r23
    1f92:	10 f0       	brcs	.+4      	; 0x1f98 <__udivmodhi4_ep>
    1f94:	a6 1b       	sub	r26, r22
    1f96:	b7 0b       	sbc	r27, r23

00001f98 <__udivmodhi4_ep>:
    1f98:	88 1f       	adc	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	5a 95       	dec	r21
    1f9e:	a9 f7       	brne	.-22     	; 0x1f8a <__udivmodhi4_loop>
    1fa0:	80 95       	com	r24
    1fa2:	90 95       	com	r25
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	08 95       	ret

00001faa <__divmodhi4>:
    1faa:	97 fb       	bst	r25, 7
    1fac:	07 2e       	mov	r0, r23
    1fae:	16 f4       	brtc	.+4      	; 0x1fb4 <__divmodhi4+0xa>
    1fb0:	00 94       	com	r0
    1fb2:	07 d0       	rcall	.+14     	; 0x1fc2 <__divmodhi4_neg1>
    1fb4:	77 fd       	sbrc	r23, 7
    1fb6:	09 d0       	rcall	.+18     	; 0x1fca <__divmodhi4_neg2>
    1fb8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__udivmodhi4>
    1fbc:	07 fc       	sbrc	r0, 7
    1fbe:	05 d0       	rcall	.+10     	; 0x1fca <__divmodhi4_neg2>
    1fc0:	3e f4       	brtc	.+14     	; 0x1fd0 <__divmodhi4_exit>

00001fc2 <__divmodhi4_neg1>:
    1fc2:	90 95       	com	r25
    1fc4:	81 95       	neg	r24
    1fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc8:	08 95       	ret

00001fca <__divmodhi4_neg2>:
    1fca:	70 95       	com	r23
    1fcc:	61 95       	neg	r22
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255

00001fd0 <__divmodhi4_exit>:
    1fd0:	08 95       	ret

00001fd2 <__udivmodsi4>:
    1fd2:	a1 e2       	ldi	r26, 0x21	; 33
    1fd4:	1a 2e       	mov	r1, r26
    1fd6:	aa 1b       	sub	r26, r26
    1fd8:	bb 1b       	sub	r27, r27
    1fda:	fd 01       	movw	r30, r26
    1fdc:	0d c0       	rjmp	.+26     	; 0x1ff8 <__udivmodsi4_ep>

00001fde <__udivmodsi4_loop>:
    1fde:	aa 1f       	adc	r26, r26
    1fe0:	bb 1f       	adc	r27, r27
    1fe2:	ee 1f       	adc	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	a2 17       	cp	r26, r18
    1fe8:	b3 07       	cpc	r27, r19
    1fea:	e4 07       	cpc	r30, r20
    1fec:	f5 07       	cpc	r31, r21
    1fee:	20 f0       	brcs	.+8      	; 0x1ff8 <__udivmodsi4_ep>
    1ff0:	a2 1b       	sub	r26, r18
    1ff2:	b3 0b       	sbc	r27, r19
    1ff4:	e4 0b       	sbc	r30, r20
    1ff6:	f5 0b       	sbc	r31, r21

00001ff8 <__udivmodsi4_ep>:
    1ff8:	66 1f       	adc	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	1a 94       	dec	r1
    2002:	69 f7       	brne	.-38     	; 0x1fde <__udivmodsi4_loop>
    2004:	60 95       	com	r22
    2006:	70 95       	com	r23
    2008:	80 95       	com	r24
    200a:	90 95       	com	r25
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	bd 01       	movw	r22, r26
    2012:	cf 01       	movw	r24, r30
    2014:	08 95       	ret

00002016 <__divmodsi4>:
    2016:	05 2e       	mov	r0, r21
    2018:	97 fb       	bst	r25, 7
    201a:	1e f4       	brtc	.+6      	; 0x2022 <__divmodsi4+0xc>
    201c:	00 94       	com	r0
    201e:	0e 94 22 10 	call	0x2044	; 0x2044 <__negsi2>
    2022:	57 fd       	sbrc	r21, 7
    2024:	07 d0       	rcall	.+14     	; 0x2034 <__divmodsi4_neg2>
    2026:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
    202a:	07 fc       	sbrc	r0, 7
    202c:	03 d0       	rcall	.+6      	; 0x2034 <__divmodsi4_neg2>
    202e:	4e f4       	brtc	.+18     	; 0x2042 <__divmodsi4_exit>
    2030:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__negsi2>

00002034 <__divmodsi4_neg2>:
    2034:	50 95       	com	r21
    2036:	40 95       	com	r20
    2038:	30 95       	com	r19
    203a:	21 95       	neg	r18
    203c:	3f 4f       	sbci	r19, 0xFF	; 255
    203e:	4f 4f       	sbci	r20, 0xFF	; 255
    2040:	5f 4f       	sbci	r21, 0xFF	; 255

00002042 <__divmodsi4_exit>:
    2042:	08 95       	ret

00002044 <__negsi2>:
    2044:	90 95       	com	r25
    2046:	80 95       	com	r24
    2048:	70 95       	com	r23
    204a:	61 95       	neg	r22
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	8f 4f       	sbci	r24, 0xFF	; 255
    2050:	9f 4f       	sbci	r25, 0xFF	; 255
    2052:	08 95       	ret

00002054 <__tablejump2__>:
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	05 90       	lpm	r0, Z+
    205a:	f4 91       	lpm	r31, Z
    205c:	e0 2d       	mov	r30, r0
    205e:	09 94       	ijmp

00002060 <__umulhisi3>:
    2060:	a2 9f       	mul	r26, r18
    2062:	b0 01       	movw	r22, r0
    2064:	b3 9f       	mul	r27, r19
    2066:	c0 01       	movw	r24, r0
    2068:	a3 9f       	mul	r26, r19
    206a:	70 0d       	add	r23, r0
    206c:	81 1d       	adc	r24, r1
    206e:	11 24       	eor	r1, r1
    2070:	91 1d       	adc	r25, r1
    2072:	b2 9f       	mul	r27, r18
    2074:	70 0d       	add	r23, r0
    2076:	81 1d       	adc	r24, r1
    2078:	11 24       	eor	r1, r1
    207a:	91 1d       	adc	r25, r1
    207c:	08 95       	ret

0000207e <__muluhisi3>:
    207e:	0e 94 30 10 	call	0x2060	; 0x2060 <__umulhisi3>
    2082:	a5 9f       	mul	r26, r21
    2084:	90 0d       	add	r25, r0
    2086:	b4 9f       	mul	r27, r20
    2088:	90 0d       	add	r25, r0
    208a:	a4 9f       	mul	r26, r20
    208c:	80 0d       	add	r24, r0
    208e:	91 1d       	adc	r25, r1
    2090:	11 24       	eor	r1, r1
    2092:	08 95       	ret

00002094 <__mulshisi3>:
    2094:	b7 ff       	sbrs	r27, 7
    2096:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__muluhisi3>

0000209a <__mulohisi3>:
    209a:	0e 94 3f 10 	call	0x207e	; 0x207e <__muluhisi3>
    209e:	82 1b       	sub	r24, r18
    20a0:	93 0b       	sbc	r25, r19
    20a2:	08 95       	ret

000020a4 <__prologue_saves__>:
    20a4:	2f 92       	push	r2
    20a6:	3f 92       	push	r3
    20a8:	4f 92       	push	r4
    20aa:	5f 92       	push	r5
    20ac:	6f 92       	push	r6
    20ae:	7f 92       	push	r7
    20b0:	8f 92       	push	r8
    20b2:	9f 92       	push	r9
    20b4:	af 92       	push	r10
    20b6:	bf 92       	push	r11
    20b8:	cf 92       	push	r12
    20ba:	df 92       	push	r13
    20bc:	ef 92       	push	r14
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	ca 1b       	sub	r28, r26
    20ce:	db 0b       	sbc	r29, r27
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	09 94       	ijmp

000020dc <__epilogue_restores__>:
    20dc:	2a 88       	ldd	r2, Y+18	; 0x12
    20de:	39 88       	ldd	r3, Y+17	; 0x11
    20e0:	48 88       	ldd	r4, Y+16	; 0x10
    20e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    20e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    20e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    20e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    20ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    20ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    20ee:	b9 84       	ldd	r11, Y+9	; 0x09
    20f0:	c8 84       	ldd	r12, Y+8	; 0x08
    20f2:	df 80       	ldd	r13, Y+7	; 0x07
    20f4:	ee 80       	ldd	r14, Y+6	; 0x06
    20f6:	fd 80       	ldd	r15, Y+5	; 0x05
    20f8:	0c 81       	ldd	r16, Y+4	; 0x04
    20fa:	1b 81       	ldd	r17, Y+3	; 0x03
    20fc:	aa 81       	ldd	r26, Y+2	; 0x02
    20fe:	b9 81       	ldd	r27, Y+1	; 0x01
    2100:	ce 0f       	add	r28, r30
    2102:	d1 1d       	adc	r29, r1
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	ed 01       	movw	r28, r26
    2110:	08 95       	ret

00002112 <malloc>:
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	82 30       	cpi	r24, 0x02	; 2
    211c:	91 05       	cpc	r25, r1
    211e:	10 f4       	brcc	.+4      	; 0x2124 <malloc+0x12>
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <__flp>
    2128:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <__flp+0x1>
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	a0 e0       	ldi	r26, 0x00	; 0
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	30 97       	sbiw	r30, 0x00	; 0
    2136:	19 f1       	breq	.+70     	; 0x217e <malloc+0x6c>
    2138:	40 81       	ld	r20, Z
    213a:	51 81       	ldd	r21, Z+1	; 0x01
    213c:	02 81       	ldd	r16, Z+2	; 0x02
    213e:	13 81       	ldd	r17, Z+3	; 0x03
    2140:	48 17       	cp	r20, r24
    2142:	59 07       	cpc	r21, r25
    2144:	c8 f0       	brcs	.+50     	; 0x2178 <malloc+0x66>
    2146:	84 17       	cp	r24, r20
    2148:	95 07       	cpc	r25, r21
    214a:	69 f4       	brne	.+26     	; 0x2166 <malloc+0x54>
    214c:	10 97       	sbiw	r26, 0x00	; 0
    214e:	31 f0       	breq	.+12     	; 0x215c <malloc+0x4a>
    2150:	12 96       	adiw	r26, 0x02	; 2
    2152:	0c 93       	st	X, r16
    2154:	12 97       	sbiw	r26, 0x02	; 2
    2156:	13 96       	adiw	r26, 0x03	; 3
    2158:	1c 93       	st	X, r17
    215a:	27 c0       	rjmp	.+78     	; 0x21aa <malloc+0x98>
    215c:	00 93 a7 01 	sts	0x01A7, r16	; 0x8001a7 <__flp>
    2160:	10 93 a8 01 	sts	0x01A8, r17	; 0x8001a8 <__flp+0x1>
    2164:	22 c0       	rjmp	.+68     	; 0x21aa <malloc+0x98>
    2166:	21 15       	cp	r18, r1
    2168:	31 05       	cpc	r19, r1
    216a:	19 f0       	breq	.+6      	; 0x2172 <malloc+0x60>
    216c:	42 17       	cp	r20, r18
    216e:	53 07       	cpc	r21, r19
    2170:	18 f4       	brcc	.+6      	; 0x2178 <malloc+0x66>
    2172:	9a 01       	movw	r18, r20
    2174:	bd 01       	movw	r22, r26
    2176:	ef 01       	movw	r28, r30
    2178:	df 01       	movw	r26, r30
    217a:	f8 01       	movw	r30, r16
    217c:	db cf       	rjmp	.-74     	; 0x2134 <malloc+0x22>
    217e:	21 15       	cp	r18, r1
    2180:	31 05       	cpc	r19, r1
    2182:	f9 f0       	breq	.+62     	; 0x21c2 <malloc+0xb0>
    2184:	28 1b       	sub	r18, r24
    2186:	39 0b       	sbc	r19, r25
    2188:	24 30       	cpi	r18, 0x04	; 4
    218a:	31 05       	cpc	r19, r1
    218c:	80 f4       	brcc	.+32     	; 0x21ae <malloc+0x9c>
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	9b 81       	ldd	r25, Y+3	; 0x03
    2192:	61 15       	cp	r22, r1
    2194:	71 05       	cpc	r23, r1
    2196:	21 f0       	breq	.+8      	; 0x21a0 <malloc+0x8e>
    2198:	fb 01       	movw	r30, r22
    219a:	93 83       	std	Z+3, r25	; 0x03
    219c:	82 83       	std	Z+2, r24	; 0x02
    219e:	04 c0       	rjmp	.+8      	; 0x21a8 <malloc+0x96>
    21a0:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__flp+0x1>
    21a4:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__flp>
    21a8:	fe 01       	movw	r30, r28
    21aa:	32 96       	adiw	r30, 0x02	; 2
    21ac:	44 c0       	rjmp	.+136    	; 0x2236 <malloc+0x124>
    21ae:	fe 01       	movw	r30, r28
    21b0:	e2 0f       	add	r30, r18
    21b2:	f3 1f       	adc	r31, r19
    21b4:	81 93       	st	Z+, r24
    21b6:	91 93       	st	Z+, r25
    21b8:	22 50       	subi	r18, 0x02	; 2
    21ba:	31 09       	sbc	r19, r1
    21bc:	39 83       	std	Y+1, r19	; 0x01
    21be:	28 83       	st	Y, r18
    21c0:	3a c0       	rjmp	.+116    	; 0x2236 <malloc+0x124>
    21c2:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
    21c6:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
    21ca:	23 2b       	or	r18, r19
    21cc:	41 f4       	brne	.+16     	; 0x21de <malloc+0xcc>
    21ce:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    21d2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    21d6:	30 93 a6 01 	sts	0x01A6, r19	; 0x8001a6 <__brkval+0x1>
    21da:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <__brkval>
    21de:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    21e2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    21e6:	21 15       	cp	r18, r1
    21e8:	31 05       	cpc	r19, r1
    21ea:	41 f4       	brne	.+16     	; 0x21fc <malloc+0xea>
    21ec:	2d b7       	in	r18, 0x3d	; 61
    21ee:	3e b7       	in	r19, 0x3e	; 62
    21f0:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    21f4:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    21f8:	24 1b       	sub	r18, r20
    21fa:	35 0b       	sbc	r19, r21
    21fc:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <__brkval>
    2200:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <__brkval+0x1>
    2204:	e2 17       	cp	r30, r18
    2206:	f3 07       	cpc	r31, r19
    2208:	a0 f4       	brcc	.+40     	; 0x2232 <malloc+0x120>
    220a:	2e 1b       	sub	r18, r30
    220c:	3f 0b       	sbc	r19, r31
    220e:	28 17       	cp	r18, r24
    2210:	39 07       	cpc	r19, r25
    2212:	78 f0       	brcs	.+30     	; 0x2232 <malloc+0x120>
    2214:	ac 01       	movw	r20, r24
    2216:	4e 5f       	subi	r20, 0xFE	; 254
    2218:	5f 4f       	sbci	r21, 0xFF	; 255
    221a:	24 17       	cp	r18, r20
    221c:	35 07       	cpc	r19, r21
    221e:	48 f0       	brcs	.+18     	; 0x2232 <malloc+0x120>
    2220:	4e 0f       	add	r20, r30
    2222:	5f 1f       	adc	r21, r31
    2224:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <__brkval+0x1>
    2228:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <__brkval>
    222c:	81 93       	st	Z+, r24
    222e:	91 93       	st	Z+, r25
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <malloc+0x124>
    2232:	e0 e0       	ldi	r30, 0x00	; 0
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	cf 01       	movw	r24, r30
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	08 95       	ret

00002242 <free>:
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	09 f4       	brne	.+2      	; 0x224c <free+0xa>
    224a:	81 c0       	rjmp	.+258    	; 0x234e <free+0x10c>
    224c:	fc 01       	movw	r30, r24
    224e:	32 97       	sbiw	r30, 0x02	; 2
    2250:	13 82       	std	Z+3, r1	; 0x03
    2252:	12 82       	std	Z+2, r1	; 0x02
    2254:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <__flp>
    2258:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <__flp+0x1>
    225c:	10 97       	sbiw	r26, 0x00	; 0
    225e:	81 f4       	brne	.+32     	; 0x2280 <free+0x3e>
    2260:	20 81       	ld	r18, Z
    2262:	31 81       	ldd	r19, Z+1	; 0x01
    2264:	82 0f       	add	r24, r18
    2266:	93 1f       	adc	r25, r19
    2268:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
    226c:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
    2270:	28 17       	cp	r18, r24
    2272:	39 07       	cpc	r19, r25
    2274:	51 f5       	brne	.+84     	; 0x22ca <free+0x88>
    2276:	f0 93 a6 01 	sts	0x01A6, r31	; 0x8001a6 <__brkval+0x1>
    227a:	e0 93 a5 01 	sts	0x01A5, r30	; 0x8001a5 <__brkval>
    227e:	67 c0       	rjmp	.+206    	; 0x234e <free+0x10c>
    2280:	ed 01       	movw	r28, r26
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	ce 17       	cp	r28, r30
    2288:	df 07       	cpc	r29, r31
    228a:	40 f4       	brcc	.+16     	; 0x229c <free+0x5a>
    228c:	4a 81       	ldd	r20, Y+2	; 0x02
    228e:	5b 81       	ldd	r21, Y+3	; 0x03
    2290:	9e 01       	movw	r18, r28
    2292:	41 15       	cp	r20, r1
    2294:	51 05       	cpc	r21, r1
    2296:	f1 f0       	breq	.+60     	; 0x22d4 <free+0x92>
    2298:	ea 01       	movw	r28, r20
    229a:	f5 cf       	rjmp	.-22     	; 0x2286 <free+0x44>
    229c:	d3 83       	std	Z+3, r29	; 0x03
    229e:	c2 83       	std	Z+2, r28	; 0x02
    22a0:	40 81       	ld	r20, Z
    22a2:	51 81       	ldd	r21, Z+1	; 0x01
    22a4:	84 0f       	add	r24, r20
    22a6:	95 1f       	adc	r25, r21
    22a8:	c8 17       	cp	r28, r24
    22aa:	d9 07       	cpc	r29, r25
    22ac:	59 f4       	brne	.+22     	; 0x22c4 <free+0x82>
    22ae:	88 81       	ld	r24, Y
    22b0:	99 81       	ldd	r25, Y+1	; 0x01
    22b2:	84 0f       	add	r24, r20
    22b4:	95 1f       	adc	r25, r21
    22b6:	02 96       	adiw	r24, 0x02	; 2
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	9b 81       	ldd	r25, Y+3	; 0x03
    22c0:	93 83       	std	Z+3, r25	; 0x03
    22c2:	82 83       	std	Z+2, r24	; 0x02
    22c4:	21 15       	cp	r18, r1
    22c6:	31 05       	cpc	r19, r1
    22c8:	29 f4       	brne	.+10     	; 0x22d4 <free+0x92>
    22ca:	f0 93 a8 01 	sts	0x01A8, r31	; 0x8001a8 <__flp+0x1>
    22ce:	e0 93 a7 01 	sts	0x01A7, r30	; 0x8001a7 <__flp>
    22d2:	3d c0       	rjmp	.+122    	; 0x234e <free+0x10c>
    22d4:	e9 01       	movw	r28, r18
    22d6:	fb 83       	std	Y+3, r31	; 0x03
    22d8:	ea 83       	std	Y+2, r30	; 0x02
    22da:	49 91       	ld	r20, Y+
    22dc:	59 91       	ld	r21, Y+
    22de:	c4 0f       	add	r28, r20
    22e0:	d5 1f       	adc	r29, r21
    22e2:	ec 17       	cp	r30, r28
    22e4:	fd 07       	cpc	r31, r29
    22e6:	61 f4       	brne	.+24     	; 0x2300 <free+0xbe>
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	84 0f       	add	r24, r20
    22ee:	95 1f       	adc	r25, r21
    22f0:	02 96       	adiw	r24, 0x02	; 2
    22f2:	e9 01       	movw	r28, r18
    22f4:	99 83       	std	Y+1, r25	; 0x01
    22f6:	88 83       	st	Y, r24
    22f8:	82 81       	ldd	r24, Z+2	; 0x02
    22fa:	93 81       	ldd	r25, Z+3	; 0x03
    22fc:	9b 83       	std	Y+3, r25	; 0x03
    22fe:	8a 83       	std	Y+2, r24	; 0x02
    2300:	e0 e0       	ldi	r30, 0x00	; 0
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	12 96       	adiw	r26, 0x02	; 2
    2306:	8d 91       	ld	r24, X+
    2308:	9c 91       	ld	r25, X
    230a:	13 97       	sbiw	r26, 0x03	; 3
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	19 f0       	breq	.+6      	; 0x2316 <free+0xd4>
    2310:	fd 01       	movw	r30, r26
    2312:	dc 01       	movw	r26, r24
    2314:	f7 cf       	rjmp	.-18     	; 0x2304 <free+0xc2>
    2316:	8d 91       	ld	r24, X+
    2318:	9c 91       	ld	r25, X
    231a:	11 97       	sbiw	r26, 0x01	; 1
    231c:	9d 01       	movw	r18, r26
    231e:	2e 5f       	subi	r18, 0xFE	; 254
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	82 0f       	add	r24, r18
    2324:	93 1f       	adc	r25, r19
    2326:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
    232a:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
    232e:	28 17       	cp	r18, r24
    2330:	39 07       	cpc	r19, r25
    2332:	69 f4       	brne	.+26     	; 0x234e <free+0x10c>
    2334:	30 97       	sbiw	r30, 0x00	; 0
    2336:	29 f4       	brne	.+10     	; 0x2342 <free+0x100>
    2338:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__flp+0x1>
    233c:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__flp>
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <free+0x104>
    2342:	13 82       	std	Z+3, r1	; 0x03
    2344:	12 82       	std	Z+2, r1	; 0x02
    2346:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <__brkval+0x1>
    234a:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <__brkval>
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	08 95       	ret

00002354 <__do_global_dtors>:
    2354:	10 e0       	ldi	r17, 0x00	; 0
    2356:	c4 e3       	ldi	r28, 0x34	; 52
    2358:	d0 e0       	ldi	r29, 0x00	; 0
    235a:	04 c0       	rjmp	.+8      	; 0x2364 <__do_global_dtors+0x10>
    235c:	fe 01       	movw	r30, r28
    235e:	0e 94 2a 10 	call	0x2054	; 0x2054 <__tablejump2__>
    2362:	21 96       	adiw	r28, 0x01	; 1
    2364:	c5 33       	cpi	r28, 0x35	; 53
    2366:	d1 07       	cpc	r29, r17
    2368:	c9 f7       	brne	.-14     	; 0x235c <__do_global_dtors+0x8>
    236a:	f8 94       	cli

0000236c <__stop_program>:
    236c:	ff cf       	rjmp	.-2      	; 0x236c <__stop_program>
