
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00003d9c  00003e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  0080018c  0080018c  00003ebc  2**0
                  ALLOC
  3 .stab         00007b48  00000000  00000000  00003ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000ba04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  00015a8a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00015acc  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000001c0  00000000  00000000  00015b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003634  00000000  00000000  00015ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000011e1  00000000  00000000  00019300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000211c  00000000  00000000  0001a4e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000568  00000000  00000000  0001c600  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a4a  00000000  00000000  0001cb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000169f  00000000  00000000  0001d5b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001d8  00000000  00000000  0001ec51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__dtors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__vector_9>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__vector_13>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 de 15 	jmp	0x2bbc	; 0x2bbc <__vector_18>
      4c:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__vector_19>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	c5 08       	sbc	r12, r5
      6a:	f3 08       	sbc	r15, r3
      6c:	5e 09       	sbc	r21, r14
      6e:	c9 08       	sbc	r12, r9
      70:	d8 08       	sbc	r13, r8
      72:	e7 08       	sbc	r14, r7
      74:	c9 08       	sbc	r12, r9
      76:	c9 08       	sbc	r12, r9
      78:	c9 08       	sbc	r12, r9

0000007a <__trampolines_end>:
      7a:	3e 67       	ori	r19, 0x7E	; 126
      7c:	33 32       	cpi	r19, 0x23	; 35
      7e:	3e 3e       	cpi	r19, 0xEE	; 238
      80:	63 33       	cpi	r22, 0x33	; 51
      82:	32 00       	.word	0x0032	; ????

00000084 <__ctors_end>:
      84:	b0 17       	cp	r27, r16

00000086 <__dtors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	ec e9       	ldi	r30, 0x9C	; 156
      9a:	fd e3       	ldi	r31, 0x3D	; 61
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	ac 38       	cpi	r26, 0x8C	; 140
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	22 e0       	ldi	r18, 0x02	; 2
      aa:	ac e8       	ldi	r26, 0x8C	; 140
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	af 31       	cpi	r26, 0x1F	; 31
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 17 04 	call	0x82e	; 0x82e <main>
      bc:	0c 94 c1 1e 	jmp	0x3d82	; 0x3d82 <__do_global_dtors>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <filllocationarrays>:
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
      cc:	e2 97       	sbiw	r28, 0x32	; 50
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	f8 94       	cli
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	0f be       	out	0x3f, r0	; 63
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	dc 01       	movw	r26, r24
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	1a c0       	rjmp	.+52     	; 0x114 <filllocationarrays+0x50>
      e0:	ad 01       	movw	r20, r26
      e2:	42 0f       	add	r20, r18
      e4:	53 1f       	adc	r21, r19
      e6:	ca 01       	movw	r24, r20
      e8:	8e 5a       	subi	r24, 0xAE	; 174
      ea:	9f 4f       	sbci	r25, 0xFF	; 255
      ec:	fc 01       	movw	r30, r24
      ee:	10 82       	st	Z, r1
      f0:	fa 01       	movw	r30, r20
      f2:	11 ae       	std	Z+57, r1	; 0x39
      f4:	ea e1       	ldi	r30, 0x1A	; 26
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	ec 0f       	add	r30, r28
      fa:	fd 1f       	adc	r31, r29
      fc:	e2 0f       	add	r30, r18
      fe:	f3 1f       	adc	r31, r19
     100:	10 82       	st	Z, r1
     102:	e1 e0       	ldi	r30, 0x01	; 1
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ec 0f       	add	r30, r28
     108:	fd 1f       	adc	r31, r29
     10a:	e2 0f       	add	r30, r18
     10c:	f3 1f       	adc	r31, r19
     10e:	10 82       	st	Z, r1
     110:	2f 5f       	subi	r18, 0xFF	; 255
     112:	3f 4f       	sbci	r19, 0xFF	; 255
     114:	29 31       	cpi	r18, 0x19	; 25
     116:	31 05       	cpc	r19, r1
     118:	1c f3       	brlt	.-58     	; 0xe0 <filllocationarrays+0x1c>
     11a:	5c 96       	adiw	r26, 0x1c	; 28
     11c:	8c 91       	ld	r24, X
     11e:	5c 97       	sbiw	r26, 0x1c	; 28
     120:	81 30       	cpi	r24, 0x01	; 1
     122:	29 f4       	brne	.+10     	; 0x12e <filllocationarrays+0x6a>
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	8a 8f       	std	Y+26, r24	; 0x1a
     128:	21 e0       	ldi	r18, 0x01	; 1
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <filllocationarrays+0x6e>
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	3b c0       	rjmp	.+118    	; 0x1ae <filllocationarrays+0xea>
     138:	5d 96       	adiw	r26, 0x1d	; 29
     13a:	8c 91       	ld	r24, X
     13c:	5d 97       	sbiw	r26, 0x1d	; 29
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	04 2e       	mov	r0, r20
     142:	02 c0       	rjmp	.+4      	; 0x148 <filllocationarrays+0x84>
     144:	95 95       	asr	r25
     146:	87 95       	ror	r24
     148:	0a 94       	dec	r0
     14a:	e2 f7       	brpl	.-8      	; 0x144 <filllocationarrays+0x80>
     14c:	81 70       	andi	r24, 0x01	; 1
     14e:	44 30       	cpi	r20, 0x04	; 4
     150:	51 05       	cpc	r21, r1
     152:	b4 f4       	brge	.+44     	; 0x180 <filllocationarrays+0xbc>
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	49 f5       	brne	.+82     	; 0x1aa <filllocationarrays+0xe6>
     158:	e1 e0       	ldi	r30, 0x01	; 1
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	ec 0f       	add	r30, r28
     15e:	fd 1f       	adc	r31, r29
     160:	e2 0f       	add	r30, r18
     162:	f3 1f       	adc	r31, r19
     164:	82 e0       	ldi	r24, 0x02	; 2
     166:	84 0f       	add	r24, r20
     168:	80 83       	st	Z, r24
     16a:	ea e1       	ldi	r30, 0x1A	; 26
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	ec 0f       	add	r30, r28
     170:	fd 1f       	adc	r31, r29
     172:	e2 0f       	add	r30, r18
     174:	f3 1f       	adc	r31, r19
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 83       	st	Z, r24
     17a:	2f 5f       	subi	r18, 0xFF	; 255
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	15 c0       	rjmp	.+42     	; 0x1aa <filllocationarrays+0xe6>
     180:	81 30       	cpi	r24, 0x01	; 1
     182:	99 f4       	brne	.+38     	; 0x1aa <filllocationarrays+0xe6>
     184:	e1 e0       	ldi	r30, 0x01	; 1
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	ec 0f       	add	r30, r28
     18a:	fd 1f       	adc	r31, r29
     18c:	e2 0f       	add	r30, r18
     18e:	f3 1f       	adc	r31, r19
     190:	8d ef       	ldi	r24, 0xFD	; 253
     192:	84 0f       	add	r24, r20
     194:	80 83       	st	Z, r24
     196:	ea e1       	ldi	r30, 0x1A	; 26
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	ec 0f       	add	r30, r28
     19c:	fd 1f       	adc	r31, r29
     19e:	e2 0f       	add	r30, r18
     1a0:	f3 1f       	adc	r31, r19
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	80 83       	st	Z, r24
     1a6:	2f 5f       	subi	r18, 0xFF	; 255
     1a8:	3f 4f       	sbci	r19, 0xFF	; 255
     1aa:	4f 5f       	subi	r20, 0xFF	; 255
     1ac:	5f 4f       	sbci	r21, 0xFF	; 255
     1ae:	48 30       	cpi	r20, 0x08	; 8
     1b0:	51 05       	cpc	r21, r1
     1b2:	14 f2       	brlt	.-124    	; 0x138 <filllocationarrays+0x74>
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	53 c0       	rjmp	.+166    	; 0x260 <filllocationarrays+0x19c>
     1ba:	5e 96       	adiw	r26, 0x1e	; 30
     1bc:	8c 91       	ld	r24, X
     1be:	5e 97       	sbiw	r26, 0x1e	; 30
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	04 2e       	mov	r0, r20
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <filllocationarrays+0x106>
     1c6:	95 95       	asr	r25
     1c8:	87 95       	ror	r24
     1ca:	0a 94       	dec	r0
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <filllocationarrays+0x102>
     1ce:	81 70       	andi	r24, 0x01	; 1
     1d0:	41 15       	cp	r20, r1
     1d2:	51 05       	cpc	r21, r1
     1d4:	b9 f4       	brne	.+46     	; 0x204 <filllocationarrays+0x140>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	09 f0       	breq	.+2      	; 0x1dc <filllocationarrays+0x118>
     1da:	40 c0       	rjmp	.+128    	; 0x25c <filllocationarrays+0x198>
     1dc:	e1 e0       	ldi	r30, 0x01	; 1
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	ec 0f       	add	r30, r28
     1e2:	fd 1f       	adc	r31, r29
     1e4:	e2 0f       	add	r30, r18
     1e6:	f3 1f       	adc	r31, r19
     1e8:	85 e0       	ldi	r24, 0x05	; 5
     1ea:	84 0f       	add	r24, r20
     1ec:	80 83       	st	Z, r24
     1ee:	ea e1       	ldi	r30, 0x1A	; 26
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	ec 0f       	add	r30, r28
     1f4:	fd 1f       	adc	r31, r29
     1f6:	e2 0f       	add	r30, r18
     1f8:	f3 1f       	adc	r31, r19
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	80 83       	st	Z, r24
     1fe:	2f 5f       	subi	r18, 0xFF	; 255
     200:	3f 4f       	sbci	r19, 0xFF	; 255
     202:	2c c0       	rjmp	.+88     	; 0x25c <filllocationarrays+0x198>
     204:	46 30       	cpi	r20, 0x06	; 6
     206:	51 05       	cpc	r21, r1
     208:	a4 f4       	brge	.+40     	; 0x232 <filllocationarrays+0x16e>
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	39 f5       	brne	.+78     	; 0x25c <filllocationarrays+0x198>
     20e:	e1 e0       	ldi	r30, 0x01	; 1
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ec 0f       	add	r30, r28
     214:	fd 1f       	adc	r31, r29
     216:	e2 0f       	add	r30, r18
     218:	f3 1f       	adc	r31, r19
     21a:	40 83       	st	Z, r20
     21c:	ea e1       	ldi	r30, 0x1A	; 26
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	ec 0f       	add	r30, r28
     222:	fd 1f       	adc	r31, r29
     224:	e2 0f       	add	r30, r18
     226:	f3 1f       	adc	r31, r19
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	80 83       	st	Z, r24
     22c:	2f 5f       	subi	r18, 0xFF	; 255
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	15 c0       	rjmp	.+42     	; 0x25c <filllocationarrays+0x198>
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	99 f4       	brne	.+38     	; 0x25c <filllocationarrays+0x198>
     236:	e1 e0       	ldi	r30, 0x01	; 1
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ec 0f       	add	r30, r28
     23c:	fd 1f       	adc	r31, r29
     23e:	e2 0f       	add	r30, r18
     240:	f3 1f       	adc	r31, r19
     242:	8b ef       	ldi	r24, 0xFB	; 251
     244:	84 0f       	add	r24, r20
     246:	80 83       	st	Z, r24
     248:	ea e1       	ldi	r30, 0x1A	; 26
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	ec 0f       	add	r30, r28
     24e:	fd 1f       	adc	r31, r29
     250:	e2 0f       	add	r30, r18
     252:	f3 1f       	adc	r31, r19
     254:	84 e0       	ldi	r24, 0x04	; 4
     256:	80 83       	st	Z, r24
     258:	2f 5f       	subi	r18, 0xFF	; 255
     25a:	3f 4f       	sbci	r19, 0xFF	; 255
     25c:	4f 5f       	subi	r20, 0xFF	; 255
     25e:	5f 4f       	sbci	r21, 0xFF	; 255
     260:	48 30       	cpi	r20, 0x08	; 8
     262:	51 05       	cpc	r21, r1
     264:	0c f4       	brge	.+2      	; 0x268 <filllocationarrays+0x1a4>
     266:	a9 cf       	rjmp	.-174    	; 0x1ba <filllocationarrays+0xf6>
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	3b c0       	rjmp	.+118    	; 0x2e4 <filllocationarrays+0x220>
     26e:	5f 96       	adiw	r26, 0x1f	; 31
     270:	8c 91       	ld	r24, X
     272:	5f 97       	sbiw	r26, 0x1f	; 31
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	04 2e       	mov	r0, r20
     278:	02 c0       	rjmp	.+4      	; 0x27e <filllocationarrays+0x1ba>
     27a:	95 95       	asr	r25
     27c:	87 95       	ror	r24
     27e:	0a 94       	dec	r0
     280:	e2 f7       	brpl	.-8      	; 0x27a <filllocationarrays+0x1b6>
     282:	81 70       	andi	r24, 0x01	; 1
     284:	43 30       	cpi	r20, 0x03	; 3
     286:	51 05       	cpc	r21, r1
     288:	b4 f4       	brge	.+44     	; 0x2b6 <filllocationarrays+0x1f2>
     28a:	81 30       	cpi	r24, 0x01	; 1
     28c:	49 f5       	brne	.+82     	; 0x2e0 <filllocationarrays+0x21c>
     28e:	e1 e0       	ldi	r30, 0x01	; 1
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ec 0f       	add	r30, r28
     294:	fd 1f       	adc	r31, r29
     296:	e2 0f       	add	r30, r18
     298:	f3 1f       	adc	r31, r19
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	84 0f       	add	r24, r20
     29e:	80 83       	st	Z, r24
     2a0:	ea e1       	ldi	r30, 0x1A	; 26
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	ec 0f       	add	r30, r28
     2a6:	fd 1f       	adc	r31, r29
     2a8:	e2 0f       	add	r30, r18
     2aa:	f3 1f       	adc	r31, r19
     2ac:	84 e0       	ldi	r24, 0x04	; 4
     2ae:	80 83       	st	Z, r24
     2b0:	2f 5f       	subi	r18, 0xFF	; 255
     2b2:	3f 4f       	sbci	r19, 0xFF	; 255
     2b4:	15 c0       	rjmp	.+42     	; 0x2e0 <filllocationarrays+0x21c>
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	99 f4       	brne	.+38     	; 0x2e0 <filllocationarrays+0x21c>
     2ba:	e1 e0       	ldi	r30, 0x01	; 1
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	ec 0f       	add	r30, r28
     2c0:	fd 1f       	adc	r31, r29
     2c2:	e2 0f       	add	r30, r18
     2c4:	f3 1f       	adc	r31, r19
     2c6:	8e ef       	ldi	r24, 0xFE	; 254
     2c8:	84 0f       	add	r24, r20
     2ca:	80 83       	st	Z, r24
     2cc:	ea e1       	ldi	r30, 0x1A	; 26
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	ec 0f       	add	r30, r28
     2d2:	fd 1f       	adc	r31, r29
     2d4:	e2 0f       	add	r30, r18
     2d6:	f3 1f       	adc	r31, r19
     2d8:	85 e0       	ldi	r24, 0x05	; 5
     2da:	80 83       	st	Z, r24
     2dc:	2f 5f       	subi	r18, 0xFF	; 255
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
     2e0:	4f 5f       	subi	r20, 0xFF	; 255
     2e2:	5f 4f       	sbci	r21, 0xFF	; 255
     2e4:	48 30       	cpi	r20, 0x08	; 8
     2e6:	51 05       	cpc	r21, r1
     2e8:	14 f2       	brlt	.-124    	; 0x26e <filllocationarrays+0x1aa>
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	19 c0       	rjmp	.+50     	; 0x322 <filllocationarrays+0x25e>
     2f0:	e1 e0       	ldi	r30, 0x01	; 1
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	ec 0f       	add	r30, r28
     2f6:	fd 1f       	adc	r31, r29
     2f8:	e2 0f       	add	r30, r18
     2fa:	f3 1f       	adc	r31, r19
     2fc:	40 81       	ld	r20, Z
     2fe:	cd 01       	movw	r24, r26
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	fc 01       	movw	r30, r24
     306:	ee 5a       	subi	r30, 0xAE	; 174
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	40 83       	st	Z, r20
     30c:	ea e1       	ldi	r30, 0x1A	; 26
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ec 0f       	add	r30, r28
     312:	fd 1f       	adc	r31, r29
     314:	e2 0f       	add	r30, r18
     316:	f3 1f       	adc	r31, r19
     318:	40 81       	ld	r20, Z
     31a:	fc 01       	movw	r30, r24
     31c:	41 af       	std	Z+57, r20	; 0x39
     31e:	2f 5f       	subi	r18, 0xFF	; 255
     320:	3f 4f       	sbci	r19, 0xFF	; 255
     322:	29 31       	cpi	r18, 0x19	; 25
     324:	31 05       	cpc	r19, r1
     326:	24 f3       	brlt	.-56     	; 0x2f0 <filllocationarrays+0x22c>
     328:	e2 96       	adiw	r28, 0x32	; 50
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <sendACK>:
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	00 d0       	rcall	.+0      	; 0x340 <sendACK+0x6>
     340:	1f 92       	push	r1
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	88 e0       	ldi	r24, 0x08	; 8
     348:	89 83       	std	Y+1, r24	; 0x01
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	8a 83       	std	Y+2, r24	; 0x02
     34e:	85 e6       	ldi	r24, 0x65	; 101
     350:	8b 83       	std	Y+3, r24	; 0x03
     352:	64 e0       	ldi	r22, 0x04	; 4
     354:	ce 01       	movw	r24, r28
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <serial_send_blocking>
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <Update>:
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	ec 01       	movw	r28, r24
     378:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <serial_receive_buffer_full>
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	09 f0       	breq	.+2      	; 0x382 <Update+0x1a>
     380:	5e c0       	rjmp	.+188    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     382:	8b 8d       	ldd	r24, Y+27	; 0x1b
     384:	88 30       	cpi	r24, 0x08	; 8
     386:	09 f0       	breq	.+2      	; 0x38a <Update+0x22>
     388:	5c c0       	rjmp	.+184    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     38a:	e8 81       	ld	r30, Y
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	31 97       	sbiw	r30, 0x01	; 1
     390:	ec 0f       	add	r30, r28
     392:	fd 1f       	adc	r31, r29
     394:	83 8d       	ldd	r24, Z+27	; 0x1b
     396:	85 36       	cpi	r24, 0x65	; 101
     398:	09 f0       	breq	.+2      	; 0x39c <Update+0x34>
     39a:	55 c0       	rjmp	.+170    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     39c:	ce 01       	movw	r24, r28
     39e:	0e 94 9d 01 	call	0x33a	; 0x33a <sendACK>
     3a2:	88 a1       	ldd	r24, Y+32	; 0x20
     3a4:	8e 3f       	cpi	r24, 0xFE	; 254
     3a6:	19 f0       	breq	.+6      	; 0x3ae <Update+0x46>
     3a8:	8b a1       	ldd	r24, Y+35	; 0x23
     3aa:	8e 3f       	cpi	r24, 0xFE	; 254
     3ac:	29 f4       	brne	.+10     	; 0x3b8 <Update+0x50>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	fe 01       	movw	r30, r28
     3b2:	e5 59       	subi	r30, 0x95	; 149
     3b4:	ff 4f       	sbci	r31, 0xFF	; 255
     3b6:	80 83       	st	Z, r24
     3b8:	8b a1       	ldd	r24, Y+35	; 0x23
     3ba:	8a 3f       	cpi	r24, 0xFA	; 250
     3bc:	29 f4       	brne	.+10     	; 0x3c8 <Update+0x60>
     3be:	94 e0       	ldi	r25, 0x04	; 4
     3c0:	fe 01       	movw	r30, r28
     3c2:	e5 59       	subi	r30, 0x95	; 149
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	90 83       	st	Z, r25
     3c8:	85 3f       	cpi	r24, 0xF5	; 245
     3ca:	29 f4       	brne	.+10     	; 0x3d6 <Update+0x6e>
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	fe 01       	movw	r30, r28
     3d0:	e5 59       	subi	r30, 0x95	; 149
     3d2:	ff 4f       	sbci	r31, 0xFF	; 255
     3d4:	90 83       	st	Z, r25
     3d6:	86 3e       	cpi	r24, 0xE6	; 230
     3d8:	39 f4       	brne	.+14     	; 0x3e8 <Update+0x80>
     3da:	9f ef       	ldi	r25, 0xFF	; 255
     3dc:	fe 01       	movw	r30, r28
     3de:	e2 59       	subi	r30, 0x92	; 146
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	90 83       	st	Z, r25
     3e4:	31 96       	adiw	r30, 0x01	; 1
     3e6:	90 83       	st	Z, r25
     3e8:	80 3f       	cpi	r24, 0xF0	; 240
     3ea:	a9 f4       	brne	.+42     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	fe 01       	movw	r30, r28
     3f0:	e5 59       	subi	r30, 0x95	; 149
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	80 83       	st	Z, r24
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0a c0       	rjmp	.+20     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     3fc:	fc 01       	movw	r30, r24
     3fe:	39 96       	adiw	r30, 0x09	; 9
     400:	ec 0f       	add	r30, r28
     402:	fd 1f       	adc	r31, r29
     404:	23 8d       	ldd	r18, Z+27	; 0x1b
     406:	fe 01       	movw	r30, r28
     408:	e8 0f       	add	r30, r24
     40a:	f9 1f       	adc	r31, r25
     40c:	25 ab       	std	Z+53, r18	; 0x35
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	91 05       	cpc	r25, r1
     414:	9c f3       	brlt	.-26     	; 0x3fc <Update+0x94>
     416:	fe 01       	movw	r30, r28
     418:	e2 59       	subi	r30, 0x92	; 146
     41a:	ff 4f       	sbci	r31, 0xFF	; 255
     41c:	80 81       	ld	r24, Z
     41e:	8f 3f       	cpi	r24, 0xFF	; 255
     420:	a1 f4       	brne	.+40     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     422:	31 96       	adiw	r30, 0x01	; 1
     424:	80 81       	ld	r24, Z
     426:	8f 3f       	cpi	r24, 0xFF	; 255
     428:	91 f4       	brne	.+36     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     42a:	ce 01       	movw	r24, r28
     42c:	0e 94 62 00 	call	0xc4	; 0xc4 <filllocationarrays>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	fe 01       	movw	r30, r28
     434:	e0 59       	subi	r30, 0x90	; 144
     436:	ff 4f       	sbci	r31, 0xFF	; 255
     438:	80 83       	st	Z, r24
     43a:	11 e0       	ldi	r17, 0x01	; 1
     43c:	09 c0       	rjmp	.+18     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	07 c0       	rjmp	.+14     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     442:	10 e0       	ldi	r17, 0x00	; 0
     444:	05 c0       	rjmp	.+10     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     446:	10 e0       	ldi	r17, 0x00	; 0
     448:	03 c0       	rjmp	.+6      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44a:	11 e0       	ldi	r17, 0x01	; 1
     44c:	01 c0       	rjmp	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44e:	11 e0       	ldi	r17, 0x01	; 1
     450:	c0 90 f9 01 	lds	r12, 0x01F9	; 0x8001f9 <timesincelastsend.2232>
     454:	d0 90 fa 01 	lds	r13, 0x01FA	; 0x8001fa <timesincelastsend.2232+0x1>
     458:	e0 90 fb 01 	lds	r14, 0x01FB	; 0x8001fb <timesincelastsend.2232+0x2>
     45c:	f0 90 fc 01 	lds	r15, 0x01FC	; 0x8001fc <timesincelastsend.2232+0x3>
     460:	8e ee       	ldi	r24, 0xEE	; 238
     462:	c8 0e       	add	r12, r24
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	d8 1e       	adc	r13, r24
     468:	e1 1c       	adc	r14, r1
     46a:	f1 1c       	adc	r15, r1
     46c:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <get_ms>
     470:	6c 15       	cp	r22, r12
     472:	7d 05       	cpc	r23, r13
     474:	8e 05       	cpc	r24, r14
     476:	9f 05       	cpc	r25, r15
     478:	c8 f1       	brcs	.+114    	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     47a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <get_ms>
     47e:	60 93 f9 01 	sts	0x01F9, r22	; 0x8001f9 <timesincelastsend.2232>
     482:	70 93 fa 01 	sts	0x01FA, r23	; 0x8001fa <timesincelastsend.2232+0x1>
     486:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <timesincelastsend.2232+0x2>
     48a:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <timesincelastsend.2232+0x3>
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	05 c0       	rjmp	.+10     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     492:	fe 01       	movw	r30, r28
     494:	e8 0f       	add	r30, r24
     496:	f1 1d       	adc	r31, r1
     498:	81 83       	std	Z+1, r24	; 0x01
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	68 81       	ld	r22, Y
     49e:	86 17       	cp	r24, r22
     4a0:	c0 f3       	brcs	.-16     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     4a2:	88 e0       	ldi	r24, 0x08	; 8
     4a4:	89 83       	std	Y+1, r24	; 0x01
     4a6:	fe 01       	movw	r30, r28
     4a8:	e4 59       	subi	r30, 0x94	; 148
     4aa:	ff 4f       	sbci	r31, 0xFF	; 255
     4ac:	80 81       	ld	r24, Z
     4ae:	8a 83       	std	Y+2, r24	; 0x02
     4b0:	31 96       	adiw	r30, 0x01	; 1
     4b2:	80 81       	ld	r24, Z
     4b4:	8b 83       	std	Y+3, r24	; 0x03
     4b6:	31 96       	adiw	r30, 0x01	; 1
     4b8:	80 81       	ld	r24, Z
     4ba:	8c 83       	std	Y+4, r24	; 0x04
     4bc:	31 96       	adiw	r30, 0x01	; 1
     4be:	80 81       	ld	r24, Z
     4c0:	8d 83       	std	Y+5, r24	; 0x05
     4c2:	34 97       	sbiw	r30, 0x04	; 4
     4c4:	80 81       	ld	r24, Z
     4c6:	8e 83       	std	Y+6, r24	; 0x06
     4c8:	e6 2f       	mov	r30, r22
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	31 97       	sbiw	r30, 0x01	; 1
     4ce:	ec 0f       	add	r30, r28
     4d0:	fd 1f       	adc	r31, r29
     4d2:	85 e6       	ldi	r24, 0x65	; 101
     4d4:	81 83       	std	Z+1, r24	; 0x01
     4d6:	ce 01       	movw	r24, r28
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <serial_send>
     4de:	11 30       	cpi	r17, 0x01	; 1
     4e0:	29 f4       	brne	.+10     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     4e2:	68 81       	ld	r22, Y
     4e4:	ce 01       	movw	r24, r28
     4e6:	4b 96       	adiw	r24, 0x1b	; 27
     4e8:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <serial_receive>
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret

000004fc <fillarrays>:
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	60 97       	sbiw	r28, 0x10	; 16
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	ac 01       	movw	r20, r24
     512:	88 e0       	ldi	r24, 0x08	; 8
     514:	e8 e2       	ldi	r30, 0x28	; 40
     516:	f1 e0       	ldi	r31, 0x01	; 1
     518:	de 01       	movw	r26, r28
     51a:	11 96       	adiw	r26, 0x01	; 1
     51c:	01 90       	ld	r0, Z+
     51e:	0d 92       	st	X+, r0
     520:	8a 95       	dec	r24
     522:	e1 f7       	brne	.-8      	; 0x51c <fillarrays+0x20>
     524:	88 e0       	ldi	r24, 0x08	; 8
     526:	e0 e3       	ldi	r30, 0x30	; 48
     528:	f1 e0       	ldi	r31, 0x01	; 1
     52a:	de 01       	movw	r26, r28
     52c:	19 96       	adiw	r26, 0x09	; 9
     52e:	01 90       	ld	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	8a 95       	dec	r24
     534:	e1 f7       	brne	.-8      	; 0x52e <fillarrays+0x32>
     536:	20 e0       	ldi	r18, 0x00	; 0
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	19 c0       	rjmp	.+50     	; 0x56e <fillarrays+0x72>
     53c:	e1 e0       	ldi	r30, 0x01	; 1
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	ec 0f       	add	r30, r28
     542:	fd 1f       	adc	r31, r29
     544:	e2 0f       	add	r30, r18
     546:	f3 1f       	adc	r31, r19
     548:	90 81       	ld	r25, Z
     54a:	da 01       	movw	r26, r20
     54c:	a2 0f       	add	r26, r18
     54e:	b3 1f       	adc	r27, r19
     550:	fd 01       	movw	r30, r26
     552:	ee 5a       	subi	r30, 0xAE	; 174
     554:	ff 4f       	sbci	r31, 0xFF	; 255
     556:	90 83       	st	Z, r25
     558:	e9 e0       	ldi	r30, 0x09	; 9
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	ec 0f       	add	r30, r28
     55e:	fd 1f       	adc	r31, r29
     560:	e2 0f       	add	r30, r18
     562:	f3 1f       	adc	r31, r19
     564:	90 81       	ld	r25, Z
     566:	d9 96       	adiw	r26, 0x39	; 57
     568:	9c 93       	st	X, r25
     56a:	2f 5f       	subi	r18, 0xFF	; 255
     56c:	3f 4f       	sbci	r19, 0xFF	; 255
     56e:	28 30       	cpi	r18, 0x08	; 8
     570:	31 05       	cpc	r19, r1
     572:	24 f3       	brlt	.-56     	; 0x53c <fillarrays+0x40>
     574:	60 96       	adiw	r28, 0x10	; 16
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <Communications_INIT>:
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	8a e1       	ldi	r24, 0x1A	; 26
     592:	88 83       	st	Y, r24
     594:	60 e8       	ldi	r22, 0x80	; 128
     596:	75 e2       	ldi	r23, 0x25	; 37
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <serial_set_baud_rate>
     5a0:	68 81       	ld	r22, Y
     5a2:	ce 01       	movw	r24, r28
     5a4:	4b 96       	adiw	r24, 0x1b	; 27
     5a6:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <serial_receive>
     5aa:	fe 01       	movw	r30, r28
     5ac:	ef 58       	subi	r30, 0x8F	; 143
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	84 eb       	ldi	r24, 0xB4	; 180
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	91 83       	std	Z+1, r25	; 0x01
     5b6:	80 83       	st	Z, r24
     5b8:	36 97       	sbiw	r30, 0x06	; 6
     5ba:	10 82       	st	Z, r1
     5bc:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
     5c0:	8e 01       	movw	r16, r28
     5c2:	04 59       	subi	r16, 0x94	; 148
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
     5ca:	f8 01       	movw	r30, r16
     5cc:	60 83       	st	Z, r22
     5ce:	31 96       	adiw	r30, 0x01	; 1
     5d0:	10 82       	st	Z, r1
     5d2:	31 96       	adiw	r30, 0x01	; 1
     5d4:	84 e0       	ldi	r24, 0x04	; 4
     5d6:	80 83       	st	Z, r24
     5d8:	31 96       	adiw	r30, 0x01	; 1
     5da:	85 e0       	ldi	r24, 0x05	; 5
     5dc:	80 83       	st	Z, r24
     5de:	ce 01       	movw	r24, r28
     5e0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <fillarrays>
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <batteryPercentage>:

#include "display.h"
#include <pololu/3pi.h>

float batteryPercentage()//Should this function be in main or in display.c or something else?
{
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     5f6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <read_battery_millivolts_3pi>
	
	float milliVolts = read_battery_millivolts();
     5fa:	bc 01       	movw	r22, r24
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__floatunsisf>
     604:	6b 01       	movw	r12, r22
     606:	7c 01       	movw	r14, r24
	float batteryPercent = 0.000000000632*((milliVolts)*(milliVolts)*(milliVolts));
     608:	9b 01       	movw	r18, r22
     60a:	ac 01       	movw	r20, r24
     60c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     610:	9b 01       	movw	r18, r22
     612:	ac 01       	movw	r20, r24
     614:	c7 01       	movw	r24, r14
     616:	b6 01       	movw	r22, r12
     618:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     61c:	2c e0       	ldi	r18, 0x0C	; 12
     61e:	39 eb       	ldi	r19, 0xB9	; 185
     620:	4d e2       	ldi	r20, 0x2D	; 45
     622:	50 e3       	ldi	r21, 0x30	; 48
     624:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
	return batteryPercent;
}
     628:	ff 90       	pop	r15
     62a:	ef 90       	pop	r14
     62c:	df 90       	pop	r13
     62e:	cf 90       	pop	r12
     630:	08 95       	ret

00000632 <updateDisplay>:

void updateDisplay(int orderPercent, int batteryPercent, robotStates currentState)
{
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	7c 01       	movw	r14, r24
     63e:	8b 01       	movw	r16, r22
     640:	c4 2f       	mov	r28, r20
	clear();
     642:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <clear>
	lcd_goto_xy(0,0);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <lcd_goto_xy>
	print("Job:");
     64e:	85 e5       	ldi	r24, 0x55	; 85
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
	print_long(orderPercent);
     656:	b7 01       	movw	r22, r14
     658:	ff 0c       	add	r15, r15
     65a:	88 0b       	sbc	r24, r24
     65c:	99 0b       	sbc	r25, r25
     65e:	0e 94 35 14 	call	0x286a	; 0x286a <print_long>
	print("%");
     662:	8a e5       	ldi	r24, 0x5A	; 90
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
	
	lcd_goto_xy(0,1);
     66a:	61 e0       	ldi	r22, 0x01	; 1
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <lcd_goto_xy>
	print("Bat:");
     672:	8c e5       	ldi	r24, 0x5C	; 92
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
	print_long(batteryPercent);
     67a:	b8 01       	movw	r22, r16
     67c:	11 0f       	add	r17, r17
     67e:	88 0b       	sbc	r24, r24
     680:	99 0b       	sbc	r25, r25
     682:	0e 94 35 14 	call	0x286a	; 0x286a <print_long>
	print("%");
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
	switch(currentState)
     68e:	c2 30       	cpi	r28, 0x02	; 2
     690:	a9 f0       	breq	.+42     	; 0x6bc <updateDisplay+0x8a>
     692:	28 f4       	brcc	.+10     	; 0x69e <updateDisplay+0x6c>
     694:	cc 23       	and	r28, r28
     696:	41 f0       	breq	.+16     	; 0x6a8 <updateDisplay+0x76>
     698:	c1 30       	cpi	r28, 0x01	; 1
     69a:	59 f0       	breq	.+22     	; 0x6b2 <updateDisplay+0x80>
     69c:	1d c0       	rjmp	.+58     	; 0x6d8 <updateDisplay+0xa6>
     69e:	c3 30       	cpi	r28, 0x03	; 3
     6a0:	91 f0       	breq	.+36     	; 0x6c6 <updateDisplay+0x94>
     6a2:	c4 30       	cpi	r28, 0x04	; 4
     6a4:	a9 f0       	breq	.+42     	; 0x6d0 <updateDisplay+0x9e>
     6a6:	18 c0       	rjmp	.+48     	; 0x6d8 <updateDisplay+0xa6>
	{
		case manual:
		print("M");//M for Manual
     6a8:	81 e6       	ldi	r24, 0x61	; 97
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
     6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <updateDisplay+0xa6>
		case mazeSolver:
		print("P");//P for Parcour
     6b2:	83 e6       	ldi	r24, 0x63	; 99
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
     6ba:	0e c0       	rjmp	.+28     	; 0x6d8 <updateDisplay+0xa6>
		case logicsBot:
		print("O");//O for Order
     6bc:	85 e6       	ldi	r24, 0x65	; 101
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
     6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <updateDisplay+0xa6>
		case chargeMode:
		print("C");//C for Charge
     6c6:	87 e6       	ldi	r24, 0x67	; 103
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
     6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <updateDisplay+0xa6>
		case homingMode:
		print("H");//H for Homing
     6d0:	89 e6       	ldi	r24, 0x69	; 105
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
	}
}
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	08 95       	ret

000006e4 <errorDisplay>:

void errorDisplay(errorStates error, int batteryPercent)
{
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	18 2f       	mov	r17, r24
     6ec:	eb 01       	movw	r28, r22
	clear();
     6ee:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <clear>
	lcd_goto_xy(0,0);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <lcd_goto_xy>
	print("Bat:");
     6fa:	8c e5       	ldi	r24, 0x5C	; 92
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
	print_long(batteryPercent);
     702:	be 01       	movw	r22, r28
     704:	dd 0f       	add	r29, r29
     706:	88 0b       	sbc	r24, r24
     708:	99 0b       	sbc	r25, r25
     70a:	0e 94 35 14 	call	0x286a	; 0x286a <print_long>
	print("%");
     70e:	8a e5       	ldi	r24, 0x5A	; 90
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
	
	lcd_goto_xy(0,1);
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <lcd_goto_xy>
	
	switch(error)
     71e:	11 30       	cpi	r17, 0x01	; 1
     720:	59 f0       	breq	.+22     	; 0x738 <errorDisplay+0x54>
     722:	28 f0       	brcs	.+10     	; 0x72e <errorDisplay+0x4a>
     724:	12 30       	cpi	r17, 0x02	; 2
     726:	69 f0       	breq	.+26     	; 0x742 <errorDisplay+0x5e>
     728:	13 30       	cpi	r17, 0x03	; 3
     72a:	81 f0       	breq	.+32     	; 0x74c <errorDisplay+0x68>
     72c:	13 c0       	rjmp	.+38     	; 0x754 <errorDisplay+0x70>
	{
		case slipped:
		print("Slipped!");
     72e:	8b e6       	ldi	r24, 0x6B	; 107
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
     736:	0e c0       	rjmp	.+28     	; 0x754 <errorDisplay+0x70>
		case emergency:
		print("STOPPED");
     738:	84 e7       	ldi	r24, 0x74	; 116
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
     740:	09 c0       	rjmp	.+18     	; 0x754 <errorDisplay+0x70>
		case object:
		print("OBJECT");
     742:	8c e7       	ldi	r24, 0x7C	; 124
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
     74a:	04 c0       	rjmp	.+8      	; 0x754 <errorDisplay+0x70>
		case batLow:
		print("LOW-BAT");
     74c:	83 e8       	ldi	r24, 0x83	; 131
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <print>
		break;
	}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <whileBarcode>:

const char welcome[] PROGMEM = ">g32>>c32";

void whileBarcode()
{
	while (lineType() != Barcode)
     75c:	03 c0       	rjmp	.+6      	; 0x764 <whileBarcode+0x8>
	{
		motorControl('S');
     75e:	83 e5       	ldi	r24, 0x53	; 83
     760:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>

const char welcome[] PROGMEM = ">g32>>c32";

void whileBarcode()
{
	while (lineType() != Barcode)
     764:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lineType>
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	c9 f7       	brne	.-14     	; 0x75e <whileBarcode+0x2>
	{
		motorControl('S');
	}
}
     76c:	08 95       	ret

0000076e <whileLineEnd>:

void whileLineEnd()
{
	while (lineType() != Line_end)
     76e:	03 c0       	rjmp	.+6      	; 0x776 <whileLineEnd+0x8>
	{
		motorControl('S');
     770:	83 e5       	ldi	r24, 0x53	; 83
     772:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
	}
}

void whileLineEnd()
{
	while (lineType() != Line_end)
     776:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lineType>
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	c9 f7       	brne	.-14     	; 0x770 <whileLineEnd+0x2>
	{
		motorControl('S');
	}
}
     77e:	08 95       	ret

00000780 <charge_3pi>:
void charge_3pi(Communications *communications)
{
     780:	cf 93       	push	r28
     782:	df 93       	push	r29
     784:	ec 01       	movw	r28, r24
	whileBarcode();
     786:	0e 94 ae 03 	call	0x75c	; 0x75c <whileBarcode>
	updateDisplay(0, batteryPercentage(), mazeSolver);
     78a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
     78e:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
     792:	41 e0       	ldi	r20, 0x01	; 1
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 19 03 	call	0x632	; 0x632 <updateDisplay>
	parcours('T', communications);
     79c:	be 01       	movw	r22, r28
     79e:	84 e5       	ldi	r24, 0x54	; 84
     7a0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <parcours>
	updateDisplay(0, batteryPercentage(), chargeMode);
     7a4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
     7a8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
     7ac:	43 e0       	ldi	r20, 0x03	; 3
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 19 03 	call	0x632	; 0x632 <updateDisplay>
	warehouse(charging, communications);
     7b6:	be 01       	movw	r22, r28
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <warehouse>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     7be:	88 e8       	ldi	r24, 0x88	; 136
     7c0:	93 e1       	ldi	r25, 0x13	; 19
     7c2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
	delay(5000);								// wacht totdat de robot vol is
	warehouse(charging, communications);
     7c6:	be 01       	movw	r22, r28
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <warehouse>
	whileBarcode();
     7ce:	0e 94 ae 03 	call	0x75c	; 0x75c <whileBarcode>
	updateDisplay(0, batteryPercentage(), mazeSolver);
     7d2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
     7d6:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 19 03 	call	0x632	; 0x632 <updateDisplay>
	parcours('B', communications);
     7e4:	be 01       	movw	r22, r28
     7e6:	82 e4       	ldi	r24, 0x42	; 66
     7e8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <parcours>
	whileLineEnd();
     7ec:	0e 94 b7 03 	call	0x76e	; 0x76e <whileLineEnd>
	motorControl('L');
     7f0:	8c e4       	ldi	r24, 0x4C	; 76
     7f2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
}
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <pickOrder>:

void pickOrder(Communications *communications)
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
	whileBarcode();
     802:	0e 94 ae 03 	call	0x75c	; 0x75c <whileBarcode>
	parcours('T', communications);
     806:	be 01       	movw	r22, r28
     808:	84 e5       	ldi	r24, 0x54	; 84
     80a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <parcours>
	warehouse(orderPicking, communications); 	
     80e:	be 01       	movw	r22, r28
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <warehouse>
	parcours('B', communications);
     816:	be 01       	movw	r22, r28
     818:	82 e4       	ldi	r24, 0x42	; 66
     81a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <parcours>
	whileLineEnd();
     81e:	0e 94 b7 03 	call	0x76e	; 0x76e <whileLineEnd>
	motorControl('L');
     822:	8c e4       	ldi	r24, 0x4C	; 76
     824:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <main>:

int main()
{
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	c3 57       	subi	r28, 0x73	; 115
     838:	d1 09       	sbc	r29, r1
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
	play_from_program_space(welcome);
     844:	8a e7       	ldi	r24, 0x7A	; 122
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 c5 12 	call	0x258a	; 0x258a <play_from_program_space>
	
	Communications communications;
	Communications_INIT(&communications);
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	0e 94 c3 02 	call	0x586	; 0x586 <Communications_INIT>
	
	initialize(&communications);
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	0e 94 74 04 	call	0x8e8	; 0x8e8 <initialize>
		
	while(1) 
	{
		//updateDisplay(0, batteryPercentage(), homingMode);
		communications.Update(&communications);
     85c:	e4 96       	adiw	r28, 0x34	; 52
     85e:	ee ad       	ldd	r30, Y+62	; 0x3e
     860:	ff ad       	ldd	r31, Y+63	; 0x3f
     862:	e4 97       	sbiw	r28, 0x34	; 52
     864:	ce 01       	movw	r24, r28
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	09 95       	icall
		
		communications.locationx = -1;
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	e0 96       	adiw	r28, 0x30	; 48
     86e:	8f af       	std	Y+63, r24	; 0x3f
     870:	e0 97       	sbiw	r28, 0x30	; 48
		communications.locationy = -1;
     872:	e1 96       	adiw	r28, 0x31	; 49
     874:	8f af       	std	Y+63, r24	; 0x3f
     876:	e1 97       	sbiw	r28, 0x31	; 49
		
		lcd_goto_xy(0, 0);
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <lcd_goto_xy>
						
		switch (communications.EmergencyStop) {
     880:	ad 96       	adiw	r28, 0x2d	; 45
     882:	8f ad       	ldd	r24, Y+63	; 0x3f
     884:	ad 97       	sbiw	r28, 0x2d	; 45
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	21 f1       	breq	.+72     	; 0x8d2 <main+0xa4>
     88a:	28 f0       	brcs	.+10     	; 0x896 <main+0x68>
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	21 f1       	breq	.+72     	; 0x8d8 <main+0xaa>
     890:	84 30       	cpi	r24, 0x04	; 4
     892:	29 f1       	breq	.+74     	; 0x8de <main+0xb0>
     894:	e3 cf       	rjmp	.-58     	; 0x85c <main+0x2e>
				}
				else*/
// 				print_long(communications.locationx);
// 				print_long(communications.locationy);
				
				if (communications.flag==1)
     896:	e2 96       	adiw	r28, 0x32	; 50
     898:	8f ad       	ldd	r24, Y+63	; 0x3f
     89a:	e2 97       	sbiw	r28, 0x32	; 50
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	f1 f6       	brne	.-68     	; 0x85c <main+0x2e>
				{
					communications.flag=0;
     8a0:	e2 96       	adiw	r28, 0x32	; 50
     8a2:	1f ae       	std	Y+63, r1	; 0x3f
     8a4:	e2 97       	sbiw	r28, 0x32	; 50
					
					play_from_program_space(welcome);
     8a6:	8a e7       	ldi	r24, 0x7A	; 122
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 c5 12 	call	0x258a	; 0x258a <play_from_program_space>
					communications.locationx = 0;
     8ae:	e0 96       	adiw	r28, 0x30	; 48
     8b0:	1f ae       	std	Y+63, r1	; 0x3f
     8b2:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = 0;
     8b4:	e1 96       	adiw	r28, 0x31	; 49
     8b6:	1f ae       	std	Y+63, r1	; 0x3f
     8b8:	e1 97       	sbiw	r28, 0x31	; 49
					pickOrder(&communications);
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	0e 94 fe 03 	call	0x7fc	; 0x7fc <pickOrder>
					communications.locationx = -1;
     8c2:	8f ef       	ldi	r24, 0xFF	; 255
     8c4:	e0 96       	adiw	r28, 0x30	; 48
     8c6:	8f af       	std	Y+63, r24	; 0x3f
     8c8:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = -1;
     8ca:	e1 96       	adiw	r28, 0x31	; 49
     8cc:	8f af       	std	Y+63, r24	; 0x3f
     8ce:	e1 97       	sbiw	r28, 0x31	; 49
     8d0:	c5 cf       	rjmp	.-118    	; 0x85c <main+0x2e>
				}
				break;
				delay(100);
			case 2:
				Spin();
     8d2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <Spin>
				break;
     8d6:	c2 cf       	rjmp	.-124    	; 0x85c <main+0x2e>
			case 3:
				manualControl();
     8d8:	0e 94 36 07 	call	0xe6c	; 0xe6c <manualControl>
				break;
     8dc:	bf cf       	rjmp	.-130    	; 0x85c <main+0x2e>
				
			case 4:
				charge_3pi(&communications);
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	0e 94 c0 03 	call	0x780	; 0x780 <charge_3pi>
				break;
     8e6:	ba cf       	rjmp	.-140    	; 0x85c <main+0x2e>

000008e8 <initialize>:
	set_motors(50,50);
	delay(200);
	set_motors(0,0);
}

void println(int x){					//"print" function for trouble shooting
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <myComs+0x1>
     8f0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <myComs>
     8f4:	80 ed       	ldi	r24, 0xD0	; 208
     8f6:	97 e0       	ldi	r25, 0x07	; 7
     8f8:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <pololu_3pi_init>
     8fc:	0d c0       	rjmp	.+26     	; 0x918 <__stack+0x19>
     8fe:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <clear>
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 58 14 	call	0x28b0	; 0x28b0 <lcd_goto_xy>
     90a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <read_battery_millivolts_3pi>
     90e:	bc 01       	movw	r22, r24
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 35 14 	call	0x286a	; 0x286a <print_long>
     918:	80 e1       	ldi	r24, 0x10	; 16
     91a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <button_is_pressed>
     91e:	88 23       	and	r24, r24
     920:	71 f3       	breq	.-36     	; 0x8fe <initialize+0x16>
     922:	80 e1       	ldi	r24, 0x10	; 16
     924:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <wait_for_button_release>
     928:	88 ee       	ldi	r24, 0xE8	; 232
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
     930:	c0 e0       	ldi	r28, 0x00	; 0
     932:	d0 e0       	ldi	r29, 0x00	; 0
     934:	19 c0       	rjmp	.+50     	; 0x968 <__stack+0x69>
     936:	ce 01       	movw	r24, r28
     938:	44 97       	sbiw	r24, 0x14	; 20
     93a:	88 97       	sbiw	r24, 0x28	; 40
     93c:	38 f0       	brcs	.+14     	; 0x94c <__stack+0x4d>
     93e:	68 ed       	ldi	r22, 0xD8	; 216
     940:	7f ef       	ldi	r23, 0xFF	; 255
     942:	88 e2       	ldi	r24, 0x28	; 40
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0x59>
     94c:	68 e2       	ldi	r22, 0x28	; 40
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	88 ed       	ldi	r24, 0xD8	; 216
     952:	9f ef       	ldi	r25, 0xFF	; 255
     954:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <calibrate_line_sensors>
     95e:	84 e1       	ldi	r24, 0x14	; 20
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
     966:	21 96       	adiw	r28, 0x01	; 1
     968:	c0 35       	cpi	r28, 0x50	; 80
     96a:	d1 05       	cpc	r29, r1
     96c:	20 f3       	brcs	.-56     	; 0x936 <__stack+0x37>
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     97a:	80 e1       	ldi	r24, 0x10	; 16
     97c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <button_is_pressed>
     980:	88 23       	and	r24, r24
     982:	d9 f3       	breq	.-10     	; 0x97a <__stack+0x7b>
     984:	80 e1       	ldi	r24, 0x10	; 16
     986:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <wait_for_button_release>
     98a:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <clear>
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <inch>:
     994:	62 e3       	ldi	r22, 0x32	; 50
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	82 e3       	ldi	r24, 0x32	; 50
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     9a0:	88 ec       	ldi	r24, 0xC8	; 200
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     9b4:	08 95       	ret

000009b6 <wait>:
	lcd_goto_xy(0,0);
	print(x);	*/
}

void wait(){							// wait function for the robot so it will wait for a button press B
	set_motors(0,0);
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
						
	while(!button_is_pressed(BUTTON_B)){}
     9c2:	80 e1       	ldi	r24, 0x10	; 16
     9c4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <button_is_pressed>
     9c8:	88 23       	and	r24, r24
     9ca:	d9 f3       	breq	.-10     	; 0x9c2 <wait+0xc>
	wait_for_button_release(BUTTON_B);
     9cc:	80 e1       	ldi	r24, 0x10	; 16
     9ce:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <wait_for_button_release>
     9d2:	08 95       	ret

000009d4 <lineType>:
}

char lineType(){																																								// function that returns the type of junction it detects
	while(1){																																									// >= black line		<=white
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     9d4:	61 e0       	ldi	r22, 0x01	; 1
     9d6:	81 e1       	ldi	r24, 0x11	; 17
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>

			if (sensors[0] >= Refrence_value && sensors[4] >= Refrence_value){																									//Checks if its A "Barcode", a X junction or a T junction and returns the junction
     9de:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     9e2:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     9e6:	80 39       	cpi	r24, 0x90	; 144
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	92 07       	cpc	r25, r18
     9ec:	08 f4       	brcc	.+2      	; 0x9f0 <lineType+0x1c>
     9ee:	65 c0       	rjmp	.+202    	; 0xaba <lineType+0xe6>
     9f0:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <sensors+0x8>
     9f4:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <sensors+0x9>
     9f8:	20 39       	cpi	r18, 0x90	; 144
     9fa:	31 40       	sbci	r19, 0x01	; 1
     9fc:	08 f4       	brcc	.+2      	; 0xa00 <lineType+0x2c>
     9fe:	5d c0       	rjmp	.+186    	; 0xaba <lineType+0xe6>
					inch();
     a00:	0e 94 ca 04 	call	0x994	; 0x994 <inch>
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	81 e1       	ldi	r24, 0x11	; 17
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
					if (sensors[0] >=Refrence_value && sensors[1] >=Refrence_value && sensors[3] >= Refrence_value && sensors[4] >=Refrence_value){
     a0e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     a12:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     a16:	80 39       	cpi	r24, 0x90	; 144
     a18:	91 40       	sbci	r25, 0x01	; 1
     a1a:	a8 f1       	brcs	.+106    	; 0xa86 <lineType+0xb2>
     a1c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     a20:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     a24:	80 39       	cpi	r24, 0x90	; 144
     a26:	91 40       	sbci	r25, 0x01	; 1
     a28:	70 f1       	brcs	.+92     	; 0xa86 <lineType+0xb2>
     a2a:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     a2e:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     a32:	80 39       	cpi	r24, 0x90	; 144
     a34:	91 40       	sbci	r25, 0x01	; 1
     a36:	38 f1       	brcs	.+78     	; 0xa86 <lineType+0xb2>
     a38:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     a3c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     a40:	80 39       	cpi	r24, 0x90	; 144
     a42:	91 40       	sbci	r25, 0x01	; 1
     a44:	60 f4       	brcc	.+24     	; 0xa5e <lineType+0x8a>
     a46:	1f c0       	rjmp	.+62     	; 0xa86 <lineType+0xb2>
							while(sensors[0] >= 400 || sensors[4] >=400)
						{
							read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	81 e1       	ldi	r24, 0x11	; 17
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
							set_motors(75,75);
     a52:	6b e4       	ldi	r22, 0x4B	; 75
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	8b e4       	ldi	r24, 0x4B	; 75
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>

			if (sensors[0] >= Refrence_value && sensors[4] >= Refrence_value){																									//Checks if its A "Barcode", a X junction or a T junction and returns the junction
					inch();
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
					if (sensors[0] >=Refrence_value && sensors[1] >=Refrence_value && sensors[3] >= Refrence_value && sensors[4] >=Refrence_value){
							while(sensors[0] >= 400 || sensors[4] >=400)
     a5e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors>
     a62:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x1>
     a66:	80 39       	cpi	r24, 0x90	; 144
     a68:	91 40       	sbci	r25, 0x01	; 1
     a6a:	70 f7       	brcc	.-36     	; 0xa48 <lineType+0x74>
     a6c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sensors+0x8>
     a70:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <sensors+0x9>
     a74:	80 39       	cpi	r24, 0x90	; 144
     a76:	91 40       	sbci	r25, 0x01	; 1
     a78:	38 f7       	brcc	.-50     	; 0xa48 <lineType+0x74>
						{
							read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
							set_motors(75,75);
						}
						inch();
     a7a:	0e 94 ca 04 	call	0x994	; 0x994 <inch>
						wait();
     a7e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <wait>
						return Barcode;
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	08 95       	ret
					}
					else if (sensors[2] >=Refrence_value || (sensors[1] >= Refrence_value || sensors[3] >= Refrence_value)){
     a86:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     a8a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     a8e:	80 39       	cpi	r24, 0x90	; 144
     a90:	91 40       	sbci	r25, 0x01	; 1
     a92:	08 f0       	brcs	.+2      	; 0xa96 <lineType+0xc2>
     a94:	79 c0       	rjmp	.+242    	; 0xb88 <lineType+0x1b4>
     a96:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     a9a:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     a9e:	80 39       	cpi	r24, 0x90	; 144
     aa0:	91 40       	sbci	r25, 0x01	; 1
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <lineType+0xd2>
     aa4:	73 c0       	rjmp	.+230    	; 0xb8c <lineType+0x1b8>
     aa6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     aaa:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     aae:	80 39       	cpi	r24, 0x90	; 144
     ab0:	91 40       	sbci	r25, 0x01	; 1
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <lineType+0xe2>
     ab4:	6d c0       	rjmp	.+218    	; 0xb90 <lineType+0x1bc>
						println(X_junction);
						return X_junction;
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	08 95       	ret
						println(T_junction);
						return T_junction;
					}
				}
							
		else if (sensors[0] >=Refrence_value && sensors[1] >= Refrence_value && sensors[4] <= Refrence_value ){																	//Checks if its a left corner or a straight with left corner and returns the junction
     aba:	80 39       	cpi	r24, 0x90	; 144
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	96 07       	cpc	r25, r22
     ac0:	38 f1       	brcs	.+78     	; 0xb10 <lineType+0x13c>
     ac2:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <sensors+0x2>
     ac6:	30 91 14 02 	lds	r19, 0x0214	; 0x800214 <sensors+0x3>
     aca:	20 39       	cpi	r18, 0x90	; 144
     acc:	31 40       	sbci	r19, 0x01	; 1
     ace:	00 f1       	brcs	.+64     	; 0xb10 <lineType+0x13c>
     ad0:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <sensors+0x8>
     ad4:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <sensors+0x9>
     ad8:	21 39       	cpi	r18, 0x91	; 145
     ada:	31 40       	sbci	r19, 0x01	; 1
     adc:	c8 f4       	brcc	.+50     	; 0xb10 <lineType+0x13c>
			inch();
     ade:	0e 94 ca 04 	call	0x994	; 0x994 <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	81 e1       	ldi	r24, 0x11	; 17
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
     aec:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     af0:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     af4:	80 39       	cpi	r24, 0x90	; 144
     af6:	91 40       	sbci	r25, 0x01	; 1
     af8:	08 f0       	brcs	.+2      	; 0xafc <lineType+0x128>
     afa:	4c c0       	rjmp	.+152    	; 0xb94 <lineType+0x1c0>
     afc:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     b00:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     b04:	80 39       	cpi	r24, 0x90	; 144
     b06:	91 40       	sbci	r25, 0x01	; 1
     b08:	08 f4       	brcc	.+2      	; 0xb0c <lineType+0x138>
     b0a:	46 c0       	rjmp	.+140    	; 0xb98 <lineType+0x1c4>
				println(Straight_left_junction);
				return Straight_left_junction;
     b0c:	86 e0       	ldi	r24, 0x06	; 6
     b0e:	08 95       	ret
				return Left_corner;
			}
		}
		
		
		else if (sensors[3] >=Refrence_value && sensors[4] >= Refrence_value && sensors[0] <= Refrence_value){																	//Checks if its a right corner or a straight with right corner and returns the junction
     b10:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <sensors+0x6>
     b14:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <sensors+0x7>
     b18:	20 39       	cpi	r18, 0x90	; 144
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	36 07       	cpc	r19, r22
     b1e:	08 f1       	brcs	.+66     	; 0xb62 <lineType+0x18e>
     b20:	40 91 19 02 	lds	r20, 0x0219	; 0x800219 <sensors+0x8>
     b24:	50 91 1a 02 	lds	r21, 0x021A	; 0x80021a <sensors+0x9>
     b28:	40 39       	cpi	r20, 0x90	; 144
     b2a:	51 40       	sbci	r21, 0x01	; 1
     b2c:	d0 f0       	brcs	.+52     	; 0xb62 <lineType+0x18e>
     b2e:	81 39       	cpi	r24, 0x91	; 145
     b30:	91 40       	sbci	r25, 0x01	; 1
     b32:	b8 f4       	brcc	.+46     	; 0xb62 <lineType+0x18e>
			inch();
     b34:	0e 94 ca 04 	call	0x994	; 0x994 <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	81 e1       	ldi	r24, 0x11	; 17
     b3c:	92 e0       	ldi	r25, 0x02	; 2
     b3e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
     b42:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b46:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b4a:	80 39       	cpi	r24, 0x90	; 144
     b4c:	91 40       	sbci	r25, 0x01	; 1
     b4e:	30 f5       	brcc	.+76     	; 0xb9c <lineType+0x1c8>
     b50:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     b54:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     b58:	80 39       	cpi	r24, 0x90	; 144
     b5a:	91 40       	sbci	r25, 0x01	; 1
     b5c:	08 f1       	brcs	.+66     	; 0xba0 <lineType+0x1cc>
				println(Straight_right_junction);
				return Straight_right_junction;
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	08 95       	ret
				println(Straight_left_junction);
				return Right_corner;
			}
		}
		
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){															// check if the line ends and returns the junction
     b62:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     b66:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     b6a:	89 3c       	cpi	r24, 0xC9	; 201
     b6c:	91 05       	cpc	r25, r1
     b6e:	d0 f4       	brcc	.+52     	; 0xba4 <lineType+0x1d0>
     b70:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     b74:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     b78:	89 3c       	cpi	r24, 0xC9	; 201
     b7a:	91 05       	cpc	r25, r1
     b7c:	a8 f4       	brcc	.+42     	; 0xba8 <lineType+0x1d4>
     b7e:	29 3c       	cpi	r18, 0xC9	; 201
     b80:	31 05       	cpc	r19, r1
     b82:	a0 f0       	brcs	.+40     	; 0xbac <lineType+0x1d8>
					println(Line_end);																													
					return Line_end;
				}
		else{																																									// else its a straight
			return Straight;
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	08 95       	ret
						wait();
						return Barcode;
					}
					else if (sensors[2] >=Refrence_value || (sensors[1] >= Refrence_value || sensors[3] >= Refrence_value)){
						println(X_junction);
						return X_junction;
     b88:	88 e0       	ldi	r24, 0x08	; 8
     b8a:	08 95       	ret
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	08 95       	ret
					}
					else {
						println(T_junction);
						return T_junction;
     b90:	87 e0       	ldi	r24, 0x07	; 7
     b92:	08 95       	ret
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
				println(Straight_left_junction);
				return Straight_left_junction;
     b94:	86 e0       	ldi	r24, 0x06	; 6
     b96:	08 95       	ret
			}
			else{
				println(Left_corner);
				return Left_corner;
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	08 95       	ret
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
				println(Straight_right_junction);
				return Straight_right_junction;
     b9c:	85 e0       	ldi	r24, 0x05	; 5
     b9e:	08 95       	ret
			}
			else{
				println(Straight_left_junction);
				return Right_corner;
     ba0:	84 e0       	ldi	r24, 0x04	; 4
     ba2:	08 95       	ret
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){															// check if the line ends and returns the junction
					println(Line_end);																													
					return Line_end;
				}
		else{																																									// else its a straight
			return Straight;
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	08 95       	ret
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 95       	ret
			}
		}
		
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){															// check if the line ends and returns the junction
					println(Line_end);																													
					return Line_end;
     bac:	81 e0       	ldi	r24, 0x01	; 1
			return Straight;
		}
		
	
	}
}
     bae:	08 95       	ret

00000bb0 <motorControl>:

void motorControl(char x){																																					// function that controls the motor movement and the turns
     bb0:	8f 92       	push	r8
     bb2:	9f 92       	push	r9
     bb4:	af 92       	push	r10
     bb6:	bf 92       	push	r11
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	18 2f       	mov	r17, r24
	myComs->Update(myComs);
     bc8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <myComs>
     bcc:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <myComs+0x1>
     bd0:	fc 01       	movw	r30, r24
     bd2:	ef 58       	subi	r30, 0x8F	; 143
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	01 90       	ld	r0, Z+
     bd8:	f0 81       	ld	r31, Z
     bda:	e0 2d       	mov	r30, r0
     bdc:	09 95       	icall
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	81 e1       	ldi	r24, 0x11	; 17
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 76 17 	call	0x2eec	; 0x2eec <read_line>
     be8:	ec 01       	movw	r28, r24
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	81 e1       	ldi	r24, 0x11	; 17
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
	
	while (analog_read(7) >= 200) {																																			// Checks if there is an object infront of it, if there is it stops the motor and gives feedback to the display
     bf4:	0d c0       	rjmp	.+26     	; 0xc10 <motorControl+0x60>
		set_motors(0, 0);
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		errorDisplay(object, batteryPercentage());
     c02:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
     c06:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <errorDisplay>
void motorControl(char x){																																					// function that controls the motor movement and the turns
	myComs->Update(myComs);
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	
	while (analog_read(7) >= 200) {																																			// Checks if there is an object infront of it, if there is it stops the motor and gives feedback to the display
     c10:	87 e0       	ldi	r24, 0x07	; 7
     c12:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <analog_read>
     c16:	88 3c       	cpi	r24, 0xC8	; 200
     c18:	91 05       	cpc	r25, r1
     c1a:	68 f7       	brcc	.-38     	; 0xbf6 <motorControl+0x46>
		set_motors(0, 0);
		errorDisplay(object, batteryPercentage());
	}

		
	if(myComs->EmergencyStop == 1){																																	//Emergency Brake
     c1c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     c20:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     c24:	e5 59       	subi	r30, 0x95	; 149
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	80 81       	ld	r24, Z
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	71 f4       	brne	.+28     	; 0xc4a <motorControl+0x9a>
		set_motors(0,0);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		errorDisplay(emergency,batteryPercentage());	
     c3a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
     c3e:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	0e 94 72 03 	call	0x6e4	; 0x6e4 <errorDisplay>
     c48:	05 c1       	rjmp	.+522    	; 0xe54 <motorControl+0x2a4>
	}
	
	else if(x == 'L'){																																						//Turn Left
     c4a:	1c 34       	cpi	r17, 0x4C	; 76
     c4c:	39 f5       	brne	.+78     	; 0xc9c <motorControl+0xec>
		set_motors(-turn_value,turn_value);
     c4e:	6c e3       	ldi	r22, 0x3C	; 60
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	84 ec       	ldi	r24, 0xC4	; 196
     c54:	9f ef       	ldi	r25, 0xFF	; 255
     c56:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		
		while (sensors[2] >=Refrence_value)
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <motorControl+0xb6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	81 e1       	ldi	r24, 0x11	; 17
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
	}
	
	else if(x == 'L'){																																						//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
     c66:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     c6a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     c6e:	80 39       	cpi	r24, 0x90	; 144
     c70:	91 40       	sbci	r25, 0x01	; 1
     c72:	a0 f7       	brcc	.-24     	; 0xc5c <motorControl+0xac>
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <motorControl+0xd0>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	81 e1       	ldi	r24, 0x11	; 17
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
	else if(x == 'L'){																																						//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     c80:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     c84:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     c88:	81 39       	cpi	r24, 0x91	; 145
     c8a:	91 40       	sbci	r25, 0x01	; 1
     c8c:	a0 f3       	brcs	.-24     	; 0xc76 <motorControl+0xc6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     c9a:	dc c0       	rjmp	.+440    	; 0xe54 <motorControl+0x2a4>
	}
	
	
	else if(x == 'R'){																																						//Turn Right
     c9c:	12 35       	cpi	r17, 0x52	; 82
     c9e:	39 f5       	brne	.+78     	; 0xcee <motorControl+0x13e>
		set_motors(turn_value,-turn_value);
     ca0:	64 ec       	ldi	r22, 0xC4	; 196
     ca2:	7f ef       	ldi	r23, 0xFF	; 255
     ca4:	8c e3       	ldi	r24, 0x3C	; 60
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		
		while (sensors[2] >=Refrence_value)
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <motorControl+0x108>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	81 e1       	ldi	r24, 0x11	; 17
     cb2:	92 e0       	ldi	r25, 0x02	; 2
     cb4:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
	
	
	else if(x == 'R'){																																						//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
     cb8:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     cbc:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     cc0:	80 39       	cpi	r24, 0x90	; 144
     cc2:	91 40       	sbci	r25, 0x01	; 1
     cc4:	a0 f7       	brcc	.-24     	; 0xcae <motorControl+0xfe>
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <motorControl+0x122>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	81 e1       	ldi	r24, 0x11	; 17
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
	else if(x == 'R'){																																						//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     cd2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     cd6:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     cda:	81 39       	cpi	r24, 0x91	; 145
     cdc:	91 40       	sbci	r25, 0x01	; 1
     cde:	a0 f3       	brcs	.-24     	; 0xcc8 <motorControl+0x118>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     cec:	b3 c0       	rjmp	.+358    	; 0xe54 <motorControl+0x2a4>
	}
		
			
	else if(x == 'S'){																																						//drive straight and adjusts the robot so it follows the line
     cee:	13 35       	cpi	r17, 0x53	; 83
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <motorControl+0x144>
     cf2:	66 c0       	rjmp	.+204    	; 0xdc0 <motorControl+0x210>
		
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     cf4:	ce 01       	movw	r24, r28
     cf6:	80 5d       	subi	r24, 0xD0	; 208
     cf8:	97 40       	sbci	r25, 0x07	; 7

		// Compute the derivative (change) and integral (sum) of the
		// position.
		int derivative = proportional - last_proportional;
     cfa:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <last_proportional>
     cfe:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <last_proportional+0x1>
     d02:	ec 01       	movw	r28, r24
     d04:	c2 1b       	sub	r28, r18
     d06:	d3 0b       	sbc	r29, r19
		integral = integral + proportional;
     d08:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <integral>
     d0c:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <integral+0x1>
     d10:	fc 01       	movw	r30, r24
     d12:	e6 0f       	add	r30, r22
     d14:	f7 1f       	adc	r31, r23
     d16:	f0 93 10 02 	sts	0x0210, r31	; 0x800210 <integral+0x1>
     d1a:	e0 93 0f 02 	sts	0x020F, r30	; 0x80020f <integral>

		// Remember the last position.
		 last_proportional = proportional;
     d1e:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <last_proportional+0x1>
     d22:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <last_proportional>
 
 		int power_difference = proportional/10 + integral/40000 + derivative*0.50;						
     d26:	6a e0       	ldi	r22, 0x0A	; 10
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__divmodhi4>
     d2e:	6b 01       	movw	r12, r22
     d30:	bf 01       	movw	r22, r30
     d32:	ff 0f       	add	r31, r31
     d34:	88 0b       	sbc	r24, r24
     d36:	99 0b       	sbc	r25, r25
     d38:	20 e4       	ldi	r18, 0x40	; 64
     d3a:	3c e9       	ldi	r19, 0x9C	; 156
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__divmodsi4>
     d44:	0d 2c       	mov	r0, r13
     d46:	00 0c       	add	r0, r0
     d48:	ee 08       	sbc	r14, r14
     d4a:	ff 08       	sbc	r15, r15
     d4c:	c2 0e       	add	r12, r18
     d4e:	d3 1e       	adc	r13, r19
     d50:	e4 1e       	adc	r14, r20
     d52:	f5 1e       	adc	r15, r21
     d54:	be 01       	movw	r22, r28
     d56:	dd 0f       	add	r29, r29
     d58:	88 0b       	sbc	r24, r24
     d5a:	99 0b       	sbc	r25, r25
     d5c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__floatsisf>
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
     d6c:	4b 01       	movw	r8, r22
     d6e:	5c 01       	movw	r10, r24
     d70:	c7 01       	movw	r24, r14
     d72:	b6 01       	movw	r22, r12
     d74:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__floatsisf>
     d78:	a5 01       	movw	r20, r10
     d7a:	94 01       	movw	r18, r8
     d7c:	0e 94 bf 0c 	call	0x197e	; 0x197e <__addsf3>
     d80:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
     d84:	cb 01       	movw	r24, r22

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 70;
		if(power_difference > max)
     d86:	67 34       	cpi	r22, 0x47	; 71
     d88:	71 05       	cpc	r23, r1
     d8a:	14 f0       	brlt	.+4      	; 0xd90 <motorControl+0x1e0>
			power_difference = max;
     d8c:	86 e4       	ldi	r24, 0x46	; 70
     d8e:	90 e0       	ldi	r25, 0x00	; 0
		if(power_difference < -max)
     d90:	8a 3b       	cpi	r24, 0xBA	; 186
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	92 07       	cpc	r25, r18
     d96:	14 f4       	brge	.+4      	; 0xd9c <motorControl+0x1ec>
			power_difference = -max;
     d98:	8a eb       	ldi	r24, 0xBA	; 186
     d9a:	9f ef       	ldi	r25, 0xFF	; 255

		if(power_difference < 0)
     d9c:	99 23       	and	r25, r25
     d9e:	3c f4       	brge	.+14     	; 0xdae <motorControl+0x1fe>
			set_motors(max+power_difference, max);
     da0:	66 e4       	ldi	r22, 0x46	; 70
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	8a 5b       	subi	r24, 0xBA	; 186
     da6:	9f 4f       	sbci	r25, 0xFF	; 255
     da8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     dac:	53 c0       	rjmp	.+166    	; 0xe54 <motorControl+0x2a4>
		else
			set_motors(max, max-power_difference);
     dae:	66 e4       	ldi	r22, 0x46	; 70
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	68 1b       	sub	r22, r24
     db4:	79 0b       	sbc	r23, r25
     db6:	86 e4       	ldi	r24, 0x46	; 70
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     dbe:	4a c0       	rjmp	.+148    	; 0xe54 <motorControl+0x2a4>
		
	}
	
	
	else if(x == 'B'){																																							//Reverse while following the line
     dc0:	12 34       	cpi	r17, 0x42	; 66
     dc2:	09 f5       	brne	.+66     	; 0xe06 <motorControl+0x256>
		set_motors(-50,-50);
     dc4:	6e ec       	ldi	r22, 0xCE	; 206
     dc6:	7f ef       	ldi	r23, 0xFF	; 255
     dc8:	8e ec       	ldi	r24, 0xCE	; 206
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		
		if (sensors[3] >=Refrence_value)
     dd0:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <sensors+0x6>
     dd4:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <sensors+0x7>
     dd8:	80 39       	cpi	r24, 0x90	; 144
     dda:	91 40       	sbci	r25, 0x01	; 1
     ddc:	30 f0       	brcs	.+12     	; 0xdea <motorControl+0x23a>
			set_motors(-50,-55);
     dde:	69 ec       	ldi	r22, 0xC9	; 201
     de0:	7f ef       	ldi	r23, 0xFF	; 255
     de2:	8e ec       	ldi	r24, 0xCE	; 206
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		if (sensors[1] >=Refrence_value)
     dea:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x2>
     dee:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x3>
     df2:	80 39       	cpi	r24, 0x90	; 144
     df4:	91 40       	sbci	r25, 0x01	; 1
     df6:	70 f1       	brcs	.+92     	; 0xe54 <motorControl+0x2a4>
			set_motors(-55,-50);
     df8:	6e ec       	ldi	r22, 0xCE	; 206
     dfa:	7f ef       	ldi	r23, 0xFF	; 255
     dfc:	89 ec       	ldi	r24, 0xC9	; 201
     dfe:	9f ef       	ldi	r25, 0xFF	; 255
     e00:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     e04:	27 c0       	rjmp	.+78     	; 0xe54 <motorControl+0x2a4>
	}
	
	
	else if(x == 'T'){																																							// Turn around
     e06:	14 35       	cpi	r17, 0x54	; 84
     e08:	a1 f4       	brne	.+40     	; 0xe32 <motorControl+0x282>
		set_motors(-turn_value,turn_value);
     e0a:	6c e3       	ldi	r22, 0x3C	; 60
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	84 ec       	ldi	r24, 0xC4	; 196
     e10:	9f ef       	ldi	r25, 0xFF	; 255
     e12:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		
		while (sensors[2] <=Refrence_value)
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <motorControl+0x272>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	81 e1       	ldi	r24, 0x11	; 17
     e1c:	92 e0       	ldi	r25, 0x02	; 2
     e1e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <read_line_sensors_calibrated>
	
	
	else if(x == 'T'){																																							// Turn around
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] <=Refrence_value)
     e22:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x4>
     e26:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x5>
     e2a:	81 39       	cpi	r24, 0x91	; 145
     e2c:	91 40       	sbci	r25, 0x01	; 1
     e2e:	a0 f3       	brcs	.-24     	; 0xe18 <motorControl+0x268>
     e30:	11 c0       	rjmp	.+34     	; 0xe54 <motorControl+0x2a4>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
		
	else if(x == 'P')																																							//Robot stops slowly
     e32:	10 35       	cpi	r17, 0x50	; 80
     e34:	79 f4       	brne	.+30     	; 0xe54 <motorControl+0x2a4>
     e36:	0a c0       	rjmp	.+20     	; 0xe4c <motorControl+0x29c>
		for( int i=50;i>=0;i-=3)
		{
			set_motors(i,i);
     e38:	be 01       	movw	r22, r28
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
     e40:	84 e0       	ldi	r24, 0x04	; 4
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
		
	else if(x == 'P')																																							//Robot stops slowly
		for( int i=50;i>=0;i-=3)
     e48:	23 97       	sbiw	r28, 0x03	; 3
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <motorControl+0x2a0>
     e4c:	c2 e3       	ldi	r28, 0x32	; 50
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
     e50:	dd 23       	and	r29, r29
     e52:	94 f7       	brge	.-28     	; 0xe38 <motorControl+0x288>
			set_motors(i,i);
			delay(4);
		}
		
		
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	ff 90       	pop	r15
     e5c:	ef 90       	pop	r14
     e5e:	df 90       	pop	r13
     e60:	cf 90       	pop	r12
     e62:	bf 90       	pop	r11
     e64:	af 90       	pop	r10
     e66:	9f 90       	pop	r9
     e68:	8f 90       	pop	r8
     e6a:	08 95       	ret

00000e6c <manualControl>:

void manualControl(){																																							// function for manual control of the robot
static int speed = 0;
static unsigned int counter = 0;

updateDisplay(0,batteryPercentage(),manual);
     e6c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
     e70:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 19 03 	call	0x632	; 0x632 <updateDisplay>
	myComs->Update(myComs);
     e7e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <myComs>
     e82:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <myComs+0x1>
     e86:	fc 01       	movw	r30, r24
     e88:	ef 58       	subi	r30, 0x8F	; 143
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	01 90       	ld	r0, Z+
     e8e:	f0 81       	ld	r31, Z
     e90:	e0 2d       	mov	r30, r0
     e92:	09 95       	icall
	if(myComs->Direction[0] == 1){											// increase speed
     e94:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     e98:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     e9c:	85 a9       	ldd	r24, Z+53	; 0x35
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	d9 f5       	brne	.+118    	; 0xf18 <manualControl+0xac>
		set_motors(speed,speed);
     ea2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     ea6:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     eaa:	bc 01       	movw	r22, r24
     eac:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		if(counter % 20 == 0)
     eb0:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2284>
     eb4:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2284+0x1>
     eb8:	9a 01       	movw	r18, r20
     eba:	ad ec       	ldi	r26, 0xCD	; 205
     ebc:	bc ec       	ldi	r27, 0xCC	; 204
     ebe:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__umulhisi3>
     ec2:	92 95       	swap	r25
     ec4:	82 95       	swap	r24
     ec6:	8f 70       	andi	r24, 0x0F	; 15
     ec8:	89 27       	eor	r24, r25
     eca:	9f 70       	andi	r25, 0x0F	; 15
     ecc:	89 27       	eor	r24, r25
     ece:	64 e1       	ldi	r22, 0x14	; 20
     ed0:	68 9f       	mul	r22, r24
     ed2:	90 01       	movw	r18, r0
     ed4:	69 9f       	mul	r22, r25
     ed6:	30 0d       	add	r19, r0
     ed8:	11 24       	eor	r1, r1
     eda:	42 17       	cp	r20, r18
     edc:	53 07       	cpc	r21, r19
     ede:	49 f4       	brne	.+18     	; 0xef2 <manualControl+0x86>
		{
			speed++;
     ee0:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     ee4:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     eee:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		if(speed > 25)
     ef2:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     ef6:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     efa:	4a 97       	sbiw	r24, 0x1a	; 26
     efc:	34 f0       	brlt	.+12     	; 0xf0a <manualControl+0x9e>
		{
			speed = 25;
     efe:	89 e1       	ldi	r24, 0x19	; 25
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     f06:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		counter++;
     f0a:	4f 5f       	subi	r20, 0xFF	; 255
     f0c:	5f 4f       	sbci	r21, 0xFF	; 255
     f0e:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2284+0x1>
     f12:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2284>
     f16:	ba c0       	rjmp	.+372    	; 0x108c <manualControl+0x220>
	}
	else if(myComs->Direction[0] == 0 && myComs->Direction[2] == 0)			// decrease speed without button press
     f18:	81 11       	cpse	r24, r1
     f1a:	3d c0       	rjmp	.+122    	; 0xf96 <manualControl+0x12a>
     f1c:	97 a9       	ldd	r25, Z+55	; 0x37
     f1e:	91 11       	cpse	r25, r1
     f20:	3a c0       	rjmp	.+116    	; 0xf96 <manualControl+0x12a>
	{
		set_motors(speed,speed);
     f22:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     f26:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     f2a:	bc 01       	movw	r22, r24
     f2c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		if(counter % 20 == 0)
     f30:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2284>
     f34:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2284+0x1>
     f38:	9a 01       	movw	r18, r20
     f3a:	ad ec       	ldi	r26, 0xCD	; 205
     f3c:	bc ec       	ldi	r27, 0xCC	; 204
     f3e:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__umulhisi3>
     f42:	92 95       	swap	r25
     f44:	82 95       	swap	r24
     f46:	8f 70       	andi	r24, 0x0F	; 15
     f48:	89 27       	eor	r24, r25
     f4a:	9f 70       	andi	r25, 0x0F	; 15
     f4c:	89 27       	eor	r24, r25
     f4e:	64 e1       	ldi	r22, 0x14	; 20
     f50:	68 9f       	mul	r22, r24
     f52:	90 01       	movw	r18, r0
     f54:	69 9f       	mul	r22, r25
     f56:	30 0d       	add	r19, r0
     f58:	11 24       	eor	r1, r1
     f5a:	42 17       	cp	r20, r18
     f5c:	53 07       	cpc	r21, r19
     f5e:	49 f4       	brne	.+18     	; 0xf72 <manualControl+0x106>
		{
			speed--;
     f60:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     f64:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     f6e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		if(speed < 1)
     f72:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     f76:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     f7a:	18 16       	cp	r1, r24
     f7c:	19 06       	cpc	r1, r25
     f7e:	24 f0       	brlt	.+8      	; 0xf88 <manualControl+0x11c>
		{
			speed = 0;
     f80:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <speed.2283+0x1>
     f84:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <speed.2283>
		}
		counter++;
     f88:	4f 5f       	subi	r20, 0xFF	; 255
     f8a:	5f 4f       	sbci	r21, 0xFF	; 255
     f8c:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2284+0x1>
     f90:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2284>
     f94:	7b c0       	rjmp	.+246    	; 0x108c <manualControl+0x220>
	}
	
	else if(myComs->Direction[2] == 1){										// Backwards(decrease speed)				
     f96:	97 a9       	ldd	r25, Z+55	; 0x37
     f98:	91 30       	cpi	r25, 0x01	; 1
     f9a:	e1 f5       	brne	.+120    	; 0x1014 <manualControl+0x1a8>
		set_motors(speed,speed);
     f9c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     fa0:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     fa4:	bc 01       	movw	r22, r24
     fa6:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		if(counter % 20 == 0)
     faa:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2284>
     fae:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2284+0x1>
     fb2:	9a 01       	movw	r18, r20
     fb4:	ad ec       	ldi	r26, 0xCD	; 205
     fb6:	bc ec       	ldi	r27, 0xCC	; 204
     fb8:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__umulhisi3>
     fbc:	92 95       	swap	r25
     fbe:	82 95       	swap	r24
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	89 27       	eor	r24, r25
     fc4:	9f 70       	andi	r25, 0x0F	; 15
     fc6:	89 27       	eor	r24, r25
     fc8:	64 e1       	ldi	r22, 0x14	; 20
     fca:	68 9f       	mul	r22, r24
     fcc:	90 01       	movw	r18, r0
     fce:	69 9f       	mul	r22, r25
     fd0:	30 0d       	add	r19, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	42 17       	cp	r20, r18
     fd6:	53 07       	cpc	r21, r19
     fd8:	49 f4       	brne	.+18     	; 0xfec <manualControl+0x180>
		{
			speed--;
     fda:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     fde:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
     fe8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		if(speed < -25)
     fec:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
     ff0:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
     ff4:	87 3e       	cpi	r24, 0xE7	; 231
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	34 f4       	brge	.+12     	; 0x1006 <manualControl+0x19a>
		{
			speed = -25;
     ffa:	87 ee       	ldi	r24, 0xE7	; 231
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
    1002:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		counter++;
    1006:	4f 5f       	subi	r20, 0xFF	; 255
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2284+0x1>
    100e:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2284>
    1012:	3c c0       	rjmp	.+120    	; 0x108c <manualControl+0x220>
	}
	else if(myComs->Direction[0] == 1 && myComs->Direction[2] == 0)			// Increases button speed when below 0
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	d1 f5       	brne	.+116    	; 0x108c <manualControl+0x220>
    1018:	91 11       	cpse	r25, r1
    101a:	38 c0       	rjmp	.+112    	; 0x108c <manualControl+0x220>
	{
		set_motors(speed,speed);
    101c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
    1020:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
    1024:	bc 01       	movw	r22, r24
    1026:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
		if(counter % 20 == 0)
    102a:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <counter.2284>
    102e:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <counter.2284+0x1>
    1032:	9a 01       	movw	r18, r20
    1034:	ad ec       	ldi	r26, 0xCD	; 205
    1036:	bc ec       	ldi	r27, 0xCC	; 204
    1038:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__umulhisi3>
    103c:	92 95       	swap	r25
    103e:	82 95       	swap	r24
    1040:	8f 70       	andi	r24, 0x0F	; 15
    1042:	89 27       	eor	r24, r25
    1044:	9f 70       	andi	r25, 0x0F	; 15
    1046:	89 27       	eor	r24, r25
    1048:	64 e1       	ldi	r22, 0x14	; 20
    104a:	68 9f       	mul	r22, r24
    104c:	90 01       	movw	r18, r0
    104e:	69 9f       	mul	r22, r25
    1050:	30 0d       	add	r19, r0
    1052:	11 24       	eor	r1, r1
    1054:	42 17       	cp	r20, r18
    1056:	53 07       	cpc	r21, r19
    1058:	49 f4       	brne	.+18     	; 0x106c <manualControl+0x200>
		{
			speed++;
    105a:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
    105e:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <speed.2283+0x1>
    1068:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <speed.2283>
		}
		if(speed > -1)
    106c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
    1070:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
    1074:	99 23       	and	r25, r25
    1076:	24 f0       	brlt	.+8      	; 0x1080 <manualControl+0x214>
		{
			speed = 0;
    1078:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <speed.2283+0x1>
    107c:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <speed.2283>
		}
		counter++;
    1080:	4f 5f       	subi	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	50 93 fe 01 	sts	0x01FE, r21	; 0x8001fe <counter.2284+0x1>
    1088:	40 93 fd 01 	sts	0x01FD, r20	; 0x8001fd <counter.2284>
	}
	
	if(myComs->Direction[1] == 1){											// turn left
    108c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
    1090:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
    1094:	86 a9       	ldd	r24, Z+54	; 0x36
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	61 f4       	brne	.+24     	; 0x10b2 <manualControl+0x246>
		set_motors(speed/2,speed);
    109a:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <speed.2283>
    109e:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <speed.2283+0x1>
    10a2:	cb 01       	movw	r24, r22
    10a4:	77 23       	and	r23, r23
    10a6:	0c f4       	brge	.+2      	; 0x10aa <manualControl+0x23e>
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	95 95       	asr	r25
    10ac:	87 95       	ror	r24
    10ae:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
	}
	
	if(myComs->Direction[3] == 1){											// turn Right
    10b2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
    10b6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
    10ba:	80 ad       	ldd	r24, Z+56	; 0x38
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	69 f4       	brne	.+26     	; 0x10da <manualControl+0x26e>
		set_motors(speed,speed/2);
    10c0:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <speed.2283>
    10c4:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <speed.2283+0x1>
    10c8:	bc 01       	movw	r22, r24
    10ca:	99 23       	and	r25, r25
    10cc:	14 f4       	brge	.+4      	; 0x10d2 <manualControl+0x266>
    10ce:	6f 5f       	subi	r22, 0xFF	; 255
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	75 95       	asr	r23
    10d4:	67 95       	ror	r22
    10d6:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
    10da:	08 95       	ret

000010dc <Spin>:
	}
}

void Spin(){																// spin fuction 
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
	errorDisplay(slipped,batteryPercentage());
    10e0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
    10e4:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	0e 94 72 03 	call	0x6e4	; 0x6e4 <errorDisplay>
	for(int i = 0;i<=255;i++){
    10ee:	c0 e0       	ldi	r28, 0x00	; 0
    10f0:	d0 e0       	ldi	r29, 0x00	; 0
    10f2:	0c c0       	rjmp	.+24     	; 0x110c <Spin+0x30>
		set_motors(i,0-i);
    10f4:	66 27       	eor	r22, r22
    10f6:	77 27       	eor	r23, r23
    10f8:	6c 1b       	sub	r22, r28
    10fa:	7d 0b       	sbc	r23, r29
    10fc:	ce 01       	movw	r24, r28
    10fe:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
	}
}

void Spin(){																// spin fuction 
	errorDisplay(slipped,batteryPercentage());
	for(int i = 0;i<=255;i++){
    110a:	21 96       	adiw	r28, 0x01	; 1
    110c:	cf 3f       	cpi	r28, 0xFF	; 255
    110e:	d1 05       	cpc	r29, r1
    1110:	89 f3       	breq	.-30     	; 0x10f4 <Spin+0x18>
    1112:	84 f3       	brlt	.-32     	; 0x10f4 <Spin+0x18>
    1114:	c0 e0       	ldi	r28, 0x00	; 0
    1116:	d0 e0       	ldi	r29, 0x00	; 0
    1118:	10 c0       	rjmp	.+32     	; 0x113a <Spin+0x5e>
		set_motors(i,0-i);
		delay(2);
	}
	int count = 0;
	while(myComs->EmergencyStop == 2){
		count++;
    111a:	21 96       	adiw	r28, 0x01	; 1
		if(count % 10000 == 0)
    111c:	ce 01       	movw	r24, r28
    111e:	60 e1       	ldi	r22, 0x10	; 16
    1120:	77 e2       	ldi	r23, 0x27	; 39
    1122:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__divmodhi4>
    1126:	89 2b       	or	r24, r25
    1128:	41 f4       	brne	.+16     	; 0x113a <Spin+0x5e>
		{
			myComs->Update(myComs);
    112a:	f9 01       	movw	r30, r18
    112c:	ef 58       	subi	r30, 0x8F	; 143
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	01 90       	ld	r0, Z+
    1132:	f0 81       	ld	r31, Z
    1134:	e0 2d       	mov	r30, r0
    1136:	c9 01       	movw	r24, r18
    1138:	09 95       	icall
	for(int i = 0;i<=255;i++){
		set_motors(i,0-i);
		delay(2);
	}
	int count = 0;
	while(myComs->EmergencyStop == 2){
    113a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <myComs>
    113e:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <myComs+0x1>
    1142:	f9 01       	movw	r30, r18
    1144:	e5 59       	subi	r30, 0x95	; 149
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 81       	ld	r24, Z
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	31 f3       	breq	.-52     	; 0x111a <Spin+0x3e>
		


	}
	
	set_motors(0,0);
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <set_motors>
	
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	08 95       	ret

00001160 <parcoursSearch>:
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	00 d0       	rcall	.+0      	; 0x116a <parcoursSearch+0xa>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lineType>
    1172:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <situatie>
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	89 30       	cpi	r24, 0x09	; 9
    117a:	91 05       	cpc	r25, r1
    117c:	08 f0       	brcs	.+2      	; 0x1180 <parcoursSearch+0x20>
    117e:	41 c0       	rjmp	.+130    	; 0x1202 <parcoursSearch+0xa2>
    1180:	fc 01       	movw	r30, r24
    1182:	ec 5c       	subi	r30, 0xCC	; 204
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	0c 94 31 1d 	jmp	0x3a62	; 0x3a62 <__tablejump2__>
    118a:	83 e5       	ldi	r24, 0x53	; 83
    118c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
    1190:	38 c0       	rjmp	.+112    	; 0x1202 <parcoursSearch+0xa2>
    1192:	8c e4       	ldi	r24, 0x4C	; 76
    1194:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
    1198:	8c e4       	ldi	r24, 0x4C	; 76
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	be 01       	movw	r22, r28
    11a2:	6f 5f       	subi	r22, 0xFF	; 255
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	84 e1       	ldi	r24, 0x14	; 20
    11a8:	91 e0       	ldi	r25, 0x01	; 1
    11aa:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <strncat>
    11ae:	29 c0       	rjmp	.+82     	; 0x1202 <parcoursSearch+0xa2>
    11b0:	82 e5       	ldi	r24, 0x52	; 82
    11b2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
    11b6:	82 e5       	ldi	r24, 0x52	; 82
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	41 e0       	ldi	r20, 0x01	; 1
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	be 01       	movw	r22, r28
    11c0:	6f 5f       	subi	r22, 0xFF	; 255
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	84 e1       	ldi	r24, 0x14	; 20
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <strncat>
    11cc:	1a c0       	rjmp	.+52     	; 0x1202 <parcoursSearch+0xa2>
    11ce:	83 e5       	ldi	r24, 0x53	; 83
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	be 01       	movw	r22, r28
    11d8:	6f 5f       	subi	r22, 0xFF	; 255
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	84 e1       	ldi	r24, 0x14	; 20
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <strncat>
    11e4:	0e c0       	rjmp	.+28     	; 0x1202 <parcoursSearch+0xa2>
    11e6:	84 e5       	ldi	r24, 0x54	; 84
    11e8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
    11ec:	84 e5       	ldi	r24, 0x54	; 84
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	be 01       	movw	r22, r28
    11f6:	6f 5f       	subi	r22, 0xFF	; 255
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	84 e1       	ldi	r24, 0x14	; 20
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <strncat>
    1202:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <clear>
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <lcd_goto_xy>
    120e:	00 e0       	ldi	r16, 0x00	; 0
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	08 c0       	rjmp	.+16     	; 0x1224 <parcoursSearch+0xc4>
    1214:	f8 01       	movw	r30, r16
    1216:	ec 5e       	subi	r30, 0xEC	; 236
    1218:	fe 4f       	sbci	r31, 0xFE	; 254
    121a:	80 81       	ld	r24, Z
    121c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <print_character>
    1220:	0f 5f       	subi	r16, 0xFF	; 255
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	e4 e1       	ldi	r30, 0x14	; 20
    1226:	f1 e0       	ldi	r31, 0x01	; 1
    1228:	01 90       	ld	r0, Z+
    122a:	00 20       	and	r0, r0
    122c:	e9 f7       	brne	.-6      	; 0x1228 <parcoursSearch+0xc8>
    122e:	31 97       	sbiw	r30, 0x01	; 1
    1230:	e4 51       	subi	r30, 0x14	; 20
    1232:	f1 40       	sbci	r31, 0x01	; 1
    1234:	e0 17       	cp	r30, r16
    1236:	f1 07       	cpc	r31, r17
    1238:	68 f7       	brcc	.-38     	; 0x1214 <parcoursSearch+0xb4>
    123a:	df 01       	movw	r26, r30
    123c:	ae 5e       	subi	r26, 0xEE	; 238
    123e:	be 4f       	sbci	r27, 0xFE	; 254
    1240:	8c 91       	ld	r24, X
    1242:	84 35       	cpi	r24, 0x54	; 84
    1244:	09 f0       	breq	.+2      	; 0x1248 <parcoursSearch+0xe8>
    1246:	93 cf       	rjmp	.-218    	; 0x116e <parcoursSearch+0xe>
    1248:	df 01       	movw	r26, r30
    124a:	af 5e       	subi	r26, 0xEF	; 239
    124c:	be 4f       	sbci	r27, 0xFE	; 254
    124e:	8c 91       	ld	r24, X
    1250:	ed 5e       	subi	r30, 0xED	; 237
    1252:	fe 4f       	sbci	r31, 0xFE	; 254
    1254:	90 81       	ld	r25, Z
    1256:	8c 34       	cpi	r24, 0x4C	; 76
    1258:	29 f4       	brne	.+10     	; 0x1264 <parcoursSearch+0x104>
    125a:	9c 34       	cpi	r25, 0x4C	; 76
    125c:	19 f4       	brne	.+6      	; 0x1264 <parcoursSearch+0x104>
    125e:	83 e5       	ldi	r24, 0x53	; 83
    1260:	8a 83       	std	Y+2, r24	; 0x02
    1262:	1b c0       	rjmp	.+54     	; 0x129a <parcoursSearch+0x13a>
    1264:	83 35       	cpi	r24, 0x53	; 83
    1266:	29 f4       	brne	.+10     	; 0x1272 <parcoursSearch+0x112>
    1268:	9c 34       	cpi	r25, 0x4C	; 76
    126a:	19 f4       	brne	.+6      	; 0x1272 <parcoursSearch+0x112>
    126c:	82 e5       	ldi	r24, 0x52	; 82
    126e:	8a 83       	std	Y+2, r24	; 0x02
    1270:	14 c0       	rjmp	.+40     	; 0x129a <parcoursSearch+0x13a>
    1272:	82 35       	cpi	r24, 0x52	; 82
    1274:	29 f4       	brne	.+10     	; 0x1280 <parcoursSearch+0x120>
    1276:	9c 34       	cpi	r25, 0x4C	; 76
    1278:	19 f4       	brne	.+6      	; 0x1280 <parcoursSearch+0x120>
    127a:	84 e5       	ldi	r24, 0x54	; 84
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	0d c0       	rjmp	.+26     	; 0x129a <parcoursSearch+0x13a>
    1280:	8c 34       	cpi	r24, 0x4C	; 76
    1282:	29 f4       	brne	.+10     	; 0x128e <parcoursSearch+0x12e>
    1284:	92 35       	cpi	r25, 0x52	; 82
    1286:	19 f4       	brne	.+6      	; 0x128e <parcoursSearch+0x12e>
    1288:	84 e5       	ldi	r24, 0x54	; 84
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	06 c0       	rjmp	.+12     	; 0x129a <parcoursSearch+0x13a>
    128e:	8c 34       	cpi	r24, 0x4C	; 76
    1290:	21 f4       	brne	.+8      	; 0x129a <parcoursSearch+0x13a>
    1292:	93 35       	cpi	r25, 0x53	; 83
    1294:	11 f4       	brne	.+4      	; 0x129a <parcoursSearch+0x13a>
    1296:	82 e5       	ldi	r24, 0x52	; 82
    1298:	8a 83       	std	Y+2, r24	; 0x02
    129a:	e4 e1       	ldi	r30, 0x14	; 20
    129c:	f1 e0       	ldi	r31, 0x01	; 1
    129e:	01 90       	ld	r0, Z+
    12a0:	00 20       	and	r0, r0
    12a2:	e9 f7       	brne	.-6      	; 0x129e <parcoursSearch+0x13e>
    12a4:	34 97       	sbiw	r30, 0x04	; 4
    12a6:	10 82       	st	Z, r1
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	be 01       	movw	r22, r28
    12ae:	6e 5f       	subi	r22, 0xFE	; 254
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	84 e1       	ldi	r24, 0x14	; 20
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <strncat>
    12ba:	59 cf       	rjmp	.-334    	; 0x116e <parcoursSearch+0xe>
    12bc:	80 e5       	ldi	r24, 0x50	; 80
    12be:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	08 95       	ret

000012d4 <parcours>:
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	00 d0       	rcall	.+0      	; 0x12da <parcours+0x6>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    12de:	7a 83       	std	Y+2, r23	; 0x02
    12e0:	69 83       	std	Y+1, r22	; 0x01
    12e2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
    12e6:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 19 03 	call	0x632	; 0x632 <updateDisplay>
    12f4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <route>
    12f8:	8f 35       	cpi	r24, 0x5F	; 95
    12fa:	61 f4       	brne	.+24     	; 0x1314 <parcours+0x40>
    12fc:	84 e1       	ldi	r24, 0x14	; 20
    12fe:	e4 e1       	ldi	r30, 0x14	; 20
    1300:	f1 e0       	ldi	r31, 0x01	; 1
    1302:	df 01       	movw	r26, r30
    1304:	1d 92       	st	X+, r1
    1306:	8a 95       	dec	r24
    1308:	e9 f7       	brne	.-6      	; 0x1304 <parcours+0x30>
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	0e 94 b0 08 	call	0x1160	; 0x1160 <parcoursSearch>
    1312:	04 c0       	rjmp	.+8      	; 0x131c <parcours+0x48>
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	0e 94 b0 08 	call	0x1160	; 0x1160 <parcoursSearch>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(char *a, char *b) {
    int temp = *a;
    132a:	fc 01       	movw	r30, r24
    132c:	20 81       	ld	r18, Z
    *a = *b;
    132e:	fb 01       	movw	r30, r22
    1330:	30 81       	ld	r19, Z
    1332:	fc 01       	movw	r30, r24
    1334:	30 83       	st	Z, r19
    *b = temp;
    1336:	fb 01       	movw	r30, r22
    1338:	20 83       	st	Z, r18
    133a:	08 95       	ret

0000133c <bubbleSort>:
}

void bubbleSort(char arr[],char orderY[], int n) {
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	8c 01       	movw	r16, r24
    1356:	5b 01       	movw	r10, r22
    1358:	6a 01       	movw	r12, r20
    for (int i = 0; i < n - 1; i++) {
    135a:	e1 2c       	mov	r14, r1
    135c:	f1 2c       	mov	r15, r1
    135e:	28 c0       	rjmp	.+80     	; 0x13b0 <bubbleSort+0x74>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
    1360:	f8 01       	movw	r30, r16
    1362:	ec 0f       	add	r30, r28
    1364:	fd 1f       	adc	r31, r29
    1366:	90 81       	ld	r25, Z
    1368:	4e 01       	movw	r8, r28
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	88 1a       	sub	r8, r24
    136e:	98 0a       	sbc	r9, r24
    1370:	d8 01       	movw	r26, r16
    1372:	a8 0d       	add	r26, r8
    1374:	b9 1d       	adc	r27, r9
    1376:	8c 91       	ld	r24, X
    1378:	89 17       	cp	r24, r25
    137a:	60 f4       	brcc	.+24     	; 0x1394 <bubbleSort+0x58>
                swap(&arr[j], &arr[j + 1]);
    137c:	bd 01       	movw	r22, r26
    137e:	cf 01       	movw	r24, r30
    1380:	0e 94 95 09 	call	0x132a	; 0x132a <swap>
                swap(&orderY[j], &orderY[j + 1]);
    1384:	b5 01       	movw	r22, r10
    1386:	68 0d       	add	r22, r8
    1388:	79 1d       	adc	r23, r9
    138a:	c5 01       	movw	r24, r10
    138c:	8c 0f       	add	r24, r28
    138e:	9d 1f       	adc	r25, r29
    1390:	0e 94 95 09 	call	0x132a	; 0x132a <swap>
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
    1394:	21 96       	adiw	r28, 0x01	; 1
    1396:	02 c0       	rjmp	.+4      	; 0x139c <bubbleSort+0x60>
    1398:	c0 e0       	ldi	r28, 0x00	; 0
    139a:	d0 e0       	ldi	r29, 0x00	; 0
    139c:	c6 01       	movw	r24, r12
    139e:	8e 19       	sub	r24, r14
    13a0:	9f 09       	sbc	r25, r15
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	c8 17       	cp	r28, r24
    13a6:	d9 07       	cpc	r29, r25
    13a8:	dc f2       	brlt	.-74     	; 0x1360 <bubbleSort+0x24>
    *a = *b;
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
    13aa:	8f ef       	ldi	r24, 0xFF	; 255
    13ac:	e8 1a       	sub	r14, r24
    13ae:	f8 0a       	sbc	r15, r24
    13b0:	c6 01       	movw	r24, r12
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	e8 16       	cp	r14, r24
    13b6:	f9 06       	cpc	r15, r25
    13b8:	7c f3       	brlt	.-34     	; 0x1398 <bubbleSort+0x5c>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	08 95       	ret

000013d4 <drive>:



void drive(int junctions, piRobot *robot, Communications *myCom)
{
    13d4:	cf 92       	push	r12
    13d6:	df 92       	push	r13
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	6c 01       	movw	r12, r24
    13e6:	7a 01       	movw	r14, r20
	Junctions situatie;
	
	motorControl('S');
    13e8:	83 e5       	ldi	r24, 0x53	; 83
    13ea:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
	int driving = 1;
	int count = 0;//Count for number of junctions to pass
    13ee:	00 e0       	ldi	r16, 0x00	; 0
    13f0:	10 e0       	ldi	r17, 0x00	; 0
void drive(int junctions, piRobot *robot, Communications *myCom)
{
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
    13f2:	c1 e0       	ldi	r28, 0x01	; 1
    13f4:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;//Count for number of junctions to pass
	while(driving) {
    13f6:	22 c0       	rjmp	.+68     	; 0x143c <drive+0x68>
		situatie = lineType();
    13f8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lineType>
		switch (situatie) {
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	49 f0       	breq	.+18     	; 0x1412 <drive+0x3e>
    1400:	20 f0       	brcs	.+8      	; 0x140a <drive+0x36>
    1402:	83 50       	subi	r24, 0x03	; 3
    1404:	86 30       	cpi	r24, 0x06	; 6
    1406:	d0 f4       	brcc	.+52     	; 0x143c <drive+0x68>
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <drive+0x3e>
			case Barcode: // end of parcour
			
				break;
			
			case Straight:
				motorControl('S');
    140a:	83 e5       	ldi	r24, 0x53	; 83
    140c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
				break;
    1410:	15 c0       	rjmp	.+42     	; 0x143c <drive+0x68>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
    1412:	0f 5f       	subi	r16, 0xFF	; 255
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
				motorControl('S');
    1416:	83 e5       	ldi	r24, 0x53	; 83
    1418:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
				if(count == junctions)
    141c:	0c 15       	cp	r16, r12
    141e:	1d 05       	cpc	r17, r13
    1420:	29 f4       	brne	.+10     	; 0x142c <drive+0x58>
				{
					motorControl('P');
    1422:	80 e5       	ldi	r24, 0x50	; 80
    1424:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					driving = 0;
    1428:	c0 e0       	ldi	r28, 0x00	; 0
    142a:	d0 e0       	ldi	r29, 0x00	; 0
				}
				myCom->Update(myCom);
    142c:	f7 01       	movw	r30, r14
    142e:	ef 58       	subi	r30, 0x8F	; 143
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	01 90       	ld	r0, Z+
    1434:	f0 81       	ld	r31, Z
    1436:	e0 2d       	mov	r30, r0
    1438:	c7 01       	movw	r24, r14
    143a:	09 95       	icall
	Junctions situatie;
	
	motorControl('S');
	int driving = 1;
	int count = 0;//Count for number of junctions to pass
	while(driving) {
    143c:	20 97       	sbiw	r28, 0x00	; 0
    143e:	e1 f6       	brne	.-72     	; 0x13f8 <drive+0x24>
				}
				myCom->Update(myCom);
				break;	
		}
	}
}
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	08 95       	ret

00001452 <waitForTurn>:

void waitForTurn()
{
    1452:	cf 93       	push	r28
	Junctions line;
	line = lineType();
    1454:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lineType>
    1458:	c8 2f       	mov	r28, r24
    145a:	8f e0       	ldi	r24, 0x0F	; 15
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
    1462:	03 c0       	rjmp	.+6      	; 0x146a <waitForTurn+0x18>
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
	{
		line  = lineType();
    1464:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <lineType>
    1468:	c8 2f       	mov	r28, r24
void waitForTurn()
{
	Junctions line;
	line = lineType();
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
    146a:	c1 11       	cpse	r28, r1
    146c:	fb cf       	rjmp	.-10     	; 0x1464 <waitForTurn+0x12>
	{
		line  = lineType();
	}
	motorControl('N');
    146e:	8e e4       	ldi	r24, 0x4E	; 78
    1470:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
}
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <turnRobot>:

void turnRobot(char tdirection, piRobot *myRobot)
{
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	c8 2f       	mov	r28, r24
    1484:	8b 01       	movw	r16, r22
    int changing = 1;
    1486:	ee 24       	eor	r14, r14
    1488:	e3 94       	inc	r14
    148a:	f1 2c       	mov	r15, r1

    while(changing==1)
    148c:	a6 c0       	rjmp	.+332    	; 0x15da <turnRobot+0x162>
    {
		
        switch(myRobot->direction)
    148e:	f8 01       	movw	r30, r16
    1490:	84 81       	ldd	r24, Z+4	; 0x04
    1492:	8e 34       	cpi	r24, 0x4E	; 78
    1494:	59 f0       	breq	.+22     	; 0x14ac <turnRobot+0x34>
    1496:	18 f4       	brcc	.+6      	; 0x149e <turnRobot+0x26>
    1498:	85 34       	cpi	r24, 0x45	; 69
    149a:	69 f1       	breq	.+90     	; 0x14f6 <turnRobot+0x7e>
    149c:	98 c0       	rjmp	.+304    	; 0x15ce <turnRobot+0x156>
    149e:	83 35       	cpi	r24, 0x53	; 83
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <turnRobot+0x2c>
    14a2:	4e c0       	rjmp	.+156    	; 0x1540 <turnRobot+0xc8>
    14a4:	87 35       	cpi	r24, 0x57	; 87
    14a6:	09 f4       	brne	.+2      	; 0x14aa <turnRobot+0x32>
    14a8:	6f c0       	rjmp	.+222    	; 0x1588 <turnRobot+0x110>
    14aa:	91 c0       	rjmp	.+290    	; 0x15ce <turnRobot+0x156>
        {
            case 'N':
                if(tdirection == 'E')
    14ac:	c5 34       	cpi	r28, 0x45	; 69
    14ae:	49 f4       	brne	.+18     	; 0x14c2 <turnRobot+0x4a>
                {
                    motorControl('R');
    14b0:	82 e5       	ldi	r24, 0x52	; 82
    14b2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    14b6:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'E';
    14ba:	85 e4       	ldi	r24, 0x45	; 69
    14bc:	f8 01       	movw	r30, r16
    14be:	84 83       	std	Z+4, r24	; 0x04
    14c0:	86 c0       	rjmp	.+268    	; 0x15ce <turnRobot+0x156>
                }
                else if(tdirection == 'W')
    14c2:	c7 35       	cpi	r28, 0x57	; 87
    14c4:	49 f4       	brne	.+18     	; 0x14d8 <turnRobot+0x60>
                {
                    motorControl('L');
    14c6:	8c e4       	ldi	r24, 0x4C	; 76
    14c8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    14cc:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'W';
    14d0:	87 e5       	ldi	r24, 0x57	; 87
    14d2:	f8 01       	movw	r30, r16
    14d4:	84 83       	std	Z+4, r24	; 0x04
    14d6:	7b c0       	rjmp	.+246    	; 0x15ce <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    14d8:	c3 35       	cpi	r28, 0x53	; 83
    14da:	09 f0       	breq	.+2      	; 0x14de <turnRobot+0x66>
    14dc:	78 c0       	rjmp	.+240    	; 0x15ce <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    14de:	8c e4       	ldi	r24, 0x4C	; 76
    14e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
    14e4:	8c e4       	ldi	r24, 0x4C	; 76
    14e6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    14ea:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'S';
    14ee:	83 e5       	ldi	r24, 0x53	; 83
    14f0:	f8 01       	movw	r30, r16
    14f2:	84 83       	std	Z+4, r24	; 0x04
    14f4:	6c c0       	rjmp	.+216    	; 0x15ce <turnRobot+0x156>
                }
                break;
            case 'E':
                if(tdirection == 'S')
    14f6:	c3 35       	cpi	r28, 0x53	; 83
    14f8:	49 f4       	brne	.+18     	; 0x150c <turnRobot+0x94>
                {
                    motorControl('R');
    14fa:	82 e5       	ldi	r24, 0x52	; 82
    14fc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    1500:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'S';
    1504:	83 e5       	ldi	r24, 0x53	; 83
    1506:	f8 01       	movw	r30, r16
    1508:	84 83       	std	Z+4, r24	; 0x04
    150a:	61 c0       	rjmp	.+194    	; 0x15ce <turnRobot+0x156>
                }
                else if(tdirection == 'W')
    150c:	c7 35       	cpi	r28, 0x57	; 87
    150e:	49 f4       	brne	.+18     	; 0x1522 <turnRobot+0xaa>
                {
                    motorControl('L');
    1510:	8c e4       	ldi	r24, 0x4C	; 76
    1512:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    1516:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'W';
    151a:	87 e5       	ldi	r24, 0x57	; 87
    151c:	f8 01       	movw	r30, r16
    151e:	84 83       	std	Z+4, r24	; 0x04
    1520:	56 c0       	rjmp	.+172    	; 0x15ce <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    1522:	c3 35       	cpi	r28, 0x53	; 83
    1524:	09 f0       	breq	.+2      	; 0x1528 <turnRobot+0xb0>
    1526:	53 c0       	rjmp	.+166    	; 0x15ce <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    1528:	8c e4       	ldi	r24, 0x4C	; 76
    152a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
    152e:	8c e4       	ldi	r24, 0x4C	; 76
    1530:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    1534:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'S';
    1538:	83 e5       	ldi	r24, 0x53	; 83
    153a:	f8 01       	movw	r30, r16
    153c:	84 83       	std	Z+4, r24	; 0x04
    153e:	47 c0       	rjmp	.+142    	; 0x15ce <turnRobot+0x156>
                }
                break;
            case 'S':
                if(tdirection == 'W')
    1540:	c7 35       	cpi	r28, 0x57	; 87
    1542:	49 f4       	brne	.+18     	; 0x1556 <turnRobot+0xde>
                {
                    motorControl('R');
    1544:	82 e5       	ldi	r24, 0x52	; 82
    1546:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    154a:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'W';
    154e:	87 e5       	ldi	r24, 0x57	; 87
    1550:	f8 01       	movw	r30, r16
    1552:	84 83       	std	Z+4, r24	; 0x04
    1554:	3c c0       	rjmp	.+120    	; 0x15ce <turnRobot+0x156>
                }
                else if(tdirection == 'E')
    1556:	c5 34       	cpi	r28, 0x45	; 69
    1558:	49 f4       	brne	.+18     	; 0x156c <turnRobot+0xf4>
                {
                    motorControl('L');
    155a:	8c e4       	ldi	r24, 0x4C	; 76
    155c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    1560:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'E';
    1564:	85 e4       	ldi	r24, 0x45	; 69
    1566:	f8 01       	movw	r30, r16
    1568:	84 83       	std	Z+4, r24	; 0x04
    156a:	31 c0       	rjmp	.+98     	; 0x15ce <turnRobot+0x156>
                }
                else if(tdirection == 'N')
    156c:	ce 34       	cpi	r28, 0x4E	; 78
    156e:	79 f5       	brne	.+94     	; 0x15ce <turnRobot+0x156>
                {
                    motorControl('L');motorControl('L');
    1570:	8c e4       	ldi	r24, 0x4C	; 76
    1572:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
    1576:	8c e4       	ldi	r24, 0x4C	; 76
    1578:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    157c:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'N';
    1580:	8e e4       	ldi	r24, 0x4E	; 78
    1582:	f8 01       	movw	r30, r16
    1584:	84 83       	std	Z+4, r24	; 0x04
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <turnRobot+0x156>
                }
                break;
            case 'W':
                if(tdirection == 'N')
    1588:	ce 34       	cpi	r28, 0x4E	; 78
    158a:	49 f4       	brne	.+18     	; 0x159e <turnRobot+0x126>
                {
					
                    motorControl('R');
    158c:	82 e5       	ldi	r24, 0x52	; 82
    158e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    1592:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'N';
    1596:	8e e4       	ldi	r24, 0x4E	; 78
    1598:	f8 01       	movw	r30, r16
    159a:	84 83       	std	Z+4, r24	; 0x04
    159c:	18 c0       	rjmp	.+48     	; 0x15ce <turnRobot+0x156>
                }
                else if(tdirection == 'S')
    159e:	c3 35       	cpi	r28, 0x53	; 83
    15a0:	49 f4       	brne	.+18     	; 0x15b4 <turnRobot+0x13c>
                {
	                motorControl('L');
    15a2:	8c e4       	ldi	r24, 0x4C	; 76
    15a4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
	                waitForTurn();
    15a8:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
	                myRobot->direction = 'S';
    15ac:	83 e5       	ldi	r24, 0x53	; 83
    15ae:	f8 01       	movw	r30, r16
    15b0:	84 83       	std	Z+4, r24	; 0x04
    15b2:	0d c0       	rjmp	.+26     	; 0x15ce <turnRobot+0x156>
                }
                else if(tdirection == 'E')
    15b4:	c5 34       	cpi	r28, 0x45	; 69
    15b6:	59 f4       	brne	.+22     	; 0x15ce <turnRobot+0x156>
                {
                    motorControl('L');
    15b8:	8c e4       	ldi	r24, 0x4C	; 76
    15ba:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					motorControl('L');
    15be:	8c e4       	ldi	r24, 0x4C	; 76
    15c0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
					waitForTurn();
    15c4:	0e 94 29 0a 	call	0x1452	; 0x1452 <waitForTurn>
                    myRobot->direction = 'E';
    15c8:	85 e4       	ldi	r24, 0x45	; 69
    15ca:	f8 01       	movw	r30, r16
    15cc:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
				if(myRobot->direction == tdirection)
    15ce:	f8 01       	movw	r30, r16
    15d0:	84 81       	ldd	r24, Z+4	; 0x04
    15d2:	c8 13       	cpse	r28, r24
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <turnRobot+0x162>
				{
					changing = 0;
    15d6:	e1 2c       	mov	r14, r1
    15d8:	f1 2c       	mov	r15, r1

void turnRobot(char tdirection, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
    15da:	f1 e0       	ldi	r31, 0x01	; 1
    15dc:	ef 16       	cp	r14, r31
    15de:	f1 04       	cpc	r15, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <turnRobot+0x16c>
    15e2:	55 cf       	rjmp	.-342    	; 0x148e <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	08 95       	ret

000015f0 <moveX>:


void moveX(int orderPos, piRobot *robot, Communications *myCom)
{
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
	
    int junctions;
	
    if(robot->posX != orderPos)
    15fc:	fb 01       	movw	r30, r22
    15fe:	20 81       	ld	r18, Z
    1600:	31 81       	ldd	r19, Z+1	; 0x01
    1602:	28 17       	cp	r18, r24
    1604:	39 07       	cpc	r19, r25
    1606:	d9 f0       	breq	.+54     	; 0x163e <moveX+0x4e>
    1608:	7a 01       	movw	r14, r20
    160a:	eb 01       	movw	r28, r22
    160c:	8c 01       	movw	r16, r24
    {
		
        if(robot->posX < orderPos)
    160e:	28 17       	cp	r18, r24
    1610:	39 07       	cpc	r19, r25
    1612:	54 f4       	brge	.+20     	; 0x1628 <moveX+0x38>
        {
            turnRobot('W', robot);
    1614:	87 e5       	ldi	r24, 0x57	; 87
    1616:	0e 94 3c 0a 	call	0x1478	; 0x1478 <turnRobot>
            junctions = orderPos-robot->posX;
    161a:	88 81       	ld	r24, Y
    161c:	99 81       	ldd	r25, Y+1	; 0x01
    161e:	98 01       	movw	r18, r16
    1620:	28 1b       	sub	r18, r24
    1622:	39 0b       	sbc	r19, r25
    1624:	c9 01       	movw	r24, r18
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <moveX+0x46>
        }
        else{
            turnRobot('E', robot);
    1628:	85 e4       	ldi	r24, 0x45	; 69
    162a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <turnRobot>
            junctions = robot->posX - orderPos;
    162e:	88 81       	ld	r24, Y
    1630:	99 81       	ldd	r25, Y+1	; 0x01
    1632:	80 1b       	sub	r24, r16
    1634:	91 0b       	sbc	r25, r17
        }
		drive(junctions, robot, myCom);
    1636:	a7 01       	movw	r20, r14
    1638:	be 01       	movw	r22, r28
    163a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <drive>
    }
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	08 95       	ret

0000164c <moveY>:

void moveY(int orderPos, piRobot *robot, Communications *myCom)
{
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
    1658:	fb 01       	movw	r30, r22
    165a:	22 81       	ldd	r18, Z+2	; 0x02
    165c:	33 81       	ldd	r19, Z+3	; 0x03
    165e:	28 17       	cp	r18, r24
    1660:	39 07       	cpc	r19, r25
    1662:	d9 f0       	breq	.+54     	; 0x169a <moveY+0x4e>
    1664:	7a 01       	movw	r14, r20
    1666:	eb 01       	movw	r28, r22
    1668:	8c 01       	movw	r16, r24
    {
        if(robot->posY < orderPos)
    166a:	28 17       	cp	r18, r24
    166c:	39 07       	cpc	r19, r25
    166e:	54 f4       	brge	.+20     	; 0x1684 <moveY+0x38>
        {
            turnRobot('N', robot);
    1670:	8e e4       	ldi	r24, 0x4E	; 78
    1672:	0e 94 3c 0a 	call	0x1478	; 0x1478 <turnRobot>
            junctions = orderPos-robot->posY;
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	9b 81       	ldd	r25, Y+3	; 0x03
    167a:	98 01       	movw	r18, r16
    167c:	28 1b       	sub	r18, r24
    167e:	39 0b       	sbc	r19, r25
    1680:	c9 01       	movw	r24, r18
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <moveY+0x46>
        }
        else{
            turnRobot('S', robot);
    1684:	83 e5       	ldi	r24, 0x53	; 83
    1686:	0e 94 3c 0a 	call	0x1478	; 0x1478 <turnRobot>
            junctions = robot->posY - orderPos;
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	9b 81       	ldd	r25, Y+3	; 0x03
    168e:	80 1b       	sub	r24, r16
    1690:	91 0b       	sbc	r25, r17
        }
            drive(junctions, robot, myCom);
    1692:	a7 01       	movw	r20, r14
    1694:	be 01       	movw	r22, r28
    1696:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <drive>
        
    }
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	08 95       	ret

000016a8 <warehouse>:


void warehouse(objective objective, Communications *myCom)
{
    16a8:	2f 92       	push	r2
    16aa:	3f 92       	push	r3
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	6f 92       	push	r6
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	e7 97       	sbiw	r28, 0x37	; 55
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	f8 2e       	mov	r15, r24
    16de:	8b 01       	movw	r16, r22
 piRobot robot;
 robot.direction = 'W';
    16e0:	87 e5       	ldi	r24, 0x57	; 87
    16e2:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = 0;
    16e4:	1a 82       	std	Y+2, r1	; 0x02
    16e6:	19 82       	std	Y+1, r1	; 0x01
 robot.posY = 1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9c 83       	std	Y+4, r25	; 0x04
    16ee:	8b 83       	std	Y+3, r24	; 0x03
 myCom->locationx = 0;
    16f0:	fb 01       	movw	r30, r22
    16f2:	e2 59       	subi	r30, 0x92	; 146
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	10 82       	st	Z, r1
 myCom-> locationy = 1;
    16f8:	31 96       	adiw	r30, 0x01	; 1
    16fa:	80 83       	st	Z, r24
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
 //char orderX[]={2,5,4,3,1};
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
    1700:	c1 2c       	mov	r12, r1
    1702:	d1 2c       	mov	r13, r1
 for(int i = 0; i<25;i++)
    1704:	0c c0       	rjmp	.+24     	; 0x171e <warehouse+0x76>
 {
 	if(myCom->Orderarx[i] != 0)
    1706:	f8 01       	movw	r30, r16
    1708:	e8 0f       	add	r30, r24
    170a:	f9 1f       	adc	r31, r25
    170c:	ee 5a       	subi	r30, 0xAE	; 174
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	20 81       	ld	r18, Z
    1712:	22 23       	and	r18, r18
    1714:	19 f0       	breq	.+6      	; 0x171c <warehouse+0x74>
 	{
 		arraySize++;
    1716:	2f ef       	ldi	r18, 0xFF	; 255
    1718:	c2 1a       	sub	r12, r18
    171a:	d2 0a       	sbc	r13, r18
 //char orderY[]={2,1,3,5,2};
 //int arraySize = 5;
  char orderX[25];
  char orderY[25];
 int arraySize = 0;
 for(int i = 0; i<25;i++)
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	89 31       	cpi	r24, 0x19	; 25
    1720:	91 05       	cpc	r25, r1
    1722:	8c f3       	brlt	.-30     	; 0x1706 <warehouse+0x5e>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	18 c0       	rjmp	.+48     	; 0x175a <warehouse+0xb2>
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
 {
 	orderX[i] = myCom->Orderarx[i];
    172a:	d8 01       	movw	r26, r16
    172c:	a8 0f       	add	r26, r24
    172e:	b9 1f       	adc	r27, r25
    1730:	fd 01       	movw	r30, r26
    1732:	ee 5a       	subi	r30, 0xAE	; 174
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	20 81       	ld	r18, Z
    1738:	e6 e0       	ldi	r30, 0x06	; 6
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	ec 0f       	add	r30, r28
    173e:	fd 1f       	adc	r31, r29
    1740:	e8 0f       	add	r30, r24
    1742:	f9 1f       	adc	r31, r25
    1744:	20 83       	st	Z, r18
 	orderY[i] = myCom->Orderary[i];
    1746:	d9 96       	adiw	r26, 0x39	; 57
    1748:	2c 91       	ld	r18, X
    174a:	ef e1       	ldi	r30, 0x1F	; 31
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	ec 0f       	add	r30, r28
    1750:	fd 1f       	adc	r31, r29
    1752:	e8 0f       	add	r30, r24
    1754:	f9 1f       	adc	r31, r25
    1756:	20 83       	st	Z, r18
 	if(myCom->Orderarx[i] != 0)
 	{
 		arraySize++;
 	}
 }
 for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	8c 15       	cp	r24, r12
    175c:	9d 05       	cpc	r25, r13
    175e:	2c f3       	brlt	.-54     	; 0x172a <warehouse+0x82>
 	orderX[i] = myCom->Orderarx[i];
 	orderY[i] = myCom->Orderary[i];
 }


    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
    1760:	a6 01       	movw	r20, r12
    1762:	be 01       	movw	r22, r28
    1764:	61 5e       	subi	r22, 0xE1	; 225
    1766:	7f 4f       	sbci	r23, 0xFF	; 255
    1768:	ce 01       	movw	r24, r28
    176a:	06 96       	adiw	r24, 0x06	; 6
    176c:	0e 94 9e 09 	call	0x133c	; 0x133c <bubbleSort>
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
    1770:	ff 20       	and	r15, r15
    1772:	09 f4       	brne	.+2      	; 0x1776 <warehouse+0xce>
    1774:	8f c0       	rjmp	.+286    	; 0x1894 <warehouse+0x1ec>
    1776:	a5 c0       	rjmp	.+330    	; 0x18c2 <warehouse+0x21a>
	{
		for(int locations = 0; locations<arraySize;locations++)
		{
			float completed = locations;
    1778:	b1 01       	movw	r22, r2
    177a:	03 2c       	mov	r0, r3
    177c:	00 0c       	add	r0, r0
    177e:	88 0b       	sbc	r24, r24
    1780:	99 0b       	sbc	r25, r25
    1782:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__floatsisf>
    1786:	2b 01       	movw	r4, r22
    1788:	3c 01       	movw	r6, r24
			float total = arraySize;
    178a:	b6 01       	movw	r22, r12
    178c:	0d 2c       	mov	r0, r13
    178e:	00 0c       	add	r0, r0
    1790:	88 0b       	sbc	r24, r24
    1792:	99 0b       	sbc	r25, r25
    1794:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__floatsisf>
    1798:	4b 01       	movw	r8, r22
    179a:	5c 01       	movw	r10, r24
			
			moveX(orderX[locations], &robot, myCom);
    179c:	0f 2e       	mov	r0, r31
    179e:	f6 e0       	ldi	r31, 0x06	; 6
    17a0:	ef 2e       	mov	r14, r31
    17a2:	f1 2c       	mov	r15, r1
    17a4:	f0 2d       	mov	r31, r0
    17a6:	ec 0e       	add	r14, r28
    17a8:	fd 1e       	adc	r15, r29
    17aa:	e2 0c       	add	r14, r2
    17ac:	f3 1c       	adc	r15, r3
    17ae:	f7 01       	movw	r30, r14
    17b0:	80 81       	ld	r24, Z
    17b2:	a8 01       	movw	r20, r16
    17b4:	be 01       	movw	r22, r28
    17b6:	6f 5f       	subi	r22, 0xFF	; 255
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <moveX>
			robot.posX = orderX[locations];
    17c0:	f7 01       	movw	r30, r14
    17c2:	80 81       	ld	r24, Z
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	3a 83       	std	Y+2, r19	; 0x02
    17ca:	29 83       	std	Y+1, r18	; 0x01
			myCom->locationx = robot.posX;
    17cc:	f8 01       	movw	r30, r16
    17ce:	e2 59       	subi	r30, 0x92	; 146
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	80 83       	st	Z, r24
			moveY(orderY[locations], &robot, myCom);
    17d4:	0f 2e       	mov	r0, r31
    17d6:	ff e1       	ldi	r31, 0x1F	; 31
    17d8:	ef 2e       	mov	r14, r31
    17da:	f1 2c       	mov	r15, r1
    17dc:	f0 2d       	mov	r31, r0
    17de:	ec 0e       	add	r14, r28
    17e0:	fd 1e       	adc	r15, r29
    17e2:	e2 0c       	add	r14, r2
    17e4:	f3 1c       	adc	r15, r3
    17e6:	f7 01       	movw	r30, r14
    17e8:	80 81       	ld	r24, Z
    17ea:	a8 01       	movw	r20, r16
    17ec:	be 01       	movw	r22, r28
    17ee:	6f 5f       	subi	r22, 0xFF	; 255
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 26 0b 	call	0x164c	; 0x164c <moveY>
			robot.posY = orderY[locations];
    17f8:	f7 01       	movw	r30, r14
    17fa:	80 81       	ld	r24, Z
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	3c 83       	std	Y+4, r19	; 0x04
    1802:	2b 83       	std	Y+3, r18	; 0x03
			myCom->locationy = robot.posY;
    1804:	f8 01       	movw	r30, r16
    1806:	e1 59       	subi	r30, 0x91	; 145
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 83       	st	Z, r24
    180c:	88 ee       	ldi	r24, 0xE8	; 232
    180e:	93 e0       	ldi	r25, 0x03	; 3
    1810:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
			delay(1000);//wait 1 second
			
			myCom->batterylvl = batteryPercentage();
    1814:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
    1818:	78 01       	movw	r14, r16
    181a:	fc e6       	ldi	r31, 0x6C	; 108
    181c:	ef 0e       	add	r14, r31
    181e:	f1 1c       	adc	r15, r1
    1820:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    1824:	f7 01       	movw	r30, r14
    1826:	60 83       	st	Z, r22
			myCom->magprocess = (((completed+1)/total)*100);
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	c3 01       	movw	r24, r6
    1832:	b2 01       	movw	r22, r4
    1834:	0e 94 bf 0c 	call	0x197e	; 0x197e <__addsf3>
    1838:	a5 01       	movw	r20, r10
    183a:	94 01       	movw	r18, r8
    183c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__divsf3>
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	48 ec       	ldi	r20, 0xC8	; 200
    1846:	52 e4       	ldi	r21, 0x42	; 66
    1848:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <__mulsf3>
    184c:	4b 01       	movw	r8, r22
    184e:	5c 01       	movw	r10, r24
    1850:	78 01       	movw	r14, r16
    1852:	fd e6       	ldi	r31, 0x6D	; 109
    1854:	ef 0e       	add	r14, r31
    1856:	f1 1c       	adc	r15, r1
    1858:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    185c:	f7 01       	movw	r30, r14
    185e:	60 83       	st	Z, r22
			myCom->Update(myCom);
    1860:	34 96       	adiw	r30, 0x04	; 4
    1862:	01 90       	ld	r0, Z+
    1864:	f0 81       	ld	r31, Z
    1866:	e0 2d       	mov	r30, r0
    1868:	c8 01       	movw	r24, r16
    186a:	09 95       	icall
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
    186c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <batteryPercentage>
    1870:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
    1874:	2b 01       	movw	r4, r22
    1876:	3c 01       	movw	r6, r24
    1878:	c5 01       	movw	r24, r10
    187a:	b4 01       	movw	r22, r8
    187c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__fixsfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	42 e0       	ldi	r20, 0x02	; 2
    1886:	b2 01       	movw	r22, r4
    1888:	0e 94 19 03 	call	0x632	; 0x632 <updateDisplay>

    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
	{
		for(int locations = 0; locations<arraySize;locations++)
    188c:	ff ef       	ldi	r31, 0xFF	; 255
    188e:	2f 1a       	sub	r2, r31
    1890:	3f 0a       	sbc	r3, r31
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <warehouse+0x1f0>
    1894:	21 2c       	mov	r2, r1
    1896:	31 2c       	mov	r3, r1
    1898:	2c 14       	cp	r2, r12
    189a:	3d 04       	cpc	r3, r13
    189c:	0c f4       	brge	.+2      	; 0x18a0 <warehouse+0x1f8>
    189e:	6c cf       	rjmp	.-296    	; 0x1778 <warehouse+0xd0>
			myCom->batterylvl = batteryPercentage();
			myCom->magprocess = (((completed+1)/total)*100);
			myCom->Update(myCom);
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
		}
		moveY(1, &robot, myCom);
    18a0:	a8 01       	movw	r20, r16
    18a2:	be 01       	movw	r22, r28
    18a4:	6f 5f       	subi	r22, 0xFF	; 255
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	0e 94 26 0b 	call	0x164c	; 0x164c <moveY>
			moveX(1, &robot, myCom);
    18b0:	a8 01       	movw	r20, r16
    18b2:	be 01       	movw	r22, r28
    18b4:	6f 5f       	subi	r22, 0xFF	; 255
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <moveX>
    18c0:	44 c0       	rjmp	.+136    	; 0x194a <warehouse+0x2a2>
			
	}
	else
	{
		static int charged = 0;
		if(charged == 0)
    18c2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <charged.2338>
    18c6:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <charged.2338+0x1>
    18ca:	89 2b       	or	r24, r25
    18cc:	29 f5       	brne	.+74     	; 0x1918 <warehouse+0x270>
		{
			drive(1, &robot, myCom);
    18ce:	a8 01       	movw	r20, r16
    18d0:	be 01       	movw	r22, r28
    18d2:	6f 5f       	subi	r22, 0xFF	; 255
    18d4:	7f 4f       	sbci	r23, 0xFF	; 255
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <drive>
			motorControl('R');
    18de:	82 e5       	ldi	r24, 0x52	; 82
    18e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
			drive(3, &robot, myCom);
    18e4:	a8 01       	movw	r20, r16
    18e6:	be 01       	movw	r22, r28
    18e8:	6f 5f       	subi	r22, 0xFF	; 255
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	83 e0       	ldi	r24, 0x03	; 3
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <drive>
			motorControl('R');
    18f4:	82 e5       	ldi	r24, 0x52	; 82
    18f6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
			drive(1, &robot, myCom);
    18fa:	a8 01       	movw	r20, r16
    18fc:	be 01       	movw	r22, r28
    18fe:	6f 5f       	subi	r22, 0xFF	; 255
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <drive>
			charged = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <charged.2338+0x1>
    1912:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <charged.2338>
    1916:	19 c0       	rjmp	.+50     	; 0x194a <warehouse+0x2a2>
		}
		else
		{
			motorControl('T');
    1918:	84 e5       	ldi	r24, 0x54	; 84
    191a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
			drive(1, &robot, myCom);
    191e:	a8 01       	movw	r20, r16
    1920:	be 01       	movw	r22, r28
    1922:	6f 5f       	subi	r22, 0xFF	; 255
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <drive>
			motorControl('L');
    192e:	8c e4       	ldi	r24, 0x4C	; 76
    1930:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
			drive(3, &robot, myCom);
    1934:	a8 01       	movw	r20, r16
    1936:	be 01       	movw	r22, r28
    1938:	6f 5f       	subi	r22, 0xFF	; 255
    193a:	7f 4f       	sbci	r23, 0xFF	; 255
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <drive>
			motorControl('L');
    1944:	8c e4       	ldi	r24, 0x4C	; 76
    1946:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <motorControl>
			
		}
		
	}
}
    194a:	e7 96       	adiw	r28, 0x37	; 55
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	bf 90       	pop	r11
    1968:	af 90       	pop	r10
    196a:	9f 90       	pop	r9
    196c:	8f 90       	pop	r8
    196e:	7f 90       	pop	r7
    1970:	6f 90       	pop	r6
    1972:	5f 90       	pop	r5
    1974:	4f 90       	pop	r4
    1976:	3f 90       	pop	r3
    1978:	2f 90       	pop	r2
    197a:	08 95       	ret

0000197c <__subsf3>:
    197c:	50 58       	subi	r21, 0x80	; 128

0000197e <__addsf3>:
    197e:	bb 27       	eor	r27, r27
    1980:	aa 27       	eor	r26, r26
    1982:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__addsf3x>
    1986:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_round>
    198a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fp_pscA>
    198e:	38 f0       	brcs	.+14     	; 0x199e <__addsf3+0x20>
    1990:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_pscB>
    1994:	20 f0       	brcs	.+8      	; 0x199e <__addsf3+0x20>
    1996:	39 f4       	brne	.+14     	; 0x19a6 <__addsf3+0x28>
    1998:	9f 3f       	cpi	r25, 0xFF	; 255
    199a:	19 f4       	brne	.+6      	; 0x19a2 <__addsf3+0x24>
    199c:	26 f4       	brtc	.+8      	; 0x19a6 <__addsf3+0x28>
    199e:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_nan>
    19a2:	0e f4       	brtc	.+2      	; 0x19a6 <__addsf3+0x28>
    19a4:	e0 95       	com	r30
    19a6:	e7 fb       	bst	r30, 7
    19a8:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>

000019ac <__addsf3x>:
    19ac:	e9 2f       	mov	r30, r25
    19ae:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__fp_split3>
    19b2:	58 f3       	brcs	.-42     	; 0x198a <__addsf3+0xc>
    19b4:	ba 17       	cp	r27, r26
    19b6:	62 07       	cpc	r22, r18
    19b8:	73 07       	cpc	r23, r19
    19ba:	84 07       	cpc	r24, r20
    19bc:	95 07       	cpc	r25, r21
    19be:	20 f0       	brcs	.+8      	; 0x19c8 <__addsf3x+0x1c>
    19c0:	79 f4       	brne	.+30     	; 0x19e0 <__addsf3x+0x34>
    19c2:	a6 f5       	brtc	.+104    	; 0x1a2c <__addsf3x+0x80>
    19c4:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_zero>
    19c8:	0e f4       	brtc	.+2      	; 0x19cc <__addsf3x+0x20>
    19ca:	e0 95       	com	r30
    19cc:	0b 2e       	mov	r0, r27
    19ce:	ba 2f       	mov	r27, r26
    19d0:	a0 2d       	mov	r26, r0
    19d2:	0b 01       	movw	r0, r22
    19d4:	b9 01       	movw	r22, r18
    19d6:	90 01       	movw	r18, r0
    19d8:	0c 01       	movw	r0, r24
    19da:	ca 01       	movw	r24, r20
    19dc:	a0 01       	movw	r20, r0
    19de:	11 24       	eor	r1, r1
    19e0:	ff 27       	eor	r31, r31
    19e2:	59 1b       	sub	r21, r25
    19e4:	99 f0       	breq	.+38     	; 0x1a0c <__addsf3x+0x60>
    19e6:	59 3f       	cpi	r21, 0xF9	; 249
    19e8:	50 f4       	brcc	.+20     	; 0x19fe <__addsf3x+0x52>
    19ea:	50 3e       	cpi	r21, 0xE0	; 224
    19ec:	68 f1       	brcs	.+90     	; 0x1a48 <__addsf3x+0x9c>
    19ee:	1a 16       	cp	r1, r26
    19f0:	f0 40       	sbci	r31, 0x00	; 0
    19f2:	a2 2f       	mov	r26, r18
    19f4:	23 2f       	mov	r18, r19
    19f6:	34 2f       	mov	r19, r20
    19f8:	44 27       	eor	r20, r20
    19fa:	58 5f       	subi	r21, 0xF8	; 248
    19fc:	f3 cf       	rjmp	.-26     	; 0x19e4 <__addsf3x+0x38>
    19fe:	46 95       	lsr	r20
    1a00:	37 95       	ror	r19
    1a02:	27 95       	ror	r18
    1a04:	a7 95       	ror	r26
    1a06:	f0 40       	sbci	r31, 0x00	; 0
    1a08:	53 95       	inc	r21
    1a0a:	c9 f7       	brne	.-14     	; 0x19fe <__addsf3x+0x52>
    1a0c:	7e f4       	brtc	.+30     	; 0x1a2c <__addsf3x+0x80>
    1a0e:	1f 16       	cp	r1, r31
    1a10:	ba 0b       	sbc	r27, r26
    1a12:	62 0b       	sbc	r22, r18
    1a14:	73 0b       	sbc	r23, r19
    1a16:	84 0b       	sbc	r24, r20
    1a18:	ba f0       	brmi	.+46     	; 0x1a48 <__addsf3x+0x9c>
    1a1a:	91 50       	subi	r25, 0x01	; 1
    1a1c:	a1 f0       	breq	.+40     	; 0x1a46 <__addsf3x+0x9a>
    1a1e:	ff 0f       	add	r31, r31
    1a20:	bb 1f       	adc	r27, r27
    1a22:	66 1f       	adc	r22, r22
    1a24:	77 1f       	adc	r23, r23
    1a26:	88 1f       	adc	r24, r24
    1a28:	c2 f7       	brpl	.-16     	; 0x1a1a <__addsf3x+0x6e>
    1a2a:	0e c0       	rjmp	.+28     	; 0x1a48 <__addsf3x+0x9c>
    1a2c:	ba 0f       	add	r27, r26
    1a2e:	62 1f       	adc	r22, r18
    1a30:	73 1f       	adc	r23, r19
    1a32:	84 1f       	adc	r24, r20
    1a34:	48 f4       	brcc	.+18     	; 0x1a48 <__addsf3x+0x9c>
    1a36:	87 95       	ror	r24
    1a38:	77 95       	ror	r23
    1a3a:	67 95       	ror	r22
    1a3c:	b7 95       	ror	r27
    1a3e:	f7 95       	ror	r31
    1a40:	9e 3f       	cpi	r25, 0xFE	; 254
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <__addsf3x+0x9a>
    1a44:	b0 cf       	rjmp	.-160    	; 0x19a6 <__addsf3+0x28>
    1a46:	93 95       	inc	r25
    1a48:	88 0f       	add	r24, r24
    1a4a:	08 f0       	brcs	.+2      	; 0x1a4e <__addsf3x+0xa2>
    1a4c:	99 27       	eor	r25, r25
    1a4e:	ee 0f       	add	r30, r30
    1a50:	97 95       	ror	r25
    1a52:	87 95       	ror	r24
    1a54:	08 95       	ret

00001a56 <__divsf3>:
    1a56:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__divsf3x>
    1a5a:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_round>
    1a5e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_pscB>
    1a62:	58 f0       	brcs	.+22     	; 0x1a7a <__divsf3+0x24>
    1a64:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fp_pscA>
    1a68:	40 f0       	brcs	.+16     	; 0x1a7a <__divsf3+0x24>
    1a6a:	29 f4       	brne	.+10     	; 0x1a76 <__divsf3+0x20>
    1a6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6e:	29 f0       	breq	.+10     	; 0x1a7a <__divsf3+0x24>
    1a70:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>
    1a74:	51 11       	cpse	r21, r1
    1a76:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>
    1a7a:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_nan>

00001a7e <__divsf3x>:
    1a7e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__fp_split3>
    1a82:	68 f3       	brcs	.-38     	; 0x1a5e <__divsf3+0x8>

00001a84 <__divsf3_pse>:
    1a84:	99 23       	and	r25, r25
    1a86:	b1 f3       	breq	.-20     	; 0x1a74 <__divsf3+0x1e>
    1a88:	55 23       	and	r21, r21
    1a8a:	91 f3       	breq	.-28     	; 0x1a70 <__divsf3+0x1a>
    1a8c:	95 1b       	sub	r25, r21
    1a8e:	55 0b       	sbc	r21, r21
    1a90:	bb 27       	eor	r27, r27
    1a92:	aa 27       	eor	r26, r26
    1a94:	62 17       	cp	r22, r18
    1a96:	73 07       	cpc	r23, r19
    1a98:	84 07       	cpc	r24, r20
    1a9a:	38 f0       	brcs	.+14     	; 0x1aaa <__divsf3_pse+0x26>
    1a9c:	9f 5f       	subi	r25, 0xFF	; 255
    1a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	44 1f       	adc	r20, r20
    1aa6:	aa 1f       	adc	r26, r26
    1aa8:	a9 f3       	breq	.-22     	; 0x1a94 <__divsf3_pse+0x10>
    1aaa:	35 d0       	rcall	.+106    	; 0x1b16 <__divsf3_pse+0x92>
    1aac:	0e 2e       	mov	r0, r30
    1aae:	3a f0       	brmi	.+14     	; 0x1abe <__divsf3_pse+0x3a>
    1ab0:	e0 e8       	ldi	r30, 0x80	; 128
    1ab2:	32 d0       	rcall	.+100    	; 0x1b18 <__divsf3_pse+0x94>
    1ab4:	91 50       	subi	r25, 0x01	; 1
    1ab6:	50 40       	sbci	r21, 0x00	; 0
    1ab8:	e6 95       	lsr	r30
    1aba:	00 1c       	adc	r0, r0
    1abc:	ca f7       	brpl	.-14     	; 0x1ab0 <__divsf3_pse+0x2c>
    1abe:	2b d0       	rcall	.+86     	; 0x1b16 <__divsf3_pse+0x92>
    1ac0:	fe 2f       	mov	r31, r30
    1ac2:	29 d0       	rcall	.+82     	; 0x1b16 <__divsf3_pse+0x92>
    1ac4:	66 0f       	add	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	bb 1f       	adc	r27, r27
    1acc:	26 17       	cp	r18, r22
    1ace:	37 07       	cpc	r19, r23
    1ad0:	48 07       	cpc	r20, r24
    1ad2:	ab 07       	cpc	r26, r27
    1ad4:	b0 e8       	ldi	r27, 0x80	; 128
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <__divsf3_pse+0x56>
    1ad8:	bb 0b       	sbc	r27, r27
    1ada:	80 2d       	mov	r24, r0
    1adc:	bf 01       	movw	r22, r30
    1ade:	ff 27       	eor	r31, r31
    1ae0:	93 58       	subi	r25, 0x83	; 131
    1ae2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae4:	3a f0       	brmi	.+14     	; 0x1af4 <__divsf3_pse+0x70>
    1ae6:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae8:	51 05       	cpc	r21, r1
    1aea:	78 f0       	brcs	.+30     	; 0x1b0a <__divsf3_pse+0x86>
    1aec:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>
    1af0:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>
    1af4:	5f 3f       	cpi	r21, 0xFF	; 255
    1af6:	e4 f3       	brlt	.-8      	; 0x1af0 <__divsf3_pse+0x6c>
    1af8:	98 3e       	cpi	r25, 0xE8	; 232
    1afa:	d4 f3       	brlt	.-12     	; 0x1af0 <__divsf3_pse+0x6c>
    1afc:	86 95       	lsr	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	b7 95       	ror	r27
    1b04:	f7 95       	ror	r31
    1b06:	9f 5f       	subi	r25, 0xFF	; 255
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__divsf3_pse+0x78>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	91 1d       	adc	r25, r1
    1b0e:	96 95       	lsr	r25
    1b10:	87 95       	ror	r24
    1b12:	97 f9       	bld	r25, 7
    1b14:	08 95       	ret
    1b16:	e1 e0       	ldi	r30, 0x01	; 1
    1b18:	66 0f       	add	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	88 1f       	adc	r24, r24
    1b1e:	bb 1f       	adc	r27, r27
    1b20:	62 17       	cp	r22, r18
    1b22:	73 07       	cpc	r23, r19
    1b24:	84 07       	cpc	r24, r20
    1b26:	ba 07       	cpc	r27, r26
    1b28:	20 f0       	brcs	.+8      	; 0x1b32 <__divsf3_pse+0xae>
    1b2a:	62 1b       	sub	r22, r18
    1b2c:	73 0b       	sbc	r23, r19
    1b2e:	84 0b       	sbc	r24, r20
    1b30:	ba 0b       	sbc	r27, r26
    1b32:	ee 1f       	adc	r30, r30
    1b34:	88 f7       	brcc	.-30     	; 0x1b18 <__divsf3_pse+0x94>
    1b36:	e0 95       	com	r30
    1b38:	08 95       	ret

00001b3a <__fixsfsi>:
    1b3a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__fixunssfsi>
    1b3e:	68 94       	set
    1b40:	b1 11       	cpse	r27, r1
    1b42:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>
    1b46:	08 95       	ret

00001b48 <__fixunssfsi>:
    1b48:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <__fp_splitA>
    1b4c:	88 f0       	brcs	.+34     	; 0x1b70 <__fixunssfsi+0x28>
    1b4e:	9f 57       	subi	r25, 0x7F	; 127
    1b50:	98 f0       	brcs	.+38     	; 0x1b78 <__fixunssfsi+0x30>
    1b52:	b9 2f       	mov	r27, r25
    1b54:	99 27       	eor	r25, r25
    1b56:	b7 51       	subi	r27, 0x17	; 23
    1b58:	b0 f0       	brcs	.+44     	; 0x1b86 <__fixunssfsi+0x3e>
    1b5a:	e1 f0       	breq	.+56     	; 0x1b94 <__fixunssfsi+0x4c>
    1b5c:	66 0f       	add	r22, r22
    1b5e:	77 1f       	adc	r23, r23
    1b60:	88 1f       	adc	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	1a f0       	brmi	.+6      	; 0x1b6c <__fixunssfsi+0x24>
    1b66:	ba 95       	dec	r27
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__fixunssfsi+0x14>
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <__fixunssfsi+0x4c>
    1b6c:	b1 30       	cpi	r27, 0x01	; 1
    1b6e:	91 f0       	breq	.+36     	; 0x1b94 <__fixunssfsi+0x4c>
    1b70:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__fp_zero>
    1b74:	b1 e0       	ldi	r27, 0x01	; 1
    1b76:	08 95       	ret
    1b78:	0c 94 5a 0e 	jmp	0x1cb4	; 0x1cb4 <__fp_zero>
    1b7c:	67 2f       	mov	r22, r23
    1b7e:	78 2f       	mov	r23, r24
    1b80:	88 27       	eor	r24, r24
    1b82:	b8 5f       	subi	r27, 0xF8	; 248
    1b84:	39 f0       	breq	.+14     	; 0x1b94 <__fixunssfsi+0x4c>
    1b86:	b9 3f       	cpi	r27, 0xF9	; 249
    1b88:	cc f3       	brlt	.-14     	; 0x1b7c <__fixunssfsi+0x34>
    1b8a:	86 95       	lsr	r24
    1b8c:	77 95       	ror	r23
    1b8e:	67 95       	ror	r22
    1b90:	b3 95       	inc	r27
    1b92:	d9 f7       	brne	.-10     	; 0x1b8a <__fixunssfsi+0x42>
    1b94:	3e f4       	brtc	.+14     	; 0x1ba4 <__fixunssfsi+0x5c>
    1b96:	90 95       	com	r25
    1b98:	80 95       	com	r24
    1b9a:	70 95       	com	r23
    1b9c:	61 95       	neg	r22
    1b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba4:	08 95       	ret

00001ba6 <__floatunsisf>:
    1ba6:	e8 94       	clt
    1ba8:	09 c0       	rjmp	.+18     	; 0x1bbc <__floatsisf+0x12>

00001baa <__floatsisf>:
    1baa:	97 fb       	bst	r25, 7
    1bac:	3e f4       	brtc	.+14     	; 0x1bbc <__floatsisf+0x12>
    1bae:	90 95       	com	r25
    1bb0:	80 95       	com	r24
    1bb2:	70 95       	com	r23
    1bb4:	61 95       	neg	r22
    1bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	99 23       	and	r25, r25
    1bbe:	a9 f0       	breq	.+42     	; 0x1bea <__floatsisf+0x40>
    1bc0:	f9 2f       	mov	r31, r25
    1bc2:	96 e9       	ldi	r25, 0x96	; 150
    1bc4:	bb 27       	eor	r27, r27
    1bc6:	93 95       	inc	r25
    1bc8:	f6 95       	lsr	r31
    1bca:	87 95       	ror	r24
    1bcc:	77 95       	ror	r23
    1bce:	67 95       	ror	r22
    1bd0:	b7 95       	ror	r27
    1bd2:	f1 11       	cpse	r31, r1
    1bd4:	f8 cf       	rjmp	.-16     	; 0x1bc6 <__floatsisf+0x1c>
    1bd6:	fa f4       	brpl	.+62     	; 0x1c16 <__floatsisf+0x6c>
    1bd8:	bb 0f       	add	r27, r27
    1bda:	11 f4       	brne	.+4      	; 0x1be0 <__floatsisf+0x36>
    1bdc:	60 ff       	sbrs	r22, 0
    1bde:	1b c0       	rjmp	.+54     	; 0x1c16 <__floatsisf+0x6c>
    1be0:	6f 5f       	subi	r22, 0xFF	; 255
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	8f 4f       	sbci	r24, 0xFF	; 255
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	16 c0       	rjmp	.+44     	; 0x1c16 <__floatsisf+0x6c>
    1bea:	88 23       	and	r24, r24
    1bec:	11 f0       	breq	.+4      	; 0x1bf2 <__floatsisf+0x48>
    1bee:	96 e9       	ldi	r25, 0x96	; 150
    1bf0:	11 c0       	rjmp	.+34     	; 0x1c14 <__floatsisf+0x6a>
    1bf2:	77 23       	and	r23, r23
    1bf4:	21 f0       	breq	.+8      	; 0x1bfe <__floatsisf+0x54>
    1bf6:	9e e8       	ldi	r25, 0x8E	; 142
    1bf8:	87 2f       	mov	r24, r23
    1bfa:	76 2f       	mov	r23, r22
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <__floatsisf+0x5e>
    1bfe:	66 23       	and	r22, r22
    1c00:	71 f0       	breq	.+28     	; 0x1c1e <__floatsisf+0x74>
    1c02:	96 e8       	ldi	r25, 0x86	; 134
    1c04:	86 2f       	mov	r24, r22
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	60 e0       	ldi	r22, 0x00	; 0
    1c0a:	2a f0       	brmi	.+10     	; 0x1c16 <__floatsisf+0x6c>
    1c0c:	9a 95       	dec	r25
    1c0e:	66 0f       	add	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	88 1f       	adc	r24, r24
    1c14:	da f7       	brpl	.-10     	; 0x1c0c <__floatsisf+0x62>
    1c16:	88 0f       	add	r24, r24
    1c18:	96 95       	lsr	r25
    1c1a:	87 95       	ror	r24
    1c1c:	97 f9       	bld	r25, 7
    1c1e:	08 95       	ret

00001c20 <__fp_inf>:
    1c20:	97 f9       	bld	r25, 7
    1c22:	9f 67       	ori	r25, 0x7F	; 127
    1c24:	80 e8       	ldi	r24, 0x80	; 128
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	08 95       	ret

00001c2c <__fp_nan>:
    1c2c:	9f ef       	ldi	r25, 0xFF	; 255
    1c2e:	80 ec       	ldi	r24, 0xC0	; 192
    1c30:	08 95       	ret

00001c32 <__fp_pscA>:
    1c32:	00 24       	eor	r0, r0
    1c34:	0a 94       	dec	r0
    1c36:	16 16       	cp	r1, r22
    1c38:	17 06       	cpc	r1, r23
    1c3a:	18 06       	cpc	r1, r24
    1c3c:	09 06       	cpc	r0, r25
    1c3e:	08 95       	ret

00001c40 <__fp_pscB>:
    1c40:	00 24       	eor	r0, r0
    1c42:	0a 94       	dec	r0
    1c44:	12 16       	cp	r1, r18
    1c46:	13 06       	cpc	r1, r19
    1c48:	14 06       	cpc	r1, r20
    1c4a:	05 06       	cpc	r0, r21
    1c4c:	08 95       	ret

00001c4e <__fp_round>:
    1c4e:	09 2e       	mov	r0, r25
    1c50:	03 94       	inc	r0
    1c52:	00 0c       	add	r0, r0
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <__fp_round+0xc>
    1c56:	88 23       	and	r24, r24
    1c58:	52 f0       	brmi	.+20     	; 0x1c6e <__fp_round+0x20>
    1c5a:	bb 0f       	add	r27, r27
    1c5c:	40 f4       	brcc	.+16     	; 0x1c6e <__fp_round+0x20>
    1c5e:	bf 2b       	or	r27, r31
    1c60:	11 f4       	brne	.+4      	; 0x1c66 <__fp_round+0x18>
    1c62:	60 ff       	sbrs	r22, 0
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <__fp_round+0x20>
    1c66:	6f 5f       	subi	r22, 0xFF	; 255
    1c68:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6e:	08 95       	ret

00001c70 <__fp_split3>:
    1c70:	57 fd       	sbrc	r21, 7
    1c72:	90 58       	subi	r25, 0x80	; 128
    1c74:	44 0f       	add	r20, r20
    1c76:	55 1f       	adc	r21, r21
    1c78:	59 f0       	breq	.+22     	; 0x1c90 <__fp_splitA+0x10>
    1c7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7c:	71 f0       	breq	.+28     	; 0x1c9a <__fp_splitA+0x1a>
    1c7e:	47 95       	ror	r20

00001c80 <__fp_splitA>:
    1c80:	88 0f       	add	r24, r24
    1c82:	97 fb       	bst	r25, 7
    1c84:	99 1f       	adc	r25, r25
    1c86:	61 f0       	breq	.+24     	; 0x1ca0 <__fp_splitA+0x20>
    1c88:	9f 3f       	cpi	r25, 0xFF	; 255
    1c8a:	79 f0       	breq	.+30     	; 0x1caa <__fp_splitA+0x2a>
    1c8c:	87 95       	ror	r24
    1c8e:	08 95       	ret
    1c90:	12 16       	cp	r1, r18
    1c92:	13 06       	cpc	r1, r19
    1c94:	14 06       	cpc	r1, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	f2 cf       	rjmp	.-28     	; 0x1c7e <__fp_split3+0xe>
    1c9a:	46 95       	lsr	r20
    1c9c:	f1 df       	rcall	.-30     	; 0x1c80 <__fp_splitA>
    1c9e:	08 c0       	rjmp	.+16     	; 0x1cb0 <__fp_splitA+0x30>
    1ca0:	16 16       	cp	r1, r22
    1ca2:	17 06       	cpc	r1, r23
    1ca4:	18 06       	cpc	r1, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	f1 cf       	rjmp	.-30     	; 0x1c8c <__fp_splitA+0xc>
    1caa:	86 95       	lsr	r24
    1cac:	71 05       	cpc	r23, r1
    1cae:	61 05       	cpc	r22, r1
    1cb0:	08 94       	sec
    1cb2:	08 95       	ret

00001cb4 <__fp_zero>:
    1cb4:	e8 94       	clt

00001cb6 <__fp_szero>:
    1cb6:	bb 27       	eor	r27, r27
    1cb8:	66 27       	eor	r22, r22
    1cba:	77 27       	eor	r23, r23
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	97 f9       	bld	r25, 7
    1cc0:	08 95       	ret

00001cc2 <__mulsf3>:
    1cc2:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__mulsf3x>
    1cc6:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__fp_round>
    1cca:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fp_pscA>
    1cce:	38 f0       	brcs	.+14     	; 0x1cde <__mulsf3+0x1c>
    1cd0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_pscB>
    1cd4:	20 f0       	brcs	.+8      	; 0x1cde <__mulsf3+0x1c>
    1cd6:	95 23       	and	r25, r21
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <__mulsf3+0x1c>
    1cda:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>
    1cde:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_nan>
    1ce2:	11 24       	eor	r1, r1
    1ce4:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>

00001ce8 <__mulsf3x>:
    1ce8:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <__fp_split3>
    1cec:	70 f3       	brcs	.-36     	; 0x1cca <__mulsf3+0x8>

00001cee <__mulsf3_pse>:
    1cee:	95 9f       	mul	r25, r21
    1cf0:	c1 f3       	breq	.-16     	; 0x1ce2 <__mulsf3+0x20>
    1cf2:	95 0f       	add	r25, r21
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	62 9f       	mul	r22, r18
    1cfa:	f0 01       	movw	r30, r0
    1cfc:	72 9f       	mul	r23, r18
    1cfe:	bb 27       	eor	r27, r27
    1d00:	f0 0d       	add	r31, r0
    1d02:	b1 1d       	adc	r27, r1
    1d04:	63 9f       	mul	r22, r19
    1d06:	aa 27       	eor	r26, r26
    1d08:	f0 0d       	add	r31, r0
    1d0a:	b1 1d       	adc	r27, r1
    1d0c:	aa 1f       	adc	r26, r26
    1d0e:	64 9f       	mul	r22, r20
    1d10:	66 27       	eor	r22, r22
    1d12:	b0 0d       	add	r27, r0
    1d14:	a1 1d       	adc	r26, r1
    1d16:	66 1f       	adc	r22, r22
    1d18:	82 9f       	mul	r24, r18
    1d1a:	22 27       	eor	r18, r18
    1d1c:	b0 0d       	add	r27, r0
    1d1e:	a1 1d       	adc	r26, r1
    1d20:	62 1f       	adc	r22, r18
    1d22:	73 9f       	mul	r23, r19
    1d24:	b0 0d       	add	r27, r0
    1d26:	a1 1d       	adc	r26, r1
    1d28:	62 1f       	adc	r22, r18
    1d2a:	83 9f       	mul	r24, r19
    1d2c:	a0 0d       	add	r26, r0
    1d2e:	61 1d       	adc	r22, r1
    1d30:	22 1f       	adc	r18, r18
    1d32:	74 9f       	mul	r23, r20
    1d34:	33 27       	eor	r19, r19
    1d36:	a0 0d       	add	r26, r0
    1d38:	61 1d       	adc	r22, r1
    1d3a:	23 1f       	adc	r18, r19
    1d3c:	84 9f       	mul	r24, r20
    1d3e:	60 0d       	add	r22, r0
    1d40:	21 1d       	adc	r18, r1
    1d42:	82 2f       	mov	r24, r18
    1d44:	76 2f       	mov	r23, r22
    1d46:	6a 2f       	mov	r22, r26
    1d48:	11 24       	eor	r1, r1
    1d4a:	9f 57       	subi	r25, 0x7F	; 127
    1d4c:	50 40       	sbci	r21, 0x00	; 0
    1d4e:	9a f0       	brmi	.+38     	; 0x1d76 <__mulsf3_pse+0x88>
    1d50:	f1 f0       	breq	.+60     	; 0x1d8e <__mulsf3_pse+0xa0>
    1d52:	88 23       	and	r24, r24
    1d54:	4a f0       	brmi	.+18     	; 0x1d68 <__mulsf3_pse+0x7a>
    1d56:	ee 0f       	add	r30, r30
    1d58:	ff 1f       	adc	r31, r31
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	66 1f       	adc	r22, r22
    1d5e:	77 1f       	adc	r23, r23
    1d60:	88 1f       	adc	r24, r24
    1d62:	91 50       	subi	r25, 0x01	; 1
    1d64:	50 40       	sbci	r21, 0x00	; 0
    1d66:	a9 f7       	brne	.-22     	; 0x1d52 <__mulsf3_pse+0x64>
    1d68:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	80 f0       	brcs	.+32     	; 0x1d8e <__mulsf3_pse+0xa0>
    1d6e:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__fp_inf>
    1d72:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_szero>
    1d76:	5f 3f       	cpi	r21, 0xFF	; 255
    1d78:	e4 f3       	brlt	.-8      	; 0x1d72 <__mulsf3_pse+0x84>
    1d7a:	98 3e       	cpi	r25, 0xE8	; 232
    1d7c:	d4 f3       	brlt	.-12     	; 0x1d72 <__mulsf3_pse+0x84>
    1d7e:	86 95       	lsr	r24
    1d80:	77 95       	ror	r23
    1d82:	67 95       	ror	r22
    1d84:	b7 95       	ror	r27
    1d86:	f7 95       	ror	r31
    1d88:	e7 95       	ror	r30
    1d8a:	9f 5f       	subi	r25, 0xFF	; 255
    1d8c:	c1 f7       	brne	.-16     	; 0x1d7e <__mulsf3_pse+0x90>
    1d8e:	fe 2b       	or	r31, r30
    1d90:	88 0f       	add	r24, r24
    1d92:	91 1d       	adc	r25, r1
    1d94:	96 95       	lsr	r25
    1d96:	87 95       	ror	r24
    1d98:	97 f9       	bld	r25, 7
    1d9a:	08 95       	ret

00001d9c <_ZN15OrangutanAnalog7setModeEh.part.0>:
    1d9c:	ec e7       	ldi	r30, 0x7C	; 124
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 7d       	andi	r24, 0xDF	; 223
    1da4:	80 83       	st	Z, r24
    1da6:	08 95       	ret

00001da8 <_ZN15OrangutanAnalog7setModeEh>:
    1da8:	81 11       	cpse	r24, r1
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <_ZN15OrangutanAnalog7setModeEh+0xa>
    1dac:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN15OrangutanAnalog7setModeEh.part.0>
    1db0:	08 95       	ret
    1db2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1db6:	80 62       	ori	r24, 0x20	; 32
    1db8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1dbc:	08 95       	ret

00001dbe <_ZN15OrangutanAnalog7getModeEv>:
    1dbe:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1dc2:	85 fb       	bst	r24, 5
    1dc4:	88 27       	eor	r24, r24
    1dc6:	80 f9       	bld	r24, 0
    1dc8:	08 95       	ret

00001dca <_ZN15OrangutanAnalog16conversionResultEv>:
    1dca:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN15OrangutanAnalog7getModeEv>
    1dce:	88 23       	and	r24, r24
    1dd0:	21 f0       	breq	.+8      	; 0x1dda <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1dd2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	08 95       	ret
    1dda:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1dde:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1de2:	08 95       	ret

00001de4 <_ZN15OrangutanAnalog15startConversionEhh>:
    1de4:	80 32       	cpi	r24, 0x20	; 32
    1de6:	a0 f4       	brcc	.+40     	; 0x1e10 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1de8:	97 e8       	ldi	r25, 0x87	; 135
    1dea:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1dee:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1df2:	66 23       	and	r22, r22
    1df4:	11 f0       	breq	.+4      	; 0x1dfa <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1df6:	90 6c       	ori	r25, 0xC0	; 192
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    1dfa:	9f 77       	andi	r25, 0x7F	; 127
    1dfc:	90 64       	ori	r25, 0x40	; 64
    1dfe:	90 7e       	andi	r25, 0xE0	; 224
    1e00:	98 2b       	or	r25, r24
    1e02:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1e06:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e0a:	80 64       	ori	r24, 0x40	; 64
    1e0c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e10:	08 95       	ret

00001e12 <_ZN15OrangutanAnalog4readEh>:
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <_ZN15OrangutanAnalog15startConversionEhh>
    1e18:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e1c:	86 fd       	sbrc	r24, 6
    1e1e:	fc cf       	rjmp	.-8      	; 0x1e18 <_ZN15OrangutanAnalog4readEh+0x6>
    1e20:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN15OrangutanAnalog16conversionResultEv>
    1e24:	08 95       	ret

00001e26 <analog_read>:
    1e26:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_ZN15OrangutanAnalog4readEh>
    1e2a:	08 95       	ret

00001e2c <_ZN15OrangutanAnalog11readAverageEhj>:
    1e2c:	a0 e0       	ldi	r26, 0x00	; 0
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	ec e1       	ldi	r30, 0x1C	; 28
    1e32:	ff e0       	ldi	r31, 0x0F	; 15
    1e34:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__prologue_saves__+0x14>
    1e38:	eb 01       	movw	r28, r22
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <_ZN15OrangutanAnalog15startConversionEhh>
    1e40:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e44:	86 fd       	sbrc	r24, 6
    1e46:	fc cf       	rjmp	.-8      	; 0x1e40 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    1e48:	8e 01       	movw	r16, r28
    1e4a:	c1 2c       	mov	r12, r1
    1e4c:	d1 2c       	mov	r13, r1
    1e4e:	76 01       	movw	r14, r12
    1e50:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e54:	80 64       	ori	r24, 0x40	; 64
    1e56:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e5a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1e5e:	86 fd       	sbrc	r24, 6
    1e60:	fc cf       	rjmp	.-8      	; 0x1e5a <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1e62:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN15OrangutanAnalog16conversionResultEv>
    1e66:	c8 0e       	add	r12, r24
    1e68:	d9 1e       	adc	r13, r25
    1e6a:	e1 1c       	adc	r14, r1
    1e6c:	f1 1c       	adc	r15, r1
    1e6e:	01 50       	subi	r16, 0x01	; 1
    1e70:	11 09       	sbc	r17, r1
    1e72:	01 15       	cp	r16, r1
    1e74:	11 05       	cpc	r17, r1
    1e76:	61 f7       	brne	.-40     	; 0x1e50 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    1e78:	ce 01       	movw	r24, r28
    1e7a:	96 95       	lsr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	c0 34       	cpi	r28, 0x40	; 64
    1e80:	d1 05       	cpc	r29, r1
    1e82:	38 f4       	brcc	.+14     	; 0x1e92 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    1e84:	8c 0d       	add	r24, r12
    1e86:	9d 1d       	adc	r25, r13
    1e88:	be 01       	movw	r22, r28
    1e8a:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    1e8e:	cb 01       	movw	r24, r22
    1e90:	0e c0       	rjmp	.+28     	; 0x1eae <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    1e92:	a7 01       	movw	r20, r14
    1e94:	96 01       	movw	r18, r12
    1e96:	28 0f       	add	r18, r24
    1e98:	39 1f       	adc	r19, r25
    1e9a:	41 1d       	adc	r20, r1
    1e9c:	51 1d       	adc	r21, r1
    1e9e:	ca 01       	movw	r24, r20
    1ea0:	b9 01       	movw	r22, r18
    1ea2:	9e 01       	movw	r18, r28
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    1eac:	c9 01       	movw	r24, r18
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	e8 e0       	ldi	r30, 0x08	; 8
    1eb4:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__epilogue_restores__+0x14>

00001eb8 <_ZN15OrangutanAnalog12toMillivoltsEj>:
    1eb8:	cf 92       	push	r12
    1eba:	df 92       	push	r13
    1ebc:	ef 92       	push	r14
    1ebe:	ff 92       	push	r15
    1ec0:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ec4:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ec8:	9c 01       	movw	r18, r24
    1eca:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__umulhisi3>
    1ece:	6b 01       	movw	r12, r22
    1ed0:	7c 01       	movw	r14, r24
    1ed2:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN15OrangutanAnalog7getModeEv>
    1ed6:	88 23       	and	r24, r24
    1ed8:	59 f0       	breq	.+22     	; 0x1ef0 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    1eda:	c7 01       	movw	r24, r14
    1edc:	b6 01       	movw	r22, r12
    1ede:	61 58       	subi	r22, 0x81	; 129
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee6:	2f ef       	ldi	r18, 0xFF	; 255
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	50 e0       	ldi	r21, 0x00	; 0
    1eee:	0a c0       	rjmp	.+20     	; 0x1f04 <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	61 50       	subi	r22, 0x01	; 1
    1ef6:	7e 4f       	sbci	r23, 0xFE	; 254
    1ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    1efa:	9f 4f       	sbci	r25, 0xFF	; 255
    1efc:	2f ef       	ldi	r18, 0xFF	; 255
    1efe:	33 e0       	ldi	r19, 0x03	; 3
    1f00:	40 e0       	ldi	r20, 0x00	; 0
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    1f08:	c9 01       	movw	r24, r18
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	08 95       	ret

00001f14 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1f14:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <_ZN15OrangutanAnalog11readAverageEhj>
    1f18:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <_ZN15OrangutanAnalog12toMillivoltsEj>
    1f1c:	08 95       	ret

00001f1e <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN15OrangutanAnalog7getModeEv>
    1f28:	18 2f       	mov	r17, r24
    1f2a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <_ZN15OrangutanAnalog7setModeEh.part.0>
    1f2e:	6a e0       	ldi	r22, 0x0A	; 10
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	86 e0       	ldi	r24, 0x06	; 6
    1f34:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1f38:	ec 01       	movw	r28, r24
    1f3a:	81 2f       	mov	r24, r17
    1f3c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <_ZN15OrangutanAnalog7setModeEh>
    1f40:	ce 01       	movw	r24, r28
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	8c 0f       	add	r24, r28
    1f48:	9d 1f       	adc	r25, r29
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	96 95       	lsr	r25
    1f4e:	87 95       	ror	r24
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	08 95       	ret

00001f58 <read_battery_millivolts_3pi>:
    1f58:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1f5c:	08 95       	ret

00001f5e <_ZL16currentCharacterv>:
    1f5e:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_ZL17use_program_space>
    1f62:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <__data_end>
    1f66:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <__data_end+0x1>
    1f6a:	99 23       	and	r25, r25
    1f6c:	11 f0       	breq	.+4      	; 0x1f72 <_ZL16currentCharacterv+0x14>
    1f6e:	84 91       	lpm	r24, Z
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <_ZL16currentCharacterv+0x16>
    1f72:	80 81       	ld	r24, Z
    1f74:	2f eb       	ldi	r18, 0xBF	; 191
    1f76:	28 0f       	add	r18, r24
    1f78:	2a 31       	cpi	r18, 0x1A	; 26
    1f7a:	10 f4       	brcc	.+4      	; 0x1f80 <_ZL16currentCharacterv+0x22>
    1f7c:	80 5e       	subi	r24, 0xE0	; 224
    1f7e:	08 95       	ret
    1f80:	80 32       	cpi	r24, 0x20	; 32
    1f82:	49 f4       	brne	.+18     	; 0x1f96 <_ZL16currentCharacterv+0x38>
    1f84:	9f 01       	movw	r18, r30
    1f86:	2f 5f       	subi	r18, 0xFF	; 255
    1f88:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8a:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    1f8e:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    1f92:	ef 2b       	or	r30, r31
    1f94:	31 f7       	brne	.-52     	; 0x1f62 <_ZL16currentCharacterv+0x4>
    1f96:	08 95       	ret

00001f98 <_ZL9getNumberv>:
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZL16currentCharacterv>
    1fa2:	c0 e0       	ldi	r28, 0x00	; 0
    1fa4:	d0 e0       	ldi	r29, 0x00	; 0
    1fa6:	1a e0       	ldi	r17, 0x0A	; 10
    1fa8:	90 ed       	ldi	r25, 0xD0	; 208
    1faa:	98 0f       	add	r25, r24
    1fac:	9a 30       	cpi	r25, 0x0A	; 10
    1fae:	b8 f4       	brcc	.+46     	; 0x1fde <_ZL9getNumberv+0x46>
    1fb0:	9e 01       	movw	r18, r28
    1fb2:	12 9f       	mul	r17, r18
    1fb4:	e0 01       	movw	r28, r0
    1fb6:	13 9f       	mul	r17, r19
    1fb8:	d0 0d       	add	r29, r0
    1fba:	11 24       	eor	r1, r1
    1fbc:	c8 0f       	add	r28, r24
    1fbe:	d1 1d       	adc	r29, r1
    1fc0:	87 fd       	sbrc	r24, 7
    1fc2:	da 95       	dec	r29
    1fc4:	e0 97       	sbiw	r28, 0x30	; 48
    1fc6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
    1fca:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
    1fce:	01 96       	adiw	r24, 0x01	; 1
    1fd0:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
    1fd4:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
    1fd8:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZL16currentCharacterv>
    1fdc:	e5 cf       	rjmp	.-54     	; 0x1fa8 <_ZL9getNumberv+0x10>
    1fde:	ce 01       	movw	r24, r28
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	08 95       	ret

00001fe8 <_ZN15OrangutanBuzzer5init2Ev>:
    1fe8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1fec:	83 e2       	ldi	r24, 0x23	; 35
    1fee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1ff2:	81 e1       	ldi	r24, 0x11	; 17
    1ff4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1ff8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    1ffc:	80 e1       	ldi	r24, 0x10	; 16
    1ffe:	97 e2       	ldi	r25, 0x27	; 39
    2000:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2004:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2008:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    200c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2010:	22 9a       	sbi	0x04, 2	; 4
    2012:	78 94       	sei
    2014:	08 95       	ret

00002016 <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    2016:	8f 92       	push	r8
    2018:	9f 92       	push	r9
    201a:	af 92       	push	r10
    201c:	bf 92       	push	r11
    201e:	df 92       	push	r13
    2020:	ef 92       	push	r14
    2022:	ff 92       	push	r15
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	5c 01       	movw	r10, r24
    202e:	8b 01       	movw	r16, r22
    2030:	d4 2e       	mov	r13, r20
    2032:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <buzzerInitialized>
    2036:	81 11       	cpse	r24, r1
    2038:	05 c0       	rjmp	.+10     	; 0x2044 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <buzzerInitialized>
    2040:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_ZN15OrangutanBuzzer5init2Ev>
    2044:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    2048:	b7 fe       	sbrs	r11, 7
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    204c:	e8 94       	clt
    204e:	b7 f8       	bld	r11, 7
    2050:	2a e0       	ldi	r18, 0x0A	; 10
    2052:	f2 2e       	mov	r15, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    2056:	ff 24       	eor	r15, r15
    2058:	f3 94       	inc	r15
    205a:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    205e:	2e 2d       	mov	r18, r14
    2060:	28 7f       	andi	r18, 0xF8	; 248
    2062:	e2 2e       	mov	r14, r18
    2064:	48 ec       	ldi	r20, 0xC8	; 200
    2066:	f4 9e       	mul	r15, r20
    2068:	c0 01       	movw	r24, r0
    206a:	11 24       	eor	r1, r1
    206c:	8a 15       	cp	r24, r10
    206e:	9b 05       	cpc	r25, r11
    2070:	e0 f4       	brcc	.+56     	; 0x20aa <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    2072:	e5 01       	movw	r28, r10
    2074:	51 e1       	ldi	r21, 0x11	; 17
    2076:	a5 16       	cp	r10, r21
    2078:	57 e2       	ldi	r21, 0x27	; 39
    207a:	b5 06       	cpc	r11, r21
    207c:	10 f0       	brcs	.+4      	; 0x2082 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    207e:	c0 e1       	ldi	r28, 0x10	; 16
    2080:	d7 e2       	ldi	r29, 0x27	; 39
    2082:	be 01       	movw	r22, r28
    2084:	76 95       	lsr	r23
    2086:	67 95       	ror	r22
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	60 58       	subi	r22, 0x80	; 128
    208e:	79 46       	sbci	r23, 0x69	; 105
    2090:	87 46       	sbci	r24, 0x67	; 103
    2092:	9f 4f       	sbci	r25, 0xFF	; 255
    2094:	4e 01       	movw	r8, r28
    2096:	a1 2c       	mov	r10, r1
    2098:	b1 2c       	mov	r11, r1
    209a:	a5 01       	movw	r20, r10
    209c:	94 01       	movw	r18, r8
    209e:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    20a2:	59 01       	movw	r10, r18
    20a4:	8e 2d       	mov	r24, r14
    20a6:	81 60       	ori	r24, 0x01	; 1
    20a8:	24 c0       	rjmp	.+72     	; 0x20f2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    20aa:	c8 e2       	ldi	r28, 0x28	; 40
    20ac:	fc 9e       	mul	r15, r28
    20ae:	c0 2d       	mov	r28, r0
    20b0:	11 24       	eor	r1, r1
    20b2:	d0 e0       	ldi	r29, 0x00	; 0
    20b4:	ca 15       	cp	r28, r10
    20b6:	db 05       	cpc	r29, r11
    20b8:	08 f4       	brcc	.+2      	; 0x20bc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    20ba:	e5 01       	movw	r28, r10
    20bc:	be 01       	movw	r22, r28
    20be:	76 95       	lsr	r23
    20c0:	67 95       	ror	r22
    20c2:	9e 01       	movw	r18, r28
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	50 e0       	ldi	r21, 0x00	; 0
    20c8:	8a e0       	ldi	r24, 0x0A	; 10
    20ca:	f8 12       	cpse	r15, r24
    20cc:	07 c0       	rjmp	.+14     	; 0x20dc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	60 5e       	subi	r22, 0xE0	; 224
    20d4:	73 44       	sbci	r23, 0x43	; 67
    20d6:	81 44       	sbci	r24, 0x41	; 65
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	06 c0       	rjmp	.+12     	; 0x20e8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	60 53       	subi	r22, 0x30	; 48
    20e2:	7d 4e       	sbci	r23, 0xED	; 237
    20e4:	8c 4e       	sbci	r24, 0xEC	; 236
    20e6:	9f 4f       	sbci	r25, 0xFF	; 255
    20e8:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    20ec:	59 01       	movw	r10, r18
    20ee:	8e 2d       	mov	r24, r14
    20f0:	82 60       	ori	r24, 0x02	; 2
    20f2:	88 2e       	mov	r8, r24
    20f4:	2a e0       	ldi	r18, 0x0A	; 10
    20f6:	f2 12       	cpse	r15, r18
    20f8:	07 c0       	rjmp	.+14     	; 0x2108 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    20fa:	ce 01       	movw	r24, r28
    20fc:	05 96       	adiw	r24, 0x05	; 5
    20fe:	6a e0       	ldi	r22, 0x0A	; 10
    2100:	70 e0       	ldi	r23, 0x00	; 0
    2102:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    2106:	eb 01       	movw	r28, r22
    2108:	c8 3e       	cpi	r28, 0xE8	; 232
    210a:	43 e0       	ldi	r20, 0x03	; 3
    210c:	d4 07       	cpc	r29, r20
    210e:	59 f0       	breq	.+22     	; 0x2126 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    2110:	98 01       	movw	r18, r16
    2112:	de 01       	movw	r26, r28
    2114:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__umulhisi3>
    2118:	28 ee       	ldi	r18, 0xE8	; 232
    211a:	33 e0       	ldi	r19, 0x03	; 3
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__divmodsi4>
    2124:	89 01       	movw	r16, r18
    2126:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    212a:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    212e:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2132:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2136:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    213a:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    213e:	4d 2d       	mov	r20, r13
    2140:	40 31       	cpi	r20, 0x10	; 16
    2142:	08 f0       	brcs	.+2      	; 0x2146 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    2144:	4f e0       	ldi	r20, 0x0F	; 15
    2146:	80 e1       	ldi	r24, 0x10	; 16
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	84 1b       	sub	r24, r20
    214c:	91 09       	sbc	r25, r1
    214e:	a9 01       	movw	r20, r18
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    2152:	56 95       	lsr	r21
    2154:	47 95       	ror	r20
    2156:	8a 95       	dec	r24
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    215a:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    215e:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2162:	10 93 94 01 	sts	0x0194, r17	; 0x800194 <_ZL13buzzerTimeout+0x1>
    2166:	00 93 93 01 	sts	0x0193, r16	; 0x800193 <_ZL13buzzerTimeout>
    216a:	86 b3       	in	r24, 0x16	; 22
    216c:	8f ef       	ldi	r24, 0xFF	; 255
    216e:	86 bb       	out	0x16, r24	; 22
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	bf 90       	pop	r11
    2186:	af 90       	pop	r10
    2188:	9f 90       	pop	r9
    218a:	8f 90       	pop	r8
    218c:	08 95       	ret

0000218e <_ZN15OrangutanBuzzer8playNoteEhjh>:
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	eb 01       	movw	r28, r22
    2194:	8f 3f       	cpi	r24, 0xFF	; 255
    2196:	11 f0       	breq	.+4      	; 0x219c <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    2198:	41 11       	cpse	r20, r1
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	be 01       	movw	r22, r28
    21a0:	88 ee       	ldi	r24, 0xE8	; 232
    21a2:	93 e0       	ldi	r25, 0x03	; 3
    21a4:	43 c0       	rjmp	.+134    	; 0x222c <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    21a6:	81 31       	cpi	r24, 0x11	; 17
    21a8:	30 f0       	brcs	.+12     	; 0x21b6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    21aa:	50 ef       	ldi	r21, 0xF0	; 240
    21ac:	58 0f       	add	r21, r24
    21ae:	50 36       	cpi	r21, 0x60	; 96
    21b0:	18 f0       	brcs	.+6      	; 0x21b8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    21b2:	5f e5       	ldi	r21, 0x5F	; 95
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	85 2f       	mov	r24, r21
    21ba:	6c e0       	ldi	r22, 0x0C	; 12
    21bc:	0e 94 bc 1c 	call	0x3978	; 0x3978 <__udivmodqi4>
    21c0:	68 2f       	mov	r22, r24
    21c2:	74 ef       	ldi	r23, 0xF4	; 244
    21c4:	76 03       	mulsu	r23, r22
    21c6:	90 01       	movw	r18, r0
    21c8:	11 24       	eor	r1, r1
    21ca:	25 0f       	add	r18, r21
    21cc:	31 1d       	adc	r19, r1
    21ce:	2c 30       	cpi	r18, 0x0C	; 12
    21d0:	31 05       	cpc	r19, r1
    21d2:	40 f4       	brcc	.+16     	; 0x21e4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    21d4:	f9 01       	movw	r30, r18
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	e8 5c       	subi	r30, 0xC8	; 200
    21dc:	fe 4f       	sbci	r31, 0xFE	; 254
    21de:	20 81       	ld	r18, Z
    21e0:	31 81       	ldd	r19, Z+1	; 0x01
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	87 30       	cpi	r24, 0x07	; 7
    21ea:	81 f0       	breq	.+32     	; 0x220c <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    21ec:	08 2e       	mov	r0, r24
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    21f0:	22 0f       	add	r18, r18
    21f2:	33 1f       	adc	r19, r19
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	28 f0       	brcs	.+10     	; 0x2206 <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    21fc:	c9 01       	movw	r24, r18
    21fe:	05 96       	adiw	r24, 0x05	; 5
    2200:	6a e0       	ldi	r22, 0x0A	; 10
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	0c c0       	rjmp	.+24     	; 0x221e <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    2206:	c9 01       	movw	r24, r18
    2208:	90 58       	subi	r25, 0x80	; 128
    220a:	0c c0       	rjmp	.+24     	; 0x2224 <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    220c:	c9 01       	movw	r24, r18
    220e:	36 e0       	ldi	r19, 0x06	; 6
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	3a 95       	dec	r19
    2216:	e1 f7       	brne	.-8      	; 0x2210 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    2218:	02 96       	adiw	r24, 0x02	; 2
    221a:	65 e0       	ldi	r22, 0x05	; 5
    221c:	70 e0       	ldi	r23, 0x00	; 0
    221e:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    2222:	cb 01       	movw	r24, r22
    2224:	40 31       	cpi	r20, 0x10	; 16
    2226:	08 f0       	brcs	.+2      	; 0x222a <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    2228:	4f e0       	ldi	r20, 0x0F	; 15
    222a:	be 01       	movw	r22, r28
    222c:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	08 95       	ret

00002236 <_ZL8nextNotev>:
    2236:	a2 e0       	ldi	r26, 0x02	; 2
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e1 e2       	ldi	r30, 0x21	; 33
    223c:	f1 e1       	ldi	r31, 0x11	; 17
    223e:	0c 94 5b 1d 	jmp	0x3ab6	; 0x3ab6 <__prologue_saves__+0x4>
    2242:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    2246:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL8staccato>
    224a:	88 23       	and	r24, r24
    224c:	21 f0       	breq	.+8      	; 0x2256 <_ZL8nextNotev+0x20>
    224e:	60 91 8f 01 	lds	r22, 0x018F	; 0x80018f <_ZL22staccato_rest_duration>
    2252:	61 11       	cpse	r22, r1
    2254:	17 c0       	rjmp	.+46     	; 0x2284 <_ZL8nextNotev+0x4e>
    2256:	77 24       	eor	r7, r7
    2258:	73 94       	inc	r7
    225a:	b0 ec       	ldi	r27, 0xC0	; 192
    225c:	ab 2e       	mov	r10, r27
    225e:	bd e5       	ldi	r27, 0x5D	; 93
    2260:	bb 2e       	mov	r11, r27
    2262:	1a e0       	ldi	r17, 0x0A	; 10
    2264:	61 2e       	mov	r6, r17
    2266:	04 e0       	ldi	r16, 0x04	; 4
    2268:	80 2e       	mov	r8, r16
    226a:	80 ed       	ldi	r24, 0xD0	; 208
    226c:	c8 2e       	mov	r12, r24
    226e:	87 e0       	ldi	r24, 0x07	; 7
    2270:	d8 2e       	mov	r13, r24
    2272:	94 e0       	ldi	r25, 0x04	; 4
    2274:	e9 2e       	mov	r14, r25
    2276:	f1 2c       	mov	r15, r1
    2278:	04 ef       	ldi	r16, 0xF4	; 244
    227a:	11 e0       	ldi	r17, 0x01	; 1
    227c:	2f e0       	ldi	r18, 0x0F	; 15
    227e:	42 2e       	mov	r4, r18
    2280:	51 2c       	mov	r5, r1
    2282:	15 c0       	rjmp	.+42     	; 0x22ae <_ZL8nextNotev+0x78>
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	88 ee       	ldi	r24, 0xE8	; 232
    228a:	93 e0       	ldi	r25, 0x03	; 3
    228c:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    2290:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    2294:	17 c1       	rjmp	.+558    	; 0x24c4 <_ZL8nextNotev+0x28e>
    2296:	86 36       	cpi	r24, 0x66	; 102
    2298:	d4 f5       	brge	.+116    	; 0x230e <_ZL8nextNotev+0xd8>
    229a:	81 36       	cpi	r24, 0x61	; 97
    229c:	09 f4       	brne	.+2      	; 0x22a0 <_ZL8nextNotev+0x6a>
    229e:	a9 c0       	rjmp	.+338    	; 0x23f2 <_ZL8nextNotev+0x1bc>
    22a0:	7c f5       	brge	.+94     	; 0x2300 <_ZL8nextNotev+0xca>
    22a2:	8c 33       	cpi	r24, 0x3C	; 60
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <_ZL8nextNotev+0x72>
    22a6:	60 c0       	rjmp	.+192    	; 0x2368 <_ZL8nextNotev+0x132>
    22a8:	8e 33       	cpi	r24, 0x3E	; 62
    22aa:	81 f4       	brne	.+32     	; 0x22cc <_ZL8nextNotev+0x96>
    22ac:	93 94       	inc	r9
    22ae:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZL16currentCharacterv>
    22b2:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    22b6:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    22ba:	2f 5f       	subi	r18, 0xFF	; 255
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    22c2:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    22c6:	85 36       	cpi	r24, 0x65	; 101
    22c8:	31 f7       	brne	.-52     	; 0x2296 <_ZL8nextNotev+0x60>
    22ca:	52 c0       	rjmp	.+164    	; 0x2370 <_ZL8nextNotev+0x13a>
    22cc:	81 32       	cpi	r24, 0x21	; 33
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <_ZL8nextNotev+0x9c>
    22d0:	8b c0       	rjmp	.+278    	; 0x23e8 <_ZL8nextNotev+0x1b2>
    22d2:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    22d6:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    22da:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    22de:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    22e2:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    22e6:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    22ea:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    22ee:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    22f2:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    22f6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <_ZL8staccato>
    22fa:	a4 e0       	ldi	r26, 0x04	; 4
    22fc:	9a 2e       	mov	r9, r26
    22fe:	d7 cf       	rjmp	.-82     	; 0x22ae <_ZL8nextNotev+0x78>
    2300:	83 36       	cpi	r24, 0x63	; 99
    2302:	a1 f1       	breq	.+104    	; 0x236c <_ZL8nextNotev+0x136>
    2304:	0c f4       	brge	.+2      	; 0x2308 <_ZL8nextNotev+0xd2>
    2306:	78 c0       	rjmp	.+240    	; 0x23f8 <_ZL8nextNotev+0x1c2>
    2308:	10 e0       	ldi	r17, 0x00	; 0
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	77 c0       	rjmp	.+238    	; 0x23fc <_ZL8nextNotev+0x1c6>
    230e:	8d 36       	cpi	r24, 0x6D	; 109
    2310:	c1 f1       	breq	.+112    	; 0x2382 <_ZL8nextNotev+0x14c>
    2312:	94 f4       	brge	.+36     	; 0x2338 <_ZL8nextNotev+0x102>
    2314:	87 36       	cpi	r24, 0x67	; 103
    2316:	91 f1       	breq	.+100    	; 0x237c <_ZL8nextNotev+0x146>
    2318:	74 f1       	brlt	.+92     	; 0x2376 <_ZL8nextNotev+0x140>
    231a:	8c 36       	cpi	r24, 0x6C	; 108
    231c:	09 f0       	breq	.+2      	; 0x2320 <_ZL8nextNotev+0xea>
    231e:	64 c0       	rjmp	.+200    	; 0x23e8 <_ZL8nextNotev+0x1b2>
    2320:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZL9getNumberv>
    2324:	bc 01       	movw	r22, r24
    2326:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    232a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    232e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    2332:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2336:	51 c0       	rjmp	.+162    	; 0x23da <_ZL8nextNotev+0x1a4>
    2338:	82 37       	cpi	r24, 0x72	; 114
    233a:	c9 f1       	breq	.+114    	; 0x23ae <_ZL8nextNotev+0x178>
    233c:	4c f4       	brge	.+18     	; 0x2350 <_ZL8nextNotev+0x11a>
    233e:	8f 36       	cpi	r24, 0x6F	; 111
    2340:	09 f0       	breq	.+2      	; 0x2344 <_ZL8nextNotev+0x10e>
    2342:	52 c0       	rjmp	.+164    	; 0x23e8 <_ZL8nextNotev+0x1b2>
    2344:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZL9getNumberv>
    2348:	98 2e       	mov	r9, r24
    234a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    234e:	af cf       	rjmp	.-162    	; 0x22ae <_ZL8nextNotev+0x78>
    2350:	84 37       	cpi	r24, 0x74	; 116
    2352:	81 f1       	breq	.+96     	; 0x23b4 <_ZL8nextNotev+0x17e>
    2354:	86 37       	cpi	r24, 0x76	; 118
    2356:	09 f0       	breq	.+2      	; 0x235a <_ZL8nextNotev+0x124>
    2358:	47 c0       	rjmp	.+142    	; 0x23e8 <_ZL8nextNotev+0x1b2>
    235a:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZL9getNumberv>
    235e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    2362:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    2366:	a3 cf       	rjmp	.-186    	; 0x22ae <_ZL8nextNotev+0x78>
    2368:	9a 94       	dec	r9
    236a:	a1 cf       	rjmp	.-190    	; 0x22ae <_ZL8nextNotev+0x78>
    236c:	10 e0       	ldi	r17, 0x00	; 0
    236e:	20 c0       	rjmp	.+64     	; 0x23b0 <_ZL8nextNotev+0x17a>
    2370:	10 e0       	ldi	r17, 0x00	; 0
    2372:	84 e0       	ldi	r24, 0x04	; 4
    2374:	43 c0       	rjmp	.+134    	; 0x23fc <_ZL8nextNotev+0x1c6>
    2376:	10 e0       	ldi	r17, 0x00	; 0
    2378:	85 e0       	ldi	r24, 0x05	; 5
    237a:	40 c0       	rjmp	.+128    	; 0x23fc <_ZL8nextNotev+0x1c6>
    237c:	10 e0       	ldi	r17, 0x00	; 0
    237e:	87 e0       	ldi	r24, 0x07	; 7
    2380:	3d c0       	rjmp	.+122    	; 0x23fc <_ZL8nextNotev+0x1c6>
    2382:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZL16currentCharacterv>
    2386:	8c 36       	cpi	r24, 0x6C	; 108
    2388:	19 f4       	brne	.+6      	; 0x2390 <_ZL8nextNotev+0x15a>
    238a:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <_ZL8staccato>
    238e:	04 c0       	rjmp	.+8      	; 0x2398 <_ZL8nextNotev+0x162>
    2390:	70 92 90 01 	sts	0x0190, r7	; 0x800190 <_ZL8staccato>
    2394:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    2398:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    239c:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    23a0:	2f 5f       	subi	r18, 0xFF	; 255
    23a2:	3f 4f       	sbci	r19, 0xFF	; 255
    23a4:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    23a8:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    23ac:	80 cf       	rjmp	.-256    	; 0x22ae <_ZL8nextNotev+0x78>
    23ae:	11 e0       	ldi	r17, 0x01	; 1
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	24 c0       	rjmp	.+72     	; 0x23fc <_ZL8nextNotev+0x1c6>
    23b4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZL9getNumberv>
    23b8:	bc 01       	movw	r22, r24
    23ba:	c5 01       	movw	r24, r10
    23bc:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    23c0:	66 9e       	mul	r6, r22
    23c2:	c0 01       	movw	r24, r0
    23c4:	67 9e       	mul	r6, r23
    23c6:	90 0d       	add	r25, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    23ce:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    23d2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    23d6:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    23da:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    23de:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    23e2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    23e6:	63 cf       	rjmp	.-314    	; 0x22ae <_ZL8nextNotev+0x78>
    23e8:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <__data_end+0x1>
    23ec:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__data_end>
    23f0:	69 c0       	rjmp	.+210    	; 0x24c4 <_ZL8nextNotev+0x28e>
    23f2:	10 e0       	ldi	r17, 0x00	; 0
    23f4:	89 e0       	ldi	r24, 0x09	; 9
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <_ZL8nextNotev+0x1c6>
    23f8:	10 e0       	ldi	r17, 0x00	; 0
    23fa:	8b e0       	ldi	r24, 0x0B	; 11
    23fc:	08 2f       	mov	r16, r24
    23fe:	9c e0       	ldi	r25, 0x0C	; 12
    2400:	99 9e       	mul	r9, r25
    2402:	00 0d       	add	r16, r0
    2404:	11 24       	eor	r1, r1
    2406:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZL16currentCharacterv>
    240a:	98 2f       	mov	r25, r24
    240c:	97 7f       	andi	r25, 0xF7	; 247
    240e:	93 32       	cpi	r25, 0x23	; 35
    2410:	61 f4       	brne	.+24     	; 0x242a <_ZL8nextNotev+0x1f4>
    2412:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    2416:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    241a:	2f 5f       	subi	r18, 0xFF	; 255
    241c:	3f 4f       	sbci	r19, 0xFF	; 255
    241e:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    2422:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    2426:	0f 5f       	subi	r16, 0xFF	; 255
    2428:	ee cf       	rjmp	.-36     	; 0x2406 <_ZL8nextNotev+0x1d0>
    242a:	8d 32       	cpi	r24, 0x2D	; 45
    242c:	71 f4       	brne	.+28     	; 0x244a <_ZL8nextNotev+0x214>
    242e:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    2432:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    2436:	2f 5f       	subi	r18, 0xFF	; 255
    2438:	3f 4f       	sbci	r19, 0xFF	; 255
    243a:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    243e:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    2442:	01 50       	subi	r16, 0x01	; 1
    2444:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZL16currentCharacterv>
    2448:	f0 cf       	rjmp	.-32     	; 0x242a <_ZL8nextNotev+0x1f4>
    244a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    244e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    2452:	81 53       	subi	r24, 0x31	; 49
    2454:	88 30       	cpi	r24, 0x08	; 8
    2456:	50 f4       	brcc	.+20     	; 0x246c <_ZL8nextNotev+0x236>
    2458:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    245c:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    2460:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZL9getNumberv>
    2464:	bc 01       	movw	r22, r24
    2466:	c7 01       	movw	r24, r14
    2468:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    246c:	7b 01       	movw	r14, r22
    246e:	f6 94       	lsr	r15
    2470:	e7 94       	ror	r14
    2472:	69 83       	std	Y+1, r22	; 0x01
    2474:	7a 83       	std	Y+2, r23	; 0x02
    2476:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <_ZL16currentCharacterv>
    247a:	69 81       	ldd	r22, Y+1	; 0x01
    247c:	7a 81       	ldd	r23, Y+2	; 0x02
    247e:	8e 32       	cpi	r24, 0x2E	; 46
    2480:	69 f4       	brne	.+26     	; 0x249c <_ZL8nextNotev+0x266>
    2482:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <__data_end>
    2486:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <__data_end+0x1>
    248a:	2f 5f       	subi	r18, 0xFF	; 255
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <__data_end+0x1>
    2492:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <__data_end>
    2496:	6e 0d       	add	r22, r14
    2498:	7f 1d       	adc	r23, r15
    249a:	e9 cf       	rjmp	.-46     	; 0x246e <_ZL8nextNotev+0x238>
    249c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_ZL8staccato>
    24a0:	88 23       	and	r24, r24
    24a2:	39 f0       	breq	.+14     	; 0x24b2 <_ZL8nextNotev+0x27c>
    24a4:	9b 01       	movw	r18, r22
    24a6:	36 95       	lsr	r19
    24a8:	27 95       	ror	r18
    24aa:	20 93 8f 01 	sts	0x018F, r18	; 0x80018f <_ZL22staccato_rest_duration>
    24ae:	62 1b       	sub	r22, r18
    24b0:	71 09       	sbc	r23, r1
    24b2:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    24b6:	11 23       	and	r17, r17
    24b8:	11 f0       	breq	.+4      	; 0x24be <_ZL8nextNotev+0x288>
    24ba:	8f ef       	ldi	r24, 0xFF	; 255
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <_ZL8nextNotev+0x28a>
    24be:	80 2f       	mov	r24, r16
    24c0:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN15OrangutanBuzzer8playNoteEhjh>
    24c4:	22 96       	adiw	r28, 0x02	; 2
    24c6:	e0 e1       	ldi	r30, 0x10	; 16
    24c8:	0c 94 77 1d 	jmp	0x3aee	; 0x3aee <__epilogue_restores__+0x4>

000024cc <__vector_13>:
    24cc:	1f 92       	push	r1
    24ce:	0f 92       	push	r0
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	0f 92       	push	r0
    24d4:	11 24       	eor	r1, r1
    24d6:	2f 93       	push	r18
    24d8:	3f 93       	push	r19
    24da:	4f 93       	push	r20
    24dc:	5f 93       	push	r21
    24de:	6f 93       	push	r22
    24e0:	7f 93       	push	r23
    24e2:	8f 93       	push	r24
    24e4:	9f 93       	push	r25
    24e6:	af 93       	push	r26
    24e8:	bf 93       	push	r27
    24ea:	ef 93       	push	r30
    24ec:	ff 93       	push	r31
    24ee:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_ZL13buzzerTimeout>
    24f2:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_ZL13buzzerTimeout+0x1>
    24f6:	9c 01       	movw	r18, r24
    24f8:	21 50       	subi	r18, 0x01	; 1
    24fa:	31 09       	sbc	r19, r1
    24fc:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <_ZL13buzzerTimeout+0x1>
    2500:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <_ZL13buzzerTimeout>
    2504:	89 2b       	or	r24, r25
    2506:	11 f5       	brne	.+68     	; 0x254c <__vector_13+0x80>
    2508:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    250c:	78 94       	sei
    250e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2512:	88 7f       	andi	r24, 0xF8	; 248
    2514:	81 60       	ori	r24, 0x01	; 1
    2516:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    251a:	80 e1       	ldi	r24, 0x10	; 16
    251c:	97 e2       	ldi	r25, 0x27	; 39
    251e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2522:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    2526:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    252a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    2534:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
    2538:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
    253c:	89 2b       	or	r24, r25
    253e:	31 f0       	breq	.+12     	; 0x254c <__vector_13+0x80>
    2540:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <_ZL17play_mode_setting>
    2544:	81 11       	cpse	r24, r1
    2546:	02 c0       	rjmp	.+4      	; 0x254c <__vector_13+0x80>
    2548:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZL8nextNotev>
    254c:	ff 91       	pop	r31
    254e:	ef 91       	pop	r30
    2550:	bf 91       	pop	r27
    2552:	af 91       	pop	r26
    2554:	9f 91       	pop	r25
    2556:	8f 91       	pop	r24
    2558:	7f 91       	pop	r23
    255a:	6f 91       	pop	r22
    255c:	5f 91       	pop	r21
    255e:	4f 91       	pop	r20
    2560:	3f 91       	pop	r19
    2562:	2f 91       	pop	r18
    2564:	0f 90       	pop	r0
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	0f 90       	pop	r0
    256a:	1f 90       	pop	r1
    256c:	18 95       	reti

0000256e <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    256e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2572:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
    2576:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <_ZL17use_program_space>
    2580:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <_ZL22staccato_rest_duration>
    2584:	0e 94 1b 11 	call	0x2236	; 0x2236 <_ZL8nextNotev>
    2588:	08 95       	ret

0000258a <play_from_program_space>:
    258a:	0e 94 b7 12 	call	0x256e	; 0x256e <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    258e:	08 95       	ret

00002590 <delay_us.constprop.0>:
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	6f 93       	push	r22
    2596:	64 e0       	ldi	r22, 0x04	; 4
    2598:	6a 95       	dec	r22
    259a:	f1 f7       	brne	.-4      	; 0x2598 <delay_us.constprop.0+0x8>
    259c:	6f 91       	pop	r22
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	c9 f7       	brne	.-14     	; 0x2594 <delay_us.constprop.0+0x4>
    25a2:	08 95       	ret

000025a4 <_ZN12OrangutanLCD8busyWaitEv>:
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	1a b1       	in	r17, 0x0a	; 10
    25ae:	57 98       	cbi	0x0a, 7	; 10
    25b0:	5a 98       	cbi	0x0b, 2	; 11
    25b2:	28 9a       	sbi	0x05, 0	; 5
    25b4:	c0 e0       	ldi	r28, 0x00	; 0
    25b6:	d0 e0       	ldi	r29, 0x00	; 0
    25b8:	0e 94 c8 12 	call	0x2590	; 0x2590 <delay_us.constprop.0>
    25bc:	5c 9a       	sbi	0x0b, 4	; 11
    25be:	0e 94 c8 12 	call	0x2590	; 0x2590 <delay_us.constprop.0>
    25c2:	09 b1       	in	r16, 0x09	; 9
    25c4:	5c 98       	cbi	0x0b, 4	; 11
    25c6:	0e 94 c8 12 	call	0x2590	; 0x2590 <delay_us.constprop.0>
    25ca:	5c 9a       	sbi	0x0b, 4	; 11
    25cc:	0e 94 c8 12 	call	0x2590	; 0x2590 <delay_us.constprop.0>
    25d0:	5c 98       	cbi	0x0b, 4	; 11
    25d2:	24 96       	adiw	r28, 0x04	; 4
    25d4:	07 ff       	sbrs	r16, 7
    25d6:	10 c0       	rjmp	.+32     	; 0x25f8 <_ZN12OrangutanLCD8busyWaitEv+0x54>
    25d8:	ae 01       	movw	r20, r28
    25da:	60 e0       	ldi	r22, 0x00	; 0
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <lcdTimeout>
    25e2:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <lcdTimeout+0x1>
    25e6:	a0 91 97 01 	lds	r26, 0x0197	; 0x800197 <lcdTimeout+0x2>
    25ea:	b0 91 98 01 	lds	r27, 0x0198	; 0x800198 <lcdTimeout+0x3>
    25ee:	48 17       	cp	r20, r24
    25f0:	59 07       	cpc	r21, r25
    25f2:	6a 07       	cpc	r22, r26
    25f4:	7b 07       	cpc	r23, r27
    25f6:	00 f3       	brcs	.-64     	; 0x25b8 <_ZN12OrangutanLCD8busyWaitEv+0x14>
    25f8:	1a b9       	out	0x0a, r17	; 10
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <_ZN12OrangutanLCD8sendDataEh>:
    2604:	95 b1       	in	r25, 0x05	; 5
    2606:	28 2f       	mov	r18, r24
    2608:	21 70       	andi	r18, 0x01	; 1
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	22 0f       	add	r18, r18
    260e:	33 1f       	adc	r19, r19
    2610:	48 2f       	mov	r20, r24
    2612:	46 70       	andi	r20, 0x06	; 6
    2614:	68 e0       	ldi	r22, 0x08	; 8
    2616:	46 9f       	mul	r20, r22
    2618:	a0 01       	movw	r20, r0
    261a:	11 24       	eor	r1, r1
    261c:	24 2b       	or	r18, r20
    261e:	9d 7c       	andi	r25, 0xCD	; 205
    2620:	29 2b       	or	r18, r25
    2622:	25 b9       	out	0x05, r18	; 5
    2624:	9b b1       	in	r25, 0x0b	; 11
    2626:	88 70       	andi	r24, 0x08	; 8
    2628:	82 95       	swap	r24
    262a:	80 7f       	andi	r24, 0xF0	; 240
    262c:	9f 77       	andi	r25, 0x7F	; 127
    262e:	89 2b       	or	r24, r25
    2630:	8b b9       	out	0x0b, r24	; 11
    2632:	5c 9a       	sbi	0x0b, 4	; 11
    2634:	0e 94 c8 12 	call	0x2590	; 0x2590 <delay_us.constprop.0>
    2638:	5c 98       	cbi	0x0b, 4	; 11
    263a:	0e 94 c8 12 	call	0x2590	; 0x2590 <delay_us.constprop.0>
    263e:	08 95       	ret

00002640 <_ZN12OrangutanLCD4sendEhhh>:
    2640:	a0 e0       	ldi	r26, 0x00	; 0
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e6 e2       	ldi	r30, 0x26	; 38
    2646:	f3 e1       	ldi	r31, 0x13	; 19
    2648:	0c 94 64 1d 	jmp	0x3ac8	; 0x3ac8 <__prologue_saves__+0x16>
    264c:	c8 2f       	mov	r28, r24
    264e:	d6 2e       	mov	r13, r22
    2650:	e4 2e       	mov	r14, r20
    2652:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    2656:	81 11       	cpse	r24, r1
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <_ZN12OrangutanLCD4sendEhhh+0x24>
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    2660:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZN12OrangutanLCD5init2Ev>
    2664:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <_ZN12OrangutanLCD8busyWaitEv>
    2668:	14 b1       	in	r17, 0x04	; 4
    266a:	d5 b1       	in	r29, 0x05	; 5
    266c:	fa b0       	in	r15, 0x0a	; 10
    266e:	0b b1       	in	r16, 0x0b	; 11
    2670:	28 98       	cbi	0x05, 0	; 5
    2672:	dd 20       	and	r13, r13
    2674:	11 f0       	breq	.+4      	; 0x267a <_ZN12OrangutanLCD4sendEhhh+0x3a>
    2676:	5a 9a       	sbi	0x0b, 2	; 11
    2678:	01 c0       	rjmp	.+2      	; 0x267c <_ZN12OrangutanLCD4sendEhhh+0x3c>
    267a:	5a 98       	cbi	0x0b, 2	; 11
    267c:	94 b1       	in	r25, 0x04	; 4
    267e:	92 63       	ori	r25, 0x32	; 50
    2680:	94 b9       	out	0x04, r25	; 4
    2682:	57 9a       	sbi	0x0a, 7	; 10
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	e8 16       	cp	r14, r24
    2688:	29 f0       	breq	.+10     	; 0x2694 <_ZN12OrangutanLCD4sendEhhh+0x54>
    268a:	8c 2f       	mov	r24, r28
    268c:	82 95       	swap	r24
    268e:	8f 70       	andi	r24, 0x0F	; 15
    2690:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN12OrangutanLCD8sendDataEh>
    2694:	8c 2f       	mov	r24, r28
    2696:	8f 70       	andi	r24, 0x0F	; 15
    2698:	0e 94 02 13 	call	0x2604	; 0x2604 <_ZN12OrangutanLCD8sendDataEh>
    269c:	fa b8       	out	0x0a, r15	; 10
    269e:	0b b9       	out	0x0b, r16	; 11
    26a0:	14 b9       	out	0x04, r17	; 4
    26a2:	d5 b9       	out	0x05, r29	; 5
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	e7 e0       	ldi	r30, 0x07	; 7
    26aa:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__epilogue_restores__+0x16>

000026ae <_ZN12OrangutanLCD8send_cmdEh>:
    26ae:	42 e0       	ldi	r20, 0x02	; 2
    26b0:	60 e0       	ldi	r22, 0x00	; 0
    26b2:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN12OrangutanLCD4sendEhhh>
    26b6:	08 95       	ret

000026b8 <_ZN12OrangutanLCD9send_dataEh>:
    26b8:	42 e0       	ldi	r20, 0x02	; 2
    26ba:	61 e0       	ldi	r22, 0x01	; 1
    26bc:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN12OrangutanLCD4sendEhhh>
    26c0:	08 95       	ret

000026c2 <print_character>:
    26c2:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN12OrangutanLCD9send_dataEh>
    26c6:	08 95       	ret

000026c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN12OrangutanLCD4sendEhhh>
    26d0:	08 95       	ret

000026d2 <_ZN12OrangutanLCD5init2Ev>:
    26d2:	80 e1       	ldi	r24, 0x10	; 16
    26d4:	97 e2       	ldi	r25, 0x27	; 39
    26d6:	a0 e0       	ldi	r26, 0x00	; 0
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <lcdTimeout>
    26de:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <lcdTimeout+0x1>
    26e2:	a0 93 97 01 	sts	0x0197, r26	; 0x800197 <lcdTimeout+0x2>
    26e6:	b0 93 98 01 	sts	0x0198, r27	; 0x800198 <lcdTimeout+0x3>
    26ea:	52 9a       	sbi	0x0a, 2	; 10
    26ec:	20 9a       	sbi	0x04, 0	; 4
    26ee:	54 9a       	sbi	0x0a, 4	; 10
    26f0:	8e e1       	ldi	r24, 0x1E	; 30
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
    26f8:	83 e0       	ldi	r24, 0x03	; 3
    26fa:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    26fe:	86 e0       	ldi	r24, 0x06	; 6
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
    2714:	83 e0       	ldi	r24, 0x03	; 3
    2716:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	0e 94 64 13 	call	0x26c8	; 0x26c8 <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
    2730:	88 e2       	ldi	r24, 0x28	; 40
    2732:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN12OrangutanLCD8send_cmdEh>
    2736:	88 e0       	ldi	r24, 0x08	; 8
    2738:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN12OrangutanLCD8send_cmdEh>
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN12OrangutanLCD8send_cmdEh>
    2742:	86 e0       	ldi	r24, 0x06	; 6
    2744:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN12OrangutanLCD8send_cmdEh>
    2748:	8c e0       	ldi	r24, 0x0C	; 12
    274a:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN12OrangutanLCD8send_cmdEh>
    274e:	08 95       	ret

00002750 <_ZN12OrangutanLCD5clearEv>:
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN12OrangutanLCD8send_cmdEh>
    2756:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <printf_chars>
    275a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <printf_chars+0x1>
    275e:	89 2b       	or	r24, r25
    2760:	f9 f0       	breq	.+62     	; 0x27a0 <_ZN12OrangutanLCD5clearEv+0x50>
    2762:	60 e0       	ldi	r22, 0x00	; 0
    2764:	a0 e2       	ldi	r26, 0x20	; 32
    2766:	26 2f       	mov	r18, r22
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    276e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	78 9f       	mul	r23, r24
    2778:	a0 01       	movw	r20, r0
    277a:	79 9f       	mul	r23, r25
    277c:	50 0d       	add	r21, r0
    277e:	11 24       	eor	r1, r1
    2780:	24 17       	cp	r18, r20
    2782:	35 07       	cpc	r19, r21
    2784:	4c f4       	brge	.+18     	; 0x2798 <_ZN12OrangutanLCD5clearEv+0x48>
    2786:	e0 91 9b 01 	lds	r30, 0x019B	; 0x80019b <printf_chars>
    278a:	f0 91 9c 01 	lds	r31, 0x019C	; 0x80019c <printf_chars+0x1>
    278e:	e2 0f       	add	r30, r18
    2790:	f3 1f       	adc	r31, r19
    2792:	a0 83       	st	Z, r26
    2794:	6f 5f       	subi	r22, 0xFF	; 255
    2796:	e7 cf       	rjmp	.-50     	; 0x2766 <_ZN12OrangutanLCD5clearEv+0x16>
    2798:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <col>
    279c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <row>
    27a0:	08 95       	ret

000027a2 <clear>:
    27a2:	0e 94 a8 13 	call	0x2750	; 0x2750 <_ZN12OrangutanLCD5clearEv>
    27a6:	08 95       	ret

000027a8 <_ZN12OrangutanLCD5printEPKc>:
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	ec 01       	movw	r28, r24
    27ae:	89 91       	ld	r24, Y+
    27b0:	88 23       	and	r24, r24
    27b2:	19 f0       	breq	.+6      	; 0x27ba <_ZN12OrangutanLCD5printEPKc+0x12>
    27b4:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN12OrangutanLCD9send_dataEh>
    27b8:	fa cf       	rjmp	.-12     	; 0x27ae <_ZN12OrangutanLCD5printEPKc+0x6>
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	08 95       	ret

000027c0 <print>:
    27c0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <_ZN12OrangutanLCD5printEPKc>
    27c4:	08 95       	ret

000027c6 <_ZN12OrangutanLCD5printEm>:
    27c6:	aa e0       	ldi	r26, 0x0A	; 10
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e9 ee       	ldi	r30, 0xE9	; 233
    27cc:	f3 e1       	ldi	r31, 0x13	; 19
    27ce:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__prologue_saves__+0x14>
    27d2:	1a e0       	ldi	r17, 0x0A	; 10
    27d4:	5a e0       	ldi	r21, 0x0A	; 10
    27d6:	c5 2e       	mov	r12, r21
    27d8:	d1 2c       	mov	r13, r1
    27da:	e1 2c       	mov	r14, r1
    27dc:	f1 2c       	mov	r15, r1
    27de:	06 2f       	mov	r16, r22
    27e0:	a7 01       	movw	r20, r14
    27e2:	96 01       	movw	r18, r12
    27e4:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    27e8:	ca 01       	movw	r24, r20
    27ea:	b9 01       	movw	r22, r18
    27ec:	11 50       	subi	r17, 0x01	; 1
    27ee:	e1 e0       	ldi	r30, 0x01	; 1
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	ec 0f       	add	r30, r28
    27f4:	fd 1f       	adc	r31, r29
    27f6:	e1 0f       	add	r30, r17
    27f8:	f1 1d       	adc	r31, r1
    27fa:	00 5d       	subi	r16, 0xD0	; 208
    27fc:	2a e0       	ldi	r18, 0x0A	; 10
    27fe:	62 9f       	mul	r22, r18
    2800:	00 19       	sub	r16, r0
    2802:	11 24       	eor	r1, r1
    2804:	00 83       	st	Z, r16
    2806:	61 15       	cp	r22, r1
    2808:	71 05       	cpc	r23, r1
    280a:	81 05       	cpc	r24, r1
    280c:	91 05       	cpc	r25, r1
    280e:	39 f7       	brne	.-50     	; 0x27de <_ZN12OrangutanLCD5printEm+0x18>
    2810:	1a 30       	cpi	r17, 0x0A	; 10
    2812:	58 f4       	brcc	.+22     	; 0x282a <_ZN12OrangutanLCD5printEm+0x64>
    2814:	e1 e0       	ldi	r30, 0x01	; 1
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	ec 0f       	add	r30, r28
    281a:	fd 1f       	adc	r31, r29
    281c:	e1 0f       	add	r30, r17
    281e:	f1 1d       	adc	r31, r1
    2820:	80 81       	ld	r24, Z
    2822:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN12OrangutanLCD9send_dataEh>
    2826:	1f 5f       	subi	r17, 0xFF	; 255
    2828:	f3 cf       	rjmp	.-26     	; 0x2810 <_ZN12OrangutanLCD5printEm+0x4a>
    282a:	2a 96       	adiw	r28, 0x0a	; 10
    282c:	e8 e0       	ldi	r30, 0x08	; 8
    282e:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <__epilogue_restores__+0x14>

00002832 <_ZN12OrangutanLCD5printEl>:
    2832:	cf 92       	push	r12
    2834:	df 92       	push	r13
    2836:	ef 92       	push	r14
    2838:	ff 92       	push	r15
    283a:	6b 01       	movw	r12, r22
    283c:	7c 01       	movw	r14, r24
    283e:	97 ff       	sbrs	r25, 7
    2840:	0b c0       	rjmp	.+22     	; 0x2858 <_ZN12OrangutanLCD5printEl+0x26>
    2842:	f0 94       	com	r15
    2844:	e0 94       	com	r14
    2846:	d0 94       	com	r13
    2848:	c0 94       	com	r12
    284a:	c1 1c       	adc	r12, r1
    284c:	d1 1c       	adc	r13, r1
    284e:	e1 1c       	adc	r14, r1
    2850:	f1 1c       	adc	r15, r1
    2852:	8d e2       	ldi	r24, 0x2D	; 45
    2854:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN12OrangutanLCD9send_dataEh>
    2858:	c7 01       	movw	r24, r14
    285a:	b6 01       	movw	r22, r12
    285c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <_ZN12OrangutanLCD5printEm>
    2860:	ff 90       	pop	r15
    2862:	ef 90       	pop	r14
    2864:	df 90       	pop	r13
    2866:	cf 90       	pop	r12
    2868:	08 95       	ret

0000286a <print_long>:
    286a:	0e 94 19 14 	call	0x2832	; 0x2832 <_ZN12OrangutanLCD5printEl>
    286e:	08 95       	ret

00002870 <_ZN12OrangutanLCD6gotoXYEhh>:
    2870:	a5 e0       	ldi	r26, 0x05	; 5
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	ee e3       	ldi	r30, 0x3E	; 62
    2876:	f4 e1       	ldi	r31, 0x14	; 20
    2878:	0c 94 68 1d 	jmp	0x3ad0	; 0x3ad0 <__prologue_saves__+0x1e>
    287c:	18 2f       	mov	r17, r24
    287e:	80 e8       	ldi	r24, 0x80	; 128
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	80 ec       	ldi	r24, 0xC0	; 192
    2884:	8a 83       	std	Y+2, r24	; 0x02
    2886:	84 e9       	ldi	r24, 0x94	; 148
    2888:	8b 83       	std	Y+3, r24	; 0x03
    288a:	84 ed       	ldi	r24, 0xD4	; 212
    288c:	8c 83       	std	Y+4, r24	; 0x04
    288e:	fe 01       	movw	r30, r28
    2890:	e6 0f       	add	r30, r22
    2892:	f1 1d       	adc	r31, r1
    2894:	81 81       	ldd	r24, Z+1	; 0x01
    2896:	81 0f       	add	r24, r17
    2898:	6d 83       	std	Y+5, r22	; 0x05
    289a:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN12OrangutanLCD8send_cmdEh>
    289e:	10 93 99 01 	sts	0x0199, r17	; 0x800199 <col>
    28a2:	6d 81       	ldd	r22, Y+5	; 0x05
    28a4:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <row>
    28a8:	25 96       	adiw	r28, 0x05	; 5
    28aa:	e3 e0       	ldi	r30, 0x03	; 3
    28ac:	0c 94 84 1d 	jmp	0x3b08	; 0x3b08 <__epilogue_restores__+0x1e>

000028b0 <lcd_goto_xy>:
    28b0:	0e 94 38 14 	call	0x2870	; 0x2870 <_ZN12OrangutanLCD6gotoXYEhh>
    28b4:	08 95       	ret

000028b6 <_ZN16OrangutanDigital9setOutputEhh>:
    28b6:	88 30       	cpi	r24, 0x08	; 8
    28b8:	58 f4       	brcc	.+22     	; 0x28d0 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	01 c0       	rjmp	.+2      	; 0x28c0 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    28be:	99 0f       	add	r25, r25
    28c0:	8a 95       	dec	r24
    28c2:	ea f7       	brpl	.-6      	; 0x28be <_ZN16OrangutanDigital9setOutputEhh+0x8>
    28c4:	89 2f       	mov	r24, r25
    28c6:	aa e2       	ldi	r26, 0x2A	; 42
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	eb e2       	ldi	r30, 0x2B	; 43
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	21 c0       	rjmp	.+66     	; 0x2912 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    28d0:	8e 30       	cpi	r24, 0x0E	; 14
    28d2:	60 f4       	brcc	.+24     	; 0x28ec <_ZN16OrangutanDigital9setOutputEhh+0x36>
    28d4:	98 ef       	ldi	r25, 0xF8	; 248
    28d6:	98 0f       	add	r25, r24
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	01 c0       	rjmp	.+2      	; 0x28de <_ZN16OrangutanDigital9setOutputEhh+0x28>
    28dc:	88 0f       	add	r24, r24
    28de:	9a 95       	dec	r25
    28e0:	ea f7       	brpl	.-6      	; 0x28dc <_ZN16OrangutanDigital9setOutputEhh+0x26>
    28e2:	a4 e2       	ldi	r26, 0x24	; 36
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	e5 e2       	ldi	r30, 0x25	; 37
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	13 c0       	rjmp	.+38     	; 0x2912 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    28ec:	85 31       	cpi	r24, 0x15	; 21
    28ee:	60 f4       	brcc	.+24     	; 0x2908 <_ZN16OrangutanDigital9setOutputEhh+0x52>
    28f0:	92 ef       	ldi	r25, 0xF2	; 242
    28f2:	98 0f       	add	r25, r24
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	01 c0       	rjmp	.+2      	; 0x28fa <_ZN16OrangutanDigital9setOutputEhh+0x44>
    28f8:	88 0f       	add	r24, r24
    28fa:	9a 95       	dec	r25
    28fc:	ea f7       	brpl	.-6      	; 0x28f8 <_ZN16OrangutanDigital9setOutputEhh+0x42>
    28fe:	a7 e2       	ldi	r26, 0x27	; 39
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e8 e2       	ldi	r30, 0x28	; 40
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	05 c0       	rjmp	.+10     	; 0x2912 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	a0 e0       	ldi	r26, 0x00	; 0
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e0 e0       	ldi	r30, 0x00	; 0
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	6f 3f       	cpi	r22, 0xFF	; 255
    2914:	19 f4       	brne	.+6      	; 0x291c <_ZN16OrangutanDigital9setOutputEhh+0x66>
    2916:	90 81       	ld	r25, Z
    2918:	98 27       	eor	r25, r24
    291a:	09 c0       	rjmp	.+18     	; 0x292e <_ZN16OrangutanDigital9setOutputEhh+0x78>
    291c:	66 23       	and	r22, r22
    291e:	19 f0       	breq	.+6      	; 0x2926 <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2920:	90 81       	ld	r25, Z
    2922:	98 2b       	or	r25, r24
    2924:	04 c0       	rjmp	.+8      	; 0x292e <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2926:	20 81       	ld	r18, Z
    2928:	98 2f       	mov	r25, r24
    292a:	90 95       	com	r25
    292c:	92 23       	and	r25, r18
    292e:	90 83       	st	Z, r25
    2930:	9c 91       	ld	r25, X
    2932:	98 2b       	or	r25, r24
    2934:	9c 93       	st	X, r25
    2936:	08 95       	ret

00002938 <_ZN15OrangutanMotors5init2Ev>:
    2938:	83 ef       	ldi	r24, 0xF3	; 243
    293a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    293e:	84 bd       	out	0x24, r24	; 36
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2946:	85 bd       	out	0x25, r24	; 37
    2948:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    294c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2950:	18 bc       	out	0x28, r1	; 40
    2952:	17 bc       	out	0x27, r1	; 39
    2954:	60 e0       	ldi	r22, 0x00	; 0
    2956:	86 e0       	ldi	r24, 0x06	; 6
    2958:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN16OrangutanDigital9setOutputEhh>
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	85 e0       	ldi	r24, 0x05	; 5
    2960:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN16OrangutanDigital9setOutputEhh>
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	8b e0       	ldi	r24, 0x0B	; 11
    2968:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN16OrangutanDigital9setOutputEhh>
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	83 e0       	ldi	r24, 0x03	; 3
    2970:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <_ZN16OrangutanDigital9setOutputEhh>
    2974:	08 95       	ret

00002976 <_ZN15OrangutanMotors4initEv>:
    2976:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    297a:	81 11       	cpse	r24, r1
    297c:	05 c0       	rjmp	.+10     	; 0x2988 <_ZN15OrangutanMotors4initEv+0x12>
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    2984:	0e 94 9c 14 	call	0x2938	; 0x2938 <_ZN15OrangutanMotors5init2Ev>
    2988:	08 95       	ret

0000298a <_ZN15OrangutanMotors10setM1SpeedEi>:
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	ec 01       	movw	r28, r24
    2990:	0e 94 bb 14 	call	0x2976	; 0x2976 <_ZN15OrangutanMotors4initEv>
    2994:	d7 ff       	sbrs	r29, 7
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    2998:	d1 95       	neg	r29
    299a:	c1 95       	neg	r28
    299c:	d1 09       	sbc	r29, r1
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	cf 3f       	cpi	r28, 0xFF	; 255
    29a6:	d1 05       	cpc	r29, r1
    29a8:	19 f0       	breq	.+6      	; 0x29b0 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    29aa:	14 f0       	brlt	.+4      	; 0x29b0 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    29ac:	cf ef       	ldi	r28, 0xFF	; 255
    29ae:	d0 e0       	ldi	r29, 0x00	; 0
    29b0:	88 23       	and	r24, r24
    29b2:	19 f0       	breq	.+6      	; 0x29ba <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    29b4:	18 bc       	out	0x28, r1	; 40
    29b6:	c7 bd       	out	0x27, r28	; 39
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    29ba:	c8 bd       	out	0x28, r28	; 40
    29bc:	17 bc       	out	0x27, r1	; 39
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <_ZN15OrangutanMotors10setM2SpeedEi>:
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	ec 01       	movw	r28, r24
    29ca:	0e 94 bb 14 	call	0x2976	; 0x2976 <_ZN15OrangutanMotors4initEv>
    29ce:	d7 ff       	sbrs	r29, 7
    29d0:	05 c0       	rjmp	.+10     	; 0x29dc <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    29d2:	d1 95       	neg	r29
    29d4:	c1 95       	neg	r28
    29d6:	d1 09       	sbc	r29, r1
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	01 c0       	rjmp	.+2      	; 0x29de <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	cf 3f       	cpi	r28, 0xFF	; 255
    29e0:	d1 05       	cpc	r29, r1
    29e2:	19 f0       	breq	.+6      	; 0x29ea <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    29e4:	14 f0       	brlt	.+4      	; 0x29ea <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    29e6:	cf ef       	ldi	r28, 0xFF	; 255
    29e8:	d0 e0       	ldi	r29, 0x00	; 0
    29ea:	88 23       	and	r24, r24
    29ec:	29 f0       	breq	.+10     	; 0x29f8 <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    29ee:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    29f2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    29f6:	04 c0       	rjmp	.+8      	; 0x2a00 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    29f8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    29fc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	08 95       	ret

00002a06 <_ZN15OrangutanMotors9setSpeedsEii>:
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
    2a0a:	eb 01       	movw	r28, r22
    2a0c:	0e 94 c5 14 	call	0x298a	; 0x298a <_ZN15OrangutanMotors10setM1SpeedEi>
    2a10:	ce 01       	movw	r24, r28
    2a12:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN15OrangutanMotors10setM2SpeedEi>
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	08 95       	ret

00002a1c <set_motors>:
    2a1c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <_ZN15OrangutanMotors9setSpeedsEii>
    2a20:	08 95       	ret

00002a22 <_ZN20OrangutanPushbuttons5init2Ev>:
    2a22:	84 b1       	in	r24, 0x04	; 4
    2a24:	8d 7c       	andi	r24, 0xCD	; 205
    2a26:	84 b9       	out	0x04, r24	; 4
    2a28:	85 b1       	in	r24, 0x05	; 5
    2a2a:	82 63       	ori	r24, 0x32	; 50
    2a2c:	85 b9       	out	0x05, r24	; 5
    2a2e:	85 e0       	ldi	r24, 0x05	; 5
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	6f 93       	push	r22
    2a34:	64 e0       	ldi	r22, 0x04	; 4
    2a36:	6a 95       	dec	r22
    2a38:	f1 f7       	brne	.-4      	; 0x2a36 <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2a3a:	6f 91       	pop	r22
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	c9 f7       	brne	.-14     	; 0x2a32 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2a40:	08 95       	ret

00002a42 <_ZN20OrangutanPushbuttons4initEv>:
    2a42:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2a46:	81 11       	cpse	r24, r1
    2a48:	05 c0       	rjmp	.+10     	; 0x2a54 <_ZN20OrangutanPushbuttons4initEv+0x12>
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2a50:	0e 94 11 15 	call	0x2a22	; 0x2a22 <_ZN20OrangutanPushbuttons5init2Ev>
    2a54:	08 95       	ret

00002a56 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    2a56:	cf 93       	push	r28
    2a58:	c8 2f       	mov	r28, r24
    2a5a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <_ZN20OrangutanPushbuttons4initEv>
    2a5e:	83 b1       	in	r24, 0x03	; 3
    2a60:	8c 23       	and	r24, r28
    2a62:	e9 f3       	breq	.-6      	; 0x2a5e <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2a64:	8a e0       	ldi	r24, 0x0A	; 10
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <delay_ms>
    2a6c:	83 b1       	in	r24, 0x03	; 3
    2a6e:	8c 23       	and	r24, r28
    2a70:	b1 f3       	breq	.-20     	; 0x2a5e <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2a72:	83 b1       	in	r24, 0x03	; 3
    2a74:	8c 23       	and	r24, r28
    2a76:	cf 91       	pop	r28
    2a78:	08 95       	ret

00002a7a <wait_for_button_release>:
    2a7a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2a7e:	08 95       	ret

00002a80 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2a80:	a1 e0       	ldi	r26, 0x01	; 1
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e6 e4       	ldi	r30, 0x46	; 70
    2a86:	f5 e1       	ldi	r31, 0x15	; 21
    2a88:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__prologue_saves__+0x20>
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <_ZN20OrangutanPushbuttons4initEv>
    2a92:	93 b1       	in	r25, 0x03	; 3
    2a94:	90 95       	com	r25
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	89 23       	and	r24, r25
    2a9a:	21 96       	adiw	r28, 0x01	; 1
    2a9c:	e2 e0       	ldi	r30, 0x02	; 2
    2a9e:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__epilogue_restores__+0x20>

00002aa2 <button_is_pressed>:
    2aa2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <_ZN20OrangutanPushbuttons9isPressedEh>
    2aa6:	08 95       	ret

00002aa8 <serial_receive_buffer_full>:
    2aa8:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <_ZN15OrangutanSerial5portsE+0x2>
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <_ZN15OrangutanSerial5portsE+0x4>
    2ab2:	29 13       	cpse	r18, r25
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	08 95       	ret

00002ab8 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	9a e0       	ldi	r25, 0x0A	; 10
    2abe:	89 9f       	mul	r24, r25
    2ac0:	f0 01       	movw	r30, r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	e3 56       	subi	r30, 0x63	; 99
    2ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac8:	80 85       	ldd	r24, Z+8	; 0x08
    2aca:	91 85       	ldd	r25, Z+9	; 0x09
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	21 f0       	breq	.+8      	; 0x2ad8 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2ad0:	52 81       	ldd	r21, Z+2	; 0x02
    2ad2:	44 81       	ldd	r20, Z+4	; 0x04
    2ad4:	54 17       	cp	r21, r20
    2ad6:	80 f0       	brcs	.+32     	; 0x2af8 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    2ad8:	8a e0       	ldi	r24, 0x0A	; 10
    2ada:	82 9f       	mul	r24, r18
    2adc:	f0 01       	movw	r30, r0
    2ade:	83 9f       	mul	r24, r19
    2ae0:	f0 0d       	add	r31, r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	e3 56       	subi	r30, 0x63	; 99
    2ae6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae8:	92 81       	ldd	r25, Z+2	; 0x02
    2aea:	84 81       	ldd	r24, Z+4	; 0x04
    2aec:	98 13       	cpse	r25, r24
    2aee:	0e c0       	rjmp	.+28     	; 0x2b0c <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    2af0:	85 81       	ldd	r24, Z+5	; 0x05
    2af2:	81 11       	cpse	r24, r1
    2af4:	0a c0       	rjmp	.+20     	; 0x2b0a <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    2af6:	08 95       	ret
    2af8:	42 81       	ldd	r20, Z+2	; 0x02
    2afa:	dc 01       	movw	r26, r24
    2afc:	a4 0f       	add	r26, r20
    2afe:	b1 1d       	adc	r27, r1
    2b00:	6c 93       	st	X, r22
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	82 83       	std	Z+2, r24	; 0x02
    2b08:	e7 cf       	rjmp	.-50     	; 0x2ad8 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2b0a:	12 82       	std	Z+2, r1	; 0x02
    2b0c:	08 95       	ret

00002b0e <_ZN15OrangutanSerial15serial_rx_checkEh>:
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b16:	9f 77       	andi	r25, 0x7F	; 127
    2b18:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b1c:	c8 2f       	mov	r28, r24
    2b1e:	d0 e0       	ldi	r29, 0x00	; 0
    2b20:	9a e0       	ldi	r25, 0x0A	; 10
    2b22:	89 9f       	mul	r24, r25
    2b24:	f0 01       	movw	r30, r0
    2b26:	11 24       	eor	r1, r1
    2b28:	e3 56       	subi	r30, 0x63	; 99
    2b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2c:	20 85       	ldd	r18, Z+8	; 0x08
    2b2e:	31 85       	ldd	r19, Z+9	; 0x09
    2b30:	23 2b       	or	r18, r19
    2b32:	41 f0       	breq	.+16     	; 0x2b44 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2b34:	22 81       	ldd	r18, Z+2	; 0x02
    2b36:	94 81       	ldd	r25, Z+4	; 0x04
    2b38:	29 17       	cp	r18, r25
    2b3a:	20 f4       	brcc	.+8      	; 0x2b44 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2b3c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2b40:	97 fd       	sbrc	r25, 7
    2b42:	11 c0       	rjmp	.+34     	; 0x2b66 <_ZN15OrangutanSerial15serial_rx_checkEh+0x58>
    2b44:	8a e0       	ldi	r24, 0x0A	; 10
    2b46:	8c 9f       	mul	r24, r28
    2b48:	f0 01       	movw	r30, r0
    2b4a:	8d 9f       	mul	r24, r29
    2b4c:	f0 0d       	add	r31, r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	e3 56       	subi	r30, 0x63	; 99
    2b52:	fe 4f       	sbci	r31, 0xFE	; 254
    2b54:	80 81       	ld	r24, Z
    2b56:	81 11       	cpse	r24, r1
    2b58:	0b c0       	rjmp	.+22     	; 0x2b70 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2b5a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b5e:	80 68       	ori	r24, 0x80	; 128
    2b60:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b64:	05 c0       	rjmp	.+10     	; 0x2b70 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2b66:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2b6a:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2b6e:	ea cf       	rjmp	.-44     	; 0x2b44 <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	08 95       	ret

00002b76 <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    2b76:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b7a:	9f 77       	andi	r25, 0x7F	; 127
    2b7c:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2b80:	9a e0       	ldi	r25, 0x0A	; 10
    2b82:	89 9f       	mul	r24, r25
    2b84:	f0 01       	movw	r30, r0
    2b86:	11 24       	eor	r1, r1
    2b88:	e3 56       	subi	r30, 0x63	; 99
    2b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8c:	71 87       	std	Z+9, r23	; 0x09
    2b8e:	60 87       	std	Z+8, r22	; 0x08
    2b90:	12 82       	std	Z+2, r1	; 0x02
    2b92:	44 83       	std	Z+4, r20	; 0x04
    2b94:	25 83       	std	Z+5, r18	; 0x05
    2b96:	80 81       	ld	r24, Z
    2b98:	81 11       	cpse	r24, r1
    2b9a:	05 c0       	rjmp	.+10     	; 0x2ba6 <_ZN15OrangutanSerial14receive_inlineEhPchh+0x30>
    2b9c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ba0:	80 68       	ori	r24, 0x80	; 128
    2ba2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2ba6:	08 95       	ret

00002ba8 <_ZN15OrangutanSerial7receiveEPch>:
    2ba8:	46 2f       	mov	r20, r22
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	bc 01       	movw	r22, r24
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <_ZN15OrangutanSerial14receive_inlineEhPchh>
    2bb4:	08 95       	ret

00002bb6 <serial_receive>:
    2bb6:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <_ZN15OrangutanSerial7receiveEPch>
    2bba:	08 95       	ret

00002bbc <__vector_18>:
    2bbc:	1f 92       	push	r1
    2bbe:	0f 92       	push	r0
    2bc0:	0f b6       	in	r0, 0x3f	; 63
    2bc2:	0f 92       	push	r0
    2bc4:	11 24       	eor	r1, r1
    2bc6:	2f 93       	push	r18
    2bc8:	3f 93       	push	r19
    2bca:	4f 93       	push	r20
    2bcc:	5f 93       	push	r21
    2bce:	6f 93       	push	r22
    2bd0:	7f 93       	push	r23
    2bd2:	8f 93       	push	r24
    2bd4:	9f 93       	push	r25
    2bd6:	af 93       	push	r26
    2bd8:	bf 93       	push	r27
    2bda:	ef 93       	push	r30
    2bdc:	ff 93       	push	r31
    2bde:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2be8:	ff 91       	pop	r31
    2bea:	ef 91       	pop	r30
    2bec:	bf 91       	pop	r27
    2bee:	af 91       	pop	r26
    2bf0:	9f 91       	pop	r25
    2bf2:	8f 91       	pop	r24
    2bf4:	7f 91       	pop	r23
    2bf6:	6f 91       	pop	r22
    2bf8:	5f 91       	pop	r21
    2bfa:	4f 91       	pop	r20
    2bfc:	3f 91       	pop	r19
    2bfe:	2f 91       	pop	r18
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	0f 90       	pop	r0
    2c06:	1f 90       	pop	r1
    2c08:	18 95       	reti

00002c0a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2c0a:	9a e0       	ldi	r25, 0x0A	; 10
    2c0c:	89 9f       	mul	r24, r25
    2c0e:	f0 01       	movw	r30, r0
    2c10:	11 24       	eor	r1, r1
    2c12:	e3 56       	subi	r30, 0x63	; 99
    2c14:	fe 4f       	sbci	r31, 0xFE	; 254
    2c16:	86 81       	ldd	r24, Z+6	; 0x06
    2c18:	97 81       	ldd	r25, Z+7	; 0x07
    2c1a:	89 2b       	or	r24, r25
    2c1c:	59 f0       	breq	.+22     	; 0x2c34 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2c1e:	91 81       	ldd	r25, Z+1	; 0x01
    2c20:	83 81       	ldd	r24, Z+3	; 0x03
    2c22:	98 17       	cp	r25, r24
    2c24:	38 f4       	brcc	.+14     	; 0x2c34 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2c26:	80 81       	ld	r24, Z
    2c28:	81 11       	cpse	r24, r1
    2c2a:	04 c0       	rjmp	.+8      	; 0x2c34 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2c2c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c30:	80 62       	ori	r24, 0x20	; 32
    2c32:	03 c0       	rjmp	.+6      	; 0x2c3a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    2c34:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c38:	8f 7d       	andi	r24, 0xDF	; 223
    2c3a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c3e:	08 95       	ret

00002c40 <_ZN15OrangutanSerial15initUART_inlineEh>:
    2c40:	9a e0       	ldi	r25, 0x0A	; 10
    2c42:	89 9f       	mul	r24, r25
    2c44:	f0 01       	movw	r30, r0
    2c46:	11 24       	eor	r1, r1
    2c48:	e3 56       	subi	r30, 0x63	; 99
    2c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4c:	90 81       	ld	r25, Z
    2c4e:	91 11       	cpse	r25, r1
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2c52:	98 e9       	ldi	r25, 0x98	; 152
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    2c56:	98 e1       	ldi	r25, 0x18	; 24
    2c58:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2c5c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2c60:	78 94       	sei
    2c62:	08 95       	ret

00002c64 <serial_set_baud_rate>:
    2c64:	cf 92       	push	r12
    2c66:	df 92       	push	r13
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	6b 01       	movw	r12, r22
    2c6e:	7c 01       	movw	r14, r24
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	0e 94 20 16 	call	0x2c40	; 0x2c40 <_ZN15OrangutanSerial15initUART_inlineEh>
    2c76:	a8 ef       	ldi	r26, 0xF8	; 248
    2c78:	bf ef       	ldi	r27, 0xFF	; 255
    2c7a:	a7 01       	movw	r20, r14
    2c7c:	96 01       	movw	r18, r12
    2c7e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__mulohisi3>
    2c82:	73 5d       	subi	r23, 0xD3	; 211
    2c84:	8e 4c       	sbci	r24, 0xCE	; 206
    2c86:	9e 4f       	sbci	r25, 0xFE	; 254
    2c88:	e4 e0       	ldi	r30, 0x04	; 4
    2c8a:	22 0f       	add	r18, r18
    2c8c:	33 1f       	adc	r19, r19
    2c8e:	44 1f       	adc	r20, r20
    2c90:	55 1f       	adc	r21, r21
    2c92:	ea 95       	dec	r30
    2c94:	d1 f7       	brne	.-12     	; 0x2c8a <serial_set_baud_rate+0x26>
    2c96:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    2c9a:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    2c9e:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	08 95       	ret

00002cac <_ZN15OrangutanSerial4sendEPch>:
    2cac:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_ZN15OrangutanSerial5portsE+0x7>
    2cb0:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZN15OrangutanSerial5portsE+0x6>
    2cb4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2cb8:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2cc2:	08 95       	ret

00002cc4 <serial_send>:
    2cc4:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZN15OrangutanSerial4sendEPch>
    2cc8:	08 95       	ret

00002cca <_ZN15OrangutanSerial11uart_tx_isrEh>:
    2cca:	9a e0       	ldi	r25, 0x0A	; 10
    2ccc:	89 9f       	mul	r24, r25
    2cce:	f0 01       	movw	r30, r0
    2cd0:	11 24       	eor	r1, r1
    2cd2:	e3 56       	subi	r30, 0x63	; 99
    2cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd6:	26 81       	ldd	r18, Z+6	; 0x06
    2cd8:	37 81       	ldd	r19, Z+7	; 0x07
    2cda:	21 15       	cp	r18, r1
    2cdc:	31 05       	cpc	r19, r1
    2cde:	41 f0       	breq	.+16     	; 0x2cf0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2ce0:	41 81       	ldd	r20, Z+1	; 0x01
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	49 17       	cp	r20, r25
    2ce6:	20 f4       	brcc	.+8      	; 0x2cf0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    2ce8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2cec:	95 fd       	sbrc	r25, 5
    2cee:	03 c0       	rjmp	.+6      	; 0x2cf6 <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    2cf0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2cf4:	08 95       	ret
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	d9 01       	movw	r26, r18
    2cfa:	a9 0f       	add	r26, r25
    2cfc:	b1 1d       	adc	r27, r1
    2cfe:	9c 91       	ld	r25, X
    2d00:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2d04:	91 81       	ldd	r25, Z+1	; 0x01
    2d06:	9f 5f       	subi	r25, 0xFF	; 255
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	f2 cf       	rjmp	.-28     	; 0x2cf0 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

00002d0c <_ZN15OrangutanSerial5checkEv>:
    2d0c:	e1 ec       	ldi	r30, 0xC1	; 193
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	8f 7d       	andi	r24, 0xDF	; 223
    2d14:	80 83       	st	Z, r24
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN15OrangutanSerial11uart_tx_isrEh>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <_ZN15OrangutanSerial15serial_rx_checkEh>
    2d22:	08 95       	ret

00002d24 <_ZN15OrangutanSerial12sendBlockingEPch>:
    2d24:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <_ZN15OrangutanSerial5portsE+0x7>
    2d28:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_ZN15OrangutanSerial5portsE+0x6>
    2d2c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2d30:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2d3a:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <_ZN15OrangutanSerial5portsE+0x1>
    2d3e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <_ZN15OrangutanSerial5portsE+0x3>
    2d42:	98 17       	cp	r25, r24
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <_ZN15OrangutanSerial12sendBlockingEPch+0x28>
    2d46:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN15OrangutanSerial5checkEv>
    2d4a:	f7 cf       	rjmp	.-18     	; 0x2d3a <_ZN15OrangutanSerial12sendBlockingEPch+0x16>
    2d4c:	08 95       	ret

00002d4e <serial_send_blocking>:
    2d4e:	0e 94 92 16 	call	0x2d24	; 0x2d24 <_ZN15OrangutanSerial12sendBlockingEPch>
    2d52:	08 95       	ret

00002d54 <__vector_19>:
    2d54:	1f 92       	push	r1
    2d56:	0f 92       	push	r0
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	0f 92       	push	r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	2f 93       	push	r18
    2d60:	3f 93       	push	r19
    2d62:	4f 93       	push	r20
    2d64:	5f 93       	push	r21
    2d66:	6f 93       	push	r22
    2d68:	7f 93       	push	r23
    2d6a:	8f 93       	push	r24
    2d6c:	9f 93       	push	r25
    2d6e:	af 93       	push	r26
    2d70:	bf 93       	push	r27
    2d72:	ef 93       	push	r30
    2d74:	ff 93       	push	r31
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN15OrangutanSerial11uart_tx_isrEh>
    2d7c:	ff 91       	pop	r31
    2d7e:	ef 91       	pop	r30
    2d80:	bf 91       	pop	r27
    2d82:	af 91       	pop	r26
    2d84:	9f 91       	pop	r25
    2d86:	8f 91       	pop	r24
    2d88:	7f 91       	pop	r23
    2d8a:	6f 91       	pop	r22
    2d8c:	5f 91       	pop	r21
    2d8e:	4f 91       	pop	r20
    2d90:	3f 91       	pop	r19
    2d92:	2f 91       	pop	r18
    2d94:	0f 90       	pop	r0
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	0f 90       	pop	r0
    2d9a:	1f 90       	pop	r1
    2d9c:	18 95       	reti

00002d9e <__vector_9>:
    2d9e:	2f 92       	push	r2
    2da0:	8f 93       	push	r24
    2da2:	9f 93       	push	r25
    2da4:	2f b6       	in	r2, 0x3f	; 63
    2da6:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <tickCount+0x1>
    2daa:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <tickCount+0x2>
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <tickCount+0x1>
    2db4:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <tickCount+0x2>
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <tickCount+0x3>
    2dbe:	89 1f       	adc	r24, r25
    2dc0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <tickCount+0x3>
    2dc4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <us_over_10+0x1>
    2dc8:	9c 5f       	subi	r25, 0xFC	; 252
    2dca:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <us_over_10+0x1>
    2dce:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <us_over_10>
    2dd2:	80 51       	subi	r24, 0x10	; 16
    2dd4:	97 42       	sbci	r25, 0x27	; 39
    2dd6:	c0 f0       	brcs	.+48     	; 0x2e08 <end>
    2dd8:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <us_over_10+0x1>
    2ddc:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <us_over_10>
    2de0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <msCounter>
    2de4:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <msCounter+0x1>
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <msCounter>
    2dee:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <msCounter+0x1>
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <msCounter+0x2>
    2df8:	89 1f       	adc	r24, r25
    2dfa:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <msCounter+0x2>
    2dfe:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <msCounter+0x3>
    2e02:	89 1f       	adc	r24, r25
    2e04:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <msCounter+0x3>

00002e08 <end>:
    2e08:	2f be       	out	0x3f, r2	; 63
    2e0a:	9f 91       	pop	r25
    2e0c:	8f 91       	pop	r24
    2e0e:	2f 90       	pop	r2
    2e10:	18 95       	reti

00002e12 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2e12:	28 ee       	ldi	r18, 0xE8	; 232
    2e14:	33 e0       	ldi	r19, 0x03	; 3
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	48 f0       	brcs	.+18     	; 0x2e2c <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	6f 93       	push	r22
    2e1e:	64 e0       	ldi	r22, 0x04	; 4
    2e20:	6a 95       	dec	r22
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    2e24:	6f 91       	pop	r22
    2e26:	31 97       	sbiw	r30, 0x01	; 1
    2e28:	c9 f7       	brne	.-14     	; 0x2e1c <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2e2a:	f5 cf       	rjmp	.-22     	; 0x2e16 <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2e2c:	08 95       	ret

00002e2e <delay_ms>:
    2e2e:	0e 94 09 17 	call	0x2e12	; 0x2e12 <_ZN13OrangutanTime17delayMillisecondsEj>
    2e32:	08 95       	ret

00002e34 <_ZN13OrangutanTime5init2Ev>:
    2e34:	e0 e7       	ldi	r30, 0x70	; 112
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	8e 7f       	andi	r24, 0xFE	; 254
    2e3c:	80 83       	st	Z, r24
    2e3e:	a0 eb       	ldi	r26, 0xB0	; 176
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	8c 91       	ld	r24, X
    2e44:	83 60       	ori	r24, 0x03	; 3
    2e46:	8c 93       	st	X, r24
    2e48:	a1 eb       	ldi	r26, 0xB1	; 177
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	8c 91       	ld	r24, X
    2e4e:	80 7f       	andi	r24, 0xF0	; 240
    2e50:	8c 93       	st	X, r24
    2e52:	8c 91       	ld	r24, X
    2e54:	82 60       	ori	r24, 0x02	; 2
    2e56:	8c 93       	st	X, r24
    2e58:	b8 9a       	sbi	0x17, 0	; 23
    2e5a:	80 81       	ld	r24, Z
    2e5c:	81 60       	ori	r24, 0x01	; 1
    2e5e:	80 83       	st	Z, r24
    2e60:	78 94       	sei
    2e62:	08 95       	ret

00002e64 <_ZN13OrangutanTime4initEv>:
    2e64:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2e68:	81 11       	cpse	r24, r1
    2e6a:	05 c0       	rjmp	.+10     	; 0x2e76 <_ZN13OrangutanTime4initEv+0x12>
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2e72:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <_ZN13OrangutanTime5init2Ev>
    2e76:	08 95       	ret

00002e78 <_ZN13OrangutanTime2msEv>:
    2e78:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN13OrangutanTime4initEv>
    2e7c:	e0 e7       	ldi	r30, 0x70	; 112
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	8e 7f       	andi	r24, 0xFE	; 254
    2e84:	80 83       	st	Z, r24
    2e86:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <msCounter>
    2e8a:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <msCounter+0x1>
    2e8e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <msCounter+0x2>
    2e92:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <msCounter+0x3>
    2e96:	20 81       	ld	r18, Z
    2e98:	21 60       	ori	r18, 0x01	; 1
    2e9a:	20 83       	st	Z, r18
    2e9c:	08 95       	ret

00002e9e <get_ms>:
    2e9e:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <_ZN13OrangutanTime2msEv>
    2ea2:	08 95       	ret

00002ea4 <_ZN13OrangutanTime5resetEv>:
    2ea4:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN13OrangutanTime4initEv>
    2ea8:	e0 e7       	ldi	r30, 0x70	; 112
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	8e 7f       	andi	r24, 0xFE	; 254
    2eb0:	80 83       	st	Z, r24
    2eb2:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <msCounter>
    2eb6:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <msCounter+0x1>
    2eba:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <msCounter+0x2>
    2ebe:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <msCounter+0x3>
    2ec2:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <us_over_10+0x1>
    2ec6:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <us_over_10>
    2eca:	80 81       	ld	r24, Z
    2ecc:	81 60       	ori	r24, 0x01	; 1
    2ece:	80 83       	st	Z, r24
    2ed0:	08 95       	ret

00002ed2 <calibrate_line_sensors>:
    2ed2:	68 2f       	mov	r22, r24
    2ed4:	81 eb       	ldi	r24, 0xB1	; 177
    2ed6:	91 e0       	ldi	r25, 0x01	; 1
    2ed8:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <_ZN16PololuQTRSensors9calibrateEh>
    2edc:	08 95       	ret

00002ede <read_line_sensors_calibrated>:
    2ede:	46 2f       	mov	r20, r22
    2ee0:	bc 01       	movw	r22, r24
    2ee2:	81 eb       	ldi	r24, 0xB1	; 177
    2ee4:	91 e0       	ldi	r25, 0x01	; 1
    2ee6:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    2eea:	08 95       	ret

00002eec <read_line>:
    2eec:	46 2f       	mov	r20, r22
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	bc 01       	movw	r22, r24
    2ef2:	81 eb       	ldi	r24, 0xB1	; 177
    2ef4:	91 e0       	ldi	r25, 0x01	; 1
    2ef6:	0e 94 29 1c 	call	0x3852	; 0x3852 <_ZN16PololuQTRSensors8readLineEPjhh>
    2efa:	08 95       	ret

00002efc <_ZN9Pololu3pi4initEjh>:
    2efc:	0f 93       	push	r16
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <_ZN9Pololu3pi4initEjh+0x8>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <_ZN9Pololu3pi4initEjh+0xa>
    2f06:	1f 92       	push	r1
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	9c 01       	movw	r18, r24
    2f0e:	85 e0       	ldi	r24, 0x05	; 5
    2f10:	e0 e5       	ldi	r30, 0x50	; 80
    2f12:	f1 e0       	ldi	r31, 0x01	; 1
    2f14:	de 01       	movw	r26, r28
    2f16:	11 96       	adiw	r26, 0x01	; 1
    2f18:	01 90       	ld	r0, Z+
    2f1a:	0d 92       	st	X+, r0
    2f1c:	8a 95       	dec	r24
    2f1e:	e1 f7       	brne	.-8      	; 0x2f18 <_ZN9Pololu3pi4initEjh+0x1c>
    2f20:	66 23       	and	r22, r22
    2f22:	11 f0       	breq	.+4      	; 0x2f28 <_ZN9Pololu3pi4initEjh+0x2c>
    2f24:	0f ef       	ldi	r16, 0xFF	; 255
    2f26:	01 c0       	rjmp	.+2      	; 0x2f2a <_ZN9Pololu3pi4initEjh+0x2e>
    2f28:	03 e1       	ldi	r16, 0x13	; 19
    2f2a:	45 e0       	ldi	r20, 0x05	; 5
    2f2c:	be 01       	movw	r22, r28
    2f2e:	6f 5f       	subi	r22, 0xFF	; 255
    2f30:	7f 4f       	sbci	r23, 0xFF	; 255
    2f32:	81 eb       	ldi	r24, 0xB1	; 177
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	0e 94 50 18 	call	0x30a0	; 0x30a0 <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2f3a:	81 eb       	ldi	r24, 0xB1	; 177
    2f3c:	91 e0       	ldi	r25, 0x01	; 1
    2f3e:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN16PololuQTRSensors11emittersOffEv>
    2f42:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <_ZN13OrangutanTime5resetEv>
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	0f 91       	pop	r16
    2f56:	08 95       	ret

00002f58 <pololu_3pi_init>:
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN9Pololu3pi4initEjh>
    2f5e:	08 95       	ret

00002f60 <_GLOBAL__sub_D_pololu_3pi_init>:
    2f60:	81 eb       	ldi	r24, 0xB1	; 177
    2f62:	91 e0       	ldi	r25, 0x01	; 1
    2f64:	0e 94 9e 1c 	call	0x393c	; 0x393c <_ZN16PololuQTRSensorsD1Ev>
    2f68:	08 95       	ret

00002f6a <delay_us>:
    2f6a:	6f 93       	push	r22
    2f6c:	64 e0       	ldi	r22, 0x04	; 4
    2f6e:	6a 95       	dec	r22
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <delay_us+0x4>
    2f72:	6f 91       	pop	r22
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	c9 f7       	brne	.-14     	; 0x2f6a <delay_us>
    2f78:	08 95       	ret

00002f7a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	11 82       	std	Z+1, r1	; 0x01
    2f7e:	10 82       	st	Z, r1
    2f80:	13 82       	std	Z+3, r1	; 0x03
    2f82:	12 82       	std	Z+2, r1	; 0x02
    2f84:	15 82       	std	Z+5, r1	; 0x05
    2f86:	14 82       	std	Z+4, r1	; 0x04
    2f88:	16 82       	std	Z+6, r1	; 0x06
    2f8a:	68 30       	cpi	r22, 0x08	; 8
    2f8c:	68 f4       	brcc	.+26     	; 0x2fa8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2f8e:	89 e2       	ldi	r24, 0x29	; 41
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
    2f96:	8b e2       	ldi	r24, 0x2B	; 43
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	93 83       	std	Z+3, r25	; 0x03
    2f9c:	82 83       	std	Z+2, r24	; 0x02
    2f9e:	8a e2       	ldi	r24, 0x2A	; 42
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	95 83       	std	Z+5, r25	; 0x05
    2fa4:	84 83       	std	Z+4, r24	; 0x04
    2fa6:	1f c0       	rjmp	.+62     	; 0x2fe6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2fa8:	6e 30       	cpi	r22, 0x0E	; 14
    2faa:	70 f4       	brcc	.+28     	; 0x2fc8 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2fac:	83 e2       	ldi	r24, 0x23	; 35
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	80 83       	st	Z, r24
    2fb4:	85 e2       	ldi	r24, 0x25	; 37
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	93 83       	std	Z+3, r25	; 0x03
    2fba:	82 83       	std	Z+2, r24	; 0x02
    2fbc:	84 e2       	ldi	r24, 0x24	; 36
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	95 83       	std	Z+5, r25	; 0x05
    2fc2:	84 83       	std	Z+4, r24	; 0x04
    2fc4:	68 50       	subi	r22, 0x08	; 8
    2fc6:	0f c0       	rjmp	.+30     	; 0x2fe6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2fc8:	65 31       	cpi	r22, 0x15	; 21
    2fca:	98 f4       	brcc	.+38     	; 0x2ff2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2fcc:	86 e2       	ldi	r24, 0x26	; 38
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	80 83       	st	Z, r24
    2fd4:	88 e2       	ldi	r24, 0x28	; 40
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	93 83       	std	Z+3, r25	; 0x03
    2fda:	82 83       	std	Z+2, r24	; 0x02
    2fdc:	87 e2       	ldi	r24, 0x27	; 39
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	95 83       	std	Z+5, r25	; 0x05
    2fe2:	84 83       	std	Z+4, r24	; 0x04
    2fe4:	6e 50       	subi	r22, 0x0E	; 14
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	01 c0       	rjmp	.+2      	; 0x2fec <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2fea:	88 0f       	add	r24, r24
    2fec:	6a 95       	dec	r22
    2fee:	ea f7       	brpl	.-6      	; 0x2fea <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2ff0:	86 83       	std	Z+6, r24	; 0x06
    2ff2:	08 95       	ret

00002ff4 <_ZN16PololuQTRSensors4initEhhh>:
    2ff4:	a7 e0       	ldi	r26, 0x07	; 7
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e0 e0       	ldi	r30, 0x00	; 0
    2ffa:	f8 e1       	ldi	r31, 0x18	; 24
    2ffc:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__prologue_saves__+0x1c>
    3000:	8c 01       	movw	r16, r24
    3002:	fc 01       	movw	r30, r24
    3004:	11 82       	std	Z+1, r1	; 0x01
    3006:	10 82       	st	Z, r1
    3008:	13 82       	std	Z+3, r1	; 0x03
    300a:	12 82       	std	Z+2, r1	; 0x02
    300c:	15 82       	std	Z+5, r1	; 0x05
    300e:	14 82       	std	Z+4, r1	; 0x04
    3010:	17 82       	std	Z+7, r1	; 0x07
    3012:	16 82       	std	Z+6, r1	; 0x06
    3014:	61 31       	cpi	r22, 0x11	; 17
    3016:	18 f0       	brcs	.+6      	; 0x301e <_ZN16PololuQTRSensors4initEhhh+0x2a>
    3018:	80 e1       	ldi	r24, 0x10	; 16
    301a:	80 87       	std	Z+8, r24	; 0x08
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <_ZN16PololuQTRSensors4initEhhh+0x2e>
    301e:	fc 01       	movw	r30, r24
    3020:	60 87       	std	Z+8, r22	; 0x08
    3022:	f8 01       	movw	r30, r16
    3024:	20 8b       	std	Z+16, r18	; 0x10
    3026:	64 2f       	mov	r22, r20
    3028:	ce 01       	movw	r24, r28
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    3030:	8f 81       	ldd	r24, Y+7	; 0x07
    3032:	f8 01       	movw	r30, r16
    3034:	81 87       	std	Z+9, r24	; 0x09
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	93 87       	std	Z+11, r25	; 0x0b
    303c:	82 87       	std	Z+10, r24	; 0x0a
    303e:	8d 81       	ldd	r24, Y+5	; 0x05
    3040:	9e 81       	ldd	r25, Y+6	; 0x06
    3042:	95 87       	std	Z+13, r25	; 0x0d
    3044:	84 87       	std	Z+12, r24	; 0x0c
    3046:	27 96       	adiw	r28, 0x07	; 7
    3048:	e4 e0       	ldi	r30, 0x04	; 4
    304a:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <__epilogue_restores__+0x1c>

0000304e <_ZN16PololuQTRSensors11emittersOffEv>:
    304e:	fc 01       	movw	r30, r24
    3050:	a4 85       	ldd	r26, Z+12	; 0x0c
    3052:	b5 85       	ldd	r27, Z+13	; 0x0d
    3054:	10 97       	sbiw	r26, 0x00	; 0
    3056:	79 f0       	breq	.+30     	; 0x3076 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    3058:	8c 91       	ld	r24, X
    305a:	91 85       	ldd	r25, Z+9	; 0x09
    305c:	89 2b       	or	r24, r25
    305e:	8c 93       	st	X, r24
    3060:	a2 85       	ldd	r26, Z+10	; 0x0a
    3062:	b3 85       	ldd	r27, Z+11	; 0x0b
    3064:	9c 91       	ld	r25, X
    3066:	81 85       	ldd	r24, Z+9	; 0x09
    3068:	80 95       	com	r24
    306a:	89 23       	and	r24, r25
    306c:	8c 93       	st	X, r24
    306e:	88 ec       	ldi	r24, 0xC8	; 200
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <delay_us>
    3076:	08 95       	ret

00003078 <_ZN16PololuQTRSensors10emittersOnEv>:
    3078:	fc 01       	movw	r30, r24
    307a:	a4 85       	ldd	r26, Z+12	; 0x0c
    307c:	b5 85       	ldd	r27, Z+13	; 0x0d
    307e:	10 97       	sbiw	r26, 0x00	; 0
    3080:	71 f0       	breq	.+28     	; 0x309e <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    3082:	8c 91       	ld	r24, X
    3084:	91 85       	ldd	r25, Z+9	; 0x09
    3086:	89 2b       	or	r24, r25
    3088:	8c 93       	st	X, r24
    308a:	a2 85       	ldd	r26, Z+10	; 0x0a
    308c:	b3 85       	ldd	r27, Z+11	; 0x0b
    308e:	8c 91       	ld	r24, X
    3090:	91 85       	ldd	r25, Z+9	; 0x09
    3092:	89 2b       	or	r24, r25
    3094:	8c 93       	st	X, r24
    3096:	88 ec       	ldi	r24, 0xC8	; 200
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <delay_us>
    309e:	08 95       	ret

000030a0 <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    30a0:	a7 e0       	ldi	r26, 0x07	; 7
    30a2:	b0 e0       	ldi	r27, 0x00	; 0
    30a4:	e6 e5       	ldi	r30, 0x56	; 86
    30a6:	f8 e1       	ldi	r31, 0x18	; 24
    30a8:	0c 94 5c 1d 	jmp	0x3ab8	; 0x3ab8 <__prologue_saves__+0x6>
    30ac:	7c 01       	movw	r14, r24
    30ae:	4b 01       	movw	r8, r22
    30b0:	64 2f       	mov	r22, r20
    30b2:	39 01       	movw	r6, r18
    30b4:	40 2f       	mov	r20, r16
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_ZN16PololuQTRSensors4initEhhh>
    30bc:	87 01       	movw	r16, r14
    30be:	0f 5b       	subi	r16, 0xBF	; 191
    30c0:	1f 4f       	sbci	r17, 0xFF	; 255
    30c2:	f8 01       	movw	r30, r16
    30c4:	10 82       	st	Z, r1
    30c6:	67 01       	movw	r12, r14
    30c8:	f2 e4       	ldi	r31, 0x42	; 66
    30ca:	cf 0e       	add	r12, r31
    30cc:	d1 1c       	adc	r13, r1
    30ce:	f6 01       	movw	r30, r12
    30d0:	10 82       	st	Z, r1
    30d2:	57 01       	movw	r10, r14
    30d4:	f3 e4       	ldi	r31, 0x43	; 67
    30d6:	af 0e       	add	r10, r31
    30d8:	b1 1c       	adc	r11, r1
    30da:	f5 01       	movw	r30, r10
    30dc:	10 82       	st	Z, r1
    30de:	f7 01       	movw	r30, r14
    30e0:	77 86       	std	Z+15, r7	; 0x0f
    30e2:	66 86       	std	Z+14, r6	; 0x0e
    30e4:	51 2c       	mov	r5, r1
    30e6:	f7 01       	movw	r30, r14
    30e8:	80 85       	ldd	r24, Z+8	; 0x08
    30ea:	58 16       	cp	r5, r24
    30ec:	50 f5       	brcc	.+84     	; 0x3142 <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    30ee:	65 2c       	mov	r6, r5
    30f0:	71 2c       	mov	r7, r1
    30f2:	f4 01       	movw	r30, r8
    30f4:	e6 0d       	add	r30, r6
    30f6:	f7 1d       	adc	r31, r7
    30f8:	60 81       	ld	r22, Z
    30fa:	ce 01       	movw	r24, r28
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    3102:	2f 81       	ldd	r18, Y+7	; 0x07
    3104:	f7 01       	movw	r30, r14
    3106:	e6 0d       	add	r30, r6
    3108:	f7 1d       	adc	r31, r7
    310a:	21 8b       	std	Z+17, r18	; 0x11
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	9a 81       	ldd	r25, Y+2	; 0x02
    3110:	f3 01       	movw	r30, r6
    3112:	ee 0f       	add	r30, r30
    3114:	ff 1f       	adc	r31, r31
    3116:	ee 0d       	add	r30, r14
    3118:	ff 1d       	adc	r31, r15
    311a:	92 a3       	std	Z+34, r25	; 0x22
    311c:	81 a3       	std	Z+33, r24	; 0x21
    311e:	83 32       	cpi	r24, 0x23	; 35
    3120:	91 05       	cpc	r25, r1
    3122:	11 f4       	brne	.+4      	; 0x3128 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    3124:	f8 01       	movw	r30, r16
    3126:	08 c0       	rjmp	.+16     	; 0x3138 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    3128:	86 32       	cpi	r24, 0x26	; 38
    312a:	91 05       	cpc	r25, r1
    312c:	11 f4       	brne	.+4      	; 0x3132 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    312e:	f6 01       	movw	r30, r12
    3130:	03 c0       	rjmp	.+6      	; 0x3138 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    3132:	89 97       	sbiw	r24, 0x29	; 41
    3134:	21 f4       	brne	.+8      	; 0x313e <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    3136:	f5 01       	movw	r30, r10
    3138:	80 81       	ld	r24, Z
    313a:	82 2b       	or	r24, r18
    313c:	80 83       	st	Z, r24
    313e:	53 94       	inc	r5
    3140:	d2 cf       	rjmp	.-92     	; 0x30e6 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    3142:	27 96       	adiw	r28, 0x07	; 7
    3144:	ef e0       	ldi	r30, 0x0F	; 15
    3146:	0c 94 78 1d 	jmp	0x3af0	; 0x3af0 <__epilogue_restores__+0x6>

0000314a <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    314a:	a0 e0       	ldi	r26, 0x00	; 0
    314c:	b0 e0       	ldi	r27, 0x00	; 0
    314e:	eb ea       	ldi	r30, 0xAB	; 171
    3150:	f8 e1       	ldi	r31, 0x18	; 24
    3152:	0c 94 5e 1d 	jmp	0x3abc	; 0x3abc <__prologue_saves__+0xa>
    3156:	ec 01       	movw	r28, r24
    3158:	5b 01       	movw	r10, r22
    315a:	6c 01       	movw	r12, r24
    315c:	81 e4       	ldi	r24, 0x41	; 65
    315e:	c8 0e       	add	r12, r24
    3160:	d1 1c       	adc	r13, r1
    3162:	f6 01       	movw	r30, r12
    3164:	80 80       	ld	r8, Z
    3166:	7e 01       	movw	r14, r28
    3168:	f2 e4       	ldi	r31, 0x42	; 66
    316a:	ef 0e       	add	r14, r31
    316c:	f1 1c       	adc	r15, r1
    316e:	f7 01       	movw	r30, r14
    3170:	70 80       	ld	r7, Z
    3172:	8e 01       	movw	r16, r28
    3174:	0d 5b       	subi	r16, 0xBD	; 189
    3176:	1f 4f       	sbci	r17, 0xFF	; 255
    3178:	f8 01       	movw	r30, r16
    317a:	90 80       	ld	r9, Z
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	98 85       	ldd	r25, Y+8	; 0x08
    3180:	89 17       	cp	r24, r25
    3182:	48 f4       	brcc	.+18     	; 0x3196 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    3184:	f5 01       	movw	r30, r10
    3186:	e8 0f       	add	r30, r24
    3188:	f1 1d       	adc	r31, r1
    318a:	e8 0f       	add	r30, r24
    318c:	f1 1d       	adc	r31, r1
    318e:	11 82       	std	Z+1, r1	; 0x01
    3190:	10 82       	st	Z, r1
    3192:	8f 5f       	subi	r24, 0xFF	; 255
    3194:	f4 cf       	rjmp	.-24     	; 0x317e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    3196:	84 b1       	in	r24, 0x04	; 4
    3198:	f6 01       	movw	r30, r12
    319a:	90 81       	ld	r25, Z
    319c:	89 2b       	or	r24, r25
    319e:	84 b9       	out	0x04, r24	; 4
    31a0:	87 b1       	in	r24, 0x07	; 7
    31a2:	f7 01       	movw	r30, r14
    31a4:	90 81       	ld	r25, Z
    31a6:	89 2b       	or	r24, r25
    31a8:	87 b9       	out	0x07, r24	; 7
    31aa:	8a b1       	in	r24, 0x0a	; 10
    31ac:	f8 01       	movw	r30, r16
    31ae:	90 81       	ld	r25, Z
    31b0:	89 2b       	or	r24, r25
    31b2:	8a b9       	out	0x0a, r24	; 10
    31b4:	85 b1       	in	r24, 0x05	; 5
    31b6:	f6 01       	movw	r30, r12
    31b8:	90 81       	ld	r25, Z
    31ba:	89 2b       	or	r24, r25
    31bc:	85 b9       	out	0x05, r24	; 5
    31be:	88 b1       	in	r24, 0x08	; 8
    31c0:	f7 01       	movw	r30, r14
    31c2:	90 81       	ld	r25, Z
    31c4:	89 2b       	or	r24, r25
    31c6:	88 b9       	out	0x08, r24	; 8
    31c8:	8b b1       	in	r24, 0x0b	; 11
    31ca:	f8 01       	movw	r30, r16
    31cc:	90 81       	ld	r25, Z
    31ce:	89 2b       	or	r24, r25
    31d0:	8b b9       	out	0x0b, r24	; 11
    31d2:	8a e0       	ldi	r24, 0x0A	; 10
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <delay_us>
    31da:	94 b1       	in	r25, 0x04	; 4
    31dc:	f6 01       	movw	r30, r12
    31de:	80 81       	ld	r24, Z
    31e0:	80 95       	com	r24
    31e2:	89 23       	and	r24, r25
    31e4:	84 b9       	out	0x04, r24	; 4
    31e6:	97 b1       	in	r25, 0x07	; 7
    31e8:	f7 01       	movw	r30, r14
    31ea:	80 81       	ld	r24, Z
    31ec:	80 95       	com	r24
    31ee:	89 23       	and	r24, r25
    31f0:	87 b9       	out	0x07, r24	; 7
    31f2:	9a b1       	in	r25, 0x0a	; 10
    31f4:	f8 01       	movw	r30, r16
    31f6:	80 81       	ld	r24, Z
    31f8:	80 95       	com	r24
    31fa:	89 23       	and	r24, r25
    31fc:	8a b9       	out	0x0a, r24	; 10
    31fe:	95 b1       	in	r25, 0x05	; 5
    3200:	f6 01       	movw	r30, r12
    3202:	80 81       	ld	r24, Z
    3204:	80 95       	com	r24
    3206:	89 23       	and	r24, r25
    3208:	85 b9       	out	0x05, r24	; 5
    320a:	98 b1       	in	r25, 0x08	; 8
    320c:	f7 01       	movw	r30, r14
    320e:	80 81       	ld	r24, Z
    3210:	80 95       	com	r24
    3212:	89 23       	and	r24, r25
    3214:	88 b9       	out	0x08, r24	; 8
    3216:	9b b1       	in	r25, 0x0b	; 11
    3218:	f8 01       	movw	r30, r16
    321a:	80 81       	ld	r24, Z
    321c:	80 95       	com	r24
    321e:	89 23       	and	r24, r25
    3220:	8b b9       	out	0x0b, r24	; 11
    3222:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3226:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    322a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    322e:	83 60       	ori	r24, 0x03	; 3
    3230:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    323a:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	2e 85       	ldd	r18, Y+14	; 0x0e
    3244:	3f 85       	ldd	r19, Y+15	; 0x0f
    3246:	82 17       	cp	r24, r18
    3248:	93 07       	cpc	r25, r19
    324a:	20 f5       	brcc	.+72     	; 0x3294 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    324c:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    3250:	2c 2d       	mov	r18, r12
    3252:	24 1b       	sub	r18, r20
    3254:	82 0f       	add	r24, r18
    3256:	91 1d       	adc	r25, r1
    3258:	03 b1       	in	r16, 0x03	; 3
    325a:	08 11       	cpse	r16, r8
    325c:	32 c0       	rjmp	.+100    	; 0x32c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    325e:	f6 b0       	in	r15, 0x06	; 6
    3260:	f7 10       	cpse	r15, r7
    3262:	2f c0       	rjmp	.+94     	; 0x32c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    3264:	29 b1       	in	r18, 0x09	; 9
    3266:	29 11       	cpse	r18, r9
    3268:	2c c0       	rjmp	.+88     	; 0x32c2 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    326a:	10 c0       	rjmp	.+32     	; 0x328c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    326c:	21 2f       	mov	r18, r17
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	a9 01       	movw	r20, r18
    3272:	44 0f       	add	r20, r20
    3274:	55 1f       	adc	r21, r21
    3276:	f5 01       	movw	r30, r10
    3278:	e4 0f       	add	r30, r20
    327a:	f5 1f       	adc	r31, r21
    327c:	60 81       	ld	r22, Z
    327e:	71 81       	ldd	r23, Z+1	; 0x01
    3280:	67 2b       	or	r22, r23
    3282:	21 f1       	breq	.+72     	; 0x32cc <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    3284:	1f 5f       	subi	r17, 0xFF	; 255
    3286:	28 85       	ldd	r18, Y+8	; 0x08
    3288:	12 17       	cp	r17, r18
    328a:	80 f3       	brcs	.-32     	; 0x326c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    328c:	7f 2c       	mov	r7, r15
    328e:	80 2e       	mov	r8, r16
    3290:	4c 2d       	mov	r20, r12
    3292:	d7 cf       	rjmp	.-82     	; 0x3242 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    3294:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3298:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	88 85       	ldd	r24, Y+8	; 0x08
    32a0:	28 17       	cp	r18, r24
    32a2:	30 f5       	brcc	.+76     	; 0x32f0 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    32a4:	f5 01       	movw	r30, r10
    32a6:	e2 0f       	add	r30, r18
    32a8:	f1 1d       	adc	r31, r1
    32aa:	e2 0f       	add	r30, r18
    32ac:	f1 1d       	adc	r31, r1
    32ae:	80 81       	ld	r24, Z
    32b0:	91 81       	ldd	r25, Z+1	; 0x01
    32b2:	89 2b       	or	r24, r25
    32b4:	21 f4       	brne	.+8      	; 0x32be <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    32b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    32b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    32ba:	91 83       	std	Z+1, r25	; 0x01
    32bc:	80 83       	st	Z, r24
    32be:	2f 5f       	subi	r18, 0xFF	; 255
    32c0:	ee cf       	rjmp	.-36     	; 0x329e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    32c2:	03 b1       	in	r16, 0x03	; 3
    32c4:	f6 b0       	in	r15, 0x06	; 6
    32c6:	99 b0       	in	r9, 0x09	; 9
    32c8:	10 e0       	ldi	r17, 0x00	; 0
    32ca:	dd cf       	rjmp	.-70     	; 0x3286 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    32cc:	de 01       	movw	r26, r28
    32ce:	a4 0f       	add	r26, r20
    32d0:	b5 1f       	adc	r27, r21
    32d2:	91 96       	adiw	r26, 0x21	; 33
    32d4:	0d 90       	ld	r0, X+
    32d6:	bc 91       	ld	r27, X
    32d8:	a0 2d       	mov	r26, r0
    32da:	4c 91       	ld	r20, X
    32dc:	de 01       	movw	r26, r28
    32de:	a2 0f       	add	r26, r18
    32e0:	b3 1f       	adc	r27, r19
    32e2:	51 96       	adiw	r26, 0x11	; 17
    32e4:	2c 91       	ld	r18, X
    32e6:	42 23       	and	r20, r18
    32e8:	69 f6       	brne	.-102    	; 0x3284 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    32ea:	91 83       	std	Z+1, r25	; 0x01
    32ec:	80 83       	st	Z, r24
    32ee:	ca cf       	rjmp	.-108    	; 0x3284 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	ed e0       	ldi	r30, 0x0D	; 13
    32f6:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__epilogue_restores__+0xa>

000032fa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	fc 01       	movw	r30, r24
    3308:	9b 01       	movw	r18, r22
    330a:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    330e:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3312:	47 b1       	in	r20, 0x07	; 7
    3314:	18 b1       	in	r17, 0x08	; 8
    3316:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    331a:	86 fd       	sbrc	r24, 6
    331c:	fc cf       	rjmp	.-8      	; 0x3316 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 85       	ldd	r25, Z+8	; 0x08
    3322:	89 17       	cp	r24, r25
    3324:	48 f4       	brcc	.+18     	; 0x3338 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    3326:	d9 01       	movw	r26, r18
    3328:	a8 0f       	add	r26, r24
    332a:	b1 1d       	adc	r27, r1
    332c:	a8 0f       	add	r26, r24
    332e:	b1 1d       	adc	r27, r1
    3330:	1d 92       	st	X+, r1
    3332:	1c 92       	st	X, r1
    3334:	8f 5f       	subi	r24, 0xFF	; 255
    3336:	f4 cf       	rjmp	.-24     	; 0x3320 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    3338:	97 b1       	in	r25, 0x07	; 7
    333a:	82 a1       	ldd	r24, Z+34	; 0x22
    333c:	80 95       	com	r24
    333e:	89 23       	and	r24, r25
    3340:	87 b9       	out	0x07, r24	; 7
    3342:	98 b1       	in	r25, 0x08	; 8
    3344:	82 a1       	ldd	r24, Z+34	; 0x22
    3346:	80 95       	com	r24
    3348:	89 23       	and	r24, r25
    334a:	88 b9       	out	0x08, r24	; 8
    334c:	87 e8       	ldi	r24, 0x87	; 135
    334e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3352:	e1 2c       	mov	r14, r1
    3354:	81 a1       	ldd	r24, Z+33	; 0x21
    3356:	e8 16       	cp	r14, r24
    3358:	10 f0       	brcs	.+4      	; 0x335e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    335a:	e1 2c       	mov	r14, r1
    335c:	29 c0       	rjmp	.+82     	; 0x33b0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	80 85       	ldd	r24, Z+8	; 0x08
    3362:	58 17       	cp	r21, r24
    3364:	18 f5       	brcc	.+70     	; 0x33ac <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    3366:	a5 2f       	mov	r26, r21
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	ef 01       	movw	r28, r30
    336c:	ca 0f       	add	r28, r26
    336e:	db 1f       	adc	r29, r27
    3370:	89 89       	ldd	r24, Y+17	; 0x11
    3372:	80 64       	ori	r24, 0x40	; 64
    3374:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    3378:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    337c:	80 64       	ori	r24, 0x40	; 64
    337e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3382:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3386:	86 fd       	sbrc	r24, 6
    3388:	fc cf       	rjmp	.-8      	; 0x3382 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    338a:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    338e:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    3392:	aa 0f       	add	r26, r26
    3394:	bb 1f       	adc	r27, r27
    3396:	a2 0f       	add	r26, r18
    3398:	b3 1f       	adc	r27, r19
    339a:	8d 91       	ld	r24, X+
    339c:	9c 91       	ld	r25, X
    339e:	11 97       	sbiw	r26, 0x01	; 1
    33a0:	86 0f       	add	r24, r22
    33a2:	97 1f       	adc	r25, r23
    33a4:	8d 93       	st	X+, r24
    33a6:	9c 93       	st	X, r25
    33a8:	5f 5f       	subi	r21, 0xFF	; 255
    33aa:	da cf       	rjmp	.-76     	; 0x3360 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    33ac:	e3 94       	inc	r14
    33ae:	d2 cf       	rjmp	.-92     	; 0x3354 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    33b0:	80 85       	ldd	r24, Z+8	; 0x08
    33b2:	e8 16       	cp	r14, r24
    33b4:	a0 f4       	brcc	.+40     	; 0x33de <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    33b6:	e9 01       	movw	r28, r18
    33b8:	ce 0d       	add	r28, r14
    33ba:	d1 1d       	adc	r29, r1
    33bc:	ce 0d       	add	r28, r14
    33be:	d1 1d       	adc	r29, r1
    33c0:	61 a1       	ldd	r22, Z+33	; 0x21
    33c2:	70 e0       	ldi	r23, 0x00	; 0
    33c4:	cb 01       	movw	r24, r22
    33c6:	95 95       	asr	r25
    33c8:	87 95       	ror	r24
    33ca:	a8 81       	ld	r26, Y
    33cc:	b9 81       	ldd	r27, Y+1	; 0x01
    33ce:	8a 0f       	add	r24, r26
    33d0:	9b 1f       	adc	r25, r27
    33d2:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    33d6:	79 83       	std	Y+1, r23	; 0x01
    33d8:	68 83       	st	Y, r22
    33da:	e3 94       	inc	r14
    33dc:	e9 cf       	rjmp	.-46     	; 0x33b0 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    33de:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    33e2:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    33e6:	18 b9       	out	0x08, r17	; 8
    33e8:	47 b9       	out	0x07, r20	; 7
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	e6 e0       	ldi	r30, 0x06	; 6
    33f0:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__+0x18>

000033f4 <_ZN16PololuQTRSensors4readEPjh>:
    33f4:	a0 e2       	ldi	r26, 0x20	; 32
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	e0 e0       	ldi	r30, 0x00	; 0
    33fa:	fa e1       	ldi	r31, 0x1A	; 26
    33fc:	0c 94 64 1d 	jmp	0x3ac8	; 0x3ac8 <__prologue_saves__+0x16>
    3400:	8c 01       	movw	r16, r24
    3402:	7b 01       	movw	r14, r22
    3404:	d4 2e       	mov	r13, r20
    3406:	8f ef       	ldi	r24, 0xFF	; 255
    3408:	84 0f       	add	r24, r20
    340a:	82 30       	cpi	r24, 0x02	; 2
    340c:	18 f4       	brcc	.+6      	; 0x3414 <_ZN16PololuQTRSensors4readEPjh+0x20>
    340e:	c8 01       	movw	r24, r16
    3410:	0e 94 3c 18 	call	0x3078	; 0x3078 <_ZN16PololuQTRSensors10emittersOnEv>
    3414:	d8 01       	movw	r26, r16
    3416:	50 96       	adiw	r26, 0x10	; 16
    3418:	8c 91       	ld	r24, X
    341a:	b7 01       	movw	r22, r14
    341c:	81 11       	cpse	r24, r1
    341e:	10 c0       	rjmp	.+32     	; 0x3440 <_ZN16PololuQTRSensors4readEPjh+0x4c>
    3420:	c8 01       	movw	r24, r16
    3422:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    3426:	c8 01       	movw	r24, r16
    3428:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN16PololuQTRSensors11emittersOffEv>
    342c:	b2 e0       	ldi	r27, 0x02	; 2
    342e:	db 12       	cpse	r13, r27
    3430:	3a c0       	rjmp	.+116    	; 0x34a6 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    3432:	be 01       	movw	r22, r28
    3434:	6f 5f       	subi	r22, 0xFF	; 255
    3436:	7f 4f       	sbci	r23, 0xFF	; 255
    3438:	c8 01       	movw	r24, r16
    343a:	0e 94 a5 18 	call	0x314a	; 0x314a <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    343e:	0f c0       	rjmp	.+30     	; 0x345e <_ZN16PololuQTRSensors4readEPjh+0x6a>
    3440:	c8 01       	movw	r24, r16
    3442:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    3446:	c8 01       	movw	r24, r16
    3448:	0e 94 27 18 	call	0x304e	; 0x304e <_ZN16PololuQTRSensors11emittersOffEv>
    344c:	e2 e0       	ldi	r30, 0x02	; 2
    344e:	de 12       	cpse	r13, r30
    3450:	2a c0       	rjmp	.+84     	; 0x34a6 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    3452:	be 01       	movw	r22, r28
    3454:	6f 5f       	subi	r22, 0xFF	; 255
    3456:	7f 4f       	sbci	r23, 0xFF	; 255
    3458:	c8 01       	movw	r24, r16
    345a:	0e 94 7d 19 	call	0x32fa	; 0x32fa <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    345e:	40 e0       	ldi	r20, 0x00	; 0
    3460:	f8 01       	movw	r30, r16
    3462:	80 85       	ldd	r24, Z+8	; 0x08
    3464:	48 17       	cp	r20, r24
    3466:	f8 f4       	brcc	.+62     	; 0x34a6 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    3468:	84 2f       	mov	r24, r20
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	88 0f       	add	r24, r24
    346e:	99 1f       	adc	r25, r25
    3470:	f7 01       	movw	r30, r14
    3472:	e8 0f       	add	r30, r24
    3474:	f9 1f       	adc	r31, r25
    3476:	21 e0       	ldi	r18, 0x01	; 1
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	2c 0f       	add	r18, r28
    347c:	3d 1f       	adc	r19, r29
    347e:	82 0f       	add	r24, r18
    3480:	93 1f       	adc	r25, r19
    3482:	d8 01       	movw	r26, r16
    3484:	1e 96       	adiw	r26, 0x0e	; 14
    3486:	2d 91       	ld	r18, X+
    3488:	3c 91       	ld	r19, X
    348a:	1f 97       	sbiw	r26, 0x0f	; 15
    348c:	dc 01       	movw	r26, r24
    348e:	8d 91       	ld	r24, X+
    3490:	9c 91       	ld	r25, X
    3492:	28 1b       	sub	r18, r24
    3494:	39 0b       	sbc	r19, r25
    3496:	80 81       	ld	r24, Z
    3498:	91 81       	ldd	r25, Z+1	; 0x01
    349a:	82 0f       	add	r24, r18
    349c:	93 1f       	adc	r25, r19
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
    34a2:	4f 5f       	subi	r20, 0xFF	; 255
    34a4:	dd cf       	rjmp	.-70     	; 0x3460 <_ZN16PololuQTRSensors4readEPjh+0x6c>
    34a6:	a0 96       	adiw	r28, 0x20	; 32
    34a8:	e7 e0       	ldi	r30, 0x07	; 7
    34aa:	0c 94 80 1d 	jmp	0x3b00	; 0x3b00 <__epilogue_restores__+0x16>

000034ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    34ae:	2f 92       	push	r2
    34b0:	3f 92       	push	r3
    34b2:	5f 92       	push	r5
    34b4:	6f 92       	push	r6
    34b6:	7f 92       	push	r7
    34b8:	8f 92       	push	r8
    34ba:	9f 92       	push	r9
    34bc:	af 92       	push	r10
    34be:	bf 92       	push	r11
    34c0:	cf 92       	push	r12
    34c2:	df 92       	push	r13
    34c4:	ef 92       	push	r14
    34c6:	ff 92       	push	r15
    34c8:	0f 93       	push	r16
    34ca:	1f 93       	push	r17
    34cc:	cf 93       	push	r28
    34ce:	df 93       	push	r29
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	c0 56       	subi	r28, 0x60	; 96
    34d6:	d1 09       	sbc	r29, r1
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	f8 94       	cli
    34dc:	de bf       	out	0x3e, r29	; 62
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	cd bf       	out	0x3d, r28	; 61
    34e2:	8c 01       	movw	r16, r24
    34e4:	4b 01       	movw	r8, r22
    34e6:	5a 01       	movw	r10, r20
    34e8:	52 2e       	mov	r5, r18
    34ea:	da 01       	movw	r26, r20
    34ec:	8d 91       	ld	r24, X+
    34ee:	9c 91       	ld	r25, X
    34f0:	89 2b       	or	r24, r25
    34f2:	31 f0       	breq	.+12     	; 0x3500 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    34f4:	f4 01       	movw	r30, r8
    34f6:	80 81       	ld	r24, Z
    34f8:	91 81       	ldd	r25, Z+1	; 0x01
    34fa:	89 2b       	or	r24, r25
    34fc:	f1 f4       	brne	.+60     	; 0x353a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    34fe:	24 c0       	rjmp	.+72     	; 0x3548 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    3500:	d8 01       	movw	r26, r16
    3502:	18 96       	adiw	r26, 0x08	; 8
    3504:	8c 91       	ld	r24, X
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	88 0f       	add	r24, r24
    350a:	99 1f       	adc	r25, r25
    350c:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <malloc>
    3510:	f5 01       	movw	r30, r10
    3512:	91 83       	std	Z+1, r25	; 0x01
    3514:	80 83       	st	Z, r24
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	09 f4       	brne	.+2      	; 0x351c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    351a:	b1 c0       	rjmp	.+354    	; 0x367e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    351c:	fc 01       	movw	r30, r24
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	30 e0       	ldi	r19, 0x00	; 0
    3522:	d8 01       	movw	r26, r16
    3524:	18 96       	adiw	r26, 0x08	; 8
    3526:	8c 91       	ld	r24, X
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	28 17       	cp	r18, r24
    352c:	39 07       	cpc	r19, r25
    352e:	14 f7       	brge	.-60     	; 0x34f4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    3530:	11 92       	st	Z+, r1
    3532:	11 92       	st	Z+, r1
    3534:	2f 5f       	subi	r18, 0xFF	; 255
    3536:	3f 4f       	sbci	r19, 0xFF	; 255
    3538:	f4 cf       	rjmp	.-24     	; 0x3522 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    353a:	e1 2c       	mov	r14, r1
    353c:	f1 2c       	mov	r15, r1
    353e:	6e 01       	movw	r12, r28
    3540:	b1 e2       	ldi	r27, 0x21	; 33
    3542:	cb 0e       	add	r12, r27
    3544:	d1 1c       	adc	r13, r1
    3546:	21 c0       	rjmp	.+66     	; 0x358a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3548:	f8 01       	movw	r30, r16
    354a:	80 85       	ldd	r24, Z+8	; 0x08
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	88 0f       	add	r24, r24
    3550:	99 1f       	adc	r25, r25
    3552:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <malloc>
    3556:	d4 01       	movw	r26, r8
    3558:	8d 93       	st	X+, r24
    355a:	9c 93       	st	X, r25
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	09 f4       	brne	.+2      	; 0x3562 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    3560:	8e c0       	rjmp	.+284    	; 0x367e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    3562:	fc 01       	movw	r30, r24
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	d8 01       	movw	r26, r16
    356a:	18 96       	adiw	r26, 0x08	; 8
    356c:	8c 91       	ld	r24, X
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	28 17       	cp	r18, r24
    3572:	39 07       	cpc	r19, r25
    3574:	14 f7       	brge	.-60     	; 0x353a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    3576:	d8 01       	movw	r26, r16
    3578:	1e 96       	adiw	r26, 0x0e	; 14
    357a:	8d 91       	ld	r24, X+
    357c:	9c 91       	ld	r25, X
    357e:	1f 97       	sbiw	r26, 0x0f	; 15
    3580:	81 93       	st	Z+, r24
    3582:	91 93       	st	Z+, r25
    3584:	2f 5f       	subi	r18, 0xFF	; 255
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	ef cf       	rjmp	.-34     	; 0x3568 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    358a:	45 2d       	mov	r20, r5
    358c:	be 01       	movw	r22, r28
    358e:	6f 5b       	subi	r22, 0xBF	; 191
    3590:	7f 4f       	sbci	r23, 0xFF	; 255
    3592:	c8 01       	movw	r24, r16
    3594:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <_ZN16PololuQTRSensors4readEPjh>
    3598:	f8 01       	movw	r30, r16
    359a:	60 84       	ldd	r6, Z+8	; 0x08
    359c:	71 2c       	mov	r7, r1
    359e:	fe 01       	movw	r30, r28
    35a0:	ef 5b       	subi	r30, 0xBF	; 191
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	c6 01       	movw	r24, r12
    35a6:	9e 01       	movw	r18, r28
    35a8:	2f 5f       	subi	r18, 0xFF	; 255
    35aa:	3f 4f       	sbci	r19, 0xFF	; 255
    35ac:	19 01       	movw	r2, r18
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	26 15       	cp	r18, r6
    35b4:	37 05       	cpc	r19, r7
    35b6:	4c f5       	brge	.+82     	; 0x360a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    35b8:	e1 14       	cp	r14, r1
    35ba:	f1 04       	cpc	r15, r1
    35bc:	89 f0       	breq	.+34     	; 0x35e0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    35be:	dc 01       	movw	r26, r24
    35c0:	6d 91       	ld	r22, X+
    35c2:	7c 91       	ld	r23, X
    35c4:	40 81       	ld	r20, Z
    35c6:	51 81       	ldd	r21, Z+1	; 0x01
    35c8:	64 17       	cp	r22, r20
    35ca:	75 07       	cpc	r23, r21
    35cc:	48 f0       	brcs	.+18     	; 0x35e0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    35ce:	d1 01       	movw	r26, r2
    35d0:	6d 91       	ld	r22, X+
    35d2:	7c 91       	ld	r23, X
    35d4:	40 81       	ld	r20, Z
    35d6:	51 81       	ldd	r21, Z+1	; 0x01
    35d8:	46 17       	cp	r20, r22
    35da:	57 07       	cpc	r21, r23
    35dc:	48 f0       	brcs	.+18     	; 0x35f0 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    35de:	0d c0       	rjmp	.+26     	; 0x35fa <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    35e0:	40 81       	ld	r20, Z
    35e2:	51 81       	ldd	r21, Z+1	; 0x01
    35e4:	dc 01       	movw	r26, r24
    35e6:	4d 93       	st	X+, r20
    35e8:	5c 93       	st	X, r21
    35ea:	e1 14       	cp	r14, r1
    35ec:	f1 04       	cpc	r15, r1
    35ee:	79 f7       	brne	.-34     	; 0x35ce <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    35f0:	40 81       	ld	r20, Z
    35f2:	51 81       	ldd	r21, Z+1	; 0x01
    35f4:	d1 01       	movw	r26, r2
    35f6:	4d 93       	st	X+, r20
    35f8:	5c 93       	st	X, r21
    35fa:	2f 5f       	subi	r18, 0xFF	; 255
    35fc:	3f 4f       	sbci	r19, 0xFF	; 255
    35fe:	b2 e0       	ldi	r27, 0x02	; 2
    3600:	2b 0e       	add	r2, r27
    3602:	31 1c       	adc	r3, r1
    3604:	32 96       	adiw	r30, 0x02	; 2
    3606:	02 96       	adiw	r24, 0x02	; 2
    3608:	d4 cf       	rjmp	.-88     	; 0x35b2 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    360a:	ef ef       	ldi	r30, 0xFF	; 255
    360c:	ee 1a       	sub	r14, r30
    360e:	fe 0a       	sbc	r15, r30
    3610:	fa e0       	ldi	r31, 0x0A	; 10
    3612:	ef 16       	cp	r14, r31
    3614:	f1 04       	cpc	r15, r1
    3616:	09 f0       	breq	.+2      	; 0x361a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    3618:	b8 cf       	rjmp	.-144    	; 0x358a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    361a:	9e 01       	movw	r18, r28
    361c:	2f 5f       	subi	r18, 0xFF	; 255
    361e:	3f 4f       	sbci	r19, 0xFF	; 255
    3620:	79 01       	movw	r14, r18
    3622:	36 01       	movw	r6, r12
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	f8 01       	movw	r30, r16
    362a:	20 85       	ldd	r18, Z+8	; 0x08
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	82 17       	cp	r24, r18
    3630:	93 07       	cpc	r25, r19
    3632:	2c f5       	brge	.+74     	; 0x367e <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    3634:	d7 01       	movw	r26, r14
    3636:	2d 91       	ld	r18, X+
    3638:	3d 91       	ld	r19, X+
    363a:	7d 01       	movw	r14, r26
    363c:	b3 01       	movw	r22, r6
    363e:	6c 19       	sub	r22, r12
    3640:	7d 09       	sbc	r23, r13
    3642:	d5 01       	movw	r26, r10
    3644:	ed 91       	ld	r30, X+
    3646:	fc 91       	ld	r31, X
    3648:	e6 0f       	add	r30, r22
    364a:	f7 1f       	adc	r31, r23
    364c:	40 81       	ld	r20, Z
    364e:	51 81       	ldd	r21, Z+1	; 0x01
    3650:	42 17       	cp	r20, r18
    3652:	53 07       	cpc	r21, r19
    3654:	10 f4       	brcc	.+4      	; 0x365a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    3656:	31 83       	std	Z+1, r19	; 0x01
    3658:	20 83       	st	Z, r18
    365a:	f3 01       	movw	r30, r6
    365c:	21 91       	ld	r18, Z+
    365e:	31 91       	ld	r19, Z+
    3660:	3f 01       	movw	r6, r30
    3662:	d4 01       	movw	r26, r8
    3664:	ed 91       	ld	r30, X+
    3666:	fc 91       	ld	r31, X
    3668:	e6 0f       	add	r30, r22
    366a:	f7 1f       	adc	r31, r23
    366c:	40 81       	ld	r20, Z
    366e:	51 81       	ldd	r21, Z+1	; 0x01
    3670:	24 17       	cp	r18, r20
    3672:	35 07       	cpc	r19, r21
    3674:	10 f4       	brcc	.+4      	; 0x367a <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    3676:	31 83       	std	Z+1, r19	; 0x01
    3678:	20 83       	st	Z, r18
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	d5 cf       	rjmp	.-86     	; 0x3628 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    367e:	c0 5a       	subi	r28, 0xA0	; 160
    3680:	df 4f       	sbci	r29, 0xFF	; 255
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	df 91       	pop	r29
    368e:	cf 91       	pop	r28
    3690:	1f 91       	pop	r17
    3692:	0f 91       	pop	r16
    3694:	ff 90       	pop	r15
    3696:	ef 90       	pop	r14
    3698:	df 90       	pop	r13
    369a:	cf 90       	pop	r12
    369c:	bf 90       	pop	r11
    369e:	af 90       	pop	r10
    36a0:	9f 90       	pop	r9
    36a2:	8f 90       	pop	r8
    36a4:	7f 90       	pop	r7
    36a6:	6f 90       	pop	r6
    36a8:	5f 90       	pop	r5
    36aa:	3f 90       	pop	r3
    36ac:	2f 90       	pop	r2
    36ae:	08 95       	ret

000036b0 <_ZN16PololuQTRSensors9calibrateEh>:
    36b0:	1f 93       	push	r17
    36b2:	cf 93       	push	r28
    36b4:	df 93       	push	r29
    36b6:	ec 01       	movw	r28, r24
    36b8:	16 2f       	mov	r17, r22
    36ba:	8f ef       	ldi	r24, 0xFF	; 255
    36bc:	86 0f       	add	r24, r22
    36be:	82 30       	cpi	r24, 0x02	; 2
    36c0:	18 f0       	brcs	.+6      	; 0x36c8 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    36c2:	66 23       	and	r22, r22
    36c4:	59 f0       	breq	.+22     	; 0x36dc <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    36c6:	14 c0       	rjmp	.+40     	; 0x36f0 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    36c8:	21 e0       	ldi	r18, 0x01	; 1
    36ca:	ae 01       	movw	r20, r28
    36cc:	4e 5f       	subi	r20, 0xFE	; 254
    36ce:	5f 4f       	sbci	r21, 0xFF	; 255
    36d0:	be 01       	movw	r22, r28
    36d2:	ce 01       	movw	r24, r28
    36d4:	0e 94 57 1a 	call	0x34ae	; 0x34ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    36d8:	12 30       	cpi	r17, 0x02	; 2
    36da:	51 f4       	brne	.+20     	; 0x36f0 <_ZN16PololuQTRSensors9calibrateEh+0x40>
    36dc:	ae 01       	movw	r20, r28
    36de:	4a 5f       	subi	r20, 0xFA	; 250
    36e0:	5f 4f       	sbci	r21, 0xFF	; 255
    36e2:	be 01       	movw	r22, r28
    36e4:	6c 5f       	subi	r22, 0xFC	; 252
    36e6:	7f 4f       	sbci	r23, 0xFF	; 255
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	ce 01       	movw	r24, r28
    36ec:	0e 94 57 1a 	call	0x34ae	; 0x34ae <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    36f0:	df 91       	pop	r29
    36f2:	cf 91       	pop	r28
    36f4:	1f 91       	pop	r17
    36f6:	08 95       	ret

000036f8 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    36f8:	a0 e0       	ldi	r26, 0x00	; 0
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	e2 e8       	ldi	r30, 0x82	; 130
    36fe:	fb e1       	ldi	r31, 0x1B	; 27
    3700:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__prologue_saves__+0x12>
    3704:	ec 01       	movw	r28, r24
    3706:	8b 01       	movw	r16, r22
    3708:	b4 2e       	mov	r11, r20
    370a:	84 2f       	mov	r24, r20
    370c:	8d 7f       	andi	r24, 0xFD	; 253
    370e:	51 f4       	brne	.+20     	; 0x3724 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    3710:	8c 81       	ldd	r24, Y+4	; 0x04
    3712:	9d 81       	ldd	r25, Y+5	; 0x05
    3714:	89 2b       	or	r24, r25
    3716:	09 f4       	brne	.+2      	; 0x371a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    3718:	97 c0       	rjmp	.+302    	; 0x3848 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    371a:	8e 81       	ldd	r24, Y+6	; 0x06
    371c:	9f 81       	ldd	r25, Y+7	; 0x07
    371e:	89 2b       	or	r24, r25
    3720:	09 f4       	brne	.+2      	; 0x3724 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    3722:	92 c0       	rjmp	.+292    	; 0x3848 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3724:	8f ef       	ldi	r24, 0xFF	; 255
    3726:	8b 0d       	add	r24, r11
    3728:	82 30       	cpi	r24, 0x02	; 2
    372a:	50 f4       	brcc	.+20     	; 0x3740 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    372c:	88 81       	ld	r24, Y
    372e:	99 81       	ldd	r25, Y+1	; 0x01
    3730:	89 2b       	or	r24, r25
    3732:	09 f4       	brne	.+2      	; 0x3736 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    3734:	89 c0       	rjmp	.+274    	; 0x3848 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	9b 81       	ldd	r25, Y+3	; 0x03
    373a:	89 2b       	or	r24, r25
    373c:	09 f4       	brne	.+2      	; 0x3740 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    373e:	84 c0       	rjmp	.+264    	; 0x3848 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3740:	4b 2d       	mov	r20, r11
    3742:	b8 01       	movw	r22, r16
    3744:	ce 01       	movw	r24, r28
    3746:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <_ZN16PololuQTRSensors4readEPjh>
    374a:	78 01       	movw	r14, r16
    374c:	00 e0       	ldi	r16, 0x00	; 0
    374e:	10 e0       	ldi	r17, 0x00	; 0
    3750:	c1 2c       	mov	r12, r1
    3752:	d1 2c       	mov	r13, r1
    3754:	88 85       	ldd	r24, Y+8	; 0x08
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	c8 16       	cp	r12, r24
    375a:	d9 06       	cpc	r13, r25
    375c:	0c f0       	brlt	.+2      	; 0x3760 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    375e:	74 c0       	rjmp	.+232    	; 0x3848 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	b8 12       	cpse	r11, r24
    3764:	0a c0       	rjmp	.+20     	; 0x377a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    3766:	ea 81       	ldd	r30, Y+2	; 0x02
    3768:	fb 81       	ldd	r31, Y+3	; 0x03
    376a:	e0 0f       	add	r30, r16
    376c:	f1 1f       	adc	r31, r17
    376e:	01 90       	ld	r0, Z+
    3770:	f0 81       	ld	r31, Z
    3772:	e0 2d       	mov	r30, r0
    3774:	a8 81       	ld	r26, Y
    3776:	b9 81       	ldd	r27, Y+1	; 0x01
    3778:	0d c0       	rjmp	.+26     	; 0x3794 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    377a:	8c 81       	ldd	r24, Y+4	; 0x04
    377c:	9d 81       	ldd	r25, Y+5	; 0x05
    377e:	2e 81       	ldd	r18, Y+6	; 0x06
    3780:	3f 81       	ldd	r19, Y+7	; 0x07
    3782:	b1 10       	cpse	r11, r1
    3784:	0c c0       	rjmp	.+24     	; 0x379e <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    3786:	f9 01       	movw	r30, r18
    3788:	e0 0f       	add	r30, r16
    378a:	f1 1f       	adc	r31, r17
    378c:	01 90       	ld	r0, Z+
    378e:	f0 81       	ld	r31, Z
    3790:	e0 2d       	mov	r30, r0
    3792:	dc 01       	movw	r26, r24
    3794:	a0 0f       	add	r26, r16
    3796:	b1 1f       	adc	r27, r17
    3798:	8d 91       	ld	r24, X+
    379a:	9c 91       	ld	r25, X
    379c:	28 c0       	rjmp	.+80     	; 0x37ee <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    379e:	fc 01       	movw	r30, r24
    37a0:	e0 0f       	add	r30, r16
    37a2:	f1 1f       	adc	r31, r17
    37a4:	40 81       	ld	r20, Z
    37a6:	51 81       	ldd	r21, Z+1	; 0x01
    37a8:	e8 81       	ld	r30, Y
    37aa:	f9 81       	ldd	r31, Y+1	; 0x01
    37ac:	e0 0f       	add	r30, r16
    37ae:	f1 1f       	adc	r31, r17
    37b0:	80 81       	ld	r24, Z
    37b2:	91 81       	ldd	r25, Z+1	; 0x01
    37b4:	ee 85       	ldd	r30, Y+14	; 0x0e
    37b6:	ff 85       	ldd	r31, Y+15	; 0x0f
    37b8:	48 17       	cp	r20, r24
    37ba:	59 07       	cpc	r21, r25
    37bc:	10 f4       	brcc	.+4      	; 0x37c2 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    37be:	cf 01       	movw	r24, r30
    37c0:	04 c0       	rjmp	.+8      	; 0x37ca <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    37c2:	8e 0f       	add	r24, r30
    37c4:	9f 1f       	adc	r25, r31
    37c6:	84 1b       	sub	r24, r20
    37c8:	95 0b       	sbc	r25, r21
    37ca:	d9 01       	movw	r26, r18
    37cc:	a0 0f       	add	r26, r16
    37ce:	b1 1f       	adc	r27, r17
    37d0:	2d 91       	ld	r18, X+
    37d2:	3c 91       	ld	r19, X
    37d4:	aa 81       	ldd	r26, Y+2	; 0x02
    37d6:	bb 81       	ldd	r27, Y+3	; 0x03
    37d8:	a0 0f       	add	r26, r16
    37da:	b1 1f       	adc	r27, r17
    37dc:	4d 91       	ld	r20, X+
    37de:	5c 91       	ld	r21, X
    37e0:	24 17       	cp	r18, r20
    37e2:	35 07       	cpc	r19, r21
    37e4:	20 f0       	brcs	.+8      	; 0x37ee <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    37e6:	e4 0f       	add	r30, r20
    37e8:	f5 1f       	adc	r31, r21
    37ea:	e2 1b       	sub	r30, r18
    37ec:	f3 0b       	sbc	r31, r19
    37ee:	e8 1b       	sub	r30, r24
    37f0:	f9 0b       	sbc	r31, r25
    37f2:	a9 f0       	breq	.+42     	; 0x381e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    37f4:	d7 01       	movw	r26, r14
    37f6:	2d 91       	ld	r18, X+
    37f8:	3c 91       	ld	r19, X
    37fa:	40 e0       	ldi	r20, 0x00	; 0
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	28 1b       	sub	r18, r24
    3800:	39 0b       	sbc	r19, r25
    3802:	41 09       	sbc	r20, r1
    3804:	51 09       	sbc	r21, r1
    3806:	a8 ee       	ldi	r26, 0xE8	; 232
    3808:	b3 e0       	ldi	r27, 0x03	; 3
    380a:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__muluhisi3>
    380e:	9f 01       	movw	r18, r30
    3810:	40 e0       	ldi	r20, 0x00	; 0
    3812:	50 e0       	ldi	r21, 0x00	; 0
    3814:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__divmodsi4>
    3818:	37 fd       	sbrc	r19, 7
    381a:	0a c0       	rjmp	.+20     	; 0x3830 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	29 3e       	cpi	r18, 0xE9	; 233
    3824:	b3 e0       	ldi	r27, 0x03	; 3
    3826:	3b 07       	cpc	r19, r27
    3828:	2c f0       	brlt	.+10     	; 0x3834 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    382a:	28 ee       	ldi	r18, 0xE8	; 232
    382c:	33 e0       	ldi	r19, 0x03	; 3
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3830:	20 e0       	ldi	r18, 0x00	; 0
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	f7 01       	movw	r30, r14
    3836:	21 93       	st	Z+, r18
    3838:	31 93       	st	Z+, r19
    383a:	7f 01       	movw	r14, r30
    383c:	ff ef       	ldi	r31, 0xFF	; 255
    383e:	cf 1a       	sub	r12, r31
    3840:	df 0a       	sbc	r13, r31
    3842:	0e 5f       	subi	r16, 0xFE	; 254
    3844:	1f 4f       	sbci	r17, 0xFF	; 255
    3846:	86 cf       	rjmp	.-244    	; 0x3754 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    384c:	e9 e0       	ldi	r30, 0x09	; 9
    384e:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__epilogue_restores__+0x12>

00003852 <_ZN16PololuQTRSensors8readLineEPjhh>:
    3852:	a0 e0       	ldi	r26, 0x00	; 0
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	ef e2       	ldi	r30, 0x2F	; 47
    3858:	fc e1       	ldi	r31, 0x1C	; 28
    385a:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__prologue_saves__>
    385e:	ec 01       	movw	r28, r24
    3860:	8b 01       	movw	r16, r22
    3862:	82 2e       	mov	r8, r18
    3864:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    3868:	28 84       	ldd	r2, Y+8	; 0x08
    386a:	e8 01       	movw	r28, r16
    386c:	41 2c       	mov	r4, r1
    386e:	51 2c       	mov	r5, r1
    3870:	32 01       	movw	r6, r4
    3872:	00 e0       	ldi	r16, 0x00	; 0
    3874:	10 e0       	ldi	r17, 0x00	; 0
    3876:	c1 2c       	mov	r12, r1
    3878:	d1 2c       	mov	r13, r1
    387a:	76 01       	movw	r14, r12
    387c:	31 2c       	mov	r3, r1
    387e:	91 2c       	mov	r9, r1
    3880:	58 ee       	ldi	r21, 0xE8	; 232
    3882:	a5 2e       	mov	r10, r21
    3884:	53 e0       	ldi	r21, 0x03	; 3
    3886:	b5 2e       	mov	r11, r21
    3888:	92 14       	cp	r9, r2
    388a:	21 f1       	breq	.+72     	; 0x38d4 <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    388c:	e9 91       	ld	r30, Y+
    388e:	f9 91       	ld	r31, Y+
    3890:	88 20       	and	r8, r8
    3892:	21 f0       	breq	.+8      	; 0x389c <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    3894:	c5 01       	movw	r24, r10
    3896:	8e 1b       	sub	r24, r30
    3898:	9f 0b       	sbc	r25, r31
    389a:	fc 01       	movw	r30, r24
    389c:	e9 3c       	cpi	r30, 0xC9	; 201
    389e:	f1 05       	cpc	r31, r1
    38a0:	24 f4       	brge	.+8      	; 0x38aa <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    38a2:	e3 33       	cpi	r30, 0x33	; 51
    38a4:	f1 05       	cpc	r31, r1
    38a6:	74 f0       	brlt	.+28     	; 0x38c4 <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    38aa:	33 24       	eor	r3, r3
    38ac:	33 94       	inc	r3
    38ae:	df 01       	movw	r26, r30
    38b0:	a3 01       	movw	r20, r6
    38b2:	92 01       	movw	r18, r4
    38b4:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__mulshisi3>
    38b8:	c6 0e       	add	r12, r22
    38ba:	d7 1e       	adc	r13, r23
    38bc:	e8 1e       	adc	r14, r24
    38be:	f9 1e       	adc	r15, r25
    38c0:	0e 0f       	add	r16, r30
    38c2:	1f 1f       	adc	r17, r31
    38c4:	93 94       	inc	r9
    38c6:	98 ee       	ldi	r25, 0xE8	; 232
    38c8:	49 0e       	add	r4, r25
    38ca:	93 e0       	ldi	r25, 0x03	; 3
    38cc:	59 1e       	adc	r5, r25
    38ce:	61 1c       	adc	r6, r1
    38d0:	71 1c       	adc	r7, r1
    38d2:	da cf       	rjmp	.-76     	; 0x3888 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    38d4:	31 10       	cpse	r3, r1
    38d6:	1e c0       	rjmp	.+60     	; 0x3914 <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    38d8:	49 2d       	mov	r20, r9
    38da:	50 e0       	ldi	r21, 0x00	; 0
    38dc:	41 50       	subi	r20, 0x01	; 1
    38de:	51 09       	sbc	r21, r1
    38e0:	24 ef       	ldi	r18, 0xF4	; 244
    38e2:	31 e0       	ldi	r19, 0x01	; 1
    38e4:	42 9f       	mul	r20, r18
    38e6:	c0 01       	movw	r24, r0
    38e8:	43 9f       	mul	r20, r19
    38ea:	90 0d       	add	r25, r0
    38ec:	52 9f       	mul	r21, r18
    38ee:	90 0d       	add	r25, r0
    38f0:	11 24       	eor	r1, r1
    38f2:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    38f6:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    38fa:	28 17       	cp	r18, r24
    38fc:	39 07       	cpc	r19, r25
    38fe:	b4 f0       	brlt	.+44     	; 0x392c <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    3900:	88 ee       	ldi	r24, 0xE8	; 232
    3902:	93 e0       	ldi	r25, 0x03	; 3
    3904:	48 9f       	mul	r20, r24
    3906:	90 01       	movw	r18, r0
    3908:	49 9f       	mul	r20, r25
    390a:	30 0d       	add	r19, r0
    390c:	58 9f       	mul	r21, r24
    390e:	30 0d       	add	r19, r0
    3910:	11 24       	eor	r1, r1
    3912:	0e c0       	rjmp	.+28     	; 0x3930 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3914:	98 01       	movw	r18, r16
    3916:	40 e0       	ldi	r20, 0x00	; 0
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	c7 01       	movw	r24, r14
    391c:	b6 01       	movw	r22, r12
    391e:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    3922:	30 93 f6 01 	sts	0x01F6, r19	; 0x8001f6 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3926:	20 93 f5 01 	sts	0x01F5, r18	; 0x8001f5 <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    392a:	02 c0       	rjmp	.+4      	; 0x3930 <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	c9 01       	movw	r24, r18
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    3936:	e2 e1       	ldi	r30, 0x12	; 18
    3938:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <__epilogue_restores__>

0000393c <_ZN16PololuQTRSensorsD1Ev>:
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	ec 01       	movw	r28, r24
    3942:	8a 81       	ldd	r24, Y+2	; 0x02
    3944:	9b 81       	ldd	r25, Y+3	; 0x03
    3946:	00 97       	sbiw	r24, 0x00	; 0
    3948:	11 f0       	breq	.+4      	; 0x394e <_ZN16PololuQTRSensorsD1Ev+0x12>
    394a:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <free>
    394e:	8e 81       	ldd	r24, Y+6	; 0x06
    3950:	9f 81       	ldd	r25, Y+7	; 0x07
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	11 f0       	breq	.+4      	; 0x395a <_ZN16PololuQTRSensorsD1Ev+0x1e>
    3956:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <free>
    395a:	88 81       	ld	r24, Y
    395c:	99 81       	ldd	r25, Y+1	; 0x01
    395e:	00 97       	sbiw	r24, 0x00	; 0
    3960:	11 f0       	breq	.+4      	; 0x3966 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    3962:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <free>
    3966:	8c 81       	ldd	r24, Y+4	; 0x04
    3968:	9d 81       	ldd	r25, Y+5	; 0x05
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	11 f0       	breq	.+4      	; 0x3972 <_ZN16PololuQTRSensorsD1Ev+0x36>
    396e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <free>
    3972:	df 91       	pop	r29
    3974:	cf 91       	pop	r28
    3976:	08 95       	ret

00003978 <__udivmodqi4>:
    3978:	99 1b       	sub	r25, r25
    397a:	79 e0       	ldi	r23, 0x09	; 9
    397c:	04 c0       	rjmp	.+8      	; 0x3986 <__udivmodqi4_ep>

0000397e <__udivmodqi4_loop>:
    397e:	99 1f       	adc	r25, r25
    3980:	96 17       	cp	r25, r22
    3982:	08 f0       	brcs	.+2      	; 0x3986 <__udivmodqi4_ep>
    3984:	96 1b       	sub	r25, r22

00003986 <__udivmodqi4_ep>:
    3986:	88 1f       	adc	r24, r24
    3988:	7a 95       	dec	r23
    398a:	c9 f7       	brne	.-14     	; 0x397e <__udivmodqi4_loop>
    398c:	80 95       	com	r24
    398e:	08 95       	ret

00003990 <__udivmodhi4>:
    3990:	aa 1b       	sub	r26, r26
    3992:	bb 1b       	sub	r27, r27
    3994:	51 e1       	ldi	r21, 0x11	; 17
    3996:	07 c0       	rjmp	.+14     	; 0x39a6 <__udivmodhi4_ep>

00003998 <__udivmodhi4_loop>:
    3998:	aa 1f       	adc	r26, r26
    399a:	bb 1f       	adc	r27, r27
    399c:	a6 17       	cp	r26, r22
    399e:	b7 07       	cpc	r27, r23
    39a0:	10 f0       	brcs	.+4      	; 0x39a6 <__udivmodhi4_ep>
    39a2:	a6 1b       	sub	r26, r22
    39a4:	b7 0b       	sbc	r27, r23

000039a6 <__udivmodhi4_ep>:
    39a6:	88 1f       	adc	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	5a 95       	dec	r21
    39ac:	a9 f7       	brne	.-22     	; 0x3998 <__udivmodhi4_loop>
    39ae:	80 95       	com	r24
    39b0:	90 95       	com	r25
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	08 95       	ret

000039b8 <__divmodhi4>:
    39b8:	97 fb       	bst	r25, 7
    39ba:	07 2e       	mov	r0, r23
    39bc:	16 f4       	brtc	.+4      	; 0x39c2 <__divmodhi4+0xa>
    39be:	00 94       	com	r0
    39c0:	07 d0       	rcall	.+14     	; 0x39d0 <__divmodhi4_neg1>
    39c2:	77 fd       	sbrc	r23, 7
    39c4:	09 d0       	rcall	.+18     	; 0x39d8 <__divmodhi4_neg2>
    39c6:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    39ca:	07 fc       	sbrc	r0, 7
    39cc:	05 d0       	rcall	.+10     	; 0x39d8 <__divmodhi4_neg2>
    39ce:	3e f4       	brtc	.+14     	; 0x39de <__divmodhi4_exit>

000039d0 <__divmodhi4_neg1>:
    39d0:	90 95       	com	r25
    39d2:	81 95       	neg	r24
    39d4:	9f 4f       	sbci	r25, 0xFF	; 255
    39d6:	08 95       	ret

000039d8 <__divmodhi4_neg2>:
    39d8:	70 95       	com	r23
    39da:	61 95       	neg	r22
    39dc:	7f 4f       	sbci	r23, 0xFF	; 255

000039de <__divmodhi4_exit>:
    39de:	08 95       	ret

000039e0 <__udivmodsi4>:
    39e0:	a1 e2       	ldi	r26, 0x21	; 33
    39e2:	1a 2e       	mov	r1, r26
    39e4:	aa 1b       	sub	r26, r26
    39e6:	bb 1b       	sub	r27, r27
    39e8:	fd 01       	movw	r30, r26
    39ea:	0d c0       	rjmp	.+26     	; 0x3a06 <__udivmodsi4_ep>

000039ec <__udivmodsi4_loop>:
    39ec:	aa 1f       	adc	r26, r26
    39ee:	bb 1f       	adc	r27, r27
    39f0:	ee 1f       	adc	r30, r30
    39f2:	ff 1f       	adc	r31, r31
    39f4:	a2 17       	cp	r26, r18
    39f6:	b3 07       	cpc	r27, r19
    39f8:	e4 07       	cpc	r30, r20
    39fa:	f5 07       	cpc	r31, r21
    39fc:	20 f0       	brcs	.+8      	; 0x3a06 <__udivmodsi4_ep>
    39fe:	a2 1b       	sub	r26, r18
    3a00:	b3 0b       	sbc	r27, r19
    3a02:	e4 0b       	sbc	r30, r20
    3a04:	f5 0b       	sbc	r31, r21

00003a06 <__udivmodsi4_ep>:
    3a06:	66 1f       	adc	r22, r22
    3a08:	77 1f       	adc	r23, r23
    3a0a:	88 1f       	adc	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	1a 94       	dec	r1
    3a10:	69 f7       	brne	.-38     	; 0x39ec <__udivmodsi4_loop>
    3a12:	60 95       	com	r22
    3a14:	70 95       	com	r23
    3a16:	80 95       	com	r24
    3a18:	90 95       	com	r25
    3a1a:	9b 01       	movw	r18, r22
    3a1c:	ac 01       	movw	r20, r24
    3a1e:	bd 01       	movw	r22, r26
    3a20:	cf 01       	movw	r24, r30
    3a22:	08 95       	ret

00003a24 <__divmodsi4>:
    3a24:	05 2e       	mov	r0, r21
    3a26:	97 fb       	bst	r25, 7
    3a28:	1e f4       	brtc	.+6      	; 0x3a30 <__divmodsi4+0xc>
    3a2a:	00 94       	com	r0
    3a2c:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <__negsi2>
    3a30:	57 fd       	sbrc	r21, 7
    3a32:	07 d0       	rcall	.+14     	; 0x3a42 <__divmodsi4_neg2>
    3a34:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <__udivmodsi4>
    3a38:	07 fc       	sbrc	r0, 7
    3a3a:	03 d0       	rcall	.+6      	; 0x3a42 <__divmodsi4_neg2>
    3a3c:	4e f4       	brtc	.+18     	; 0x3a50 <__divmodsi4_exit>
    3a3e:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__negsi2>

00003a42 <__divmodsi4_neg2>:
    3a42:	50 95       	com	r21
    3a44:	40 95       	com	r20
    3a46:	30 95       	com	r19
    3a48:	21 95       	neg	r18
    3a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4c:	4f 4f       	sbci	r20, 0xFF	; 255
    3a4e:	5f 4f       	sbci	r21, 0xFF	; 255

00003a50 <__divmodsi4_exit>:
    3a50:	08 95       	ret

00003a52 <__negsi2>:
    3a52:	90 95       	com	r25
    3a54:	80 95       	com	r24
    3a56:	70 95       	com	r23
    3a58:	61 95       	neg	r22
    3a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a60:	08 95       	ret

00003a62 <__tablejump2__>:
    3a62:	ee 0f       	add	r30, r30
    3a64:	ff 1f       	adc	r31, r31
    3a66:	05 90       	lpm	r0, Z+
    3a68:	f4 91       	lpm	r31, Z
    3a6a:	e0 2d       	mov	r30, r0
    3a6c:	09 94       	ijmp

00003a6e <__umulhisi3>:
    3a6e:	a2 9f       	mul	r26, r18
    3a70:	b0 01       	movw	r22, r0
    3a72:	b3 9f       	mul	r27, r19
    3a74:	c0 01       	movw	r24, r0
    3a76:	a3 9f       	mul	r26, r19
    3a78:	70 0d       	add	r23, r0
    3a7a:	81 1d       	adc	r24, r1
    3a7c:	11 24       	eor	r1, r1
    3a7e:	91 1d       	adc	r25, r1
    3a80:	b2 9f       	mul	r27, r18
    3a82:	70 0d       	add	r23, r0
    3a84:	81 1d       	adc	r24, r1
    3a86:	11 24       	eor	r1, r1
    3a88:	91 1d       	adc	r25, r1
    3a8a:	08 95       	ret

00003a8c <__muluhisi3>:
    3a8c:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__umulhisi3>
    3a90:	a5 9f       	mul	r26, r21
    3a92:	90 0d       	add	r25, r0
    3a94:	b4 9f       	mul	r27, r20
    3a96:	90 0d       	add	r25, r0
    3a98:	a4 9f       	mul	r26, r20
    3a9a:	80 0d       	add	r24, r0
    3a9c:	91 1d       	adc	r25, r1
    3a9e:	11 24       	eor	r1, r1
    3aa0:	08 95       	ret

00003aa2 <__mulshisi3>:
    3aa2:	b7 ff       	sbrs	r27, 7
    3aa4:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__muluhisi3>

00003aa8 <__mulohisi3>:
    3aa8:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <__muluhisi3>
    3aac:	82 1b       	sub	r24, r18
    3aae:	93 0b       	sbc	r25, r19
    3ab0:	08 95       	ret

00003ab2 <__prologue_saves__>:
    3ab2:	2f 92       	push	r2
    3ab4:	3f 92       	push	r3
    3ab6:	4f 92       	push	r4
    3ab8:	5f 92       	push	r5
    3aba:	6f 92       	push	r6
    3abc:	7f 92       	push	r7
    3abe:	8f 92       	push	r8
    3ac0:	9f 92       	push	r9
    3ac2:	af 92       	push	r10
    3ac4:	bf 92       	push	r11
    3ac6:	cf 92       	push	r12
    3ac8:	df 92       	push	r13
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	cf 93       	push	r28
    3ad4:	df 93       	push	r29
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	ca 1b       	sub	r28, r26
    3adc:	db 0b       	sbc	r29, r27
    3ade:	0f b6       	in	r0, 0x3f	; 63
    3ae0:	f8 94       	cli
    3ae2:	de bf       	out	0x3e, r29	; 62
    3ae4:	0f be       	out	0x3f, r0	; 63
    3ae6:	cd bf       	out	0x3d, r28	; 61
    3ae8:	09 94       	ijmp

00003aea <__epilogue_restores__>:
    3aea:	2a 88       	ldd	r2, Y+18	; 0x12
    3aec:	39 88       	ldd	r3, Y+17	; 0x11
    3aee:	48 88       	ldd	r4, Y+16	; 0x10
    3af0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3af2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3af4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3af6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3af8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3afa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3afc:	b9 84       	ldd	r11, Y+9	; 0x09
    3afe:	c8 84       	ldd	r12, Y+8	; 0x08
    3b00:	df 80       	ldd	r13, Y+7	; 0x07
    3b02:	ee 80       	ldd	r14, Y+6	; 0x06
    3b04:	fd 80       	ldd	r15, Y+5	; 0x05
    3b06:	0c 81       	ldd	r16, Y+4	; 0x04
    3b08:	1b 81       	ldd	r17, Y+3	; 0x03
    3b0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3b0c:	b9 81       	ldd	r27, Y+1	; 0x01
    3b0e:	ce 0f       	add	r28, r30
    3b10:	d1 1d       	adc	r29, r1
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	ed 01       	movw	r28, r26
    3b1e:	08 95       	ret

00003b20 <malloc>:
    3b20:	0f 93       	push	r16
    3b22:	1f 93       	push	r17
    3b24:	cf 93       	push	r28
    3b26:	df 93       	push	r29
    3b28:	82 30       	cpi	r24, 0x02	; 2
    3b2a:	91 05       	cpc	r25, r1
    3b2c:	10 f4       	brcc	.+4      	; 0x3b32 <malloc+0x12>
    3b2e:	82 e0       	ldi	r24, 0x02	; 2
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <__flp>
    3b36:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <__flp+0x1>
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	a0 e0       	ldi	r26, 0x00	; 0
    3b40:	b0 e0       	ldi	r27, 0x00	; 0
    3b42:	30 97       	sbiw	r30, 0x00	; 0
    3b44:	19 f1       	breq	.+70     	; 0x3b8c <malloc+0x6c>
    3b46:	40 81       	ld	r20, Z
    3b48:	51 81       	ldd	r21, Z+1	; 0x01
    3b4a:	02 81       	ldd	r16, Z+2	; 0x02
    3b4c:	13 81       	ldd	r17, Z+3	; 0x03
    3b4e:	48 17       	cp	r20, r24
    3b50:	59 07       	cpc	r21, r25
    3b52:	c8 f0       	brcs	.+50     	; 0x3b86 <malloc+0x66>
    3b54:	84 17       	cp	r24, r20
    3b56:	95 07       	cpc	r25, r21
    3b58:	69 f4       	brne	.+26     	; 0x3b74 <malloc+0x54>
    3b5a:	10 97       	sbiw	r26, 0x00	; 0
    3b5c:	31 f0       	breq	.+12     	; 0x3b6a <malloc+0x4a>
    3b5e:	12 96       	adiw	r26, 0x02	; 2
    3b60:	0c 93       	st	X, r16
    3b62:	12 97       	sbiw	r26, 0x02	; 2
    3b64:	13 96       	adiw	r26, 0x03	; 3
    3b66:	1c 93       	st	X, r17
    3b68:	27 c0       	rjmp	.+78     	; 0x3bb8 <malloc+0x98>
    3b6a:	00 93 1d 02 	sts	0x021D, r16	; 0x80021d <__flp>
    3b6e:	10 93 1e 02 	sts	0x021E, r17	; 0x80021e <__flp+0x1>
    3b72:	22 c0       	rjmp	.+68     	; 0x3bb8 <malloc+0x98>
    3b74:	21 15       	cp	r18, r1
    3b76:	31 05       	cpc	r19, r1
    3b78:	19 f0       	breq	.+6      	; 0x3b80 <malloc+0x60>
    3b7a:	42 17       	cp	r20, r18
    3b7c:	53 07       	cpc	r21, r19
    3b7e:	18 f4       	brcc	.+6      	; 0x3b86 <malloc+0x66>
    3b80:	9a 01       	movw	r18, r20
    3b82:	bd 01       	movw	r22, r26
    3b84:	ef 01       	movw	r28, r30
    3b86:	df 01       	movw	r26, r30
    3b88:	f8 01       	movw	r30, r16
    3b8a:	db cf       	rjmp	.-74     	; 0x3b42 <malloc+0x22>
    3b8c:	21 15       	cp	r18, r1
    3b8e:	31 05       	cpc	r19, r1
    3b90:	f9 f0       	breq	.+62     	; 0x3bd0 <malloc+0xb0>
    3b92:	28 1b       	sub	r18, r24
    3b94:	39 0b       	sbc	r19, r25
    3b96:	24 30       	cpi	r18, 0x04	; 4
    3b98:	31 05       	cpc	r19, r1
    3b9a:	80 f4       	brcc	.+32     	; 0x3bbc <malloc+0x9c>
    3b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba0:	61 15       	cp	r22, r1
    3ba2:	71 05       	cpc	r23, r1
    3ba4:	21 f0       	breq	.+8      	; 0x3bae <malloc+0x8e>
    3ba6:	fb 01       	movw	r30, r22
    3ba8:	93 83       	std	Z+3, r25	; 0x03
    3baa:	82 83       	std	Z+2, r24	; 0x02
    3bac:	04 c0       	rjmp	.+8      	; 0x3bb6 <malloc+0x96>
    3bae:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <__flp+0x1>
    3bb2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <__flp>
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	32 96       	adiw	r30, 0x02	; 2
    3bba:	44 c0       	rjmp	.+136    	; 0x3c44 <malloc+0x124>
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e2 0f       	add	r30, r18
    3bc0:	f3 1f       	adc	r31, r19
    3bc2:	81 93       	st	Z+, r24
    3bc4:	91 93       	st	Z+, r25
    3bc6:	22 50       	subi	r18, 0x02	; 2
    3bc8:	31 09       	sbc	r19, r1
    3bca:	39 83       	std	Y+1, r19	; 0x01
    3bcc:	28 83       	st	Y, r18
    3bce:	3a c0       	rjmp	.+116    	; 0x3c44 <malloc+0x124>
    3bd0:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3bd4:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3bd8:	23 2b       	or	r18, r19
    3bda:	41 f4       	brne	.+16     	; 0x3bec <malloc+0xcc>
    3bdc:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    3be0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    3be4:	30 93 1c 02 	sts	0x021C, r19	; 0x80021c <__brkval+0x1>
    3be8:	20 93 1b 02 	sts	0x021B, r18	; 0x80021b <__brkval>
    3bec:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    3bf0:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    3bf4:	21 15       	cp	r18, r1
    3bf6:	31 05       	cpc	r19, r1
    3bf8:	41 f4       	brne	.+16     	; 0x3c0a <malloc+0xea>
    3bfa:	2d b7       	in	r18, 0x3d	; 61
    3bfc:	3e b7       	in	r19, 0x3e	; 62
    3bfe:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    3c02:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    3c06:	24 1b       	sub	r18, r20
    3c08:	35 0b       	sbc	r19, r21
    3c0a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <__brkval>
    3c0e:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <__brkval+0x1>
    3c12:	e2 17       	cp	r30, r18
    3c14:	f3 07       	cpc	r31, r19
    3c16:	a0 f4       	brcc	.+40     	; 0x3c40 <malloc+0x120>
    3c18:	2e 1b       	sub	r18, r30
    3c1a:	3f 0b       	sbc	r19, r31
    3c1c:	28 17       	cp	r18, r24
    3c1e:	39 07       	cpc	r19, r25
    3c20:	78 f0       	brcs	.+30     	; 0x3c40 <malloc+0x120>
    3c22:	ac 01       	movw	r20, r24
    3c24:	4e 5f       	subi	r20, 0xFE	; 254
    3c26:	5f 4f       	sbci	r21, 0xFF	; 255
    3c28:	24 17       	cp	r18, r20
    3c2a:	35 07       	cpc	r19, r21
    3c2c:	48 f0       	brcs	.+18     	; 0x3c40 <malloc+0x120>
    3c2e:	4e 0f       	add	r20, r30
    3c30:	5f 1f       	adc	r21, r31
    3c32:	50 93 1c 02 	sts	0x021C, r21	; 0x80021c <__brkval+0x1>
    3c36:	40 93 1b 02 	sts	0x021B, r20	; 0x80021b <__brkval>
    3c3a:	81 93       	st	Z+, r24
    3c3c:	91 93       	st	Z+, r25
    3c3e:	02 c0       	rjmp	.+4      	; 0x3c44 <malloc+0x124>
    3c40:	e0 e0       	ldi	r30, 0x00	; 0
    3c42:	f0 e0       	ldi	r31, 0x00	; 0
    3c44:	cf 01       	movw	r24, r30
    3c46:	df 91       	pop	r29
    3c48:	cf 91       	pop	r28
    3c4a:	1f 91       	pop	r17
    3c4c:	0f 91       	pop	r16
    3c4e:	08 95       	ret

00003c50 <free>:
    3c50:	cf 93       	push	r28
    3c52:	df 93       	push	r29
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <free+0xa>
    3c58:	81 c0       	rjmp	.+258    	; 0x3d5c <free+0x10c>
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	32 97       	sbiw	r30, 0x02	; 2
    3c5e:	13 82       	std	Z+3, r1	; 0x03
    3c60:	12 82       	std	Z+2, r1	; 0x02
    3c62:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <__flp>
    3c66:	b0 91 1e 02 	lds	r27, 0x021E	; 0x80021e <__flp+0x1>
    3c6a:	10 97       	sbiw	r26, 0x00	; 0
    3c6c:	81 f4       	brne	.+32     	; 0x3c8e <free+0x3e>
    3c6e:	20 81       	ld	r18, Z
    3c70:	31 81       	ldd	r19, Z+1	; 0x01
    3c72:	82 0f       	add	r24, r18
    3c74:	93 1f       	adc	r25, r19
    3c76:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3c7a:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3c7e:	28 17       	cp	r18, r24
    3c80:	39 07       	cpc	r19, r25
    3c82:	51 f5       	brne	.+84     	; 0x3cd8 <free+0x88>
    3c84:	f0 93 1c 02 	sts	0x021C, r31	; 0x80021c <__brkval+0x1>
    3c88:	e0 93 1b 02 	sts	0x021B, r30	; 0x80021b <__brkval>
    3c8c:	67 c0       	rjmp	.+206    	; 0x3d5c <free+0x10c>
    3c8e:	ed 01       	movw	r28, r26
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	ce 17       	cp	r28, r30
    3c96:	df 07       	cpc	r29, r31
    3c98:	40 f4       	brcc	.+16     	; 0x3caa <free+0x5a>
    3c9a:	4a 81       	ldd	r20, Y+2	; 0x02
    3c9c:	5b 81       	ldd	r21, Y+3	; 0x03
    3c9e:	9e 01       	movw	r18, r28
    3ca0:	41 15       	cp	r20, r1
    3ca2:	51 05       	cpc	r21, r1
    3ca4:	f1 f0       	breq	.+60     	; 0x3ce2 <free+0x92>
    3ca6:	ea 01       	movw	r28, r20
    3ca8:	f5 cf       	rjmp	.-22     	; 0x3c94 <free+0x44>
    3caa:	d3 83       	std	Z+3, r29	; 0x03
    3cac:	c2 83       	std	Z+2, r28	; 0x02
    3cae:	40 81       	ld	r20, Z
    3cb0:	51 81       	ldd	r21, Z+1	; 0x01
    3cb2:	84 0f       	add	r24, r20
    3cb4:	95 1f       	adc	r25, r21
    3cb6:	c8 17       	cp	r28, r24
    3cb8:	d9 07       	cpc	r29, r25
    3cba:	59 f4       	brne	.+22     	; 0x3cd2 <free+0x82>
    3cbc:	88 81       	ld	r24, Y
    3cbe:	99 81       	ldd	r25, Y+1	; 0x01
    3cc0:	84 0f       	add	r24, r20
    3cc2:	95 1f       	adc	r25, r21
    3cc4:	02 96       	adiw	r24, 0x02	; 2
    3cc6:	91 83       	std	Z+1, r25	; 0x01
    3cc8:	80 83       	st	Z, r24
    3cca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cce:	93 83       	std	Z+3, r25	; 0x03
    3cd0:	82 83       	std	Z+2, r24	; 0x02
    3cd2:	21 15       	cp	r18, r1
    3cd4:	31 05       	cpc	r19, r1
    3cd6:	29 f4       	brne	.+10     	; 0x3ce2 <free+0x92>
    3cd8:	f0 93 1e 02 	sts	0x021E, r31	; 0x80021e <__flp+0x1>
    3cdc:	e0 93 1d 02 	sts	0x021D, r30	; 0x80021d <__flp>
    3ce0:	3d c0       	rjmp	.+122    	; 0x3d5c <free+0x10c>
    3ce2:	e9 01       	movw	r28, r18
    3ce4:	fb 83       	std	Y+3, r31	; 0x03
    3ce6:	ea 83       	std	Y+2, r30	; 0x02
    3ce8:	49 91       	ld	r20, Y+
    3cea:	59 91       	ld	r21, Y+
    3cec:	c4 0f       	add	r28, r20
    3cee:	d5 1f       	adc	r29, r21
    3cf0:	ec 17       	cp	r30, r28
    3cf2:	fd 07       	cpc	r31, r29
    3cf4:	61 f4       	brne	.+24     	; 0x3d0e <free+0xbe>
    3cf6:	80 81       	ld	r24, Z
    3cf8:	91 81       	ldd	r25, Z+1	; 0x01
    3cfa:	84 0f       	add	r24, r20
    3cfc:	95 1f       	adc	r25, r21
    3cfe:	02 96       	adiw	r24, 0x02	; 2
    3d00:	e9 01       	movw	r28, r18
    3d02:	99 83       	std	Y+1, r25	; 0x01
    3d04:	88 83       	st	Y, r24
    3d06:	82 81       	ldd	r24, Z+2	; 0x02
    3d08:	93 81       	ldd	r25, Z+3	; 0x03
    3d0a:	9b 83       	std	Y+3, r25	; 0x03
    3d0c:	8a 83       	std	Y+2, r24	; 0x02
    3d0e:	e0 e0       	ldi	r30, 0x00	; 0
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	12 96       	adiw	r26, 0x02	; 2
    3d14:	8d 91       	ld	r24, X+
    3d16:	9c 91       	ld	r25, X
    3d18:	13 97       	sbiw	r26, 0x03	; 3
    3d1a:	00 97       	sbiw	r24, 0x00	; 0
    3d1c:	19 f0       	breq	.+6      	; 0x3d24 <free+0xd4>
    3d1e:	fd 01       	movw	r30, r26
    3d20:	dc 01       	movw	r26, r24
    3d22:	f7 cf       	rjmp	.-18     	; 0x3d12 <free+0xc2>
    3d24:	8d 91       	ld	r24, X+
    3d26:	9c 91       	ld	r25, X
    3d28:	11 97       	sbiw	r26, 0x01	; 1
    3d2a:	9d 01       	movw	r18, r26
    3d2c:	2e 5f       	subi	r18, 0xFE	; 254
    3d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d30:	82 0f       	add	r24, r18
    3d32:	93 1f       	adc	r25, r19
    3d34:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <__brkval>
    3d38:	30 91 1c 02 	lds	r19, 0x021C	; 0x80021c <__brkval+0x1>
    3d3c:	28 17       	cp	r18, r24
    3d3e:	39 07       	cpc	r19, r25
    3d40:	69 f4       	brne	.+26     	; 0x3d5c <free+0x10c>
    3d42:	30 97       	sbiw	r30, 0x00	; 0
    3d44:	29 f4       	brne	.+10     	; 0x3d50 <free+0x100>
    3d46:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__flp+0x1>
    3d4a:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp>
    3d4e:	02 c0       	rjmp	.+4      	; 0x3d54 <free+0x104>
    3d50:	13 82       	std	Z+3, r1	; 0x03
    3d52:	12 82       	std	Z+2, r1	; 0x02
    3d54:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <__brkval+0x1>
    3d58:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <__brkval>
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	08 95       	ret

00003d62 <strncat>:
    3d62:	fb 01       	movw	r30, r22
    3d64:	dc 01       	movw	r26, r24
    3d66:	0d 90       	ld	r0, X+
    3d68:	00 20       	and	r0, r0
    3d6a:	e9 f7       	brne	.-6      	; 0x3d66 <strncat+0x4>
    3d6c:	11 97       	sbiw	r26, 0x01	; 1
    3d6e:	41 50       	subi	r20, 0x01	; 1
    3d70:	50 40       	sbci	r21, 0x00	; 0
    3d72:	28 f0       	brcs	.+10     	; 0x3d7e <strncat+0x1c>
    3d74:	01 90       	ld	r0, Z+
    3d76:	00 20       	and	r0, r0
    3d78:	0d 92       	st	X+, r0
    3d7a:	c9 f7       	brne	.-14     	; 0x3d6e <strncat+0xc>
    3d7c:	08 95       	ret
    3d7e:	1c 92       	st	X, r1
    3d80:	08 95       	ret

00003d82 <__do_global_dtors>:
    3d82:	10 e0       	ldi	r17, 0x00	; 0
    3d84:	c2 e4       	ldi	r28, 0x42	; 66
    3d86:	d0 e0       	ldi	r29, 0x00	; 0
    3d88:	04 c0       	rjmp	.+8      	; 0x3d92 <__do_global_dtors+0x10>
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <__tablejump2__>
    3d90:	21 96       	adiw	r28, 0x01	; 1
    3d92:	c3 34       	cpi	r28, 0x43	; 67
    3d94:	d1 07       	cpc	r29, r17
    3d96:	c9 f7       	brne	.-14     	; 0x3d8a <__do_global_dtors+0x8>
    3d98:	f8 94       	cli

00003d9a <__stop_program>:
    3d9a:	ff cf       	rjmp	.-2      	; 0x3d9a <__stop_program>
