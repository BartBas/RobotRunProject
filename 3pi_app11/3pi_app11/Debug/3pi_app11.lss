
3pi_app11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00003886  0000391a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003886  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800194  00800194  000039ae  2**0
                  ALLOC
  3 .stab         00007998  00000000  00000000  000039b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a086  00000000  00000000  0000b348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000041  00000000  00000000  000153ce  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00015410  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000001c0  00000000  00000000  00015450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003381  00000000  00000000  00015610  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000011cf  00000000  00000000  00018991  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001f6f  00000000  00000000  00019b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000548  00000000  00000000  0001bad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000009ff  00000000  00000000  0001c018  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000015a5  00000000  00000000  0001ca17  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000001d8  00000000  00000000  0001dfbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 23 01 	jmp	0x246	; 0x246 <__dtors_end>
       4:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
       8:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
       c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      10:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      14:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      18:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      1c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      20:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      24:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__vector_9>
      28:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      2c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      30:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      34:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__vector_13>
      38:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      3c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      40:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      44:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      48:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__vector_18>
      4c:	0c 94 35 14 	jmp	0x286a	; 0x286a <__vector_19>
      50:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      54:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      58:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      5c:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      60:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      64:	0c 94 40 01 	jmp	0x280	; 0x280 <__bad_interrupt>
      68:	5d 06       	cpc	r5, r29
      6a:	8b 06       	cpc	r8, r27
      6c:	f6 06       	cpc	r15, r22
      6e:	61 06       	cpc	r6, r17
      70:	70 06       	cpc	r7, r16
      72:	7f 06       	cpc	r7, r31
      74:	61 06       	cpc	r6, r17
      76:	61 06       	cpc	r6, r17
      78:	61 06       	cpc	r6, r17

0000007a <__trampolines_end>:
      7a:	21 20       	and	r2, r1
      7c:	4f 35       	cpi	r20, 0x5F	; 95
      7e:	20 4c       	sbci	r18, 0xC0	; 192
      80:	31 36       	cpi	r19, 0x61	; 97
      82:	20 61       	ori	r18, 0x10	; 16
      84:	67 61       	ori	r22, 0x17	; 23
      86:	66 61       	ori	r22, 0x16	; 22
      88:	65 61       	ori	r22, 0x15	; 21
      8a:	20 64       	ori	r18, 0x40	; 64
      8c:	61 63       	ori	r22, 0x31	; 49
      8e:	2b 61       	ori	r18, 0x1B	; 27
      90:	64 61       	ori	r22, 0x14	; 20
      92:	65 61       	ori	r22, 0x15	; 21
      94:	20 66       	ori	r18, 0x60	; 96
      96:	61 3c       	cpi	r22, 0xC1	; 193
      98:	61 61       	ori	r22, 0x11	; 17
      9a:	3c 62       	ori	r19, 0x2C	; 44
      9c:	61 63       	ori	r22, 0x31	; 49
      9e:	23 61       	ori	r18, 0x13	; 19
      a0:	20 64       	ori	r18, 0x40	; 64
      a2:	61 63       	ori	r22, 0x31	; 49
      a4:	23 61       	ori	r18, 0x13	; 19
      a6:	64 61       	ori	r22, 0x14	; 20
      a8:	65 61       	ori	r22, 0x15	; 21
      aa:	20 66       	ori	r18, 0x60	; 96
      ac:	4f 36       	cpi	r20, 0x6F	; 111
      ae:	20 64       	ori	r18, 0x40	; 64
      b0:	63 64       	ori	r22, 0x43	; 67
      b2:	3c 62       	ori	r19, 0x2C	; 44
      b4:	2d 64       	ori	r18, 0x4D	; 77
      b6:	3c 61       	ori	r19, 0x1C	; 28
      b8:	64 3c       	cpi	r22, 0xC4	; 196
      ba:	67 20       	and	r6, r7
      bc:	64 3c       	cpi	r22, 0xC4	; 196
      be:	66 2b       	or	r22, r22
      c0:	64 3c       	cpi	r22, 0xC4	; 196
      c2:	67 64       	ori	r22, 0x47	; 71
      c4:	3c 61       	ori	r19, 0x1C	; 28
      c6:	64 3c       	cpi	r22, 0xC4	; 196
      c8:	62 2d       	mov	r22, r2
      ca:	20 64       	ori	r18, 0x40	; 64
      cc:	3c 64       	ori	r19, 0x4C	; 76
      ce:	64 3c       	cpi	r22, 0xC4	; 196
      d0:	65 64       	ori	r22, 0x45	; 69
      d2:	3c 66       	ori	r19, 0x6C	; 108
      d4:	2b 64       	ori	r18, 0x4B	; 75
      d6:	3c 67       	ori	r19, 0x7C	; 124
      d8:	20 64       	ori	r18, 0x40	; 64
      da:	3c 66       	ori	r19, 0x6C	; 108
      dc:	2b 64       	ori	r18, 0x4B	; 75
      de:	3c 67       	ori	r19, 0x7C	; 124
      e0:	64 3c       	cpi	r22, 0xC4	; 196
      e2:	61 64       	ori	r22, 0x41	; 65
      e4:	4c 38       	cpi	r20, 0x8C	; 140
      e6:	20 4d       	sbci	r18, 0xD0	; 208
      e8:	53 20       	and	r5, r3
      ea:	3c 62       	ori	r19, 0x2C	; 44
      ec:	2d 64       	ori	r18, 0x4D	; 77
      ee:	3c 62       	ori	r19, 0x2C	; 44
      f0:	2d 64       	ori	r18, 0x4D	; 77
      f2:	20 4d       	sbci	r18, 0xD0	; 208
      f4:	4c 65       	ori	r20, 0x5C	; 92
      f6:	2d 3c       	cpi	r18, 0xCD	; 205
      f8:	67 65       	ori	r22, 0x57	; 87
      fa:	2d 3c       	cpi	r18, 0xCD	; 205
      fc:	67 20       	and	r6, r7
      fe:	4d 53       	subi	r20, 0x3D	; 61
     100:	63 3c       	cpi	r22, 0xC3	; 195
     102:	61 63       	ori	r22, 0x31	; 49
     104:	3c 61       	ori	r19, 0x1C	; 28
     106:	20 4d       	sbci	r18, 0xD0	; 208
     108:	4c 20       	and	r4, r12
     10a:	64 3c       	cpi	r22, 0xC4	; 196
     10c:	66 64       	ori	r22, 0x46	; 70
     10e:	3c 66       	ori	r19, 0x6C	; 108
     110:	20 4f       	sbci	r18, 0xF0	; 240
     112:	35 20       	and	r3, r5
     114:	4d 53       	subi	r20, 0x3D	; 61
     116:	20 62       	ori	r18, 0x20	; 32
     118:	2d 67       	ori	r18, 0x7D	; 125
     11a:	62 2d       	mov	r22, r2
     11c:	67 4d       	sbci	r22, 0xD7	; 215
     11e:	4c 20       	and	r4, r12
     120:	3e 63       	ori	r19, 0x3E	; 62
     122:	23 65       	ori	r18, 0x53	; 83
     124:	3e 63       	ori	r19, 0x3E	; 62
     126:	23 65       	ori	r18, 0x53	; 83
     128:	20 4d       	sbci	r18, 0xD0	; 208
     12a:	53 20       	and	r5, r3
     12c:	61 66       	ori	r22, 0x61	; 97
     12e:	61 66       	ori	r22, 0x61	; 97
     130:	20 4d       	sbci	r18, 0xD0	; 208
     132:	4c 20       	and	r4, r12
     134:	67 63       	ori	r22, 0x37	; 55
     136:	23 67       	ori	r18, 0x73	; 115
     138:	63 23       	and	r22, r19
     13a:	20 4d       	sbci	r18, 0xD0	; 208
     13c:	53 20       	and	r5, r3
     13e:	66 64       	ori	r22, 0x46	; 70
     140:	66 64       	ori	r22, 0x46	; 70
     142:	20 4d       	sbci	r18, 0xD0	; 208
     144:	4c 20       	and	r4, r12
     146:	65 3c       	cpi	r22, 0xC5	; 197
     148:	62 2d       	mov	r22, r2
     14a:	65 3c       	cpi	r22, 0xC5	; 197
     14c:	62 2d       	mov	r22, r2
     14e:	4f 36       	cpi	r20, 0x6F	; 111
     150:	20 4c       	sbci	r18, 0xC0	; 192
     152:	31 36       	cpi	r19, 0x61	; 97
     154:	72 61       	ori	r23, 0x12	; 18
     156:	67 61       	ori	r22, 0x17	; 23
     158:	66 61       	ori	r22, 0x16	; 22
     15a:	65 61       	ori	r22, 0x15	; 21
     15c:	20 64       	ori	r18, 0x40	; 64
     15e:	61 63       	ori	r22, 0x31	; 49
     160:	23 61       	ori	r18, 0x13	; 19
     162:	64 61       	ori	r22, 0x14	; 20
     164:	65 61       	ori	r22, 0x15	; 21
     166:	20 66       	ori	r18, 0x60	; 96
     168:	61 3c       	cpi	r22, 0xC1	; 193
     16a:	61 61       	ori	r22, 0x11	; 17
     16c:	3c 62       	ori	r19, 0x2C	; 44
     16e:	61 63       	ori	r22, 0x31	; 49
     170:	23 61       	ori	r18, 0x13	; 19
     172:	20 64       	ori	r18, 0x40	; 64
     174:	61 63       	ori	r22, 0x31	; 49
     176:	23 61       	ori	r18, 0x13	; 19
     178:	64 61       	ori	r22, 0x14	; 20
     17a:	65 61       	ori	r22, 0x15	; 21
     17c:	20 66       	ori	r18, 0x60	; 96
     17e:	61 65       	ori	r22, 0x51	; 81
     180:	61 64       	ori	r22, 0x41	; 65
     182:	61 63       	ori	r22, 0x31	; 49
     184:	61 3c       	cpi	r22, 0xC1	; 193
     186:	62 2d       	mov	r22, r2
     188:	61 63       	ori	r22, 0x31	; 49
     18a:	61 64       	ori	r22, 0x41	; 65
     18c:	67 3c       	cpi	r22, 0xC7	; 199
     18e:	62 2d       	mov	r22, r2
     190:	67 20       	and	r6, r7
     192:	65 67       	ori	r22, 0x75	; 117
     194:	64 67       	ori	r22, 0x74	; 116
     196:	63 67       	ori	r22, 0x73	; 115
     198:	3c 62       	ori	r19, 0x2C	; 44
     19a:	2d 67       	ori	r18, 0x7D	; 125
     19c:	20 3c       	cpi	r18, 0xC0	; 192
     19e:	61 67       	ori	r22, 0x71	; 113
     1a0:	3c 62       	ori	r19, 0x2C	; 44
     1a2:	2d 67       	ori	r18, 0x7D	; 125
     1a4:	63 66       	ori	r22, 0x63	; 99
     1a6:	3c 61       	ori	r19, 0x1C	; 28
     1a8:	66 20       	and	r6, r6
     1aa:	64 66       	ori	r22, 0x64	; 100
     1ac:	63 66       	ori	r22, 0x63	; 99
     1ae:	3c 62       	ori	r19, 0x2C	; 44
     1b0:	2d 66       	ori	r18, 0x6D	; 109
     1b2:	3c 61       	ori	r19, 0x1C	; 28
     1b4:	66 3c       	cpi	r22, 0xC6	; 198
     1b6:	67 66       	ori	r22, 0x67	; 103
     1b8:	3c 61       	ori	r19, 0x1C	; 28
     1ba:	66 3c       	cpi	r22, 0xC6	; 198
     1bc:	62 2d       	mov	r22, r2
     1be:	65 3c       	cpi	r22, 0xC5	; 197
     1c0:	67 65       	ori	r22, 0x57	; 87
     1c2:	20 63       	ori	r18, 0x30	; 48
     1c4:	23 65       	ori	r18, 0x53	; 83
     1c6:	3c 62       	ori	r19, 0x2C	; 44
     1c8:	2d 65       	ori	r18, 0x5D	; 93
     1ca:	3c 61       	ori	r19, 0x1C	; 28
     1cc:	65 3c       	cpi	r22, 0xC5	; 197
     1ce:	67 65       	ori	r22, 0x57	; 87
     1d0:	20 3c       	cpi	r18, 0xC0	; 192
     1d2:	66 65       	ori	r22, 0x56	; 86
     1d4:	3c 67       	ori	r19, 0x7C	; 124
     1d6:	65 3c       	cpi	r22, 0xC5	; 197
     1d8:	61 64       	ori	r22, 0x41	; 65
     1da:	3c 66       	ori	r19, 0x6C	; 108
     1dc:	64 4f       	sbci	r22, 0xF4	; 244
     1de:	35 20       	and	r3, r5
     1e0:	65 3e       	cpi	r22, 0xE5	; 229
     1e2:	65 65       	ori	r22, 0x55	; 85
     1e4:	3e 65       	ori	r19, 0x5E	; 94
     1e6:	66 3e       	cpi	r22, 0xE6	; 230
     1e8:	64 66       	ori	r22, 0x64	; 100
     1ea:	3e 64       	ori	r19, 0x4E	; 78
     1ec:	20 62       	ori	r18, 0x20	; 32
     1ee:	2d 3e       	cpi	r18, 0xED	; 237
     1f0:	63 23       	and	r22, r19
     1f2:	62 2d       	mov	r22, r2
     1f4:	3e 63       	ori	r19, 0x3E	; 62
     1f6:	23 61       	ori	r18, 0x13	; 19
     1f8:	3e 64       	ori	r19, 0x4E	; 78
     1fa:	66 3e       	cpi	r22, 0xE6	; 230
     1fc:	64 20       	and	r6, r4
     1fe:	65 3e       	cpi	r22, 0xE5	; 229
     200:	65 65       	ori	r22, 0x55	; 85
     202:	3e 65       	ori	r19, 0x5E	; 94
     204:	66 3e       	cpi	r22, 0xE6	; 230
     206:	64 66       	ori	r22, 0x64	; 100
     208:	3e 64       	ori	r19, 0x4E	; 78
     20a:	65 3e       	cpi	r22, 0xE5	; 229
     20c:	64 3e       	cpi	r22, 0xE4	; 228
     20e:	63 23       	and	r22, r19
     210:	3e 64       	ori	r19, 0x4E	; 78
     212:	62 3e       	cpi	r22, 0xE2	; 226
     214:	64 3e       	cpi	r22, 0xE4	; 228
     216:	63 23       	and	r22, r19
     218:	62 20       	and	r6, r2
     21a:	3e 63       	ori	r19, 0x3E	; 62
     21c:	23 61       	ori	r18, 0x13	; 19
     21e:	67 61       	ori	r22, 0x17	; 23
     220:	65 67       	ori	r22, 0x75	; 117
     222:	66 65       	ori	r22, 0x56	; 86
     224:	20 66       	ori	r18, 0x60	; 96
     226:	20 4f       	sbci	r18, 0xF0	; 240
     228:	36 20       	and	r3, r6
     22a:	64 63       	ori	r22, 0x34	; 52
     22c:	23 64       	ori	r18, 0x43	; 67
     22e:	66 64       	ori	r22, 0x46	; 70
     230:	63 23       	and	r22, r19
     232:	3c 62       	ori	r19, 0x2C	; 44
     234:	20 63       	ori	r18, 0x30	; 48
     236:	23 34       	cpi	r18, 0x43	; 67
	...

00000239 <welcome>:
     239:	3e 67 33 32 3e 3e 63 33 32 00 00                    >g32>>c32..

00000244 <__ctors_end>:
     244:	25 15       	cp	r18, r5

00000246 <__dtors_end>:
     246:	11 24       	eor	r1, r1
     248:	1f be       	out	0x3f, r1	; 63
     24a:	cf ef       	ldi	r28, 0xFF	; 255
     24c:	d8 e0       	ldi	r29, 0x08	; 8
     24e:	de bf       	out	0x3e, r29	; 62
     250:	cd bf       	out	0x3d, r28	; 61

00000252 <__do_copy_data>:
     252:	11 e0       	ldi	r17, 0x01	; 1
     254:	a0 e0       	ldi	r26, 0x00	; 0
     256:	b1 e0       	ldi	r27, 0x01	; 1
     258:	e6 e8       	ldi	r30, 0x86	; 134
     25a:	f8 e3       	ldi	r31, 0x38	; 56
     25c:	02 c0       	rjmp	.+4      	; 0x262 <__do_copy_data+0x10>
     25e:	05 90       	lpm	r0, Z+
     260:	0d 92       	st	X+, r0
     262:	a4 39       	cpi	r26, 0x94	; 148
     264:	b1 07       	cpc	r27, r17
     266:	d9 f7       	brne	.-10     	; 0x25e <__do_copy_data+0xc>

00000268 <__do_clear_bss>:
     268:	22 e0       	ldi	r18, 0x02	; 2
     26a:	a4 e9       	ldi	r26, 0x94	; 148
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <.do_clear_bss_start>

00000270 <.do_clear_bss_loop>:
     270:	1d 92       	st	X+, r1

00000272 <.do_clear_bss_start>:
     272:	ab 31       	cpi	r26, 0x1B	; 27
     274:	b2 07       	cpc	r27, r18
     276:	e1 f7       	brne	.-8      	; 0x270 <.do_clear_bss_loop>
     278:	0e 94 3d 03 	call	0x67a	; 0x67a <main>
     27c:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__do_global_dtors>

00000280 <__bad_interrupt>:
     280:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000284 <sendACK>:
	}
}
			


void sendACK(Communications *self ){
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	00 d0       	rcall	.+0      	; 0x28a <sendACK+0x6>
     28a:	1f 92       	push	r1
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
						char tmp[3];
						tmp[0]=START;
     290:	28 e0       	ldi	r18, 0x08	; 8
     292:	29 83       	std	Y+1, r18	; 0x01
						tmp[1]=255;
     294:	2f ef       	ldi	r18, 0xFF	; 255
     296:	2a 83       	std	Y+2, r18	; 0x02
						tmp[2]=STOP;
     298:	25 e6       	ldi	r18, 0x65	; 101
     29a:	2b 83       	std	Y+3, r18	; 0x03
						serial_send_blocking(tmp,self->val);
     29c:	fc 01       	movw	r30, r24
     29e:	60 81       	ld	r22, Z
     2a0:	ce 01       	movw	r24, r28
     2a2:	01 96       	adiw	r24, 0x01	; 1
     2a4:	0e 94 32 14 	call	0x2864	; 0x2864 <serial_send_blocking>
}
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <Update>:

void Update(Communications *self){
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
	char Flag =0;
			if (serial_receive_buffer_full()==1){
     2bc:	0e 94 df 12 	call	0x25be	; 0x25be <serial_receive_buffer_full>
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <Update+0x12>
     2c4:	4c c0       	rjmp	.+152    	; 0x35e <Update+0xaa>
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
     2c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2c8:	88 30       	cpi	r24, 0x08	; 8
     2ca:	09 f0       	breq	.+2      	; 0x2ce <Update+0x1a>
     2cc:	4a c0       	rjmp	.+148    	; 0x362 <Update+0xae>
     2ce:	e8 81       	ld	r30, Y
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	ec 0f       	add	r30, r28
     2d6:	fd 1f       	adc	r31, r29
     2d8:	83 8d       	ldd	r24, Z+27	; 0x1b
     2da:	85 36       	cpi	r24, 0x65	; 101
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <Update+0x2c>
     2de:	43 c0       	rjmp	.+134    	; 0x366 <Update+0xb2>
				Flag = 1;
				//play_from_program_space(fugue);
				
				sendACK(self); // stops here to send acknowledge
     2e0:	ce 01       	movw	r24, r28
     2e2:	0e 94 42 01 	call	0x284	; 0x284 <sendACK>
				if (self->Recieved[5]==254 || self->EmergencyStop==1){	//enter emergency stop
     2e6:	88 a1       	ldd	r24, Y+32	; 0x20
     2e8:	8e 3f       	cpi	r24, 0xFE	; 254
     2ea:	31 f0       	breq	.+12     	; 0x2f8 <Update+0x44>
     2ec:	fe 01       	movw	r30, r28
     2ee:	e5 59       	subi	r30, 0x95	; 149
     2f0:	ff 4f       	sbci	r31, 0xFF	; 255
     2f2:	80 81       	ld	r24, Z
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	49 f4       	brne	.+18     	; 0x30a <Update+0x56>
									play_from_program_space(fugue);
     2f8:	8a e7       	ldi	r24, 0x7A	; 122
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 50 10 	call	0x20a0	; 0x20a0 <play_from_program_space>
					self->EmergencyStop=1;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	fe 01       	movw	r30, r28
     304:	e5 59       	subi	r30, 0x95	; 149
     306:	ff 4f       	sbci	r31, 0xFF	; 255
     308:	80 83       	st	Z, r24
				}
				
				if (self->Recieved[8]==250 && self->EmergencyStop==1){	// Leave emergency stop
     30a:	8b a1       	ldd	r24, Y+35	; 0x23
     30c:	8a 3f       	cpi	r24, 0xFA	; 250
     30e:	39 f4       	brne	.+14     	; 0x31e <Update+0x6a>
     310:	fe 01       	movw	r30, r28
     312:	e5 59       	subi	r30, 0x95	; 149
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	90 81       	ld	r25, Z
     318:	91 30       	cpi	r25, 0x01	; 1
     31a:	09 f4       	brne	.+2      	; 0x31e <Update+0x6a>
					self->EmergencyStop=0;
     31c:	10 82       	st	Z, r1
				}
				
				if (self->Recieved[8]==245){							// Enter Spin Mode
     31e:	85 3f       	cpi	r24, 0xF5	; 245
     320:	29 f4       	brne	.+10     	; 0x32c <Update+0x78>
					self->EmergencyStop=3;
     322:	93 e0       	ldi	r25, 0x03	; 3
     324:	fe 01       	movw	r30, r28
     326:	e5 59       	subi	r30, 0x95	; 149
     328:	ff 4f       	sbci	r31, 0xFF	; 255
     32a:	90 83       	st	Z, r25
				}
				if (self->Recieved[8]==240){							// Enter Manual Mode
     32c:	80 3f       	cpi	r24, 0xF0	; 240
     32e:	e9 f4       	brne	.+58     	; 0x36a <Update+0xb6>
					self->EmergencyStop=4;
     330:	84 e0       	ldi	r24, 0x04	; 4
     332:	fe 01       	movw	r30, r28
     334:	e5 59       	subi	r30, 0x95	; 149
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	80 83       	st	Z, r24
					for (int i = 0; i < 4; i++){
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0a c0       	rjmp	.+20     	; 0x354 <Update+0xa0>
						self->Direction[i]=self->Recieved[i+9];
     340:	fc 01       	movw	r30, r24
     342:	39 96       	adiw	r30, 0x09	; 9
     344:	ec 0f       	add	r30, r28
     346:	fd 1f       	adc	r31, r29
     348:	23 8d       	ldd	r18, Z+27	; 0x1b
     34a:	fe 01       	movw	r30, r28
     34c:	e8 0f       	add	r30, r24
     34e:	f9 1f       	adc	r31, r25
     350:	25 ab       	std	Z+53, r18	; 0x35
				if (self->Recieved[8]==245){							// Enter Spin Mode
					self->EmergencyStop=3;
				}
				if (self->Recieved[8]==240){							// Enter Manual Mode
					self->EmergencyStop=4;
					for (int i = 0; i < 4; i++){
     352:	01 96       	adiw	r24, 0x01	; 1
     354:	84 30       	cpi	r24, 0x04	; 4
     356:	91 05       	cpc	r25, r1
     358:	9c f3       	brlt	.-26     	; 0x340 <Update+0x8c>

void Update(Communications *self){
	char Flag =0;
			if (serial_receive_buffer_full()==1){
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
				Flag = 1;
     35a:	11 e0       	ldi	r17, 0x01	; 1
     35c:	07 c0       	rjmp	.+14     	; 0x36c <Update+0xb8>
						tmp[2]=STOP;
						serial_send_blocking(tmp,self->val);
}

void Update(Communications *self){
	char Flag =0;
     35e:	10 e0       	ldi	r17, 0x00	; 0
     360:	05 c0       	rjmp	.+10     	; 0x36c <Update+0xb8>
     362:	10 e0       	ldi	r17, 0x00	; 0
     364:	03 c0       	rjmp	.+6      	; 0x36c <Update+0xb8>
     366:	10 e0       	ldi	r17, 0x00	; 0
     368:	01 c0       	rjmp	.+2      	; 0x36c <Update+0xb8>
			if (serial_receive_buffer_full()==1){
				if (self->Recieved[0]==8 && self->Recieved[self->val-1]==101){
				Flag = 1;
     36a:	11 e0       	ldi	r17, 0x01	; 1
					filllocationarrays(self);
				}
				}
			}
			
				for (char i=0;i<self->val;i++){
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	05 c0       	rjmp	.+10     	; 0x37a <Update+0xc6>
					self->msgBuffer[i]=i;
     370:	fe 01       	movw	r30, r28
     372:	e8 0f       	add	r30, r24
     374:	f1 1d       	adc	r31, r1
     376:	81 83       	std	Z+1, r24	; 0x01
					filllocationarrays(self);
				}
				}
			}
			
				for (char i=0;i<self->val;i++){
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	68 81       	ld	r22, Y
     37c:	86 17       	cp	r24, r22
     37e:	c0 f3       	brcs	.-16     	; 0x370 <Update+0xbc>
					self->msgBuffer[i]=i;
				}
				self->msgBuffer[0]=START;
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	89 83       	std	Y+1, r24	; 0x01
				self->msgBuffer[1]=self->batterylvl;
     384:	fe 01       	movw	r30, r28
     386:	e4 59       	subi	r30, 0x94	; 148
     388:	ff 4f       	sbci	r31, 0xFF	; 255
     38a:	80 81       	ld	r24, Z
     38c:	8a 83       	std	Y+2, r24	; 0x02
				self->msgBuffer[2]=self->magprocess;
     38e:	31 96       	adiw	r30, 0x01	; 1
     390:	80 81       	ld	r24, Z
     392:	8b 83       	std	Y+3, r24	; 0x03
				self->msgBuffer[3]=self->locationx;
     394:	31 96       	adiw	r30, 0x01	; 1
     396:	80 81       	ld	r24, Z
     398:	8c 83       	std	Y+4, r24	; 0x04
				self->msgBuffer[4]=self->locationy;
     39a:	31 96       	adiw	r30, 0x01	; 1
     39c:	80 81       	ld	r24, Z
     39e:	8d 83       	std	Y+5, r24	; 0x05
				self->msgBuffer[5]=self->EmergencyStop;
     3a0:	34 97       	sbiw	r30, 0x04	; 4
     3a2:	80 81       	ld	r24, Z
     3a4:	8e 83       	std	Y+6, r24	; 0x06
				self->msgBuffer[self->val-1]=STOP;
     3a6:	e6 2f       	mov	r30, r22
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	ec 0f       	add	r30, r28
     3ae:	fd 1f       	adc	r31, r29
     3b0:	85 e6       	ldi	r24, 0x65	; 101
     3b2:	81 83       	std	Z+1, r24	; 0x01
				serial_send(self->msgBuffer, self->val);
     3b4:	ce 01       	movw	r24, r28
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	0e 94 ed 13 	call	0x27da	; 0x27da <serial_send>

				//delay_ms(10000); // test
				if (Flag == 1){
     3bc:	11 30       	cpi	r17, 0x01	; 1
     3be:	29 f4       	brne	.+10     	; 0x3ca <Update+0x116>
					serial_receive(self->Recieved,self->val);
     3c0:	68 81       	ld	r22, Y
     3c2:	ce 01       	movw	r24, r28
     3c4:	4b 96       	adiw	r24, 0x1b	; 27
     3c6:	0e 94 66 13 	call	0x26cc	; 0x26cc <serial_receive>
				}		
}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	08 95       	ret

000003d2 <fillarrays>:

void fillarrays(Communications *self){
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	60 97       	sbiw	r28, 0x10	; 16
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
     3e6:	ac 01       	movw	r20, r24
	//temp
		char arrx[]={2,5,4,2,1,6,1,5};
     3e8:	88 e0       	ldi	r24, 0x08	; 8
     3ea:	e8 e2       	ldi	r30, 0x28	; 40
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	de 01       	movw	r26, r28
     3f0:	11 96       	adiw	r26, 0x01	; 1
     3f2:	01 90       	ld	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	8a 95       	dec	r24
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <fillarrays+0x20>
		char arry[]={0,1,3,5,2,4,1,2};
     3fa:	88 e0       	ldi	r24, 0x08	; 8
     3fc:	e0 e3       	ldi	r30, 0x30	; 48
     3fe:	f1 e0       	ldi	r31, 0x01	; 1
     400:	de 01       	movw	r26, r28
     402:	19 96       	adiw	r26, 0x09	; 9
     404:	01 90       	ld	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	8a 95       	dec	r24
     40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		for (int i=0;i<8;i++){
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	19 c0       	rjmp	.+50     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			self->Orderarx[i]=arrx[i];
     412:	e1 e0       	ldi	r30, 0x01	; 1
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ec 0f       	add	r30, r28
     418:	fd 1f       	adc	r31, r29
     41a:	e2 0f       	add	r30, r18
     41c:	f3 1f       	adc	r31, r19
     41e:	90 81       	ld	r25, Z
     420:	da 01       	movw	r26, r20
     422:	a2 0f       	add	r26, r18
     424:	b3 1f       	adc	r27, r19
     426:	fd 01       	movw	r30, r26
     428:	ee 5a       	subi	r30, 0xAE	; 174
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	90 83       	st	Z, r25
			self->Orderary[i]=arry[i];
     42e:	e9 e0       	ldi	r30, 0x09	; 9
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	ec 0f       	add	r30, r28
     434:	fd 1f       	adc	r31, r29
     436:	e2 0f       	add	r30, r18
     438:	f3 1f       	adc	r31, r19
     43a:	90 81       	ld	r25, Z
     43c:	d9 96       	adiw	r26, 0x39	; 57
     43e:	9c 93       	st	X, r25

void fillarrays(Communications *self){
	//temp
		char arrx[]={2,5,4,2,1,6,1,5};
		char arry[]={0,1,3,5,2,4,1,2};
		for (int i=0;i<8;i++){
     440:	2f 5f       	subi	r18, 0xFF	; 255
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	28 30       	cpi	r18, 0x08	; 8
     446:	31 05       	cpc	r19, r1
     448:	24 f3       	brlt	.-56     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			self->Orderarx[i]=arrx[i];
			self->Orderary[i]=arry[i];
		}
}
     44a:	60 96       	adiw	r28, 0x10	; 16
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	de bf       	out	0x3e, r29	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	cd bf       	out	0x3d, r28	; 61
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <Communications_INIT>:

void Communications_INIT(Communications * myCom){
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	ec 01       	movw	r28, r24
	myCom->val = Max_Bytes;	
     462:	8a e1       	ldi	r24, 0x1A	; 26
     464:	88 83       	st	Y, r24


	//Setup Communications
	serial_set_baud_rate(9600);
     466:	60 e8       	ldi	r22, 0x80	; 128
     468:	75 e2       	ldi	r23, 0x25	; 37
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 bd 13 	call	0x277a	; 0x277a <serial_set_baud_rate>
	serial_receive(myCom->Recieved,myCom->val);
     472:	68 81       	ld	r22, Y
     474:	ce 01       	movw	r24, r28
     476:	4b 96       	adiw	r24, 0x1b	; 27
     478:	0e 94 66 13 	call	0x26cc	; 0x26cc <serial_receive>

	//filling in functions
	myCom->Update		 = Update;
     47c:	fe 01       	movw	r30, r28
     47e:	e0 59       	subi	r30, 0x90	; 144
     480:	ff 4f       	sbci	r31, 0xFF	; 255
     482:	8a e5       	ldi	r24, 0x5A	; 90
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	91 83       	std	Z+1, r25	; 0x01
     488:	80 83       	st	Z, r24
		
	//filling in default values
	myCom->EmergencyStop = 0;
     48a:	35 97       	sbiw	r30, 0x05	; 5
     48c:	10 82       	st	Z, r1
	myCom->batterylvl	 = 55;
     48e:	31 96       	adiw	r30, 0x01	; 1
     490:	87 e3       	ldi	r24, 0x37	; 55
     492:	80 83       	st	Z, r24
	myCom->magprocess	 = 20;
     494:	31 96       	adiw	r30, 0x01	; 1
     496:	84 e1       	ldi	r24, 0x14	; 20
     498:	80 83       	st	Z, r24
	myCom->locationx	 = 4;
     49a:	31 96       	adiw	r30, 0x01	; 1
     49c:	84 e0       	ldi	r24, 0x04	; 4
     49e:	80 83       	st	Z, r24
	myCom->locationy	 = 5;
     4a0:	31 96       	adiw	r30, 0x01	; 1
     4a2:	85 e0       	ldi	r24, 0x05	; 5
     4a4:	80 83       	st	Z, r24
	
	
	fillarrays(myCom);
     4a6:	ce 01       	movw	r24, r28
     4a8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <fillarrays>
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <batteryPercentage>:
     4b2:	cf 92       	push	r12
     4b4:	df 92       	push	r13
     4b6:	ef 92       	push	r14
     4b8:	ff 92       	push	r15
int read_temperature_c(void);

unsigned int read_battery_millivolts_3pi(void);
static inline unsigned int read_battery_millivolts(void)
{
  return read_battery_millivolts_3pi();
     4ba:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <read_battery_millivolts_3pi>
     4be:	bc 01       	movw	r22, r24
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 47 0b 	call	0x168e	; 0x168e <__floatunsisf>
     4c8:	6b 01       	movw	r12, r22
     4ca:	7c 01       	movw	r14, r24
     4cc:	9b 01       	movw	r18, r22
     4ce:	ac 01       	movw	r20, r24
     4d0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__mulsf3>
     4d4:	9b 01       	movw	r18, r22
     4d6:	ac 01       	movw	r20, r24
     4d8:	c7 01       	movw	r24, r14
     4da:	b6 01       	movw	r22, r12
     4dc:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__mulsf3>
     4e0:	2c e0       	ldi	r18, 0x0C	; 12
     4e2:	39 eb       	ldi	r19, 0xB9	; 185
     4e4:	4d e2       	ldi	r20, 0x2D	; 45
     4e6:	50 e3       	ldi	r21, 0x30	; 48
     4e8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__mulsf3>
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	08 95       	ret

000004f6 <updateDisplay>:
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	7c 01       	movw	r14, r24
     502:	8b 01       	movw	r16, r22
     504:	c4 2f       	mov	r28, r20
     506:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <clear>
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <lcd_goto_xy>
     512:	85 e5       	ldi	r24, 0x55	; 85
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     51a:	b7 01       	movw	r22, r14
     51c:	ff 0c       	add	r15, r15
     51e:	88 0b       	sbc	r24, r24
     520:	99 0b       	sbc	r25, r25
     522:	0e 94 c0 11 	call	0x2380	; 0x2380 <print_long>
     526:	8a e5       	ldi	r24, 0x5A	; 90
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <lcd_goto_xy>
     536:	8c e5       	ldi	r24, 0x5C	; 92
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     53e:	b8 01       	movw	r22, r16
     540:	11 0f       	add	r17, r17
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25
     546:	0e 94 c0 11 	call	0x2380	; 0x2380 <print_long>
     54a:	8a e5       	ldi	r24, 0x5A	; 90
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     552:	c2 30       	cpi	r28, 0x02	; 2
     554:	a9 f0       	breq	.+42     	; 0x580 <updateDisplay+0x8a>
     556:	28 f4       	brcc	.+10     	; 0x562 <updateDisplay+0x6c>
     558:	cc 23       	and	r28, r28
     55a:	41 f0       	breq	.+16     	; 0x56c <updateDisplay+0x76>
     55c:	c1 30       	cpi	r28, 0x01	; 1
     55e:	59 f0       	breq	.+22     	; 0x576 <updateDisplay+0x80>
     560:	1d c0       	rjmp	.+58     	; 0x59c <updateDisplay+0xa6>
     562:	c3 30       	cpi	r28, 0x03	; 3
     564:	91 f0       	breq	.+36     	; 0x58a <updateDisplay+0x94>
     566:	c4 30       	cpi	r28, 0x04	; 4
     568:	a9 f0       	breq	.+42     	; 0x594 <updateDisplay+0x9e>
     56a:	18 c0       	rjmp	.+48     	; 0x59c <updateDisplay+0xa6>
     56c:	81 e6       	ldi	r24, 0x61	; 97
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     574:	13 c0       	rjmp	.+38     	; 0x59c <updateDisplay+0xa6>
     576:	83 e6       	ldi	r24, 0x63	; 99
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     57e:	0e c0       	rjmp	.+28     	; 0x59c <updateDisplay+0xa6>
     580:	85 e6       	ldi	r24, 0x65	; 101
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     588:	09 c0       	rjmp	.+18     	; 0x59c <updateDisplay+0xa6>
     58a:	87 e6       	ldi	r24, 0x67	; 103
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     592:	04 c0       	rjmp	.+8      	; 0x59c <updateDisplay+0xa6>
     594:	89 e6       	ldi	r24, 0x69	; 105
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <print>
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	ff 90       	pop	r15
     5a4:	ef 90       	pop	r14
     5a6:	08 95       	ret

000005a8 <whileBarcode>:

const char welcome[] PROGMEM = ">g32>>c32";

void whileBarcode()
{
	while (lineType() != Barcode)
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <whileBarcode+0x8>
	{
		motorControl('S');
     5aa:	83 e5       	ldi	r24, 0x53	; 83
     5ac:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>

const char welcome[] PROGMEM = ">g32>>c32";

void whileBarcode()
{
	while (lineType() != Barcode)
     5b0:	0e 94 29 05 	call	0xa52	; 0xa52 <lineType>
     5b4:	82 30       	cpi	r24, 0x02	; 2
     5b6:	c9 f7       	brne	.-14     	; 0x5aa <whileBarcode+0x2>
	{
		motorControl('S');
	}
}
     5b8:	08 95       	ret

000005ba <whileLineEnd>:

void whileLineEnd()
{
	while (lineType() != Line_end)
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <whileLineEnd+0x8>
	{
		motorControl('S');
     5bc:	83 e5       	ldi	r24, 0x53	; 83
     5be:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
	}
}

void whileLineEnd()
{
	while (lineType() != Line_end)
     5c2:	0e 94 29 05 	call	0xa52	; 0xa52 <lineType>
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	c9 f7       	brne	.-14     	; 0x5bc <whileLineEnd+0x2>
	{
		motorControl('S');
	}
}
     5ca:	08 95       	ret

000005cc <charge_3pi>:
void charge_3pi(Communications *communications)
{
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	ec 01       	movw	r28, r24
	whileBarcode();
     5d2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <whileBarcode>
	updateDisplay(0, batteryPercentage(), mazeSolver);
     5d6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <batteryPercentage>
     5da:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <updateDisplay>
	parcours('T', communications);
     5e8:	be 01       	movw	r22, r28
     5ea:	84 e5       	ldi	r24, 0x54	; 84
     5ec:	0e 94 49 07 	call	0xe92	; 0xe92 <parcours>
	updateDisplay(0, batteryPercentage(), chargeMode);
     5f0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <batteryPercentage>
     5f4:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
     5f8:	43 e0       	ldi	r20, 0x03	; 3
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <updateDisplay>
	warehouse(charging, communications);
     602:	be 01       	movw	r22, r28
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 69 09 	call	0x12d2	; 0x12d2 <warehouse>
		    : "0" ( microseconds )
		    );  
}

// These are alternative aliases:
static inline void delay(unsigned int milliseconds) { delay_ms(milliseconds); }
     60a:	88 e8       	ldi	r24, 0x88	; 136
     60c:	93 e1       	ldi	r25, 0x13	; 19
     60e:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
	delay(5000);								// wacht totdat de robot vol is
	warehouse(charging, communications);
     612:	be 01       	movw	r22, r28
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 69 09 	call	0x12d2	; 0x12d2 <warehouse>
	whileBarcode();
     61a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <whileBarcode>
	updateDisplay(0, batteryPercentage(), mazeSolver);
     61e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <batteryPercentage>
     622:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <updateDisplay>
	parcours('B', communications);
     630:	be 01       	movw	r22, r28
     632:	82 e4       	ldi	r24, 0x42	; 66
     634:	0e 94 49 07 	call	0xe92	; 0xe92 <parcours>
	whileLineEnd();
     638:	0e 94 dd 02 	call	0x5ba	; 0x5ba <whileLineEnd>
	motorControl('L');
     63c:	8c e4       	ldi	r24, 0x4C	; 76
     63e:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <pickOrder>:

void pickOrder(Communications *communications)
{
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	ec 01       	movw	r28, r24
	whileBarcode();
     64e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <whileBarcode>
	parcours('T', communications);
     652:	be 01       	movw	r22, r28
     654:	84 e5       	ldi	r24, 0x54	; 84
     656:	0e 94 49 07 	call	0xe92	; 0xe92 <parcours>
	warehouse(orderPicking, communications); 	
     65a:	be 01       	movw	r22, r28
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <warehouse>
	parcours('B', communications);
     662:	be 01       	movw	r22, r28
     664:	82 e4       	ldi	r24, 0x42	; 66
     666:	0e 94 49 07 	call	0xe92	; 0xe92 <parcours>
	whileLineEnd();
     66a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <whileLineEnd>
	motorControl('L');
     66e:	8c e4       	ldi	r24, 0x4C	; 76
     670:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <main>:

int main()
{
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	c2 57       	subi	r28, 0x72	; 114
     684:	d1 09       	sbc	r29, r1
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
	play_from_program_space(welcome);
     690:	89 e3       	ldi	r24, 0x39	; 57
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 50 10 	call	0x20a0	; 0x20a0 <play_from_program_space>
	
	Communications communications;
	Communications_INIT(&communications);
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	0e 94 2e 02 	call	0x45c	; 0x45c <Communications_INIT>
	
	initialize(&communications);
     6a0:	ce 01       	movw	r24, r28
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	0e 94 a0 03 	call	0x740	; 0x740 <initialize>
	
	while(1) 
	{
		updateDisplay(0, batteryPercentage(), homingMode);
     6a8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <batteryPercentage>
     6ac:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
     6b0:	44 e0       	ldi	r20, 0x04	; 4
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <updateDisplay>
		communications.Update(&communications);
     6ba:	e3 96       	adiw	r28, 0x33	; 51
     6bc:	ee ad       	ldd	r30, Y+62	; 0x3e
     6be:	ff ad       	ldd	r31, Y+63	; 0x3f
     6c0:	e3 97       	sbiw	r28, 0x33	; 51
     6c2:	ce 01       	movw	r24, r28
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	09 95       	icall
		
		communications.locationx = -1;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	e0 96       	adiw	r28, 0x30	; 48
     6cc:	8f af       	std	Y+63, r24	; 0x3f
     6ce:	e0 97       	sbiw	r28, 0x30	; 48
		communications.locationy = -1;
     6d0:	e1 96       	adiw	r28, 0x31	; 49
     6d2:	8f af       	std	Y+63, r24	; 0x3f
     6d4:	e1 97       	sbiw	r28, 0x31	; 49
		
		switch (communications.EmergencyStop) {
     6d6:	ad 96       	adiw	r28, 0x2d	; 45
     6d8:	8f ad       	ldd	r24, Y+63	; 0x3f
     6da:	ad 97       	sbiw	r28, 0x2d	; 45
     6dc:	82 30       	cpi	r24, 0x02	; 2
     6de:	51 f1       	breq	.+84     	; 0x734 <main+0xba>
     6e0:	83 30       	cpi	r24, 0x03	; 3
     6e2:	59 f1       	breq	.+86     	; 0x73a <main+0xc0>
     6e4:	81 11       	cpse	r24, r1
     6e6:	e0 cf       	rjmp	.-64     	; 0x6a8 <main+0x2e>
			case 0: //0 for clear; 1 for stop; 2 for spin; 3 for manual
				if (read_battery_millivolts_3pi() < 0.6 * 5200)
     6e8:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <read_battery_millivolts_3pi>
     6ec:	bc 01       	movw	r22, r24
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 47 0b 	call	0x168e	; 0x168e <__floatunsisf>
     6f6:	21 e0       	ldi	r18, 0x01	; 1
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	43 e4       	ldi	r20, 0x43	; 67
     6fc:	55 e4       	ldi	r21, 0x45	; 69
     6fe:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__cmpsf2>
     702:	88 23       	and	r24, r24
     704:	2c f4       	brge	.+10     	; 0x710 <main+0x96>
				{
					charge_3pi(&communications);
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <charge_3pi>
     70e:	cc cf       	rjmp	.-104    	; 0x6a8 <main+0x2e>
				}
				else if (communications.Orderarx > 0)
				{
					communications.locationx = 0;
     710:	e0 96       	adiw	r28, 0x30	; 48
     712:	1f ae       	std	Y+63, r1	; 0x3f
     714:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = 0;
     716:	e1 96       	adiw	r28, 0x31	; 49
     718:	1f ae       	std	Y+63, r1	; 0x3f
     71a:	e1 97       	sbiw	r28, 0x31	; 49
					pickOrder(&communications);
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 24 03 	call	0x648	; 0x648 <pickOrder>
					communications.locationx = -1;
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	e0 96       	adiw	r28, 0x30	; 48
     728:	8f af       	std	Y+63, r24	; 0x3f
     72a:	e0 97       	sbiw	r28, 0x30	; 48
					communications.locationy = -1;
     72c:	e1 96       	adiw	r28, 0x31	; 49
     72e:	8f af       	std	Y+63, r24	; 0x3f
     730:	e1 97       	sbiw	r28, 0x31	; 49
     732:	ba cf       	rjmp	.-140    	; 0x6a8 <main+0x2e>
				}
				break;
				delay(100);
			case 2:
				Spin();
     734:	0e 94 3e 06 	call	0xc7c	; 0xc7c <Spin>
				break;
     738:	b7 cf       	rjmp	.-146    	; 0x6a8 <main+0x2e>
			case 3:
				manualControl();
     73a:	0e 94 f7 05 	call	0xbee	; 0xbee <manualControl>
				break;
     73e:	b4 cf       	rjmp	.-152    	; 0x6a8 <main+0x2e>

00000740 <initialize>:
void inch(){
	set_motors(50,50);
	delay(200);
	set_motors(0,0);
}
void println(int x){
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <myComs+0x1>
     748:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <myComs>
     74c:	80 ed       	ldi	r24, 0xD0	; 208
     74e:	97 e0       	ldi	r25, 0x07	; 7
     750:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pololu_3pi_init>
     754:	0d c0       	rjmp	.+26     	; 0x770 <initialize+0x30>
     756:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <clear>
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <lcd_goto_xy>
     762:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <read_battery_millivolts_3pi>
     766:	bc 01       	movw	r22, r24
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 c0 11 	call	0x2380	; 0x2380 <print_long>
     770:	80 e1       	ldi	r24, 0x10	; 16
     772:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <button_is_pressed>
     776:	88 23       	and	r24, r24
     778:	71 f3       	breq	.-36     	; 0x756 <initialize+0x16>
     77a:	80 e1       	ldi	r24, 0x10	; 16
     77c:	0e 94 c8 12 	call	0x2590	; 0x2590 <wait_for_button_release>
     780:	88 ee       	ldi	r24, 0xE8	; 232
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
     788:	c0 e0       	ldi	r28, 0x00	; 0
     78a:	d0 e0       	ldi	r29, 0x00	; 0
     78c:	19 c0       	rjmp	.+50     	; 0x7c0 <initialize+0x80>
     78e:	ce 01       	movw	r24, r28
     790:	44 97       	sbiw	r24, 0x14	; 20
     792:	88 97       	sbiw	r24, 0x28	; 40
     794:	38 f0       	brcs	.+14     	; 0x7a4 <initialize+0x64>
     796:	68 ed       	ldi	r22, 0xD8	; 216
     798:	7f ef       	ldi	r23, 0xFF	; 255
     79a:	88 e2       	ldi	r24, 0x28	; 40
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     7a2:	06 c0       	rjmp	.+12     	; 0x7b0 <initialize+0x70>
     7a4:	68 e2       	ldi	r22, 0x28	; 40
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	88 ed       	ldi	r24, 0xD8	; 216
     7aa:	9f ef       	ldi	r25, 0xFF	; 255
     7ac:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	0e 94 de 14 	call	0x29bc	; 0x29bc <calibrate_line_sensors>
     7b6:	84 e1       	ldi	r24, 0x14	; 20
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
     7be:	21 96       	adiw	r28, 0x01	; 1
     7c0:	c0 35       	cpi	r28, 0x50	; 80
     7c2:	d1 05       	cpc	r29, r1
     7c4:	20 f3       	brcs	.-56     	; 0x78e <initialize+0x4e>
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     7d2:	80 e1       	ldi	r24, 0x10	; 16
     7d4:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <button_is_pressed>
     7d8:	88 23       	and	r24, r24
     7da:	d9 f3       	breq	.-10     	; 0x7d2 <initialize+0x92>
     7dc:	80 e1       	ldi	r24, 0x10	; 16
     7de:	0e 94 c8 12 	call	0x2590	; 0x2590 <wait_for_button_release>
     7e2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <clear>
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <inch>:
     7ec:	62 e3       	ldi	r22, 0x32	; 50
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	82 e3       	ldi	r24, 0x32	; 50
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     7f8:	88 ec       	ldi	r24, 0xC8	; 200
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     80c:	08 95       	ret

0000080e <wait>:
	lcd_goto_xy(0,0);
	print_long(x);	*/
}

void wait(){
	set_motors(0,0);
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
	
	while(!button_is_pressed(BUTTON_B)){}
     81a:	80 e1       	ldi	r24, 0x10	; 16
     81c:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <button_is_pressed>
     820:	88 23       	and	r24, r24
     822:	d9 f3       	breq	.-10     	; 0x81a <wait+0xc>
	wait_for_button_release(BUTTON_B);
     824:	80 e1       	ldi	r24, 0x10	; 16
     826:	0e 94 c8 12 	call	0x2590	; 0x2590 <wait_for_button_release>
     82a:	08 95       	ret

0000082c <motorControl>:
	
	}
}


void motorControl(char x){													// function that controlls the motor movement and the turns
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	c8 2f       	mov	r28, r24
	unsigned int position = read_line(sensors,IR_EMITTERS_ON);
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	8d e0       	ldi	r24, 0x0D	; 13
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <read_line>
     848:	8c 01       	movw	r16, r24
	read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	8d e0       	ldi	r24, 0x0D	; 13
     84e:	92 e0       	ldi	r25, 0x02	; 2
     850:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
	
	if(myComs->EmergencyStop == 1)															//Emergency Brake
     854:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     858:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     85c:	e5 59       	subi	r30, 0x95	; 149
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	80 81       	ld	r24, Z
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	39 f4       	brne	.+14     	; 0x874 <motorControl+0x48>
		set_motors(0,0);	
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     872:	e6 c0       	rjmp	.+460    	; 0xa40 <__stack+0x141>
	
	
	else if(x == 'L'){														//Turn Left
     874:	cc 34       	cpi	r28, 0x4C	; 76
     876:	39 f5       	brne	.+78     	; 0x8c6 <motorControl+0x9a>
		set_motors(-turn_value,turn_value);
     878:	6c e3       	ldi	r22, 0x3C	; 60
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	84 ec       	ldi	r24, 0xC4	; 196
     87e:	9f ef       	ldi	r25, 0xFF	; 255
     880:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
		
		while (sensors[2] >=Refrence_value)
     884:	05 c0       	rjmp	.+10     	; 0x890 <motorControl+0x64>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	8d e0       	ldi	r24, 0x0D	; 13
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
	
	
	else if(x == 'L'){														//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
     890:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     894:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     898:	80 39       	cpi	r24, 0x90	; 144
     89a:	91 40       	sbci	r25, 0x01	; 1
     89c:	a0 f7       	brcc	.-24     	; 0x886 <motorControl+0x5a>
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <motorControl+0x7e>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	8d e0       	ldi	r24, 0x0D	; 13
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
	else if(x == 'L'){														//Turn Left
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     8aa:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     8ae:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     8b2:	81 39       	cpi	r24, 0x91	; 145
     8b4:	91 40       	sbci	r25, 0x01	; 1
     8b6:	a0 f3       	brcs	.-24     	; 0x8a0 <motorControl+0x74>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     8c4:	bd c0       	rjmp	.+378    	; 0xa40 <__stack+0x141>
	}
	
	
	else if(x == 'R'){														//Turn Right
     8c6:	c2 35       	cpi	r28, 0x52	; 82
     8c8:	39 f5       	brne	.+78     	; 0x918 <__stack+0x19>
		set_motors(turn_value,-turn_value);
     8ca:	64 ec       	ldi	r22, 0xC4	; 196
     8cc:	7f ef       	ldi	r23, 0xFF	; 255
     8ce:	8c e3       	ldi	r24, 0x3C	; 60
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
		
		while (sensors[2] >=Refrence_value)
     8d6:	05 c0       	rjmp	.+10     	; 0x8e2 <motorControl+0xb6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	8d e0       	ldi	r24, 0x0D	; 13
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
	
	
	else if(x == 'R'){														//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
     8e2:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     8e6:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     8ea:	80 39       	cpi	r24, 0x90	; 144
     8ec:	91 40       	sbci	r25, 0x01	; 1
     8ee:	a0 f7       	brcc	.-24     	; 0x8d8 <motorControl+0xac>
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <motorControl+0xd0>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	8d e0       	ldi	r24, 0x0D	; 13
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
	else if(x == 'R'){														//Turn Right
		set_motors(turn_value,-turn_value);
		
		while (sensors[2] >=Refrence_value)
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		while (sensors[2] <=Refrence_value)
     8fc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     900:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     904:	81 39       	cpi	r24, 0x91	; 145
     906:	91 40       	sbci	r25, 0x01	; 1
     908:	a0 f3       	brcs	.-24     	; 0x8f2 <motorControl+0xc6>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
		set_motors(0,0);
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     916:	94 c0       	rjmp	.+296    	; 0xa40 <__stack+0x141>
	}
		
			
	else if(x == 'S'){												//drive straight and adjusts the robot so it follows the line
     918:	c3 35       	cpi	r28, 0x53	; 83
     91a:	09 f0       	breq	.+2      	; 0x91e <__stack+0x1f>
     91c:	47 c0       	rjmp	.+142    	; 0x9ac <__stack+0xad>
			int last_proportional;
			int integral;
		// are not interested in the individual sensor readings.
		// The "proportional" term should be 0 when we are on the line.
		int proportional = ((int)position) - 2000;
     91e:	00 5d       	subi	r16, 0xD0	; 208
     920:	17 40       	sbci	r17, 0x07	; 7

		// Remember the last position.
		 last_proportional = proportional;
 
 
		int power_difference = proportional/100 + integral/300 + derivative*0.10;						// derivative == stuur snelheid
     922:	c8 01       	movw	r24, r16
     924:	64 e6       	ldi	r22, 0x64	; 100
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__divmodhi4>
     92c:	eb 01       	movw	r28, r22
     92e:	c8 01       	movw	r24, r16
     930:	6c e2       	ldi	r22, 0x2C	; 44
     932:	71 e0       	ldi	r23, 0x01	; 1
     934:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__divmodhi4>
     938:	c6 0f       	add	r28, r22
     93a:	d7 1f       	adc	r29, r23
     93c:	b8 01       	movw	r22, r16
     93e:	11 0f       	add	r17, r17
     940:	88 0b       	sbc	r24, r24
     942:	99 0b       	sbc	r25, r25
     944:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     948:	2d ec       	ldi	r18, 0xCD	; 205
     94a:	3c ec       	ldi	r19, 0xCC	; 204
     94c:	4c ec       	ldi	r20, 0xCC	; 204
     94e:	5d e3       	ldi	r21, 0x3D	; 61
     950:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__mulsf3>
     954:	6b 01       	movw	r12, r22
     956:	7c 01       	movw	r14, r24
     958:	be 01       	movw	r22, r28
     95a:	dd 0f       	add	r29, r29
     95c:	88 0b       	sbc	r24, r24
     95e:	99 0b       	sbc	r25, r25
     960:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
     964:	a7 01       	movw	r20, r14
     966:	96 01       	movw	r18, r12
     968:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__addsf3>
     96c:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
     970:	cb 01       	movw	r24, r22

		// Compute the actual motor settings.  We never set either motor
		// to a negative value.
		const int max = 70;
		if(power_difference > max)
     972:	67 34       	cpi	r22, 0x47	; 71
     974:	71 05       	cpc	r23, r1
     976:	14 f0       	brlt	.+4      	; 0x97c <__stack+0x7d>
			power_difference = max;
     978:	86 e4       	ldi	r24, 0x46	; 70
     97a:	90 e0       	ldi	r25, 0x00	; 0
		if(power_difference < -max)
     97c:	8a 3b       	cpi	r24, 0xBA	; 186
     97e:	2f ef       	ldi	r18, 0xFF	; 255
     980:	92 07       	cpc	r25, r18
     982:	14 f4       	brge	.+4      	; 0x988 <__stack+0x89>
			power_difference = -max;
     984:	8a eb       	ldi	r24, 0xBA	; 186
     986:	9f ef       	ldi	r25, 0xFF	; 255

		if(power_difference < 0)
     988:	99 23       	and	r25, r25
     98a:	3c f4       	brge	.+14     	; 0x99a <__stack+0x9b>
			set_motors(max+power_difference, max);
     98c:	66 e4       	ldi	r22, 0x46	; 70
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	8a 5b       	subi	r24, 0xBA	; 186
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     998:	53 c0       	rjmp	.+166    	; 0xa40 <__stack+0x141>
		else
			set_motors(max, max-power_difference);
     99a:	66 e4       	ldi	r22, 0x46	; 70
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	68 1b       	sub	r22, r24
     9a0:	79 0b       	sbc	r23, r25
     9a2:	86 e4       	ldi	r24, 0x46	; 70
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     9aa:	4a c0       	rjmp	.+148    	; 0xa40 <__stack+0x141>
		
	}
	
	
	else if(x == 'B'){														//Reverse while following the line
     9ac:	c2 34       	cpi	r28, 0x42	; 66
     9ae:	09 f5       	brne	.+66     	; 0x9f2 <__stack+0xf3>
		set_motors(-50,-50);
     9b0:	6e ec       	ldi	r22, 0xCE	; 206
     9b2:	7f ef       	ldi	r23, 0xFF	; 255
     9b4:	8e ec       	ldi	r24, 0xCE	; 206
     9b6:	9f ef       	ldi	r25, 0xFF	; 255
     9b8:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
		
		if (sensors[3] >=Refrence_value)
     9bc:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x6>
     9c0:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x7>
     9c4:	80 39       	cpi	r24, 0x90	; 144
     9c6:	91 40       	sbci	r25, 0x01	; 1
     9c8:	30 f0       	brcs	.+12     	; 0x9d6 <__stack+0xd7>
			set_motors(-50,-55);
     9ca:	69 ec       	ldi	r22, 0xC9	; 201
     9cc:	7f ef       	ldi	r23, 0xFF	; 255
     9ce:	8e ec       	ldi	r24, 0xCE	; 206
     9d0:	9f ef       	ldi	r25, 0xFF	; 255
     9d2:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
		if (sensors[1] >=Refrence_value)
     9d6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <sensors+0x2>
     9da:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <sensors+0x3>
     9de:	80 39       	cpi	r24, 0x90	; 144
     9e0:	91 40       	sbci	r25, 0x01	; 1
     9e2:	70 f1       	brcs	.+92     	; 0xa40 <__stack+0x141>
			set_motors(-55,-50);
     9e4:	6e ec       	ldi	r22, 0xCE	; 206
     9e6:	7f ef       	ldi	r23, 0xFF	; 255
     9e8:	89 ec       	ldi	r24, 0xC9	; 201
     9ea:	9f ef       	ldi	r25, 0xFF	; 255
     9ec:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     9f0:	27 c0       	rjmp	.+78     	; 0xa40 <__stack+0x141>
	}
	
	
	else if(x == 'T'){														// Turn around
     9f2:	c4 35       	cpi	r28, 0x54	; 84
     9f4:	a1 f4       	brne	.+40     	; 0xa1e <__stack+0x11f>
		set_motors(-turn_value,turn_value);
     9f6:	6c e3       	ldi	r22, 0x3C	; 60
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	84 ec       	ldi	r24, 0xC4	; 196
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
		
		while (sensors[2] <=Refrence_value)
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <__stack+0x10f>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	8d e0       	ldi	r24, 0x0D	; 13
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
	
	
	else if(x == 'T'){														// Turn around
		set_motors(-turn_value,turn_value);
		
		while (sensors[2] <=Refrence_value)
     a0e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     a12:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     a16:	81 39       	cpi	r24, 0x91	; 145
     a18:	91 40       	sbci	r25, 0x01	; 1
     a1a:	a0 f3       	brcs	.-24     	; 0xa04 <__stack+0x105>
     a1c:	11 c0       	rjmp	.+34     	; 0xa40 <__stack+0x141>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
     a1e:	c0 35       	cpi	r28, 0x50	; 80
     a20:	79 f4       	brne	.+30     	; 0xa40 <__stack+0x141>
     a22:	0a c0       	rjmp	.+20     	; 0xa38 <__stack+0x139>
		for( int i=50;i>=0;i-=2)
		{
			set_motors(i,i);
     a24:	be 01       	movw	r22, r28
     a26:	ce 01       	movw	r24, r28
     a28:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
     a2c:	85 e0       	ldi	r24, 0x05	; 5
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
	}
	
	
	else if(x == 'P')														//Robot stops on a slow pace
		for( int i=50;i>=0;i-=2)
     a34:	22 97       	sbiw	r28, 0x02	; 2
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <__stack+0x13d>
     a38:	c2 e3       	ldi	r28, 0x32	; 50
     a3a:	d0 e0       	ldi	r29, 0x00	; 0
     a3c:	dd 23       	and	r29, r29
     a3e:	94 f7       	brge	.-28     	; 0xa24 <__stack+0x125>
			set_motors(i,i);
			delay(5);
		}
		
		
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	08 95       	ret

00000a52 <lineType>:
	wait_for_button_release(BUTTON_B);
}

char lineType(){																																	// function that returns the type of junction it detects
	while(1){																																		// >= 500 = black line		<=500 = white
		read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	8d e0       	ldi	r24, 0x0D	; 13
     a56:	92 e0       	ldi	r25, 0x02	; 2
     a58:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
					
		if (sensors[0] >=Refrence_value && sensors[1] >= Refrence_value && sensors[4] <= Refrence_value ){																							//Checks if its a left corner or a straight with left corner
     a5c:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <sensors>
     a60:	30 91 0e 02 	lds	r19, 0x020E	; 0x80020e <sensors+0x1>
     a64:	20 39       	cpi	r18, 0x90	; 144
     a66:	41 e0       	ldi	r20, 0x01	; 1
     a68:	34 07       	cpc	r19, r20
     a6a:	38 f1       	brcs	.+78     	; 0xaba <lineType+0x68>
     a6c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <sensors+0x2>
     a70:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <sensors+0x3>
     a74:	80 39       	cpi	r24, 0x90	; 144
     a76:	91 40       	sbci	r25, 0x01	; 1
     a78:	00 f1       	brcs	.+64     	; 0xaba <lineType+0x68>
     a7a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x8>
     a7e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x9>
     a82:	81 39       	cpi	r24, 0x91	; 145
     a84:	91 40       	sbci	r25, 0x01	; 1
     a86:	c8 f4       	brcc	.+50     	; 0xaba <lineType+0x68>
			inch();
     a88:	0e 94 f6 03 	call	0x7ec	; 0x7ec <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     a8c:	61 e0       	ldi	r22, 0x01	; 1
     a8e:	8d e0       	ldi	r24, 0x0D	; 13
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
     a96:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     a9a:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     a9e:	80 39       	cpi	r24, 0x90	; 144
     aa0:	91 40       	sbci	r25, 0x01	; 1
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <lineType+0x54>
     aa4:	94 c0       	rjmp	.+296    	; 0xbce <lineType+0x17c>
     aa6:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x6>
     aaa:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x7>
     aae:	80 39       	cpi	r24, 0x90	; 144
     ab0:	91 40       	sbci	r25, 0x01	; 1
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <lineType+0x64>
     ab4:	8e c0       	rjmp	.+284    	; 0xbd2 <lineType+0x180>
				println(Straight_left_junction);
				return Straight_left_junction;
     ab6:	86 e0       	ldi	r24, 0x06	; 6
     ab8:	08 95       	ret
				return Left_corner;
			}
		}
		
		
		else if (sensors[3] >=Refrence_value && sensors[4] >= Refrence_value && sensors[0] <= Refrence_value){																							//Checks if its a right corner or a straight with right corner
     aba:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <sensors+0x6>
     abe:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <sensors+0x7>
     ac2:	80 39       	cpi	r24, 0x90	; 144
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	96 07       	cpc	r25, r22
     ac8:	20 f1       	brcs	.+72     	; 0xb12 <lineType+0xc0>
     aca:	40 91 15 02 	lds	r20, 0x0215	; 0x800215 <sensors+0x8>
     ace:	50 91 16 02 	lds	r21, 0x0216	; 0x800216 <sensors+0x9>
     ad2:	40 39       	cpi	r20, 0x90	; 144
     ad4:	51 40       	sbci	r21, 0x01	; 1
     ad6:	e8 f0       	brcs	.+58     	; 0xb12 <lineType+0xc0>
     ad8:	21 39       	cpi	r18, 0x91	; 145
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	34 07       	cpc	r19, r20
     ade:	c8 f4       	brcc	.+50     	; 0xb12 <lineType+0xc0>
			inch();
     ae0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <inch>
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	8d e0       	ldi	r24, 0x0D	; 13
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
     aee:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     af2:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     af6:	80 39       	cpi	r24, 0x90	; 144
     af8:	91 40       	sbci	r25, 0x01	; 1
     afa:	08 f0       	brcs	.+2      	; 0xafe <lineType+0xac>
     afc:	6c c0       	rjmp	.+216    	; 0xbd6 <lineType+0x184>
     afe:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <sensors+0x2>
     b02:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <sensors+0x3>
     b06:	80 39       	cpi	r24, 0x90	; 144
     b08:	91 40       	sbci	r25, 0x01	; 1
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <lineType+0xbc>
     b0c:	66 c0       	rjmp	.+204    	; 0xbda <lineType+0x188>
				println(Straight_right_junction);
				return Straight_right_junction;
     b0e:	85 e0       	ldi	r24, 0x05	; 5
     b10:	08 95       	ret
				println(Straight_left_junction);
				return Right_corner;
			}
		}
		
				else if (sensors[1] >=Refrence_value && sensors[3] >= Refrence_value){																									//Checks if its a X junction or a T junction
     b12:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <sensors+0x2>
     b16:	50 91 10 02 	lds	r21, 0x0210	; 0x800210 <sensors+0x3>
     b1a:	40 39       	cpi	r20, 0x90	; 144
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	56 07       	cpc	r21, r22
     b20:	a8 f0       	brcs	.+42     	; 0xb4c <lineType+0xfa>
     b22:	80 39       	cpi	r24, 0x90	; 144
     b24:	e1 e0       	ldi	r30, 0x01	; 1
     b26:	9e 07       	cpc	r25, r30
     b28:	88 f0       	brcs	.+34     	; 0xb4c <lineType+0xfa>
					inch();
     b2a:	0e 94 f6 03 	call	0x7ec	; 0x7ec <inch>
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	8d e0       	ldi	r24, 0x0D	; 13
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
					
					if (sensors[2] >=Refrence_value){
     b38:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <sensors+0x4>
     b3c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <sensors+0x5>
     b40:	80 39       	cpi	r24, 0x90	; 144
     b42:	91 40       	sbci	r25, 0x01	; 1
     b44:	08 f4       	brcc	.+2      	; 0xb48 <lineType+0xf6>
     b46:	4b c0       	rjmp	.+150    	; 0xbde <lineType+0x18c>
						println(X_junction);
						return X_junction;
     b48:	88 e0       	ldi	r24, 0x08	; 8
     b4a:	08 95       	ret
						println(T_junction);
						return T_junction;
					}
				}
				
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){
     b4c:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <sensors+0x4>
     b50:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <sensors+0x5>
     b54:	69 3c       	cpi	r22, 0xC9	; 201
     b56:	71 05       	cpc	r23, r1
     b58:	30 f4       	brcc	.+12     	; 0xb66 <lineType+0x114>
     b5a:	49 3c       	cpi	r20, 0xC9	; 201
     b5c:	51 05       	cpc	r21, r1
     b5e:	18 f4       	brcc	.+6      	; 0xb66 <lineType+0x114>
     b60:	89 3c       	cpi	r24, 0xC9	; 201
     b62:	91 05       	cpc	r25, r1
     b64:	f0 f1       	brcs	.+124    	; 0xbe2 <lineType+0x190>
					println(Line_end);																													// check if the line ends
					return Line_end;
				}
		else{
		//else if (sensors[2] >=Refrence_value){																													//Checks if the line is straight
			if ((sensors[3] <=Refrence_value && sensors[4] >=Refrence_value && sensors[1] <=Refrence_value) || (sensors[0] >=Refrence_value && sensors[1] <=Refrence_value && sensors[3] <=Refrence_value)){			//Checks the line for a "Barcode"
     b66:	81 39       	cpi	r24, 0x91	; 145
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	96 07       	cpc	r25, r22
     b6c:	58 f4       	brcc	.+22     	; 0xb84 <lineType+0x132>
     b6e:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <sensors+0x8>
     b72:	70 91 16 02 	lds	r23, 0x0216	; 0x800216 <sensors+0x9>
     b76:	60 39       	cpi	r22, 0x90	; 144
     b78:	71 40       	sbci	r23, 0x01	; 1
     b7a:	20 f0       	brcs	.+8      	; 0xb84 <lineType+0x132>
     b7c:	41 39       	cpi	r20, 0x91	; 145
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	56 07       	cpc	r21, r22
     b82:	98 f0       	brcs	.+38     	; 0xbaa <lineType+0x158>
     b84:	20 39       	cpi	r18, 0x90	; 144
     b86:	31 40       	sbci	r19, 0x01	; 1
     b88:	70 f1       	brcs	.+92     	; 0xbe6 <lineType+0x194>
     b8a:	41 39       	cpi	r20, 0x91	; 145
     b8c:	51 40       	sbci	r21, 0x01	; 1
     b8e:	68 f5       	brcc	.+90     	; 0xbea <lineType+0x198>
     b90:	81 39       	cpi	r24, 0x91	; 145
     b92:	91 40       	sbci	r25, 0x01	; 1
     b94:	50 f0       	brcs	.+20     	; 0xbaa <lineType+0x158>
				println(Barcode);
				return Barcode;
			}
			else{
				println(Straight);
				return Straight;
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	08 95       	ret
			if ((sensors[3] <=Refrence_value && sensors[4] >=Refrence_value && sensors[1] <=Refrence_value) || (sensors[0] >=Refrence_value && sensors[1] <=Refrence_value && sensors[3] <=Refrence_value)){			//Checks the line for a "Barcode"
			//if((sensors[4] >=Refrence_value && sensors[0] >=Refrence_value) && (sensors[1] <=Refrence_value || sensors[3] <=Refrence_value)){
			
				while(sensors[4] >= Refrence_value || sensors[0] >=Refrence_value)
				{
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	8d e0       	ldi	r24, 0x0D	; 13
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <read_line_sensors_calibrated>
					motorControl('S');
     ba4:	83 e5       	ldi	r24, 0x53	; 83
     ba6:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
		else{
		//else if (sensors[2] >=Refrence_value){																													//Checks if the line is straight
			if ((sensors[3] <=Refrence_value && sensors[4] >=Refrence_value && sensors[1] <=Refrence_value) || (sensors[0] >=Refrence_value && sensors[1] <=Refrence_value && sensors[3] <=Refrence_value)){			//Checks the line for a "Barcode"
			//if((sensors[4] >=Refrence_value && sensors[0] >=Refrence_value) && (sensors[1] <=Refrence_value || sensors[3] <=Refrence_value)){
			
				while(sensors[4] >= Refrence_value || sensors[0] >=Refrence_value)
     baa:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <sensors+0x8>
     bae:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <sensors+0x9>
     bb2:	80 39       	cpi	r24, 0x90	; 144
     bb4:	91 40       	sbci	r25, 0x01	; 1
     bb6:	88 f7       	brcc	.-30     	; 0xb9a <lineType+0x148>
     bb8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <sensors>
     bbc:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <sensors+0x1>
     bc0:	80 39       	cpi	r24, 0x90	; 144
     bc2:	91 40       	sbci	r25, 0x01	; 1
     bc4:	50 f7       	brcc	.-44     	; 0xb9a <lineType+0x148>
				{
					read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
					motorControl('S');
				}
				wait();
     bc6:	0e 94 07 04 	call	0x80e	; 0x80e <wait>
				println(Barcode);
				return Barcode;
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	08 95       	ret
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[3] >=Refrence_value){
				println(Straight_left_junction);
				return Straight_left_junction;
     bce:	86 e0       	ldi	r24, 0x06	; 6
     bd0:	08 95       	ret
			}
			else{
				println(Left_corner);
				return Left_corner;
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	08 95       	ret
			inch();
			read_line_sensors_calibrated(sensors,IR_EMITTERS_ON);
			
			if (sensors[2] >= Refrence_value || sensors[1] >=Refrence_value){
				println(Straight_right_junction);
				return Straight_right_junction;
     bd6:	85 e0       	ldi	r24, 0x05	; 5
     bd8:	08 95       	ret
			}
			else{
				println(Straight_left_junction);
				return Right_corner;
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	08 95       	ret
						println(X_junction);
						return X_junction;
					}
					else {
						println(T_junction);
						return T_junction;
     bde:	87 e0       	ldi	r24, 0x07	; 7
     be0:	08 95       	ret
					}
				}
				
				else if(sensors[2] <= End_Line_Value && sensors[1] <=End_Line_Value && sensors[3] <=End_Line_Value){
					println(Line_end);																													// check if the line ends
					return Line_end;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	08 95       	ret
				println(Barcode);
				return Barcode;
			}
			else{
				println(Straight);
				return Straight;
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret
     bea:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		
	
	}
}
     bec:	08 95       	ret

00000bee <manualControl>:
}




void manualControl(){
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
int speed = 0;

	if(myComs->Direction[0] == 1){
     bf2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     bf6:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     bfa:	85 a9       	ldd	r24, Z+53	; 0x35
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	49 f4       	brne	.+18     	; 0xc12 <manualControl+0x24>
		set_motors(speed,speed);
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
		speed++;
     c0c:	c1 e0       	ldi	r28, 0x01	; 1
     c0e:	d0 e0       	ldi	r29, 0x00	; 0
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <manualControl+0x28>




void manualControl(){
int speed = 0;
     c12:	c0 e0       	ldi	r28, 0x00	; 0
     c14:	d0 e0       	ldi	r29, 0x00	; 0
	if(myComs->Direction[0] == 1){
		set_motors(speed,speed);
		speed++;
	}
	
	if(myComs->Direction[1] == 1){
     c16:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     c1a:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     c1e:	86 a9       	ldd	r24, Z+54	; 0x36
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	41 f4       	brne	.+16     	; 0xc34 <manualControl+0x46>
		set_motors(-speed,-speed);
     c24:	88 27       	eor	r24, r24
     c26:	99 27       	eor	r25, r25
     c28:	8c 1b       	sub	r24, r28
     c2a:	9d 0b       	sbc	r25, r29
     c2c:	bc 01       	movw	r22, r24
     c2e:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
		speed--;
     c32:	21 97       	sbiw	r28, 0x01	; 1
	}
	
	if(myComs->Direction[2] == 1){
     c34:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     c38:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     c3c:	87 a9       	ldd	r24, Z+55	; 0x37
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	49 f4       	brne	.+18     	; 0xc54 <manualControl+0x66>
		set_motors(speed/2,speed);
     c42:	ce 01       	movw	r24, r28
     c44:	dd 23       	and	r29, r29
     c46:	0c f4       	brge	.+2      	; 0xc4a <manualControl+0x5c>
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	be 01       	movw	r22, r28
     c4c:	95 95       	asr	r25
     c4e:	87 95       	ror	r24
     c50:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
	}
	
	if(myComs->Direction[3] == 1){
     c54:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     c58:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     c5c:	80 ad       	ldd	r24, Z+56	; 0x38
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	51 f4       	brne	.+20     	; 0xc76 <manualControl+0x88>
		set_motors(speed,speed/2);
     c62:	be 01       	movw	r22, r28
     c64:	dd 23       	and	r29, r29
     c66:	14 f4       	brge	.+4      	; 0xc6c <manualControl+0x7e>
     c68:	6f 5f       	subi	r22, 0xFF	; 255
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	75 95       	asr	r23
     c6e:	67 95       	ror	r22
     c70:	ce 01       	movw	r24, r28
     c72:	0e 94 99 12 	call	0x2532	; 0x2532 <set_motors>
	}
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <Spin>:
void Spin(){
	
	for(int i = 0;i>=255;i++){
	set_motors(i,-i);	
	}
	while(myComs->EmergencyStop == 1){}
     c7c:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <myComs>
     c80:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <myComs+0x1>
     c84:	e5 59       	subi	r30, 0x95	; 149
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	80 81       	ld	r24, Z
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	b9 f3       	breq	.-18     	; 0xc7c <Spin>
	for(int i = 255;i<=0;i--){
		set_motors(i,-i);
	}
     c8e:	08 95       	ret

00000c90 <parcoursSearch>:
char route[20] = "_"; // hardcode SLR
char routeBack[20];
int routea = 1;

int parcoursSearch(Communications *communications) 
{
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	00 d0       	rcall	.+0      	; 0xc9a <parcoursSearch+0xa>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
	char richting;
	while(1) 
	{
		situatie = lineType();
     c9e:	0e 94 29 05 	call	0xa52	; 0xa52 <lineType>
     ca2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <situatie>
		
		switch (situatie) 
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	89 30       	cpi	r24, 0x09	; 9
     caa:	91 05       	cpc	r25, r1
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <parcoursSearch+0x20>
     cae:	41 c0       	rjmp	.+130    	; 0xd32 <parcoursSearch+0xa2>
     cb0:	fc 01       	movw	r30, r24
     cb2:	ec 5c       	subi	r30, 0xCC	; 204
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	0c 94 a6 1a 	jmp	0x354c	; 0x354c <__tablejump2__>
		{
			case Straight:
				motorControl('S');
     cba:	83 e5       	ldi	r24, 0x53	; 83
     cbc:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
				break;
     cc0:	38 c0       	rjmp	.+112    	; 0xd32 <parcoursSearch+0xa2>
			
			case X_junction:
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
				motorControl('L');
     cc2:	8c e4       	ldi	r24, 0x4C	; 76
     cc4:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
				richting = 'L';
     cc8:	8c e4       	ldi	r24, 0x4C	; 76
     cca:	89 83       	std	Y+1, r24	; 0x01
				////print_character('L');
				strncat(route, &richting, 1);
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	be 01       	movw	r22, r28
     cd2:	6f 5f       	subi	r22, 0xFF	; 255
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	84 e1       	ldi	r24, 0x14	; 20
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 26 1c 	call	0x384c	; 0x384c <strncat>
				break;
     cde:	29 c0       	rjmp	.+82     	; 0xd32 <parcoursSearch+0xa2>
			
			case Right_corner:
				motorControl('R');
     ce0:	82 e5       	ldi	r24, 0x52	; 82
     ce2:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
				richting = 'R';
     ce6:	82 e5       	ldi	r24, 0x52	; 82
     ce8:	89 83       	std	Y+1, r24	; 0x01
				//print_character('R');
				strncat(route, &richting, 1);
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	be 01       	movw	r22, r28
     cf0:	6f 5f       	subi	r22, 0xFF	; 255
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	84 e1       	ldi	r24, 0x14	; 20
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 26 1c 	call	0x384c	; 0x384c <strncat>
				break;
     cfc:	1a c0       	rjmp	.+52     	; 0xd32 <parcoursSearch+0xa2>
			
			case Straight_right_junction:
				richting = 'S';
     cfe:	83 e5       	ldi	r24, 0x53	; 83
     d00:	89 83       	std	Y+1, r24	; 0x01
				//print_character('S');
				strncat(route, &richting, 1);
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	be 01       	movw	r22, r28
     d08:	6f 5f       	subi	r22, 0xFF	; 255
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	84 e1       	ldi	r24, 0x14	; 20
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 26 1c 	call	0x384c	; 0x384c <strncat>
				break;
     d14:	0e c0       	rjmp	.+28     	; 0xd32 <parcoursSearch+0xa2>
				
			case Line_end:
				motorControl('T');
     d16:	84 e5       	ldi	r24, 0x54	; 84
     d18:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
				richting = 'T';
     d1c:	84 e5       	ldi	r24, 0x54	; 84
     d1e:	89 83       	std	Y+1, r24	; 0x01
				//print_character('T');
				strncat(route, &richting, 1);
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	be 01       	movw	r22, r28
     d26:	6f 5f       	subi	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	84 e1       	ldi	r24, 0x14	; 20
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 26 1c 	call	0x384c	; 0x384c <strncat>
				motorControl('P');
				//print_character('B');
				return 0;
		}
		
		clear();
     d32:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <clear>
		lcd_goto_xy(0,0);
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <lcd_goto_xy>
		for (int i=0; i <= strlen(route);i++ ){
     d3e:	00 e0       	ldi	r16, 0x00	; 0
     d40:	10 e0       	ldi	r17, 0x00	; 0
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <parcoursSearch+0xc4>
		print_character(route[i]);
     d44:	f8 01       	movw	r30, r16
     d46:	ec 5e       	subi	r30, 0xEC	; 236
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
     d4a:	80 81       	ld	r24, Z
     d4c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <print_character>
				return 0;
		}
		
		clear();
		lcd_goto_xy(0,0);
		for (int i=0; i <= strlen(route);i++ ){
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	e4 e1       	ldi	r30, 0x14	; 20
     d56:	f1 e0       	ldi	r31, 0x01	; 1
     d58:	01 90       	ld	r0, Z+
     d5a:	00 20       	and	r0, r0
     d5c:	e9 f7       	brne	.-6      	; 0xd58 <parcoursSearch+0xc8>
     d5e:	31 97       	sbiw	r30, 0x01	; 1
     d60:	e4 51       	subi	r30, 0x14	; 20
     d62:	f1 40       	sbci	r31, 0x01	; 1
     d64:	e0 17       	cp	r30, r16
     d66:	f1 07       	cpc	r31, r17
     d68:	68 f7       	brcc	.-38     	; 0xd44 <parcoursSearch+0xb4>
		print_character(route[i]);
		}
		
		char richting;	
		if (route[strlen(route)-2] == 'T') 
     d6a:	df 01       	movw	r26, r30
     d6c:	ae 5e       	subi	r26, 0xEE	; 238
     d6e:	be 4f       	sbci	r27, 0xFE	; 254
     d70:	8c 91       	ld	r24, X
     d72:	84 35       	cpi	r24, 0x54	; 84
     d74:	09 f0       	breq	.+2      	; 0xd78 <parcoursSearch+0xe8>
     d76:	93 cf       	rjmp	.-218    	; 0xc9e <parcoursSearch+0xe>
		{
			char char_1 = route[strlen(route)-3];
     d78:	df 01       	movw	r26, r30
     d7a:	af 5e       	subi	r26, 0xEF	; 239
     d7c:	be 4f       	sbci	r27, 0xFE	; 254
     d7e:	8c 91       	ld	r24, X
			char char_2 = route[strlen(route)-1];
     d80:	ed 5e       	subi	r30, 0xED	; 237
     d82:	fe 4f       	sbci	r31, 0xFE	; 254
     d84:	90 81       	ld	r25, Z

			if (char_1 == 'L' && char_2 == 'L') 
     d86:	8c 34       	cpi	r24, 0x4C	; 76
     d88:	29 f4       	brne	.+10     	; 0xd94 <parcoursSearch+0x104>
     d8a:	9c 34       	cpi	r25, 0x4C	; 76
     d8c:	19 f4       	brne	.+6      	; 0xd94 <parcoursSearch+0x104>
			{
				richting = 'S';
     d8e:	83 e5       	ldi	r24, 0x53	; 83
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	1b c0       	rjmp	.+54     	; 0xdca <parcoursSearch+0x13a>
			}
			else if (char_1 == 'S' && char_2 == 'L')
     d94:	83 35       	cpi	r24, 0x53	; 83
     d96:	29 f4       	brne	.+10     	; 0xda2 <parcoursSearch+0x112>
     d98:	9c 34       	cpi	r25, 0x4C	; 76
     d9a:	19 f4       	brne	.+6      	; 0xda2 <parcoursSearch+0x112>
			{
				richting = 'R';
     d9c:	82 e5       	ldi	r24, 0x52	; 82
     d9e:	8a 83       	std	Y+2, r24	; 0x02
     da0:	14 c0       	rjmp	.+40     	; 0xdca <parcoursSearch+0x13a>
			}
			else if (char_1 == 'R' && char_2 == 'L')
     da2:	82 35       	cpi	r24, 0x52	; 82
     da4:	29 f4       	brne	.+10     	; 0xdb0 <parcoursSearch+0x120>
     da6:	9c 34       	cpi	r25, 0x4C	; 76
     da8:	19 f4       	brne	.+6      	; 0xdb0 <parcoursSearch+0x120>
			{
				richting = 'T';
     daa:	84 e5       	ldi	r24, 0x54	; 84
     dac:	8a 83       	std	Y+2, r24	; 0x02
     dae:	0d c0       	rjmp	.+26     	; 0xdca <parcoursSearch+0x13a>
			}
			else if (char_1 == 'L' && char_2 == 'R')
     db0:	8c 34       	cpi	r24, 0x4C	; 76
     db2:	29 f4       	brne	.+10     	; 0xdbe <parcoursSearch+0x12e>
     db4:	92 35       	cpi	r25, 0x52	; 82
     db6:	19 f4       	brne	.+6      	; 0xdbe <parcoursSearch+0x12e>
			{
				richting = 'T';
     db8:	84 e5       	ldi	r24, 0x54	; 84
     dba:	8a 83       	std	Y+2, r24	; 0x02
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <parcoursSearch+0x13a>
			}
			else if (char_1 == 'L' && char_2 == 'S')
     dbe:	8c 34       	cpi	r24, 0x4C	; 76
     dc0:	21 f4       	brne	.+8      	; 0xdca <parcoursSearch+0x13a>
     dc2:	93 35       	cpi	r25, 0x53	; 83
     dc4:	11 f4       	brne	.+4      	; 0xdca <parcoursSearch+0x13a>
			{
				richting = 'R';
     dc6:	82 e5       	ldi	r24, 0x52	; 82
     dc8:	8a 83       	std	Y+2, r24	; 0x02
			}
			route[strlen(route)-3] = '\0';
     dca:	e4 e1       	ldi	r30, 0x14	; 20
     dcc:	f1 e0       	ldi	r31, 0x01	; 1
     dce:	01 90       	ld	r0, Z+
     dd0:	00 20       	and	r0, r0
     dd2:	e9 f7       	brne	.-6      	; 0xdce <parcoursSearch+0x13e>
     dd4:	34 97       	sbiw	r30, 0x04	; 4
     dd6:	10 82       	st	Z, r1
			strncat(route, &richting, 1);
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	be 01       	movw	r22, r28
     dde:	6e 5f       	subi	r22, 0xFE	; 254
     de0:	7f 4f       	sbci	r23, 0xFF	; 255
     de2:	84 e1       	ldi	r24, 0x14	; 20
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 26 1c 	call	0x384c	; 0x384c <strncat>
		}
	}
     dea:	59 cf       	rjmp	.-334    	; 0xc9e <parcoursSearch+0xe>
				//print_character('T');
				strncat(route, &richting, 1);
				break;
				
			case Barcode: // end of parcour
				motorControl('P');
     dec:	80 e5       	ldi	r24, 0x50	; 80
     dee:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
			strncat(route, &richting, 1);
		}
	}
	routea = 0;	
	return 0;
}
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <parcoursRun>:

int parcoursRun(char way, Communications *communications) 
{
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	18 2f       	mov	r17, r24
	char richting;
	for (int i = 0; i < strlen(route); i++) 
     e10:	c0 e0       	ldi	r28, 0x00	; 0
     e12:	d0 e0       	ldi	r29, 0x00	; 0
     e14:	2a c0       	rjmp	.+84     	; 0xe6a <parcoursRun+0x66>
	{
		while (lineType() == Straight)
		{
			motorControl('S');
     e16:	83 e5       	ldi	r24, 0x53	; 83
     e18:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
int parcoursRun(char way, Communications *communications) 
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
	{
		while (lineType() == Straight)
     e1c:	0e 94 29 05 	call	0xa52	; 0xa52 <lineType>
     e20:	88 23       	and	r24, r24
     e22:	c9 f3       	breq	.-14     	; 0xe16 <parcoursRun+0x12>
		{
			motorControl('S');
		}
		if (way == 'T') {
     e24:	14 35       	cpi	r17, 0x54	; 84
     e26:	39 f4       	brne	.+14     	; 0xe36 <parcoursRun+0x32>
			motorControl(route[i]);
     e28:	fe 01       	movw	r30, r28
     e2a:	ec 5e       	subi	r30, 0xEC	; 236
     e2c:	fe 4f       	sbci	r31, 0xFE	; 254
     e2e:	80 81       	ld	r24, Z
     e30:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
     e34:	19 c0       	rjmp	.+50     	; 0xe68 <parcoursRun+0x64>
		} 
		else if (way == 'B') 
     e36:	12 34       	cpi	r17, 0x42	; 66
     e38:	b9 f4       	brne	.+46     	; 0xe68 <parcoursRun+0x64>
		{
			richting = route[strlen(route)-i-1];
     e3a:	e4 e1       	ldi	r30, 0x14	; 20
     e3c:	f1 e0       	ldi	r31, 0x01	; 1
     e3e:	01 90       	ld	r0, Z+
     e40:	00 20       	and	r0, r0
     e42:	e9 f7       	brne	.-6      	; 0xe3e <parcoursRun+0x3a>
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	e4 51       	subi	r30, 0x14	; 20
     e48:	f1 40       	sbci	r31, 0x01	; 1
     e4a:	ee 19       	sub	r30, r14
     e4c:	ff 09       	sbc	r31, r15
     e4e:	ed 5e       	subi	r30, 0xED	; 237
     e50:	fe 4f       	sbci	r31, 0xFE	; 254
     e52:	80 81       	ld	r24, Z
			switch (richting)
     e54:	8c 34       	cpi	r24, 0x4C	; 76
     e56:	19 f0       	breq	.+6      	; 0xe5e <parcoursRun+0x5a>
     e58:	82 35       	cpi	r24, 0x52	; 82
     e5a:	19 f0       	breq	.+6      	; 0xe62 <parcoursRun+0x5e>
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <parcoursRun+0x60>
			{
				case 'R':
					richting = 'L';
					break;
				case 'L':
					richting = 'R';
     e5e:	82 e5       	ldi	r24, 0x52	; 82
					break;
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <parcoursRun+0x60>
		{
			richting = route[strlen(route)-i-1];
			switch (richting)
			{
				case 'R':
					richting = 'L';
     e62:	8c e4       	ldi	r24, 0x4C	; 76
					break;
				case 'L':
					richting = 'R';
					break;
			}
			motorControl(richting);
     e64:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
}

int parcoursRun(char way, Communications *communications) 
{
	char richting;
	for (int i = 0; i < strlen(route); i++) 
     e68:	21 96       	adiw	r28, 0x01	; 1
     e6a:	e4 e1       	ldi	r30, 0x14	; 20
     e6c:	f1 e0       	ldi	r31, 0x01	; 1
     e6e:	01 90       	ld	r0, Z+
     e70:	00 20       	and	r0, r0
     e72:	e9 f7       	brne	.-6      	; 0xe6e <parcoursRun+0x6a>
     e74:	31 97       	sbiw	r30, 0x01	; 1
     e76:	e4 51       	subi	r30, 0x14	; 20
     e78:	f1 40       	sbci	r31, 0x01	; 1
     e7a:	7e 01       	movw	r14, r28
     e7c:	ce 17       	cp	r28, r30
     e7e:	df 07       	cpc	r29, r31
     e80:	68 f2       	brcs	.-102    	; 0xe1c <parcoursRun+0x18>
			}
			motorControl(richting);
		}
	}
	return 0;
}
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	08 95       	ret

00000e92 <parcours>:

int parcours(char way, Communications *communications) 
{
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	00 d0       	rcall	.+0      	; 0xe9a <parcours+0x8>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	18 2f       	mov	r17, r24
     ea0:	7a 83       	std	Y+2, r23	; 0x02
     ea2:	69 83       	std	Y+1, r22	; 0x01
	updateDisplay(0, batteryPercentage(), mazeSolver);
     ea4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <batteryPercentage>
     ea8:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <updateDisplay>
	if (route[0] == '_'){
     eb6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <route>
     eba:	8f 35       	cpi	r24, 0x5F	; 95
     ebc:	61 f4       	brne	.+24     	; 0xed6 <parcours+0x44>
		memset(route,0,sizeof route);
     ebe:	84 e1       	ldi	r24, 0x14	; 20
     ec0:	e4 e1       	ldi	r30, 0x14	; 20
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	df 01       	movw	r26, r30
     ec6:	1d 92       	st	X+, r1
     ec8:	8a 95       	dec	r24
     eca:	e9 f7       	brne	.-6      	; 0xec6 <parcours+0x34>
		parcoursSearch(&communications);
     ecc:	ce 01       	movw	r24, r28
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	0e 94 48 06 	call	0xc90	; 0xc90 <parcoursSearch>
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <parcours+0x4e>
	} 
	else 
	{
		parcoursRun(way, communications);
     ed6:	69 81       	ldd	r22, Y+1	; 0x01
     ed8:	7a 81       	ldd	r23, Y+2	; 0x02
     eda:	81 2f       	mov	r24, r17
     edc:	0e 94 02 07 	call	0xe04	; 0xe04 <parcoursRun>
	} 
	return 0;
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	08 95       	ret

00000ef0 <swap>:
#include <pololu/3pi.h>
#include <avr/pgmspace.h>


void swap(char *a, char *b) {
    int temp = *a;
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 81       	ld	r18, Z
    *a = *b;
     ef4:	fb 01       	movw	r30, r22
     ef6:	30 81       	ld	r19, Z
     ef8:	fc 01       	movw	r30, r24
     efa:	30 83       	st	Z, r19
    *b = temp;
     efc:	fb 01       	movw	r30, r22
     efe:	20 83       	st	Z, r18
     f00:	08 95       	ret

00000f02 <bubbleSort>:
}

void bubbleSort(char arr[],char orderY[], int n) {
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	8c 01       	movw	r16, r24
     f1c:	5b 01       	movw	r10, r22
     f1e:	6a 01       	movw	r12, r20
    for (int i = 0; i < n - 1; i++) {
     f20:	e1 2c       	mov	r14, r1
     f22:	f1 2c       	mov	r15, r1
     f24:	28 c0       	rjmp	.+80     	; 0xf76 <bubbleSort+0x74>
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
     f26:	f8 01       	movw	r30, r16
     f28:	ec 0f       	add	r30, r28
     f2a:	fd 1f       	adc	r31, r29
     f2c:	90 81       	ld	r25, Z
     f2e:	4e 01       	movw	r8, r28
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	88 1a       	sub	r8, r24
     f34:	98 0a       	sbc	r9, r24
     f36:	d8 01       	movw	r26, r16
     f38:	a8 0d       	add	r26, r8
     f3a:	b9 1d       	adc	r27, r9
     f3c:	8c 91       	ld	r24, X
     f3e:	89 17       	cp	r24, r25
     f40:	60 f4       	brcc	.+24     	; 0xf5a <bubbleSort+0x58>
                swap(&arr[j], &arr[j + 1]);
     f42:	bd 01       	movw	r22, r26
     f44:	cf 01       	movw	r24, r30
     f46:	0e 94 78 07 	call	0xef0	; 0xef0 <swap>
                swap(&orderY[j], &orderY[j + 1]);
     f4a:	b5 01       	movw	r22, r10
     f4c:	68 0d       	add	r22, r8
     f4e:	79 1d       	adc	r23, r9
     f50:	c5 01       	movw	r24, r10
     f52:	8c 0f       	add	r24, r28
     f54:	9d 1f       	adc	r25, r29
     f56:	0e 94 78 07 	call	0xef0	; 0xef0 <swap>
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
     f5a:	21 96       	adiw	r28, 0x01	; 1
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <bubbleSort+0x60>
     f5e:	c0 e0       	ldi	r28, 0x00	; 0
     f60:	d0 e0       	ldi	r29, 0x00	; 0
     f62:	c6 01       	movw	r24, r12
     f64:	8e 19       	sub	r24, r14
     f66:	9f 09       	sbc	r25, r15
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	c8 17       	cp	r28, r24
     f6c:	d9 07       	cpc	r29, r25
     f6e:	dc f2       	brlt	.-74     	; 0xf26 <bubbleSort+0x24>
    *a = *b;
    *b = temp;
}

void bubbleSort(char arr[],char orderY[], int n) {
    for (int i = 0; i < n - 1; i++) {
     f70:	8f ef       	ldi	r24, 0xFF	; 255
     f72:	e8 1a       	sub	r14, r24
     f74:	f8 0a       	sbc	r15, r24
     f76:	c6 01       	movw	r24, r12
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	e8 16       	cp	r14, r24
     f7c:	f9 06       	cpc	r15, r25
     f7e:	7c f3       	brlt	.-34     	; 0xf5e <bubbleSort+0x5c>
                swap(&orderY[j], &orderY[j + 1]);
				
            }
		}
    }
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	bf 90       	pop	r11
     f92:	af 90       	pop	r10
     f94:	9f 90       	pop	r9
     f96:	8f 90       	pop	r8
     f98:	08 95       	ret

00000f9a <drive>:



void drive(int junctions, piRobot *robot, Communications *myCom)
{
     f9a:	af 92       	push	r10
     f9c:	bf 92       	push	r11
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	5c 01       	movw	r10, r24
     fb0:	6b 01       	movw	r12, r22
     fb2:	7a 01       	movw	r14, r20
	Junctions situatie;
	motorControl('S');
     fb4:	83 e5       	ldi	r24, 0x53	; 83
     fb6:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
	int driving = 1;
	int count = 0;
     fba:	00 e0       	ldi	r16, 0x00	; 0
     fbc:	10 e0       	ldi	r17, 0x00	; 0

void drive(int junctions, piRobot *robot, Communications *myCom)
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
     fbe:	c1 e0       	ldi	r28, 0x01	; 1
     fc0:	d0 e0       	ldi	r29, 0x00	; 0
	int count = 0;
	while(driving) {
     fc2:	5a c0       	rjmp	.+180    	; 0x1078 <drive+0xde>
		situatie = lineType();
     fc4:	0e 94 29 05 	call	0xa52	; 0xa52 <lineType>
		//clear();
		switch (situatie) {
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	51 f0       	breq	.+20     	; 0xfe0 <drive+0x46>
     fcc:	28 f0       	brcs	.+10     	; 0xfd8 <drive+0x3e>
     fce:	83 50       	subi	r24, 0x03	; 3
     fd0:	86 30       	cpi	r24, 0x06	; 6
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <drive+0x3c>
     fd4:	51 c0       	rjmp	.+162    	; 0x1078 <drive+0xde>
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <drive+0x46>
			case Barcode: // end of parcour
			//motorControl('N');
			break;
			
			case Straight:
			motorControl('S');
     fd8:	83 e5       	ldi	r24, 0x53	; 83
     fda:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
			break;
     fde:	4c c0       	rjmp	.+152    	; 0x1078 <drive+0xde>
			case Left_corner:
			case T_junction:
			case Straight_left_junction:
			case Right_corner:
			case Straight_right_junction:
				count++;
     fe0:	0f 5f       	subi	r16, 0xFF	; 255
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
				switch(robot->direction)
     fe4:	f6 01       	movw	r30, r12
     fe6:	84 81       	ldd	r24, Z+4	; 0x04
     fe8:	8e 34       	cpi	r24, 0x4E	; 78
     fea:	f1 f0       	breq	.+60     	; 0x1028 <drive+0x8e>
     fec:	18 f4       	brcc	.+6      	; 0xff4 <drive+0x5a>
     fee:	85 34       	cpi	r24, 0x45	; 69
     ff0:	81 f0       	breq	.+32     	; 0x1012 <drive+0x78>
     ff2:	2f c0       	rjmp	.+94     	; 0x1052 <drive+0xb8>
     ff4:	83 35       	cpi	r24, 0x53	; 83
     ff6:	19 f1       	breq	.+70     	; 0x103e <drive+0xa4>
     ff8:	87 35       	cpi	r24, 0x57	; 87
     ffa:	59 f5       	brne	.+86     	; 0x1052 <drive+0xb8>
				{
					case 'W':
					robot->posX++;
     ffc:	f6 01       	movw	r30, r12
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
					myCom->locationx = robot->posX;
    1008:	f7 01       	movw	r30, r14
    100a:	e2 59       	subi	r30, 0x92	; 146
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	80 83       	st	Z, r24
					break;
    1010:	20 c0       	rjmp	.+64     	; 0x1052 <drive+0xb8>
					case 'E':
					robot->posX--;
    1012:	f6 01       	movw	r30, r12
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
					myCom->locationx = robot->posX;
    101e:	f7 01       	movw	r30, r14
    1020:	e2 59       	subi	r30, 0x92	; 146
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 83       	st	Z, r24
					break;
    1026:	15 c0       	rjmp	.+42     	; 0x1052 <drive+0xb8>
					case 'N':
					robot->posY++;
    1028:	f6 01       	movw	r30, r12
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	93 83       	std	Z+3, r25	; 0x03
    1032:	82 83       	std	Z+2, r24	; 0x02
					myCom->locationy = robot->posY;
    1034:	f7 01       	movw	r30, r14
    1036:	e1 59       	subi	r30, 0x91	; 145
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	80 83       	st	Z, r24
					break;
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <drive+0xb8>
					case 'S':
					robot->posY--;
    103e:	f6 01       	movw	r30, r12
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	93 83       	std	Z+3, r25	; 0x03
    1048:	82 83       	std	Z+2, r24	; 0x02
					myCom->locationy = robot->posY;
    104a:	f7 01       	movw	r30, r14
    104c:	e1 59       	subi	r30, 0x91	; 145
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	80 83       	st	Z, r24
					break;
				}
				motorControl('S');
    1052:	83 e5       	ldi	r24, 0x53	; 83
    1054:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
				if(count == junctions)
    1058:	0a 15       	cp	r16, r10
    105a:	1b 05       	cpc	r17, r11
    105c:	29 f4       	brne	.+10     	; 0x1068 <drive+0xce>
				{
					motorControl('P');
    105e:	80 e5       	ldi	r24, 0x50	; 80
    1060:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					driving = 0;
    1064:	c0 e0       	ldi	r28, 0x00	; 0
    1066:	d0 e0       	ldi	r29, 0x00	; 0
				}
				myCom->Update(myCom);
    1068:	f7 01       	movw	r30, r14
    106a:	e0 59       	subi	r30, 0x90	; 144
    106c:	ff 4f       	sbci	r31, 0xFF	; 255
    106e:	01 90       	ld	r0, Z+
    1070:	f0 81       	ld	r31, Z
    1072:	e0 2d       	mov	r30, r0
    1074:	c7 01       	movw	r24, r14
    1076:	09 95       	icall
{
	Junctions situatie;
	motorControl('S');
	int driving = 1;
	int count = 0;
	while(driving) {
    1078:	20 97       	sbiw	r28, 0x00	; 0
    107a:	09 f0       	breq	.+2      	; 0x107e <drive+0xe4>
    107c:	a3 cf       	rjmp	.-186    	; 0xfc4 <drive+0x2a>
			
			
		}
		
	}
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	08 95       	ret

00001094 <waitForTurn>:

void waitForTurn()
{
    1094:	cf 93       	push	r28
	Junctions line;
	line = lineType();
    1096:	0e 94 29 05 	call	0xa52	; 0xa52 <lineType>
    109a:	c8 2f       	mov	r28, r24
    109c:	8f e0       	ldi	r24, 0x0F	; 15
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
    10a4:	03 c0       	rjmp	.+6      	; 0x10ac <waitForTurn+0x18>
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
	{
		line  = lineType();
    10a6:	0e 94 29 05 	call	0xa52	; 0xa52 <lineType>
    10aa:	c8 2f       	mov	r28, r24
void waitForTurn()
{
	Junctions line;
	line = lineType();
	delay(15);//Short delay so it won't accidentally think it found the line instantly
	while(line != Straight)
    10ac:	c1 11       	cpse	r28, r1
    10ae:	fb cf       	rjmp	.-10     	; 0x10a6 <waitForTurn+0x12>
	{
		line  = lineType();
	}
	motorControl('N');
    10b0:	8e e4       	ldi	r24, 0x4E	; 78
    10b2:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
}
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <turnRobot>:

void turnRobot(char direction, piRobot *myRobot)
{
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	c8 2f       	mov	r28, r24
    10c6:	8b 01       	movw	r16, r22
    int changing = 1;
    10c8:	ee 24       	eor	r14, r14
    10ca:	e3 94       	inc	r14
    10cc:	f1 2c       	mov	r15, r1

    while(changing==1)
    10ce:	9a c0       	rjmp	.+308    	; 0x1204 <turnRobot+0x14a>
    {
		
        switch(myRobot->direction)
    10d0:	f8 01       	movw	r30, r16
    10d2:	84 81       	ldd	r24, Z+4	; 0x04
    10d4:	8e 34       	cpi	r24, 0x4E	; 78
    10d6:	59 f0       	breq	.+22     	; 0x10ee <turnRobot+0x34>
    10d8:	18 f4       	brcc	.+6      	; 0x10e0 <turnRobot+0x26>
    10da:	85 34       	cpi	r24, 0x45	; 69
    10dc:	51 f1       	breq	.+84     	; 0x1132 <turnRobot+0x78>
    10de:	8c c0       	rjmp	.+280    	; 0x11f8 <turnRobot+0x13e>
    10e0:	83 35       	cpi	r24, 0x53	; 83
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <turnRobot+0x2c>
    10e4:	48 c0       	rjmp	.+144    	; 0x1176 <turnRobot+0xbc>
    10e6:	87 35       	cpi	r24, 0x57	; 87
    10e8:	09 f4       	brne	.+2      	; 0x10ec <turnRobot+0x32>
    10ea:	66 c0       	rjmp	.+204    	; 0x11b8 <turnRobot+0xfe>
    10ec:	85 c0       	rjmp	.+266    	; 0x11f8 <turnRobot+0x13e>
        {
            case 'N':
                if(direction == 'E')
    10ee:	c5 34       	cpi	r28, 0x45	; 69
    10f0:	49 f4       	brne	.+18     	; 0x1104 <turnRobot+0x4a>
                {
                    motorControl('R');
    10f2:	82 e5       	ldi	r24, 0x52	; 82
    10f4:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    10f8:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'E';
    10fc:	85 e4       	ldi	r24, 0x45	; 69
    10fe:	f8 01       	movw	r30, r16
    1100:	84 83       	std	Z+4, r24	; 0x04
    1102:	7a c0       	rjmp	.+244    	; 0x11f8 <turnRobot+0x13e>
                }
                else if(direction == 'W')
    1104:	c7 35       	cpi	r28, 0x57	; 87
    1106:	49 f4       	brne	.+18     	; 0x111a <turnRobot+0x60>
                {
                    motorControl('L');
    1108:	8c e4       	ldi	r24, 0x4C	; 76
    110a:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    110e:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'W';
    1112:	87 e5       	ldi	r24, 0x57	; 87
    1114:	f8 01       	movw	r30, r16
    1116:	84 83       	std	Z+4, r24	; 0x04
    1118:	6f c0       	rjmp	.+222    	; 0x11f8 <turnRobot+0x13e>
                }
                else if(direction == 'S')
    111a:	c3 35       	cpi	r28, 0x53	; 83
    111c:	09 f0       	breq	.+2      	; 0x1120 <turnRobot+0x66>
    111e:	6c c0       	rjmp	.+216    	; 0x11f8 <turnRobot+0x13e>
                {
                    motorControl('T');
    1120:	84 e5       	ldi	r24, 0x54	; 84
    1122:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    1126:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'S';
    112a:	83 e5       	ldi	r24, 0x53	; 83
    112c:	f8 01       	movw	r30, r16
    112e:	84 83       	std	Z+4, r24	; 0x04
    1130:	63 c0       	rjmp	.+198    	; 0x11f8 <turnRobot+0x13e>
                }
                break;
            case 'E':
                if(direction == 'S')
    1132:	c3 35       	cpi	r28, 0x53	; 83
    1134:	49 f4       	brne	.+18     	; 0x1148 <turnRobot+0x8e>
                {
                    motorControl('R');
    1136:	82 e5       	ldi	r24, 0x52	; 82
    1138:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    113c:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'S';
    1140:	83 e5       	ldi	r24, 0x53	; 83
    1142:	f8 01       	movw	r30, r16
    1144:	84 83       	std	Z+4, r24	; 0x04
    1146:	58 c0       	rjmp	.+176    	; 0x11f8 <turnRobot+0x13e>
                }
                else if(direction == 'W')
    1148:	c7 35       	cpi	r28, 0x57	; 87
    114a:	49 f4       	brne	.+18     	; 0x115e <turnRobot+0xa4>
                {
                    motorControl('L');
    114c:	8c e4       	ldi	r24, 0x4C	; 76
    114e:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    1152:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'W';
    1156:	87 e5       	ldi	r24, 0x57	; 87
    1158:	f8 01       	movw	r30, r16
    115a:	84 83       	std	Z+4, r24	; 0x04
    115c:	4d c0       	rjmp	.+154    	; 0x11f8 <turnRobot+0x13e>
                }
                else if(direction == 'S')
    115e:	c3 35       	cpi	r28, 0x53	; 83
    1160:	09 f0       	breq	.+2      	; 0x1164 <turnRobot+0xaa>
    1162:	4a c0       	rjmp	.+148    	; 0x11f8 <turnRobot+0x13e>
                {
                    motorControl('T');
    1164:	84 e5       	ldi	r24, 0x54	; 84
    1166:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    116a:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'S';
    116e:	83 e5       	ldi	r24, 0x53	; 83
    1170:	f8 01       	movw	r30, r16
    1172:	84 83       	std	Z+4, r24	; 0x04
    1174:	41 c0       	rjmp	.+130    	; 0x11f8 <turnRobot+0x13e>
                }
                break;
            case 'S':
                if(direction == 'W')
    1176:	c7 35       	cpi	r28, 0x57	; 87
    1178:	49 f4       	brne	.+18     	; 0x118c <turnRobot+0xd2>
                {
                    motorControl('R');
    117a:	82 e5       	ldi	r24, 0x52	; 82
    117c:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    1180:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'W';
    1184:	87 e5       	ldi	r24, 0x57	; 87
    1186:	f8 01       	movw	r30, r16
    1188:	84 83       	std	Z+4, r24	; 0x04
    118a:	36 c0       	rjmp	.+108    	; 0x11f8 <turnRobot+0x13e>
                }
                else if(direction == 'E')
    118c:	c5 34       	cpi	r28, 0x45	; 69
    118e:	49 f4       	brne	.+18     	; 0x11a2 <turnRobot+0xe8>
                {
                    motorControl('L');
    1190:	8c e4       	ldi	r24, 0x4C	; 76
    1192:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    1196:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'E';
    119a:	85 e4       	ldi	r24, 0x45	; 69
    119c:	f8 01       	movw	r30, r16
    119e:	84 83       	std	Z+4, r24	; 0x04
    11a0:	2b c0       	rjmp	.+86     	; 0x11f8 <turnRobot+0x13e>
                }
                else if(direction == 'N')
    11a2:	ce 34       	cpi	r28, 0x4E	; 78
    11a4:	49 f5       	brne	.+82     	; 0x11f8 <turnRobot+0x13e>
                {
                    motorControl('T');
    11a6:	84 e5       	ldi	r24, 0x54	; 84
    11a8:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    11ac:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'N';
    11b0:	8e e4       	ldi	r24, 0x4E	; 78
    11b2:	f8 01       	movw	r30, r16
    11b4:	84 83       	std	Z+4, r24	; 0x04
    11b6:	20 c0       	rjmp	.+64     	; 0x11f8 <turnRobot+0x13e>
                }
                break;
            case 'W':
                if(direction == 'N')
    11b8:	ce 34       	cpi	r28, 0x4E	; 78
    11ba:	49 f4       	brne	.+18     	; 0x11ce <turnRobot+0x114>
                {
					
                    motorControl('R');
    11bc:	82 e5       	ldi	r24, 0x52	; 82
    11be:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    11c2:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'N';
    11c6:	8e e4       	ldi	r24, 0x4E	; 78
    11c8:	f8 01       	movw	r30, r16
    11ca:	84 83       	std	Z+4, r24	; 0x04
    11cc:	15 c0       	rjmp	.+42     	; 0x11f8 <turnRobot+0x13e>
                }
                else if(direction == 'S')
    11ce:	c3 35       	cpi	r28, 0x53	; 83
    11d0:	49 f4       	brne	.+18     	; 0x11e4 <turnRobot+0x12a>
                {
                    motorControl('L');
    11d2:	8c e4       	ldi	r24, 0x4C	; 76
    11d4:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    11d8:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'S';
    11dc:	83 e5       	ldi	r24, 0x53	; 83
    11de:	f8 01       	movw	r30, r16
    11e0:	84 83       	std	Z+4, r24	; 0x04
    11e2:	0a c0       	rjmp	.+20     	; 0x11f8 <turnRobot+0x13e>
                }
                else if(direction == 'E')
    11e4:	c5 34       	cpi	r28, 0x45	; 69
    11e6:	41 f4       	brne	.+16     	; 0x11f8 <turnRobot+0x13e>
                {
                    motorControl('T');
    11e8:	84 e5       	ldi	r24, 0x54	; 84
    11ea:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
					waitForTurn();
    11ee:	0e 94 4a 08 	call	0x1094	; 0x1094 <waitForTurn>
                    myRobot->direction = 'E';
    11f2:	85 e4       	ldi	r24, 0x45	; 69
    11f4:	f8 01       	movw	r30, r16
    11f6:	84 83       	std	Z+4, r24	; 0x04
                }
                break;
		}
		
				if(myRobot->direction == direction)
    11f8:	f8 01       	movw	r30, r16
    11fa:	84 81       	ldd	r24, Z+4	; 0x04
    11fc:	c8 13       	cpse	r28, r24
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <turnRobot+0x14a>
				{
					changing = 0;
    1200:	e1 2c       	mov	r14, r1
    1202:	f1 2c       	mov	r15, r1

void turnRobot(char direction, piRobot *myRobot)
{
    int changing = 1;

    while(changing==1)
    1204:	f1 e0       	ldi	r31, 0x01	; 1
    1206:	ef 16       	cp	r14, r31
    1208:	f1 04       	cpc	r15, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <turnRobot+0x154>
    120c:	61 cf       	rjmp	.-318    	; 0x10d0 <turnRobot+0x16>
				{
					changing = 0;
				}
		
    }
}
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	08 95       	ret

0000121a <moveX>:


void moveX(int orderPos, piRobot *robot, Communications *myCom)
{
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
	
    int junctions;
	
	
    if(robot->posX != orderPos)
    1226:	fb 01       	movw	r30, r22
    1228:	20 81       	ld	r18, Z
    122a:	31 81       	ldd	r19, Z+1	; 0x01
    122c:	28 17       	cp	r18, r24
    122e:	39 07       	cpc	r19, r25
    1230:	d9 f0       	breq	.+54     	; 0x1268 <moveX+0x4e>
    1232:	7a 01       	movw	r14, r20
    1234:	eb 01       	movw	r28, r22
    1236:	8c 01       	movw	r16, r24
    {
		
        if(robot->posX < orderPos)
    1238:	28 17       	cp	r18, r24
    123a:	39 07       	cpc	r19, r25
    123c:	54 f4       	brge	.+20     	; 0x1252 <moveX+0x38>
        {
            turnRobot('W', robot);
    123e:	87 e5       	ldi	r24, 0x57	; 87
    1240:	0e 94 5d 08 	call	0x10ba	; 0x10ba <turnRobot>
            junctions = orderPos-robot->posX;
    1244:	88 81       	ld	r24, Y
    1246:	99 81       	ldd	r25, Y+1	; 0x01
    1248:	98 01       	movw	r18, r16
    124a:	28 1b       	sub	r18, r24
    124c:	39 0b       	sbc	r19, r25
    124e:	c9 01       	movw	r24, r18
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <moveX+0x46>
        }
        else{
            turnRobot('E', robot);
    1252:	85 e4       	ldi	r24, 0x45	; 69
    1254:	0e 94 5d 08 	call	0x10ba	; 0x10ba <turnRobot>
            junctions = robot->posX - orderPos;
    1258:	88 81       	ld	r24, Y
    125a:	99 81       	ldd	r25, Y+1	; 0x01
    125c:	80 1b       	sub	r24, r16
    125e:	91 0b       	sbc	r25, r17
        }
		drive(junctions, robot, myCom);
    1260:	a7 01       	movw	r20, r14
    1262:	be 01       	movw	r22, r28
    1264:	0e 94 cd 07 	call	0xf9a	; 0xf9a <drive>
        
		
        

    }
}
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	08 95       	ret

00001276 <moveY>:

void moveY(int orderPos, piRobot *robot, Communications *myCom)
{
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29

    int junctions;
    if(robot->posY != orderPos)
    1282:	fb 01       	movw	r30, r22
    1284:	22 81       	ldd	r18, Z+2	; 0x02
    1286:	33 81       	ldd	r19, Z+3	; 0x03
    1288:	28 17       	cp	r18, r24
    128a:	39 07       	cpc	r19, r25
    128c:	d9 f0       	breq	.+54     	; 0x12c4 <moveY+0x4e>
    128e:	7a 01       	movw	r14, r20
    1290:	eb 01       	movw	r28, r22
    1292:	8c 01       	movw	r16, r24
    {
        if(robot->posY < orderPos)
    1294:	28 17       	cp	r18, r24
    1296:	39 07       	cpc	r19, r25
    1298:	54 f4       	brge	.+20     	; 0x12ae <moveY+0x38>
        {
            turnRobot('N', robot);
    129a:	8e e4       	ldi	r24, 0x4E	; 78
    129c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <turnRobot>
            junctions = orderPos-robot->posY;
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	9b 81       	ldd	r25, Y+3	; 0x03
    12a4:	98 01       	movw	r18, r16
    12a6:	28 1b       	sub	r18, r24
    12a8:	39 0b       	sbc	r19, r25
    12aa:	c9 01       	movw	r24, r18
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <moveY+0x46>
        }
        else{
            turnRobot('S', robot);
    12ae:	83 e5       	ldi	r24, 0x53	; 83
    12b0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <turnRobot>
            junctions = robot->posY - orderPos;
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	80 1b       	sub	r24, r16
    12ba:	91 0b       	sbc	r25, r17
        }

            drive(junctions, robot, myCom);
    12bc:	a7 01       	movw	r20, r14
    12be:	be 01       	movw	r22, r28
    12c0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <drive>
        

    }
}
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	ff 90       	pop	r15
    12ce:	ef 90       	pop	r14
    12d0:	08 95       	ret

000012d2 <warehouse>:


void warehouse(objective objective, Communications *myCom)
{
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6
    12d8:	7f 92       	push	r7
    12da:	8f 92       	push	r8
    12dc:	9f 92       	push	r9
    12de:	af 92       	push	r10
    12e0:	bf 92       	push	r11
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	ff 92       	push	r15
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	e7 97       	sbiw	r28, 0x37	; 55
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	f8 2e       	mov	r15, r24
    1304:	8b 01       	movw	r16, r22
 piRobot robot;
 robot.direction = 'W';
    1306:	87 e5       	ldi	r24, 0x57	; 87
    1308:	8d 83       	std	Y+5, r24	; 0x05
 robot.posX = -1;
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	9a 83       	std	Y+2, r25	; 0x02
    1310:	89 83       	std	Y+1, r24	; 0x01
 robot.posY = 0;
    1312:	1c 82       	std	Y+4, r1	; 0x04
    1314:	1b 82       	std	Y+3, r1	; 0x03
 
 char orderX[25];
 char orderY[25];

int arraySize = sizeof(myCom->Orderarx) / sizeof(myCom->Orderary);
for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	18 c0       	rjmp	.+48     	; 0x134c <warehouse+0x7a>
{
	orderX[i] = myCom->Orderarx[i];
    131c:	d8 01       	movw	r26, r16
    131e:	a8 0f       	add	r26, r24
    1320:	b9 1f       	adc	r27, r25
    1322:	fd 01       	movw	r30, r26
    1324:	ee 5a       	subi	r30, 0xAE	; 174
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	20 81       	ld	r18, Z
    132a:	e6 e0       	ldi	r30, 0x06	; 6
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	ec 0f       	add	r30, r28
    1330:	fd 1f       	adc	r31, r29
    1332:	e8 0f       	add	r30, r24
    1334:	f9 1f       	adc	r31, r25
    1336:	20 83       	st	Z, r18
	orderY[i] = myCom->Orderary[i];
    1338:	d9 96       	adiw	r26, 0x39	; 57
    133a:	2c 91       	ld	r18, X
    133c:	ef e1       	ldi	r30, 0x1F	; 31
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ec 0f       	add	r30, r28
    1342:	fd 1f       	adc	r31, r29
    1344:	e8 0f       	add	r30, r24
    1346:	f9 1f       	adc	r31, r25
    1348:	20 83       	st	Z, r18
 
 char orderX[25];
 char orderY[25];

int arraySize = sizeof(myCom->Orderarx) / sizeof(myCom->Orderary);
for(int i=0;i<arraySize;i++)//Getting order positions from the wixel
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	18 16       	cp	r1, r24
    134e:	19 06       	cpc	r1, r25
    1350:	2c f7       	brge	.-54     	; 0x131c <warehouse+0x4a>
{
	orderX[i] = myCom->Orderarx[i];
	orderY[i] = myCom->Orderary[i];
}
    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	be 01       	movw	r22, r28
    1358:	61 5e       	subi	r22, 0xE1	; 225
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	ce 01       	movw	r24, r28
    135e:	06 96       	adiw	r24, 0x06	; 6
    1360:	0e 94 81 07 	call	0xf02	; 0xf02 <bubbleSort>
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
    1364:	ff 20       	and	r15, r15
    1366:	09 f4       	brne	.+2      	; 0x136a <warehouse+0x98>
    1368:	78 c0       	rjmp	.+240    	; 0x145a <warehouse+0x188>
    136a:	8e c0       	rjmp	.+284    	; 0x1488 <warehouse+0x1b6>
	{
		for(int locations = 0; locations<arraySize;locations++)
		{
			float completed = locations;
    136c:	b7 01       	movw	r22, r14
    136e:	0f 2c       	mov	r0, r15
    1370:	00 0c       	add	r0, r0
    1372:	88 0b       	sbc	r24, r24
    1374:	99 0b       	sbc	r25, r25
    1376:	0e 94 49 0b 	call	0x1692	; 0x1692 <__floatsisf>
    137a:	4b 01       	movw	r8, r22
    137c:	5c 01       	movw	r10, r24
			float total = arraySize;
		
		
			moveX(orderX[locations], &robot, myCom);
    137e:	0f 2e       	mov	r0, r31
    1380:	f6 e0       	ldi	r31, 0x06	; 6
    1382:	cf 2e       	mov	r12, r31
    1384:	d1 2c       	mov	r13, r1
    1386:	f0 2d       	mov	r31, r0
    1388:	cc 0e       	add	r12, r28
    138a:	dd 1e       	adc	r13, r29
    138c:	ce 0c       	add	r12, r14
    138e:	df 1c       	adc	r13, r15
    1390:	f6 01       	movw	r30, r12
    1392:	80 81       	ld	r24, Z
    1394:	a8 01       	movw	r20, r16
    1396:	be 01       	movw	r22, r28
    1398:	6f 5f       	subi	r22, 0xFF	; 255
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 0d 09 	call	0x121a	; 0x121a <moveX>
			robot.posX = orderX[locations];
    13a2:	f6 01       	movw	r30, r12
    13a4:	80 81       	ld	r24, Z
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
			moveY(orderY[locations], &robot, myCom);
    13ac:	0f 2e       	mov	r0, r31
    13ae:	ff e1       	ldi	r31, 0x1F	; 31
    13b0:	cf 2e       	mov	r12, r31
    13b2:	d1 2c       	mov	r13, r1
    13b4:	f0 2d       	mov	r31, r0
    13b6:	cc 0e       	add	r12, r28
    13b8:	dd 1e       	adc	r13, r29
    13ba:	ce 0c       	add	r12, r14
    13bc:	df 1c       	adc	r13, r15
    13be:	f6 01       	movw	r30, r12
    13c0:	80 81       	ld	r24, Z
    13c2:	a8 01       	movw	r20, r16
    13c4:	be 01       	movw	r22, r28
    13c6:	6f 5f       	subi	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 3b 09 	call	0x1276	; 0x1276 <moveY>
			robot.posY = orderY[locations];
    13d0:	f6 01       	movw	r30, r12
    13d2:	80 81       	ld	r24, Z
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	88 ee       	ldi	r24, 0xE8	; 232
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    13de:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
			delay(1000);//wait 1 second
			
			myCom->batterylvl = batteryPercentage();
    13e2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <batteryPercentage>
    13e6:	68 01       	movw	r12, r16
    13e8:	fc e6       	ldi	r31, 0x6C	; 108
    13ea:	cf 0e       	add	r12, r31
    13ec:	d1 1c       	adc	r13, r1
    13ee:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixunssfsi>
    13f2:	f6 01       	movw	r30, r12
    13f4:	60 83       	st	Z, r22
			myCom->magprocess = (((completed+1)/total)*100);
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	c5 01       	movw	r24, r10
    1400:	b4 01       	movw	r22, r8
    1402:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__addsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	48 ec       	ldi	r20, 0xC8	; 200
    140c:	52 e4       	ldi	r21, 0x42	; 66
    140e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__mulsf3>
    1412:	4b 01       	movw	r8, r22
    1414:	5c 01       	movw	r10, r24
    1416:	68 01       	movw	r12, r16
    1418:	fd e6       	ldi	r31, 0x6D	; 109
    141a:	cf 0e       	add	r12, r31
    141c:	d1 1c       	adc	r13, r1
    141e:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixunssfsi>
    1422:	f6 01       	movw	r30, r12
    1424:	60 83       	st	Z, r22
			myCom->Update(myCom);
    1426:	33 96       	adiw	r30, 0x03	; 3
    1428:	01 90       	ld	r0, Z+
    142a:	f0 81       	ld	r31, Z
    142c:	e0 2d       	mov	r30, r0
    142e:	c8 01       	movw	r24, r16
    1430:	09 95       	icall
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
    1432:	0e 94 59 02 	call	0x4b2	; 0x4b2 <batteryPercentage>
    1436:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
    143a:	2b 01       	movw	r4, r22
    143c:	3c 01       	movw	r6, r24
    143e:	c5 01       	movw	r24, r10
    1440:	b4 01       	movw	r22, r8
    1442:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixsfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	42 e0       	ldi	r20, 0x02	; 2
    144c:	b2 01       	movw	r22, r4
    144e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <updateDisplay>
}
    bubbleSort(orderX, orderY, arraySize);//Sorts the order positions so that the lowest X position comes first
	
	if(objective == orderPicking)//If statement for when the robot just needs to quickly pass the warehouse to get to the charging station
	{
		for(int locations = 0; locations<arraySize;locations++)
    1452:	ff ef       	ldi	r31, 0xFF	; 255
    1454:	ef 1a       	sub	r14, r31
    1456:	ff 0a       	sbc	r15, r31
    1458:	02 c0       	rjmp	.+4      	; 0x145e <warehouse+0x18c>
    145a:	e1 2c       	mov	r14, r1
    145c:	f1 2c       	mov	r15, r1
    145e:	1e 14       	cp	r1, r14
    1460:	1f 04       	cpc	r1, r15
    1462:	0c f0       	brlt	.+2      	; 0x1466 <warehouse+0x194>
    1464:	83 cf       	rjmp	.-250    	; 0x136c <warehouse+0x9a>
			myCom->batterylvl = batteryPercentage();
			myCom->magprocess = (((completed+1)/total)*100);
			myCom->Update(myCom);
			updateDisplay((((completed+1)/total)*100),batteryPercentage(),logicsBot);
		}
			moveY(0, &robot, myCom);
    1466:	a8 01       	movw	r20, r16
    1468:	be 01       	movw	r22, r28
    146a:	6f 5f       	subi	r22, 0xFF	; 255
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 3b 09 	call	0x1276	; 0x1276 <moveY>
			moveX(0, &robot, myCom);
    1476:	a8 01       	movw	r20, r16
    1478:	be 01       	movw	r22, r28
    147a:	6f 5f       	subi	r22, 0xFF	; 255
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 0d 09 	call	0x121a	; 0x121a <moveX>
    1486:	44 c0       	rjmp	.+136    	; 0x1510 <warehouse+0x23e>
	}
	else
	{
		static int charged = 0;
		if(charged == 0)
    1488:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <charged.2339>
    148c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <charged.2339+0x1>
    1490:	89 2b       	or	r24, r25
    1492:	29 f5       	brne	.+74     	; 0x14de <warehouse+0x20c>
		{
			drive(1, &robot, myCom);
    1494:	a8 01       	movw	r20, r16
    1496:	be 01       	movw	r22, r28
    1498:	6f 5f       	subi	r22, 0xFF	; 255
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <drive>
			motorControl('R');
    14a4:	82 e5       	ldi	r24, 0x52	; 82
    14a6:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
			drive(3, &robot, myCom);
    14aa:	a8 01       	movw	r20, r16
    14ac:	be 01       	movw	r22, r28
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <drive>
			motorControl('R');
    14ba:	82 e5       	ldi	r24, 0x52	; 82
    14bc:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
			drive(1, &robot, myCom);
    14c0:	a8 01       	movw	r20, r16
    14c2:	be 01       	movw	r22, r28
    14c4:	6f 5f       	subi	r22, 0xFF	; 255
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <drive>
			charged = 1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <charged.2339+0x1>
    14d8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <charged.2339>
    14dc:	19 c0       	rjmp	.+50     	; 0x1510 <warehouse+0x23e>
		}
		else
		{
			motorControl('T');
    14de:	84 e5       	ldi	r24, 0x54	; 84
    14e0:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
			drive(1, &robot, myCom);
    14e4:	a8 01       	movw	r20, r16
    14e6:	be 01       	movw	r22, r28
    14e8:	6f 5f       	subi	r22, 0xFF	; 255
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <drive>
			motorControl('L');
    14f4:	8c e4       	ldi	r24, 0x4C	; 76
    14f6:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
			drive(3, &robot, myCom);
    14fa:	a8 01       	movw	r20, r16
    14fc:	be 01       	movw	r22, r28
    14fe:	6f 5f       	subi	r22, 0xFF	; 255
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 cd 07 	call	0xf9a	; 0xf9a <drive>
			motorControl('L');
    150a:	8c e4       	ldi	r24, 0x4C	; 76
    150c:	0e 94 16 04 	call	0x82c	; 0x82c <motorControl>
			
		}
		
	}
}
    1510:	e7 96       	adiw	r28, 0x37	; 55
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	bf 90       	pop	r11
    152e:	af 90       	pop	r10
    1530:	9f 90       	pop	r9
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	5f 90       	pop	r5
    153a:	4f 90       	pop	r4
    153c:	08 95       	ret

0000153e <__subsf3>:
    153e:	50 58       	subi	r21, 0x80	; 128

00001540 <__addsf3>:
    1540:	bb 27       	eor	r27, r27
    1542:	aa 27       	eor	r26, r26
    1544:	0e 94 b7 0a 	call	0x156e	; 0x156e <__addsf3x>
    1548:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_round>
    154c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__fp_pscA>
    1550:	38 f0       	brcs	.+14     	; 0x1560 <__addsf3+0x20>
    1552:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fp_pscB>
    1556:	20 f0       	brcs	.+8      	; 0x1560 <__addsf3+0x20>
    1558:	39 f4       	brne	.+14     	; 0x1568 <__addsf3+0x28>
    155a:	9f 3f       	cpi	r25, 0xFF	; 255
    155c:	19 f4       	brne	.+6      	; 0x1564 <__addsf3+0x24>
    155e:	26 f4       	brtc	.+8      	; 0x1568 <__addsf3+0x28>
    1560:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_nan>
    1564:	0e f4       	brtc	.+2      	; 0x1568 <__addsf3+0x28>
    1566:	e0 95       	com	r30
    1568:	e7 fb       	bst	r30, 7
    156a:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>

0000156e <__addsf3x>:
    156e:	e9 2f       	mov	r30, r25
    1570:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_split3>
    1574:	58 f3       	brcs	.-42     	; 0x154c <__addsf3+0xc>
    1576:	ba 17       	cp	r27, r26
    1578:	62 07       	cpc	r22, r18
    157a:	73 07       	cpc	r23, r19
    157c:	84 07       	cpc	r24, r20
    157e:	95 07       	cpc	r25, r21
    1580:	20 f0       	brcs	.+8      	; 0x158a <__addsf3x+0x1c>
    1582:	79 f4       	brne	.+30     	; 0x15a2 <__addsf3x+0x34>
    1584:	a6 f5       	brtc	.+104    	; 0x15ee <__addsf3x+0x80>
    1586:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__fp_zero>
    158a:	0e f4       	brtc	.+2      	; 0x158e <__addsf3x+0x20>
    158c:	e0 95       	com	r30
    158e:	0b 2e       	mov	r0, r27
    1590:	ba 2f       	mov	r27, r26
    1592:	a0 2d       	mov	r26, r0
    1594:	0b 01       	movw	r0, r22
    1596:	b9 01       	movw	r22, r18
    1598:	90 01       	movw	r18, r0
    159a:	0c 01       	movw	r0, r24
    159c:	ca 01       	movw	r24, r20
    159e:	a0 01       	movw	r20, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	ff 27       	eor	r31, r31
    15a4:	59 1b       	sub	r21, r25
    15a6:	99 f0       	breq	.+38     	; 0x15ce <__addsf3x+0x60>
    15a8:	59 3f       	cpi	r21, 0xF9	; 249
    15aa:	50 f4       	brcc	.+20     	; 0x15c0 <__addsf3x+0x52>
    15ac:	50 3e       	cpi	r21, 0xE0	; 224
    15ae:	68 f1       	brcs	.+90     	; 0x160a <__addsf3x+0x9c>
    15b0:	1a 16       	cp	r1, r26
    15b2:	f0 40       	sbci	r31, 0x00	; 0
    15b4:	a2 2f       	mov	r26, r18
    15b6:	23 2f       	mov	r18, r19
    15b8:	34 2f       	mov	r19, r20
    15ba:	44 27       	eor	r20, r20
    15bc:	58 5f       	subi	r21, 0xF8	; 248
    15be:	f3 cf       	rjmp	.-26     	; 0x15a6 <__addsf3x+0x38>
    15c0:	46 95       	lsr	r20
    15c2:	37 95       	ror	r19
    15c4:	27 95       	ror	r18
    15c6:	a7 95       	ror	r26
    15c8:	f0 40       	sbci	r31, 0x00	; 0
    15ca:	53 95       	inc	r21
    15cc:	c9 f7       	brne	.-14     	; 0x15c0 <__addsf3x+0x52>
    15ce:	7e f4       	brtc	.+30     	; 0x15ee <__addsf3x+0x80>
    15d0:	1f 16       	cp	r1, r31
    15d2:	ba 0b       	sbc	r27, r26
    15d4:	62 0b       	sbc	r22, r18
    15d6:	73 0b       	sbc	r23, r19
    15d8:	84 0b       	sbc	r24, r20
    15da:	ba f0       	brmi	.+46     	; 0x160a <__addsf3x+0x9c>
    15dc:	91 50       	subi	r25, 0x01	; 1
    15de:	a1 f0       	breq	.+40     	; 0x1608 <__addsf3x+0x9a>
    15e0:	ff 0f       	add	r31, r31
    15e2:	bb 1f       	adc	r27, r27
    15e4:	66 1f       	adc	r22, r22
    15e6:	77 1f       	adc	r23, r23
    15e8:	88 1f       	adc	r24, r24
    15ea:	c2 f7       	brpl	.-16     	; 0x15dc <__addsf3x+0x6e>
    15ec:	0e c0       	rjmp	.+28     	; 0x160a <__addsf3x+0x9c>
    15ee:	ba 0f       	add	r27, r26
    15f0:	62 1f       	adc	r22, r18
    15f2:	73 1f       	adc	r23, r19
    15f4:	84 1f       	adc	r24, r20
    15f6:	48 f4       	brcc	.+18     	; 0x160a <__addsf3x+0x9c>
    15f8:	87 95       	ror	r24
    15fa:	77 95       	ror	r23
    15fc:	67 95       	ror	r22
    15fe:	b7 95       	ror	r27
    1600:	f7 95       	ror	r31
    1602:	9e 3f       	cpi	r25, 0xFE	; 254
    1604:	08 f0       	brcs	.+2      	; 0x1608 <__addsf3x+0x9a>
    1606:	b0 cf       	rjmp	.-160    	; 0x1568 <__addsf3+0x28>
    1608:	93 95       	inc	r25
    160a:	88 0f       	add	r24, r24
    160c:	08 f0       	brcs	.+2      	; 0x1610 <__addsf3x+0xa2>
    160e:	99 27       	eor	r25, r25
    1610:	ee 0f       	add	r30, r30
    1612:	97 95       	ror	r25
    1614:	87 95       	ror	r24
    1616:	08 95       	ret

00001618 <__cmpsf2>:
    1618:	0e 94 84 0b 	call	0x1708	; 0x1708 <__fp_cmp>
    161c:	08 f4       	brcc	.+2      	; 0x1620 <__cmpsf2+0x8>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	08 95       	ret

00001622 <__fixsfsi>:
    1622:	0e 94 18 0b 	call	0x1630	; 0x1630 <__fixunssfsi>
    1626:	68 94       	set
    1628:	b1 11       	cpse	r27, r1
    162a:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__fp_szero>
    162e:	08 95       	ret

00001630 <__fixunssfsi>:
    1630:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_splitA>
    1634:	88 f0       	brcs	.+34     	; 0x1658 <__fixunssfsi+0x28>
    1636:	9f 57       	subi	r25, 0x7F	; 127
    1638:	98 f0       	brcs	.+38     	; 0x1660 <__fixunssfsi+0x30>
    163a:	b9 2f       	mov	r27, r25
    163c:	99 27       	eor	r25, r25
    163e:	b7 51       	subi	r27, 0x17	; 23
    1640:	b0 f0       	brcs	.+44     	; 0x166e <__fixunssfsi+0x3e>
    1642:	e1 f0       	breq	.+56     	; 0x167c <__fixunssfsi+0x4c>
    1644:	66 0f       	add	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	1a f0       	brmi	.+6      	; 0x1654 <__fixunssfsi+0x24>
    164e:	ba 95       	dec	r27
    1650:	c9 f7       	brne	.-14     	; 0x1644 <__fixunssfsi+0x14>
    1652:	14 c0       	rjmp	.+40     	; 0x167c <__fixunssfsi+0x4c>
    1654:	b1 30       	cpi	r27, 0x01	; 1
    1656:	91 f0       	breq	.+36     	; 0x167c <__fixunssfsi+0x4c>
    1658:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fp_zero>
    165c:	b1 e0       	ldi	r27, 0x01	; 1
    165e:	08 95       	ret
    1660:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__fp_zero>
    1664:	67 2f       	mov	r22, r23
    1666:	78 2f       	mov	r23, r24
    1668:	88 27       	eor	r24, r24
    166a:	b8 5f       	subi	r27, 0xF8	; 248
    166c:	39 f0       	breq	.+14     	; 0x167c <__fixunssfsi+0x4c>
    166e:	b9 3f       	cpi	r27, 0xF9	; 249
    1670:	cc f3       	brlt	.-14     	; 0x1664 <__fixunssfsi+0x34>
    1672:	86 95       	lsr	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b3 95       	inc	r27
    167a:	d9 f7       	brne	.-10     	; 0x1672 <__fixunssfsi+0x42>
    167c:	3e f4       	brtc	.+14     	; 0x168c <__fixunssfsi+0x5c>
    167e:	90 95       	com	r25
    1680:	80 95       	com	r24
    1682:	70 95       	com	r23
    1684:	61 95       	neg	r22
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8f 4f       	sbci	r24, 0xFF	; 255
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	08 95       	ret

0000168e <__floatunsisf>:
    168e:	e8 94       	clt
    1690:	09 c0       	rjmp	.+18     	; 0x16a4 <__floatsisf+0x12>

00001692 <__floatsisf>:
    1692:	97 fb       	bst	r25, 7
    1694:	3e f4       	brtc	.+14     	; 0x16a4 <__floatsisf+0x12>
    1696:	90 95       	com	r25
    1698:	80 95       	com	r24
    169a:	70 95       	com	r23
    169c:	61 95       	neg	r22
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	8f 4f       	sbci	r24, 0xFF	; 255
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	99 23       	and	r25, r25
    16a6:	a9 f0       	breq	.+42     	; 0x16d2 <__floatsisf+0x40>
    16a8:	f9 2f       	mov	r31, r25
    16aa:	96 e9       	ldi	r25, 0x96	; 150
    16ac:	bb 27       	eor	r27, r27
    16ae:	93 95       	inc	r25
    16b0:	f6 95       	lsr	r31
    16b2:	87 95       	ror	r24
    16b4:	77 95       	ror	r23
    16b6:	67 95       	ror	r22
    16b8:	b7 95       	ror	r27
    16ba:	f1 11       	cpse	r31, r1
    16bc:	f8 cf       	rjmp	.-16     	; 0x16ae <__floatsisf+0x1c>
    16be:	fa f4       	brpl	.+62     	; 0x16fe <__floatsisf+0x6c>
    16c0:	bb 0f       	add	r27, r27
    16c2:	11 f4       	brne	.+4      	; 0x16c8 <__floatsisf+0x36>
    16c4:	60 ff       	sbrs	r22, 0
    16c6:	1b c0       	rjmp	.+54     	; 0x16fe <__floatsisf+0x6c>
    16c8:	6f 5f       	subi	r22, 0xFF	; 255
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255
    16cc:	8f 4f       	sbci	r24, 0xFF	; 255
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	16 c0       	rjmp	.+44     	; 0x16fe <__floatsisf+0x6c>
    16d2:	88 23       	and	r24, r24
    16d4:	11 f0       	breq	.+4      	; 0x16da <__floatsisf+0x48>
    16d6:	96 e9       	ldi	r25, 0x96	; 150
    16d8:	11 c0       	rjmp	.+34     	; 0x16fc <__floatsisf+0x6a>
    16da:	77 23       	and	r23, r23
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <__floatsisf+0x54>
    16de:	9e e8       	ldi	r25, 0x8E	; 142
    16e0:	87 2f       	mov	r24, r23
    16e2:	76 2f       	mov	r23, r22
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <__floatsisf+0x5e>
    16e6:	66 23       	and	r22, r22
    16e8:	71 f0       	breq	.+28     	; 0x1706 <__floatsisf+0x74>
    16ea:	96 e8       	ldi	r25, 0x86	; 134
    16ec:	86 2f       	mov	r24, r22
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	60 e0       	ldi	r22, 0x00	; 0
    16f2:	2a f0       	brmi	.+10     	; 0x16fe <__floatsisf+0x6c>
    16f4:	9a 95       	dec	r25
    16f6:	66 0f       	add	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	88 1f       	adc	r24, r24
    16fc:	da f7       	brpl	.-10     	; 0x16f4 <__floatsisf+0x62>
    16fe:	88 0f       	add	r24, r24
    1700:	96 95       	lsr	r25
    1702:	87 95       	ror	r24
    1704:	97 f9       	bld	r25, 7
    1706:	08 95       	ret

00001708 <__fp_cmp>:
    1708:	99 0f       	add	r25, r25
    170a:	00 08       	sbc	r0, r0
    170c:	55 0f       	add	r21, r21
    170e:	aa 0b       	sbc	r26, r26
    1710:	e0 e8       	ldi	r30, 0x80	; 128
    1712:	fe ef       	ldi	r31, 0xFE	; 254
    1714:	16 16       	cp	r1, r22
    1716:	17 06       	cpc	r1, r23
    1718:	e8 07       	cpc	r30, r24
    171a:	f9 07       	cpc	r31, r25
    171c:	c0 f0       	brcs	.+48     	; 0x174e <__fp_cmp+0x46>
    171e:	12 16       	cp	r1, r18
    1720:	13 06       	cpc	r1, r19
    1722:	e4 07       	cpc	r30, r20
    1724:	f5 07       	cpc	r31, r21
    1726:	98 f0       	brcs	.+38     	; 0x174e <__fp_cmp+0x46>
    1728:	62 1b       	sub	r22, r18
    172a:	73 0b       	sbc	r23, r19
    172c:	84 0b       	sbc	r24, r20
    172e:	95 0b       	sbc	r25, r21
    1730:	39 f4       	brne	.+14     	; 0x1740 <__fp_cmp+0x38>
    1732:	0a 26       	eor	r0, r26
    1734:	61 f0       	breq	.+24     	; 0x174e <__fp_cmp+0x46>
    1736:	23 2b       	or	r18, r19
    1738:	24 2b       	or	r18, r20
    173a:	25 2b       	or	r18, r21
    173c:	21 f4       	brne	.+8      	; 0x1746 <__fp_cmp+0x3e>
    173e:	08 95       	ret
    1740:	0a 26       	eor	r0, r26
    1742:	09 f4       	brne	.+2      	; 0x1746 <__fp_cmp+0x3e>
    1744:	a1 40       	sbci	r26, 0x01	; 1
    1746:	a6 95       	lsr	r26
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	81 1d       	adc	r24, r1
    174c:	81 1d       	adc	r24, r1
    174e:	08 95       	ret

00001750 <__fp_inf>:
    1750:	97 f9       	bld	r25, 7
    1752:	9f 67       	ori	r25, 0x7F	; 127
    1754:	80 e8       	ldi	r24, 0x80	; 128
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	08 95       	ret

0000175c <__fp_nan>:
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	80 ec       	ldi	r24, 0xC0	; 192
    1760:	08 95       	ret

00001762 <__fp_pscA>:
    1762:	00 24       	eor	r0, r0
    1764:	0a 94       	dec	r0
    1766:	16 16       	cp	r1, r22
    1768:	17 06       	cpc	r1, r23
    176a:	18 06       	cpc	r1, r24
    176c:	09 06       	cpc	r0, r25
    176e:	08 95       	ret

00001770 <__fp_pscB>:
    1770:	00 24       	eor	r0, r0
    1772:	0a 94       	dec	r0
    1774:	12 16       	cp	r1, r18
    1776:	13 06       	cpc	r1, r19
    1778:	14 06       	cpc	r1, r20
    177a:	05 06       	cpc	r0, r21
    177c:	08 95       	ret

0000177e <__fp_round>:
    177e:	09 2e       	mov	r0, r25
    1780:	03 94       	inc	r0
    1782:	00 0c       	add	r0, r0
    1784:	11 f4       	brne	.+4      	; 0x178a <__fp_round+0xc>
    1786:	88 23       	and	r24, r24
    1788:	52 f0       	brmi	.+20     	; 0x179e <__fp_round+0x20>
    178a:	bb 0f       	add	r27, r27
    178c:	40 f4       	brcc	.+16     	; 0x179e <__fp_round+0x20>
    178e:	bf 2b       	or	r27, r31
    1790:	11 f4       	brne	.+4      	; 0x1796 <__fp_round+0x18>
    1792:	60 ff       	sbrs	r22, 0
    1794:	04 c0       	rjmp	.+8      	; 0x179e <__fp_round+0x20>
    1796:	6f 5f       	subi	r22, 0xFF	; 255
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	08 95       	ret

000017a0 <__fp_split3>:
    17a0:	57 fd       	sbrc	r21, 7
    17a2:	90 58       	subi	r25, 0x80	; 128
    17a4:	44 0f       	add	r20, r20
    17a6:	55 1f       	adc	r21, r21
    17a8:	59 f0       	breq	.+22     	; 0x17c0 <__fp_splitA+0x10>
    17aa:	5f 3f       	cpi	r21, 0xFF	; 255
    17ac:	71 f0       	breq	.+28     	; 0x17ca <__fp_splitA+0x1a>
    17ae:	47 95       	ror	r20

000017b0 <__fp_splitA>:
    17b0:	88 0f       	add	r24, r24
    17b2:	97 fb       	bst	r25, 7
    17b4:	99 1f       	adc	r25, r25
    17b6:	61 f0       	breq	.+24     	; 0x17d0 <__fp_splitA+0x20>
    17b8:	9f 3f       	cpi	r25, 0xFF	; 255
    17ba:	79 f0       	breq	.+30     	; 0x17da <__fp_splitA+0x2a>
    17bc:	87 95       	ror	r24
    17be:	08 95       	ret
    17c0:	12 16       	cp	r1, r18
    17c2:	13 06       	cpc	r1, r19
    17c4:	14 06       	cpc	r1, r20
    17c6:	55 1f       	adc	r21, r21
    17c8:	f2 cf       	rjmp	.-28     	; 0x17ae <__fp_split3+0xe>
    17ca:	46 95       	lsr	r20
    17cc:	f1 df       	rcall	.-30     	; 0x17b0 <__fp_splitA>
    17ce:	08 c0       	rjmp	.+16     	; 0x17e0 <__fp_splitA+0x30>
    17d0:	16 16       	cp	r1, r22
    17d2:	17 06       	cpc	r1, r23
    17d4:	18 06       	cpc	r1, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	f1 cf       	rjmp	.-30     	; 0x17bc <__fp_splitA+0xc>
    17da:	86 95       	lsr	r24
    17dc:	71 05       	cpc	r23, r1
    17de:	61 05       	cpc	r22, r1
    17e0:	08 94       	sec
    17e2:	08 95       	ret

000017e4 <__fp_zero>:
    17e4:	e8 94       	clt

000017e6 <__fp_szero>:
    17e6:	bb 27       	eor	r27, r27
    17e8:	66 27       	eor	r22, r22
    17ea:	77 27       	eor	r23, r23
    17ec:	cb 01       	movw	r24, r22
    17ee:	97 f9       	bld	r25, 7
    17f0:	08 95       	ret

000017f2 <__mulsf3>:
    17f2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <__mulsf3x>
    17f6:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_round>
    17fa:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__fp_pscA>
    17fe:	38 f0       	brcs	.+14     	; 0x180e <__mulsf3+0x1c>
    1800:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fp_pscB>
    1804:	20 f0       	brcs	.+8      	; 0x180e <__mulsf3+0x1c>
    1806:	95 23       	and	r25, r21
    1808:	11 f0       	breq	.+4      	; 0x180e <__mulsf3+0x1c>
    180a:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>
    180e:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__fp_nan>
    1812:	11 24       	eor	r1, r1
    1814:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__fp_szero>

00001818 <__mulsf3x>:
    1818:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__fp_split3>
    181c:	70 f3       	brcs	.-36     	; 0x17fa <__mulsf3+0x8>

0000181e <__mulsf3_pse>:
    181e:	95 9f       	mul	r25, r21
    1820:	c1 f3       	breq	.-16     	; 0x1812 <__mulsf3+0x20>
    1822:	95 0f       	add	r25, r21
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	55 1f       	adc	r21, r21
    1828:	62 9f       	mul	r22, r18
    182a:	f0 01       	movw	r30, r0
    182c:	72 9f       	mul	r23, r18
    182e:	bb 27       	eor	r27, r27
    1830:	f0 0d       	add	r31, r0
    1832:	b1 1d       	adc	r27, r1
    1834:	63 9f       	mul	r22, r19
    1836:	aa 27       	eor	r26, r26
    1838:	f0 0d       	add	r31, r0
    183a:	b1 1d       	adc	r27, r1
    183c:	aa 1f       	adc	r26, r26
    183e:	64 9f       	mul	r22, r20
    1840:	66 27       	eor	r22, r22
    1842:	b0 0d       	add	r27, r0
    1844:	a1 1d       	adc	r26, r1
    1846:	66 1f       	adc	r22, r22
    1848:	82 9f       	mul	r24, r18
    184a:	22 27       	eor	r18, r18
    184c:	b0 0d       	add	r27, r0
    184e:	a1 1d       	adc	r26, r1
    1850:	62 1f       	adc	r22, r18
    1852:	73 9f       	mul	r23, r19
    1854:	b0 0d       	add	r27, r0
    1856:	a1 1d       	adc	r26, r1
    1858:	62 1f       	adc	r22, r18
    185a:	83 9f       	mul	r24, r19
    185c:	a0 0d       	add	r26, r0
    185e:	61 1d       	adc	r22, r1
    1860:	22 1f       	adc	r18, r18
    1862:	74 9f       	mul	r23, r20
    1864:	33 27       	eor	r19, r19
    1866:	a0 0d       	add	r26, r0
    1868:	61 1d       	adc	r22, r1
    186a:	23 1f       	adc	r18, r19
    186c:	84 9f       	mul	r24, r20
    186e:	60 0d       	add	r22, r0
    1870:	21 1d       	adc	r18, r1
    1872:	82 2f       	mov	r24, r18
    1874:	76 2f       	mov	r23, r22
    1876:	6a 2f       	mov	r22, r26
    1878:	11 24       	eor	r1, r1
    187a:	9f 57       	subi	r25, 0x7F	; 127
    187c:	50 40       	sbci	r21, 0x00	; 0
    187e:	9a f0       	brmi	.+38     	; 0x18a6 <__mulsf3_pse+0x88>
    1880:	f1 f0       	breq	.+60     	; 0x18be <__mulsf3_pse+0xa0>
    1882:	88 23       	and	r24, r24
    1884:	4a f0       	brmi	.+18     	; 0x1898 <__mulsf3_pse+0x7a>
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	bb 1f       	adc	r27, r27
    188c:	66 1f       	adc	r22, r22
    188e:	77 1f       	adc	r23, r23
    1890:	88 1f       	adc	r24, r24
    1892:	91 50       	subi	r25, 0x01	; 1
    1894:	50 40       	sbci	r21, 0x00	; 0
    1896:	a9 f7       	brne	.-22     	; 0x1882 <__mulsf3_pse+0x64>
    1898:	9e 3f       	cpi	r25, 0xFE	; 254
    189a:	51 05       	cpc	r21, r1
    189c:	80 f0       	brcs	.+32     	; 0x18be <__mulsf3_pse+0xa0>
    189e:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__fp_inf>
    18a2:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__fp_szero>
    18a6:	5f 3f       	cpi	r21, 0xFF	; 255
    18a8:	e4 f3       	brlt	.-8      	; 0x18a2 <__mulsf3_pse+0x84>
    18aa:	98 3e       	cpi	r25, 0xE8	; 232
    18ac:	d4 f3       	brlt	.-12     	; 0x18a2 <__mulsf3_pse+0x84>
    18ae:	86 95       	lsr	r24
    18b0:	77 95       	ror	r23
    18b2:	67 95       	ror	r22
    18b4:	b7 95       	ror	r27
    18b6:	f7 95       	ror	r31
    18b8:	e7 95       	ror	r30
    18ba:	9f 5f       	subi	r25, 0xFF	; 255
    18bc:	c1 f7       	brne	.-16     	; 0x18ae <__mulsf3_pse+0x90>
    18be:	fe 2b       	or	r31, r30
    18c0:	88 0f       	add	r24, r24
    18c2:	91 1d       	adc	r25, r1
    18c4:	96 95       	lsr	r25
    18c6:	87 95       	ror	r24
    18c8:	97 f9       	bld	r25, 7
    18ca:	08 95       	ret

000018cc <_ZN15OrangutanAnalog7setModeEh.part.0>:
    18cc:	ec e7       	ldi	r30, 0x7C	; 124
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 7d       	andi	r24, 0xDF	; 223
    18d4:	80 83       	st	Z, r24
    18d6:	08 95       	ret

000018d8 <_ZN15OrangutanAnalog7setModeEh>:
    18d8:	81 11       	cpse	r24, r1
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <_ZN15OrangutanAnalog7setModeEh+0xa>
    18dc:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_ZN15OrangutanAnalog7setModeEh.part.0>
    18e0:	08 95       	ret
    18e2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    18e6:	80 62       	ori	r24, 0x20	; 32
    18e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    18ec:	08 95       	ret

000018ee <_ZN15OrangutanAnalog7getModeEv>:
    18ee:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    18f2:	85 fb       	bst	r24, 5
    18f4:	88 27       	eor	r24, r24
    18f6:	80 f9       	bld	r24, 0
    18f8:	08 95       	ret

000018fa <_ZN15OrangutanAnalog16conversionResultEv>:
    18fa:	0e 94 77 0c 	call	0x18ee	; 0x18ee <_ZN15OrangutanAnalog7getModeEv>
    18fe:	88 23       	and	r24, r24
    1900:	21 f0       	breq	.+8      	; 0x190a <_ZN15OrangutanAnalog16conversionResultEv+0x10>
    1902:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	08 95       	ret
    190a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    190e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1912:	08 95       	ret

00001914 <_ZN15OrangutanAnalog15startConversionEhh>:
    1914:	80 32       	cpi	r24, 0x20	; 32
    1916:	a0 f4       	brcc	.+40     	; 0x1940 <_ZN15OrangutanAnalog15startConversionEhh+0x2c>
    1918:	97 e8       	ldi	r25, 0x87	; 135
    191a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    191e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1922:	66 23       	and	r22, r22
    1924:	11 f0       	breq	.+4      	; 0x192a <_ZN15OrangutanAnalog15startConversionEhh+0x16>
    1926:	90 6c       	ori	r25, 0xC0	; 192
    1928:	02 c0       	rjmp	.+4      	; 0x192e <_ZN15OrangutanAnalog15startConversionEhh+0x1a>
    192a:	9f 77       	andi	r25, 0x7F	; 127
    192c:	90 64       	ori	r25, 0x40	; 64
    192e:	90 7e       	andi	r25, 0xE0	; 224
    1930:	98 2b       	or	r25, r24
    1932:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1936:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    193a:	80 64       	ori	r24, 0x40	; 64
    193c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1940:	08 95       	ret

00001942 <_ZN15OrangutanAnalog11readAverageEhj>:
    1942:	a0 e0       	ldi	r26, 0x00	; 0
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e7 ea       	ldi	r30, 0xA7	; 167
    1948:	fc e0       	ldi	r31, 0x0C	; 12
    194a:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__prologue_saves__+0x14>
    194e:	eb 01       	movw	r28, r22
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN15OrangutanAnalog15startConversionEhh>
    1956:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    195a:	86 fd       	sbrc	r24, 6
    195c:	fc cf       	rjmp	.-8      	; 0x1956 <_ZN15OrangutanAnalog11readAverageEhj+0x14>
    195e:	8e 01       	movw	r16, r28
    1960:	c1 2c       	mov	r12, r1
    1962:	d1 2c       	mov	r13, r1
    1964:	76 01       	movw	r14, r12
    1966:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    196a:	80 64       	ori	r24, 0x40	; 64
    196c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1970:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1974:	86 fd       	sbrc	r24, 6
    1976:	fc cf       	rjmp	.-8      	; 0x1970 <_ZN15OrangutanAnalog11readAverageEhj+0x2e>
    1978:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZN15OrangutanAnalog16conversionResultEv>
    197c:	c8 0e       	add	r12, r24
    197e:	d9 1e       	adc	r13, r25
    1980:	e1 1c       	adc	r14, r1
    1982:	f1 1c       	adc	r15, r1
    1984:	01 50       	subi	r16, 0x01	; 1
    1986:	11 09       	sbc	r17, r1
    1988:	01 15       	cp	r16, r1
    198a:	11 05       	cpc	r17, r1
    198c:	61 f7       	brne	.-40     	; 0x1966 <_ZN15OrangutanAnalog11readAverageEhj+0x24>
    198e:	ce 01       	movw	r24, r28
    1990:	96 95       	lsr	r25
    1992:	87 95       	ror	r24
    1994:	c0 34       	cpi	r28, 0x40	; 64
    1996:	d1 05       	cpc	r29, r1
    1998:	38 f4       	brcc	.+14     	; 0x19a8 <_ZN15OrangutanAnalog11readAverageEhj+0x66>
    199a:	8c 0d       	add	r24, r12
    199c:	9d 1d       	adc	r25, r13
    199e:	be 01       	movw	r22, r28
    19a0:	0e 94 3d 1a 	call	0x347a	; 0x347a <__udivmodhi4>
    19a4:	cb 01       	movw	r24, r22
    19a6:	0e c0       	rjmp	.+28     	; 0x19c4 <_ZN15OrangutanAnalog11readAverageEhj+0x82>
    19a8:	a7 01       	movw	r20, r14
    19aa:	96 01       	movw	r18, r12
    19ac:	28 0f       	add	r18, r24
    19ae:	39 1f       	adc	r19, r25
    19b0:	41 1d       	adc	r20, r1
    19b2:	51 1d       	adc	r21, r1
    19b4:	ca 01       	movw	r24, r20
    19b6:	b9 01       	movw	r22, r18
    19b8:	9e 01       	movw	r18, r28
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    19c2:	c9 01       	movw	r24, r18
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	e8 e0       	ldi	r30, 0x08	; 8
    19ca:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__epilogue_restores__+0x14>

000019ce <_ZN15OrangutanAnalog12toMillivoltsEj>:
    19ce:	cf 92       	push	r12
    19d0:	df 92       	push	r13
    19d2:	ef 92       	push	r14
    19d4:	ff 92       	push	r15
    19d6:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    19da:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    19de:	9c 01       	movw	r18, r24
    19e0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__umulhisi3>
    19e4:	6b 01       	movw	r12, r22
    19e6:	7c 01       	movw	r14, r24
    19e8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <_ZN15OrangutanAnalog7getModeEv>
    19ec:	88 23       	and	r24, r24
    19ee:	59 f0       	breq	.+22     	; 0x1a06 <_ZN15OrangutanAnalog12toMillivoltsEj+0x38>
    19f0:	c7 01       	movw	r24, r14
    19f2:	b6 01       	movw	r22, r12
    19f4:	61 58       	subi	r22, 0x81	; 129
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	8f 4f       	sbci	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	2f ef       	ldi	r18, 0xFF	; 255
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	0a c0       	rjmp	.+20     	; 0x1a1a <_ZN15OrangutanAnalog12toMillivoltsEj+0x4c>
    1a06:	c7 01       	movw	r24, r14
    1a08:	b6 01       	movw	r22, r12
    1a0a:	61 50       	subi	r22, 0x01	; 1
    1a0c:	7e 4f       	sbci	r23, 0xFE	; 254
    1a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a10:	9f 4f       	sbci	r25, 0xFF	; 255
    1a12:	2f ef       	ldi	r18, 0xFF	; 255
    1a14:	33 e0       	ldi	r19, 0x03	; 3
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    1a1e:	c9 01       	movw	r24, r18
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	df 90       	pop	r13
    1a26:	cf 90       	pop	r12
    1a28:	08 95       	ret

00001a2a <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>:
    1a2a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZN15OrangutanAnalog11readAverageEhj>
    1a2e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN15OrangutanAnalog12toMillivoltsEj>
    1a32:	08 95       	ret

00001a34 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>:
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <_ZN15OrangutanAnalog7getModeEv>
    1a3e:	18 2f       	mov	r17, r24
    1a40:	0e 94 66 0c 	call	0x18cc	; 0x18cc <_ZN15OrangutanAnalog7setModeEh.part.0>
    1a44:	6a e0       	ldi	r22, 0x0A	; 10
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	86 e0       	ldi	r24, 0x06	; 6
    1a4a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <_ZN15OrangutanAnalog21readAverageMillivoltsEhj>
    1a4e:	ec 01       	movw	r28, r24
    1a50:	81 2f       	mov	r24, r17
    1a52:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN15OrangutanAnalog7setModeEh>
    1a56:	ce 01       	movw	r24, r28
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	8c 0f       	add	r24, r28
    1a5e:	9d 1f       	adc	r25, r29
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	96 95       	lsr	r25
    1a64:	87 95       	ror	r24
    1a66:	df 91       	pop	r29
    1a68:	cf 91       	pop	r28
    1a6a:	1f 91       	pop	r17
    1a6c:	08 95       	ret

00001a6e <read_battery_millivolts_3pi>:
    1a6e:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <_ZN15OrangutanAnalog25readBatteryMillivolts_3piEv>
    1a72:	08 95       	ret

00001a74 <_ZL16currentCharacterv>:
    1a74:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <_ZL17use_program_space>
    1a78:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <__data_end>
    1a7c:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <__data_end+0x1>
    1a80:	99 23       	and	r25, r25
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <_ZL16currentCharacterv+0x14>
    1a84:	84 91       	lpm	r24, Z
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <_ZL16currentCharacterv+0x16>
    1a88:	80 81       	ld	r24, Z
    1a8a:	2f eb       	ldi	r18, 0xBF	; 191
    1a8c:	28 0f       	add	r18, r24
    1a8e:	2a 31       	cpi	r18, 0x1A	; 26
    1a90:	10 f4       	brcc	.+4      	; 0x1a96 <_ZL16currentCharacterv+0x22>
    1a92:	80 5e       	subi	r24, 0xE0	; 224
    1a94:	08 95       	ret
    1a96:	80 32       	cpi	r24, 0x20	; 32
    1a98:	49 f4       	brne	.+18     	; 0x1aac <_ZL16currentCharacterv+0x38>
    1a9a:	9f 01       	movw	r18, r30
    1a9c:	2f 5f       	subi	r18, 0xFF	; 255
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1aa4:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1aa8:	ef 2b       	or	r30, r31
    1aaa:	31 f7       	brne	.-52     	; 0x1a78 <_ZL16currentCharacterv+0x4>
    1aac:	08 95       	ret

00001aae <_ZL9getNumberv>:
    1aae:	1f 93       	push	r17
    1ab0:	cf 93       	push	r28
    1ab2:	df 93       	push	r29
    1ab4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZL16currentCharacterv>
    1ab8:	c0 e0       	ldi	r28, 0x00	; 0
    1aba:	d0 e0       	ldi	r29, 0x00	; 0
    1abc:	1a e0       	ldi	r17, 0x0A	; 10
    1abe:	90 ed       	ldi	r25, 0xD0	; 208
    1ac0:	98 0f       	add	r25, r24
    1ac2:	9a 30       	cpi	r25, 0x0A	; 10
    1ac4:	b8 f4       	brcc	.+46     	; 0x1af4 <_ZL9getNumberv+0x46>
    1ac6:	9e 01       	movw	r18, r28
    1ac8:	12 9f       	mul	r17, r18
    1aca:	e0 01       	movw	r28, r0
    1acc:	13 9f       	mul	r17, r19
    1ace:	d0 0d       	add	r29, r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	c8 0f       	add	r28, r24
    1ad4:	d1 1d       	adc	r29, r1
    1ad6:	87 fd       	sbrc	r24, 7
    1ad8:	da 95       	dec	r29
    1ada:	e0 97       	sbiw	r28, 0x30	; 48
    1adc:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    1ae0:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    1aea:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    1aee:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZL16currentCharacterv>
    1af2:	e5 cf       	rjmp	.-54     	; 0x1abe <_ZL9getNumberv+0x10>
    1af4:	ce 01       	movw	r24, r28
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	08 95       	ret

00001afe <_ZN15OrangutanBuzzer5init2Ev>:
    1afe:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1b02:	83 e2       	ldi	r24, 0x23	; 35
    1b04:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1b08:	81 e1       	ldi	r24, 0x11	; 17
    1b0a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1b0e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    1b12:	80 e1       	ldi	r24, 0x10	; 16
    1b14:	97 e2       	ldi	r25, 0x27	; 39
    1b16:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1b1a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1b1e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1b22:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1b26:	22 9a       	sbi	0x04, 2	; 4
    1b28:	78 94       	sei
    1b2a:	08 95       	ret

00001b2c <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
    1b2c:	8f 92       	push	r8
    1b2e:	9f 92       	push	r9
    1b30:	af 92       	push	r10
    1b32:	bf 92       	push	r11
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	5c 01       	movw	r10, r24
    1b44:	8b 01       	movw	r16, r22
    1b46:	d4 2e       	mov	r13, r20
    1b48:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <buzzerInitialized>
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2e>
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <buzzerInitialized>
    1b56:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN15OrangutanBuzzer5init2Ev>
    1b5a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <buzzerFinished>
    1b5e:	b7 fe       	sbrs	r11, 7
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x40>
    1b62:	e8 94       	clt
    1b64:	b7 f8       	bld	r11, 7
    1b66:	2a e0       	ldi	r18, 0x0A	; 10
    1b68:	f2 2e       	mov	r15, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x44>
    1b6c:	ff 24       	eor	r15, r15
    1b6e:	f3 94       	inc	r15
    1b70:	e0 90 81 00 	lds	r14, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1b74:	2e 2d       	mov	r18, r14
    1b76:	28 7f       	andi	r18, 0xF8	; 248
    1b78:	e2 2e       	mov	r14, r18
    1b7a:	48 ec       	ldi	r20, 0xC8	; 200
    1b7c:	f4 9e       	mul	r15, r20
    1b7e:	c0 01       	movw	r24, r0
    1b80:	11 24       	eor	r1, r1
    1b82:	8a 15       	cp	r24, r10
    1b84:	9b 05       	cpc	r25, r11
    1b86:	e0 f4       	brcc	.+56     	; 0x1bc0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x94>
    1b88:	e5 01       	movw	r28, r10
    1b8a:	51 e1       	ldi	r21, 0x11	; 17
    1b8c:	a5 16       	cp	r10, r21
    1b8e:	57 e2       	ldi	r21, 0x27	; 39
    1b90:	b5 06       	cpc	r11, r21
    1b92:	10 f0       	brcs	.+4      	; 0x1b98 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x6c>
    1b94:	c0 e1       	ldi	r28, 0x10	; 16
    1b96:	d7 e2       	ldi	r29, 0x27	; 39
    1b98:	be 01       	movw	r22, r28
    1b9a:	76 95       	lsr	r23
    1b9c:	67 95       	ror	r22
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	60 58       	subi	r22, 0x80	; 128
    1ba4:	79 46       	sbci	r23, 0x69	; 105
    1ba6:	87 46       	sbci	r24, 0x67	; 103
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	4e 01       	movw	r8, r28
    1bac:	a1 2c       	mov	r10, r1
    1bae:	b1 2c       	mov	r11, r1
    1bb0:	a5 01       	movw	r20, r10
    1bb2:	94 01       	movw	r18, r8
    1bb4:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    1bb8:	59 01       	movw	r10, r18
    1bba:	8e 2d       	mov	r24, r14
    1bbc:	81 60       	ori	r24, 0x01	; 1
    1bbe:	24 c0       	rjmp	.+72     	; 0x1c08 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xdc>
    1bc0:	c8 e2       	ldi	r28, 0x28	; 40
    1bc2:	fc 9e       	mul	r15, r28
    1bc4:	c0 2d       	mov	r28, r0
    1bc6:	11 24       	eor	r1, r1
    1bc8:	d0 e0       	ldi	r29, 0x00	; 0
    1bca:	ca 15       	cp	r28, r10
    1bcc:	db 05       	cpc	r29, r11
    1bce:	08 f4       	brcc	.+2      	; 0x1bd2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xa6>
    1bd0:	e5 01       	movw	r28, r10
    1bd2:	be 01       	movw	r22, r28
    1bd4:	76 95       	lsr	r23
    1bd6:	67 95       	ror	r22
    1bd8:	9e 01       	movw	r18, r28
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	8a e0       	ldi	r24, 0x0A	; 10
    1be0:	f8 12       	cpse	r15, r24
    1be2:	07 c0       	rjmp	.+14     	; 0x1bf2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc6>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	60 5e       	subi	r22, 0xE0	; 224
    1bea:	73 44       	sbci	r23, 0x43	; 67
    1bec:	81 44       	sbci	r24, 0x41	; 65
    1bee:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd2>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	60 53       	subi	r22, 0x30	; 48
    1bf8:	7d 4e       	sbci	r23, 0xED	; 237
    1bfa:	8c 4e       	sbci	r24, 0xEC	; 236
    1bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfe:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    1c02:	59 01       	movw	r10, r18
    1c04:	8e 2d       	mov	r24, r14
    1c06:	82 60       	ori	r24, 0x02	; 2
    1c08:	88 2e       	mov	r8, r24
    1c0a:	2a e0       	ldi	r18, 0x0A	; 10
    1c0c:	f2 12       	cpse	r15, r18
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xf2>
    1c10:	ce 01       	movw	r24, r28
    1c12:	05 96       	adiw	r24, 0x05	; 5
    1c14:	6a e0       	ldi	r22, 0x0A	; 10
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	0e 94 3d 1a 	call	0x347a	; 0x347a <__udivmodhi4>
    1c1c:	eb 01       	movw	r28, r22
    1c1e:	c8 3e       	cpi	r28, 0xE8	; 232
    1c20:	43 e0       	ldi	r20, 0x03	; 3
    1c22:	d4 07       	cpc	r29, r20
    1c24:	59 f0       	breq	.+22     	; 0x1c3c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x110>
    1c26:	98 01       	movw	r18, r16
    1c28:	de 01       	movw	r26, r28
    1c2a:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__umulhisi3>
    1c2e:	28 ee       	ldi	r18, 0xE8	; 232
    1c30:	33 e0       	ldi	r19, 0x03	; 3
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	50 e0       	ldi	r21, 0x00	; 0
    1c36:	0e 94 87 1a 	call	0x350e	; 0x350e <__divmodsi4>
    1c3a:	89 01       	movw	r16, r18
    1c3c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1c40:	80 92 81 00 	sts	0x0081, r8	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1c44:	b0 92 89 00 	sts	0x0089, r11	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1c48:	a0 92 88 00 	sts	0x0088, r10	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1c4c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1c50:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1c54:	4d 2d       	mov	r20, r13
    1c56:	40 31       	cpi	r20, 0x10	; 16
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x130>
    1c5a:	4f e0       	ldi	r20, 0x0F	; 15
    1c5c:	80 e1       	ldi	r24, 0x10	; 16
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	84 1b       	sub	r24, r20
    1c62:	91 09       	sbc	r25, r1
    1c64:	a9 01       	movw	r20, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x140>
    1c68:	56 95       	lsr	r21
    1c6a:	47 95       	ror	r20
    1c6c:	8a 95       	dec	r24
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13c>
    1c70:	50 93 8b 00 	sts	0x008B, r21	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1c74:	40 93 8a 00 	sts	0x008A, r20	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1c78:	10 93 9c 01 	sts	0x019C, r17	; 0x80019c <_ZL13buzzerTimeout+0x1>
    1c7c:	00 93 9b 01 	sts	0x019B, r16	; 0x80019b <_ZL13buzzerTimeout>
    1c80:	86 b3       	in	r24, 0x16	; 22
    1c82:	8f ef       	ldi	r24, 0xFF	; 255
    1c84:	86 bb       	out	0x16, r24	; 22
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	ff 90       	pop	r15
    1c96:	ef 90       	pop	r14
    1c98:	df 90       	pop	r13
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	9f 90       	pop	r9
    1ca0:	8f 90       	pop	r8
    1ca2:	08 95       	ret

00001ca4 <_ZN15OrangutanBuzzer8playNoteEhjh>:
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	eb 01       	movw	r28, r22
    1caa:	8f 3f       	cpi	r24, 0xFF	; 255
    1cac:	11 f0       	breq	.+4      	; 0x1cb2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
    1cae:	41 11       	cpse	r20, r1
    1cb0:	05 c0       	rjmp	.+10     	; 0x1cbc <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	be 01       	movw	r22, r28
    1cb6:	88 ee       	ldi	r24, 0xE8	; 232
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	43 c0       	rjmp	.+134    	; 0x1d42 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9e>
    1cbc:	81 31       	cpi	r24, 0x11	; 17
    1cbe:	30 f0       	brcs	.+12     	; 0x1ccc <_ZN15OrangutanBuzzer8playNoteEhjh+0x28>
    1cc0:	50 ef       	ldi	r21, 0xF0	; 240
    1cc2:	58 0f       	add	r21, r24
    1cc4:	50 36       	cpi	r21, 0x60	; 96
    1cc6:	18 f0       	brcs	.+6      	; 0x1cce <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1cc8:	5f e5       	ldi	r21, 0x5F	; 95
    1cca:	01 c0       	rjmp	.+2      	; 0x1cce <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
    1ccc:	50 e0       	ldi	r21, 0x00	; 0
    1cce:	85 2f       	mov	r24, r21
    1cd0:	6c e0       	ldi	r22, 0x0C	; 12
    1cd2:	0e 94 31 1a 	call	0x3462	; 0x3462 <__udivmodqi4>
    1cd6:	68 2f       	mov	r22, r24
    1cd8:	74 ef       	ldi	r23, 0xF4	; 244
    1cda:	76 03       	mulsu	r23, r22
    1cdc:	90 01       	movw	r18, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	25 0f       	add	r18, r21
    1ce2:	31 1d       	adc	r19, r1
    1ce4:	2c 30       	cpi	r18, 0x0C	; 12
    1ce6:	31 05       	cpc	r19, r1
    1ce8:	40 f4       	brcc	.+16     	; 0x1cfa <_ZN15OrangutanBuzzer8playNoteEhjh+0x56>
    1cea:	f9 01       	movw	r30, r18
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	e8 5c       	subi	r30, 0xC8	; 200
    1cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf4:	20 81       	ld	r18, Z
    1cf6:	31 81       	ldd	r19, Z+1	; 0x01
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <_ZN15OrangutanBuzzer8playNoteEhjh+0x5a>
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	87 30       	cpi	r24, 0x07	; 7
    1d00:	81 f0       	breq	.+32     	; 0x1d22 <_ZN15OrangutanBuzzer8playNoteEhjh+0x7e>
    1d02:	08 2e       	mov	r0, r24
    1d04:	02 c0       	rjmp	.+4      	; 0x1d0a <_ZN15OrangutanBuzzer8playNoteEhjh+0x66>
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	0a 94       	dec	r0
    1d0c:	e2 f7       	brpl	.-8      	; 0x1d06 <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	28 f0       	brcs	.+10     	; 0x1d1c <_ZN15OrangutanBuzzer8playNoteEhjh+0x78>
    1d12:	c9 01       	movw	r24, r18
    1d14:	05 96       	adiw	r24, 0x05	; 5
    1d16:	6a e0       	ldi	r22, 0x0A	; 10
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	0c c0       	rjmp	.+24     	; 0x1d34 <_ZN15OrangutanBuzzer8playNoteEhjh+0x90>
    1d1c:	c9 01       	movw	r24, r18
    1d1e:	90 58       	subi	r25, 0x80	; 128
    1d20:	0c c0       	rjmp	.+24     	; 0x1d3a <_ZN15OrangutanBuzzer8playNoteEhjh+0x96>
    1d22:	c9 01       	movw	r24, r18
    1d24:	36 e0       	ldi	r19, 0x06	; 6
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	3a 95       	dec	r19
    1d2c:	e1 f7       	brne	.-8      	; 0x1d26 <_ZN15OrangutanBuzzer8playNoteEhjh+0x82>
    1d2e:	02 96       	adiw	r24, 0x02	; 2
    1d30:	65 e0       	ldi	r22, 0x05	; 5
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	0e 94 3d 1a 	call	0x347a	; 0x347a <__udivmodhi4>
    1d38:	cb 01       	movw	r24, r22
    1d3a:	40 31       	cpi	r20, 0x10	; 16
    1d3c:	08 f0       	brcs	.+2      	; 0x1d40 <_ZN15OrangutanBuzzer8playNoteEhjh+0x9c>
    1d3e:	4f e0       	ldi	r20, 0x0F	; 15
    1d40:	be 01       	movw	r22, r28
    1d42:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <_ZL8nextNotev>:
    1d4c:	a2 e0       	ldi	r26, 0x02	; 2
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ec ea       	ldi	r30, 0xAC	; 172
    1d52:	fe e0       	ldi	r31, 0x0E	; 14
    1d54:	0c 94 d0 1a 	jmp	0x35a0	; 0x35a0 <__prologue_saves__+0x4>
    1d58:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZL6octave>
    1d5c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL8staccato>
    1d60:	88 23       	and	r24, r24
    1d62:	21 f0       	breq	.+8      	; 0x1d6c <_ZL8nextNotev+0x20>
    1d64:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <_ZL22staccato_rest_duration>
    1d68:	61 11       	cpse	r22, r1
    1d6a:	17 c0       	rjmp	.+46     	; 0x1d9a <_ZL8nextNotev+0x4e>
    1d6c:	77 24       	eor	r7, r7
    1d6e:	73 94       	inc	r7
    1d70:	b0 ec       	ldi	r27, 0xC0	; 192
    1d72:	ab 2e       	mov	r10, r27
    1d74:	bd e5       	ldi	r27, 0x5D	; 93
    1d76:	bb 2e       	mov	r11, r27
    1d78:	1a e0       	ldi	r17, 0x0A	; 10
    1d7a:	61 2e       	mov	r6, r17
    1d7c:	04 e0       	ldi	r16, 0x04	; 4
    1d7e:	80 2e       	mov	r8, r16
    1d80:	80 ed       	ldi	r24, 0xD0	; 208
    1d82:	c8 2e       	mov	r12, r24
    1d84:	87 e0       	ldi	r24, 0x07	; 7
    1d86:	d8 2e       	mov	r13, r24
    1d88:	94 e0       	ldi	r25, 0x04	; 4
    1d8a:	e9 2e       	mov	r14, r25
    1d8c:	f1 2c       	mov	r15, r1
    1d8e:	04 ef       	ldi	r16, 0xF4	; 244
    1d90:	11 e0       	ldi	r17, 0x01	; 1
    1d92:	2f e0       	ldi	r18, 0x0F	; 15
    1d94:	42 2e       	mov	r4, r18
    1d96:	51 2c       	mov	r5, r1
    1d98:	15 c0       	rjmp	.+42     	; 0x1dc4 <_ZL8nextNotev+0x78>
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	40 e0       	ldi	r20, 0x00	; 0
    1d9e:	88 ee       	ldi	r24, 0xE8	; 232
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_ZN15OrangutanBuzzer13playFrequencyEjjh>
    1da6:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    1daa:	17 c1       	rjmp	.+558    	; 0x1fda <_ZL8nextNotev+0x28e>
    1dac:	86 36       	cpi	r24, 0x66	; 102
    1dae:	d4 f5       	brge	.+116    	; 0x1e24 <_ZL8nextNotev+0xd8>
    1db0:	81 36       	cpi	r24, 0x61	; 97
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <_ZL8nextNotev+0x6a>
    1db4:	a9 c0       	rjmp	.+338    	; 0x1f08 <_ZL8nextNotev+0x1bc>
    1db6:	7c f5       	brge	.+94     	; 0x1e16 <_ZL8nextNotev+0xca>
    1db8:	8c 33       	cpi	r24, 0x3C	; 60
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <_ZL8nextNotev+0x72>
    1dbc:	60 c0       	rjmp	.+192    	; 0x1e7e <_ZL8nextNotev+0x132>
    1dbe:	8e 33       	cpi	r24, 0x3E	; 62
    1dc0:	81 f4       	brne	.+32     	; 0x1de2 <_ZL8nextNotev+0x96>
    1dc2:	93 94       	inc	r9
    1dc4:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZL16currentCharacterv>
    1dc8:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1dcc:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1dd0:	2f 5f       	subi	r18, 0xFF	; 255
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1dd8:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1ddc:	85 36       	cpi	r24, 0x65	; 101
    1dde:	31 f7       	brne	.-52     	; 0x1dac <_ZL8nextNotev+0x60>
    1de0:	52 c0       	rjmp	.+164    	; 0x1e86 <_ZL8nextNotev+0x13a>
    1de2:	81 32       	cpi	r24, 0x21	; 33
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <_ZL8nextNotev+0x9c>
    1de6:	8b c0       	rjmp	.+278    	; 0x1efe <_ZL8nextNotev+0x1b2>
    1de8:	80 92 0a 01 	sts	0x010A, r8	; 0x80010a <_ZL6octave>
    1dec:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <_ZL19whole_note_duration+0x1>
    1df0:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <_ZL19whole_note_duration>
    1df4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_ZL9note_type+0x1>
    1df8:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_ZL9note_type>
    1dfc:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <_ZL8duration+0x1>
    1e00:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <_ZL8duration>
    1e04:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <_ZL6volume+0x1>
    1e08:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <_ZL6volume>
    1e0c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_ZL8staccato>
    1e10:	a4 e0       	ldi	r26, 0x04	; 4
    1e12:	9a 2e       	mov	r9, r26
    1e14:	d7 cf       	rjmp	.-82     	; 0x1dc4 <_ZL8nextNotev+0x78>
    1e16:	83 36       	cpi	r24, 0x63	; 99
    1e18:	a1 f1       	breq	.+104    	; 0x1e82 <_ZL8nextNotev+0x136>
    1e1a:	0c f4       	brge	.+2      	; 0x1e1e <_ZL8nextNotev+0xd2>
    1e1c:	78 c0       	rjmp	.+240    	; 0x1f0e <_ZL8nextNotev+0x1c2>
    1e1e:	10 e0       	ldi	r17, 0x00	; 0
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	77 c0       	rjmp	.+238    	; 0x1f12 <_ZL8nextNotev+0x1c6>
    1e24:	8d 36       	cpi	r24, 0x6D	; 109
    1e26:	c1 f1       	breq	.+112    	; 0x1e98 <_ZL8nextNotev+0x14c>
    1e28:	94 f4       	brge	.+36     	; 0x1e4e <_ZL8nextNotev+0x102>
    1e2a:	87 36       	cpi	r24, 0x67	; 103
    1e2c:	91 f1       	breq	.+100    	; 0x1e92 <_ZL8nextNotev+0x146>
    1e2e:	74 f1       	brlt	.+92     	; 0x1e8c <_ZL8nextNotev+0x140>
    1e30:	8c 36       	cpi	r24, 0x6C	; 108
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <_ZL8nextNotev+0xea>
    1e34:	64 c0       	rjmp	.+200    	; 0x1efe <_ZL8nextNotev+0x1b2>
    1e36:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZL9getNumberv>
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL9note_type+0x1>
    1e40:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL9note_type>
    1e44:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1e48:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1e4c:	51 c0       	rjmp	.+162    	; 0x1ef0 <_ZL8nextNotev+0x1a4>
    1e4e:	82 37       	cpi	r24, 0x72	; 114
    1e50:	c9 f1       	breq	.+114    	; 0x1ec4 <_ZL8nextNotev+0x178>
    1e52:	4c f4       	brge	.+18     	; 0x1e66 <_ZL8nextNotev+0x11a>
    1e54:	8f 36       	cpi	r24, 0x6F	; 111
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <_ZL8nextNotev+0x10e>
    1e58:	52 c0       	rjmp	.+164    	; 0x1efe <_ZL8nextNotev+0x1b2>
    1e5a:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZL9getNumberv>
    1e5e:	98 2e       	mov	r9, r24
    1e60:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL6octave>
    1e64:	af cf       	rjmp	.-162    	; 0x1dc4 <_ZL8nextNotev+0x78>
    1e66:	84 37       	cpi	r24, 0x74	; 116
    1e68:	81 f1       	breq	.+96     	; 0x1eca <_ZL8nextNotev+0x17e>
    1e6a:	86 37       	cpi	r24, 0x76	; 118
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <_ZL8nextNotev+0x124>
    1e6e:	47 c0       	rjmp	.+142    	; 0x1efe <_ZL8nextNotev+0x1b2>
    1e70:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZL9getNumberv>
    1e74:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_ZL6volume+0x1>
    1e78:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_ZL6volume>
    1e7c:	a3 cf       	rjmp	.-186    	; 0x1dc4 <_ZL8nextNotev+0x78>
    1e7e:	9a 94       	dec	r9
    1e80:	a1 cf       	rjmp	.-190    	; 0x1dc4 <_ZL8nextNotev+0x78>
    1e82:	10 e0       	ldi	r17, 0x00	; 0
    1e84:	20 c0       	rjmp	.+64     	; 0x1ec6 <_ZL8nextNotev+0x17a>
    1e86:	10 e0       	ldi	r17, 0x00	; 0
    1e88:	84 e0       	ldi	r24, 0x04	; 4
    1e8a:	43 c0       	rjmp	.+134    	; 0x1f12 <_ZL8nextNotev+0x1c6>
    1e8c:	10 e0       	ldi	r17, 0x00	; 0
    1e8e:	85 e0       	ldi	r24, 0x05	; 5
    1e90:	40 c0       	rjmp	.+128    	; 0x1f12 <_ZL8nextNotev+0x1c6>
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	87 e0       	ldi	r24, 0x07	; 7
    1e96:	3d c0       	rjmp	.+122    	; 0x1f12 <_ZL8nextNotev+0x1c6>
    1e98:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZL16currentCharacterv>
    1e9c:	8c 36       	cpi	r24, 0x6C	; 108
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <_ZL8nextNotev+0x15a>
    1ea0:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <_ZL8staccato>
    1ea4:	04 c0       	rjmp	.+8      	; 0x1eae <_ZL8nextNotev+0x162>
    1ea6:	70 92 98 01 	sts	0x0198, r7	; 0x800198 <_ZL8staccato>
    1eaa:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    1eae:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1eb2:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1eb6:	2f 5f       	subi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1ebe:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1ec2:	80 cf       	rjmp	.-256    	; 0x1dc4 <_ZL8nextNotev+0x78>
    1ec4:	11 e0       	ldi	r17, 0x01	; 1
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	24 c0       	rjmp	.+72     	; 0x1f12 <_ZL8nextNotev+0x1c6>
    1eca:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZL9getNumberv>
    1ece:	bc 01       	movw	r22, r24
    1ed0:	c5 01       	movw	r24, r10
    1ed2:	0e 94 3d 1a 	call	0x347a	; 0x347a <__udivmodhi4>
    1ed6:	66 9e       	mul	r6, r22
    1ed8:	c0 01       	movw	r24, r0
    1eda:	67 9e       	mul	r6, r23
    1edc:	90 0d       	add	r25, r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_ZL19whole_note_duration+0x1>
    1ee4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL19whole_note_duration>
    1ee8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_ZL9note_type>
    1eec:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_ZL9note_type+0x1>
    1ef0:	0e 94 3d 1a 	call	0x347a	; 0x347a <__udivmodhi4>
    1ef4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_ZL8duration+0x1>
    1ef8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_ZL8duration>
    1efc:	63 cf       	rjmp	.-314    	; 0x1dc4 <_ZL8nextNotev+0x78>
    1efe:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <__data_end+0x1>
    1f02:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
    1f06:	69 c0       	rjmp	.+210    	; 0x1fda <_ZL8nextNotev+0x28e>
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	89 e0       	ldi	r24, 0x09	; 9
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <_ZL8nextNotev+0x1c6>
    1f0e:	10 e0       	ldi	r17, 0x00	; 0
    1f10:	8b e0       	ldi	r24, 0x0B	; 11
    1f12:	08 2f       	mov	r16, r24
    1f14:	9c e0       	ldi	r25, 0x0C	; 12
    1f16:	99 9e       	mul	r9, r25
    1f18:	00 0d       	add	r16, r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZL16currentCharacterv>
    1f20:	98 2f       	mov	r25, r24
    1f22:	97 7f       	andi	r25, 0xF7	; 247
    1f24:	93 32       	cpi	r25, 0x23	; 35
    1f26:	61 f4       	brne	.+24     	; 0x1f40 <_ZL8nextNotev+0x1f4>
    1f28:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1f2c:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1f30:	2f 5f       	subi	r18, 0xFF	; 255
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
    1f34:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1f38:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1f3c:	0f 5f       	subi	r16, 0xFF	; 255
    1f3e:	ee cf       	rjmp	.-36     	; 0x1f1c <_ZL8nextNotev+0x1d0>
    1f40:	8d 32       	cpi	r24, 0x2D	; 45
    1f42:	71 f4       	brne	.+28     	; 0x1f60 <_ZL8nextNotev+0x214>
    1f44:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1f48:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1f4c:	2f 5f       	subi	r18, 0xFF	; 255
    1f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f50:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1f54:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1f58:	01 50       	subi	r16, 0x01	; 1
    1f5a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZL16currentCharacterv>
    1f5e:	f0 cf       	rjmp	.-32     	; 0x1f40 <_ZL8nextNotev+0x1f4>
    1f60:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL8duration>
    1f64:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL8duration+0x1>
    1f68:	81 53       	subi	r24, 0x31	; 49
    1f6a:	88 30       	cpi	r24, 0x08	; 8
    1f6c:	50 f4       	brcc	.+20     	; 0x1f82 <_ZL8nextNotev+0x236>
    1f6e:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <_ZL19whole_note_duration>
    1f72:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <_ZL19whole_note_duration+0x1>
    1f76:	0e 94 57 0d 	call	0x1aae	; 0x1aae <_ZL9getNumberv>
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	c7 01       	movw	r24, r14
    1f7e:	0e 94 3d 1a 	call	0x347a	; 0x347a <__udivmodhi4>
    1f82:	7b 01       	movw	r14, r22
    1f84:	f6 94       	lsr	r15
    1f86:	e7 94       	ror	r14
    1f88:	69 83       	std	Y+1, r22	; 0x01
    1f8a:	7a 83       	std	Y+2, r23	; 0x02
    1f8c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <_ZL16currentCharacterv>
    1f90:	69 81       	ldd	r22, Y+1	; 0x01
    1f92:	7a 81       	ldd	r23, Y+2	; 0x02
    1f94:	8e 32       	cpi	r24, 0x2E	; 46
    1f96:	69 f4       	brne	.+26     	; 0x1fb2 <_ZL8nextNotev+0x266>
    1f98:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <__data_end>
    1f9c:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <__data_end+0x1>
    1fa0:	2f 5f       	subi	r18, 0xFF	; 255
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	30 93 95 01 	sts	0x0195, r19	; 0x800195 <__data_end+0x1>
    1fa8:	20 93 94 01 	sts	0x0194, r18	; 0x800194 <__data_end>
    1fac:	6e 0d       	add	r22, r14
    1fae:	7f 1d       	adc	r23, r15
    1fb0:	e9 cf       	rjmp	.-46     	; 0x1f84 <_ZL8nextNotev+0x238>
    1fb2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <_ZL8staccato>
    1fb6:	88 23       	and	r24, r24
    1fb8:	39 f0       	breq	.+14     	; 0x1fc8 <_ZL8nextNotev+0x27c>
    1fba:	9b 01       	movw	r18, r22
    1fbc:	36 95       	lsr	r19
    1fbe:	27 95       	ror	r18
    1fc0:	20 93 97 01 	sts	0x0197, r18	; 0x800197 <_ZL22staccato_rest_duration>
    1fc4:	62 1b       	sub	r22, r18
    1fc6:	71 09       	sbc	r23, r1
    1fc8:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_ZL6volume>
    1fcc:	11 23       	and	r17, r17
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <_ZL8nextNotev+0x288>
    1fd0:	8f ef       	ldi	r24, 0xFF	; 255
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <_ZL8nextNotev+0x28a>
    1fd4:	80 2f       	mov	r24, r16
    1fd6:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <_ZN15OrangutanBuzzer8playNoteEhjh>
    1fda:	22 96       	adiw	r28, 0x02	; 2
    1fdc:	e0 e1       	ldi	r30, 0x10	; 16
    1fde:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__epilogue_restores__+0x4>

00001fe2 <__vector_13>:
    1fe2:	1f 92       	push	r1
    1fe4:	0f 92       	push	r0
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	0f 92       	push	r0
    1fea:	11 24       	eor	r1, r1
    1fec:	2f 93       	push	r18
    1fee:	3f 93       	push	r19
    1ff0:	4f 93       	push	r20
    1ff2:	5f 93       	push	r21
    1ff4:	6f 93       	push	r22
    1ff6:	7f 93       	push	r23
    1ff8:	8f 93       	push	r24
    1ffa:	9f 93       	push	r25
    1ffc:	af 93       	push	r26
    1ffe:	bf 93       	push	r27
    2000:	ef 93       	push	r30
    2002:	ff 93       	push	r31
    2004:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_ZL13buzzerTimeout>
    2008:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <_ZL13buzzerTimeout+0x1>
    200c:	9c 01       	movw	r18, r24
    200e:	21 50       	subi	r18, 0x01	; 1
    2010:	31 09       	sbc	r19, r1
    2012:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <_ZL13buzzerTimeout+0x1>
    2016:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <_ZL13buzzerTimeout>
    201a:	89 2b       	or	r24, r25
    201c:	11 f5       	brne	.+68     	; 0x2062 <__vector_13+0x80>
    201e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2022:	78 94       	sei
    2024:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2028:	88 7f       	andi	r24, 0xF8	; 248
    202a:	81 60       	ori	r24, 0x01	; 1
    202c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    2030:	80 e1       	ldi	r24, 0x10	; 16
    2032:	97 e2       	ldi	r25, 0x27	; 39
    2034:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2038:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    203c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    2040:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buzzerFinished>
    204a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
    204e:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <__data_end+0x1>
    2052:	89 2b       	or	r24, r25
    2054:	31 f0       	breq	.+12     	; 0x2062 <__vector_13+0x80>
    2056:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <_ZL17play_mode_setting>
    205a:	81 11       	cpse	r24, r1
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <__vector_13+0x80>
    205e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZL8nextNotev>
    2062:	ff 91       	pop	r31
    2064:	ef 91       	pop	r30
    2066:	bf 91       	pop	r27
    2068:	af 91       	pop	r26
    206a:	9f 91       	pop	r25
    206c:	8f 91       	pop	r24
    206e:	7f 91       	pop	r23
    2070:	6f 91       	pop	r22
    2072:	5f 91       	pop	r21
    2074:	4f 91       	pop	r20
    2076:	3f 91       	pop	r19
    2078:	2f 91       	pop	r18
    207a:	0f 90       	pop	r0
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	0f 90       	pop	r0
    2080:	1f 90       	pop	r1
    2082:	18 95       	reti

00002084 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>:
    2084:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    2088:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
    208c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_ZL17use_program_space>
    2096:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <_ZL22staccato_rest_duration>
    209a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <_ZL8nextNotev>
    209e:	08 95       	ret

000020a0 <play_from_program_space>:
    20a0:	0e 94 42 10 	call	0x2084	; 0x2084 <_ZN15OrangutanBuzzer20playFromProgramSpaceEPKc>
    20a4:	08 95       	ret

000020a6 <delay_us.constprop.0>:
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	6f 93       	push	r22
    20ac:	64 e0       	ldi	r22, 0x04	; 4
    20ae:	6a 95       	dec	r22
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <delay_us.constprop.0+0x8>
    20b2:	6f 91       	pop	r22
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	c9 f7       	brne	.-14     	; 0x20aa <delay_us.constprop.0+0x4>
    20b8:	08 95       	ret

000020ba <_ZN12OrangutanLCD8busyWaitEv>:
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	1a b1       	in	r17, 0x0a	; 10
    20c4:	57 98       	cbi	0x0a, 7	; 10
    20c6:	5a 98       	cbi	0x0b, 2	; 11
    20c8:	28 9a       	sbi	0x05, 0	; 5
    20ca:	c0 e0       	ldi	r28, 0x00	; 0
    20cc:	d0 e0       	ldi	r29, 0x00	; 0
    20ce:	0e 94 53 10 	call	0x20a6	; 0x20a6 <delay_us.constprop.0>
    20d2:	5c 9a       	sbi	0x0b, 4	; 11
    20d4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <delay_us.constprop.0>
    20d8:	09 b1       	in	r16, 0x09	; 9
    20da:	5c 98       	cbi	0x0b, 4	; 11
    20dc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <delay_us.constprop.0>
    20e0:	5c 9a       	sbi	0x0b, 4	; 11
    20e2:	0e 94 53 10 	call	0x20a6	; 0x20a6 <delay_us.constprop.0>
    20e6:	5c 98       	cbi	0x0b, 4	; 11
    20e8:	24 96       	adiw	r28, 0x04	; 4
    20ea:	07 ff       	sbrs	r16, 7
    20ec:	10 c0       	rjmp	.+32     	; 0x210e <_ZN12OrangutanLCD8busyWaitEv+0x54>
    20ee:	ae 01       	movw	r20, r28
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	70 e0       	ldi	r23, 0x00	; 0
    20f4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <lcdTimeout>
    20f8:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <lcdTimeout+0x1>
    20fc:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <lcdTimeout+0x2>
    2100:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <lcdTimeout+0x3>
    2104:	48 17       	cp	r20, r24
    2106:	59 07       	cpc	r21, r25
    2108:	6a 07       	cpc	r22, r26
    210a:	7b 07       	cpc	r23, r27
    210c:	00 f3       	brcs	.-64     	; 0x20ce <_ZN12OrangutanLCD8busyWaitEv+0x14>
    210e:	1a b9       	out	0x0a, r17	; 10
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	08 95       	ret

0000211a <_ZN12OrangutanLCD8sendDataEh>:
    211a:	95 b1       	in	r25, 0x05	; 5
    211c:	28 2f       	mov	r18, r24
    211e:	21 70       	andi	r18, 0x01	; 1
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	48 2f       	mov	r20, r24
    2128:	46 70       	andi	r20, 0x06	; 6
    212a:	68 e0       	ldi	r22, 0x08	; 8
    212c:	46 9f       	mul	r20, r22
    212e:	a0 01       	movw	r20, r0
    2130:	11 24       	eor	r1, r1
    2132:	24 2b       	or	r18, r20
    2134:	9d 7c       	andi	r25, 0xCD	; 205
    2136:	29 2b       	or	r18, r25
    2138:	25 b9       	out	0x05, r18	; 5
    213a:	9b b1       	in	r25, 0x0b	; 11
    213c:	88 70       	andi	r24, 0x08	; 8
    213e:	82 95       	swap	r24
    2140:	80 7f       	andi	r24, 0xF0	; 240
    2142:	9f 77       	andi	r25, 0x7F	; 127
    2144:	89 2b       	or	r24, r25
    2146:	8b b9       	out	0x0b, r24	; 11
    2148:	5c 9a       	sbi	0x0b, 4	; 11
    214a:	0e 94 53 10 	call	0x20a6	; 0x20a6 <delay_us.constprop.0>
    214e:	5c 98       	cbi	0x0b, 4	; 11
    2150:	0e 94 53 10 	call	0x20a6	; 0x20a6 <delay_us.constprop.0>
    2154:	08 95       	ret

00002156 <_ZN12OrangutanLCD4sendEhhh>:
    2156:	a0 e0       	ldi	r26, 0x00	; 0
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e1 eb       	ldi	r30, 0xB1	; 177
    215c:	f0 e1       	ldi	r31, 0x10	; 16
    215e:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__prologue_saves__+0x16>
    2162:	c8 2f       	mov	r28, r24
    2164:	d6 2e       	mov	r13, r22
    2166:	e4 2e       	mov	r14, r20
    2168:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    216c:	81 11       	cpse	r24, r1
    216e:	05 c0       	rjmp	.+10     	; 0x217a <_ZN12OrangutanLCD4sendEhhh+0x24>
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <_ZZN12OrangutanLCD4initEvE11initialized>
    2176:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <_ZN12OrangutanLCD5init2Ev>
    217a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN12OrangutanLCD8busyWaitEv>
    217e:	14 b1       	in	r17, 0x04	; 4
    2180:	d5 b1       	in	r29, 0x05	; 5
    2182:	fa b0       	in	r15, 0x0a	; 10
    2184:	0b b1       	in	r16, 0x0b	; 11
    2186:	28 98       	cbi	0x05, 0	; 5
    2188:	dd 20       	and	r13, r13
    218a:	11 f0       	breq	.+4      	; 0x2190 <_ZN12OrangutanLCD4sendEhhh+0x3a>
    218c:	5a 9a       	sbi	0x0b, 2	; 11
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <_ZN12OrangutanLCD4sendEhhh+0x3c>
    2190:	5a 98       	cbi	0x0b, 2	; 11
    2192:	94 b1       	in	r25, 0x04	; 4
    2194:	92 63       	ori	r25, 0x32	; 50
    2196:	94 b9       	out	0x04, r25	; 4
    2198:	57 9a       	sbi	0x0a, 7	; 10
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	e8 16       	cp	r14, r24
    219e:	29 f0       	breq	.+10     	; 0x21aa <_ZN12OrangutanLCD4sendEhhh+0x54>
    21a0:	8c 2f       	mov	r24, r28
    21a2:	82 95       	swap	r24
    21a4:	8f 70       	andi	r24, 0x0F	; 15
    21a6:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN12OrangutanLCD8sendDataEh>
    21aa:	8c 2f       	mov	r24, r28
    21ac:	8f 70       	andi	r24, 0x0F	; 15
    21ae:	0e 94 8d 10 	call	0x211a	; 0x211a <_ZN12OrangutanLCD8sendDataEh>
    21b2:	fa b8       	out	0x0a, r15	; 10
    21b4:	0b b9       	out	0x0b, r16	; 11
    21b6:	14 b9       	out	0x04, r17	; 4
    21b8:	d5 b9       	out	0x05, r29	; 5
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	e7 e0       	ldi	r30, 0x07	; 7
    21c0:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__epilogue_restores__+0x16>

000021c4 <_ZN12OrangutanLCD8send_cmdEh>:
    21c4:	42 e0       	ldi	r20, 0x02	; 2
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN12OrangutanLCD4sendEhhh>
    21cc:	08 95       	ret

000021ce <_ZN12OrangutanLCD9send_dataEh>:
    21ce:	42 e0       	ldi	r20, 0x02	; 2
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN12OrangutanLCD4sendEhhh>
    21d6:	08 95       	ret

000021d8 <print_character>:
    21d8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN12OrangutanLCD9send_dataEh>
    21dc:	08 95       	ret

000021de <_ZN12OrangutanLCD13send_4bit_cmdEh>:
    21de:	41 e0       	ldi	r20, 0x01	; 1
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN12OrangutanLCD4sendEhhh>
    21e6:	08 95       	ret

000021e8 <_ZN12OrangutanLCD5init2Ev>:
    21e8:	80 e1       	ldi	r24, 0x10	; 16
    21ea:	97 e2       	ldi	r25, 0x27	; 39
    21ec:	a0 e0       	ldi	r26, 0x00	; 0
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <lcdTimeout>
    21f4:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <lcdTimeout+0x1>
    21f8:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <lcdTimeout+0x2>
    21fc:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <lcdTimeout+0x3>
    2200:	52 9a       	sbi	0x0a, 2	; 10
    2202:	20 9a       	sbi	0x04, 0	; 4
    2204:	54 9a       	sbi	0x0a, 4	; 10
    2206:	8e e1       	ldi	r24, 0x1E	; 30
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
    220e:	83 e0       	ldi	r24, 0x03	; 3
    2210:	0e 94 ef 10 	call	0x21de	; 0x21de <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2214:	86 e0       	ldi	r24, 0x06	; 6
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	0e 94 ef 10 	call	0x21de	; 0x21de <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	0e 94 ef 10 	call	0x21de	; 0x21de <_ZN12OrangutanLCD13send_4bit_cmdEh>
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	0e 94 ef 10 	call	0x21de	; 0x21de <_ZN12OrangutanLCD13send_4bit_cmdEh>
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
    2246:	88 e2       	ldi	r24, 0x28	; 40
    2248:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN12OrangutanLCD8send_cmdEh>
    224c:	88 e0       	ldi	r24, 0x08	; 8
    224e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN12OrangutanLCD8send_cmdEh>
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN12OrangutanLCD8send_cmdEh>
    2258:	86 e0       	ldi	r24, 0x06	; 6
    225a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN12OrangutanLCD8send_cmdEh>
    225e:	8c e0       	ldi	r24, 0x0C	; 12
    2260:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN12OrangutanLCD8send_cmdEh>
    2264:	08 95       	ret

00002266 <_ZN12OrangutanLCD5clearEv>:
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN12OrangutanLCD8send_cmdEh>
    226c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <printf_chars>
    2270:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <printf_chars+0x1>
    2274:	89 2b       	or	r24, r25
    2276:	f9 f0       	breq	.+62     	; 0x22b6 <_ZN12OrangutanLCD5clearEv+0x50>
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	a0 e2       	ldi	r26, 0x20	; 32
    227c:	26 2f       	mov	r18, r22
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <numLCDCols>
    2284:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <numLCDRows>
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	78 9f       	mul	r23, r24
    228e:	a0 01       	movw	r20, r0
    2290:	79 9f       	mul	r23, r25
    2292:	50 0d       	add	r21, r0
    2294:	11 24       	eor	r1, r1
    2296:	24 17       	cp	r18, r20
    2298:	35 07       	cpc	r19, r21
    229a:	4c f4       	brge	.+18     	; 0x22ae <_ZN12OrangutanLCD5clearEv+0x48>
    229c:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <printf_chars>
    22a0:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <printf_chars+0x1>
    22a4:	e2 0f       	add	r30, r18
    22a6:	f3 1f       	adc	r31, r19
    22a8:	a0 83       	st	Z, r26
    22aa:	6f 5f       	subi	r22, 0xFF	; 255
    22ac:	e7 cf       	rjmp	.-50     	; 0x227c <_ZN12OrangutanLCD5clearEv+0x16>
    22ae:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <col>
    22b2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <row>
    22b6:	08 95       	ret

000022b8 <clear>:
    22b8:	0e 94 33 11 	call	0x2266	; 0x2266 <_ZN12OrangutanLCD5clearEv>
    22bc:	08 95       	ret

000022be <_ZN12OrangutanLCD5printEPKc>:
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	ec 01       	movw	r28, r24
    22c4:	89 91       	ld	r24, Y+
    22c6:	88 23       	and	r24, r24
    22c8:	19 f0       	breq	.+6      	; 0x22d0 <_ZN12OrangutanLCD5printEPKc+0x12>
    22ca:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN12OrangutanLCD9send_dataEh>
    22ce:	fa cf       	rjmp	.-12     	; 0x22c4 <_ZN12OrangutanLCD5printEPKc+0x6>
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	08 95       	ret

000022d6 <print>:
    22d6:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN12OrangutanLCD5printEPKc>
    22da:	08 95       	ret

000022dc <_ZN12OrangutanLCD5printEm>:
    22dc:	aa e0       	ldi	r26, 0x0A	; 10
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e4 e7       	ldi	r30, 0x74	; 116
    22e2:	f1 e1       	ldi	r31, 0x11	; 17
    22e4:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__prologue_saves__+0x14>
    22e8:	1a e0       	ldi	r17, 0x0A	; 10
    22ea:	5a e0       	ldi	r21, 0x0A	; 10
    22ec:	c5 2e       	mov	r12, r21
    22ee:	d1 2c       	mov	r13, r1
    22f0:	e1 2c       	mov	r14, r1
    22f2:	f1 2c       	mov	r15, r1
    22f4:	06 2f       	mov	r16, r22
    22f6:	a7 01       	movw	r20, r14
    22f8:	96 01       	movw	r18, r12
    22fa:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    22fe:	ca 01       	movw	r24, r20
    2300:	b9 01       	movw	r22, r18
    2302:	11 50       	subi	r17, 0x01	; 1
    2304:	e1 e0       	ldi	r30, 0x01	; 1
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	ec 0f       	add	r30, r28
    230a:	fd 1f       	adc	r31, r29
    230c:	e1 0f       	add	r30, r17
    230e:	f1 1d       	adc	r31, r1
    2310:	00 5d       	subi	r16, 0xD0	; 208
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	62 9f       	mul	r22, r18
    2316:	00 19       	sub	r16, r0
    2318:	11 24       	eor	r1, r1
    231a:	00 83       	st	Z, r16
    231c:	61 15       	cp	r22, r1
    231e:	71 05       	cpc	r23, r1
    2320:	81 05       	cpc	r24, r1
    2322:	91 05       	cpc	r25, r1
    2324:	39 f7       	brne	.-50     	; 0x22f4 <_ZN12OrangutanLCD5printEm+0x18>
    2326:	1a 30       	cpi	r17, 0x0A	; 10
    2328:	58 f4       	brcc	.+22     	; 0x2340 <_ZN12OrangutanLCD5printEm+0x64>
    232a:	e1 e0       	ldi	r30, 0x01	; 1
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	ec 0f       	add	r30, r28
    2330:	fd 1f       	adc	r31, r29
    2332:	e1 0f       	add	r30, r17
    2334:	f1 1d       	adc	r31, r1
    2336:	80 81       	ld	r24, Z
    2338:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN12OrangutanLCD9send_dataEh>
    233c:	1f 5f       	subi	r17, 0xFF	; 255
    233e:	f3 cf       	rjmp	.-26     	; 0x2326 <_ZN12OrangutanLCD5printEm+0x4a>
    2340:	2a 96       	adiw	r28, 0x0a	; 10
    2342:	e8 e0       	ldi	r30, 0x08	; 8
    2344:	0c 94 f4 1a 	jmp	0x35e8	; 0x35e8 <__epilogue_restores__+0x14>

00002348 <_ZN12OrangutanLCD5printEl>:
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	6b 01       	movw	r12, r22
    2352:	7c 01       	movw	r14, r24
    2354:	97 ff       	sbrs	r25, 7
    2356:	0b c0       	rjmp	.+22     	; 0x236e <_ZN12OrangutanLCD5printEl+0x26>
    2358:	f0 94       	com	r15
    235a:	e0 94       	com	r14
    235c:	d0 94       	com	r13
    235e:	c0 94       	com	r12
    2360:	c1 1c       	adc	r12, r1
    2362:	d1 1c       	adc	r13, r1
    2364:	e1 1c       	adc	r14, r1
    2366:	f1 1c       	adc	r15, r1
    2368:	8d e2       	ldi	r24, 0x2D	; 45
    236a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <_ZN12OrangutanLCD9send_dataEh>
    236e:	c7 01       	movw	r24, r14
    2370:	b6 01       	movw	r22, r12
    2372:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN12OrangutanLCD5printEm>
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	df 90       	pop	r13
    237c:	cf 90       	pop	r12
    237e:	08 95       	ret

00002380 <print_long>:
    2380:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN12OrangutanLCD5printEl>
    2384:	08 95       	ret

00002386 <_ZN12OrangutanLCD6gotoXYEhh>:
    2386:	a5 e0       	ldi	r26, 0x05	; 5
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e9 ec       	ldi	r30, 0xC9	; 201
    238c:	f1 e1       	ldi	r31, 0x11	; 17
    238e:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__prologue_saves__+0x1e>
    2392:	18 2f       	mov	r17, r24
    2394:	80 e8       	ldi	r24, 0x80	; 128
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	80 ec       	ldi	r24, 0xC0	; 192
    239a:	8a 83       	std	Y+2, r24	; 0x02
    239c:	84 e9       	ldi	r24, 0x94	; 148
    239e:	8b 83       	std	Y+3, r24	; 0x03
    23a0:	84 ed       	ldi	r24, 0xD4	; 212
    23a2:	8c 83       	std	Y+4, r24	; 0x04
    23a4:	fe 01       	movw	r30, r28
    23a6:	e6 0f       	add	r30, r22
    23a8:	f1 1d       	adc	r31, r1
    23aa:	81 81       	ldd	r24, Z+1	; 0x01
    23ac:	81 0f       	add	r24, r17
    23ae:	6d 83       	std	Y+5, r22	; 0x05
    23b0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <_ZN12OrangutanLCD8send_cmdEh>
    23b4:	10 93 a1 01 	sts	0x01A1, r17	; 0x8001a1 <col>
    23b8:	6d 81       	ldd	r22, Y+5	; 0x05
    23ba:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <row>
    23be:	25 96       	adiw	r28, 0x05	; 5
    23c0:	e3 e0       	ldi	r30, 0x03	; 3
    23c2:	0c 94 f9 1a 	jmp	0x35f2	; 0x35f2 <__epilogue_restores__+0x1e>

000023c6 <lcd_goto_xy>:
    23c6:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN12OrangutanLCD6gotoXYEhh>
    23ca:	08 95       	ret

000023cc <_ZN16OrangutanDigital9setOutputEhh>:
    23cc:	88 30       	cpi	r24, 0x08	; 8
    23ce:	58 f4       	brcc	.+22     	; 0x23e6 <_ZN16OrangutanDigital9setOutputEhh+0x1a>
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	01 c0       	rjmp	.+2      	; 0x23d6 <_ZN16OrangutanDigital9setOutputEhh+0xa>
    23d4:	99 0f       	add	r25, r25
    23d6:	8a 95       	dec	r24
    23d8:	ea f7       	brpl	.-6      	; 0x23d4 <_ZN16OrangutanDigital9setOutputEhh+0x8>
    23da:	89 2f       	mov	r24, r25
    23dc:	aa e2       	ldi	r26, 0x2A	; 42
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	eb e2       	ldi	r30, 0x2B	; 43
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	21 c0       	rjmp	.+66     	; 0x2428 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    23e6:	8e 30       	cpi	r24, 0x0E	; 14
    23e8:	60 f4       	brcc	.+24     	; 0x2402 <_ZN16OrangutanDigital9setOutputEhh+0x36>
    23ea:	98 ef       	ldi	r25, 0xF8	; 248
    23ec:	98 0f       	add	r25, r24
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <_ZN16OrangutanDigital9setOutputEhh+0x28>
    23f2:	88 0f       	add	r24, r24
    23f4:	9a 95       	dec	r25
    23f6:	ea f7       	brpl	.-6      	; 0x23f2 <_ZN16OrangutanDigital9setOutputEhh+0x26>
    23f8:	a4 e2       	ldi	r26, 0x24	; 36
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e5 e2       	ldi	r30, 0x25	; 37
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	13 c0       	rjmp	.+38     	; 0x2428 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    2402:	85 31       	cpi	r24, 0x15	; 21
    2404:	60 f4       	brcc	.+24     	; 0x241e <_ZN16OrangutanDigital9setOutputEhh+0x52>
    2406:	92 ef       	ldi	r25, 0xF2	; 242
    2408:	98 0f       	add	r25, r24
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <_ZN16OrangutanDigital9setOutputEhh+0x44>
    240e:	88 0f       	add	r24, r24
    2410:	9a 95       	dec	r25
    2412:	ea f7       	brpl	.-6      	; 0x240e <_ZN16OrangutanDigital9setOutputEhh+0x42>
    2414:	a7 e2       	ldi	r26, 0x27	; 39
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e8 e2       	ldi	r30, 0x28	; 40
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <_ZN16OrangutanDigital9setOutputEhh+0x5c>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	a0 e0       	ldi	r26, 0x00	; 0
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e0 e0       	ldi	r30, 0x00	; 0
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	6f 3f       	cpi	r22, 0xFF	; 255
    242a:	19 f4       	brne	.+6      	; 0x2432 <_ZN16OrangutanDigital9setOutputEhh+0x66>
    242c:	90 81       	ld	r25, Z
    242e:	98 27       	eor	r25, r24
    2430:	09 c0       	rjmp	.+18     	; 0x2444 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    2432:	66 23       	and	r22, r22
    2434:	19 f0       	breq	.+6      	; 0x243c <_ZN16OrangutanDigital9setOutputEhh+0x70>
    2436:	90 81       	ld	r25, Z
    2438:	98 2b       	or	r25, r24
    243a:	04 c0       	rjmp	.+8      	; 0x2444 <_ZN16OrangutanDigital9setOutputEhh+0x78>
    243c:	20 81       	ld	r18, Z
    243e:	98 2f       	mov	r25, r24
    2440:	90 95       	com	r25
    2442:	92 23       	and	r25, r18
    2444:	90 83       	st	Z, r25
    2446:	9c 91       	ld	r25, X
    2448:	98 2b       	or	r25, r24
    244a:	9c 93       	st	X, r25
    244c:	08 95       	ret

0000244e <_ZN15OrangutanMotors5init2Ev>:
    244e:	83 ef       	ldi	r24, 0xF3	; 243
    2450:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2454:	84 bd       	out	0x24, r24	; 36
    2456:	82 e0       	ldi	r24, 0x02	; 2
    2458:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    245c:	85 bd       	out	0x25, r24	; 37
    245e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2462:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2466:	18 bc       	out	0x28, r1	; 40
    2468:	17 bc       	out	0x27, r1	; 39
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	86 e0       	ldi	r24, 0x06	; 6
    246e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN16OrangutanDigital9setOutputEhh>
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	85 e0       	ldi	r24, 0x05	; 5
    2476:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN16OrangutanDigital9setOutputEhh>
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	8b e0       	ldi	r24, 0x0B	; 11
    247e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN16OrangutanDigital9setOutputEhh>
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN16OrangutanDigital9setOutputEhh>
    248a:	08 95       	ret

0000248c <_ZN15OrangutanMotors4initEv>:
    248c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    2490:	81 11       	cpse	r24, r1
    2492:	05 c0       	rjmp	.+10     	; 0x249e <_ZN15OrangutanMotors4initEv+0x12>
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZZN15OrangutanMotors4initEvE11initialized>
    249a:	0e 94 27 12 	call	0x244e	; 0x244e <_ZN15OrangutanMotors5init2Ev>
    249e:	08 95       	ret

000024a0 <_ZN15OrangutanMotors10setM1SpeedEi>:
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	ec 01       	movw	r28, r24
    24a6:	0e 94 46 12 	call	0x248c	; 0x248c <_ZN15OrangutanMotors4initEv>
    24aa:	d7 ff       	sbrs	r29, 7
    24ac:	05 c0       	rjmp	.+10     	; 0x24b8 <_ZN15OrangutanMotors10setM1SpeedEi+0x18>
    24ae:	d1 95       	neg	r29
    24b0:	c1 95       	neg	r28
    24b2:	d1 09       	sbc	r29, r1
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	cf 3f       	cpi	r28, 0xFF	; 255
    24bc:	d1 05       	cpc	r29, r1
    24be:	19 f0       	breq	.+6      	; 0x24c6 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    24c0:	14 f0       	brlt	.+4      	; 0x24c6 <_ZN15OrangutanMotors10setM1SpeedEi+0x26>
    24c2:	cf ef       	ldi	r28, 0xFF	; 255
    24c4:	d0 e0       	ldi	r29, 0x00	; 0
    24c6:	88 23       	and	r24, r24
    24c8:	19 f0       	breq	.+6      	; 0x24d0 <_ZN15OrangutanMotors10setM1SpeedEi+0x30>
    24ca:	18 bc       	out	0x28, r1	; 40
    24cc:	c7 bd       	out	0x27, r28	; 39
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <_ZN15OrangutanMotors10setM1SpeedEi+0x34>
    24d0:	c8 bd       	out	0x28, r28	; 40
    24d2:	17 bc       	out	0x27, r1	; 39
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <_ZN15OrangutanMotors10setM2SpeedEi>:
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	ec 01       	movw	r28, r24
    24e0:	0e 94 46 12 	call	0x248c	; 0x248c <_ZN15OrangutanMotors4initEv>
    24e4:	d7 ff       	sbrs	r29, 7
    24e6:	05 c0       	rjmp	.+10     	; 0x24f2 <_ZN15OrangutanMotors10setM2SpeedEi+0x18>
    24e8:	d1 95       	neg	r29
    24ea:	c1 95       	neg	r28
    24ec:	d1 09       	sbc	r29, r1
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	01 c0       	rjmp	.+2      	; 0x24f4 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	cf 3f       	cpi	r28, 0xFF	; 255
    24f6:	d1 05       	cpc	r29, r1
    24f8:	19 f0       	breq	.+6      	; 0x2500 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    24fa:	14 f0       	brlt	.+4      	; 0x2500 <_ZN15OrangutanMotors10setM2SpeedEi+0x26>
    24fc:	cf ef       	ldi	r28, 0xFF	; 255
    24fe:	d0 e0       	ldi	r29, 0x00	; 0
    2500:	88 23       	and	r24, r24
    2502:	29 f0       	breq	.+10     	; 0x250e <_ZN15OrangutanMotors10setM2SpeedEi+0x34>
    2504:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2508:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    250c:	04 c0       	rjmp	.+8      	; 0x2516 <_ZN15OrangutanMotors10setM2SpeedEi+0x3c>
    250e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    2512:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	08 95       	ret

0000251c <_ZN15OrangutanMotors9setSpeedsEii>:
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	eb 01       	movw	r28, r22
    2522:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN15OrangutanMotors10setM1SpeedEi>
    2526:	ce 01       	movw	r24, r28
    2528:	0e 94 6d 12 	call	0x24da	; 0x24da <_ZN15OrangutanMotors10setM2SpeedEi>
    252c:	df 91       	pop	r29
    252e:	cf 91       	pop	r28
    2530:	08 95       	ret

00002532 <set_motors>:
    2532:	0e 94 8e 12 	call	0x251c	; 0x251c <_ZN15OrangutanMotors9setSpeedsEii>
    2536:	08 95       	ret

00002538 <_ZN20OrangutanPushbuttons5init2Ev>:
    2538:	84 b1       	in	r24, 0x04	; 4
    253a:	8d 7c       	andi	r24, 0xCD	; 205
    253c:	84 b9       	out	0x04, r24	; 4
    253e:	85 b1       	in	r24, 0x05	; 5
    2540:	82 63       	ori	r24, 0x32	; 50
    2542:	85 b9       	out	0x05, r24	; 5
    2544:	85 e0       	ldi	r24, 0x05	; 5
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	6f 93       	push	r22
    254a:	64 e0       	ldi	r22, 0x04	; 4
    254c:	6a 95       	dec	r22
    254e:	f1 f7       	brne	.-4      	; 0x254c <_ZN20OrangutanPushbuttons5init2Ev+0x14>
    2550:	6f 91       	pop	r22
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	c9 f7       	brne	.-14     	; 0x2548 <_ZN20OrangutanPushbuttons5init2Ev+0x10>
    2556:	08 95       	ret

00002558 <_ZN20OrangutanPushbuttons4initEv>:
    2558:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    255c:	81 11       	cpse	r24, r1
    255e:	05 c0       	rjmp	.+10     	; 0x256a <_ZN20OrangutanPushbuttons4initEv+0x12>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_ZZN20OrangutanPushbuttons4initEvE11initialized>
    2566:	0e 94 9c 12 	call	0x2538	; 0x2538 <_ZN20OrangutanPushbuttons5init2Ev>
    256a:	08 95       	ret

0000256c <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
    256c:	cf 93       	push	r28
    256e:	c8 2f       	mov	r28, r24
    2570:	0e 94 ac 12 	call	0x2558	; 0x2558 <_ZN20OrangutanPushbuttons4initEv>
    2574:	83 b1       	in	r24, 0x03	; 3
    2576:	8c 23       	and	r24, r28
    2578:	e9 f3       	breq	.-6      	; 0x2574 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    257a:	8a e0       	ldi	r24, 0x0A	; 10
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	0e 94 a2 14 	call	0x2944	; 0x2944 <delay_ms>
    2582:	83 b1       	in	r24, 0x03	; 3
    2584:	8c 23       	and	r24, r28
    2586:	b1 f3       	breq	.-20     	; 0x2574 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x8>
    2588:	83 b1       	in	r24, 0x03	; 3
    258a:	8c 23       	and	r24, r28
    258c:	cf 91       	pop	r28
    258e:	08 95       	ret

00002590 <wait_for_button_release>:
    2590:	0e 94 b6 12 	call	0x256c	; 0x256c <_ZN20OrangutanPushbuttons14waitForReleaseEh>
    2594:	08 95       	ret

00002596 <_ZN20OrangutanPushbuttons9isPressedEh>:
    2596:	a1 e0       	ldi	r26, 0x01	; 1
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e1 ed       	ldi	r30, 0xD1	; 209
    259c:	f2 e1       	ldi	r31, 0x12	; 18
    259e:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__prologue_saves__+0x20>
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	0e 94 ac 12 	call	0x2558	; 0x2558 <_ZN20OrangutanPushbuttons4initEv>
    25a8:	93 b1       	in	r25, 0x03	; 3
    25aa:	90 95       	com	r25
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	89 23       	and	r24, r25
    25b0:	21 96       	adiw	r28, 0x01	; 1
    25b2:	e2 e0       	ldi	r30, 0x02	; 2
    25b4:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <__epilogue_restores__+0x20>

000025b8 <button_is_pressed>:
    25b8:	0e 94 cb 12 	call	0x2596	; 0x2596 <_ZN20OrangutanPushbuttons9isPressedEh>
    25bc:	08 95       	ret

000025be <serial_receive_buffer_full>:
    25be:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <_ZN15OrangutanSerial5portsE+0x2>
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <_ZN15OrangutanSerial5portsE+0x4>
    25c8:	29 13       	cpse	r18, r25
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	08 95       	ret

000025ce <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>:
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	9a e0       	ldi	r25, 0x0A	; 10
    25d4:	89 9f       	mul	r24, r25
    25d6:	f0 01       	movw	r30, r0
    25d8:	11 24       	eor	r1, r1
    25da:	eb 55       	subi	r30, 0x5B	; 91
    25dc:	fe 4f       	sbci	r31, 0xFE	; 254
    25de:	80 85       	ldd	r24, Z+8	; 0x08
    25e0:	91 85       	ldd	r25, Z+9	; 0x09
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	21 f0       	breq	.+8      	; 0x25ee <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    25e6:	52 81       	ldd	r21, Z+2	; 0x02
    25e8:	44 81       	ldd	r20, Z+4	; 0x04
    25ea:	54 17       	cp	r21, r20
    25ec:	80 f0       	brcs	.+32     	; 0x260e <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x40>
    25ee:	8a e0       	ldi	r24, 0x0A	; 10
    25f0:	82 9f       	mul	r24, r18
    25f2:	f0 01       	movw	r30, r0
    25f4:	83 9f       	mul	r24, r19
    25f6:	f0 0d       	add	r31, r0
    25f8:	11 24       	eor	r1, r1
    25fa:	eb 55       	subi	r30, 0x5B	; 91
    25fc:	fe 4f       	sbci	r31, 0xFE	; 254
    25fe:	92 81       	ldd	r25, Z+2	; 0x02
    2600:	84 81       	ldd	r24, Z+4	; 0x04
    2602:	98 13       	cpse	r25, r24
    2604:	0e c0       	rjmp	.+28     	; 0x2622 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x54>
    2606:	85 81       	ldd	r24, Z+5	; 0x05
    2608:	81 11       	cpse	r24, r1
    260a:	0a c0       	rjmp	.+20     	; 0x2620 <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x52>
    260c:	08 95       	ret
    260e:	42 81       	ldd	r20, Z+2	; 0x02
    2610:	dc 01       	movw	r26, r24
    2612:	a4 0f       	add	r26, r20
    2614:	b1 1d       	adc	r27, r1
    2616:	6c 93       	st	X, r22
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	8f 5f       	subi	r24, 0xFF	; 255
    261c:	82 83       	std	Z+2, r24	; 0x02
    261e:	e7 cf       	rjmp	.-50     	; 0x25ee <_ZN15OrangutanSerial21serial_rx_handle_byteEhh+0x20>
    2620:	12 82       	std	Z+2, r1	; 0x02
    2622:	08 95       	ret

00002624 <_ZN15OrangutanSerial15serial_rx_checkEh>:
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    262c:	9f 77       	andi	r25, 0x7F	; 127
    262e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2632:	c8 2f       	mov	r28, r24
    2634:	d0 e0       	ldi	r29, 0x00	; 0
    2636:	9a e0       	ldi	r25, 0x0A	; 10
    2638:	89 9f       	mul	r24, r25
    263a:	f0 01       	movw	r30, r0
    263c:	11 24       	eor	r1, r1
    263e:	eb 55       	subi	r30, 0x5B	; 91
    2640:	fe 4f       	sbci	r31, 0xFE	; 254
    2642:	20 85       	ldd	r18, Z+8	; 0x08
    2644:	31 85       	ldd	r19, Z+9	; 0x09
    2646:	23 2b       	or	r18, r19
    2648:	41 f0       	breq	.+16     	; 0x265a <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    264a:	22 81       	ldd	r18, Z+2	; 0x02
    264c:	94 81       	ldd	r25, Z+4	; 0x04
    264e:	29 17       	cp	r18, r25
    2650:	20 f4       	brcc	.+8      	; 0x265a <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2652:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2656:	97 fd       	sbrc	r25, 7
    2658:	11 c0       	rjmp	.+34     	; 0x267c <_ZN15OrangutanSerial15serial_rx_checkEh+0x58>
    265a:	8a e0       	ldi	r24, 0x0A	; 10
    265c:	8c 9f       	mul	r24, r28
    265e:	f0 01       	movw	r30, r0
    2660:	8d 9f       	mul	r24, r29
    2662:	f0 0d       	add	r31, r0
    2664:	11 24       	eor	r1, r1
    2666:	eb 55       	subi	r30, 0x5B	; 91
    2668:	fe 4f       	sbci	r31, 0xFE	; 254
    266a:	80 81       	ld	r24, Z
    266c:	81 11       	cpse	r24, r1
    266e:	0b c0       	rjmp	.+22     	; 0x2686 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    2670:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2674:	80 68       	ori	r24, 0x80	; 128
    2676:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    267a:	05 c0       	rjmp	.+10     	; 0x2686 <_ZN15OrangutanSerial15serial_rx_checkEh+0x62>
    267c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2680:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    2684:	ea cf       	rjmp	.-44     	; 0x265a <_ZN15OrangutanSerial15serial_rx_checkEh+0x36>
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	08 95       	ret

0000268c <_ZN15OrangutanSerial14receive_inlineEhPchh>:
    268c:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2690:	9f 77       	andi	r25, 0x7F	; 127
    2692:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2696:	9a e0       	ldi	r25, 0x0A	; 10
    2698:	89 9f       	mul	r24, r25
    269a:	f0 01       	movw	r30, r0
    269c:	11 24       	eor	r1, r1
    269e:	eb 55       	subi	r30, 0x5B	; 91
    26a0:	fe 4f       	sbci	r31, 0xFE	; 254
    26a2:	71 87       	std	Z+9, r23	; 0x09
    26a4:	60 87       	std	Z+8, r22	; 0x08
    26a6:	12 82       	std	Z+2, r1	; 0x02
    26a8:	44 83       	std	Z+4, r20	; 0x04
    26aa:	25 83       	std	Z+5, r18	; 0x05
    26ac:	80 81       	ld	r24, Z
    26ae:	81 11       	cpse	r24, r1
    26b0:	05 c0       	rjmp	.+10     	; 0x26bc <_ZN15OrangutanSerial14receive_inlineEhPchh+0x30>
    26b2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    26b6:	80 68       	ori	r24, 0x80	; 128
    26b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    26bc:	08 95       	ret

000026be <_ZN15OrangutanSerial7receiveEPch>:
    26be:	46 2f       	mov	r20, r22
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	bc 01       	movw	r22, r24
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	0e 94 46 13 	call	0x268c	; 0x268c <_ZN15OrangutanSerial14receive_inlineEhPchh>
    26ca:	08 95       	ret

000026cc <serial_receive>:
    26cc:	0e 94 5f 13 	call	0x26be	; 0x26be <_ZN15OrangutanSerial7receiveEPch>
    26d0:	08 95       	ret

000026d2 <__vector_18>:
    26d2:	1f 92       	push	r1
    26d4:	0f 92       	push	r0
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	0f 92       	push	r0
    26da:	11 24       	eor	r1, r1
    26dc:	2f 93       	push	r18
    26de:	3f 93       	push	r19
    26e0:	4f 93       	push	r20
    26e2:	5f 93       	push	r21
    26e4:	6f 93       	push	r22
    26e6:	7f 93       	push	r23
    26e8:	8f 93       	push	r24
    26ea:	9f 93       	push	r25
    26ec:	af 93       	push	r26
    26ee:	bf 93       	push	r27
    26f0:	ef 93       	push	r30
    26f2:	ff 93       	push	r31
    26f4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	0e 94 e7 12 	call	0x25ce	; 0x25ce <_ZN15OrangutanSerial21serial_rx_handle_byteEhh>
    26fe:	ff 91       	pop	r31
    2700:	ef 91       	pop	r30
    2702:	bf 91       	pop	r27
    2704:	af 91       	pop	r26
    2706:	9f 91       	pop	r25
    2708:	8f 91       	pop	r24
    270a:	7f 91       	pop	r23
    270c:	6f 91       	pop	r22
    270e:	5f 91       	pop	r21
    2710:	4f 91       	pop	r20
    2712:	3f 91       	pop	r19
    2714:	2f 91       	pop	r18
    2716:	0f 90       	pop	r0
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	0f 90       	pop	r0
    271c:	1f 90       	pop	r1
    271e:	18 95       	reti

00002720 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>:
    2720:	9a e0       	ldi	r25, 0x0A	; 10
    2722:	89 9f       	mul	r24, r25
    2724:	f0 01       	movw	r30, r0
    2726:	11 24       	eor	r1, r1
    2728:	eb 55       	subi	r30, 0x5B	; 91
    272a:	fe 4f       	sbci	r31, 0xFE	; 254
    272c:	86 81       	ldd	r24, Z+6	; 0x06
    272e:	97 81       	ldd	r25, Z+7	; 0x07
    2730:	89 2b       	or	r24, r25
    2732:	59 f0       	breq	.+22     	; 0x274a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	83 81       	ldd	r24, Z+3	; 0x03
    2738:	98 17       	cp	r25, r24
    273a:	38 f4       	brcc	.+14     	; 0x274a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    273c:	80 81       	ld	r24, Z
    273e:	81 11       	cpse	r24, r1
    2740:	04 c0       	rjmp	.+8      	; 0x274a <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x2a>
    2742:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2746:	80 62       	ori	r24, 0x20	; 32
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <_ZN15OrangutanSerial24uart_update_tx_interruptEh+0x30>
    274a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    274e:	8f 7d       	andi	r24, 0xDF	; 223
    2750:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2754:	08 95       	ret

00002756 <_ZN15OrangutanSerial15initUART_inlineEh>:
    2756:	9a e0       	ldi	r25, 0x0A	; 10
    2758:	89 9f       	mul	r24, r25
    275a:	f0 01       	movw	r30, r0
    275c:	11 24       	eor	r1, r1
    275e:	eb 55       	subi	r30, 0x5B	; 91
    2760:	fe 4f       	sbci	r31, 0xFE	; 254
    2762:	90 81       	ld	r25, Z
    2764:	91 11       	cpse	r25, r1
    2766:	02 c0       	rjmp	.+4      	; 0x276c <_ZN15OrangutanSerial15initUART_inlineEh+0x16>
    2768:	98 e9       	ldi	r25, 0x98	; 152
    276a:	01 c0       	rjmp	.+2      	; 0x276e <_ZN15OrangutanSerial15initUART_inlineEh+0x18>
    276c:	98 e1       	ldi	r25, 0x18	; 24
    276e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2772:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2776:	78 94       	sei
    2778:	08 95       	ret

0000277a <serial_set_baud_rate>:
    277a:	cf 92       	push	r12
    277c:	df 92       	push	r13
    277e:	ef 92       	push	r14
    2780:	ff 92       	push	r15
    2782:	6b 01       	movw	r12, r22
    2784:	7c 01       	movw	r14, r24
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	0e 94 ab 13 	call	0x2756	; 0x2756 <_ZN15OrangutanSerial15initUART_inlineEh>
    278c:	a8 ef       	ldi	r26, 0xF8	; 248
    278e:	bf ef       	ldi	r27, 0xFF	; 255
    2790:	a7 01       	movw	r20, r14
    2792:	96 01       	movw	r18, r12
    2794:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__mulohisi3>
    2798:	73 5d       	subi	r23, 0xD3	; 211
    279a:	8e 4c       	sbci	r24, 0xCE	; 206
    279c:	9e 4f       	sbci	r25, 0xFE	; 254
    279e:	e4 e0       	ldi	r30, 0x04	; 4
    27a0:	22 0f       	add	r18, r18
    27a2:	33 1f       	adc	r19, r19
    27a4:	44 1f       	adc	r20, r20
    27a6:	55 1f       	adc	r21, r21
    27a8:	ea 95       	dec	r30
    27aa:	d1 f7       	brne	.-12     	; 0x27a0 <serial_set_baud_rate+0x26>
    27ac:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    27b0:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    27b4:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    27b8:	ff 90       	pop	r15
    27ba:	ef 90       	pop	r14
    27bc:	df 90       	pop	r13
    27be:	cf 90       	pop	r12
    27c0:	08 95       	ret

000027c2 <_ZN15OrangutanSerial4sendEPch>:
    27c2:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x7>
    27c6:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_ZN15OrangutanSerial5portsE+0x6>
    27ca:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    27ce:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    27d8:	08 95       	ret

000027da <serial_send>:
    27da:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <_ZN15OrangutanSerial4sendEPch>
    27de:	08 95       	ret

000027e0 <_ZN15OrangutanSerial11uart_tx_isrEh>:
    27e0:	9a e0       	ldi	r25, 0x0A	; 10
    27e2:	89 9f       	mul	r24, r25
    27e4:	f0 01       	movw	r30, r0
    27e6:	11 24       	eor	r1, r1
    27e8:	eb 55       	subi	r30, 0x5B	; 91
    27ea:	fe 4f       	sbci	r31, 0xFE	; 254
    27ec:	26 81       	ldd	r18, Z+6	; 0x06
    27ee:	37 81       	ldd	r19, Z+7	; 0x07
    27f0:	21 15       	cp	r18, r1
    27f2:	31 05       	cpc	r19, r1
    27f4:	41 f0       	breq	.+16     	; 0x2806 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    27f6:	41 81       	ldd	r20, Z+1	; 0x01
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	49 17       	cp	r20, r25
    27fc:	20 f4       	brcc	.+8      	; 0x2806 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>
    27fe:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    2802:	95 fd       	sbrc	r25, 5
    2804:	03 c0       	rjmp	.+6      	; 0x280c <_ZN15OrangutanSerial11uart_tx_isrEh+0x2c>
    2806:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    280a:	08 95       	ret
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	d9 01       	movw	r26, r18
    2810:	a9 0f       	add	r26, r25
    2812:	b1 1d       	adc	r27, r1
    2814:	9c 91       	ld	r25, X
    2816:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	9f 5f       	subi	r25, 0xFF	; 255
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	f2 cf       	rjmp	.-28     	; 0x2806 <_ZN15OrangutanSerial11uart_tx_isrEh+0x26>

00002822 <_ZN15OrangutanSerial5checkEv>:
    2822:	e1 ec       	ldi	r30, 0xC1	; 193
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8f 7d       	andi	r24, 0xDF	; 223
    282a:	80 83       	st	Z, r24
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	0e 94 12 13 	call	0x2624	; 0x2624 <_ZN15OrangutanSerial15serial_rx_checkEh>
    2838:	08 95       	ret

0000283a <_ZN15OrangutanSerial12sendBlockingEPch>:
    283a:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <_ZN15OrangutanSerial5portsE+0x7>
    283e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <_ZN15OrangutanSerial5portsE+0x6>
    2842:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    2846:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN15OrangutanSerial24uart_update_tx_interruptEh>
    2850:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <_ZN15OrangutanSerial5portsE+0x1>
    2854:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <_ZN15OrangutanSerial5portsE+0x3>
    2858:	98 17       	cp	r25, r24
    285a:	19 f0       	breq	.+6      	; 0x2862 <_ZN15OrangutanSerial12sendBlockingEPch+0x28>
    285c:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN15OrangutanSerial5checkEv>
    2860:	f7 cf       	rjmp	.-18     	; 0x2850 <_ZN15OrangutanSerial12sendBlockingEPch+0x16>
    2862:	08 95       	ret

00002864 <serial_send_blocking>:
    2864:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN15OrangutanSerial12sendBlockingEPch>
    2868:	08 95       	ret

0000286a <__vector_19>:
    286a:	1f 92       	push	r1
    286c:	0f 92       	push	r0
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	0f 92       	push	r0
    2872:	11 24       	eor	r1, r1
    2874:	2f 93       	push	r18
    2876:	3f 93       	push	r19
    2878:	4f 93       	push	r20
    287a:	5f 93       	push	r21
    287c:	6f 93       	push	r22
    287e:	7f 93       	push	r23
    2880:	8f 93       	push	r24
    2882:	9f 93       	push	r25
    2884:	af 93       	push	r26
    2886:	bf 93       	push	r27
    2888:	ef 93       	push	r30
    288a:	ff 93       	push	r31
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <_ZN15OrangutanSerial11uart_tx_isrEh>
    2892:	ff 91       	pop	r31
    2894:	ef 91       	pop	r30
    2896:	bf 91       	pop	r27
    2898:	af 91       	pop	r26
    289a:	9f 91       	pop	r25
    289c:	8f 91       	pop	r24
    289e:	7f 91       	pop	r23
    28a0:	6f 91       	pop	r22
    28a2:	5f 91       	pop	r21
    28a4:	4f 91       	pop	r20
    28a6:	3f 91       	pop	r19
    28a8:	2f 91       	pop	r18
    28aa:	0f 90       	pop	r0
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	0f 90       	pop	r0
    28b0:	1f 90       	pop	r1
    28b2:	18 95       	reti

000028b4 <__vector_9>:
    28b4:	2f 92       	push	r2
    28b6:	8f 93       	push	r24
    28b8:	9f 93       	push	r25
    28ba:	2f b6       	in	r2, 0x3f	; 63
    28bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <tickCount+0x1>
    28c0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <tickCount+0x2>
    28c4:	01 96       	adiw	r24, 0x01	; 1
    28c6:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <tickCount+0x1>
    28ca:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <tickCount+0x2>
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <tickCount+0x3>
    28d4:	89 1f       	adc	r24, r25
    28d6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <tickCount+0x3>
    28da:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <us_over_10+0x1>
    28de:	9c 5f       	subi	r25, 0xFC	; 252
    28e0:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <us_over_10+0x1>
    28e4:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <us_over_10>
    28e8:	80 51       	subi	r24, 0x10	; 16
    28ea:	97 42       	sbci	r25, 0x27	; 39
    28ec:	c0 f0       	brcs	.+48     	; 0x291e <end>
    28ee:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <us_over_10+0x1>
    28f2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <us_over_10>
    28f6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <msCounter>
    28fa:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <msCounter+0x1>
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <msCounter>
    2904:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <msCounter+0x1>
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <msCounter+0x2>
    290e:	89 1f       	adc	r24, r25
    2910:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <msCounter+0x2>
    2914:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <msCounter+0x3>
    2918:	89 1f       	adc	r24, r25
    291a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <msCounter+0x3>

0000291e <end>:
    291e:	2f be       	out	0x3f, r2	; 63
    2920:	9f 91       	pop	r25
    2922:	8f 91       	pop	r24
    2924:	2f 90       	pop	r2
    2926:	18 95       	reti

00002928 <_ZN13OrangutanTime17delayMillisecondsEj>:
    2928:	28 ee       	ldi	r18, 0xE8	; 232
    292a:	33 e0       	ldi	r19, 0x03	; 3
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	48 f0       	brcs	.+18     	; 0x2942 <_ZN13OrangutanTime17delayMillisecondsEj+0x1a>
    2930:	f9 01       	movw	r30, r18
    2932:	6f 93       	push	r22
    2934:	64 e0       	ldi	r22, 0x04	; 4
    2936:	6a 95       	dec	r22
    2938:	f1 f7       	brne	.-4      	; 0x2936 <_ZN13OrangutanTime17delayMillisecondsEj+0xe>
    293a:	6f 91       	pop	r22
    293c:	31 97       	sbiw	r30, 0x01	; 1
    293e:	c9 f7       	brne	.-14     	; 0x2932 <_ZN13OrangutanTime17delayMillisecondsEj+0xa>
    2940:	f5 cf       	rjmp	.-22     	; 0x292c <_ZN13OrangutanTime17delayMillisecondsEj+0x4>
    2942:	08 95       	ret

00002944 <delay_ms>:
    2944:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN13OrangutanTime17delayMillisecondsEj>
    2948:	08 95       	ret

0000294a <_ZN13OrangutanTime5init2Ev>:
    294a:	e0 e7       	ldi	r30, 0x70	; 112
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	8e 7f       	andi	r24, 0xFE	; 254
    2952:	80 83       	st	Z, r24
    2954:	a0 eb       	ldi	r26, 0xB0	; 176
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	8c 91       	ld	r24, X
    295a:	83 60       	ori	r24, 0x03	; 3
    295c:	8c 93       	st	X, r24
    295e:	a1 eb       	ldi	r26, 0xB1	; 177
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	8c 91       	ld	r24, X
    2964:	80 7f       	andi	r24, 0xF0	; 240
    2966:	8c 93       	st	X, r24
    2968:	8c 91       	ld	r24, X
    296a:	82 60       	ori	r24, 0x02	; 2
    296c:	8c 93       	st	X, r24
    296e:	b8 9a       	sbi	0x17, 0	; 23
    2970:	80 81       	ld	r24, Z
    2972:	81 60       	ori	r24, 0x01	; 1
    2974:	80 83       	st	Z, r24
    2976:	78 94       	sei
    2978:	08 95       	ret

0000297a <_ZN13OrangutanTime4initEv>:
    297a:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    297e:	81 11       	cpse	r24, r1
    2980:	05 c0       	rjmp	.+10     	; 0x298c <_ZN13OrangutanTime4initEv+0x12>
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_ZZN13OrangutanTime4initEvE11initialized>
    2988:	0e 94 a5 14 	call	0x294a	; 0x294a <_ZN13OrangutanTime5init2Ev>
    298c:	08 95       	ret

0000298e <_ZN13OrangutanTime5resetEv>:
    298e:	0e 94 bd 14 	call	0x297a	; 0x297a <_ZN13OrangutanTime4initEv>
    2992:	e0 e7       	ldi	r30, 0x70	; 112
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	8e 7f       	andi	r24, 0xFE	; 254
    299a:	80 83       	st	Z, r24
    299c:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <msCounter>
    29a0:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <msCounter+0x1>
    29a4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <msCounter+0x2>
    29a8:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <msCounter+0x3>
    29ac:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <us_over_10+0x1>
    29b0:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <us_over_10>
    29b4:	80 81       	ld	r24, Z
    29b6:	81 60       	ori	r24, 0x01	; 1
    29b8:	80 83       	st	Z, r24
    29ba:	08 95       	ret

000029bc <calibrate_line_sensors>:
    29bc:	68 2f       	mov	r22, r24
    29be:	89 eb       	ldi	r24, 0xB9	; 185
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	0e 94 cd 18 	call	0x319a	; 0x319a <_ZN16PololuQTRSensors9calibrateEh>
    29c6:	08 95       	ret

000029c8 <read_line_sensors_calibrated>:
    29c8:	46 2f       	mov	r20, r22
    29ca:	bc 01       	movw	r22, r24
    29cc:	89 eb       	ldi	r24, 0xB9	; 185
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    29d4:	08 95       	ret

000029d6 <read_line>:
    29d6:	46 2f       	mov	r20, r22
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	bc 01       	movw	r22, r24
    29dc:	89 eb       	ldi	r24, 0xB9	; 185
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN16PololuQTRSensors8readLineEPjhh>
    29e4:	08 95       	ret

000029e6 <_ZN9Pololu3pi4initEjh>:
    29e6:	0f 93       	push	r16
    29e8:	cf 93       	push	r28
    29ea:	df 93       	push	r29
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <_ZN9Pololu3pi4initEjh+0x8>
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <_ZN9Pololu3pi4initEjh+0xa>
    29f0:	1f 92       	push	r1
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	9c 01       	movw	r18, r24
    29f8:	85 e0       	ldi	r24, 0x05	; 5
    29fa:	e0 e5       	ldi	r30, 0x50	; 80
    29fc:	f1 e0       	ldi	r31, 0x01	; 1
    29fe:	de 01       	movw	r26, r28
    2a00:	11 96       	adiw	r26, 0x01	; 1
    2a02:	01 90       	ld	r0, Z+
    2a04:	0d 92       	st	X+, r0
    2a06:	8a 95       	dec	r24
    2a08:	e1 f7       	brne	.-8      	; 0x2a02 <_ZN9Pololu3pi4initEjh+0x1c>
    2a0a:	66 23       	and	r22, r22
    2a0c:	11 f0       	breq	.+4      	; 0x2a12 <_ZN9Pololu3pi4initEjh+0x2c>
    2a0e:	0f ef       	ldi	r16, 0xFF	; 255
    2a10:	01 c0       	rjmp	.+2      	; 0x2a14 <_ZN9Pololu3pi4initEjh+0x2e>
    2a12:	03 e1       	ldi	r16, 0x13	; 19
    2a14:	45 e0       	ldi	r20, 0x05	; 5
    2a16:	be 01       	movw	r22, r28
    2a18:	6f 5f       	subi	r22, 0xFF	; 255
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	89 eb       	ldi	r24, 0xB9	; 185
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <_ZN18PololuQTRSensorsRC4initEPhhjh>
    2a24:	89 eb       	ldi	r24, 0xB9	; 185
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZN16PololuQTRSensors11emittersOffEv>
    2a2c:	0e 94 c7 14 	call	0x298e	; 0x298e <_ZN13OrangutanTime5resetEv>
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	df 91       	pop	r29
    2a3c:	cf 91       	pop	r28
    2a3e:	0f 91       	pop	r16
    2a40:	08 95       	ret

00002a42 <pololu_3pi_init>:
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN9Pololu3pi4initEjh>
    2a48:	08 95       	ret

00002a4a <_GLOBAL__sub_D_pololu_3pi_init>:
    2a4a:	89 eb       	ldi	r24, 0xB9	; 185
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	0e 94 13 1a 	call	0x3426	; 0x3426 <_ZN16PololuQTRSensorsD1Ev>
    2a52:	08 95       	ret

00002a54 <delay_us>:
    2a54:	6f 93       	push	r22
    2a56:	64 e0       	ldi	r22, 0x04	; 4
    2a58:	6a 95       	dec	r22
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <delay_us+0x4>
    2a5c:	6f 91       	pop	r22
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	c9 f7       	brne	.-14     	; 0x2a54 <delay_us>
    2a62:	08 95       	ret

00002a64 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>:
    2a64:	fc 01       	movw	r30, r24
    2a66:	11 82       	std	Z+1, r1	; 0x01
    2a68:	10 82       	st	Z, r1
    2a6a:	13 82       	std	Z+3, r1	; 0x03
    2a6c:	12 82       	std	Z+2, r1	; 0x02
    2a6e:	15 82       	std	Z+5, r1	; 0x05
    2a70:	14 82       	std	Z+4, r1	; 0x04
    2a72:	16 82       	std	Z+6, r1	; 0x06
    2a74:	68 30       	cpi	r22, 0x08	; 8
    2a76:	68 f4       	brcc	.+26     	; 0x2a92 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x2e>
    2a78:	89 e2       	ldi	r24, 0x29	; 41
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
    2a80:	8b e2       	ldi	r24, 0x2B	; 43
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	93 83       	std	Z+3, r25	; 0x03
    2a86:	82 83       	std	Z+2, r24	; 0x02
    2a88:	8a e2       	ldi	r24, 0x2A	; 42
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	95 83       	std	Z+5, r25	; 0x05
    2a8e:	84 83       	std	Z+4, r24	; 0x04
    2a90:	1f c0       	rjmp	.+62     	; 0x2ad0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2a92:	6e 30       	cpi	r22, 0x0E	; 14
    2a94:	70 f4       	brcc	.+28     	; 0x2ab2 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x4e>
    2a96:	83 e2       	ldi	r24, 0x23	; 35
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
    2a9e:	85 e2       	ldi	r24, 0x25	; 37
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	93 83       	std	Z+3, r25	; 0x03
    2aa4:	82 83       	std	Z+2, r24	; 0x02
    2aa6:	84 e2       	ldi	r24, 0x24	; 36
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	95 83       	std	Z+5, r25	; 0x05
    2aac:	84 83       	std	Z+4, r24	; 0x04
    2aae:	68 50       	subi	r22, 0x08	; 8
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x6c>
    2ab2:	65 31       	cpi	r22, 0x15	; 21
    2ab4:	98 f4       	brcc	.+38     	; 0x2adc <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x78>
    2ab6:	86 e2       	ldi	r24, 0x26	; 38
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	91 83       	std	Z+1, r25	; 0x01
    2abc:	80 83       	st	Z, r24
    2abe:	88 e2       	ldi	r24, 0x28	; 40
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	93 83       	std	Z+3, r25	; 0x03
    2ac4:	82 83       	std	Z+2, r24	; 0x02
    2ac6:	87 e2       	ldi	r24, 0x27	; 39
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	95 83       	std	Z+5, r25	; 0x05
    2acc:	84 83       	std	Z+4, r24	; 0x04
    2ace:	6e 50       	subi	r22, 0x0E	; 14
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	01 c0       	rjmp	.+2      	; 0x2ad6 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x72>
    2ad4:	88 0f       	add	r24, r24
    2ad6:	6a 95       	dec	r22
    2ad8:	ea f7       	brpl	.-6      	; 0x2ad4 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh+0x70>
    2ada:	86 83       	std	Z+6, r24	; 0x06
    2adc:	08 95       	ret

00002ade <_ZN16PololuQTRSensors4initEhhh>:
    2ade:	a7 e0       	ldi	r26, 0x07	; 7
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e5 e7       	ldi	r30, 0x75	; 117
    2ae4:	f5 e1       	ldi	r31, 0x15	; 21
    2ae6:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__prologue_saves__+0x1c>
    2aea:	8c 01       	movw	r16, r24
    2aec:	fc 01       	movw	r30, r24
    2aee:	11 82       	std	Z+1, r1	; 0x01
    2af0:	10 82       	st	Z, r1
    2af2:	13 82       	std	Z+3, r1	; 0x03
    2af4:	12 82       	std	Z+2, r1	; 0x02
    2af6:	15 82       	std	Z+5, r1	; 0x05
    2af8:	14 82       	std	Z+4, r1	; 0x04
    2afa:	17 82       	std	Z+7, r1	; 0x07
    2afc:	16 82       	std	Z+6, r1	; 0x06
    2afe:	61 31       	cpi	r22, 0x11	; 17
    2b00:	18 f0       	brcs	.+6      	; 0x2b08 <_ZN16PololuQTRSensors4initEhhh+0x2a>
    2b02:	80 e1       	ldi	r24, 0x10	; 16
    2b04:	80 87       	std	Z+8, r24	; 0x08
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <_ZN16PololuQTRSensors4initEhhh+0x2e>
    2b08:	fc 01       	movw	r30, r24
    2b0a:	60 87       	std	Z+8, r22	; 0x08
    2b0c:	f8 01       	movw	r30, r16
    2b0e:	20 8b       	std	Z+16, r18	; 0x10
    2b10:	64 2f       	mov	r22, r20
    2b12:	ce 01       	movw	r24, r28
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2b1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	81 87       	std	Z+9, r24	; 0x09
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	9c 81       	ldd	r25, Y+4	; 0x04
    2b24:	93 87       	std	Z+11, r25	; 0x0b
    2b26:	82 87       	std	Z+10, r24	; 0x0a
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	95 87       	std	Z+13, r25	; 0x0d
    2b2e:	84 87       	std	Z+12, r24	; 0x0c
    2b30:	27 96       	adiw	r28, 0x07	; 7
    2b32:	e4 e0       	ldi	r30, 0x04	; 4
    2b34:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__epilogue_restores__+0x1c>

00002b38 <_ZN16PololuQTRSensors11emittersOffEv>:
    2b38:	fc 01       	movw	r30, r24
    2b3a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b3c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b3e:	10 97       	sbiw	r26, 0x00	; 0
    2b40:	79 f0       	breq	.+30     	; 0x2b60 <_ZN16PololuQTRSensors11emittersOffEv+0x28>
    2b42:	8c 91       	ld	r24, X
    2b44:	91 85       	ldd	r25, Z+9	; 0x09
    2b46:	89 2b       	or	r24, r25
    2b48:	8c 93       	st	X, r24
    2b4a:	a2 85       	ldd	r26, Z+10	; 0x0a
    2b4c:	b3 85       	ldd	r27, Z+11	; 0x0b
    2b4e:	9c 91       	ld	r25, X
    2b50:	81 85       	ldd	r24, Z+9	; 0x09
    2b52:	80 95       	com	r24
    2b54:	89 23       	and	r24, r25
    2b56:	8c 93       	st	X, r24
    2b58:	88 ec       	ldi	r24, 0xC8	; 200
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <delay_us>
    2b60:	08 95       	ret

00002b62 <_ZN16PololuQTRSensors10emittersOnEv>:
    2b62:	fc 01       	movw	r30, r24
    2b64:	a4 85       	ldd	r26, Z+12	; 0x0c
    2b66:	b5 85       	ldd	r27, Z+13	; 0x0d
    2b68:	10 97       	sbiw	r26, 0x00	; 0
    2b6a:	71 f0       	breq	.+28     	; 0x2b88 <_ZN16PololuQTRSensors10emittersOnEv+0x26>
    2b6c:	8c 91       	ld	r24, X
    2b6e:	91 85       	ldd	r25, Z+9	; 0x09
    2b70:	89 2b       	or	r24, r25
    2b72:	8c 93       	st	X, r24
    2b74:	a2 85       	ldd	r26, Z+10	; 0x0a
    2b76:	b3 85       	ldd	r27, Z+11	; 0x0b
    2b78:	8c 91       	ld	r24, X
    2b7a:	91 85       	ldd	r25, Z+9	; 0x09
    2b7c:	89 2b       	or	r24, r25
    2b7e:	8c 93       	st	X, r24
    2b80:	88 ec       	ldi	r24, 0xC8	; 200
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <delay_us>
    2b88:	08 95       	ret

00002b8a <_ZN18PololuQTRSensorsRC4initEPhhjh>:
    2b8a:	a7 e0       	ldi	r26, 0x07	; 7
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	eb ec       	ldi	r30, 0xCB	; 203
    2b90:	f5 e1       	ldi	r31, 0x15	; 21
    2b92:	0c 94 d1 1a 	jmp	0x35a2	; 0x35a2 <__prologue_saves__+0x6>
    2b96:	7c 01       	movw	r14, r24
    2b98:	4b 01       	movw	r8, r22
    2b9a:	64 2f       	mov	r22, r20
    2b9c:	39 01       	movw	r6, r18
    2b9e:	40 2f       	mov	r20, r16
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	0e 94 6f 15 	call	0x2ade	; 0x2ade <_ZN16PololuQTRSensors4initEhhh>
    2ba6:	87 01       	movw	r16, r14
    2ba8:	0f 5b       	subi	r16, 0xBF	; 191
    2baa:	1f 4f       	sbci	r17, 0xFF	; 255
    2bac:	f8 01       	movw	r30, r16
    2bae:	10 82       	st	Z, r1
    2bb0:	67 01       	movw	r12, r14
    2bb2:	f2 e4       	ldi	r31, 0x42	; 66
    2bb4:	cf 0e       	add	r12, r31
    2bb6:	d1 1c       	adc	r13, r1
    2bb8:	f6 01       	movw	r30, r12
    2bba:	10 82       	st	Z, r1
    2bbc:	57 01       	movw	r10, r14
    2bbe:	f3 e4       	ldi	r31, 0x43	; 67
    2bc0:	af 0e       	add	r10, r31
    2bc2:	b1 1c       	adc	r11, r1
    2bc4:	f5 01       	movw	r30, r10
    2bc6:	10 82       	st	Z, r1
    2bc8:	f7 01       	movw	r30, r14
    2bca:	77 86       	std	Z+15, r7	; 0x0f
    2bcc:	66 86       	std	Z+14, r6	; 0x0e
    2bce:	51 2c       	mov	r5, r1
    2bd0:	f7 01       	movw	r30, r14
    2bd2:	80 85       	ldd	r24, Z+8	; 0x08
    2bd4:	58 16       	cp	r5, r24
    2bd6:	50 f5       	brcc	.+84     	; 0x2c2c <_ZN18PololuQTRSensorsRC4initEPhhjh+0xa2>
    2bd8:	65 2c       	mov	r6, r5
    2bda:	71 2c       	mov	r7, r1
    2bdc:	f4 01       	movw	r30, r8
    2bde:	e6 0d       	add	r30, r6
    2be0:	f7 1d       	adc	r31, r7
    2be2:	60 81       	ld	r22, Z
    2be4:	ce 01       	movw	r24, r28
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	0e 94 32 15 	call	0x2a64	; 0x2a64 <_ZN16OrangutanDigital14getIORegistersEP8IOStructh>
    2bec:	2f 81       	ldd	r18, Y+7	; 0x07
    2bee:	f7 01       	movw	r30, r14
    2bf0:	e6 0d       	add	r30, r6
    2bf2:	f7 1d       	adc	r31, r7
    2bf4:	21 8b       	std	Z+17, r18	; 0x11
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfa:	f3 01       	movw	r30, r6
    2bfc:	ee 0f       	add	r30, r30
    2bfe:	ff 1f       	adc	r31, r31
    2c00:	ee 0d       	add	r30, r14
    2c02:	ff 1d       	adc	r31, r15
    2c04:	92 a3       	std	Z+34, r25	; 0x22
    2c06:	81 a3       	std	Z+33, r24	; 0x21
    2c08:	83 32       	cpi	r24, 0x23	; 35
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	11 f4       	brne	.+4      	; 0x2c12 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x88>
    2c0e:	f8 01       	movw	r30, r16
    2c10:	08 c0       	rjmp	.+16     	; 0x2c22 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2c12:	86 32       	cpi	r24, 0x26	; 38
    2c14:	91 05       	cpc	r25, r1
    2c16:	11 f4       	brne	.+4      	; 0x2c1c <_ZN18PololuQTRSensorsRC4initEPhhjh+0x92>
    2c18:	f6 01       	movw	r30, r12
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x98>
    2c1c:	89 97       	sbiw	r24, 0x29	; 41
    2c1e:	21 f4       	brne	.+8      	; 0x2c28 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x9e>
    2c20:	f5 01       	movw	r30, r10
    2c22:	80 81       	ld	r24, Z
    2c24:	82 2b       	or	r24, r18
    2c26:	80 83       	st	Z, r24
    2c28:	53 94       	inc	r5
    2c2a:	d2 cf       	rjmp	.-92     	; 0x2bd0 <_ZN18PololuQTRSensorsRC4initEPhhjh+0x46>
    2c2c:	27 96       	adiw	r28, 0x07	; 7
    2c2e:	ef e0       	ldi	r30, 0x0F	; 15
    2c30:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__epilogue_restores__+0x6>

00002c34 <_ZN18PololuQTRSensorsRC11readPrivateEPj>:
    2c34:	a0 e0       	ldi	r26, 0x00	; 0
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e0 e2       	ldi	r30, 0x20	; 32
    2c3a:	f6 e1       	ldi	r31, 0x16	; 22
    2c3c:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__prologue_saves__+0xa>
    2c40:	ec 01       	movw	r28, r24
    2c42:	5b 01       	movw	r10, r22
    2c44:	6c 01       	movw	r12, r24
    2c46:	81 e4       	ldi	r24, 0x41	; 65
    2c48:	c8 0e       	add	r12, r24
    2c4a:	d1 1c       	adc	r13, r1
    2c4c:	f6 01       	movw	r30, r12
    2c4e:	80 80       	ld	r8, Z
    2c50:	7e 01       	movw	r14, r28
    2c52:	f2 e4       	ldi	r31, 0x42	; 66
    2c54:	ef 0e       	add	r14, r31
    2c56:	f1 1c       	adc	r15, r1
    2c58:	f7 01       	movw	r30, r14
    2c5a:	70 80       	ld	r7, Z
    2c5c:	8e 01       	movw	r16, r28
    2c5e:	0d 5b       	subi	r16, 0xBD	; 189
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	f8 01       	movw	r30, r16
    2c64:	90 80       	ld	r9, Z
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	98 85       	ldd	r25, Y+8	; 0x08
    2c6a:	89 17       	cp	r24, r25
    2c6c:	48 f4       	brcc	.+18     	; 0x2c80 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x4c>
    2c6e:	f5 01       	movw	r30, r10
    2c70:	e8 0f       	add	r30, r24
    2c72:	f1 1d       	adc	r31, r1
    2c74:	e8 0f       	add	r30, r24
    2c76:	f1 1d       	adc	r31, r1
    2c78:	11 82       	std	Z+1, r1	; 0x01
    2c7a:	10 82       	st	Z, r1
    2c7c:	8f 5f       	subi	r24, 0xFF	; 255
    2c7e:	f4 cf       	rjmp	.-24     	; 0x2c68 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x34>
    2c80:	84 b1       	in	r24, 0x04	; 4
    2c82:	f6 01       	movw	r30, r12
    2c84:	90 81       	ld	r25, Z
    2c86:	89 2b       	or	r24, r25
    2c88:	84 b9       	out	0x04, r24	; 4
    2c8a:	87 b1       	in	r24, 0x07	; 7
    2c8c:	f7 01       	movw	r30, r14
    2c8e:	90 81       	ld	r25, Z
    2c90:	89 2b       	or	r24, r25
    2c92:	87 b9       	out	0x07, r24	; 7
    2c94:	8a b1       	in	r24, 0x0a	; 10
    2c96:	f8 01       	movw	r30, r16
    2c98:	90 81       	ld	r25, Z
    2c9a:	89 2b       	or	r24, r25
    2c9c:	8a b9       	out	0x0a, r24	; 10
    2c9e:	85 b1       	in	r24, 0x05	; 5
    2ca0:	f6 01       	movw	r30, r12
    2ca2:	90 81       	ld	r25, Z
    2ca4:	89 2b       	or	r24, r25
    2ca6:	85 b9       	out	0x05, r24	; 5
    2ca8:	88 b1       	in	r24, 0x08	; 8
    2caa:	f7 01       	movw	r30, r14
    2cac:	90 81       	ld	r25, Z
    2cae:	89 2b       	or	r24, r25
    2cb0:	88 b9       	out	0x08, r24	; 8
    2cb2:	8b b1       	in	r24, 0x0b	; 11
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	90 81       	ld	r25, Z
    2cb8:	89 2b       	or	r24, r25
    2cba:	8b b9       	out	0x0b, r24	; 11
    2cbc:	8a e0       	ldi	r24, 0x0A	; 10
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <delay_us>
    2cc4:	94 b1       	in	r25, 0x04	; 4
    2cc6:	f6 01       	movw	r30, r12
    2cc8:	80 81       	ld	r24, Z
    2cca:	80 95       	com	r24
    2ccc:	89 23       	and	r24, r25
    2cce:	84 b9       	out	0x04, r24	; 4
    2cd0:	97 b1       	in	r25, 0x07	; 7
    2cd2:	f7 01       	movw	r30, r14
    2cd4:	80 81       	ld	r24, Z
    2cd6:	80 95       	com	r24
    2cd8:	89 23       	and	r24, r25
    2cda:	87 b9       	out	0x07, r24	; 7
    2cdc:	9a b1       	in	r25, 0x0a	; 10
    2cde:	f8 01       	movw	r30, r16
    2ce0:	80 81       	ld	r24, Z
    2ce2:	80 95       	com	r24
    2ce4:	89 23       	and	r24, r25
    2ce6:	8a b9       	out	0x0a, r24	; 10
    2ce8:	95 b1       	in	r25, 0x05	; 5
    2cea:	f6 01       	movw	r30, r12
    2cec:	80 81       	ld	r24, Z
    2cee:	80 95       	com	r24
    2cf0:	89 23       	and	r24, r25
    2cf2:	85 b9       	out	0x05, r24	; 5
    2cf4:	98 b1       	in	r25, 0x08	; 8
    2cf6:	f7 01       	movw	r30, r14
    2cf8:	80 81       	ld	r24, Z
    2cfa:	80 95       	com	r24
    2cfc:	89 23       	and	r24, r25
    2cfe:	88 b9       	out	0x08, r24	; 8
    2d00:	9b b1       	in	r25, 0x0b	; 11
    2d02:	f8 01       	movw	r30, r16
    2d04:	80 81       	ld	r24, Z
    2d06:	80 95       	com	r24
    2d08:	89 23       	and	r24, r25
    2d0a:	8b b9       	out	0x0b, r24	; 11
    2d0c:	e0 90 b0 00 	lds	r14, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2d10:	d0 90 b1 00 	lds	r13, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2d14:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2d18:	83 60       	ori	r24, 0x03	; 3
    2d1a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2d24:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d2e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2d30:	82 17       	cp	r24, r18
    2d32:	93 07       	cpc	r25, r19
    2d34:	20 f5       	brcc	.+72     	; 0x2d7e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x14a>
    2d36:	c0 90 b2 00 	lds	r12, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    2d3a:	2c 2d       	mov	r18, r12
    2d3c:	24 1b       	sub	r18, r20
    2d3e:	82 0f       	add	r24, r18
    2d40:	91 1d       	adc	r25, r1
    2d42:	03 b1       	in	r16, 0x03	; 3
    2d44:	08 11       	cpse	r16, r8
    2d46:	32 c0       	rjmp	.+100    	; 0x2dac <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2d48:	f6 b0       	in	r15, 0x06	; 6
    2d4a:	f7 10       	cpse	r15, r7
    2d4c:	2f c0       	rjmp	.+94     	; 0x2dac <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2d4e:	29 b1       	in	r18, 0x09	; 9
    2d50:	29 11       	cpse	r18, r9
    2d52:	2c c0       	rjmp	.+88     	; 0x2dac <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x178>
    2d54:	10 c0       	rjmp	.+32     	; 0x2d76 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x142>
    2d56:	21 2f       	mov	r18, r17
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	a9 01       	movw	r20, r18
    2d5c:	44 0f       	add	r20, r20
    2d5e:	55 1f       	adc	r21, r21
    2d60:	f5 01       	movw	r30, r10
    2d62:	e4 0f       	add	r30, r20
    2d64:	f5 1f       	adc	r31, r21
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	67 2b       	or	r22, r23
    2d6c:	21 f1       	breq	.+72     	; 0x2db6 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x182>
    2d6e:	1f 5f       	subi	r17, 0xFF	; 255
    2d70:	28 85       	ldd	r18, Y+8	; 0x08
    2d72:	12 17       	cp	r17, r18
    2d74:	80 f3       	brcs	.-32     	; 0x2d56 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x122>
    2d76:	7f 2c       	mov	r7, r15
    2d78:	80 2e       	mov	r8, r16
    2d7a:	4c 2d       	mov	r20, r12
    2d7c:	d7 cf       	rjmp	.-82     	; 0x2d2c <_ZN18PololuQTRSensorsRC11readPrivateEPj+0xf8>
    2d7e:	e0 92 b0 00 	sts	0x00B0, r14	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    2d82:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	88 85       	ldd	r24, Y+8	; 0x08
    2d8a:	28 17       	cp	r18, r24
    2d8c:	30 f5       	brcc	.+76     	; 0x2dda <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x1a6>
    2d8e:	f5 01       	movw	r30, r10
    2d90:	e2 0f       	add	r30, r18
    2d92:	f1 1d       	adc	r31, r1
    2d94:	e2 0f       	add	r30, r18
    2d96:	f1 1d       	adc	r31, r1
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	89 2b       	or	r24, r25
    2d9e:	21 f4       	brne	.+8      	; 0x2da8 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x174>
    2da0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2da2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	80 83       	st	Z, r24
    2da8:	2f 5f       	subi	r18, 0xFF	; 255
    2daa:	ee cf       	rjmp	.-36     	; 0x2d88 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x154>
    2dac:	03 b1       	in	r16, 0x03	; 3
    2dae:	f6 b0       	in	r15, 0x06	; 6
    2db0:	99 b0       	in	r9, 0x09	; 9
    2db2:	10 e0       	ldi	r17, 0x00	; 0
    2db4:	dd cf       	rjmp	.-70     	; 0x2d70 <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13c>
    2db6:	de 01       	movw	r26, r28
    2db8:	a4 0f       	add	r26, r20
    2dba:	b5 1f       	adc	r27, r21
    2dbc:	91 96       	adiw	r26, 0x21	; 33
    2dbe:	0d 90       	ld	r0, X+
    2dc0:	bc 91       	ld	r27, X
    2dc2:	a0 2d       	mov	r26, r0
    2dc4:	4c 91       	ld	r20, X
    2dc6:	de 01       	movw	r26, r28
    2dc8:	a2 0f       	add	r26, r18
    2dca:	b3 1f       	adc	r27, r19
    2dcc:	51 96       	adiw	r26, 0x11	; 17
    2dce:	2c 91       	ld	r18, X
    2dd0:	42 23       	and	r20, r18
    2dd2:	69 f6       	brne	.-102    	; 0x2d6e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2dd4:	91 83       	std	Z+1, r25	; 0x01
    2dd6:	80 83       	st	Z, r24
    2dd8:	ca cf       	rjmp	.-108    	; 0x2d6e <_ZN18PololuQTRSensorsRC11readPrivateEPj+0x13a>
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	ed e0       	ldi	r30, 0x0D	; 13
    2de0:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__epilogue_restores__+0xa>

00002de4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>:
    2de4:	ef 92       	push	r14
    2de6:	ff 92       	push	r15
    2de8:	0f 93       	push	r16
    2dea:	1f 93       	push	r17
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	fc 01       	movw	r30, r24
    2df2:	9b 01       	movw	r18, r22
    2df4:	f0 90 7c 00 	lds	r15, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    2df8:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2dfc:	47 b1       	in	r20, 0x07	; 7
    2dfe:	18 b1       	in	r17, 0x08	; 8
    2e00:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2e04:	86 fd       	sbrc	r24, 6
    2e06:	fc cf       	rjmp	.-8      	; 0x2e00 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x1c>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 85       	ldd	r25, Z+8	; 0x08
    2e0c:	89 17       	cp	r24, r25
    2e0e:	48 f4       	brcc	.+18     	; 0x2e22 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x3e>
    2e10:	d9 01       	movw	r26, r18
    2e12:	a8 0f       	add	r26, r24
    2e14:	b1 1d       	adc	r27, r1
    2e16:	a8 0f       	add	r26, r24
    2e18:	b1 1d       	adc	r27, r1
    2e1a:	1d 92       	st	X+, r1
    2e1c:	1c 92       	st	X, r1
    2e1e:	8f 5f       	subi	r24, 0xFF	; 255
    2e20:	f4 cf       	rjmp	.-24     	; 0x2e0a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x26>
    2e22:	97 b1       	in	r25, 0x07	; 7
    2e24:	82 a1       	ldd	r24, Z+34	; 0x22
    2e26:	80 95       	com	r24
    2e28:	89 23       	and	r24, r25
    2e2a:	87 b9       	out	0x07, r24	; 7
    2e2c:	98 b1       	in	r25, 0x08	; 8
    2e2e:	82 a1       	ldd	r24, Z+34	; 0x22
    2e30:	80 95       	com	r24
    2e32:	89 23       	and	r24, r25
    2e34:	88 b9       	out	0x08, r24	; 8
    2e36:	87 e8       	ldi	r24, 0x87	; 135
    2e38:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2e3c:	e1 2c       	mov	r14, r1
    2e3e:	81 a1       	ldd	r24, Z+33	; 0x21
    2e40:	e8 16       	cp	r14, r24
    2e42:	10 f0       	brcs	.+4      	; 0x2e48 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x64>
    2e44:	e1 2c       	mov	r14, r1
    2e46:	29 c0       	rjmp	.+82     	; 0x2e9a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2e48:	50 e0       	ldi	r21, 0x00	; 0
    2e4a:	80 85       	ldd	r24, Z+8	; 0x08
    2e4c:	58 17       	cp	r21, r24
    2e4e:	18 f5       	brcc	.+70     	; 0x2e96 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb2>
    2e50:	a5 2f       	mov	r26, r21
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	ef 01       	movw	r28, r30
    2e56:	ca 0f       	add	r28, r26
    2e58:	db 1f       	adc	r29, r27
    2e5a:	89 89       	ldd	r24, Y+17	; 0x11
    2e5c:	80 64       	ori	r24, 0x40	; 64
    2e5e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    2e62:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2e66:	80 64       	ori	r24, 0x40	; 64
    2e68:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2e6c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2e70:	86 fd       	sbrc	r24, 6
    2e72:	fc cf       	rjmp	.-8      	; 0x2e6c <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x88>
    2e74:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    2e78:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    2e7c:	aa 0f       	add	r26, r26
    2e7e:	bb 1f       	adc	r27, r27
    2e80:	a2 0f       	add	r26, r18
    2e82:	b3 1f       	adc	r27, r19
    2e84:	8d 91       	ld	r24, X+
    2e86:	9c 91       	ld	r25, X
    2e88:	11 97       	sbiw	r26, 0x01	; 1
    2e8a:	86 0f       	add	r24, r22
    2e8c:	97 1f       	adc	r25, r23
    2e8e:	8d 93       	st	X+, r24
    2e90:	9c 93       	st	X, r25
    2e92:	5f 5f       	subi	r21, 0xFF	; 255
    2e94:	da cf       	rjmp	.-76     	; 0x2e4a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x66>
    2e96:	e3 94       	inc	r14
    2e98:	d2 cf       	rjmp	.-92     	; 0x2e3e <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0x5a>
    2e9a:	80 85       	ldd	r24, Z+8	; 0x08
    2e9c:	e8 16       	cp	r14, r24
    2e9e:	a0 f4       	brcc	.+40     	; 0x2ec8 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xe4>
    2ea0:	e9 01       	movw	r28, r18
    2ea2:	ce 0d       	add	r28, r14
    2ea4:	d1 1d       	adc	r29, r1
    2ea6:	ce 0d       	add	r28, r14
    2ea8:	d1 1d       	adc	r29, r1
    2eaa:	61 a1       	ldd	r22, Z+33	; 0x21
    2eac:	70 e0       	ldi	r23, 0x00	; 0
    2eae:	cb 01       	movw	r24, r22
    2eb0:	95 95       	asr	r25
    2eb2:	87 95       	ror	r24
    2eb4:	a8 81       	ld	r26, Y
    2eb6:	b9 81       	ldd	r27, Y+1	; 0x01
    2eb8:	8a 0f       	add	r24, r26
    2eba:	9b 1f       	adc	r25, r27
    2ebc:	0e 94 3d 1a 	call	0x347a	; 0x347a <__udivmodhi4>
    2ec0:	79 83       	std	Y+1, r23	; 0x01
    2ec2:	68 83       	st	Y, r22
    2ec4:	e3 94       	inc	r14
    2ec6:	e9 cf       	rjmp	.-46     	; 0x2e9a <_ZN22PololuQTRSensorsAnalog11readPrivateEPj+0xb6>
    2ec8:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    2ecc:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    2ed0:	18 b9       	out	0x08, r17	; 8
    2ed2:	47 b9       	out	0x07, r20	; 7
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	e6 e0       	ldi	r30, 0x06	; 6
    2eda:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__epilogue_restores__+0x18>

00002ede <_ZN16PololuQTRSensors4readEPjh>:
    2ede:	a0 e2       	ldi	r26, 0x20	; 32
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	e5 e7       	ldi	r30, 0x75	; 117
    2ee4:	f7 e1       	ldi	r31, 0x17	; 23
    2ee6:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <__prologue_saves__+0x16>
    2eea:	8c 01       	movw	r16, r24
    2eec:	7b 01       	movw	r14, r22
    2eee:	d4 2e       	mov	r13, r20
    2ef0:	8f ef       	ldi	r24, 0xFF	; 255
    2ef2:	84 0f       	add	r24, r20
    2ef4:	82 30       	cpi	r24, 0x02	; 2
    2ef6:	18 f4       	brcc	.+6      	; 0x2efe <_ZN16PololuQTRSensors4readEPjh+0x20>
    2ef8:	c8 01       	movw	r24, r16
    2efa:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_ZN16PololuQTRSensors10emittersOnEv>
    2efe:	d8 01       	movw	r26, r16
    2f00:	50 96       	adiw	r26, 0x10	; 16
    2f02:	8c 91       	ld	r24, X
    2f04:	b7 01       	movw	r22, r14
    2f06:	81 11       	cpse	r24, r1
    2f08:	10 c0       	rjmp	.+32     	; 0x2f2a <_ZN16PololuQTRSensors4readEPjh+0x4c>
    2f0a:	c8 01       	movw	r24, r16
    2f0c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2f10:	c8 01       	movw	r24, r16
    2f12:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZN16PololuQTRSensors11emittersOffEv>
    2f16:	b2 e0       	ldi	r27, 0x02	; 2
    2f18:	db 12       	cpse	r13, r27
    2f1a:	3a c0       	rjmp	.+116    	; 0x2f90 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2f1c:	be 01       	movw	r22, r28
    2f1e:	6f 5f       	subi	r22, 0xFF	; 255
    2f20:	7f 4f       	sbci	r23, 0xFF	; 255
    2f22:	c8 01       	movw	r24, r16
    2f24:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN18PololuQTRSensorsRC11readPrivateEPj>
    2f28:	0f c0       	rjmp	.+30     	; 0x2f48 <_ZN16PololuQTRSensors4readEPjh+0x6a>
    2f2a:	c8 01       	movw	r24, r16
    2f2c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2f30:	c8 01       	movw	r24, r16
    2f32:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZN16PololuQTRSensors11emittersOffEv>
    2f36:	e2 e0       	ldi	r30, 0x02	; 2
    2f38:	de 12       	cpse	r13, r30
    2f3a:	2a c0       	rjmp	.+84     	; 0x2f90 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2f3c:	be 01       	movw	r22, r28
    2f3e:	6f 5f       	subi	r22, 0xFF	; 255
    2f40:	7f 4f       	sbci	r23, 0xFF	; 255
    2f42:	c8 01       	movw	r24, r16
    2f44:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <_ZN22PololuQTRSensorsAnalog11readPrivateEPj>
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	80 85       	ldd	r24, Z+8	; 0x08
    2f4e:	48 17       	cp	r20, r24
    2f50:	f8 f4       	brcc	.+62     	; 0x2f90 <_ZN16PololuQTRSensors4readEPjh+0xb2>
    2f52:	84 2f       	mov	r24, r20
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	f7 01       	movw	r30, r14
    2f5c:	e8 0f       	add	r30, r24
    2f5e:	f9 1f       	adc	r31, r25
    2f60:	21 e0       	ldi	r18, 0x01	; 1
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	2c 0f       	add	r18, r28
    2f66:	3d 1f       	adc	r19, r29
    2f68:	82 0f       	add	r24, r18
    2f6a:	93 1f       	adc	r25, r19
    2f6c:	d8 01       	movw	r26, r16
    2f6e:	1e 96       	adiw	r26, 0x0e	; 14
    2f70:	2d 91       	ld	r18, X+
    2f72:	3c 91       	ld	r19, X
    2f74:	1f 97       	sbiw	r26, 0x0f	; 15
    2f76:	dc 01       	movw	r26, r24
    2f78:	8d 91       	ld	r24, X+
    2f7a:	9c 91       	ld	r25, X
    2f7c:	28 1b       	sub	r18, r24
    2f7e:	39 0b       	sbc	r19, r25
    2f80:	80 81       	ld	r24, Z
    2f82:	91 81       	ldd	r25, Z+1	; 0x01
    2f84:	82 0f       	add	r24, r18
    2f86:	93 1f       	adc	r25, r19
    2f88:	91 83       	std	Z+1, r25	; 0x01
    2f8a:	80 83       	st	Z, r24
    2f8c:	4f 5f       	subi	r20, 0xFF	; 255
    2f8e:	dd cf       	rjmp	.-70     	; 0x2f4a <_ZN16PololuQTRSensors4readEPjh+0x6c>
    2f90:	a0 96       	adiw	r28, 0x20	; 32
    2f92:	e7 e0       	ldi	r30, 0x07	; 7
    2f94:	0c 94 f5 1a 	jmp	0x35ea	; 0x35ea <__epilogue_restores__+0x16>

00002f98 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>:
    2f98:	2f 92       	push	r2
    2f9a:	3f 92       	push	r3
    2f9c:	5f 92       	push	r5
    2f9e:	6f 92       	push	r6
    2fa0:	7f 92       	push	r7
    2fa2:	8f 92       	push	r8
    2fa4:	9f 92       	push	r9
    2fa6:	af 92       	push	r10
    2fa8:	bf 92       	push	r11
    2faa:	cf 92       	push	r12
    2fac:	df 92       	push	r13
    2fae:	ef 92       	push	r14
    2fb0:	ff 92       	push	r15
    2fb2:	0f 93       	push	r16
    2fb4:	1f 93       	push	r17
    2fb6:	cf 93       	push	r28
    2fb8:	df 93       	push	r29
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	c0 56       	subi	r28, 0x60	; 96
    2fc0:	d1 09       	sbc	r29, r1
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	8c 01       	movw	r16, r24
    2fce:	4b 01       	movw	r8, r22
    2fd0:	5a 01       	movw	r10, r20
    2fd2:	52 2e       	mov	r5, r18
    2fd4:	da 01       	movw	r26, r20
    2fd6:	8d 91       	ld	r24, X+
    2fd8:	9c 91       	ld	r25, X
    2fda:	89 2b       	or	r24, r25
    2fdc:	31 f0       	breq	.+12     	; 0x2fea <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x52>
    2fde:	f4 01       	movw	r30, r8
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	89 2b       	or	r24, r25
    2fe6:	f1 f4       	brne	.+60     	; 0x3024 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    2fe8:	24 c0       	rjmp	.+72     	; 0x3032 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x9a>
    2fea:	d8 01       	movw	r26, r16
    2fec:	18 96       	adiw	r26, 0x08	; 8
    2fee:	8c 91       	ld	r24, X
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	0e 94 05 1b 	call	0x360a	; 0x360a <malloc>
    2ffa:	f5 01       	movw	r30, r10
    2ffc:	91 83       	std	Z+1, r25	; 0x01
    2ffe:	80 83       	st	Z, r24
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	09 f4       	brne	.+2      	; 0x3006 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x6e>
    3004:	b1 c0       	rjmp	.+354    	; 0x3168 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    3006:	fc 01       	movw	r30, r24
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	d8 01       	movw	r26, r16
    300e:	18 96       	adiw	r26, 0x08	; 8
    3010:	8c 91       	ld	r24, X
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	28 17       	cp	r18, r24
    3016:	39 07       	cpc	r19, r25
    3018:	14 f7       	brge	.-60     	; 0x2fde <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x46>
    301a:	11 92       	st	Z+, r1
    301c:	11 92       	st	Z+, r1
    301e:	2f 5f       	subi	r18, 0xFF	; 255
    3020:	3f 4f       	sbci	r19, 0xFF	; 255
    3022:	f4 cf       	rjmp	.-24     	; 0x300c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x74>
    3024:	e1 2c       	mov	r14, r1
    3026:	f1 2c       	mov	r15, r1
    3028:	6e 01       	movw	r12, r28
    302a:	b1 e2       	ldi	r27, 0x21	; 33
    302c:	cb 0e       	add	r12, r27
    302e:	d1 1c       	adc	r13, r1
    3030:	21 c0       	rjmp	.+66     	; 0x3074 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3032:	f8 01       	movw	r30, r16
    3034:	80 85       	ldd	r24, Z+8	; 0x08
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	0e 94 05 1b 	call	0x360a	; 0x360a <malloc>
    3040:	d4 01       	movw	r26, r8
    3042:	8d 93       	st	X+, r24
    3044:	9c 93       	st	X, r25
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	09 f4       	brne	.+2      	; 0x304c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xb4>
    304a:	8e c0       	rjmp	.+284    	; 0x3168 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    304c:	fc 01       	movw	r30, r24
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	d8 01       	movw	r26, r16
    3054:	18 96       	adiw	r26, 0x08	; 8
    3056:	8c 91       	ld	r24, X
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	28 17       	cp	r18, r24
    305c:	39 07       	cpc	r19, r25
    305e:	14 f7       	brge	.-60     	; 0x3024 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x8c>
    3060:	d8 01       	movw	r26, r16
    3062:	1e 96       	adiw	r26, 0x0e	; 14
    3064:	8d 91       	ld	r24, X+
    3066:	9c 91       	ld	r25, X
    3068:	1f 97       	sbiw	r26, 0x0f	; 15
    306a:	81 93       	st	Z+, r24
    306c:	91 93       	st	Z+, r25
    306e:	2f 5f       	subi	r18, 0xFF	; 255
    3070:	3f 4f       	sbci	r19, 0xFF	; 255
    3072:	ef cf       	rjmp	.-34     	; 0x3052 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xba>
    3074:	45 2d       	mov	r20, r5
    3076:	be 01       	movw	r22, r28
    3078:	6f 5b       	subi	r22, 0xBF	; 191
    307a:	7f 4f       	sbci	r23, 0xFF	; 255
    307c:	c8 01       	movw	r24, r16
    307e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <_ZN16PololuQTRSensors4readEPjh>
    3082:	f8 01       	movw	r30, r16
    3084:	60 84       	ldd	r6, Z+8	; 0x08
    3086:	71 2c       	mov	r7, r1
    3088:	fe 01       	movw	r30, r28
    308a:	ef 5b       	subi	r30, 0xBF	; 191
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	c6 01       	movw	r24, r12
    3090:	9e 01       	movw	r18, r28
    3092:	2f 5f       	subi	r18, 0xFF	; 255
    3094:	3f 4f       	sbci	r19, 0xFF	; 255
    3096:	19 01       	movw	r2, r18
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	26 15       	cp	r18, r6
    309e:	37 05       	cpc	r19, r7
    30a0:	4c f5       	brge	.+82     	; 0x30f4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x15c>
    30a2:	e1 14       	cp	r14, r1
    30a4:	f1 04       	cpc	r15, r1
    30a6:	89 f0       	breq	.+34     	; 0x30ca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    30a8:	dc 01       	movw	r26, r24
    30aa:	6d 91       	ld	r22, X+
    30ac:	7c 91       	ld	r23, X
    30ae:	40 81       	ld	r20, Z
    30b0:	51 81       	ldd	r21, Z+1	; 0x01
    30b2:	64 17       	cp	r22, r20
    30b4:	75 07       	cpc	r23, r21
    30b6:	48 f0       	brcs	.+18     	; 0x30ca <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x132>
    30b8:	d1 01       	movw	r26, r2
    30ba:	6d 91       	ld	r22, X+
    30bc:	7c 91       	ld	r23, X
    30be:	40 81       	ld	r20, Z
    30c0:	51 81       	ldd	r21, Z+1	; 0x01
    30c2:	46 17       	cp	r20, r22
    30c4:	57 07       	cpc	r21, r23
    30c6:	48 f0       	brcs	.+18     	; 0x30da <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x142>
    30c8:	0d c0       	rjmp	.+26     	; 0x30e4 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x14c>
    30ca:	40 81       	ld	r20, Z
    30cc:	51 81       	ldd	r21, Z+1	; 0x01
    30ce:	dc 01       	movw	r26, r24
    30d0:	4d 93       	st	X+, r20
    30d2:	5c 93       	st	X, r21
    30d4:	e1 14       	cp	r14, r1
    30d6:	f1 04       	cpc	r15, r1
    30d8:	79 f7       	brne	.-34     	; 0x30b8 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x120>
    30da:	40 81       	ld	r20, Z
    30dc:	51 81       	ldd	r21, Z+1	; 0x01
    30de:	d1 01       	movw	r26, r2
    30e0:	4d 93       	st	X+, r20
    30e2:	5c 93       	st	X, r21
    30e4:	2f 5f       	subi	r18, 0xFF	; 255
    30e6:	3f 4f       	sbci	r19, 0xFF	; 255
    30e8:	b2 e0       	ldi	r27, 0x02	; 2
    30ea:	2b 0e       	add	r2, r27
    30ec:	31 1c       	adc	r3, r1
    30ee:	32 96       	adiw	r30, 0x02	; 2
    30f0:	02 96       	adiw	r24, 0x02	; 2
    30f2:	d4 cf       	rjmp	.-88     	; 0x309c <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x104>
    30f4:	ef ef       	ldi	r30, 0xFF	; 255
    30f6:	ee 1a       	sub	r14, r30
    30f8:	fe 0a       	sbc	r15, r30
    30fa:	fa e0       	ldi	r31, 0x0A	; 10
    30fc:	ef 16       	cp	r14, r31
    30fe:	f1 04       	cpc	r15, r1
    3100:	09 f0       	breq	.+2      	; 0x3104 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x16c>
    3102:	b8 cf       	rjmp	.-144    	; 0x3074 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0xdc>
    3104:	9e 01       	movw	r18, r28
    3106:	2f 5f       	subi	r18, 0xFF	; 255
    3108:	3f 4f       	sbci	r19, 0xFF	; 255
    310a:	79 01       	movw	r14, r18
    310c:	36 01       	movw	r6, r12
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	f8 01       	movw	r30, r16
    3114:	20 85       	ldd	r18, Z+8	; 0x08
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	82 17       	cp	r24, r18
    311a:	93 07       	cpc	r25, r19
    311c:	2c f5       	brge	.+74     	; 0x3168 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1d0>
    311e:	d7 01       	movw	r26, r14
    3120:	2d 91       	ld	r18, X+
    3122:	3d 91       	ld	r19, X+
    3124:	7d 01       	movw	r14, r26
    3126:	b3 01       	movw	r22, r6
    3128:	6c 19       	sub	r22, r12
    312a:	7d 09       	sbc	r23, r13
    312c:	d5 01       	movw	r26, r10
    312e:	ed 91       	ld	r30, X+
    3130:	fc 91       	ld	r31, X
    3132:	e6 0f       	add	r30, r22
    3134:	f7 1f       	adc	r31, r23
    3136:	40 81       	ld	r20, Z
    3138:	51 81       	ldd	r21, Z+1	; 0x01
    313a:	42 17       	cp	r20, r18
    313c:	53 07       	cpc	r21, r19
    313e:	10 f4       	brcc	.+4      	; 0x3144 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1ac>
    3140:	31 83       	std	Z+1, r19	; 0x01
    3142:	20 83       	st	Z, r18
    3144:	f3 01       	movw	r30, r6
    3146:	21 91       	ld	r18, Z+
    3148:	31 91       	ld	r19, Z+
    314a:	3f 01       	movw	r6, r30
    314c:	d4 01       	movw	r26, r8
    314e:	ed 91       	ld	r30, X+
    3150:	fc 91       	ld	r31, X
    3152:	e6 0f       	add	r30, r22
    3154:	f7 1f       	adc	r31, r23
    3156:	40 81       	ld	r20, Z
    3158:	51 81       	ldd	r21, Z+1	; 0x01
    315a:	24 17       	cp	r18, r20
    315c:	35 07       	cpc	r19, r21
    315e:	10 f4       	brcc	.+4      	; 0x3164 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x1cc>
    3160:	31 83       	std	Z+1, r19	; 0x01
    3162:	20 83       	st	Z, r18
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	d5 cf       	rjmp	.-86     	; 0x3112 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h+0x17a>
    3168:	c0 5a       	subi	r28, 0xA0	; 160
    316a:	df 4f       	sbci	r29, 0xFF	; 255
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	1f 91       	pop	r17
    317c:	0f 91       	pop	r16
    317e:	ff 90       	pop	r15
    3180:	ef 90       	pop	r14
    3182:	df 90       	pop	r13
    3184:	cf 90       	pop	r12
    3186:	bf 90       	pop	r11
    3188:	af 90       	pop	r10
    318a:	9f 90       	pop	r9
    318c:	8f 90       	pop	r8
    318e:	7f 90       	pop	r7
    3190:	6f 90       	pop	r6
    3192:	5f 90       	pop	r5
    3194:	3f 90       	pop	r3
    3196:	2f 90       	pop	r2
    3198:	08 95       	ret

0000319a <_ZN16PololuQTRSensors9calibrateEh>:
    319a:	1f 93       	push	r17
    319c:	cf 93       	push	r28
    319e:	df 93       	push	r29
    31a0:	ec 01       	movw	r28, r24
    31a2:	16 2f       	mov	r17, r22
    31a4:	8f ef       	ldi	r24, 0xFF	; 255
    31a6:	86 0f       	add	r24, r22
    31a8:	82 30       	cpi	r24, 0x02	; 2
    31aa:	18 f0       	brcs	.+6      	; 0x31b2 <_ZN16PololuQTRSensors9calibrateEh+0x18>
    31ac:	66 23       	and	r22, r22
    31ae:	59 f0       	breq	.+22     	; 0x31c6 <_ZN16PololuQTRSensors9calibrateEh+0x2c>
    31b0:	14 c0       	rjmp	.+40     	; 0x31da <_ZN16PololuQTRSensors9calibrateEh+0x40>
    31b2:	21 e0       	ldi	r18, 0x01	; 1
    31b4:	ae 01       	movw	r20, r28
    31b6:	4e 5f       	subi	r20, 0xFE	; 254
    31b8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ba:	be 01       	movw	r22, r28
    31bc:	ce 01       	movw	r24, r28
    31be:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    31c2:	12 30       	cpi	r17, 0x02	; 2
    31c4:	51 f4       	brne	.+20     	; 0x31da <_ZN16PololuQTRSensors9calibrateEh+0x40>
    31c6:	ae 01       	movw	r20, r28
    31c8:	4a 5f       	subi	r20, 0xFA	; 250
    31ca:	5f 4f       	sbci	r21, 0xFF	; 255
    31cc:	be 01       	movw	r22, r28
    31ce:	6c 5f       	subi	r22, 0xFC	; 252
    31d0:	7f 4f       	sbci	r23, 0xFF	; 255
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	ce 01       	movw	r24, r28
    31d6:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <_ZN16PololuQTRSensors16calibrateOnOrOffEPPjS1_h>
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	08 95       	ret

000031e2 <_ZN16PololuQTRSensors14readCalibratedEPjh>:
    31e2:	a0 e0       	ldi	r26, 0x00	; 0
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e7 ef       	ldi	r30, 0xF7	; 247
    31e8:	f8 e1       	ldi	r31, 0x18	; 24
    31ea:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__prologue_saves__+0x12>
    31ee:	ec 01       	movw	r28, r24
    31f0:	8b 01       	movw	r16, r22
    31f2:	b4 2e       	mov	r11, r20
    31f4:	84 2f       	mov	r24, r20
    31f6:	8d 7f       	andi	r24, 0xFD	; 253
    31f8:	51 f4       	brne	.+20     	; 0x320e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    31fa:	8c 81       	ldd	r24, Y+4	; 0x04
    31fc:	9d 81       	ldd	r25, Y+5	; 0x05
    31fe:	89 2b       	or	r24, r25
    3200:	09 f4       	brne	.+2      	; 0x3204 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x22>
    3202:	97 c0       	rjmp	.+302    	; 0x3332 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3204:	8e 81       	ldd	r24, Y+6	; 0x06
    3206:	9f 81       	ldd	r25, Y+7	; 0x07
    3208:	89 2b       	or	r24, r25
    320a:	09 f4       	brne	.+2      	; 0x320e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x2c>
    320c:	92 c0       	rjmp	.+292    	; 0x3332 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    320e:	8f ef       	ldi	r24, 0xFF	; 255
    3210:	8b 0d       	add	r24, r11
    3212:	82 30       	cpi	r24, 0x02	; 2
    3214:	50 f4       	brcc	.+20     	; 0x322a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3216:	88 81       	ld	r24, Y
    3218:	99 81       	ldd	r25, Y+1	; 0x01
    321a:	89 2b       	or	r24, r25
    321c:	09 f4       	brne	.+2      	; 0x3220 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x3e>
    321e:	89 c0       	rjmp	.+274    	; 0x3332 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    3220:	8a 81       	ldd	r24, Y+2	; 0x02
    3222:	9b 81       	ldd	r25, Y+3	; 0x03
    3224:	89 2b       	or	r24, r25
    3226:	09 f4       	brne	.+2      	; 0x322a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x48>
    3228:	84 c0       	rjmp	.+264    	; 0x3332 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    322a:	4b 2d       	mov	r20, r11
    322c:	b8 01       	movw	r22, r16
    322e:	ce 01       	movw	r24, r28
    3230:	0e 94 6f 17 	call	0x2ede	; 0x2ede <_ZN16PololuQTRSensors4readEPjh>
    3234:	78 01       	movw	r14, r16
    3236:	00 e0       	ldi	r16, 0x00	; 0
    3238:	10 e0       	ldi	r17, 0x00	; 0
    323a:	c1 2c       	mov	r12, r1
    323c:	d1 2c       	mov	r13, r1
    323e:	88 85       	ldd	r24, Y+8	; 0x08
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	c8 16       	cp	r12, r24
    3244:	d9 06       	cpc	r13, r25
    3246:	0c f0       	brlt	.+2      	; 0x324a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x68>
    3248:	74 c0       	rjmp	.+232    	; 0x3332 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x150>
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	b8 12       	cpse	r11, r24
    324e:	0a c0       	rjmp	.+20     	; 0x3264 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x82>
    3250:	ea 81       	ldd	r30, Y+2	; 0x02
    3252:	fb 81       	ldd	r31, Y+3	; 0x03
    3254:	e0 0f       	add	r30, r16
    3256:	f1 1f       	adc	r31, r17
    3258:	01 90       	ld	r0, Z+
    325a:	f0 81       	ld	r31, Z
    325c:	e0 2d       	mov	r30, r0
    325e:	a8 81       	ld	r26, Y
    3260:	b9 81       	ldd	r27, Y+1	; 0x01
    3262:	0d c0       	rjmp	.+26     	; 0x327e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x9c>
    3264:	8c 81       	ldd	r24, Y+4	; 0x04
    3266:	9d 81       	ldd	r25, Y+5	; 0x05
    3268:	2e 81       	ldd	r18, Y+6	; 0x06
    326a:	3f 81       	ldd	r19, Y+7	; 0x07
    326c:	b1 10       	cpse	r11, r1
    326e:	0c c0       	rjmp	.+24     	; 0x3288 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xa6>
    3270:	f9 01       	movw	r30, r18
    3272:	e0 0f       	add	r30, r16
    3274:	f1 1f       	adc	r31, r17
    3276:	01 90       	ld	r0, Z+
    3278:	f0 81       	ld	r31, Z
    327a:	e0 2d       	mov	r30, r0
    327c:	dc 01       	movw	r26, r24
    327e:	a0 0f       	add	r26, r16
    3280:	b1 1f       	adc	r27, r17
    3282:	8d 91       	ld	r24, X+
    3284:	9c 91       	ld	r25, X
    3286:	28 c0       	rjmp	.+80     	; 0x32d8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    3288:	fc 01       	movw	r30, r24
    328a:	e0 0f       	add	r30, r16
    328c:	f1 1f       	adc	r31, r17
    328e:	40 81       	ld	r20, Z
    3290:	51 81       	ldd	r21, Z+1	; 0x01
    3292:	e8 81       	ld	r30, Y
    3294:	f9 81       	ldd	r31, Y+1	; 0x01
    3296:	e0 0f       	add	r30, r16
    3298:	f1 1f       	adc	r31, r17
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	ee 85       	ldd	r30, Y+14	; 0x0e
    32a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    32a2:	48 17       	cp	r20, r24
    32a4:	59 07       	cpc	r21, r25
    32a6:	10 f4       	brcc	.+4      	; 0x32ac <_ZN16PololuQTRSensors14readCalibratedEPjh+0xca>
    32a8:	cf 01       	movw	r24, r30
    32aa:	04 c0       	rjmp	.+8      	; 0x32b4 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xd2>
    32ac:	8e 0f       	add	r24, r30
    32ae:	9f 1f       	adc	r25, r31
    32b0:	84 1b       	sub	r24, r20
    32b2:	95 0b       	sbc	r25, r21
    32b4:	d9 01       	movw	r26, r18
    32b6:	a0 0f       	add	r26, r16
    32b8:	b1 1f       	adc	r27, r17
    32ba:	2d 91       	ld	r18, X+
    32bc:	3c 91       	ld	r19, X
    32be:	aa 81       	ldd	r26, Y+2	; 0x02
    32c0:	bb 81       	ldd	r27, Y+3	; 0x03
    32c2:	a0 0f       	add	r26, r16
    32c4:	b1 1f       	adc	r27, r17
    32c6:	4d 91       	ld	r20, X+
    32c8:	5c 91       	ld	r21, X
    32ca:	24 17       	cp	r18, r20
    32cc:	35 07       	cpc	r19, r21
    32ce:	20 f0       	brcs	.+8      	; 0x32d8 <_ZN16PololuQTRSensors14readCalibratedEPjh+0xf6>
    32d0:	e4 0f       	add	r30, r20
    32d2:	f5 1f       	adc	r31, r21
    32d4:	e2 1b       	sub	r30, r18
    32d6:	f3 0b       	sbc	r31, r19
    32d8:	e8 1b       	sub	r30, r24
    32da:	f9 0b       	sbc	r31, r25
    32dc:	a9 f0       	breq	.+42     	; 0x3308 <_ZN16PololuQTRSensors14readCalibratedEPjh+0x126>
    32de:	d7 01       	movw	r26, r14
    32e0:	2d 91       	ld	r18, X+
    32e2:	3c 91       	ld	r19, X
    32e4:	40 e0       	ldi	r20, 0x00	; 0
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	28 1b       	sub	r18, r24
    32ea:	39 0b       	sbc	r19, r25
    32ec:	41 09       	sbc	r20, r1
    32ee:	51 09       	sbc	r21, r1
    32f0:	a8 ee       	ldi	r26, 0xE8	; 232
    32f2:	b3 e0       	ldi	r27, 0x03	; 3
    32f4:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__muluhisi3>
    32f8:	9f 01       	movw	r18, r30
    32fa:	40 e0       	ldi	r20, 0x00	; 0
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	0e 94 87 1a 	call	0x350e	; 0x350e <__divmodsi4>
    3302:	37 fd       	sbrc	r19, 7
    3304:	0a c0       	rjmp	.+20     	; 0x331a <_ZN16PololuQTRSensors14readCalibratedEPjh+0x138>
    3306:	02 c0       	rjmp	.+4      	; 0x330c <_ZN16PololuQTRSensors14readCalibratedEPjh+0x12a>
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	29 3e       	cpi	r18, 0xE9	; 233
    330e:	b3 e0       	ldi	r27, 0x03	; 3
    3310:	3b 07       	cpc	r19, r27
    3312:	2c f0       	brlt	.+10     	; 0x331e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    3314:	28 ee       	ldi	r18, 0xE8	; 232
    3316:	33 e0       	ldi	r19, 0x03	; 3
    3318:	02 c0       	rjmp	.+4      	; 0x331e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x13c>
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	f7 01       	movw	r30, r14
    3320:	21 93       	st	Z+, r18
    3322:	31 93       	st	Z+, r19
    3324:	7f 01       	movw	r14, r30
    3326:	ff ef       	ldi	r31, 0xFF	; 255
    3328:	cf 1a       	sub	r12, r31
    332a:	df 0a       	sbc	r13, r31
    332c:	0e 5f       	subi	r16, 0xFE	; 254
    332e:	1f 4f       	sbci	r17, 0xFF	; 255
    3330:	86 cf       	rjmp	.-244    	; 0x323e <_ZN16PololuQTRSensors14readCalibratedEPjh+0x5c>
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	e9 e0       	ldi	r30, 0x09	; 9
    3338:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <__epilogue_restores__+0x12>

0000333c <_ZN16PololuQTRSensors8readLineEPjhh>:
    333c:	a0 e0       	ldi	r26, 0x00	; 0
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e4 ea       	ldi	r30, 0xA4	; 164
    3342:	f9 e1       	ldi	r31, 0x19	; 25
    3344:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__prologue_saves__>
    3348:	ec 01       	movw	r28, r24
    334a:	8b 01       	movw	r16, r22
    334c:	82 2e       	mov	r8, r18
    334e:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <_ZN16PololuQTRSensors14readCalibratedEPjh>
    3352:	28 84       	ldd	r2, Y+8	; 0x08
    3354:	e8 01       	movw	r28, r16
    3356:	41 2c       	mov	r4, r1
    3358:	51 2c       	mov	r5, r1
    335a:	32 01       	movw	r6, r4
    335c:	00 e0       	ldi	r16, 0x00	; 0
    335e:	10 e0       	ldi	r17, 0x00	; 0
    3360:	c1 2c       	mov	r12, r1
    3362:	d1 2c       	mov	r13, r1
    3364:	76 01       	movw	r14, r12
    3366:	31 2c       	mov	r3, r1
    3368:	91 2c       	mov	r9, r1
    336a:	58 ee       	ldi	r21, 0xE8	; 232
    336c:	a5 2e       	mov	r10, r21
    336e:	53 e0       	ldi	r21, 0x03	; 3
    3370:	b5 2e       	mov	r11, r21
    3372:	92 14       	cp	r9, r2
    3374:	21 f1       	breq	.+72     	; 0x33be <_ZN16PololuQTRSensors8readLineEPjhh+0x82>
    3376:	e9 91       	ld	r30, Y+
    3378:	f9 91       	ld	r31, Y+
    337a:	88 20       	and	r8, r8
    337c:	21 f0       	breq	.+8      	; 0x3386 <_ZN16PololuQTRSensors8readLineEPjhh+0x4a>
    337e:	c5 01       	movw	r24, r10
    3380:	8e 1b       	sub	r24, r30
    3382:	9f 0b       	sbc	r25, r31
    3384:	fc 01       	movw	r30, r24
    3386:	e9 3c       	cpi	r30, 0xC9	; 201
    3388:	f1 05       	cpc	r31, r1
    338a:	24 f4       	brge	.+8      	; 0x3394 <_ZN16PololuQTRSensors8readLineEPjhh+0x58>
    338c:	e3 33       	cpi	r30, 0x33	; 51
    338e:	f1 05       	cpc	r31, r1
    3390:	74 f0       	brlt	.+28     	; 0x33ae <_ZN16PololuQTRSensors8readLineEPjhh+0x72>
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <_ZN16PololuQTRSensors8readLineEPjhh+0x5c>
    3394:	33 24       	eor	r3, r3
    3396:	33 94       	inc	r3
    3398:	df 01       	movw	r26, r30
    339a:	a3 01       	movw	r20, r6
    339c:	92 01       	movw	r18, r4
    339e:	0e 94 c6 1a 	call	0x358c	; 0x358c <__mulshisi3>
    33a2:	c6 0e       	add	r12, r22
    33a4:	d7 1e       	adc	r13, r23
    33a6:	e8 1e       	adc	r14, r24
    33a8:	f9 1e       	adc	r15, r25
    33aa:	0e 0f       	add	r16, r30
    33ac:	1f 1f       	adc	r17, r31
    33ae:	93 94       	inc	r9
    33b0:	98 ee       	ldi	r25, 0xE8	; 232
    33b2:	49 0e       	add	r4, r25
    33b4:	93 e0       	ldi	r25, 0x03	; 3
    33b6:	59 1e       	adc	r5, r25
    33b8:	61 1c       	adc	r6, r1
    33ba:	71 1c       	adc	r7, r1
    33bc:	da cf       	rjmp	.-76     	; 0x3372 <_ZN16PololuQTRSensors8readLineEPjhh+0x36>
    33be:	31 10       	cpse	r3, r1
    33c0:	1e c0       	rjmp	.+60     	; 0x33fe <_ZN16PololuQTRSensors8readLineEPjhh+0xc2>
    33c2:	49 2d       	mov	r20, r9
    33c4:	50 e0       	ldi	r21, 0x00	; 0
    33c6:	41 50       	subi	r20, 0x01	; 1
    33c8:	51 09       	sbc	r21, r1
    33ca:	24 ef       	ldi	r18, 0xF4	; 244
    33cc:	31 e0       	ldi	r19, 0x01	; 1
    33ce:	42 9f       	mul	r20, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	43 9f       	mul	r20, r19
    33d4:	90 0d       	add	r25, r0
    33d6:	52 9f       	mul	r21, r18
    33d8:	90 0d       	add	r25, r0
    33da:	11 24       	eor	r1, r1
    33dc:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    33e0:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    33e4:	28 17       	cp	r18, r24
    33e6:	39 07       	cpc	r19, r25
    33e8:	b4 f0       	brlt	.+44     	; 0x3416 <_ZN16PololuQTRSensors8readLineEPjhh+0xda>
    33ea:	88 ee       	ldi	r24, 0xE8	; 232
    33ec:	93 e0       	ldi	r25, 0x03	; 3
    33ee:	48 9f       	mul	r20, r24
    33f0:	90 01       	movw	r18, r0
    33f2:	49 9f       	mul	r20, r25
    33f4:	30 0d       	add	r19, r0
    33f6:	58 9f       	mul	r21, r24
    33f8:	30 0d       	add	r19, r0
    33fa:	11 24       	eor	r1, r1
    33fc:	0e c0       	rjmp	.+28     	; 0x341a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    33fe:	98 01       	movw	r18, r16
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	c7 01       	movw	r24, r14
    3406:	b6 01       	movw	r22, r12
    3408:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    340c:	30 93 fe 01 	sts	0x01FE, r19	; 0x8001fe <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value+0x1>
    3410:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <_ZZN16PololuQTRSensors8readLineEPjhhE10last_value>
    3414:	02 c0       	rjmp	.+4      	; 0x341a <_ZN16PololuQTRSensors8readLineEPjhh+0xde>
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	c9 01       	movw	r24, r18
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	e2 e1       	ldi	r30, 0x12	; 18
    3422:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <__epilogue_restores__>

00003426 <_ZN16PololuQTRSensorsD1Ev>:
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	ec 01       	movw	r28, r24
    342c:	8a 81       	ldd	r24, Y+2	; 0x02
    342e:	9b 81       	ldd	r25, Y+3	; 0x03
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	11 f0       	breq	.+4      	; 0x3438 <_ZN16PololuQTRSensorsD1Ev+0x12>
    3434:	0e 94 9d 1b 	call	0x373a	; 0x373a <free>
    3438:	8e 81       	ldd	r24, Y+6	; 0x06
    343a:	9f 81       	ldd	r25, Y+7	; 0x07
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	11 f0       	breq	.+4      	; 0x3444 <_ZN16PololuQTRSensorsD1Ev+0x1e>
    3440:	0e 94 9d 1b 	call	0x373a	; 0x373a <free>
    3444:	88 81       	ld	r24, Y
    3446:	99 81       	ldd	r25, Y+1	; 0x01
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	11 f0       	breq	.+4      	; 0x3450 <_ZN16PololuQTRSensorsD1Ev+0x2a>
    344c:	0e 94 9d 1b 	call	0x373a	; 0x373a <free>
    3450:	8c 81       	ldd	r24, Y+4	; 0x04
    3452:	9d 81       	ldd	r25, Y+5	; 0x05
    3454:	00 97       	sbiw	r24, 0x00	; 0
    3456:	11 f0       	breq	.+4      	; 0x345c <_ZN16PololuQTRSensorsD1Ev+0x36>
    3458:	0e 94 9d 1b 	call	0x373a	; 0x373a <free>
    345c:	df 91       	pop	r29
    345e:	cf 91       	pop	r28
    3460:	08 95       	ret

00003462 <__udivmodqi4>:
    3462:	99 1b       	sub	r25, r25
    3464:	79 e0       	ldi	r23, 0x09	; 9
    3466:	04 c0       	rjmp	.+8      	; 0x3470 <__udivmodqi4_ep>

00003468 <__udivmodqi4_loop>:
    3468:	99 1f       	adc	r25, r25
    346a:	96 17       	cp	r25, r22
    346c:	08 f0       	brcs	.+2      	; 0x3470 <__udivmodqi4_ep>
    346e:	96 1b       	sub	r25, r22

00003470 <__udivmodqi4_ep>:
    3470:	88 1f       	adc	r24, r24
    3472:	7a 95       	dec	r23
    3474:	c9 f7       	brne	.-14     	; 0x3468 <__udivmodqi4_loop>
    3476:	80 95       	com	r24
    3478:	08 95       	ret

0000347a <__udivmodhi4>:
    347a:	aa 1b       	sub	r26, r26
    347c:	bb 1b       	sub	r27, r27
    347e:	51 e1       	ldi	r21, 0x11	; 17
    3480:	07 c0       	rjmp	.+14     	; 0x3490 <__udivmodhi4_ep>

00003482 <__udivmodhi4_loop>:
    3482:	aa 1f       	adc	r26, r26
    3484:	bb 1f       	adc	r27, r27
    3486:	a6 17       	cp	r26, r22
    3488:	b7 07       	cpc	r27, r23
    348a:	10 f0       	brcs	.+4      	; 0x3490 <__udivmodhi4_ep>
    348c:	a6 1b       	sub	r26, r22
    348e:	b7 0b       	sbc	r27, r23

00003490 <__udivmodhi4_ep>:
    3490:	88 1f       	adc	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	5a 95       	dec	r21
    3496:	a9 f7       	brne	.-22     	; 0x3482 <__udivmodhi4_loop>
    3498:	80 95       	com	r24
    349a:	90 95       	com	r25
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	08 95       	ret

000034a2 <__divmodhi4>:
    34a2:	97 fb       	bst	r25, 7
    34a4:	07 2e       	mov	r0, r23
    34a6:	16 f4       	brtc	.+4      	; 0x34ac <__divmodhi4+0xa>
    34a8:	00 94       	com	r0
    34aa:	07 d0       	rcall	.+14     	; 0x34ba <__divmodhi4_neg1>
    34ac:	77 fd       	sbrc	r23, 7
    34ae:	09 d0       	rcall	.+18     	; 0x34c2 <__divmodhi4_neg2>
    34b0:	0e 94 3d 1a 	call	0x347a	; 0x347a <__udivmodhi4>
    34b4:	07 fc       	sbrc	r0, 7
    34b6:	05 d0       	rcall	.+10     	; 0x34c2 <__divmodhi4_neg2>
    34b8:	3e f4       	brtc	.+14     	; 0x34c8 <__divmodhi4_exit>

000034ba <__divmodhi4_neg1>:
    34ba:	90 95       	com	r25
    34bc:	81 95       	neg	r24
    34be:	9f 4f       	sbci	r25, 0xFF	; 255
    34c0:	08 95       	ret

000034c2 <__divmodhi4_neg2>:
    34c2:	70 95       	com	r23
    34c4:	61 95       	neg	r22
    34c6:	7f 4f       	sbci	r23, 0xFF	; 255

000034c8 <__divmodhi4_exit>:
    34c8:	08 95       	ret

000034ca <__udivmodsi4>:
    34ca:	a1 e2       	ldi	r26, 0x21	; 33
    34cc:	1a 2e       	mov	r1, r26
    34ce:	aa 1b       	sub	r26, r26
    34d0:	bb 1b       	sub	r27, r27
    34d2:	fd 01       	movw	r30, r26
    34d4:	0d c0       	rjmp	.+26     	; 0x34f0 <__udivmodsi4_ep>

000034d6 <__udivmodsi4_loop>:
    34d6:	aa 1f       	adc	r26, r26
    34d8:	bb 1f       	adc	r27, r27
    34da:	ee 1f       	adc	r30, r30
    34dc:	ff 1f       	adc	r31, r31
    34de:	a2 17       	cp	r26, r18
    34e0:	b3 07       	cpc	r27, r19
    34e2:	e4 07       	cpc	r30, r20
    34e4:	f5 07       	cpc	r31, r21
    34e6:	20 f0       	brcs	.+8      	; 0x34f0 <__udivmodsi4_ep>
    34e8:	a2 1b       	sub	r26, r18
    34ea:	b3 0b       	sbc	r27, r19
    34ec:	e4 0b       	sbc	r30, r20
    34ee:	f5 0b       	sbc	r31, r21

000034f0 <__udivmodsi4_ep>:
    34f0:	66 1f       	adc	r22, r22
    34f2:	77 1f       	adc	r23, r23
    34f4:	88 1f       	adc	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	1a 94       	dec	r1
    34fa:	69 f7       	brne	.-38     	; 0x34d6 <__udivmodsi4_loop>
    34fc:	60 95       	com	r22
    34fe:	70 95       	com	r23
    3500:	80 95       	com	r24
    3502:	90 95       	com	r25
    3504:	9b 01       	movw	r18, r22
    3506:	ac 01       	movw	r20, r24
    3508:	bd 01       	movw	r22, r26
    350a:	cf 01       	movw	r24, r30
    350c:	08 95       	ret

0000350e <__divmodsi4>:
    350e:	05 2e       	mov	r0, r21
    3510:	97 fb       	bst	r25, 7
    3512:	1e f4       	brtc	.+6      	; 0x351a <__divmodsi4+0xc>
    3514:	00 94       	com	r0
    3516:	0e 94 9e 1a 	call	0x353c	; 0x353c <__negsi2>
    351a:	57 fd       	sbrc	r21, 7
    351c:	07 d0       	rcall	.+14     	; 0x352c <__divmodsi4_neg2>
    351e:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__udivmodsi4>
    3522:	07 fc       	sbrc	r0, 7
    3524:	03 d0       	rcall	.+6      	; 0x352c <__divmodsi4_neg2>
    3526:	4e f4       	brtc	.+18     	; 0x353a <__divmodsi4_exit>
    3528:	0c 94 9e 1a 	jmp	0x353c	; 0x353c <__negsi2>

0000352c <__divmodsi4_neg2>:
    352c:	50 95       	com	r21
    352e:	40 95       	com	r20
    3530:	30 95       	com	r19
    3532:	21 95       	neg	r18
    3534:	3f 4f       	sbci	r19, 0xFF	; 255
    3536:	4f 4f       	sbci	r20, 0xFF	; 255
    3538:	5f 4f       	sbci	r21, 0xFF	; 255

0000353a <__divmodsi4_exit>:
    353a:	08 95       	ret

0000353c <__negsi2>:
    353c:	90 95       	com	r25
    353e:	80 95       	com	r24
    3540:	70 95       	com	r23
    3542:	61 95       	neg	r22
    3544:	7f 4f       	sbci	r23, 0xFF	; 255
    3546:	8f 4f       	sbci	r24, 0xFF	; 255
    3548:	9f 4f       	sbci	r25, 0xFF	; 255
    354a:	08 95       	ret

0000354c <__tablejump2__>:
    354c:	ee 0f       	add	r30, r30
    354e:	ff 1f       	adc	r31, r31
    3550:	05 90       	lpm	r0, Z+
    3552:	f4 91       	lpm	r31, Z
    3554:	e0 2d       	mov	r30, r0
    3556:	09 94       	ijmp

00003558 <__umulhisi3>:
    3558:	a2 9f       	mul	r26, r18
    355a:	b0 01       	movw	r22, r0
    355c:	b3 9f       	mul	r27, r19
    355e:	c0 01       	movw	r24, r0
    3560:	a3 9f       	mul	r26, r19
    3562:	70 0d       	add	r23, r0
    3564:	81 1d       	adc	r24, r1
    3566:	11 24       	eor	r1, r1
    3568:	91 1d       	adc	r25, r1
    356a:	b2 9f       	mul	r27, r18
    356c:	70 0d       	add	r23, r0
    356e:	81 1d       	adc	r24, r1
    3570:	11 24       	eor	r1, r1
    3572:	91 1d       	adc	r25, r1
    3574:	08 95       	ret

00003576 <__muluhisi3>:
    3576:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__umulhisi3>
    357a:	a5 9f       	mul	r26, r21
    357c:	90 0d       	add	r25, r0
    357e:	b4 9f       	mul	r27, r20
    3580:	90 0d       	add	r25, r0
    3582:	a4 9f       	mul	r26, r20
    3584:	80 0d       	add	r24, r0
    3586:	91 1d       	adc	r25, r1
    3588:	11 24       	eor	r1, r1
    358a:	08 95       	ret

0000358c <__mulshisi3>:
    358c:	b7 ff       	sbrs	r27, 7
    358e:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__muluhisi3>

00003592 <__mulohisi3>:
    3592:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__muluhisi3>
    3596:	82 1b       	sub	r24, r18
    3598:	93 0b       	sbc	r25, r19
    359a:	08 95       	ret

0000359c <__prologue_saves__>:
    359c:	2f 92       	push	r2
    359e:	3f 92       	push	r3
    35a0:	4f 92       	push	r4
    35a2:	5f 92       	push	r5
    35a4:	6f 92       	push	r6
    35a6:	7f 92       	push	r7
    35a8:	8f 92       	push	r8
    35aa:	9f 92       	push	r9
    35ac:	af 92       	push	r10
    35ae:	bf 92       	push	r11
    35b0:	cf 92       	push	r12
    35b2:	df 92       	push	r13
    35b4:	ef 92       	push	r14
    35b6:	ff 92       	push	r15
    35b8:	0f 93       	push	r16
    35ba:	1f 93       	push	r17
    35bc:	cf 93       	push	r28
    35be:	df 93       	push	r29
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	ca 1b       	sub	r28, r26
    35c6:	db 0b       	sbc	r29, r27
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	09 94       	ijmp

000035d4 <__epilogue_restores__>:
    35d4:	2a 88       	ldd	r2, Y+18	; 0x12
    35d6:	39 88       	ldd	r3, Y+17	; 0x11
    35d8:	48 88       	ldd	r4, Y+16	; 0x10
    35da:	5f 84       	ldd	r5, Y+15	; 0x0f
    35dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    35de:	7d 84       	ldd	r7, Y+13	; 0x0d
    35e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    35e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    35e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    35e6:	b9 84       	ldd	r11, Y+9	; 0x09
    35e8:	c8 84       	ldd	r12, Y+8	; 0x08
    35ea:	df 80       	ldd	r13, Y+7	; 0x07
    35ec:	ee 80       	ldd	r14, Y+6	; 0x06
    35ee:	fd 80       	ldd	r15, Y+5	; 0x05
    35f0:	0c 81       	ldd	r16, Y+4	; 0x04
    35f2:	1b 81       	ldd	r17, Y+3	; 0x03
    35f4:	aa 81       	ldd	r26, Y+2	; 0x02
    35f6:	b9 81       	ldd	r27, Y+1	; 0x01
    35f8:	ce 0f       	add	r28, r30
    35fa:	d1 1d       	adc	r29, r1
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	ed 01       	movw	r28, r26
    3608:	08 95       	ret

0000360a <malloc>:
    360a:	0f 93       	push	r16
    360c:	1f 93       	push	r17
    360e:	cf 93       	push	r28
    3610:	df 93       	push	r29
    3612:	82 30       	cpi	r24, 0x02	; 2
    3614:	91 05       	cpc	r25, r1
    3616:	10 f4       	brcc	.+4      	; 0x361c <malloc+0x12>
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <__flp>
    3620:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <__flp+0x1>
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	a0 e0       	ldi	r26, 0x00	; 0
    362a:	b0 e0       	ldi	r27, 0x00	; 0
    362c:	30 97       	sbiw	r30, 0x00	; 0
    362e:	19 f1       	breq	.+70     	; 0x3676 <malloc+0x6c>
    3630:	40 81       	ld	r20, Z
    3632:	51 81       	ldd	r21, Z+1	; 0x01
    3634:	02 81       	ldd	r16, Z+2	; 0x02
    3636:	13 81       	ldd	r17, Z+3	; 0x03
    3638:	48 17       	cp	r20, r24
    363a:	59 07       	cpc	r21, r25
    363c:	c8 f0       	brcs	.+50     	; 0x3670 <malloc+0x66>
    363e:	84 17       	cp	r24, r20
    3640:	95 07       	cpc	r25, r21
    3642:	69 f4       	brne	.+26     	; 0x365e <malloc+0x54>
    3644:	10 97       	sbiw	r26, 0x00	; 0
    3646:	31 f0       	breq	.+12     	; 0x3654 <malloc+0x4a>
    3648:	12 96       	adiw	r26, 0x02	; 2
    364a:	0c 93       	st	X, r16
    364c:	12 97       	sbiw	r26, 0x02	; 2
    364e:	13 96       	adiw	r26, 0x03	; 3
    3650:	1c 93       	st	X, r17
    3652:	27 c0       	rjmp	.+78     	; 0x36a2 <malloc+0x98>
    3654:	00 93 19 02 	sts	0x0219, r16	; 0x800219 <__flp>
    3658:	10 93 1a 02 	sts	0x021A, r17	; 0x80021a <__flp+0x1>
    365c:	22 c0       	rjmp	.+68     	; 0x36a2 <malloc+0x98>
    365e:	21 15       	cp	r18, r1
    3660:	31 05       	cpc	r19, r1
    3662:	19 f0       	breq	.+6      	; 0x366a <malloc+0x60>
    3664:	42 17       	cp	r20, r18
    3666:	53 07       	cpc	r21, r19
    3668:	18 f4       	brcc	.+6      	; 0x3670 <malloc+0x66>
    366a:	9a 01       	movw	r18, r20
    366c:	bd 01       	movw	r22, r26
    366e:	ef 01       	movw	r28, r30
    3670:	df 01       	movw	r26, r30
    3672:	f8 01       	movw	r30, r16
    3674:	db cf       	rjmp	.-74     	; 0x362c <malloc+0x22>
    3676:	21 15       	cp	r18, r1
    3678:	31 05       	cpc	r19, r1
    367a:	f9 f0       	breq	.+62     	; 0x36ba <malloc+0xb0>
    367c:	28 1b       	sub	r18, r24
    367e:	39 0b       	sbc	r19, r25
    3680:	24 30       	cpi	r18, 0x04	; 4
    3682:	31 05       	cpc	r19, r1
    3684:	80 f4       	brcc	.+32     	; 0x36a6 <malloc+0x9c>
    3686:	8a 81       	ldd	r24, Y+2	; 0x02
    3688:	9b 81       	ldd	r25, Y+3	; 0x03
    368a:	61 15       	cp	r22, r1
    368c:	71 05       	cpc	r23, r1
    368e:	21 f0       	breq	.+8      	; 0x3698 <malloc+0x8e>
    3690:	fb 01       	movw	r30, r22
    3692:	93 83       	std	Z+3, r25	; 0x03
    3694:	82 83       	std	Z+2, r24	; 0x02
    3696:	04 c0       	rjmp	.+8      	; 0x36a0 <malloc+0x96>
    3698:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <__flp+0x1>
    369c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <__flp>
    36a0:	fe 01       	movw	r30, r28
    36a2:	32 96       	adiw	r30, 0x02	; 2
    36a4:	44 c0       	rjmp	.+136    	; 0x372e <malloc+0x124>
    36a6:	fe 01       	movw	r30, r28
    36a8:	e2 0f       	add	r30, r18
    36aa:	f3 1f       	adc	r31, r19
    36ac:	81 93       	st	Z+, r24
    36ae:	91 93       	st	Z+, r25
    36b0:	22 50       	subi	r18, 0x02	; 2
    36b2:	31 09       	sbc	r19, r1
    36b4:	39 83       	std	Y+1, r19	; 0x01
    36b6:	28 83       	st	Y, r18
    36b8:	3a c0       	rjmp	.+116    	; 0x372e <malloc+0x124>
    36ba:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <__brkval>
    36be:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <__brkval+0x1>
    36c2:	23 2b       	or	r18, r19
    36c4:	41 f4       	brne	.+16     	; 0x36d6 <malloc+0xcc>
    36c6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__malloc_heap_start>
    36ca:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__malloc_heap_start+0x1>
    36ce:	30 93 18 02 	sts	0x0218, r19	; 0x800218 <__brkval+0x1>
    36d2:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <__brkval>
    36d6:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__malloc_heap_end>
    36da:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__malloc_heap_end+0x1>
    36de:	21 15       	cp	r18, r1
    36e0:	31 05       	cpc	r19, r1
    36e2:	41 f4       	brne	.+16     	; 0x36f4 <malloc+0xea>
    36e4:	2d b7       	in	r18, 0x3d	; 61
    36e6:	3e b7       	in	r19, 0x3e	; 62
    36e8:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__malloc_margin>
    36ec:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__malloc_margin+0x1>
    36f0:	24 1b       	sub	r18, r20
    36f2:	35 0b       	sbc	r19, r21
    36f4:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <__brkval>
    36f8:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <__brkval+0x1>
    36fc:	e2 17       	cp	r30, r18
    36fe:	f3 07       	cpc	r31, r19
    3700:	a0 f4       	brcc	.+40     	; 0x372a <malloc+0x120>
    3702:	2e 1b       	sub	r18, r30
    3704:	3f 0b       	sbc	r19, r31
    3706:	28 17       	cp	r18, r24
    3708:	39 07       	cpc	r19, r25
    370a:	78 f0       	brcs	.+30     	; 0x372a <malloc+0x120>
    370c:	ac 01       	movw	r20, r24
    370e:	4e 5f       	subi	r20, 0xFE	; 254
    3710:	5f 4f       	sbci	r21, 0xFF	; 255
    3712:	24 17       	cp	r18, r20
    3714:	35 07       	cpc	r19, r21
    3716:	48 f0       	brcs	.+18     	; 0x372a <malloc+0x120>
    3718:	4e 0f       	add	r20, r30
    371a:	5f 1f       	adc	r21, r31
    371c:	50 93 18 02 	sts	0x0218, r21	; 0x800218 <__brkval+0x1>
    3720:	40 93 17 02 	sts	0x0217, r20	; 0x800217 <__brkval>
    3724:	81 93       	st	Z+, r24
    3726:	91 93       	st	Z+, r25
    3728:	02 c0       	rjmp	.+4      	; 0x372e <malloc+0x124>
    372a:	e0 e0       	ldi	r30, 0x00	; 0
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	cf 01       	movw	r24, r30
    3730:	df 91       	pop	r29
    3732:	cf 91       	pop	r28
    3734:	1f 91       	pop	r17
    3736:	0f 91       	pop	r16
    3738:	08 95       	ret

0000373a <free>:
    373a:	cf 93       	push	r28
    373c:	df 93       	push	r29
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	09 f4       	brne	.+2      	; 0x3744 <free+0xa>
    3742:	81 c0       	rjmp	.+258    	; 0x3846 <free+0x10c>
    3744:	fc 01       	movw	r30, r24
    3746:	32 97       	sbiw	r30, 0x02	; 2
    3748:	13 82       	std	Z+3, r1	; 0x03
    374a:	12 82       	std	Z+2, r1	; 0x02
    374c:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <__flp>
    3750:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <__flp+0x1>
    3754:	10 97       	sbiw	r26, 0x00	; 0
    3756:	81 f4       	brne	.+32     	; 0x3778 <free+0x3e>
    3758:	20 81       	ld	r18, Z
    375a:	31 81       	ldd	r19, Z+1	; 0x01
    375c:	82 0f       	add	r24, r18
    375e:	93 1f       	adc	r25, r19
    3760:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <__brkval>
    3764:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <__brkval+0x1>
    3768:	28 17       	cp	r18, r24
    376a:	39 07       	cpc	r19, r25
    376c:	51 f5       	brne	.+84     	; 0x37c2 <free+0x88>
    376e:	f0 93 18 02 	sts	0x0218, r31	; 0x800218 <__brkval+0x1>
    3772:	e0 93 17 02 	sts	0x0217, r30	; 0x800217 <__brkval>
    3776:	67 c0       	rjmp	.+206    	; 0x3846 <free+0x10c>
    3778:	ed 01       	movw	r28, r26
    377a:	20 e0       	ldi	r18, 0x00	; 0
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	ce 17       	cp	r28, r30
    3780:	df 07       	cpc	r29, r31
    3782:	40 f4       	brcc	.+16     	; 0x3794 <free+0x5a>
    3784:	4a 81       	ldd	r20, Y+2	; 0x02
    3786:	5b 81       	ldd	r21, Y+3	; 0x03
    3788:	9e 01       	movw	r18, r28
    378a:	41 15       	cp	r20, r1
    378c:	51 05       	cpc	r21, r1
    378e:	f1 f0       	breq	.+60     	; 0x37cc <free+0x92>
    3790:	ea 01       	movw	r28, r20
    3792:	f5 cf       	rjmp	.-22     	; 0x377e <free+0x44>
    3794:	d3 83       	std	Z+3, r29	; 0x03
    3796:	c2 83       	std	Z+2, r28	; 0x02
    3798:	40 81       	ld	r20, Z
    379a:	51 81       	ldd	r21, Z+1	; 0x01
    379c:	84 0f       	add	r24, r20
    379e:	95 1f       	adc	r25, r21
    37a0:	c8 17       	cp	r28, r24
    37a2:	d9 07       	cpc	r29, r25
    37a4:	59 f4       	brne	.+22     	; 0x37bc <free+0x82>
    37a6:	88 81       	ld	r24, Y
    37a8:	99 81       	ldd	r25, Y+1	; 0x01
    37aa:	84 0f       	add	r24, r20
    37ac:	95 1f       	adc	r25, r21
    37ae:	02 96       	adiw	r24, 0x02	; 2
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	80 83       	st	Z, r24
    37b4:	8a 81       	ldd	r24, Y+2	; 0x02
    37b6:	9b 81       	ldd	r25, Y+3	; 0x03
    37b8:	93 83       	std	Z+3, r25	; 0x03
    37ba:	82 83       	std	Z+2, r24	; 0x02
    37bc:	21 15       	cp	r18, r1
    37be:	31 05       	cpc	r19, r1
    37c0:	29 f4       	brne	.+10     	; 0x37cc <free+0x92>
    37c2:	f0 93 1a 02 	sts	0x021A, r31	; 0x80021a <__flp+0x1>
    37c6:	e0 93 19 02 	sts	0x0219, r30	; 0x800219 <__flp>
    37ca:	3d c0       	rjmp	.+122    	; 0x3846 <free+0x10c>
    37cc:	e9 01       	movw	r28, r18
    37ce:	fb 83       	std	Y+3, r31	; 0x03
    37d0:	ea 83       	std	Y+2, r30	; 0x02
    37d2:	49 91       	ld	r20, Y+
    37d4:	59 91       	ld	r21, Y+
    37d6:	c4 0f       	add	r28, r20
    37d8:	d5 1f       	adc	r29, r21
    37da:	ec 17       	cp	r30, r28
    37dc:	fd 07       	cpc	r31, r29
    37de:	61 f4       	brne	.+24     	; 0x37f8 <free+0xbe>
    37e0:	80 81       	ld	r24, Z
    37e2:	91 81       	ldd	r25, Z+1	; 0x01
    37e4:	84 0f       	add	r24, r20
    37e6:	95 1f       	adc	r25, r21
    37e8:	02 96       	adiw	r24, 0x02	; 2
    37ea:	e9 01       	movw	r28, r18
    37ec:	99 83       	std	Y+1, r25	; 0x01
    37ee:	88 83       	st	Y, r24
    37f0:	82 81       	ldd	r24, Z+2	; 0x02
    37f2:	93 81       	ldd	r25, Z+3	; 0x03
    37f4:	9b 83       	std	Y+3, r25	; 0x03
    37f6:	8a 83       	std	Y+2, r24	; 0x02
    37f8:	e0 e0       	ldi	r30, 0x00	; 0
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	12 96       	adiw	r26, 0x02	; 2
    37fe:	8d 91       	ld	r24, X+
    3800:	9c 91       	ld	r25, X
    3802:	13 97       	sbiw	r26, 0x03	; 3
    3804:	00 97       	sbiw	r24, 0x00	; 0
    3806:	19 f0       	breq	.+6      	; 0x380e <free+0xd4>
    3808:	fd 01       	movw	r30, r26
    380a:	dc 01       	movw	r26, r24
    380c:	f7 cf       	rjmp	.-18     	; 0x37fc <free+0xc2>
    380e:	8d 91       	ld	r24, X+
    3810:	9c 91       	ld	r25, X
    3812:	11 97       	sbiw	r26, 0x01	; 1
    3814:	9d 01       	movw	r18, r26
    3816:	2e 5f       	subi	r18, 0xFE	; 254
    3818:	3f 4f       	sbci	r19, 0xFF	; 255
    381a:	82 0f       	add	r24, r18
    381c:	93 1f       	adc	r25, r19
    381e:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <__brkval>
    3822:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <__brkval+0x1>
    3826:	28 17       	cp	r18, r24
    3828:	39 07       	cpc	r19, r25
    382a:	69 f4       	brne	.+26     	; 0x3846 <free+0x10c>
    382c:	30 97       	sbiw	r30, 0x00	; 0
    382e:	29 f4       	brne	.+10     	; 0x383a <free+0x100>
    3830:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__flp+0x1>
    3834:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <__flp>
    3838:	02 c0       	rjmp	.+4      	; 0x383e <free+0x104>
    383a:	13 82       	std	Z+3, r1	; 0x03
    383c:	12 82       	std	Z+2, r1	; 0x02
    383e:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <__brkval+0x1>
    3842:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <__brkval>
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	08 95       	ret

0000384c <strncat>:
    384c:	fb 01       	movw	r30, r22
    384e:	dc 01       	movw	r26, r24
    3850:	0d 90       	ld	r0, X+
    3852:	00 20       	and	r0, r0
    3854:	e9 f7       	brne	.-6      	; 0x3850 <strncat+0x4>
    3856:	11 97       	sbiw	r26, 0x01	; 1
    3858:	41 50       	subi	r20, 0x01	; 1
    385a:	50 40       	sbci	r21, 0x00	; 0
    385c:	28 f0       	brcs	.+10     	; 0x3868 <strncat+0x1c>
    385e:	01 90       	ld	r0, Z+
    3860:	00 20       	and	r0, r0
    3862:	0d 92       	st	X+, r0
    3864:	c9 f7       	brne	.-14     	; 0x3858 <strncat+0xc>
    3866:	08 95       	ret
    3868:	1c 92       	st	X, r1
    386a:	08 95       	ret

0000386c <__do_global_dtors>:
    386c:	11 e0       	ldi	r17, 0x01	; 1
    386e:	c2 e2       	ldi	r28, 0x22	; 34
    3870:	d1 e0       	ldi	r29, 0x01	; 1
    3872:	04 c0       	rjmp	.+8      	; 0x387c <__do_global_dtors+0x10>
    3874:	fe 01       	movw	r30, r28
    3876:	0e 94 a6 1a 	call	0x354c	; 0x354c <__tablejump2__>
    387a:	21 96       	adiw	r28, 0x01	; 1
    387c:	c3 32       	cpi	r28, 0x23	; 35
    387e:	d1 07       	cpc	r29, r17
    3880:	c9 f7       	brne	.-14     	; 0x3874 <__do_global_dtors+0x8>
    3882:	f8 94       	cli

00003884 <__stop_program>:
    3884:	ff cf       	rjmp	.-2      	; 0x3884 <__stop_program>
